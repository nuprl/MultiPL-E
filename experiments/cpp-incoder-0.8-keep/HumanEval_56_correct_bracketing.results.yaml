name: HumanEval_56_correct_bracketing
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // initialize\
    \ count and found with the count of '<' and the count of '>'\n  int count = '<',\
    \ found = 0;\n  for (auto c : brackets) {\n    if (c == '<') ++count;\n    else\
    \ if (c == '>') ++found;\n    else return false;\n  }\n  if (found != count) return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4o1veoa3: /tmp/tmp4o1veoa3.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string::size_type\
    \ i, j, k;\n    i = j = k = 0;\n    while(brackets[k]!='\\0') {\n        while(brackets[k]\
    \ == brackets[i] && j < i) {\n            j++;\n        }\n        if(brackets[k]\
    \ == brackets[i]) {\n            i++;\n        }\n        else if(brackets[k]\
    \ == '<') {\n            i++;\n            while(i < j) {\n                if(brackets[k]\
    \ != '<') {\n                    return false;\n                }\n          \
    \      i++;\n                k++;\n            }\n        }\n        else if(brackets[k]\
    \ == '>') {\n            j++;\n            while(j < i) {\n                if(brackets[k]\
    \ != '>') {\n                    return false;\n                }\n          \
    \      j++;\n                k++;\n            }\n        }\n        i++;\n  \
    \      k++;\n    }\n    while(i < j) {\n        if(brackets[i] != '>') {\n   \
    \         return false;\n        }\n        i++;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1b87khsn: /tmp/tmp1b87khsn.cpp:57: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    // if brackets are empty, return true\n    if (n ==\
    \ 0) return true;\n    // initialize a vector of boolean values\n    bool is_open[n\
    \ + 1];\n    // count the opening brackets\n    for (int i = 1; i < n; ++i) {\n\
    \        is_open[i] = brackets[i-1] == '<';\n    }\n    // count the number of\
    \ closed brackets\n    for (int i = 0; i < n; ++i) {\n        is_open[n + i] =\
    \ brackets[i] == '>';\n    }\n    // if the total sum of the opening brackets\
    \ is equal to the total number of closed brackets,\n    // return true\n    return\
    \ is_open[n] == is_open[n + 1];\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzk9lox1k: /tmp/tmpzk9lox1k.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // your\
    \ code goes here\n  int num_open = 0;\n  int num_close = 0;\n  for (int i = 0;\
    \ i < brackets.length(); i++) {\n    if (brackets[i] == '<') {\n      num_open++;\n\
    \    } else {\n      if (brackets[i] == '>') {\n        num_close++;\n      }\n\
    \    }\n  }\n  if (num_open != num_close) {\n    return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprgh8emln: /tmp/tmprgh8emln.cpp:38: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ s;\n  // for each character, push it to stack\n  for (char c : brackets) {\n\
    \    if (c == '<') {\n      s.push(c);\n    } else if (c == '>') {\n      if (!s.empty()\
    \ && s.top() == '<') {\n        s.pop();\n      } else {\n        return false;\n\
    \      }\n    } else {\n      return false;\n    }\n  }\n  return !s.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzc_lisxv: /tmp/tmpzc_lisxv.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // convert\
    \ brackets string to a vector to check if every opening bracket\n    // has a\
    \ corresponding closing bracket.\n    std::vector<char> open_brackets;\n    for\
    \ (char c : brackets) {\n        if (c == '<') {\n            open_brackets.push_back('<');\n\
    \        } else if (c == '>') {\n            open_brackets.push_back('>');\n \
    \       }\n    }\n    // initialize a variable to store whether the brackets are\
    \ correct.\n    bool correct(true);\n    // for each opening bracket in the vector,\
    \ check whether it's closing in the vector\n    for (char c : open_brackets) {\n\
    \        correct = (std::find(brackets.begin(), brackets.end(), c) != brackets.end());\n\
    \    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9mbg8x_p: /tmp/tmp9mbg8x_p.cpp:38: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ open_bracket, bracket1, bracket2;\n    int i = 0;\n    for(; i < brackets.size();i++)\
    \ {\n        open_bracket = brackets.substr(0, i);\n        bracket1 = brackets.substr(i,\
    \ 1);\n        bracket2 = brackets.substr(i + 1, 1);\n        if(open_bracket.empty()\
    \ || bracket1.empty() || bracket2.empty()) {\n            break;\n        }\n\
    \        if(bracket1 == bracket2) {\n            continue;\n        }\n      \
    \  if(bracket1 == \"<\" && bracket2 == \">\") {\n            continue;\n     \
    \   }\n        if(bracket1 == \">\" && bracket2 == \"<\") {\n            continue;\n\
    \        }\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvz9328_v: /tmp/tmpvz9328_v.cpp:42: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ opening_brackets;\n\tfor (auto c : brackets) {\n\t\tif (c == '<')\n\t\t\topening_brackets.push(c);\n\
    \t\telse if (c == '>')\n\t\t\tif (opening_brackets.size() > 0)\n\t\t\t\treturn\
    \ false;\n\t\t\telse\n\t\t\t\topening_brackets.push(c);\n\t}\n\treturn (opening_brackets.size()\
    \ == brackets.size());\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ehu7ayj: /tmp/tmp4ehu7ayj.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    std::stack<std::string> parentheses;\n    for (char c : brackets)\
    \ {\n        if (c == '<') {\n            parentheses.push('>');\n        }\n\
    \        else if (c == '>') {\n            while (parentheses.size() && !parentheses.top())\
    \ {\n                parentheses.pop();\n            }\n            if (!parentheses.size())\
    \ {\n                return false;\n            }\n        }\n        else {\n\
    \            while (parentheses.size() && !parentheses.top()) {\n            \
    \    parentheses.pop();\n            }\n            parentheses.push(c);\n   \
    \     }\n    }\n    return parentheses.empty();\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflor6srx.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpflor6srx.cpp:18:33: error: no matching function for call to \u2018\
    std::stack<std::__cxx11::basic_string<char> >::push(char)\u2019\n   18 |     \
    \        parentheses.push('>');\n      |                                 ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpflor6srx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:233:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  233 |       push(const value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:238:7: note:\
    \ candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp, _Sequence>::value_type&&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  238 |       push(value_type&& __x)\n\
    \      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  238 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n/tmp/tmpflor6s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ brackets;\n  for (char c : brackets) {\n    if (c == '<')\n      brackets.push(c);\n\
    \    else if (c == ']') {\n      if (brackets.empty())\n        return false;\n\
    \      char left = brackets.top();\n      brackets.pop();\n      if (left != '<')\n\
    \        return false;\n    }\n  }\n  return brackets.empty();\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ff859q9.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp4ff859q9.cpp:14:20: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   14 |   std::stack<char> brackets;\n      |         \
    \           ^~~~~~~~\n/tmp/tmp4ff859q9.cpp:15:17: error: no matching function\
    \ for call to \u2018begin(std::stack<char>&)\u2019\n   15 |   for (char c : brackets)\
    \ {\n      |                 ^~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4ff859q9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4ff859q9.cpp:15:17:\
    \ note:   \u2018std::stack<char>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   15 |   for (char c : brackets) {\n      |                 ^~~~~~~~\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/g"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto bracket\
    \ = brackets.find(\"<\");\n    auto start = bracket;\n    auto stop = brackets.find(\"\
    >\", start);\n    // We have found a closing bracket.\n    if (stop == std::string::npos)\
    \ {\n        return false;\n    }\n    // If the closing bracket is not the starting\
    \ bracket, we have a problem.\n    if (stop != start) {\n        return false;\n\
    \    }\n    // If the closing bracket is after the starting bracket, we have a\
    \ problem.\n    if (stop < start) {\n        return false;\n    }\n    // If the\
    \ closing bracket is before the starting bracket, we have a problem.\n    if (start\
    \ < stop) {\n        return false;\n    }\n    // We have found the correct brackets.\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyg21kb72: /tmp/tmpyg21kb72.cpp:38: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<')\n    \
    \        return false;\n        if (brackets[i] == '>')\n            return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmptbjvglnm: /tmp/tmptbjvglnm.cpp:24: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = false;\n    auto start = brackets.begin(), end = brackets.end();\n    while\
    \ (start != end) {\n        if (*start == '<') {\n            auto next_start\
    \ = start+1;\n            while (next_start != end && *next_start != '<') {\n\
    \                next_start++;\n            }\n            if (next_start != end\
    \ && *next_start == '>') {\n                correct = true;\n                start\
    \ = next_start;\n            } else {\n                correct = false;\n    \
    \        }\n        }\n        ++start;\n    }\n    return correct;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2t5wmhhs: /tmp/tmp2t5wmhhs.cpp:35: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // your\
    \ code here\n    std::stack<char> brackets;\n    // push all \"<\" into the stack\n\
    \    for (int i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<')\
    \ {\n            brackets.push(brackets[i]);\n        }\n    }\n    // for each\
    \ stack element\n    while (!brackets.empty()) {\n        // remove the first\
    \ element from the stack\n        char bracket = brackets.top();\n        brackets.pop();\n\
    \        // if element is not \"<\"\n        if (bracket != '<') {\n         \
    \   // return false\n            return false;\n        }\n        // if stack\
    \ is empty, return true\n        if (brackets.empty()) {\n            return true;\n\
    \        }\n        // for each char c that is not \"<\" in the stack\n      \
    \  for (int i = 0; i < brackets.size(); ++i) {\n            // if c is not \"\
    <\"\n            if (brackets[i] == '>') {\n                // push c into the\
    \ stack\n                brackets.push(brackets[i]);\n            }\n        }\n\
    \    }\n    // return false\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflcrjuq4.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpflcrjuq4.cpp:15:22: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   15 |     std::stack<char> brackets;\n      |       \
    \               ^~~~~~~~\n/tmp/tmpflcrjuq4.cpp:18:21: error: no match for \u2018\
    operator[]\u2019 (operand types are \u2018std::stack<char>\u2019 and \u2018int\u2019\
    )\n   18 |         if (brackets[i] == '<') {\n      |                     ^\n\
    /tmp/tmpflcrjuq4.cpp:19:35: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::stack<char>\u2019 and \u2018int\u2019)\n   19 |       \
    \      brackets.push(brackets[i]);\n      |                                  \
    \ ^\n/tmp/tmpflcrjuq4.cpp:39:25: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::stack<char>\u2019 and \u2018int\u2019)\n   39 |       \
    \      if (brackets[i] == '>') {\n      |                         ^\n/tmp/tmpflcrjuq4.cpp:41:39:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::stack<char>\u2019\
    \ and \u2018int\u2019)\n   41 |                 brackets.push(brackets[i]);\n\
    \      |                                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    if (len <= 1) return true;\n    int count = 0;\n   \
    \ for (int i = 0; i < len - 1; i++) {\n        if (brackets[i] == '<') count++;\n\
    \        if (brackets[i] == '>') count--;\n    }\n    if (count < 0) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc1b9g4ui: /tmp/tmpc1b9g4ui.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here.\n    if (brackets.size() % 2 != 0) {\n        return false;\n\
    \    }\n    std::string opening_brackets = brackets.substr(0, brackets.size()\
    \ / 2);\n    std::string closing_brackets = brackets.substr(brackets.size() /\
    \ 2);\n    if (opening_brackets.size() == closing_brackets.size()) {\n       \
    \ for (int i = 0; i < opening_brackets.size(); i++) {\n            char opening_bracket\
    \ = opening_brackets.at(i);\n            char closing_bracket = closing_brackets.at(i);\n\
    \            if (opening_bracket != closing_bracket) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpla1df9co: /tmp/tmpla1df9co.cpp:34: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (char c : brackets) {\n    if (c == '<') count++;\n    if (c ==\
    \ '>') count--;\n    if (count < 0) return false;\n  }\n  return count == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int length\
    \ = brackets.length();\n    for (int i = 0; i < length; i++) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>') return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzki2epbl: /tmp/tmpzki2epbl.cpp:26: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ s = brackets;\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (s[i]\
    \ == '<') {\n            if (s[i + 1] == '>') {\n                i += 2;\n   \
    \         } else {\n                ++i;\n            }\n        }\n    }\n  \
    \  return s.length() == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9dzl15xb: /tmp/tmp9dzl15xb.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int i\
    \ = 0;\n    while(i < brackets.size()) {\n        if(brackets[i] == '<') {\n \
    \           if(brackets[i+1] == '>') {\n                i += 2;\n            \
    \    continue;\n            }\n            i += 1;\n            continue;\n  \
    \      }\n        break;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_bn99az7: /tmp/tmp_bn99az7.cpp:30: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool found_opening_bracket\
    \ = false;\n    for (size_t i = 1; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            found_opening_bracket = true;\n        }\n        if\
    \ (brackets[i] == '>') {\n            if (!found_opening_bracket) {\n        \
    \        return false;\n            }\n        }\n    }\n    return found_opening_bracket;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpivgm_6z7: /tmp/tmpivgm_6z7.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.empty())\n\
    \        return false;\n    int count = 0;\n    for (int i = 1; i < brackets.size()\
    \ - 1; i++)\n        if (brackets[i] == '<')\n            count++;\n        else\
    \ if ((brackets[i] == '>') && (brackets[i - 1] == '<') && (brackets[i + 1] ==\
    \ '>'))\n            count += 3;\n    if (count == (brackets.size() - 2))\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp35xd8y6r: /tmp/tmp35xd8y6r.cpp:29: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    \n   \
    \ // Initialize a map to store the indexes of opening brackets\n    std::map<char,\
    \ int> open_brackets;\n    int index = 0;\n    for (const char c : brackets) {\n\
    \        if (open_brackets.find(c) == open_brackets.end()) {\n            open_brackets[c]\
    \ = index;\n            index++;\n        } else {\n            open_brackets[c]\
    \ = open_brackets[c] + 1;\n        }\n    }\n    \n    // Initialize a map to\
    \ store the indexes of closing brackets\n    std::map<char, int> close_brackets;\n\
    \    index = 0;\n    for (const char c : brackets) {\n        if (close_brackets.find(c)\
    \ == close_brackets.end()) {\n            close_brackets[c] = index;\n       \
    \     index++;\n        } else {\n            close_brackets[c] = close_brackets[c]\
    \ + 1;\n        }\n    }\n    \n    // Return the result after checking all opening\
    \ brackets\n    for (std::map<char, int>::iterator it = open_brackets.begin();\
    \ it != open_brackets.end(); ++it) {\n        // If there is no corresponding\
    \ closing bracket, return False\n        if (close_brackets.find(it->first) ==\
    \ close_brackets.end()) {\n            return false;\n        }\n        // Otherwise,\
    \ if they are equal, return True\n        else if (it->second == close_brackets[it->first])\
    \ {\n            continue;\n        } else {\n            // Return False after\
    \ checking all opening brackets\n            return false;\n        }\n    }\n\
    \    \n    // Return True if all closing brackets are also opening brackets\n\
    \    for (const char c : brackets) {\n        if (close_brackets.find(c) == close_brackets.end())\
    \ {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_n7x9kr2: /tmp/tmp_n7x9kr2.cpp:69: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string\
    \ parenthesis = \"()[]{}<>\";\n  auto find_opening_bracket = [&brackets](char\
    \ c) {\n    return (brackets.find(c) != std::string::npos);\n  };\n  auto open_parens\
    \ = brackets.find_first_not_of(\"(<\");\n  if (open_parens == std::string::npos)\n\
    \    return false;\n  std::string opening_brackets = brackets.substr(0, open_parens);\n\
    \  auto close_parens = brackets.find_first_of(\")>\", open_parens);\n  if (close_parens\
    \ == std::string::npos)\n    return false;\n  auto opening_brackets_without_parens\
    \ =\n      opening_brackets.substr(0, close_parens);\n  std::string closing_brackets\
    \ = brackets.substr(close_parens + 2);\n  return opening_brackets_without_parens\
    \ == parenthesis &&\n         closing_brackets == parenthesis;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 3) > this->size() (which is 2)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (size_t\
    \ i = 0; i < brackets.size() - 1; i++) {\n        if ((brackets[i] != '<') &&\
    \ (brackets[i] != '>'))\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvxt0apwx: /tmp/tmpvxt0apwx.cpp:26: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (auto\
    \ bracket = brackets.cbegin(); bracket != brackets.cend(); ++bracket) {\n    //\
    \ open brackets need to be closed.\n    if (*bracket != '<') return false;\n \
    \   // this loop finds the first \"closing\" bracket.\n    for (auto end = brackets.cend();\
    \ end != brackets.cbegin(); ++end) {\n      if (*end == '>') {\n        // found\
    \ it!\n        break;\n      }\n    }\n    if (end == brackets.cbegin()) return\
    \ false;\n    if (*end != '>') return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_y1mxwvh.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp_y1mxwvh.cpp:24:9: error: \u2018end\u2019 was not declared in this\
    \ scope; did you mean \u2018std::end\u2019?\n   24 |     if (end == brackets.cbegin())\
    \ return false;\n      |         ^~~\n      |         std::end\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_y1mxwvh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n/tmp/tmp_y1mxwvh.cpp:25:10: error: \u2018end\u2019 was\
    \ not declared in this scope; did you mean \u2018std::end\u2019?\n   25 |    \
    \ if (*end != '>') return false;\n      |          ^~~\n      |          std::end\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_y1mxwvh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = (brackets.size() - 1) / 2;\n    for (int i = 0; i < len; i++) {\n        if\
    \ (brackets[i * 2 + 1] == '>' && brackets[i * 2] == '<') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphy9gk0tn: /tmp/tmphy9gk0tn.cpp:26: int main(): Assertion `candidate((\"\
    <><><<><>><>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // We define\
    \ opening and closing brackets as chars, because they\n  // will be compared with\
    \ strings. A char variable can only hold a\n  // single character value, so if\
    \ brackets contains \"<\" or \">\", we can\n  // only have two chars to hold the\
    \ \"<\" and \">\" characters.\n  char opening_bracket = brackets[0];\n  char closing_bracket\
    \ = brackets[1];\n\n  int index_of_opening_bracket = brackets.find(opening_bracket);\n\
    \  // If the opening bracket is not found, return false.\n  if (index_of_opening_bracket\
    \ == std::string::npos) return false;\n\n  int index_of_closing_bracket = brackets.find(closing_bracket);\n\
    \  // If the closing bracket is not found, return false.\n  if (index_of_closing_bracket\
    \ == std::string::npos) return false;\n\n  // We are looking for the opening bracket\
    \ in brackets to close it.\n  int index_of_closing_char_bracket = index_of_opening_bracket;\n\
    \  int count = 1;\n  // Iterate over the string's characters until we find an\n\
    \  // opening bracket that matches the closing bracket.\n  while (index_of_closing_char_bracket\
    \ < brackets.size() &&\n         brackets[index_of_closing_char_bracket] == opening_bracket)\
    \ {\n    index_of_closing_char_bracket += 1;\n    count += 1;\n  }\n  // If the\
    \ count is not equal to the closing bracket length\n  // then there are brackets\
    \ that do not match the closing bracket.\n  if (count != closing_bracket.size())\
    \ {\n    return false;\n  }\n\n  // We found the correct brackets, now we move\
    \ the indexes\n  // of opening brackets and closing brackets.\n  int index_of_opening_char_bracket\
    \ = index_of_opening_bracket;\n  int index_of_closing_char_bracket = index_of_closing_bracket;\n\
    \  count = 1;\n  // Iterate over the string's characters until we find an\n  //\
    \ opening bracket that matches the closing bracket.\n  while (index_of_opening_char_bracket\
    \ < brackets.size() &&\n         brackets[index_of_opening_char_bracket] == opening_bracket)\
    \ {\n    index_of_opening_char_bracket += 1;\n    index_of_closing_char_bracket\
    \ -= 1;\n    count += 1;\n  }\n\n  // If the count is not equal to the opening\
    \ bracket length\n  // then there are brackets that do not match the opening bracket.\n\
    \  if (count != opening_bracket.size()) {\n    return false;\n  }\n\n  // We found\
    \ the correct brackets, now we move the indexes\n  // of opening bracket\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3xvhp3a.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpf3xvhp3a.cpp:41:32: error: request for member \u2018size\u2019 in \u2018\
    closing_bracket\u2019, which is of non-class type \u2018char\u2019\n   41 |  \
    \ if (count != closing_bracket.size()) {\n      |                            \
    \    ^~~~\n/tmp/tmpf3xvhp3a.cpp:48:7: error: redeclaration of \u2018int index_of_closing_char_bracket\u2019\
    \n   48 |   int index_of_closing_char_bracket = index_of_closing_bracket;\n  \
    \    |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf3xvhp3a.cpp:30:7: note: \u2018\
    int index_of_closing_char_bracket\u2019 previously declared here\n   30 |   int\
    \ index_of_closing_char_bracket = index_of_opening_bracket;\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf3xvhp3a.cpp:61:32: error: request for member \u2018size\u2019 in \u2018\
    opening_bracket\u2019, which is of non-class type \u2018char\u2019\n   61 |  \
    \ if (count != opening_bracket.size()) {\n      |                            \
    \    ^~~~\n/tmp/tmpf3xvhp3a.cpp:67:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   67 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int left_open,\
    \ right_open, left_close, right_close;\n    left_open = right_open = left_close\
    \ = right_close = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n\
    \            if (left_open == 0) return false;\n            left_open--;\n   \
    \     }\n        if (c == '>') {\n            if (right_open == 0) return false;\n\
    \            right_open--;\n        }\n        if (c == '{') {\n            if\
    \ (left_close == 0) return false;\n            left_close--;\n        }\n    \
    \    if (c == '}') {\n            if (right_close == 0) return false;\n      \
    \      right_close--;\n        }\n    }\n    return (left_open == 0) && right_open\
    \ == 0 && left_close == 0 && right_close == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp97d18g28: /tmp/tmp97d18g28.cpp:38: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  assert(brackets.size()\
    \ % 2 == 0);\n  int i = 0;\n  int j = 0;\n  while (brackets[i++] != '<') {\n \
    \   ;\n  }\n  while (j < i) {\n    if (brackets[j] != '<') {\n      return false;\n\
    \    }\n    if (brackets[j + 1] != '>') {\n      return false;\n    }\n    j++;\n\
    \    while (j < i) {\n      if (brackets[j] == '<') {\n        i += 2;\n     \
    \ } else {\n        j++;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwa0bw2wt: /tmp/tmpwa0bw2wt.cpp:41: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int bracket_idx\
    \ = brackets.size() - 1;\n    for (int i = 0; i < brackets.size() - 1; i++) {\n\
    \        if (brackets[i] != '<' && brackets[i] != '>') {\n            return false;\n\
    \        }\n    }\n    return (brackets[bracket_idx] == '>');\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp80g_bskb: /tmp/tmp80g_bskb.cpp:28: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    int i = 0;\n    while (brackets.size() > 0) {\n        if (brackets[i]\
    \ == \"<\") {\n            if (brackets[i + 1] != \">\") {\n                result\
    \ = false;\n            }\n            i += 2;\n        } else {\n           \
    \ if (brackets[i + 1] != \"<\") {\n                result = false;\n         \
    \   }\n            i += 1;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwq2y_thu.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpwq2y_thu.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpwq2y_thu.cpp:18:36: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   18 | \
    \            if (brackets[i + 1] != \">\") {\n      |                        \
    \            ^~~\n/tmp/tmpwq2y_thu.cpp:23:36: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   23 |             if (brackets[i\
    \ + 1] != \"<\") {\n      |                                    ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.size()\
    \ < 2) return false;\n  int count = 0;\n  int last = 0;\n  for (int i = 0; i <\
    \ brackets.size(); i++) {\n    if (brackets[i] == '<') count++;\n    else if (brackets[i]\
    \ == '>') count--;\n    if (brackets[i] == '>') last = i;\n    if (count < 0)\
    \ return false;\n  }\n  return last - count == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp99fx6a4m: /tmp/tmp99fx6a4m.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  stack<char>\
    \ stk;\n  for(char ch:brackets) {\n    stk.push(ch);\n  }\n  while(stk.size()\
    \ > 0) {\n    if(stk.top() != '<') {\n      return false;\n    }\n    stk.pop();\n\
    \    if(stk.top() != '<') {\n      return false;\n    }\n    stk.pop();\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuyblfldk.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpuyblfldk.cpp:14:3: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |   stack<char> stk;\n  \
    \    |   ^~~~~\n      |   std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpuyblfldk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpuyblfldk.cpp:14:9: error: expected primary-expression\
    \ before \u2018char\u2019\n   14 |   stack<char> stk;\n      |         ^~~~\n\
    /tmp/tmpuyblfldk.cpp:16:5: error: \u2018stk\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   16 |     stk.push(ch);\n      |     ^~~\n\
    \      |     std\n/tmp/tmpuyblfldk.cpp:18:9: error: \u2018stk\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   18 |   while(stk.size() > 0)\
    \ {\n      |         ^~~\n      |         std\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Initialize\
    \ a counter.\n    int counter = 0;\n    \n    // Iterate over each character.\n\
    \    for (char c : brackets) {\n        // If the counter is equal to 0, add it\
    \ to the \"open\" list.\n        if (counter == 0) open_list.push_back(c);\n \
    \       // If the counter is not equal to 0, add it to the \"closed\" list.\n\
    \        else if (counter != 0) closed_list.push_back(c);\n        \n        //\
    \ Increment the counter.\n        counter++;\n    }\n    \n    // Check if every\
    \ opening bracket has a corresponding closing bracket.\n    // If not, return\
    \ false.\n    for (char c : open_list) {\n        if (closed_list.find(c) == closed_list.end())\n\
    \            return false;\n    }\n    \n    return true;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe97f2uhy.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpe97f2uhy.cpp:20:27: error: \u2018open_list\u2019 was not declared in\
    \ this scope\n   20 |         if (counter == 0) open_list.push_back(c);\n    \
    \  |                           ^~~~~~~~~\n/tmp/tmpe97f2uhy.cpp:22:32: error: \u2018\
    closed_list\u2019 was not declared in this scope\n   22 |         else if (counter\
    \ != 0) closed_list.push_back(c);\n      |                                ^~~~~~~~~~~\n\
    /tmp/tmpe97f2uhy.cpp:30:19: error: \u2018open_list\u2019 was not declared in this\
    \ scope\n   30 |     for (char c : open_list) {\n      |                   ^~~~~~~~~\n\
    /tmp/tmpe97f2uhy.cpp:31:13: error: \u2018closed_list\u2019 was not declared in\
    \ this scope\n   31 |         if (closed_list.find(c) == closed_list.end())\n\
    \      |             ^~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int open_brackets\
    \ = 0;\n  for (int i = 0; i < brackets.length(); i++) {\n    if (brackets[i] ==\
    \ '<') {\n      open_brackets++;\n    } else {\n      if (brackets[i] == '>')\n\
    \        open_brackets--;\n    }\n  }\n  return open_brackets == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxafx0alr: /tmp/tmpxafx0alr.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ count = 0;\n    for (size_t i=0; i<brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            count++;\n        }\n        if (brackets[i] == '>')\
    \ {\n            count--;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd0rck13d: /tmp/tmpd0rck13d.cpp:30: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ temp_brackets;\n    \n    // Initialize temp_brackets to an empty string.\n\
    \    temp_brackets = \"\";\n\n    // Iterate through brackets.\n    for(const\
    \ char &c: brackets) {\n        \n        // If c is \">\", then the next bracket\
    \ must be \"<\".\n        // Otherwise, append c to temp_brackets.\n        if(c\
    \ == '>') {\n            if(brackets[i+1] != '<') temp_brackets += c;\n      \
    \  } else {\n            temp_brackets += c;\n        }\n    }\n\n    // Return\
    \ true if temp_brackets contains the same number of \"<\" and\n    // \">\" as\
    \ brackets.\n    return temp_brackets == brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpops0_l_r.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpops0_l_r.cpp:25:25: error: \u2018i\u2019 was not declared in this scope\n\
    \   25 |             if(brackets[i+1] != '<') temp_brackets += c;\n      |   \
    \                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// Your\
    \ code goes here\n\tint cnt = 0;\n\tfor (int i = 0; i < brackets.size(); i++)\
    \ {\n\t\tchar c = brackets.at(i);\n\t\tfor (int j = 0; j < cnt; j++) {\n\t\t\t\
    if (c == brackets.at(j))\n\t\t\t\treturn false;\n\t\t}\n\t\tcnt += 1;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu42nfqf2: /tmp/tmpu42nfqf2.cpp:29: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<char>\
    \ brackets_vector(brackets.size());\n    for(auto &c: brackets) \n        brackets_vector[brackets_vector.size()\
    \ - c - '<']++;\n    \n    for(int i = 0; i < brackets_vector.size(); i++)\n \
    \       if(brackets_vector[i] > 1) \n            return false;\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxx5e0crf: /tmp/tmpxx5e0crf.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open\
    \ = 0;\n    int close = 0;\n    for (int i = 0; i < brackets.size() - 1; i++)\
    \ {\n        if (brackets[i] == \"<\") {\n            open++;\n        } else\
    \ if (brackets[i] == \">\") {\n            close++;\n        } else {\n      \
    \      return false;\n        }\n    }\n    return open > 0 && close > 0;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4jc5svi8.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp4jc5svi8.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmp4jc5svi8.cpp:19:35: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   19 | \
    \        } else if (brackets[i] == \">\") {\n      |                         \
    \          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // TODO:\
    \ Complete the function.\n    int i = 0;\n    int count = 0;\n    while (brackets[i]\
    \ != '<') {\n        if (brackets[i] == '<')\n            count++;\n        i++;\n\
    \    }\n    while (i < brackets.size())\n        if (brackets[i] == '>')\n   \
    \         count--;\n        i++;\n    return count == 0;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for(int i=0;i<len-1;i++){\n        if(brackets[i]>brackets[i+1])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplvxpdwv7: /tmp/tmplvxpdwv7.cpp:24: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = brackets.size() - 2;\n    for (size_t i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if (brackets[i] != \"<\")\n            return false;\n\
    \    }\n    for (size_t i = 0; i < brackets.size() - 1; i++) {\n        if (brackets[i\
    \ + 1] != \">\")\n            return false;\n    }\n    for (size_t i = 0; i <\
    \ brackets.size() - 2; i++) {\n        if (brackets[i + 2] != \"<<\")\n      \
    \      return false;\n    }\n    for (size_t i = 0; i < brackets.size() - 2; i++)\
    \ {\n        if (brackets[i + 3] != \">>\")\n            return false;\n    }\n\
    \    for (size_t i = 0; i < brackets.size() - 3; i++) {\n        if (brackets[i\
    \ + 4] != \"<->\")\n            return false;\n    }\n    for (size_t i = 0; i\
    \ < brackets.size() - 3; i++) {\n        if (brackets[i + 5] != \">->\")\n   \
    \         return false;\n    }\n    for (size_t i = 0; i < brackets.size() - 3;\
    \ i++) {\n        if (brackets[i + 6] != \"<<->\")\n            return false;\n\
    \    }\n    for (size_t i = 0; i < brackets.size() - 3; i++) {\n        if (brackets[i\
    \ + 7] != \">>>\")\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvgy3ht1y.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpvgy3ht1y.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] != \"<\")\n    \
    \  |                            ^~~\n/tmp/tmpvgy3ht1y.cpp:20:32: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   20 |     \
    \    if (brackets[i + 1] != \">\")\n      |                                ^~~\n\
    /tmp/tmpvgy3ht1y.cpp:24:32: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   24 |         if (brackets[i + 2] != \"<<\")\n\
    \      |                                ^~~~\n/tmp/tmpvgy3ht1y.cpp:28:32: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   28\
    \ |         if (brackets[i + 3] != \">>\")\n      |                          \
    \      ^~~~\n/tmp/tmpvgy3ht1y.cpp:32:32: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   32 |         if (brackets[i + 4] != \"\
    <->\")\n      |                                ^~~~~\n/tmp/tmpvgy3ht1y.cpp:36:32:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   36 |         if (brackets[i + 5] != \">->\")\n      |                    \
    \            ^~~~~\n/tmp/tmpvgy3ht1y.cpp:40:32: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   40 |         if (brackets[i +\
    \ 6] != \"<<->\")\n      |                                ^~~~~~\n/tmp/tmpvgy3ht1y.cpp:44:32:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   44 |         if (brackets[i + 7] != \">>>\")\n      |                    \
    \            ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // loop\
    \ through each char\n    for (char c : brackets) {\n        // if char does not\
    \ equal \">\", then it does NOT have a corresponding \">\" char.\n        // if\
    \ char does equal \">\", then it does have a corresponding \">\" char.\n     \
    \   if (c == '>') {\n            if (brackets[brackets.size() - 1] == '>')\n \
    \               return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm5uxcl3h: /tmp/tmpm5uxcl3h.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int opening_brackets\
    \ = brackets.size();\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i]\
    \ != \"<\") return false;\n  }\n  return opening_brackets == brackets.size() -\
    \ 1;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4yflpwic.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp4yflpwic.cpp:16:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |     if (brackets[i] != \"<\") return false;\n\
    \      |                        ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // loop\
    \ through brackets until we find an opening.\n  char opening = 0;\n  bool found\
    \ = false;\n  for (char c : brackets) {\n    if (c == '<') {\n      opening =\
    \ c;\n      found = true;\n    } else if (opening) {\n      if (c == '>') {\n\
    \        if (opening.compare(brackets) != 0) {\n          found = false;\n   \
    \     }\n      } else {\n        // the closing bracket is not the same as the\
    \ opening, so it's not a match.\n        found = false;\n      }\n    }\n  }\n\
    \  // if we found the opening, then we need to find the closing\n  if (opening)\
    \ {\n    found = false;\n    for (char c : brackets) {\n      if (opening.compare(c)\
    \ == 0) {\n        found = true;\n        break;\n      }\n    }\n  }\n  return\
    \ found;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq61y6gq2.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpq61y6gq2.cpp:23:21: error: request for member \u2018compare\u2019 in\
    \ \u2018opening\u2019, which is of non-class type \u2018char\u2019\n   23 |  \
    \       if (opening.compare(brackets) != 0) {\n      |                     ^~~~~~~\n\
    /tmp/tmpq61y6gq2.cpp:36:19: error: request for member \u2018compare\u2019 in \u2018\
    opening\u2019, which is of non-class type \u2018char\u2019\n   36 |       if (opening.compare(c)\
    \ == 0) {\n      |                   ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int level\
    \ = 0;\n    for (int i = 1; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++level;\n        } else if (brackets[i] == '>') {\n\
    \            --level;\n            if (level < 0) {\n                return false;\n\
    \            }\n        }\n    }\n    return level == 0;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxgrjl4_b: /tmp/tmpxgrjl4_b.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint open\
    \ = 0;\n\tfor (size_t i = 0; i < brackets.length(); ++i) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\topen++;\n\t\t}\n\t\telse if (brackets[i] == '>') {\n\t\t\t\
    open--;\n\t\t}\n\t\tassert(open >= 0);\n\t}\n\treturn open == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpteikll9k: /tmp/tmpteikll9k.cpp:22: bool correct_bracketing(std::string):\
    \ Assertion `open >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (int\
    \ i = 0; i < brackets.size() - 1; i++) {\n    if (brackets[i] == brackets[i +\
    \ 1]) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjom8p3zm: /tmp/tmpjom8p3zm.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Your\
    \ code here\n  // Solution below\n  assert(brackets.size() <= 31);\n  unordered_set<char>\
    \ paren;\n  for (char c : brackets) {\n    paren.insert(c);\n  }\n\n  for (int\
    \ i = 0; i < brackets.size(); i++) {\n    if (paren.find(brackets[i]) != paren.end())\
    \ {\n      paren.erase(brackets[i]);\n    }\n  }\n  return (paren.size() == 0);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2suixf1e.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp2suixf1e.cpp:17:3: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   17 |   unordered_set<char>\
    \ paren;\n      |   ^~~~~~~~~~~~~\n      |   std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp2suixf1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp2suixf1e.cpp:17:17: error: expected\
    \ primary-expression before \u2018char\u2019\n   17 |   unordered_set<char> paren;\n\
    \      |                 ^~~~\n/tmp/tmp2suixf1e.cpp:19:5: error: \u2018paren\u2019\
    \ was not declared in this scope\n   19 |     paren.insert(c);\n      |     ^~~~~\n\
    /tmp/tmp2suixf1e.cpp:23:9: error: \u2018paren\u2019 was not declared in this scope\n\
    \   23 |     if (paren.find(brackets[i]) != paren.end()) {\n      |         ^~~~~\n\
    /tmp/tmp2suixf1e.cpp:27:11: error: \u2018paren\u2019 was not declared in this\
    \ scope\n   27 |   return (paren.size() == 0);\n      |           ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tfor (char\
    \ c : brackets) {\n\t\tif (c == '<')\n\t\t\treturn false;\n\t\tif (c == '>')\n\
    \t\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp484e9gz7: /tmp/tmp484e9gz7.cpp:24: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.size()\
    \ % 2 == 0);\n    for (size_t i = 0; i < brackets.size() - 1; ++i) {\n       \
    \ if (brackets[i] == '<' && brackets[i + 1] == '>') {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3oltww0n: /tmp/tmp3oltww0n.cpp:14: bool correct_bracketing(std::string):\
    \ Assertion `brackets.size() % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (i+1 < len && brackets[i+1] == '>') {\n          \
    \      return true;\n            }\n            if (i+2 < len && brackets[i+2]\
    \ == '>') {\n                return true;\n            }\n            if (i+3\
    \ < len && brackets[i+3] == '<') {\n                return true;\n           \
    \ }\n            if (i+4 < len && brackets[i+4] == '<') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprjiv8uj_: /tmp/tmprjiv8uj_.cpp:39: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int cnt\
    \ = 0;\n    int start = 0, end = brackets.length() - 1;\n    while (start < end)\
    \ {\n        if (brackets[start] == '<') {\n            cnt += 1;\n          \
    \  if (cnt > 1) {\n                return false;\n            }\n        } else\
    \ if (brackets[end] == '>') {\n            cnt -= 1;\n            if (cnt < 0)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    return false;\n        }\n        start += 1;\n        end -= 1;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvza89_md: /tmp/tmpvza89_md.cpp:38: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (auto\
    \ c : brackets) {\n    if (c == '<') return false;\n    if (c == '>') return true;\n\
    \  }\n  // If we get here, something is wrong\n  return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxdk_ief5: /tmp/tmpxdk_ief5.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // initialize\
    \ a stack and push brackets to it\n  std::stack<char> bracket_stack;\n  bracket_stack.push(brackets[0]);\n\
    \  // pop one character from each bracket\n  for (int i = 1; i < brackets.size();\
    \ ++i) {\n    char current_bracket = brackets[i];\n    while (!bracket_stack.empty()\
    \ &&\n           (brackets[bracket_stack.top()] == current_bracket)) {\n     \
    \ bracket_stack.pop();\n    }\n    bracket_stack.push(current_bracket);\n  }\n\
    \  // if brackets match with the stack, there is some error\n  return (brackets.size()\
    \ - (bracket_stack.empty() ? 0 : 1)) == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7_pv29d4: /tmp/tmp7_pv29d4.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ s;\n  bool ans = false;\n  for (auto c : brackets) {\n    if (c != '<') {\n\
    \      s.push(c);\n    } else {\n      if (!s.empty() && (s.top() != '<') || (s.top()\
    \ == '<') && c != '>') {\n        ans = false;\n      }\n      s.pop();\n    \
    \  s.push(c);\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    if (len == 0) return true;\n    \n    std::string opening,\
    \ closing;\n    std::string last_opening = \"\";\n    for (int i = 0; i < len\
    \ - 1; i++) {\n        opening = brackets.substr(0, i + 1);\n        if (opening.empty())\
    \ continue;\n        closing = brackets.substr(i + 1, len);\n        if (closing.empty()\
    \ || opening == closing) continue;\n        if (opening[0] == last_opening[0]\
    \ && opening.size() > 0 && last_opening == closing)\n            return true;\n\
    \        last_opening = opening;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplqwffgp7: /tmp/tmplqwffgp7.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ bracket_pos = 0;\n    size_t bracket_len = brackets.size();\n    size_t open_brackets\
    \ = 0;\n\n    while (bracket_pos < bracket_len) {\n        char c1 = brackets[bracket_pos];\n\
    \        char c2 = brackets[bracket_pos + 1];\n        if (c1 == '<' && c2 ==\
    \ '>') {\n            if (open_brackets == 0) {\n                return false;\n\
    \            }\n            open_brackets--;\n        } else if ('<' == c1 &&\
    \ c2 != '<') {\n            return false;\n        } else if ('>' == c1 && c2\
    \ != '>') {\n            return false;\n        }\n        bracket_pos++;\n  \
    \  }\n    return open_brackets == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpay_67vdw: /tmp/tmpay_67vdw.cpp:37: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int size\
    \ = brackets.size();\n    for(int i=0; i<size; i++) {\n        if(brackets[i]\
    \ == '<')\n            return (brackets[i+1] == '>');\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiguzbgyq: /tmp/tmpiguzbgyq.cpp:24: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// Initialize\
    \ a bool value to hold the result.\n\tbool result = false;\n\tfor (char c : brackets)\
    \ {\n\t\t// If the opening bracket is the same as the closing bracket,\n\t\t//\
    \ then we need to check whether the opening bracket is preceded by\n\t\t// a \"\
    >\" or not.\n\t\tif (c == '<' && brackets[brackets.size() - 1] == '>') {\n\t\t\
    \t// If yes, that means we only need to check the next character.\n\t\t\tchar\
    \ nextC = brackets[brackets.size() - 2];\n\t\t\t// If it is the \">\", then we\
    \ only need to check the next one.\n\t\t\tif (nextC == '>') {\n\t\t\t\t// If yes,\
    \ that means we only need to check the previous character.\n\t\t\t\tchar previousC\
    \ = brackets[brackets.size() - 1];\n\t\t\t\t// If it is the \">\", then we need\
    \ to check the previous one.\n\t\t\t\tif (previousC == '>')\n\t\t\t\t\tresult\
    \ = true;\n\t\t\t}\n\t\t\t// If not, then it means we have found a missing >,\
    \ which means we\n\t\t\t// need to check the previous character and the previous\
    \ one.\n\t\t\telse {\n\t\t\t\t// If yes, that means we only need to check the\
    \ previous character.\n\t\t\t\tchar previousC = brackets[brackets.size() - 1];\n\
    \t\t\t\t// If it is the \">\", then we need to check the previous one.\n\t\t\t\
    \tif (previousC == '>')\n\t\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t\t// If\
    \ it is the \">\" character, then we only need to check the previous one.\n\t\t\
    else if (c == '>') {\n\t\t\t// If yes, that means we only need to check the previous\
    \ one.\n\t\t\tchar previousC = brackets[brackets.size() - 1];\n\t\t\t// If it\
    \ is the \">\", then we need to check the previous one.\n\t\t\tif (previousC ==\
    \ '>')\n\t\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpja0s2n2x: /tmp/tmpja0s2n2x.cpp:58: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.empty())\n\
    \    return false;\n\n  std::string opening_brackets = brackets.substr(0, brackets.size()\
    \ - 2);\n  std::unordered_set<char> opening_parenthesis_set;\n  std::unordered_set<char>\
    \ closing_parenthesis_set;\n  // create opening_parenthesis_set and closing_parenthesis_set\n\
    \  for (int i = 0; i <= opening_brackets.size(); i++) {\n    if (opening_brackets[i]\
    \ == '<') {\n      opening_parenthesis_set.insert(opening_brackets[i]);\n    }\
    \ else if (opening_brackets[i] == '>') {\n      closing_parenthesis_set.insert(opening_brackets[i]);\n\
    \    }\n  }\n  // find opening bracket for each opening bracket\n  for (int i\
    \ = 0; i <= opening_brackets.size(); i++) {\n    if (opening_parenthesis_set.find(opening_brackets[i])\
    \ != opening_parenthesis_set.end()) {\n      return true;\n    }\n  }\n  // if\
    \ opening bracket doesn't have closing bracket, return false\n  return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnppn861k: /tmp/tmpnppn861k.cpp:39: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (!s.empty())\n                return false;\n    \
    \        s.push(brackets[i]);\n        } else if (brackets[i] == '>') {\n    \
    \        if (s.empty())\n                return false;\n            s.pop();\n\
    \        }\n    }\n    return !s.empty();\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplq8dewne: /tmp/tmplq8dewne.cpp:30: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    \n    for (int i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            --open_brackets;\n        }\n    }\n    \n    return open_brackets\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcqd89csl: /tmp/tmpcqd89csl.cpp:33: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.empty())\
    \ return true; // base case\n  std::stack<char> stack;\n  for (char c : brackets)\
    \ {\n    stack.push(c);\n  }\n  while (!stack.empty()) {\n    char topBracket\
    \ = stack.top();\n    stack.pop();\n    if (topBracket != '<') return false; //\
    \ not a bracket\n    char secondToLast = stack.top();\n    stack.pop();\n    if\
    \ (secondToLast != '<') return false; // not a bracket\n    stack.push('>'); //\
    \ close bracket\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxsj7nd84: /tmp/tmpxsj7nd84.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    \n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv95mgnhd: /tmp/tmpv95mgnhd.cpp:19: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.size() - 1; i++) {\n        if (brackets[i] == '<' && brackets[i\
    \ + 1] == '>') {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5vdbwqpn: /tmp/tmp5vdbwqpn.cpp:27: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int opening_brackets\
    \ = 0;\n  for (char c : brackets) {\n    if (c == '<') {\n      opening_brackets++;\n\
    \    } else if (c == '>') {\n      if (opening_brackets == 0) return false;\n\
    \      opening_brackets--;\n    }\n  }\n  return opening_brackets == 0;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.length()\
    \ % 2 != 0) return false;\n  auto brackets_iter = brackets.begin();\n  auto brackets_end\
    \ = brackets.end();\n  auto open_brackets_pos = brackets_iter;\n  auto close_brackets_pos\
    \ = 0;\n  bool has_open_brackets = false;\n  while (open_brackets_pos < brackets_end\
    \ && close_brackets_pos < brackets_end) {\n    if (*open_brackets_pos == '<')\
    \ {\n      has_open_brackets = true;\n      open_brackets_pos++;\n    } else if\
    \ (*open_brackets_pos == '>') {\n      open_brackets_pos++;\n    } else if (*open_brackets_pos\
    \ == '<') {\n      close_brackets_pos++;\n    } else if (*open_brackets_pos ==\
    \ '>') {\n      open_brackets_pos++;\n      close_brackets_pos++;\n    } else\
    \ {\n      return false;\n    }\n  }\n  if (has_open_brackets && open_brackets_pos\
    \ == close_brackets_pos) return true;\n  open_brackets_pos = 0;\n  while (open_brackets_pos\
    \ < brackets_end && close_brackets_pos < brackets_end) {\n    if (*open_brackets_pos\
    \ == '<') {\n      open_brackets_pos++;\n    } else if (*open_brackets_pos ==\
    \ '>') {\n      close_brackets_pos++;\n    } else {\n      return false;\n   \
    \ }\n  }\n  return open_brackets_pos == close_brackets_pos;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4ysf39v.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpf4ysf39v.cpp:20:65: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   20 |   while (open_brackets_pos < brackets_end && close_brackets_pos\
    \ < brackets_end) {\n      |                                              ~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~\n      |                                              |     \
    \               |\n      |                                              int  \
    \                __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf4ysf39v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:915:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  915 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:915:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf4ysf39v.cpp:20:67:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    std::string ans = \"\";\n    for (int i = 0; i < n;\
    \ ++i) {\n        if (brackets[i] != '<')\n            return false;\n       \
    \ ans += brackets[++i];\n    }\n    for (int i = 0; i < n; ++i) {\n        if\
    \ (brackets[i] != '>')\n            return false;\n        ans += brackets[++i];\n\
    \    }\n    ans.reverse();\n    return ans == \"<>\";\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprwuoxx11.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmprwuoxx11.cpp:26:9: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018reverse\u2019\
    ; did you mean \u2018reserve\u2019?\n   26 |     ans.reverse();\n      |     \
    \    ^~~~~~~\n      |         reserve\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto pos\
    \ = brackets.find(\"<\");\n    while (pos != std::string::npos && brackets[pos\
    \ + 1] != \">\")\n        pos = brackets.find(\"<\", pos + 1);\n    if (brackets[pos]\
    \ != \">\")\n        return false;\n    auto pos2 = brackets.find(\">\", pos +\
    \ 1);\n    if (pos2 == std::string::npos)\n        return false;\n    return brackets[pos\
    \ + 1] == brackets[pos2];\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzyxf9euo.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpzyxf9euo.cpp:15:61: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |     while (pos != std::string::npos && brackets[pos\
    \ + 1] != \">\")\n      |                                                    \
    \         ^~~\n/tmp/tmpzyxf9euo.cpp:17:26: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   17 |     if (brackets[pos] != \">\")\n\
    \      |                          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_count\
    \ = 0, closing_count = 0;\n    for (char c : brackets) {\n        if (c == '<')\
    \ {\n            if (opening_count == 0) {\n                return false;\n  \
    \          }\n            opening_count++;\n        } else if (c == '>') {\n \
    \           if (opening_count == 0) {\n                return false;\n       \
    \     }\n            closing_count++;\n            if (closing_count == opening_count)\
    \ {\n                closing_count = 0;\n                opening_count = 0;\n\
    \            }\n        } else {\n            return false;\n        }\n    }\n\
    \    if (closing_count == opening_count) {\n        closing_count = 0;\n     \
    \   opening_count = 0;\n    }\n    return opening_count == 0 && closing_count\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7q4zgecs: /tmp/tmp7q4zgecs.cpp:42: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ brackets_stack;\n    for (char c : brackets) {\n        switch (c) {\n     \
    \       case '<':\n                if (brackets_stack.empty())\n             \
    \       return false;\n                if (brackets_stack.top() == '>')\n    \
    \                brackets_stack.pop();\n                else\n               \
    \     brackets_stack.push('>');\n                break;\n            case '>':\n\
    \                if (!brackets_stack.empty())\n                    return false;\n\
    \                if (brackets_stack.top() == '<')\n                    brackets_stack.pop();\n\
    \                else\n                    brackets_stack.push('<');\n       \
    \         break;\n            default:\n                brackets_stack.push(c);\n\
    \        }\n    }\n    return brackets_stack.empty();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4yy6d0v2: /tmp/tmp4yy6d0v2.cpp:41: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<bool>\
    \ open_stack;\n    open_stack.push(false);\n    for (auto c : brackets) {\n  \
    \      if (open_stack.empty()) return false;\n        if (c != '>') {\n      \
    \      open_stack.top();\n        }\n        open_stack.push(true);\n    }\n \
    \   return open_stack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1qpxfozp: /tmp/tmp1qpxfozp.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n   std::stack<char>\
    \ stack;\n   for (int i = 0; i < brackets.length(); ++i) {\n      if (brackets[i]\
    \ == '<') {\n         stack.push(brackets[i]);\n      }\n      else if (brackets[i]\
    \ == '>') {\n         if (stack.empty()) {\n            return false;\n      \
    \   }\n         char topOfStack = stack.top();\n         stack.pop();\n      \
    \   if (topOfStack != '>') {\n            return false;\n         }\n      }\n\
    \   }\n   return stack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcxffbh6i: /tmp/tmpcxffbh6i.cpp:34: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (size_t i = 0; i < brackets.size()\
    \ - 1; i++) {\n        if (brackets[i] == \"<\") {\n            open_brackets++;\n\
    \        } else if (brackets[i] == \">\") {\n            close_brackets++;\n \
    \       } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets)\n        return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeyk755yl.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpeyk755yl.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpeyk755yl.cpp:19:35: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   19 | \
    \        } else if (brackets[i] == \">\") {\n      |                         \
    \          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int openBrackets\
    \ = brackets.find_first_not_of(\"><\");\n  if (openBrackets != std::string::npos)\n\
    \    return false;\n  int closeBrackets = brackets.find_last_not_of(\"><\");\n\
    \  if (closeBrackets != std::string::npos)\n    return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpptwwl_zj: /tmp/tmpptwwl_zj.cpp:28: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int i =\
    \ 0;\n  int j = 0;\n  while (i < brackets.size() && j < brackets.size()) {\n \
    \   if (brackets[i] == '<') {\n      i++;\n      if (brackets[j] == '<') {\n \
    \       j++;\n        continue;\n      }\n      if (brackets[j] == '>') {\n  \
    \      j++;\n        continue;\n      }\n      return false;\n    }\n    if (brackets[i]\
    \ == '>') {\n      i++;\n      if (brackets[j] == '<') {\n        j++;\n     \
    \   continue;\n      }\n      if (brackets[j] == '>') {\n        j++;\n      \
    \  continue;\n      }\n      return false;\n    }\n    i++;\n    j++;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n  \
    \  assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmptoj2wz7s: /tmp/tmptoj2wz7s.cpp:52: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    size_t bracketsSize=brackets.size();\n    size_t cur_index = 0;\n\
    \    bool found = false;\n    while(bracketsSize > 0) {\n        // Check if we\
    \ find a closing bracket\n        size_t close_bracket = brackets.find('<', cur_index);\n\
    \        if (close_bracket != std::string::npos) {\n            if (cur_index\
    \ != close_bracket) {\n                result = false;\n                break;\n\
    \            } else {\n                found = true;\n                cur_index\
    \ = close_bracket;\n            }\n        } else {\n            if (cur_index\
    \ == 0) {\n                result = false;\n                break;\n         \
    \   } else {\n                cur_index++;\n            }\n        }\n\n     \
    \   // Check if we find an opening bracket\n        size_t open_bracket = brackets.find('>',\
    \ cur_index);\n        if (open_bracket != std::string::npos) {\n            if\
    \ (cur_index != open_bracket) {\n                result = false;\n           \
    \     break;\n            } else {\n                found = true;\n          \
    \      cur_index = open_bracket;\n            }\n        } else {\n          \
    \  if (cur_index == bracketsSize) {\n                result = false;\n       \
    \         break;\n            } else {\n                cur_index++;\n       \
    \     }\n        }\n\n        bracketsSize--;\n    }\n    return found;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptkhegi3x: /tmp/tmptkhegi3x.cpp:67: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (int\
    \ i = 0; i < brackets.size() - 1; ++i)\n    if (brackets[i] == brackets[i + 1])\n\
    \      return false;\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbaoy1p8u: /tmp/tmpbaoy1p8u.cpp:22: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ open_brackets, closed_brackets;\n\tstd::string s = brackets;\n\tfor (char c\
    \ : s) {\n\t\tif (c == '<') {\n\t\t\tif (!open_brackets.empty())\n\t\t\t\treturn\
    \ false;\n\t\t\topen_brackets.push(c);\n\t\t} else if (c == '>') {\n\t\t\tif (open_brackets.empty())\n\
    \t\t\t\treturn false;\n\t\t\tclosed_brackets.push(c);\n\t\t}\n\t}\n\tif (open_brackets.empty())\n\
    \t\treturn closed_brackets.empty();\n\tif (closed_brackets.empty())\n\t\treturn\
    \ false;\n\treturn (open_brackets.size() == closed_brackets.size());\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqsvbie3y: /tmp/tmpqsvbie3y.cpp:36: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (auto\
    \ c : brackets) {\n        // if c is \"<\", then add one to the open brackets\
    \ count\n        // else add one to the closed brackets count\n        if (c !=\
    \ \">\")\n            brackets_open[(int)c]++;\n        else\n            brackets_close[(int)c]++;\n\
    \    }\n    // if we got this far, then brackets is correctly bracketing\n   \
    \ return brackets_open[0] == brackets_close[0];\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2eaexi1s.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp2eaexi1s.cpp:17:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (c != \">\")\n      |       \
    \           ^~~\n/tmp/tmp2eaexi1s.cpp:18:13: error: \u2018brackets_open\u2019\
    \ was not declared in this scope; did you mean \u2018brackets\u2019?\n   18 |\
    \             brackets_open[(int)c]++;\n      |             ^~~~~~~~~~~~~\n  \
    \    |             brackets\n/tmp/tmp2eaexi1s.cpp:20:13: error: \u2018brackets_close\u2019\
    \ was not declared in this scope\n   20 |             brackets_close[(int)c]++;\n\
    \      |             ^~~~~~~~~~~~~~\n/tmp/tmp2eaexi1s.cpp:23:12: error: \u2018\
    brackets_open\u2019 was not declared in this scope; did you mean \u2018brackets\u2019\
    ?\n   23 |     return brackets_open[0] == brackets_close[0];\n      |        \
    \    ^~~~~~~~~~~~~\n      |            brackets\n/tmp/tmp2eaexi1s.cpp:23:32: error:\
    \ \u2018brackets_close\u2019 was not declared in this scope\n   23 |     return\
    \ brackets_open[0] == brackets_close[0];\n      |                            \
    \    ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// The code\
    \ here will be explained in greater detail in later chapters\n\tsize_t open =\
    \ 0;\n\tsize_t close = 0;\n\tfor (size_t i = 1; i < brackets.size() - 1; ++i)\
    \ {\n\t\tchar b = brackets[i];\n\t\tchar t = brackets[i + 1];\n\t\tif (b == '<')\
    \ {\n\t\t\topen = i;\n\t\t}\n\t\tif (b == '>') {\n\t\t\tclose = i;\n\t\t}\n\t\t\
    if (open != close && close != open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tbool\
    \ ret = true;\n\tif (open != brackets.size() - 1) {\n\t\tret = false;\n\t}\n\t\
    return ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1bgzutjv: /tmp/tmp1bgzutjv.cpp:38: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Your\
    \ code here.\n  \n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyl2ekf5d: /tmp/tmpyl2ekf5d.cpp:19: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto start\
    \ = std::find(brackets.begin(), brackets.end(), '<');\n    if (start == brackets.end())\n\
    \        return false;\n\n    auto end = std::find(start, brackets.end(), '>');\n\
    \    if (end == brackets.end())\n        return false;\n    if (end < start)\n\
    \        return false;\n\n    auto left_bracket_len = end - start;\n    auto right_bracket_len\
    \ = brackets.size() - end - start;\n    if (left_bracket_len < 1 || right_bracket_len\
    \ < 1)\n        return false;\n\n    bool is_properly_closed = true;\n    for\
    \ (size_t i = 0; i < left_bracket_len; ++i) {\n        if (brackets[start + i]\
    \ != '<')\n            is_properly_closed = false;\n        if (brackets[end -\
    \ 1 - i] != '>')\n            is_properly_closed = false;\n    }\n    for (size_t\
    \ i = 0; i < right_bracket_len; ++i) {\n        if (brackets[end - 1 - i] != '<')\n\
    \            is_properly_closed = false;\n        if (brackets[start + i] != '>')\n\
    \            is_properly_closed = false;\n    }\n    return is_properly_closed;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsib62nfd.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpsib62nfd.cpp:25:46: error: no match for \u2018operator-\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019} and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   25 |     auto right_bracket_len = brackets.size() - end - start;\n\
    \      |                              ~~~~~~~~~~~~~~~ ^ ~~~\n      |         \
    \                                  |    |\n      |                           \
    \                |    __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\n      |                                           std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsib62nfd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:977:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  977 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:977:5:\
    \ note:   templa"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for(int\
    \ i = 0; i < brackets.size(); ++i) {\n        if(brackets[i] != \">\" && brackets[i]\
    \ != \"<\")\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4eg0n5b.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpw4eg0n5b.cpp:15:27: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if(brackets[i] != \">\" && brackets[i]\
    \ != \"<\")\n      |                           ^~~\n/tmp/tmpw4eg0n5b.cpp:15:49:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   15 |         if(brackets[i] != \">\" && brackets[i] != \"<\")\n      |   \
    \                                              ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for (auto\
    \ &bracket : brackets)\n    if (bracket == '<')\n      return true;\n  return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzyc3epaa: /tmp/tmpzyc3epaa.cpp:25: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int opening_brackets_count\
    \ = 0;\n  for (size_t i = 0; brackets[i] != '>'; i++) {\n    opening_brackets_count++;\n\
    \  }\n\n  int closing_brackets_count = 0;\n  for (size_t i = opening_brackets_count\
    \ + 1; i < brackets.size(); i++) {\n    closing_brackets_count++;\n  }\n\n  for\
    \ (size_t i = 0; brackets[i] != '>'; i++) {\n    if (opening_brackets_count !=\
    \ closing_brackets_count) {\n      return false;\n    }\n  }\n\n  return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuasbqsvf: /tmp/tmpuasbqsvf.cpp:34: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // iterate\
    \ through the brackets\n    bool correct_brackets = false;\n    for (auto const\
    \ &b : brackets) {\n        if (brackets.find(\"<\") != std::string::npos) {\n\
    \            if (brackets.find(b) != std::string::npos) {\n                correct_brackets\
    \ = true;\n            }\n        }\n        if (brackets.find(\">\") != std::string::npos)\
    \ {\n            if (brackets.find(b) != std::string::npos) {\n              \
    \  correct_brackets = true;\n            }\n        }\n    }\n    return correct_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6h2_uxaa: /tmp/tmp6h2_uxaa.cpp:36: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n   std::stack<char>\
    \ brackets_stack(brackets);\n   char opening_bracket = brackets_stack.top();\n\
    \   brackets_stack.pop();\n   bool ans = false;\n   while (opening_bracket !=\
    \ '\\0') {\n      if (brackets_stack.empty()) {\n         ans = true;\n      \
    \   break;\n      } else if (opening_bracket != brackets_stack.top()) {\n    \
    \     break;\n      }\n      brackets_stack.pop();\n   }\n   return ans;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt1wp8oke.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpt1wp8oke.cpp:14:44: error: no matching function for call to \u2018\
    std::stack<char>::stack(std::string&)\u2019\n   14 |    std::stack<char> brackets_stack(brackets);\n\
    \      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpt1wp8oke.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:185:2:\
    \ note: candidate: \u2018template<class _Alloc, class _Requires> std::stack<_Tp,\
    \ _Sequence>::stack(std::stack<_Tp, _Sequence>&&, const _Alloc&)\u2019\n  185\
    \ |  stack(stack&& __q, const _Alloc& __a)\n      |  ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:185:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpt1wp8oke.cpp:14:44:\
    \ note:   candidate expects 2 arguments, 1 provided\n   14 |    std::stack<char>\
    \ brackets_stack(brackets);\n      |                                         \
    \   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpt1wp8oke.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:181:2:\
    \ note: candidate: \u2018template<class _Alloc, class _Requires> std::stack<_Tp,\
    \ _Sequence>::stack(const std::stack<_Tp, _Sequence>&, const _Alloc&)\u2019\n\
    \  181 |  stack(const stack& __q, const _Alloc& __a)\n      |  ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:181:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpt1wp8oke.cpp:14:44:\
    \ note:   candidate expects 2 arguments, 1 provided\n   14 |    std::stack<char>\
    \ brackets_stack(brackets);\n      |                                         \
    \   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sta"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::vector<std::string>\
    \ tokens;\n\tfor (char c : brackets) {\n\t\tchar next;\n\t\tif ((next = std::find(brackets.begin(),\
    \ brackets.end(), c)) != brackets.end()) {\n\t\t\tif (std::find(tokens.begin(),\
    \ tokens.end(), c) != tokens.end()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    tokens.push_back(c);\n\t\t\tbrackets.erase(next);\n\t\t} else { // c is not a\
    \ '<' or a '>'.\n\t\t\ttokens.push_back(c);\n\t\t}\n\t}\n\treturn (tokens.size()\
    \ == 2 && tokens[0] == \"<\" && tokens[1] == \">\");\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpawe6_qmb.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpawe6_qmb.cpp:17:24: error: cannot convert \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018char\u2019 in assignment\n\
    \   17 |   if ((next = std::find(brackets.begin(), brackets.end(), c)) != brackets.end())\
    \ {\n      |               ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \
    \    |                        |\n      |                        __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\n/tmp/tmpawe6_qmb.cpp:21:22: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   21 |    tokens.push_back(c);\n      |                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpawe6_qmb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _A"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ input;\n    std::string output;\n    std::cin >> input;\n    input = input.substr(1);\n\
    \    std::cout << \"Input:\" << std::endl;\n    std::cout << input << std::endl;\n\
    \    output.resize(input.size());\n    for (auto itr = input.begin(); itr != input.end();\
    \ itr++) {\n        if (*itr == '<')\n            output[itr] = '(';\n       \
    \ if (*itr == '>')\n            output[itr] = ')';\n    }\n    std::cout << \"\
    Output:\" << std::endl;\n    std::cout << output << std::endl;\n    return output\
    \ == brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n  \
    \  assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsof6fxf4.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpsof6fxf4.cpp:23:19: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   23 |             output[itr] = '(';\n      |                  \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsof6fxf4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1046:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ = const char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1046 |       operator[] (size_type __pos) const\
    \ _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1046:29:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basi"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int count\
    \ = 0;\n    for (auto c : brackets) {\n        if (c == '<') {\n            count++;\n\
    \        }\n        if (c == '>') {\n            count--;\n        }\n    }\n\
    \    return count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0iqpk7a1: /tmp/tmp0iqpk7a1.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening, closing;\n    for (int i = 0; i < brackets.length(); i++) {\n     \
    \   // find opening bracket\n        if ((brackets[i] != '<') && (brackets[i]\
    \ != '>')) return false;\n        opening.push_back(brackets[i]);\n        //\
    \ find closing bracket\n        if ((brackets[i+1] != '<') && (brackets[i+1] !=\
    \ '>')) return false;\n        closing.push_back(brackets[i+1]);\n    }\n    //\
    \ if every opening bracket has a corresponding closing bracket, return true.\n\
    \    // otherwise return false.\n    for (int i = 0; i < opening.length(); i++)\
    \ {\n        if (!closing.count(opening[i])) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp91hxenvj.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp91hxenvj.cpp:26:22: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018count\u2019\
    \n   26 |         if (!closing.count(opening[i])) return false;\n      |     \
    \                 ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack to store opening brackets\n    stack<char> opening_brackets;\n    //\
    \ initialize a stack to store closing brackets\n    stack<char> closing_brackets;\n\
    \    // initialize a flag to track if we have seen an opening bracket\n    bool\
    \ seen_opening_bracket = false;\n    // initialize a flag to track if we have\
    \ seen a closing bracket\n    bool seen_closing_bracket = false;\n    // initialize\
    \ an index counter\n    int idx = 0;\n    // iterate through brackets\n    for\
    \ (auto c : brackets) {\n        // if an opening bracket is seen\n        if\
    \ (c == '<') {\n            // push the opening bracket to the stack\n       \
    \     opening_brackets.push(c);\n            // if we have seen an opening bracket\n\
    \            if (seen_opening_bracket) {\n                // return false\n  \
    \              return false;\n            }\n            // if we have not seen\
    \ an opening bracket\n            // push the opening bracket to the stack\n \
    \           seen_opening_bracket = true;\n            // increment the index\n\
    \            idx++;\n        } else {\n            // if we have seen a closing\
    \ bracket\n            if (c == '>') {\n                // if we haven't seen\
    \ an opening bracket\n                if (!seen_opening_bracket) {\n         \
    \           // return false\n                    return false;\n             \
    \   }\n                // push the closing bracket to the stack\n            \
    \    closing_brackets.push(c);\n                // if we have seen a closing bracket\n\
    \                if (seen_closing_bracket) {\n                    // return true\n\
    \                    return true;\n                }\n                // if we\
    \ have not seen a closing bracket\n                // pop the closing bracket\
    \ from the stack\n                closing_brackets.pop();\n                //\
    \ if we have seen an opening bracket\n                if (closing_brackets.empty())\
    \ {\n                    // return false\n                    return false;\n\
    \                }\n                // if we have not seen an opening bracket\n\
    \                seen_opening_bracket = false;\n                // increment the\
    \ index\n                idx++;\n            } else {\n                // if we\
    \ have seen an opening bracket\n                if (c == '>') {\n            \
    \        // if we haven't seen a closing bracket\n                    if (!closing_brackets.empty())\
    \ {\n                        // return false\n                        return false;\n\
    \                    }\n                    // push the closing bracket to the\
    \ stack\n                    closing_brackets.push(c);\n                    //\
    \ if we have seen a closing bracket\n                    if (seen_closing_bracket)\
    \ {\n                        // return true\n                        return true;\n\
    \                    }\n                    // if we have not seen a closing bracket\n\
    \                    // pop the closing bracket from the stack\n             \
    \       closing_brackets.pop();\n                    // if we have seen an opening\
    \ bracket\n                    if (closing_brackets.empty()) {\n             \
    \           // return false\n                        return false;\n         \
    \           }\n                    // if we have not seen an opening bracket\n\
    \                    seen_opening_bracket = false;\n                    // \n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl0m_t8yf.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpl0m_t8yf.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<char> opening_brackets;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpl0m_t8yf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpl0m_t8yf.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> opening_brackets;\n      |\
    \           ^~~~\n/tmp/tmpl0m_t8yf.cpp:17:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   17 |     stack<char> closing_brackets;\n      |\
    \           ^~~~\n/tmp/tmpl0m_t8yf.cpp:29:13: error: \u2018opening_brackets\u2019\
    \ was not declared in this scope; did you mean \u2018seen_opening_bracket\u2019\
    ?\n   29 |             opening_brackets.push(c);\n      |             ^~~~~~~~~~~~~~~~\n\
    \      |             seen_opening_bracket\n/tmp/tmpl0m_t8yf.cpp:49:17: error:\
    \ \u2018closing_brackets\u2019 was not declared in this scope; did you mean \u2018\
    seen_closing_bracket\u2019?\n   49 |                 closing_brackets.push(c);\n\
    \      |                 ^~~~~~~~~~~~~~~~\n      |                 seen_closing_bracket\n\
    /tmp/tmpl0m_t8yf.cpp:71:26: error: \u2018closing_brackets\u2019 was not declared\
    \ in this scope; did you mean \u2018seen_closing_bracket\u2019?\n   71 |     \
    \                if (!closing_brackets.empty()) {\n      |                   \
    \       ^~~~~~~~~~~~~~~~\n      |                          seen_closing_bracket\n\
    /tmp/tmpl0m_t8yf.cpp:76:21: error: \u2018closing_brackets\u2019 was not declared\
    \ in this scope; did you mean \u2018seen_closing_bracket\u2019?\n   76 |     \
    \                closing_brackets.push(c);\n      |                     ^~~~~~~~~~~~~~~~\n\
    \      |                     seen_closing_bracket\n/tmp/tmpl0m_t8yf.cpp:94:12:\
    \ error: a funct"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string::const_iterator\
    \ it1 = brackets.begin();\n    std::string::const_iterator it2 = brackets.begin()\
    \ + 1;\n    for (; it2 != brackets.end(); ++it1, ++it2) {\n        if (*it1 ==\
    \ '<') {\n            if (*it2 != '>')\n                return false;\n      \
    \  } else if (*it1 == '>') {\n            if (*it2 != '<')\n                return\
    \ false;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmfvfv0bk: /tmp/tmpmfvfv0bk.cpp:32: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = (brackets.size() - 1) / 2;\n    size_t count = 0;\n    size_t\
    \ last = 0;\n    std::string result = \"\";\n    std::string opening_bracket =\
    \ \"<\";\n    for (size_t i = 0; i <= brackets_size; i++) {\n        if (brackets[i]\
    \ == '<') {\n            result += opening_bracket;\n            count++;\n  \
    \      }\n        else if (brackets[i] == '>') {\n            if (count > 0) {\n\
    \                result += \">\";\n                count--;\n            }\n \
    \           else {\n                result += \">>\";\n            }\n       \
    \ }\n        else if (brackets[i] == '>') {\n            if (count > 0) {\n  \
    \              result += \">\";\n                count--;\n            }\n   \
    \         else {\n                result += \">>\";\n            }\n        }\n\
    \    }\n    if (count > 0) {\n        return false;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8w704u0.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpm8w704u0.cpp:46:12: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019 in return\n\
    \   46 |     return result;\n      |            ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int cnt\
    \ = 0;\n  for (auto i : brackets) {\n    if (i == '<') {\n      cnt++;\n    }\
    \ else if (i == \">\") {\n      cnt--;\n    }\n  }\n  if (cnt == 0) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjnnoznmy.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpjnnoznmy.cpp:18:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   18 |     } else if (i == \">\") {\n      |  \
    \                   ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.size()\
    \ <= 1) {\n        return true;\n    }\n    int last_open_bracket = brackets.size()\
    \ - 1;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets.substr(last_open_bracket,\
    \ i + 1) != brackets.substr(i, 1)) {\n            return false;\n        }\n \
    \       last_open_bracket = i;\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc_8i5az0: /tmp/tmpc_8i5az0.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // for\
    \ each \"<\", we check if there is a corresponding \">\".\n    // for each \"\
    >\", we check if there is a corresponding \"<\".\n    // for each pair of \"<\"\
    , we check that the \"->\" is not followed by \"->\".\n    // for each pair of\
    \ \">\", we check that the \"->\" is not preceeded by \"->\".\n    for (int i\
    \ = 0; i < brackets.length(); i++) {\n        if (brackets[i] != '<') return false;\n\
    \        if (brackets[i + 1] != '>') return false;\n        if (brackets[i + 2]\
    \ != '<') return false;\n        if (brackets[i + 3] != '>') return false;\n \
    \       if (brackets[i + 4] != '<') return false;\n        if (brackets[i + 5]\
    \ != '>') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc939_e85: /tmp/tmpc939_e85.cpp:30: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool ret\
    \ = false;\n    for (int i = 0; i < brackets.size() - 1; i++) {\n        if (brackets[i]\
    \ == \"<\" && brackets[i + 1] == \"<\") {\n            ret = true;\n        }\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsqozyx61.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpsqozyx61.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] == \"<\" && brackets[i\
    \ + 1] == \"<\") {\n      |                            ^~~\n/tmp/tmpsqozyx61.cpp:16:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (brackets[i] == \"<\" && brackets[i + 1] == \"<\") {\n   \
    \   |                                                      ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  assert(brackets.size()\
    \ % 2 == 0);\n  std::string open_brackets = brackets;\n  for (int i = 0; i < brackets.size();\
    \ ++i) {\n    if (brackets[i] == '>') {\n      // We are checking if there is\
    \ a closing bracket in the next\n      // iteration to check if it matches.\n\
    \      if (i < brackets.size() - 1) {\n        if (brackets[i + 1] != '>')\n \
    \         return false;\n      } else {\n        // We are checking if there is\
    \ a closing bracket in the last\n        // iteration to check if it matches.\n\
    \        if (i < brackets.size() - 2) {\n          if (brackets[i + 2] != '>')\n\
    \            return false;\n        }\n      }\n    }\n  }\n  return open_brackets.find(\"\
    <\") == open_brackets.size() - 1;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqek6c7dl: /tmp/tmpqek6c7dl.cpp:37: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool ret = true;\n    auto itr = std::find(brackets.begin(),\
    \ brackets.end(), '<');\n    if (itr != brackets.end()) {\n        auto next_itr\
    \ = std::find(itr, brackets.end(), '>');\n        if (next_itr != brackets.end()\
    \ && next_itr > itr) {\n            // If the current character is the first character\
    \ after a \">\", \n            // then the current string must end in \">\" as\
    \ well, else the \n            // current string must have ended before the first\
    \ \"<\", which means \n            // there were extra brackets.\n           \
    \ ret = (itr == brackets.end() || itr == next_itr);\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplmru8d90: /tmp/tmplmru8d90.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    auto it\
    \ = std::find(brackets.begin(), brackets.end(), '<');\n    auto it2 = std::find(brackets.begin(),\
    \ brackets.end(), '>');\n    if (it != brackets.end() && it2 != brackets.end())\
    \ {\n        auto close_it = std::find(it, it2, '>');\n        auto close_it2\
    \ = std::find(it2, it, brackets.begin());\n        if (close_it == close_it2)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmps1c_qsvi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:161:23:\
    \   required from \u2018_Iterator std::__find_if(_Iterator, _Iterator, _Predicate)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3899:28:\
    \   required from \u2018_IIte"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<char>\
    \ bracket;\n  for (char c : brackets)\n    if (c == '<') {\n      bracket.push(c);\n\
    \    } else if (c == '>')\n      if (bracket.empty())\n        return false;\n\
    \      else\n        bracket.pop();\n  \n  return !bracket.empty();\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt6xqqhdv: /tmp/tmpt6xqqhdv.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int bracketsCount\
    \ = brackets.size();\n  int openingBracketsCount = 0;\n  int closingBracketsCount\
    \ = 0;\n  int openingBracketIndex = 0;\n  int closingBracketIndex = 0;\n\n  //\
    \ count number of opening brackets\n  for (int i = 0; i < bracketsCount; i++)\
    \ {\n    if (brackets[i] == '<')\n      openingBracketsCount++;\n  }\n\n  // count\
    \ number of closing brackets\n  for (int i = 0; i < bracketsCount; i++) {\n  \
    \  if (brackets[i] == '>')\n      closingBracketsCount++;\n  }\n\n  // validate\
    \ brackets count\n  assert(openingBracketsCount == closingBracketsCount);\n\n\
    \  // validate starting index\n  openingBracketIndex = -1;\n  closingBracketIndex\
    \ = -1;\n\n  // validate opening brackets\n  for (int i = 0; i < openingBracketsCount;\
    \ i++) {\n    int openingBracketIndex = i;\n\n    // validate closing brackets\n\
    \    while (openingBracketIndex < bracketsCount && brackets[openingBracketIndex]\
    \ == '>')\n      openingBracketIndex++;\n\n    // validate opening brackets\n\
    \    while (openingBracketIndex < bracketsCount && brackets[openingBracketIndex]\
    \ != '<')\n      openingBracketIndex++;\n\n    // validate opening brackets brackets\
    \ count\n    assert(openingBracketIndex < bracketsCount && brackets[openingBracketIndex]\
    \ == ' ');\n\n    // validate closing brackets\n    while (closingBracketIndex\
    \ < closingBracketsCount && brackets[closingBracketIndex] == '<')\n      closingBracketIndex++;\n\
    \n    // validate closing brackets\n    while (closingBracketIndex < closingBracketsCount\
    \ && brackets[closingBracketIndex] != '>')\n      closingBracketIndex++;\n\n \
    \   // validate closing brackets brackets count\n    assert(closingBracketIndex\
    \ < closingBracketsCount && brackets[closingBracketIndex] == ' ');\n\n    // validate\
    \ brackets count\n    assert(openingBracketIndex == closingBracketIndex);\n\n\
    \    if (openingBracketIndex != closingBracketIndex) {\n      // invalid brackets\n\
    \      return false;\n    }\n  }\n\n  // return True\n  return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg5sbnwvl: /tmp/tmpg5sbnwvl.cpp:52: bool correct_bracketing(std::string):\
    \ Assertion `openingBracketIndex < bracketsCount && brackets[openingBracketIndex]\
    \ == ' '' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.size() - 1; i++) {\n        if (brackets.at(i) != brackets.at(i\
    \ + 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu5gzlgpi: /tmp/tmpu5gzlgpi.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<bool>\
    \ brackets(brackets.size(), false);\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        size_t prev = i;\n        while (i < brackets.size() && brackets[i]\
    \ != brackets[prev]) {\n            i++;\n        }\n        if (i == brackets.size()\
    \ || brackets[i] != brackets[prev]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp631mte68.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp631mte68.cpp:14:32: error: declaration of \u2018std::vector<bool> brackets\u2019\
    \ shadows a parameter\n   14 |     std::vector<bool> brackets(brackets.size(),\
    \ false);\n      |                                ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::stack<bool>\
    \ open_brackets;\n  open_brackets.push(true);\n  // Iterate through brackets.\n\
    \  for(size_t i = 0; brackets[i] != '\\0'; ++i) {\n    // If the current bracket\
    \ is opened, then push the boolean value onto the stack.\n    if(brackets[i] ==\
    \ '<') {\n      if(open_brackets.top() == false) return false;\n      open_brackets.push(true);\n\
    \    } else if(brackets[i] == '>') {\n      // If we have an opening bracket,\
    \ then pop the top value and check its value.\n      if(open_brackets.top() ==\
    \ true) return false;\n      open_brackets.pop();\n    }\n  }\n  return open_brackets.top()\
    \ == true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8hbce4x6: /tmp/tmp8hbce4x6.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int brackets_len\
    \ = brackets.length();\n  int last_i = 0;\n  for (int i = 0; i < brackets_len;\
    \ i++) {\n    int j = i + 1;\n    if (j < brackets_len) {\n      if (brackets[i]\
    \ != brackets[j]) {\n        return false;\n      }\n      i++;\n      j++;\n\
    \    }\n    if (brackets[i] != \">\") {\n      return false;\n    }\n    last_i\
    \ = i;\n  }\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvc02ctb6.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpvc02ctb6.cpp:25:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   25 |     if (brackets[i] != \">\") {\n      |\
    \                        ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.size();i++)\
    \ {\n        if (brackets[i] == '<')\n            opening_brackets++;\n      \
    \  if (brackets[i] == '>')\n            closing_brackets++;\n    }\n    return\
    \ (opening_brackets == closing_brackets);\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp65ps0x23: /tmp/tmp65ps0x23.cpp:31: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  bool correct\
    \ = true;\n  for (int i = 1; i < brackets.size() - 1; i++)\n    if (brackets[i]\
    \ != brackets[i - 1] + 1) // don't check \"<>\" with \">>\"\n      correct = false;\n\
    \  return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzgixu0qn: /tmp/tmpzgixu0qn.cpp:23: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening = brackets.substr(0, 1);\n    std::string closing = brackets.substr(1,\
    \ 1);\n    std::string current = \"\";\n    for (int i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (current == closing)\
    \ {\n                return false;\n            }\n            current = opening;\n\
    \        } else if (brackets[i] == '>') {\n            if (current == opening)\
    \ {\n                return false;\n            }\n            current = closing;\n\
    \        } else {\n            current += brackets[i];\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n  \
    \  assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpap4t1omx: /tmp/tmpap4t1omx.cpp:36: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.empty())\
    \ return true;\n  for (auto &c : brackets) {\n    if (c == '<') return false;\n\
    \    if (c != '>') return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp83orhwqd: /tmp/tmp83orhwqd.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int brackets_len,\
    \ brackets_cnt = 0, current_pos, open_pos, close_pos, count = 0;\n  std::string\
    \ opening, closing, temp;\n\n  temp = brackets;\n  brackets_len = temp.length();\n\
    \  opening = brackets.substr(0, 1);\n  closing = brackets.substr(1, 1);\n\n  while\
    \ (true) {\n    if (brackets_cnt >= brackets_len) {\n      return true;\n    }\n\
    \    current_pos = temp.find(opening, brackets_cnt);\n    if (current_pos == std::string::npos)\
    \ {\n      return false;\n    }\n\n    open_pos = current_pos;\n    current_pos\
    \ = temp.find(closing, brackets_cnt + 1);\n    close_pos = temp.find(opening,\
    \ brackets_cnt + 1);\n    if (current_pos == std::string::npos || close_pos ==\
    \ std::string::npos) {\n      return false;\n    }\n    count++;\n    brackets_cnt\
    \ += close_pos - open_pos;\n  }\n\n  return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwsnzbnzh: /tmp/tmpwsnzbnzh.cpp:45: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; i++) {\n        if ((brackets[i]\
    \ != '>') && (brackets[i] != '<')) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvh_cf0k7: /tmp/tmpvh_cf0k7.cpp:28: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ length = brackets.size();\n    // we start counting from 0.\n    // e.g. \"\
    <<><>\" -> [\"\", \"\", \"\", \"\", \"\", \"\"]\n    // e.g. \"<>\" -> [\"<\"\
    , \">\", \">\", \"\", \"\", \"\"]\n    std::vector<std::string> open_brackets(length);\n\
    \    for (size_t i = 0; i < length; ++i) {\n        if (brackets.at(i) == '<')\
    \ {\n            open_brackets[i] = brackets.substr(0, i);\n        }\n      \
    \  if (brackets.at(i) == '>') {\n            open_brackets[length - 1 - i] = brackets.substr(i\
    \ + 1, length - i - 1);\n        }\n    }\n    // if we have more opening brackets\
    \ than closing brackets, return false.\n    // e.g. \"<>\" -> [\"\", \"\", \"\"\
    , \"\", \"\", \"\"]\n    // but \"<>\" -> [\"<\", \">\", \">\", \"\", \"\", \"\
    \"]\n    if (length != open_brackets.size()) {\n        return false;\n    }\n\
    \    // we must sort the opening brackets to make sure that later opening brackets\n\
    \    // have smaller indices.\n    // e.g. \"<>\" -> [\">\", \"<\", \">\", \"\"\
    , \"\", \"\"]\n    // but \"<>\" -> [\"<\", \">\", \">\", \"\", \"\", \"\"]\n\
    \    std::sort(open_brackets.begin(), open_brackets.end());\n    // now we iterate\
    \ through all opening brackets.\n    // e.g. \"<>\" -> [\">\", \">\", \"<\", \"\
    >\", \"\", \"\"]\n    // but \"<>\" -> [\"<\", \">\", \"<\", \">\", \"\", \"\"\
    ]\n    size_t i = 0;\n    for (; i < open_brackets.size(); ++i) {\n        //\
    \ we compare with i because if i equals open_brackets.size(), we are\n       \
    \ // at the end of the array.\n        // e.g. \"<>\" -> [\">\", \">\", \"<\"\
    , \">\", \"\", \"\"]\n        // but \"<>\" -> [\"<\", \">\", \"<\", \">\", \"\
    \", \"\"]\n        if (open_brackets[i] != open_brackets[i - 1]) {\n         \
    \   return false;\n        }\n    }\n    // if we got here, all brackets are correctly\
    \ closed. \n    // e.g. \"<>\" -> [\">\", \">\", \"<\", \">\", \"\", \"\"]\n \
    \   // but \"<>\" -> [\"<\", \">\", \"<\", \">\", \"\", \"\"]\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1w7v92i7: /tmp/tmp1w7v92i7.cpp:59: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int left_open\
    \ = 0;\n    int right_open = 0;\n    int left_close = 0;\n    int right_close\
    \ = 0;\n    \n    // loop through every character in brackets\n    for (int i\
    \ = 0; i < brackets.length(); i++) {\n        // if we encounter \"<\", increment\
    \ left_open counter.\n        if (brackets[i] == '<') {\n            left_open++;\n\
    \        }\n        // if we encounter \">\", increment right_open counter.\n\
    \        else if (brackets[i] == '>') {\n            right_open++;\n        }\n\
    \        // if we encounter \")\", increment left_close counter.\n        else\
    \ if (brackets[i] == ')') {\n            left_close++;\n        }\n        //\
    \ if we encounter \")\", increment right_close counter.\n        else if (brackets[i]\
    \ == ']') {\n            right_close++;\n        }\n        else {\n         \
    \   // if opening brackets are unbalanced, return false\n            if (left_open\
    \ < right_open || left_close < right_close) {\n                return false;\n\
    \            }\n            // reset counters\n            left_open = 0;\n  \
    \          right_open = 0;\n            left_close = 0;\n            right_close\
    \ = 0;\n        }\n    }\n    // if we did not find any unbalanced brackets within\
    \ the entire string, return false\n    if (left_open < right_open || left_close\
    \ < right_close) {\n        return false;\n    }\n    // if we did find unbalanced\
    \ brackets within the entire string, return true\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjff8mmld: /tmp/tmpjff8mmld.cpp:63: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool ans\
    \ = true;\n    int i = 0;\n    while (i<brackets.size() && brackets[i]=='>') {\n\
    \        ans = ans && (brackets[i+1]=='<');\n        i += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu7qdgyyb: /tmp/tmpu7qdgyyb.cpp:28: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_bracket = \"<\";\n    std::string closing_bracket = \">\";\n    std::vector<std::string>\
    \ brackets_array;\n    std::string current_bracket;\n    int bracket_counter =\
    \ 0;\n    for(char c: brackets) {\n        if(c != '<' && c != '>') {\n      \
    \      bracket_counter += 1;\n            current_bracket = opening_bracket +\
    \ (char) bracket_counter;\n            brackets_array.push_back(current_bracket);\n\
    \        } else if(c == '<') {\n            bracket_counter += 1;\n          \
    \  current_bracket = opening_bracket + (char) bracket_counter;\n            brackets_array.push_back(current_bracket);\n\
    \        } else {\n            current_bracket = closing_bracket;\n        }\n\
    \    }\n    // for each pair of brackets make sure they have matching opening\n\
    \    // brackets.\n    // if brackets_array[0] is not equal to brackets_array[1]\n\
    \    // return false\n    for(int i = 0; i < brackets_array.size() - 1; i++) {\n\
    \        if(brackets_array[i] != brackets_array[i+1]) {\n            return false;\n\
    \        }\n    }\n    // if brackets_array[-1] is equal to brackets_array[0]\n\
    \    // return true\n    if(brackets_array[0] == brackets_array[-1]) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfoed7s9w: /tmp/tmpfoed7s9w.cpp:51: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ temp = \"\";\n    int cnt = 0;\n    int start_pos = 0;\n    int end_pos = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '>') {\n            cnt--;\n        }\n        else if (brackets[i] == '<')\
    \ {\n            cnt++;\n        }\n        else if (cnt > 0) {\n            temp\
    \ += brackets[i];\n        }\n        else if (cnt < 0) {\n            if (start_pos\
    \ == end_pos) {\n                start_pos = i + 1;\n                end_pos =\
    \ i + 1;\n            }\n            else {\n                start_pos = i;\n\
    \                end_pos = i;\n                cnt += 1;\n            }\n    \
    \        temp += brackets[i];\n        }\n    }\n    if (cnt < 0) {\n        return\
    \ false;\n    }\n    else if (cnt > 0) {\n        return false;\n    }\n    else\
    \ if (start_pos == end_pos) {\n        return true;\n    }\n    else {\n     \
    \   return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpypjk_hrf: /tmp/tmpypjk_hrf.cpp:61: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = 0;\n    for (char c : brackets) {\n        if (c == '<') n++;\n        else\
    \ if (c == \">\") n--;\n    }\n    return (n == 0);\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoamqjxor.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpoamqjxor.cpp:17:23: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         else if (c == \">\") n--;\n    \
    \  |                       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Write\
    \ your code here.\n  std::stack<char> bracket_stack;\n  for(char c: brackets)\
    \ {\n    if(c == '<') {\n      if(bracket_stack.empty())\n        return false;\n\
    \      char opening_bracket = bracket_stack.top();\n      if(bracket_stack.top()\
    \ == '>')\n        return false;\n      bracket_stack.pop();\n      bracket_stack.push(opening_bracket);\n\
    \    }\n    else {\n      if(bracket_stack.empty())\n        return false;\n \
    \     char opening_bracket = bracket_stack.top();\n      if(bracket_stack.top()\
    \ != '>') {\n        return false;\n      }\n      bracket_stack.pop();\n    \
    \  bracket_stack.push(opening_bracket);\n    }\n  }\n  if(!bracket_stack.empty())\n\
    \    return false;\n  return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfe1p6951: /tmp/tmpfe1p6951.cpp:43: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') {\n            return false;\n        }\n        int j = i + 1;\n  \
    \      while (j < len) {\n            if (brackets[j] == '>') {\n            \
    \    return false;\n            }\n            ++j;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj933jcc8: /tmp/tmpj933jcc8.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ bracketStack;\n    for (char c : brackets) {\n        if (bracketStack.empty()\
    \ || c != bracketStack.top()) {\n            bracketStack.push(c);\n         \
    \   continue;\n        }\n        if (bracketStack.empty()) {\n            return\
    \ false;\n        }\n        char top = bracketStack.top();\n        bracketStack.pop();\n\
    \        if (c == top) {\n            bracketStack.push(c);\n        }\n     \
    \   else {\n            return false;\n        }\n    }\n    return bracketStack.empty();\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7b8icorl: /tmp/tmp7b8icorl.cpp:36: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // code\
    \ goes here\n  \n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzer6bcz8: /tmp/tmpzer6bcz8.cpp:19: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ brackets1(brackets);\n    std::string brackets2;\n    size_t bracket_count =\
    \ 0;\n    for (size_t i = 0; i < brackets1.size(); i++) {\n        if (brackets1[i]\
    \ == '<') bracket_count++;\n        else if (brackets1[i] == '>') bracket_count--;\n\
    \        // if brackets count is 0, then we have a valid bracketing pair.\n  \
    \      if ((bracket_count == 0) && (brackets1[i] != '<')) return false;\n    }\n\
    \    if (brackets2.size() != brackets1.size()) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz0zom48s: /tmp/tmpz0zom48s.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<int>\
    \ opening_brackets;\n    opening_brackets.push_back(0);\n    for (size_t i = 0;\
    \ i < brackets.size(); ++i) {\n        std::string temp_brackets = brackets.substr(i,\
    \ 2);\n        std::vector<int> curr_opening_brackets(opening_brackets.begin()\
    \ + 1, opening_brackets.end());\n        if (temp_brackets != \"\") {\n      \
    \      if (curr_opening_brackets.size() == 0) {\n                curr_opening_brackets.push_back(0);\n\
    \            }\n            if (curr_opening_brackets.size() == 1) {\n       \
    \         for (int j = 0; j < temp_brackets.length(); ++j) {\n               \
    \     curr_opening_brackets.back() += 1;\n                    if (temp_brackets[j]\
    \ == '>') {\n                        curr_opening_brackets.pop_back();\n     \
    \               }\n                }\n            }\n        }\n        if (curr_opening_brackets.size()\
    \ == 0) {\n            return false;\n        }\n        for (int j = 0; j < curr_opening_brackets.size()\
    \ - 1; ++j) {\n            if (curr_opening_brackets[j + 1] > curr_opening_brackets[j])\
    \ {\n                return false;\n            }\n        }\n        opening_brackets.insert(opening_brackets.end(),\
    \ curr_opening_brackets.begin(), curr_opening_brackets.end());\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz4pbt6yz: /tmp/tmpz4pbt6yz.cpp:46: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Complete\
    \ this function\n    bool ans = false;\n    std::string temp;\n    std::string::iterator\
    \ it;\n    it = balance_brackets.find(brackets[0]);\n    while (it != balance_brackets.end()\
    \ && it->second != brackets[1]) {\n        temp = it->second;\n        it = balance_brackets.find(temp);\n\
    \    }\n    if (it != balance_brackets.end() && it->second == brackets[1]) {\n\
    \        ans = true;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6a2u1lqn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp6a2u1lqn.cpp:18:10: error: \u2018balance_brackets\u2019 was not declared\
    \ in this scope\n   18 |     it = balance_brackets.find(brackets[0]);\n      |\
    \          ^~~~~~~~~~~~~~~~\n/tmp/tmp6a2u1lqn.cpp:19:48: error: request for member\
    \ \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >::operator->()\u2019, which is of non-class type \u2018char\u2019\n   19 |\
    \     while (it != balance_brackets.end() && it->second != brackets[1]) {\n  \
    \    |                                                ^~~~~~\n/tmp/tmp6a2u1lqn.cpp:20:20:\
    \ error: request for member \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >::operator->()\u2019, which is of non-class\
    \ type \u2018char\u2019\n   20 |         temp = it->second;\n      |         \
    \           ^~~~~~\n/tmp/tmp6a2u1lqn.cpp:23:45: error: request for member \u2018\
    second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >::operator->()\u2019, which is of non-class type \u2018char\u2019\n   23 |\
    \     if (it != balance_brackets.end() && it->second == brackets[1]) {\n     \
    \ |                                             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Write\
    \ your code here.\n  // You will need to use std::unordered_map\n  std::unordered_map<char,\
    \ char> brackets_map = {{'<', '>'}};\n  // iterate through the input string and\
    \ replace each char with the corresponding char in the map\n  for (int i = 0;\
    \ i < brackets.length(); i++) {\n    brackets[i] = brackets_map.at(brackets[i]);\n\
    \  }\n  // if the brackets are all open\n  if (brackets.front() == '<') return\
    \ false;\n  if (brackets.back() == '>') return false;\n  // if we reach here,\
    \ then we have no brackets\n  return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  _Map_base::at\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int cnt\
    \ = 0;\n  for (auto i = 0; i < brackets.length(); ++i) {\n    if (brackets[i]\
    \ == '<') {\n      cnt += 1;\n    }\n    else if (brackets[i] == '>') {\n    \
    \  cnt -= 1;\n    }\n  }\n  return cnt >= 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9x78zum6: /tmp/tmp9x78zum6.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ s;\n    for (auto c : brackets) {\n        // push opening bracket\n       \
    \ if (c == '<') {\n            s.push(c);\n            // if stack is empty, return\
    \ false\n            if (s.empty()) {\n                return false;\n       \
    \     }\n        }\n        // push closing bracket\n        else if (c == '>')\
    \ {\n            // pop the top bracket\n            char c = s.top();\n     \
    \       s.pop();\n            if (s.empty()) {\n                return false;\n\
    \            }\n            s.push(c);\n        }\n        else {\n          \
    \  return false;\n        }\n    }\n    return !s.empty();\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptlpi00cu: /tmp/tmptlpi00cu.cpp:42: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string\
    \ opening = brackets.substr(0, brackets.size() - 1);\n  std::string closing =\
    \ brackets.substr(brackets.size() - 1, brackets.size());\n  return opening ==\
    \ closing;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi6d47fqk: /tmp/tmpi6d47fqk.cpp:20: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint left\
    \ = 0, right = 0, bracketCount = 0;\n\tfor (auto c : brackets) {\n\t\tif (c ==\
    \ '<') {\n\t\t\tleft++;\n\t\t} else if (c == '>') {\n\t\t\tright++;\n\t\t}\n\t\
    }\n\tbracketCount += left - right;\n\treturn bracketCount % 2 == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9a74x_v5: /tmp/tmp9a74x_v5.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // check\
    \ each pair of brackets\n    for (auto bracket_it = brackets.begin(); bracket_it\
    \ != brackets.end(); ++bracket_it) {\n        // we found a opening\n        if\
    \ (*bracket_it == '<') {\n            // make sure it's closed in the same position\n\
    \            if (bracket_it + 1 != brackets.end()) {\n                if (*(bracket_it\
    \ + 1) == '>') {\n                    return true;\n                }\n      \
    \      }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgk3injmi: /tmp/tmpgk3injmi.cpp:34: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = brackets.size();\n    int closing_brackets = 0;\n    for (auto& i : brackets)\
    \ {\n        if (i == '<') {\n            opening_brackets--;\n        } else\
    \ if (i == '>') {\n            closing_brackets++;\n        }\n    }\n    return\
    \ opening_brackets + 1 == closing_brackets;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqt2u5rjd: /tmp/tmpqt2u5rjd.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int i\
    \ = 0;\n    while (brackets[i]) {\n        if (brackets[i] == '<') {\n       \
    \     if (i < brackets.length() - 1 && brackets[i + 1] == '>') {\n           \
    \     i += 2;\n            } else {\n                return false;\n         \
    \   }\n        } else if (brackets[i] == '>') {\n            if (i < brackets.length()\
    \ - 2 && brackets[i + 1] == '<' && brackets[i + 2] == '>') {\n               \
    \ i += 3;\n            } else {\n                return false;\n            }\n\
    \        }\n        ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ma0b4ij: /tmp/tmp3ma0b4ij.cpp:36: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // A stack\
    \ for brackets.\n  std::stack<char> brackets;\n  // A stack for opening brackets.\n\
    \  std::stack<char> opening_brackets;\n  // A stack for closing brackets.\n  std::stack<char>\
    \ closing_brackets;\n  // Current bracket.\n  char current;\n  // Current opening\
    \ bracket.\n  char opening;\n  // Current closing bracket.\n  char closing;\n\
    \  // Is bracket a closing bracket?\n  bool is_closing;\n  // Are brackets closed?\n\
    \  bool is_closed;\n  // Is the current opening bracket an opening bracket?\n\
    \  bool is_opening;\n  // Is the current closing bracket an opening bracket?\n\
    \  bool is_open;\n  // Is the current opening bracket a closing bracket?\n  bool\
    \ is_closing_bracket;\n  // Is the current closing bracket a closing bracket?\n\
    \  bool is_closed_bracket;\n  // Are open brackets empty?\n  bool is_opening_empty;\n\
    \  // Are closing brackets empty?\n  bool is_closing_empty;\n  // Are opening\
    \ brackets empty?\n  bool is_opening_empty_bracket;\n  // Are closing brackets\
    \ empty?\n  bool is_closing_empty_bracket;\n  // Are brackets empty?\n  bool is_empty_opening;\n\
    \  bool is_empty_closing;\n  bool is_empty_opening_closing;\n  // Are brackets\
    \ empty?\n  bool is_empty_opening_empty_closing;\n  // Are brackets empty?\n \
    \ bool is_empty_opening_empty_bracket;\n  // Are brackets empty?\n  bool is_empty_closing_empty_bracket;\n\
    \  // Are brackets empty?\n  bool is_empty_opening_closing_empty_bracket;\n  //\
    \ Are brackets empty?\n  bool is_empty_closing_empty_opening_closing;\n  // Are\
    \ brackets empty?\n  bool is_empty_opening_empty_closing_empty_bracket;\n  //\
    \ Are brackets empty?\n  bool is_empty_opening_closing_empty_opening_empty_bracket;\n\
    \  // Are brackets empty?\n  bool is_empty_closing_empty_opening_closing_empty_opening_closing;\n\
    \  // Are brackets empty?\n  bool is_empty_opening_empty_closing_empty_closing_empty_bracket;\n\
    \  // Are brackets empty?\n  bool is_empty_opening_closing_empty_closing_empty_opening_empty_bracket;\n\
    \  // Are brackets empty?\n  bool is_empty_closing_empty_closing_empty_opening_closing_empty_opening_closing;\n\
    \  // Are brackets empty\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdtq6gnm_.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpdtq6gnm_.cpp:15:20: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   15 |   std::stack<char> brackets;\n      |         \
    \           ^~~~~~~~\n/tmp/tmpdtq6gnm_.cpp:73:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   73 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool ret\
    \ = true;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (!brackets[++i].isdigit()) {\n                ret\
    \ = false;\n                break;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (!brackets[--i].isdigit()) {\n                ret\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wiixikf.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3wiixikf.cpp:17:32: error: request for member \u2018isdigit\u2019 in\
    \ \u2018brackets.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(++\
    \ i)))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   17 |             if (!brackets[++i].isdigit())\
    \ {\n      |                                ^~~~~~~\n/tmp/tmp3wiixikf.cpp:22:32:\
    \ error: request for member \u2018isdigit\u2019 in \u2018brackets.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(--\
    \ i)))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   22 |             if (!brackets[--i].isdigit())\
    \ {\n      |                                ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ left_bracket = brackets.find('<');\n    size_t right_bracket = brackets.find('>');\n\
    \    if (left_bracket == std::string::npos || right_bracket == std::string::npos)\n\
    \        return false;\n    size_t left = left_bracket;\n    size_t right = right_bracket;\n\
    \    bool left_open = false;\n    bool right_open = false;\n    for (size_t i\
    \ = left + 2; i < right; i++) {\n        if ('>' == brackets[i]) {\n         \
    \   right_open = !right_open;\n        } else if ('>' == brackets[i - 1]) {\n\
    \            left_open = !left_open;\n        }\n    }\n    return left_open &&\
    \ right_open;\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) ==\
    \ (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzlk_ew8c: /tmp/tmpzlk_ew8c.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  if (brackets.empty())\n\
    \    return true;\n  int left = 0, right = brackets.size() - 1;\n  while ((left\
    \ < right) && (brackets[left] == brackets[right]))\n    left++;\n  while ((left\
    \ < right) && (brackets[right] == brackets[left]))\n    right--;\n  if (left >\
    \ right)\n    return false;\n  while ((left < right) && (brackets[right] == brackets[left\
    \ + 1]))\n    left++;\n  while ((left < right) && (brackets[left] == brackets[right\
    \ - 1]))\n    right--;\n  return brackets[left] == \">\" && brackets[right] ==\
    \ \"<\";\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqj9duk9.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpfqj9duk9.cpp:27:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   27 |   return brackets[left] == \">\" && brackets[right]\
    \ == \"<\";\n      |                            ^~~\n/tmp/tmpfqj9duk9.cpp:27:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   27 |   return brackets[left] == \">\" && brackets[right] == \"<\";\n     \
    \ |                                                      ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ b1 = brackets.size();\n    size_t b2 = brackets.size();\n\n    for (int i =\
    \ 0; i < b1; ++i) {\n        if (brackets[i] == '>') {\n            b2 = b2 -\
    \ 1;\n            while (i < (b1 - 1) && brackets[i + 1] == '<') {\n         \
    \       ++i;\n                ++b2;\n            }\n            assert(b2 == (b1\
    \ + 1));\n            return (b2 == (b1 + 1));\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw8ly0k_5: /tmp/tmpw8ly0k_5.cpp:24: bool correct_bracketing(std::string):\
    \ Assertion `b2 == (b1 + 1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // loop\
    \ through each bracket\n    for (int i = 0; i < brackets.length(); i++) {\n  \
    \      // if the character at the current index is the same as the one next to\
    \ it...\n        if (brackets[i] == brackets[(i + 1) % brackets.length()]) {\n\
    \            // if the character is \">\", then the closing bracket should be\
    \ \"<\"\n            if (brackets[i] == '>')\n                return false;\n\
    \            // if the character is \"<\", then the opening bracket should be\
    \ \">\"\n            if (brackets[i] == '<')\n                return true;\n \
    \           // if the character is neither \">\" nor \"<\", then the bracket is\
    \ correct\n            return false;\n        }\n    }\n    // the brackets aren't\
    \ correctly nested\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_ksbmvzc: /tmp/tmp_ksbmvzc.cpp:37: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::stack<char>\
    \ bracket;\n    for (char& c : brackets) {\n        if (std::isalpha(c))\n   \
    \         c = tolower(c);\n        else\n            throw std::runtime_error(\"\
    invalid input\");\n        if (c == '<')\n            bracket.push(c);\n     \
    \   if (c == '>')\n            bracket.push(c);\n        if (bracket.empty())\n\
    \            return false;\n        c = bracket.top();\n        bracket.pop();\n\
    \    }\n    return !bracket.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::runtime_error'\n \
    \ what():  invalid input\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tauto opening_brackets\
    \ = std::count_if(brackets.begin(), brackets.end(),\n\t\t\t\t\t\t\t\t\t\t[](char\
    \ x){ return (x == '<') || (x == '>'); });\n\tauto closing_brackets = std::count_if(brackets.begin(),\
    \ brackets.end(),\n\t\t\t\t\t\t\t\t\t\t[](char x){ return (x == '>') || (x ==\
    \ '<'); });\n\treturn closing_brackets == opening_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwlhyz_y7: /tmp/tmpwlhyz_y7.cpp:26: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint left_brackets\
    \ = 0, right_brackets = 0;\n\tfor (int i = 0; i <= brackets.size(); i++) {\n\t\
    \tif (brackets[i] == '<') {\n\t\t\tleft_brackets++;\n\t\t}\n\t\tif (brackets[i]\
    \ == '>') {\n\t\t\tright_brackets++;\n\t\t}\n\t}\n\tif (left_brackets == right_brackets)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwb2wmimc: /tmp/tmpwb2wmimc.cpp:36: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ result to False\n    bool result = false;\n    // for each bracket in brackets\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        // if brackets are in\
    \ pair\n        if (i % 2 == 0) {\n            // if the closing bracket is found,\
    \ break the loop\n            if (brackets[i] == '>') {\n                result\
    \ = true;\n                break;\n            }\n            // else if the opening\
    \ bracket is found, break the loop\n            else if (brackets[i] == '<') {\n\
    \                result = true;\n                break;\n            }\n     \
    \   }\n        // else if brackets are not in pair\n        else {\n         \
    \   // if the closing bracket is not found\n            if (brackets[i] == '>'\
    \ && brackets[i + 1] == '>') {\n                result = true;\n             \
    \   break;\n            }\n            // else if the opening bracket is not found\n\
    \            else if (brackets[i] == '<' && brackets[i + 1] == '<') {\n      \
    \          result = true;\n                break;\n            }\n        }\n\
    \    }\n    // return result\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2__h643_: /tmp/tmp2__h643_.cpp:54: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        // first character of brackets[i]\
    \ will be the opening bracket.\n        // If the brackets[i] is '<', we know\
    \ that the first character of the\n        // next opening bracket is the closing\
    \ bracket.\n        if (brackets[i] != '<') {\n            return false;\n   \
    \     }\n        // if the next opening bracket is '>', then the next opening\
    \ bracket is\n        // the closing bracket.\n        if (brackets[i + 1] ==\
    \ '>') {\n            return true;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5nz59hez: /tmp/tmp5nz59hez.cpp:35: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Create\
    \ a vector to hold the brackets\n    std::vector<std::string> brackets_vec(brackets);\n\
    \    // Create a stack to hold the brackets\n    std::stack<std::pair<std::string,\
    \ std::string>> stack;\n    // Initialize a counter to keep track of correct bracketing\n\
    \    int counter = 0;\n    // Iterate through the string character by character\n\
    \    for (char c : brackets_vec) {\n        // If the stack is empty, then the\
    \ brackets are incorrect.\n        // The opening bracket should have no corresponding\
    \ closing bracket.\n        // The closing bracket should have no corresponding\
    \ opening bracket.\n        if (stack.empty()) {\n            return false;\n\
    \        }\n        // Push the current char to the stack and increment the counter\n\
    \        stack.push(std::make_pair(c, brackets_vec[counter]));\n        counter++;\n\
    \    }\n    // If the stack is not empty, then the brackets are correct.\n   \
    \ // Iterate through the string character by character\n    for (char c : brackets_vec)\
    \ {\n        // If the stack is not empty, then the brackets are correct.\n  \
    \      // Pop the top bracket and compare it to the opening bracket\n        if\
    \ (stack.size()) {\n            std::pair<std::string, std::string> top = stack.top();\n\
    \            if (top.first == brackets_vec[counter]) {\n                counter++;\n\
    \            }\n            else {\n                // If it is not the matching\
    \ bracket, then the brackets are incorrect.\n                // The opening bracket\
    \ should have a corresponding closing bracket.\n                // The closing\
    \ bracket should have a corresponding opening bracket.\n                if (top.first\
    \ != brackets_vec[counter]) {\n                    return false;\n           \
    \     }\n                // Pop the top bracket and compare it to the opening\
    \ bracket\n                stack.pop();\n                counter++;\n        \
    \    }\n        }\n        else {\n            // If the stack is empty, then\
    \ the brackets are incorrect.\n            // The opening bracket should have\
    \ no corresponding closing bracket.\n            // The closing bracket should\
    \ have no corresponding opening bracket.\n            // This shouldn't happen\
    \ since the loop is only executed once.\n            return false;\n        }\n\
    \    }\n    // If the stack is empty, then the brackets are correct.\n    // All\
    \ brackets should be closed.\n    // The counter should equal the length of the\
    \ string.\n    return counter == brackets_vec.size();\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy8yj8sxv.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpy8yj8sxv.cpp:15:51: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::vector(std::string&)\u2019\n \
    \  15 |     std::vector<std::string> brackets_vec(brackets);\n      |        \
    \                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpy8yj8sxv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpy8yj8sxv.cpp:15:51:\
    \ note:   candidate expects 3 arguments, 1 provided\n   15 |     std::vector<std::string>\
    \ brackets_vec(brackets);\n      |                                           \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpy8yj8sxv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n  622 |       vector(initializer_list<value_ty"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (int i=0; i<brackets.length(); i++) {\n    if (brackets[i] == '<')\
    \ count++;\n    else if (brackets[i] == '>') count--;\n  }\n  return count ==\
    \ 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0n9a1myo: /tmp/tmp0n9a1myo.cpp:28: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\t// brackets\
    \ = brackets.replace('<', ' ').replace('>', ' ')\n\t// brackets = brackets.replace('(',\
    \ ' ').replace(')', ' ')\n\t// brackets = brackets.replace(',', ' ')\n\tstd::istringstream\
    \ iss(brackets);\n\tstd::ostringstream oss;\n\tstd::string s, t;\n\tbool flag\
    \ = false;\n\tfor (std::size_t i = 0; i < brackets.length(); ++i) {\n\t\tif (brackets[i]\
    \ == '<') oss << \"<\";\n\t\telse oss << brackets[i];\n\t\tif (brackets[i] ==\
    \ '>') oss << \">\";\n\t\telse oss << brackets[i];\n\t}\n\twhile (iss >> s) {\n\
    \t\tflag = false;\n\t\tfor (std::size_t j = 0; j < s.length(); ++j) {\n\t\t\t\
    if (s[j] == ' ') {\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\
    if (!flag) {\n\t\t\treturn false;\n\t\t}\n\t}\n\twhile (oss >> t) {\n\t\tflag\
    \ = false;\n\t\tfor (std::size_t j = 0; j < t.length(); ++j) {\n\t\t\tif (t[j]\
    \ == ' ') {\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!flag)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphz1ln_nc.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmphz1ln_nc.cpp:39:13: error: no match for \u2018operator>>\u2019 (operand\
    \ types are \u2018std::ostringstream\u2019 {aka \u2018std::__cxx11::basic_ostringstream<char>\u2019\
    } and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   39 |  while (oss >> t) {\n      |         ~~~ ^~ ~\n      |         | \
    \     |\n      |         |      std::string {aka std::__cxx11::basic_string<char>}\n\
    \      |         std::ostringstream {aka std::__cxx11::basic_ostringstream<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:56,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphz1ln_nc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.tcc:1466:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>&\
    \ __in,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.tcc:1466:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphz1ln_nc.cpp:39:16:\
    \ note:   \u2018std::ostringstream\u2019 {aka \u2018std::__cxx11::basic_ostringstream<char>\u2019\
    } is not derived from \u2018std::basic_istream<_Cha"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ new_brackets = brackets;\n    for (char &c : new_brackets) {\n        if (c\
    \ != '<')\n            return false;\n    }\n    for (char &c : new_brackets)\
    \ {\n        if (c != '>')\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptf74jqdb: /tmp/tmptf74jqdb.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    stack<string>\
    \ s;\n    for (auto c : brackets)\n        if (c == '<') s.push(brackets);\n \
    \       else if (c == '>')\n            if (s.empty() || s.top() != '<') return\
    \ false;\n            else s.pop();\n        else s.push(brackets);\n    return\
    \ s.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6xy3qj8w.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp6xy3qj8w.cpp:14:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   14 |     stack<string> s;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp6xy3qj8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp6xy3qj8w.cpp:14:11: error: \u2018string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::string\u2019?\n   14 |     stack<string>\
    \ s;\n      |           ^~~~~~\n      |           std::string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6xy3qj8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmp6xy3qj8w.cpp:14:19:\
    \ error: \u2018s\u2019 was not declared in this scope\n   14 |     stack<string>\
    \ s;\n      |                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for(int\
    \ i = 0; i < brackets.length(); i++) {\n        // we cannot use brackets[i] since\
    \ it could be \"<\".\n        if(brackets[i] != '<' && brackets[i] != '>')\n \
    \           return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg20ih34f: /tmp/tmpg20ih34f.cpp:27: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Create\
    \ a stack to keep track of whether brackets match or not.\n  std::string brackets_stack(brackets);\n\
    \  char c;\n  while (brackets_stack.size() != 0) {\n    c = brackets_stack.back();\n\
    \    brackets_stack.pop_back();\n    if (c == '>')\n      return true;\n    if\
    \ (c == '<')\n      return false;\n  }\n  return false;\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgq8_qqn9: /tmp/tmpgq8_qqn9.cpp:33: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // count\
    \ the number of brackets\n    int num_open_brackets = brackets.count('<');\n \
    \   // if the brackets are not balanced, then return False\n    if (num_open_brackets\
    \ != brackets.count('>')) return false;\n    // if the brackets are balanced,\
    \ then return True\n    return brackets.count('<') == brackets.count('>');\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9zw0zud6.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp9zw0zud6.cpp:15:38: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018count\u2019\
    \n   15 |     int num_open_brackets = brackets.count('<');\n      |          \
    \                            ^~~~~\n/tmp/tmp9zw0zud6.cpp:17:39: error: \u2018\
    std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018count\u2019\n   17 |     if (num_open_brackets != brackets.count('>'))\
    \ return false;\n      |                                       ^~~~~\n/tmp/tmp9zw0zud6.cpp:19:21:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018count\u2019\n   19 |     return brackets.count('<')\
    \ == brackets.count('>');\n      |                     ^~~~~\n/tmp/tmp9zw0zud6.cpp:19:44:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018count\u2019\n   19 |     return brackets.count('<')\
    \ == brackets.count('>');\n      |                                           \
    \ ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // We\
    \ use two stacks, each of which holds brackets.\n    // We start by pushing all\
    \ the brackets into the first stack.\n    stack<char> brackets_stack;\n    for\
    \ (auto c : brackets) {\n        brackets_stack.push(c);\n    }\n    // We then\
    \ go through the second stack until there are no more brackets.\n    while (brackets_stack.size())\
    \ {\n        char left_bracket_char;\n        if (brackets_stack.top() == '<')\
    \ {\n            left_bracket_char = '>';\n            brackets_stack.pop();\n\
    \        } else {\n            left_bracket_char = '<';\n        }\n\n       \
    \ // We need to check whether we can find a matching closing bracket on this stack.\n\
    \        // If not, we can't do this.\n        char right_bracket_char;\n    \
    \    if (brackets_stack.top() == '>') {\n            right_bracket_char = '<';\n\
    \            brackets_stack.pop();\n        } else {\n            right_bracket_char\
    \ = '>';\n        }\n\n        // We need to check whether we can find a matching\
    \ opening bracket on this stack.\n        // If not, we can't do this.\n     \
    \   bool left_match = false;\n        bool right_match = false;\n        char\
    \ left_bracket_char2;\n        if (brackets_stack.top() >= '<') {\n          \
    \  left_bracket_char2 = brackets_stack.top();\n            left_match = true;\n\
    \            brackets_stack.pop();\n        } else {\n            left_match =\
    \ false;\n        }\n        if (brackets_stack.top() >= '>') {\n            right_bracket_char2\
    \ = brackets_stack.top();\n            right_match = true;\n            brackets_stack.pop();\n\
    \        } else {\n            right_match = false;\n        }\n\n        if (left_match\
    \ && right_match) {\n            // We found both a left and a right bracket,\
    \ meaning that it's possible.\n            // So, we pop both of these brackets\
    \ off both stacks.\n            brackets_stack.pop();\n            brackets_stack.pop();\n\
    \        } else {\n            // We found neither a left bracket nor a right\
    \ bracket, meaning that it isn't possible.\n            // So we pop the last\
    \ bracket from the stack.\n            char last_bracket_char = brackets_stack.top();\n\
    \            brackets_stack.pop();\n            if (last_bracket_char == left_bracket_char)\
    \ {\n                // We found a left bracket, but there wasn't a corresponding\
    \ right bracket.\n                // So, we pop the left bracket from the stack.\n\
    \                brackets_stack.pop();\n            } else {\n               \
    \ // We found a right bracket, but there wasn't a corresponding left bracket.\n\
    \                // So, we pop the right bracket from the stack.\n           \
    \     brackets_stack.pop();\n            }\n        }\n\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwiwd13a.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpiwiwd13a.cpp:16:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   16 |     stack<char> brackets_stack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpiwiwd13a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpiwiwd13a.cpp:16:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   16 |     stack<char> brackets_stack;\n      |  \
    \         ^~~~\n/tmp/tmpiwiwd13a.cpp:18:9: error: \u2018brackets_stack\u2019 was\
    \ not declared in this scope\n   18 |         brackets_stack.push(c);\n      |\
    \         ^~~~~~~~~~~~~~\n/tmp/tmpiwiwd13a.cpp:21:12: error: \u2018brackets_stack\u2019\
    \ was not declared in this scope\n   21 |     while (brackets_stack.size()) {\n\
    \      |            ^~~~~~~~~~~~~~\n/tmp/tmpiwiwd13a.cpp:53:13: error: \u2018\
    right_bracket_char2\u2019 was not declared in this scope; did you mean \u2018\
    right_bracket_char\u2019?\n   53 |             right_bracket_char2 = brackets_stack.top();\n\
    \      |             ^~~~~~~~~~~~~~~~~~~\n      |             right_bracket_char\n\
    /tmp/tmpiwiwd13a.cpp:82:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   82 | int main() {\n      |            ^\n/tmp/tmpiwiwd13a.cpp:96:1:\
    \ error: expected \u2018}\u2019 at end of input\n   96 | }\n      | ^\n/tmp/tmpiwiwd13a.cpp:13:47:\
    \ note: to match this \u2018{\u2019\n   13 | bool correct_bracketing(std::string\
    \ brackets) {\n      |                                               ^\n/tmp/tmpiwiwd13a.cpp:96:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   96 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  for(int\
    \ i = 0; i < brackets.length(); ++i) {\n    // Look at the current bracket, either\
    \ '>' or '<', and see if\n    // it is in the correct brackets set. If not, increment\
    \ \n    // i and look for the next bracket. If so, we have a valid bracketed pair.\n\
    \    if (brackets[i] == '<') {\n      if(std::find(brackets.begin(), brackets.end(),\
    \ \">\") != brackets.end()) {\n        return true;\n      }\n      else\n   \
    \     i = brackets.length();\n    }\n    else if (brackets[i] == '>') {\n    \
    \  if(std::find(brackets.begin(), brackets.end(), \"<\") != brackets.end()) {\n\
    \        return true;\n      }\n      else\n        i = brackets.length();\n \
    \   }\n  }\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx_u90hzy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const char [2]]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const char [2]>]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:161:23:\
    \   required from \u2018_Iterator std::__find_if(_Iterator, _Iterator, _Predicate)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const char [2]>]\u2019\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3899:28: \
    \  required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = char [2]]\u2019\n/tmp/tmpx_u90hzy.cpp:19:57:   required from "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    char open_bracket,\
    \ close_bracket;\n    size_t len = brackets.size();\n    for (size_t i = 0; i\
    \ < len; i++)\n    {\n        open_bracket = brackets.at(i);\n        close_bracket\
    \ = brackets.at(len - 1) - open_bracket;\n        if (close_bracket - open_bracket\
    \ != 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyjxa1nl6: /tmp/tmpyjxa1nl6.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    int left_bracket = 0;\n    int right_bracket = 0;\n    bool found\
    \ = false;\n    int left_count = brackets.size() - 1;\n    int right_count = brackets.size();\n\
    \    while (brackets.size() > 0) {\n        if (brackets[0] == '>') {\n      \
    \      if (left_bracket != right_bracket) {\n                left_count--;\n \
    \               right_count++;\n                left_bracket++;\n            }\n\
    \            else {\n                found = true;\n            }\n        }\n\
    \        else if (brackets[0] == '<') {\n            if (left_bracket != right_bracket)\
    \ {\n                left_count++;\n                right_count--;\n         \
    \       left_bracket--;\n            }\n            else {\n                found\
    \ = true;\n            }\n        }\n        else {\n            if (left_bracket\
    \ != right_bracket) {\n                left_bracket++;\n            }\n      \
    \      right_bracket--;\n        }\n        brackets.erase(brackets.begin());\n\
    \    }\n    if (left_bracket != right_bracket) {\n        left_bracket--;\n  \
    \      right_bracket++;\n    }\n    return found;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdg0nitst: /tmp/tmpdg0nitst.cpp:61: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string\
    \ s = brackets;\n  s.erase(0, 1);\n  s.erase(s.size() - 1, 1);\n  for (size_t\
    \ i = 0; i < s.size(); ++i) {\n    if (s[i] == '<') {\n      s.erase(i, 1);\n\
    \      s.erase(s.size() - 1, 1);\n      break;\n    }\n  }\n  return s == brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4quez949: /tmp/tmp4quez949.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        auto cur\
    \ = brackets.at(i);\n        auto next_one = brackets.at(i + 1);\n        auto\
    \ last_one = brackets.at(i - 1);\n        if (cur == \"<\") {\n            if\
    \ (next_one != \">\" && last_one != \">\") {\n                result = false;\n\
    \                break;\n            }\n        } else if (cur == \"<\") {\n \
    \           if (next_one != \">\" && last_one != \"<\") {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwzeuzqbn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpwzeuzqbn.cpp:19:20: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   19 |         if (cur == \"<\") {\n      |   \
    \                 ^~~\n/tmp/tmpwzeuzqbn.cpp:20:29: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   20 |             if (next_one\
    \ != \">\" && last_one != \">\") {\n      |                             ^~~\n\
    /tmp/tmpwzeuzqbn.cpp:20:48: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   20 |             if (next_one != \">\" && last_one\
    \ != \">\") {\n      |                                                ^~~\n/tmp/tmpwzeuzqbn.cpp:24:27:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   24 |         } else if (cur == \"<\") {\n      |                         \
    \  ^~~\n/tmp/tmpwzeuzqbn.cpp:25:29: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   25 |             if (next_one != \">\"\
    \ && last_one != \"<\") {\n      |                             ^~~\n/tmp/tmpwzeuzqbn.cpp:25:48:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   25 |             if (next_one != \">\" && last_one != \"<\") {\n      |  \
    \                                              ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // count\
    \ how many opening brackets are there.\n    // For this case there are 2 opening\
    \ brackets.\n    // In the case that there are 3 opening brackets, there are 1\
    \ opening bracket and 1 closing bracket.\n    // This means we always have 2 opening\
    \ brackets, no matter how many brackets we have.\n    // Therefore we check if\
    \ 2 opening brackets are there.\n    if (brackets.size() != 2)\n        return\
    \ false;\n\n    // for each opening brackets, check if a corresponding closing\
    \ bracket is there.\n    // For this case there are 2 opening brackets.\n    //\
    \ We know that each opening bracket is followed by 1 closing bracket.\n    //\
    \ Therefore we check only 2 opening brackets here.\n    if (brackets[0] == '<'\
    \ && brackets[1] == '>')\n        return true;\n    if (brackets[0] == '>' &&\
    \ brackets[1] == '>')\n        return true;\n\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6zz4buqt: /tmp/tmp6zz4buqt.cpp:36: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int bracket_pos\
    \ = 0;\n    for (; bracket_pos < brackets.length(); ++bracket_pos) {\n       \
    \ if (brackets[bracket_pos] == '<') {\n            while (1) {\n             \
    \   ++bracket_pos;\n                if (bracket_pos >= brackets.length()) {\n\
    \                    return true;\n                }\n                if (brackets[bracket_pos]\
    \ != '>') {\n                    continue;\n                }\n              \
    \  ++bracket_pos;\n                if (bracket_pos >= brackets.length()) {\n \
    \                   return true;\n                }\n                if (brackets[bracket_pos]\
    \ == '>') {\n                    break;\n                }\n            }\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkvtu311n: /tmp/tmpkvtu311n.cpp:40: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int count\
    \ = 0;\n  for (int i = 0; i < brackets.size(); i++) {\n    if (brackets[i] ==\
    \ '<') {\n      if (count > 0) {\n        return false;\n      }\n      count++;\n\
    \    } else if (brackets[i] == '>') {\n      count--;\n      if (count == 0) {\n\
    \        return false;\n      }\n    }\n  }\n  return count == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphli5pypv: /tmp/tmphli5pypv.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = (int)brackets.size();\n    std::vector<std::string> stack;\n    for (int i\
    \ = 0; i < n; ++i) {\n        std::string opening = brackets.substr(0, i);\n \
    \       std::string closing = brackets.substr(i + 1, n);\n        if (opening\
    \ == closing)\n            continue;\n        stack.resize(stack.size() + 1);\n\
    \        stack.push_back(opening);\n        bool found = check_brackets(opening,\
    \ closing, stack);\n        if (!found)\n            return false;\n    }\n  \
    \  return stack.empty();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5iqpfch0.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp5iqpfch0.cpp:23:22: error: \u2018check_brackets\u2019 was not declared\
    \ in this scope\n   23 |         bool found = check_brackets(opening, closing,\
    \ stack);\n      |                      ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  int n =\
    \ brackets.length();\n  std::string left, right;\n  for (int i = 0; i < n; ++i)\
    \ {\n    if (brackets[i] == '<') {\n      left = brackets.substr(0, i);\n    \
    \  right = brackets.substr(i + 1, n - i);\n      if (!right.compare(\">\")) {\n\
    \        return false;\n      }\n    } else {\n      if (!left.compare(brackets.substr(i,\
    \ n - i))) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp68_x656q: /tmp/tmp68_x656q.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ s = brackets;\n    std::sort(s.begin(), s.end());\n    bool result = std::equal(s.begin(),\
    \ s.end(), s.begin() + 1, s.end() - 1);\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphwh6wp46: /tmp/tmphwh6wp46.cpp:21: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    int size = brackets.size();\n    if\
    \ (size == 0)\n        return false;\n    for (int i = 0; i < size; i++) {\n \
    \       if (brackets[i] == \"<\")\n            opening_brackets += brackets[i\
    \ + 1];\n        else if (brackets[i] == \">\")\n            closing_brackets\
    \ += brackets[i + 1];\n        else if (brackets[i] == \"{\")\n            opening_brackets\
    \ += brackets[i + 1];\n        else if (brackets[i] == \"}\")\n            closing_brackets\
    \ += brackets[i + 1];\n        else\n            return false;\n    }\n    return\
    \ opening_brackets == closing_brackets;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiaa3li34.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpiaa3li34.cpp:19:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   19 |         if (brackets[i] == \"<\")\n    \
    \  |                            ^~~\n/tmp/tmpiaa3li34.cpp:21:33: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   21 |     \
    \    else if (brackets[i] == \">\")\n      |                                 ^~~\n\
    /tmp/tmpiaa3li34.cpp:23:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   23 |         else if (brackets[i] == \"{\")\n\
    \      |                                 ^~~\n/tmp/tmpiaa3li34.cpp:25:33: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   25\
    \ |         else if (brackets[i] == \"}\")\n      |                          \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<bool>\
    \ opening_bracket(brackets.size(), false);\n    std::vector<bool> closing_bracket(brackets.size(),\
    \ false);\n    for (auto c : brackets) {\n        bool open = std::find(brackets.begin(),\
    \ brackets.end(), '<') != brackets.end();\n        bool close = std::find(brackets.begin(),\
    \ brackets.end(), '>') != brackets.end();\n        if (open) opening_bracket[c]\
    \ = true;\n        if (close) closing_bracket[c] = true;\n    }\n    for (auto\
    \ c : opening_bracket) {\n        if (!closing_bracket[c]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjz00es9c: /tmp/tmpjz00es9c.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int cnt\
    \ = 0;\n    for (char c : brackets) {\n        if (c == '<')\n            cnt++;\n\
    \        else if (c == '>')\n            cnt--;\n    }\n    return cnt == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplxf_libc: /tmp/tmplxf_libc.cpp:30: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::vector<std::string>\
    \ tokens;\n    std::string token;\n    size_t count = 0; // count the number of\
    \ open brackets\n    size_t total = 0; // the total number of open brackets\n\n\
    \    for (size_t i = 0; brackets[i]; ++i) {\n        if (brackets[i] == '<') {\n\
    \            total += 1;\n        } else if (brackets[i] == '>') {\n         \
    \   total -= 1;\n        }\n    }\n    for (size_t i = 0; brackets[i]; ++i) {\n\
    \        if (brackets[i] == '<') {\n            tokens.push_back(brackets[i]);\n\
    \            count += 1;\n        } else if (brackets[i] == '>') {\n         \
    \   if (count > 0) {\n                tokens[total] = '<';\n                total\
    \ += 1;\n            }\n            count -= 1;\n        }\n    }\n    if (count\
    \ > 0) return false;\n    for (size_t i = 0; i < tokens.size(); ++i) {\n     \
    \   if (tokens[i] == '<') return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7gdi7cz.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpw7gdi7cz.cpp:28:41: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   28 |             tokens.push_back(brackets[i]);\n\
    \      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpw7gdi7cz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_len\
    \ = brackets.size();\n    int opening_brackets_found = 0;\n    int closing_brackets_found\
    \ = 0;\n    for (int i = 0; i < brackets_len; ++i) {\n        char c1 = brackets[i*2];\n\
    \        char c2 = brackets[i*2 + 1];\n        if (c1 == '<') ++opening_brackets_found;\n\
    \        if (c1 == c2) ++closing_brackets_found;\n        if (c1 == '>' && c2\
    \ != '>') return false;\n    }\n    return opening_brackets_found == closing_brackets_found;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsr9rwo0w: /tmp/tmpsr9rwo0w.cpp:29: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // TODO:\
    \ fill in here!\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7gmrm45r: /tmp/tmp7gmrm45r.cpp:23: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string\
    \ open_bracket = \"<\";\n  std::string close_bracket = \">\";\n  std::string result\
    \ = \"True\";\n  for (int i = 0; i < brackets.length(); ++i) {\n    if (brackets[i]\
    \ == open_bracket) {\n      if (brackets[i+1] == close_bracket) {\n        result\
    \ = \"False\";\n        break;\n      }\n    }\n  }\n  std::cout << result <<\
    \ std::endl;\n  return result == \"True\";\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp09vvby71.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp09vvby71.cpp:18:21: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   18 |     if (brackets[i] == open_bracket) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp09vvby71.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp09vvby71.cpp:18:24:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   18 |     if (brackets[i] == open_bracket) {\n   \
    \   |                        ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp09vvby71.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:\
    \   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tfor (int\
    \ i = 0; i < brackets.size() - 1; i++) {\n\t\tif (brackets[i] != brackets[i +\
    \ 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp85l9b51e: /tmp/tmp85l9b51e.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tstd::stack<char>\
    \ brackets;\n\tfor (size_t i = 0; i < brackets.length(); i++) {\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tif (brackets.size() == 0) return false;\n\t\t\tchar c = brackets.top();\n\
    \t\t\tbrackets.pop();\n\t\t\tif (c != '>') return false;\n\t\t\tbrackets.push('>');\n\
    \t\t} else if (brackets[i] == '>') {\n\t\t\tif (brackets.size() == 0) return false;\n\
    \t\t\tchar c = brackets.top();\n\t\t\tbrackets.pop();\n\t\t\tif (c != '<') return\
    \ false;\n\t\t\tbrackets.push('<');\n\t\t}\n\t}\n\treturn brackets.size() == 0;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpriybfhz4.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpriybfhz4.cpp:14:19: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   14 |  std::stack<char> brackets;\n      |          \
    \         ^~~~~~~~\n/tmp/tmpriybfhz4.cpp:15:34: error: \u2018class std::stack<char>\u2019\
    \ has no member named \u2018length\u2019\n   15 |  for (size_t i = 0; i < brackets.length();\
    \ i++) {\n      |                                  ^~~~~~\n/tmp/tmpriybfhz4.cpp:16:15:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::stack<char>\u2019\
    \ and \u2018size_t\u2019 {aka \u2018long unsigned int\u2019})\n   16 |   if (brackets[i]\
    \ == '<') {\n      |               ^\n/tmp/tmpriybfhz4.cpp:22:22: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::stack<char>\u2019 and\
    \ \u2018size_t\u2019 {aka \u2018long unsigned int\u2019})\n   22 |   } else if\
    \ (brackets[i] == '>') {\n      |                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool okay\
    \ = true;\n    \n    // Iterate through every opening bracket.\n    for (auto\
    \ it = brackets.begin(); it != brackets.end(); ++it) {\n        // Iterate through\
    \ every closing bracket.\n        it ++;\n        while (it != brackets.end()\
    \ && *it != \">\") {\n            it ++;\n        }\n        \n        // If this\
    \ closing bracket doesn't follow the opening bracket, fail.\n        if (it ==\
    \ brackets.end() || *it != \">\") {\n            okay = false;\n            break;\n\
    \        }\n        \n        // Otherwise, everything is good.\n        it ++;\n\
    \    }\n    \n    // If this fails, then we fail to properly bracket.\n    return\
    \ okay;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3sxpy8x0.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3sxpy8x0.cpp:20:47: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   20 |         while (it != brackets.end() && *it\
    \ != \">\") {\n      |                                               ^~~\n/tmp/tmp3sxpy8x0.cpp:25:44:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   25 |         if (it == brackets.end() || *it != \">\") {\n      |        \
    \                                    ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  brackets\
    \ = brackets.substr(1, brackets.length() - 2);\n  std::vector<bool> parens(brackets.length(),\
    \ false);\n  // count number of opening brackets\n  for (size_t i = 0; i < brackets.length();\
    \ ++i) {\n    char bracket = brackets[i];\n    if (!isalnum(bracket) || bracket\
    \ == '<' || bracket == '>') {\n      // closing brackets are not allowed.\n  \
    \    return false;\n    }\n    if (bracket == '<') {\n      ++parens[bracket];\n\
    \    } else if (bracket == '>') {\n      --parens[bracket];\n    }\n  }\n  //\
    \ if the count is 0, then brackets are balanced.\n  return parens.empty();\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5yvj6qc0.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp5yvj6qc0.cpp:24:7: error: no match for \u2018operator++\u2019 (operand\
    \ type is \u2018std::vector<bool>::reference\u2019 {aka \u2018std::_Bit_reference\u2019\
    })\n   24 |       ++parens[bracket];\n      |       ^~~~~~~~~~~~~~~~~\n/tmp/tmp5yvj6qc0.cpp:26:7:\
    \ error: no match for \u2018operator--\u2019 (operand type is \u2018std::vector<bool>::reference\u2019\
    \ {aka \u2018std::_Bit_reference\u2019})\n   26 |       --parens[bracket];\n \
    \     |       ^~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  bool is_right_bracket\
    \ = (brackets[0] == '>') ? true: false;\n  int right_brackets = 0;\n  int left_brackets\
    \ = 0;\n  for (int i = 0; i < brackets.size() - 1; ++i) {\n    if (brackets[i]\
    \ == '<') {\n      left_brackets++;\n    }\n    if (brackets[i] == '>') {\n  \
    \    right_brackets++;\n    }\n  }\n\n  if (left_brackets == right_brackets) {\n\
    \    return false;\n  }\n\n  if (right_brackets < left_brackets) {\n    return\
    \ false;\n  }\n\n  if (right_brackets == left_brackets && right_brackets == (brackets.size()\
    \ - 1)) {\n    return true;\n  }\n\n  return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw2z3ddrb: /tmp/tmpw2z3ddrb.cpp:42: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  std::string::size_type\
    \ bracket_index = brackets.find_first_of(\"<>\");\n  return (brackets.find_first_of(\"\
    <\") < bracket_index) &&\n         (brackets.find_first_of(\">\") < bracket_index);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcl4uanfj: /tmp/tmpcl4uanfj.cpp:20: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = false;\n    for (unsigned int i = 0; i < brackets.size() - 1; ++i) {\n   \
    \     if (brackets[i] == '<' && brackets[i + 1] == '>') {\n            correct\
    \ = true;\n            break;\n        }\n    }\n    return correct;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3f6zu0g7: /tmp/tmp3f6zu0g7.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int n\
    \ = brackets.size();\n    for (int i = 0; i < n; ++i) {\n        bool is_opening\
    \ = (brackets[i] >= '<' && brackets[i] <= '<');\n        if (is_opening) return\
    \ i == n || brackets[i] != '>';\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpib7nrmer: /tmp/tmpib7nrmer.cpp:27: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size() - 1;\n    // Keep track of opening brackets\
    \ seen\n    bool seen_brackets[open_brackets] = {};\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            seen_brackets[open_brackets]\
    \ = true;\n        } else if (brackets[i] == '>') {\n            if (seen_brackets[open_brackets])\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz5jk2dz2: /tmp/tmpz5jk2dz2.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  assert(brackets.length()\
    \ % 2 == 0);\n  int count = 0;\n  for (int i = 0; i < brackets.length(); ++i)\
    \ {\n    if (brackets[i] == '<') {\n      ++count;\n    } else if (brackets[i]\
    \ == '>') {\n      --count;\n    }\n    if (count < 0) return false;\n  }\n  return\
    \ count == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n   \
    \ assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) ==\
    \ (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbgr4q796: /tmp/tmpbgr4q796.cpp:14: bool correct_bracketing(std::string):\
    \ Assertion `brackets.length() % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Complete\
    \ this function\n    // Don't forget to return a bool value\n    // Read more\
    \ at: https://www.geeksforgeeks.org/check-whether-a-bracket-pair-is-correctly-placed/\n\
    \    // You can use the string functions: replace, find, substr, find,\n    //\
    \ find_first_of, find_first_not_of, find_last_of, find_last_not_of\n    // and\
    \ compare the results to the expected values\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmyf2vs1p: /tmp/tmpmyf2vs1p.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int bracket_count\
    \ = 0;\n    for (int i = 0; i < brackets.size() - 1; i++) {\n        if (brackets[i]\
    \ == \"<\" && brackets[i + 1] == \"<\") {\n            bracket_count++;\n    \
    \    } else if (brackets[i] == \">\" && brackets[i + 1] == \">\") {\n        \
    \    bracket_count--;\n        }\n    }\n    return bracket_count == 0;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ei23pqc.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3ei23pqc.cpp:16:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (brackets[i] == \"<\" && brackets[i\
    \ + 1] == \"<\") {\n      |                            ^~~\n/tmp/tmp3ei23pqc.cpp:16:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (brackets[i] == \"<\" && brackets[i + 1] == \"<\") {\n   \
    \   |                                                      ^~~\n/tmp/tmp3ei23pqc.cpp:18:35:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   18 |         } else if (brackets[i] == \">\" && brackets[i + 1] == \">\")\
    \ {\n      |                                   ^~~\n/tmp/tmp3ei23pqc.cpp:18:61:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   18 |         } else if (brackets[i] == \">\" && brackets[i + 1] == \">\")\
    \ {\n      |                                                             ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.length();\n    std::vector<bool> opening_brackets(len, false);\n\
    \    for (int i = 0; i < len; i++) {\n        if (brackets[i] != '<') {\n    \
    \        continue;\n        }\n        // increment the index by one, to skip\
    \ the opening bracket.\n        // since we just encounter \"<\", the index will\
    \ be 0 at this point.\n        // and therefore the condition will be true and\
    \ the loop will execute.\n        // After the first iteration, i is 1, so we\
    \ can access \"brackets[1]\".\n        opening_brackets[1] = true;\n    }\n  \
    \  // initialize a boolean array to store whether the closing bracket is the\n\
    \    // last opening bracket or not.\n    std::vector<bool> closing_brackets(len,\
    \ false);\n    for (int i = 0; i < len; i++) {\n        if (brackets[i] == '>')\
    \ {\n            closing_brackets[i - 1] = true;\n        }\n    }\n    // if\
    \ all brackets are closed, return True.\n    if (std::accumulate(opening_brackets.begin(),\
    \ opening_brackets.end(), 0) ==\n        len &&\n        std::accumulate(closing_brackets.begin(),\
    \ closing_brackets.end(), 0) ==\n        len) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpan01n4mz: /tmp/tmpan01n4mz.cpp:46: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  // Check\
    \ whether the brackets string is empty or not.\n  if (brackets.empty()) {\n  \
    \  return false;\n  }\n  // Make an array for the brackets.\n  std::vector<char>\
    \ bracketsArray;\n  for (char bracket: brackets) {\n    if (bracket == '<' ||\
    \ bracket == '>') {\n      bracketsArray.push_back(bracket);\n    }\n  }\n  //\
    \ Check the array size to be even for correct bracketing.\n  // We don't want\
    \ a pairs of brackets to be unpaired.\n  if (bracketsArray.size() % 2 != 0) {\n\
    \    return false;\n  }\n  // Check whether the first and last elements are brackets.\n\
    \  if (bracketsArray[0] != bracketsArray[bracketsArray.size() - 1]) {\n    return\
    \ false;\n  }\n  // Initialize an stack to store brackets.\n  std::stack<char>\
    \ openBrackets;\n  // Insert first brackets.\n  openBrackets.push(bracketsArray[0]);\n\
    \  while (openBrackets.size() > 0) {\n    char currentChar = openBrackets.top();\n\
    \    openBrackets.pop();\n    if (currentChar == '<') {\n      openBrackets.push('>');\n\
    \    } else if (currentChar == '>') {\n      openBrackets.push('<');\n    } else\
    \ {\n      // Otherwise, we found a closed bracket.\n      // If the stack is\
    \ empty, we don't know whether it matched correctly.\n      // Return false here\
    \ so that we could let it return true here.\n      if (openBrackets.size() ==\
    \ 0) {\n        return false;\n      }\n      char lastChar = openBrackets.top();\n\
    \      // Remove the matched bracket from the stack.\n      openBrackets.pop();\n\
    \      // If both brackets are matched, return true.\n      if (currentChar ==\
    \ lastChar) {\n        return true;\n      }\n    }\n  }\n  // Otherwise, return\
    \ false.\n  return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqk7g5885: /tmp/tmpqk7g5885.cpp:66: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int size\
    \ = brackets.size();\n    for (int i = 0; i < size - 1; ++i) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>')\n            return false;\n    }\n    return\
    \ brackets[size - 1] == '>';\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfz1ix5pt: /tmp/tmpfz1ix5pt.cpp:27: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if ((brackets[i] != '<') || (brackets[i]\
    \ != '>')) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzabwc17w: /tmp/tmpzabwc17w.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    if (brackets.size()\
    \ == 0) return false;\n    int left_brackets = 0;\n    int right_brackets = 0;\n\
    \    bool has_left_bracket = false;\n    bool has_right_bracket = false;\n   \
    \ for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<')\
    \ {\n            has_left_bracket = true;\n            ++left_brackets;\n    \
    \    } else if (brackets[i] == '>') {\n            has_right_bracket = true;\n\
    \            ++right_brackets;\n        }\n    }\n    if (left_brackets == 0 ||\
    \ right_brackets == 0) return false;\n    // there should be only one left bracket\n\
    \    // and only one right bracket.\n    // If there exists any other pair of\
    \ bracket,\n    // it means that the string does not satisfy bracketing rule.\n\
    \    if (has_left_bracket && has_right_bracket) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpomfm9dyz: /tmp/tmpomfm9dyz.cpp:38: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n  assert(!brackets.empty());\n\
    \  std::unordered_set<std::string> open_brackets;\n  std::unordered_set<std::string>\
    \ close_brackets;\n  for (char bracket: brackets) {\n    if (bracket == '<') {\n\
    \      open_brackets.insert(bracket);\n    } else if (bracket == '>') {\n    \
    \  close_brackets.insert(bracket);\n    }\n  }\n  return open_brackets.size()\
    \ == close_brackets.size();\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbe0i3nwf.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpbe0i3nwf.cpp:19:35: error: no matching function for call to \u2018\
    std::unordered_set<std::__cxx11::basic_string<char> >::insert(char&)\u2019\n \
    \  19 |       open_brackets.insert(bracket);\n      |                        \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpbe0i3nwf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:420:7:\
    \ note: candidate: \u2018std::pair<typename std::_Hashtable<_Value, _Value, _Alloc,\
    \ std::__detail::_Identity, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash,\
    \ std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>,\
    \ std::__is_nothrow_invocable<const _Hash&, const _Tp&> > >::value, true, true>\
    \ >::iterator, bool> std::unordered_set<_Value, _Hash, _Pred, _Alloc>::insert(const\
    \ value_type&) [with _Value = std::__cxx11::basic_string<char>; _Hash = std::hash<std::__cxx11::basic_string<char>\
    \ >; _Pred = std::equal_to<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; typename std::_Hashtable<_Value, _Value, _Alloc, std::__detail::_Identity,\
    \ _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash,\
    \ std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>,\
    \ std::__is_nothrow_invocable<const _Hash&, const _Tp&> > >::value, true, true>\
    \ >::iterator = std::__detail::_Node_iterator<std::__cxx11::basic_string<char>,\
    \ true, true>; std::unordered_set<_Value, _Hash, _Pred, _Alloc>::value_type =\
    \ std::__cxx11::basic_string<char>]\u2019\n  420 |       insert(const value_type&\
    \ __x)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:420:32:\
    \ note:   no kno"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.size()\
    \ > 0);\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<')\n            return (i == (brackets.size() - 1) ? false : true);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8tcfljj6: /tmp/tmp8tcfljj6.cpp:27: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // the\
    \ size of the input string\n    int size = brackets.size();\n    // number of\
    \ opening brackets\n    int open_brackets = 0;\n    // number of closing brackets\n\
    \    int close_brackets = 0;\n    // for each character of the brackets string\n\
    \    for(int i = 0; i < size; i++) {\n        // if we reached a bracket\n   \
    \     if(brackets[i] == '<') {\n            // increment the number of opening\
    \ brackets\n            open_brackets++;\n            // if we reached a closing\
    \ bracket\n            if(brackets[i+1] == '>') {\n                // increment\
    \ the number of closing brackets\n                close_brackets++;\n        \
    \    }\n            // if we reached the end of the input string\n           \
    \ if(brackets[i+1] == ']') {\n                // if we reached all the opening\
    \ brackets\n                if(open_brackets == close_brackets) {\n          \
    \          // return True\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    // if we reached the end of the input string\n\
    \    if(brackets[size-1] == ']') {\n        // if we reached all the opening brackets\n\
    \        if(open_brackets == close_brackets) {\n            // return True\n \
    \           return true;\n        }\n    }\n    // return False\n    return false;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9c8_xep4: /tmp/tmp9c8_xep4.cpp:54: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n\tint count\
    \ = 0;\n\tfor (int i = 0; i < brackets.size(); i++)\n\t\tif (brackets[i] == '<')\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tcount--;\n\treturn count == 0;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp97kx4a8d: /tmp/tmp97kx4a8d.cpp:29: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ b_size = brackets.size();\n    // loop through all brackets\n    for (size_t\
    \ i = 0; i < b_size; i++) {\n        if (brackets[i] == \"<\") {\n           \
    \ // increment count for left bracket\n            left_bracket_count++;\n   \
    \     } else if (brackets[i] == \">\") {\n            // increment count for right\
    \ bracket\n            right_bracket_count++;\n        }\n    }\n    return (left_bracket_count\
    \ == right_bracket_count);\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp10tzxx2g.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp10tzxx2g.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] == \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmp10tzxx2g.cpp:19:13: error: \u2018\
    left_bracket_count\u2019 was not declared in this scope\n   19 |             left_bracket_count++;\n\
    \      |             ^~~~~~~~~~~~~~~~~~\n/tmp/tmp10tzxx2g.cpp:20:35: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   20 | \
    \        } else if (brackets[i] == \">\") {\n      |                         \
    \          ^~~\n/tmp/tmp10tzxx2g.cpp:22:13: error: \u2018right_bracket_count\u2019\
    \ was not declared in this scope\n   22 |             right_bracket_count++;\n\
    \      |             ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp10tzxx2g.cpp:25:13: error: \u2018\
    left_bracket_count\u2019 was not declared in this scope\n   25 |     return (left_bracket_count\
    \ == right_bracket_count);\n      |             ^~~~~~~~~~~~~~~~~~\n/tmp/tmp10tzxx2g.cpp:25:35:\
    \ error: \u2018right_bracket_count\u2019 was not declared in this scope\n   25\
    \ |     return (left_bracket_count == right_bracket_count);\n      |         \
    \                          ^~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    assert(brackets.length()\
    \ % 2 == 0);\n    int size = brackets.length() / 2;\n    std::string opening_brackets[size],\
    \ closing_brackets[size];\n    for (int i = 0; i < brackets.length(); i += 2)\
    \ {\n        opening_brackets[i / 2] = brackets.substr(i, 2);\n        closing_brackets[i\
    \ / 2] = brackets.substr(i + 2, 2);\n    }\n    for (int i = 0; i < size; ++i)\
    \ {\n        if (opening_brackets[i] == \"<\" && closing_brackets[i] == \">\"\
    ) {\n            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1zpmqvgq: /tmp/tmp1zpmqvgq.cpp:30: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    \n   \
    \ std::vector<std::pair<std::string, std::string> > bracket_pairs;\n    \n   \
    \ for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            if (bracket_pairs.size() == 0) {\n                bracket_pairs.push_back({brackets.substr(0,\
    \ i), brackets.substr(i+1, brackets.length() - i)});\n            } else {\n \
    \               bracket_pairs.back().second = brackets.substr(i+1, brackets.length()\
    \ - i);\n                bracket_pairs.pop_back();\n            }\n        } else\
    \ if (brackets[i] == '>') {\n            if (bracket_pairs.size() == 0) {\n  \
    \              bracket_pairs.push_back({brackets.substr(0, i), brackets.substr(i+1,\
    \ brackets.length() - i)});\n            } else {\n                bracket_pairs.back().first\
    \ = brackets.substr(i+1, brackets.length() - i);\n                bracket_pairs.pop_back();\n\
    \            }\n        } else {\n            if (bracket_pairs.size() == 0) {\n\
    \                bracket_pairs.push_back({brackets.substr(0, i), brackets.substr(i+1,\
    \ brackets.length() - i)});\n            } else {\n                throw std::runtime_error(\"\
    Mismatched brackets\");\n            }\n        }\n    }\n    \n    for (size_t\
    \ i = 0; i < bracket_pairs.size(); i++) {\n        if (!bracket_pairs[i].second.empty())\
    \ {\n            if (bracket_pairs[i].first == \"<\") {\n                bracket_pairs[i].first\
    \ += \">\";\n            } else {\n                bracket_pairs[i].second +=\
    \ \">\";\n            }\n        }\n    }\n    \n    for (size_t i = 0; i < bracket_pairs.size();\
    \ i++) {\n        if (!bracket_pairs[i].first.empty()) {\n            if (bracket_pairs[i].first\
    \ == \"<\") {\n                bracket_pairs[i].first = \"\";\n            } else\
    \ {\n                bracket_pairs[i].first = \"\";\n            }\n        }\n\
    \        if (!bracket_pairs[i].second.empty()) {\n            if (bracket_pairs[i].second\
    \ == \"<\") {\n                bracket_pairs[i].second += \">\";\n           \
    \ } else {\n                bracket_pairs[i].second += \">\";\n            }\n\
    \        }\n    }\n    \n    if (bracket_pairs.size() != brackets.length()) {\n\
    \        return false;\n    }\n    \n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            brackets[i] = bracket_pairs[brackets[i]].first;\n\
    \        } else if (brackets[i] == '>') {\n            brackets[i] = bracket_pairs[brackets[i]].second;\n\
    \        } else {\n            throw std::runtime_error(\"Mismatched brackets\"\
    );\n        }\n    }\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxhqldj9z.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpxhqldj9z.cpp:74:54: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   74 |             brackets[i] = bracket_pairs[brackets[i]].first;\n\
    /tmp/tmpxhqldj9z.cpp:76:54: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   76 |             brackets[i] = bracket_pairs[brackets[i]].second;\n"
  exit_code: 1
  status: SyntaxError
