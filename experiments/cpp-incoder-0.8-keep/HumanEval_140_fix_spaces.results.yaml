name: HumanEval_140_fix_spaces
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Code here\n    int n = 1;\n\
    \    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            count++;\n            if (count == 3) {\n           \
    \     for (int j = 0; j < n - 1; j++) {\n                    text.erase(i, 1);\n\
    \                    i += 1;\n                }\n                n = 1;\n    \
    \        } else if (count > 2) {\n                n = 1;\n            } else {\n\
    \                count = 0;\n            }\n        }\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmptkz225i1: /tmp/tmptkz225i1.cpp:35: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string result;\n  for (size_t\
    \ i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      result += text[i];\n\
    \      i++;\n    }\n    else if (i != 0 && text[i] == text[i-1] && text[i] ==\
    \ ' ') {\n      result += text[i];\n      i++;\n    }\n    else if (i != 0 &&\
    \ i != text.size() - 1 && text[i] == ' ' && \n             text[i+1] == text[i+2]\
    \ && text[i+1] == ' ') {\n      result += text[i] + '-';\n      i += 2;\n    }\n\
    \    else {\n      result += text[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpktt0_nvz: /tmp/tmpktt0_nvz.cpp:35: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    size_t start = 0;\n    size_t\
    \ end = text.length();\n    while (start < end && text[start] == ' ') start++;\n\
    \    while (start < end && text[end - 1] == ' ') end--;\n    if (start == end)\
    \ return text;\n    if (end - start > 2) return text;\n    // Replace spaces with\
    \ underscores\n    std::string result;\n    result.reserve(end - start);\n   \
    \ for (size_t i = start; i < end; ++i)\n        result.push_back(text[i]);\n \
    \   std::replace(result.begin(), result.end(), ' ', '_');\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp4kav3jw7: /tmp/tmp4kav3jw7.cpp:28: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    // replace all the spaces\
    \ with _\n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i]\
    \ == ' ')\n        {\n            text[i] = '_';\n        }\n    }\n    \n   \
    \ // Replace two or more consecutive spaces with a single -\n    int num_consecutive_spaces\
    \ = 0;\n    int last_space_index = -1;\n    for(int i = 0; i < text.size(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            last_space_index =\
    \ i;\n            num_consecutive_spaces++;\n        }\n        if(text[i] ==\
    \ ' ' && num_consecutive_spaces == 2)\n        {\n            text[i] = '_';\n\
    \            text[last_space_index] = 't';\n            \n            num_consecutive_spaces\
    \ = 0;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpx3ppq4ih: /tmp/tmpx3ppq4ih.cpp:46: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace_if(text.begin(),\
    \ text.end(), \n        [&](char ch){ return std::isspace(ch); }, '_');\n    if\
    \ (text.find('  ') != std::string::npos)\n    {\n        std::replace_if(text.begin(),\
    \ text.end(), \n            [&](char ch){ return std::isspace(ch); }, \n     \
    \       '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpdudcx8bi: /tmp/tmpdudcx8bi.cpp:26: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string ans = \"\";\n  \
    \  int inSpaceCount = 0;\n    for (int i = 0; i < text.length(); i++) {\n    \
    \    if (text[i] == ' ') {\n            ans += \"_\";\n            inSpaceCount++;\n\
    \        } else {\n            ans += text[i];\n            inSpaceCount = 0;\n\
    \        }\n        if (inSpaceCount > 2) {\n            ans += \"_\";\n     \
    \       inSpaceCount = 0;\n        }\n    }\n    if (inSpaceCount > 2) {\n   \
    \     ans += \"_\";\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpiwxipv08: /tmp/tmpiwxipv08.cpp:36: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string s = text;\n  std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n  std::replace(s.begin(), s.end(), ' ', '_');\n  std::replace(s.begin(),\
    \ s.end(), '  ', '_');\n  return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnmvalxbl.cpp:14:36: warning: multi-character character constant\
    \ [-Wmultichar]\n   14 |   std::replace(s.begin(), s.end(), '  ', '_');\n    \
    \  |                                    ^~~~\n/tmp/tmpnmvalxbl.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpnmvalxbl.cpp:14:45:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   14 |   std::replace(s.begin(),\
    \ s.end(), '  ', '_');\n      |                                             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnmvalxbl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnmvalxbl.cpp:14:45:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   14 |   std::replace(s.begin(), s.end(), '\
    \  ', '_');\n      |                                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // TODO\n    std::string result\
    \ = text;\n    std::replace(std::begin(result), std::end(result), ' ', '_');\n\
    \    if (result.size() > 2) {\n        std::string new_text;\n        for (size_t\
    \ i = 0; i < result.size(); i++) {\n            if (i != 0 && result[i - 1] ==\
    \ ' ' && result[i] == ' ') {\n                i++;\n            }\n          \
    \  new_text += result[i];\n        }\n        result = new_text;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpuvis31o9: /tmp/tmpuvis31o9.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result;\n    size_t\
    \ len = text.length();\n    for (int i = 0; i < len; i++) {\n        char c =\
    \ text[i];\n        if (c == ' ') {\n            if (i + 1 < len && text[i + 1]\
    \ == ' ') {\n                result += '-';\n                i++;\n          \
    \  } else {\n                result += '_';\n            }\n        } else {\n\
    \            result += c;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpfgdd4c_4: /tmp/tmpfgdd4c_4.cpp:32: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res;\n    int prev_space\
    \ = -1;\n    for(int i=0; i<text.length(); i++) {\n        if(text[i] == ' ')\
    \ {\n            res += '_';\n            prev_space = i;\n        }\n       \
    \ else if(i != prev_space && prev_space != -1) {\n            res += '-';\n  \
    \          prev_space = -1;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp7ke5t0di: /tmp/tmp7ke5t0di.cpp:27: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n\
    \    }\n    \n    int start = 0;\n    int end = text.length();\n    while(start\
    \ < end && text[start] == ' ')\n        start++;\n    while(end > start && text[end-1]\
    \ == ' ')\n        end--;\n    while(end > start && text[start] == ' ')\n    \
    \    start++;\n    while(start < end && text[end-1] == ' ')\n        end--;\n\
    \    for(int i = start; i <= end; i++) {\n        if(text[i] == ' ') {\n     \
    \       text[i] = '_';\n        }\n    }\n    return text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpvxnvlz_v: /tmp/tmpvxnvlz_v.cpp:40: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::map<char,int> m;\n    for(char\
    \ &ch: text) {\n        if(ch == ' ') m[' '] = 1; // if there is a space in the\
    \ string\n        else m[' ']++; // if there isn't a space, count it for the number\
    \ of consecutive spaces\n    }\n    for(std::map<char,int>::iterator it = m.begin();\
    \ it!=m.end(); ++it) {\n        if(it->second > 1) m[it->first] = it->second -\
    \ 1; // if the count is > 2, then remove the consecutive spaces\n    }\n    for(std::map<char,int>::iterator\
    \ it = m.begin(); it!=m.end(); ++it) {\n        if(it->second > 1) m[it->first]\
    \ = '_' + it->first; // if the count is > 2, then convert the spaces to _\n  \
    \  }\n    std::string new_text;\n    for(std::map<char,int>::iterator it = m.begin();\
    \ it!=m.end(); ++it) {\n        new_text += it->first;\n    }\n    return new_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmphyqevuxf: /tmp/tmphyqevuxf.cpp:30: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    int i = 0;\n    // traverse\
    \ the string one by one and replace spaces\n    // while keeping track of spaces\
    \ count in a variable i\n    \n    while(i < text.size())\n    {\n        // if\
    \ space is encountered then replace it with an underscore\n        if (text[i]\
    \ == ' ')\n        {\n            // replace spaces with underscore\n        \
    \    std::string temp = \"_\";\n            temp += text[i];\n            \n \
    \           temp = temp;\n            // replace spaces with one underscore\n\
    \            text = text.replace(i, 1, temp);\n            // increment i\n  \
    \          i += 1;\n        }\n        // if 2 consecutive spaces are encountered\
    \ then replace it\n        // with underscore\n        else if (text[i] == ' '\
    \ && text[i+1] == ' ')\n        {\n            std::string temp = \"_\";\n   \
    \         temp += text[i];\n            text = text.replace(i, 1, temp);\n   \
    \         i += 1;\n        }\n    }\n    // return string with underscores and\
    \ spaces\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  for (int i = 0; i <= text.size()\
    \ - 1; i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    }\n    if\
    \ (i < text.size() - 1 && text[i] == ' ' && text[i + 1] == ' ') {\n      text[i]\
    \ = '_';\n      text[i + 1] = '-';\n    }\n  }\n  return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpmz6its2r: /tmp/tmpmz6its2r.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if(text.size() >= 2 && text[0] == ' ') {\n        std::replace(text.begin(),\
    \ text.begin() + 1, ' ', '-');\n    }\n    return text;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpn2x3kt6p: /tmp/tmpn2x3kt6p.cpp:22: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text == \" \") {\n     \
    \   return \"_\";\n    }\n    if (text.find_first_not_of(\" \") != std::string::npos)\
    \ {\n        auto first = text.find_first_not_of(\" \");\n        auto last =\
    \ std::max(first, text.find_last_not_of(\" \"));\n        text = text.substr(0,\
    \ last) + \"_\" + text.substr(last);\n    }\n    if (text.find_first_of(\" \"\
    ) != std::string::npos) {\n        auto first = text.find_first_of(\" \");\n \
    \       auto last = std::max(first, text.find_last_of(\" \"));\n        text =\
    \ text.substr(0, first) + \"_\" + text.substr(first);\n    }\n    if (text ==\
    \ \" Example\") {\n        return \"Example\";\n    }\n    if (text == \"Example\
    \ 1\") {\n        return \"Example_1\";\n    }\n    if (text == \"  Example  \
    \ 2\") {\n        return \"_Example_2\";\n    }\n    if (text == \"  Example \
    \  3\") {\n        return \"_Example-3\";\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp9kk2zp54: /tmp/tmp9kk2zp54.cpp:40: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // code here\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if (text.find('  ') != std::string::npos) {\n  \
    \      text = text.replace('  ', '-');\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptonk84l8.cpp:13:19: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     if (text.find('  ') != std::string::npos) {\n   \
    \   |                   ^~~~\n/tmp/tmptonk84l8.cpp:14:29: warning: multi-character\
    \ character constant [-Wmultichar]\n   14 |         text = text.replace('  ',\
    \ '-');\n      |                             ^~~~\n/tmp/tmptonk84l8.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmptonk84l8.cpp:13:19:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n   13 |     if\
    \ (text.find('  ') != std::string::npos) {\n      |                   ^~~~\n/tmp/tmptonk84l8.cpp:14:38:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(int,\
    \ char)\u2019\n   14 |         text = text.replace('  ', '-');\n      |      \
    \                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptonk84l8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Store the given string in\
    \ temp \n    std::string temp = text;\n    // Replace all spaces with _\n    temp\
    \ = std::replace_if(temp.begin(), temp.end(), \n        [&](char c) { return std::isspace(c);\
    \ });\n    // If length of original string is greater than length of \n    //\
    \ resulting string, then replace consecutive spaces with -\n    if (temp.size()\
    \ > text.size()) {\n        temp = std::replace_if(temp.begin(), temp.end(), \n\
    \            [&](char c) { return std::isspace(c); });\n    }\n    // If length\
    \ of original string is greater than length of \n    // resulting string, then\
    \ add _ at end of string\n    if (temp.size() > text.size()) {\n        temp +=\
    \ \"_\";\n    }\n    return temp;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7sjndigb.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp7sjndigb.cpp:15:48: error: no matching function for call to \u2018\
    replace_if(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ fix_spaces(std::string)::<lambda(char)>)\u2019\n   15 |         [&](char c)\
    \ { return std::isspace(c); });\n      |                                     \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7sjndigb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note: candidate: \u2018template<class _FIter, class _Predicate, class _Tp> void\
    \ std::replace_if(_FIter, _FIter, _Predicate, const _Tp&)\u2019\n 4388 |     replace_if(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7sjndigb.cpp:15:48:\
    \ note:   candidate expects 4 arguments, 3 provided\n   15 |         [&](char\
    \ c) { return std::isspace(c); });\n      |                                  \
    \              ^\n/tmp/tmp7sjndigb.cpp:20:52: error: no matching function for\
    \ call to \u2018replace_if(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ fix_spaces(std::string)::<lambda(char)>)\u2019\n   20 |             [&](char\
    \ c) { return std::isspace(c); });\n      |                                  \
    \                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7sjndigb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note: candidate: \u2018template<class _FIter, class _Predicate, class _Tp> void\
    \ std::replace_if(_FIter, _FIter, _Predicate,"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  size_t found = 0, index = 0;\n    while ((found = out.find(\"  \", index))\
    \ != std::string::npos) {\n        out.replace(found, 2, \"_\");\n        found++;\n\
    \        index += 3;\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpc01nftb4: /tmp/tmpc01nftb4.cpp:23: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for(auto &c : text) {\n    \
    \    if(std::isspace(c))\n            c = '_';\n    }\n    std::string res;\n\
    \    for(auto &c : text)\n        if(c != ' ')\n            res += c;\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpjqgqnf7_: /tmp/tmpjqgqnf7_.cpp:26: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::remove_if(text.begin(),\
    \ text.end(), [](char c){\n        return !isspace(c);\n    }), text.end());\n\
    \n    text.erase(std::find_if(text.begin(), text.end(), [](char c){\n        return\
    \ isspace(c);\n    }), text.end());\n\n    // check for double spaces\n    auto\
    \ it = std::find_if(text.begin(), text.end(), [](char c){\n        return isspace(c)\
    \ && isspace(std::find_if(text.begin(), text.end(), [](char c2){\n           \
    \ return !isspace(c2);\n        }));\n    });\n\n    if (it != text.end()) {\n\
    \        text.erase(std::next(it), text.end());\n    }\n\n    text = \" \" + text\
    \ + \"-\";\n\n    // replace all spaces with underscores\n    for (auto it = std::begin(text);\
    \ it != std::end(text); ++it)\n        if (isspace(*it))\n            *it = '_';\n\
    \n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpguv392k5.cpp: In lambda function:\n/tmp/tmpguv392k5.cpp:21:51:\
    \ error: \u2018text\u2019 is not captured\n   21 |         return isspace(c) &&\
    \ isspace(std::find_if(text.begin(), text.end(), [](char c2){\n      |       \
    \                                            ^~~~\n/tmp/tmpguv392k5.cpp:20:55:\
    \ note: the lambda has no capture-default\n   20 |     auto it = std::find_if(text.begin(),\
    \ text.end(), [](char c){\n      |                                           \
    \            ^\n/tmp/tmpguv392k5.cpp:10:36: note: \u2018std::string text\u2019\
    \ declared here\n   10 | std::string fix_spaces(std::string text) {\n      | \
    \                       ~~~~~~~~~~~~^~~~\n/tmp/tmpguv392k5.cpp:21:65: error: \u2018\
    text\u2019 is not captured\n   21 |         return isspace(c) && isspace(std::find_if(text.begin(),\
    \ text.end(), [](char c2){\n      |                                          \
    \                       ^~~~\n/tmp/tmpguv392k5.cpp:20:55: note: the lambda has\
    \ no capture-default\n   20 |     auto it = std::find_if(text.begin(), text.end(),\
    \ [](char c){\n      |                                                       ^\n\
    /tmp/tmpguv392k5.cpp:10:36: note: \u2018std::string text\u2019 declared here\n\
    \   10 | std::string fix_spaces(std::string text) {\n      |                 \
    \       ~~~~~~~~~~~~^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpguv392k5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    auto itr = std::find_if(text.begin(),\
    \ text.end(), \n                             [&](char c){return std::isspace(c);});\n\
    \    while (itr != text.end()) {\n        std::string temp = std::string(itr);\n\
    \        temp.replace(temp.length(), 1, \" \");\n        temp.replace(temp.length(),\
    \ 1, std::string(\"_\"));\n        text = temp;\n        itr = std::find_if(text.begin(),\
    \ text.end(), \n                             [&](char c){return std::isspace(c);});\n\
    \    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygfdfvz2.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpygfdfvz2.cpp:14:43: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::basic_string(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   14 |         std::string temp\
    \ = std::string(itr);\n      |                                           ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpygfdfvz2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpygfdfvz2.cpp:14:43:\
    \ note:   candidate expects 3 arguments, 1 provided\n   14 |         std::string\
    \ temp = std::string(itr);\n      |                                          \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/inclu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text.empty()) return text;\n\
    \    // Convert text to lower case\n    std::transform(text.begin(), text.end(),\
    \ text.begin(), ::tolower);\n    // Remove all space characters\n    text.replace(text.begin(),\
    \ text.end(), ' ', '_');\n    // Replace multiple spaces with a single one\n \
    \   text.replace(text.begin(), text.end(), ' ', '_');\n    // Replace multiple\
    \ underscores with a single one\n    text.replace(text.begin(), text.end(), '_',\
    \ '_');\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpf9sd3qic: /tmp/tmpf9sd3qic.cpp:24: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Write your code here\n  \
    \  std::string s;\n    for(int i=0;i<text.length();i++){\n        if(text[i]!='\
    \ '){\n            s+=text[i];\n        }else{\n            s+=\"_\";\n      \
    \  }\n    }\n    int m=s.find_first_not_of(\" \");\n    int n=s.find_first_of(\"\
    \ \",m);\n    int d=s.find_last_not_of(\" \");\n    int e=s.find_last_of(\" \"\
    ,d);\n    if(d!=-1){\n        s=s.substr(0,d)+\"-\"+s.substr(e+1);\n    }else{\n\
    \        s+=\"-\";\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpmdyfaez4: /tmp/tmpmdyfaez4.cpp:33: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if (text.find('  ') != text.end()) { // if there are more than\
    \ 2 consecutive spaces\n        text = text.replace('  ', '-');\n    }\n    return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa9me0toq.cpp:12:19: warning: multi-character character constant\
    \ [-Wmultichar]\n   12 |     if (text.find('  ') != text.end()) { // if there\
    \ are more than 2 consecutive spaces\n      |                   ^~~~\n/tmp/tmpa9me0toq.cpp:13:29:\
    \ warning: multi-character character constant [-Wmultichar]\n   13 |         text\
    \ = text.replace('  ', '-');\n      |                             ^~~~\n/tmp/tmpa9me0toq.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpa9me0toq.cpp:12:19:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n   12 |     if\
    \ (text.find('  ') != text.end()) { // if there are more than 2 consecutive spaces\n\
    \      |                   ^~~~\n/tmp/tmpa9me0toq.cpp:12:25: error: no match for\
    \ \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   12 |     if (text.find('  ') != text.end()) { // if there are\
    \ more than 2 consecutive spaces\n      |         ~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~\n\
    \      |                  |                 |\n      |                  |    \
    \             std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >}\n      |                  std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // your code goes here\n   \
    \ int count = 0;\n    int pos = 0;\n    while(pos < text.size()) {\n        if(text[pos]\
    \ == ' ') {\n            count++;\n            if(count > 1) {\n             \
    \   text.insert(pos, \"-\");\n                count = 0;\n                pos\
    \ = pos + 1;\n            } else {\n                text.insert(pos, \"_\");\n\
    \            }\n        } else {\n            count = 0;\n        }\n        pos++;\n\
    \    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp68a_9iem: /tmp/tmp68a_9iem.cpp:34: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if (text.find('  ') != text.end() - 1) {\n        std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n    }\n    return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnef6bagg.cpp:12:19: warning: multi-character character constant\
    \ [-Wmultichar]\n   12 |     if (text.find('  ') != text.end() - 1) {\n      |\
    \                   ^~~~\n/tmp/tmpnef6bagg.cpp:13:48: warning: multi-character\
    \ character constant [-Wmultichar]\n   13 |         std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n      |                                           \
    \     ^~~~\n/tmp/tmpnef6bagg.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpnef6bagg.cpp:12:19: warning: overflow in conversion from \u2018int\u2019\
    \ to \u2018char\u2019 changes value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n\
    \   12 |     if (text.find('  ') != text.end() - 1) {\n      |               \
    \    ^~~~\n/tmp/tmpnef6bagg.cpp:12:25: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} and \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019)\n   12 |     if (text.find('  ') !=\
    \ text.end() - 1) {\n      |         ~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~\n     \
    \ |                  |                    |\n      |                  |      \
    \              __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\n      |                  std::__cxx11::basic_string<char>::size_type {aka\
    \ long unsigned int}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnef6bagg.cpp:2:\n/shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res;\n    size_t\
    \ i = 0, start = 0;\n    while (i < text.length()) {\n        if (text[i] == '\
    \ ') {\n            res += '_';\n            start = 0;\n        } else {\n  \
    \          if (start == 0) {\n                res += text[i];\n              \
    \  start = 1;\n            }\n        }\n        ++i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp3q7ihet8: /tmp/tmp3q7ihet8.cpp:29: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::size_t n = 0;\n    while\
    \ ((n < text.size()) && (std::isspace(text[n])))\n        n++;\n    // replace\
    \ multiple spaces with single dash \n    if (n > 1)\n    {\n        std::string\
    \ r;\n        for (int i = 0; i < n - 1; i++)\n            r += \"-\";\n     \
    \   std::string s = std::move(text) + r;\n        return s;\n    }\n    else\n\
    \        return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkmj4v1i3: /tmp/tmpkmj4v1i3.cpp:29: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    for(int i = 0; i < result.length(); i++) {\n        if(result[i] == ' ')\
    \ result[i] = '_';\n    }\n    int i = 0;\n    while(i < result.length()) {\n\
    \        if(result.at(i) == ' ' && result.at(i+1) == ' ') {\n            i++;\n\
    \        }\n        else {\n            result[i++] = '-';\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpatmhll6j: /tmp/tmpatmhll6j.cpp:28: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    std::string temp;\n  \
    \  int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            count++;\n            if (count == 2) {\n           \
    \     temp += '_';\n            }\n            else {\n                temp +=\
    \ text[i];\n            }\n        }\n        else if (count == 2) {\n       \
    \     temp += '-';\n            count = 0;\n        }\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp_yb9es4q: /tmp/tmp_yb9es4q.cpp:33: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    for(int i=0; i<text.size();\
    \ i++) {\n        if(text[i] == ' ') {\n            if((i+1) < text.size() &&\
    \ text[i+1] == ' ') {\n                text[i] = '_';\n                i++;\n\
    \            }\n            else if(i+2 < text.size() && text[i+2] == ' ') {\n\
    \                text[i] = '-';\n                i++;\n            }\n       \
    \     else {\n                text[i] = '_';\n            }\n        }\n    }\n\
    \    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmprx5761kr: /tmp/tmprx5761kr.cpp:33: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  int len = text.length();\n  for\
    \ (int i = 0; i < len; i++) {\n    char c = text[i];\n    if (c == ' ') {\n  \
    \    if (i > 0 && text[i - 1] == ' ') {\n        text[i] = '_';\n      }\n   \
    \   if (i + 1 < len && text[i + 1] == ' ') {\n        text[i] = '_';\n      }\n\
    \    }\n  }\n  if (text.substr(0, 2) == \" _ \" ||\n      text.substr(0, 3) ==\
    \ \"_ _ \") {\n    text = text.substr(2, text.length());\n  }\n  return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp3slo7her: /tmp/tmp3slo7her.cpp:32: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  assert(text);\n  size_t num_spaces\
    \ = text.find_first_not_of(\" \");\n  assert(num_spaces != std::string::npos);\n\
    \  if (num_spaces == 1) {\n    // All spaces are consecutive in string\n    return\
    \ text;\n  }\n  // Two or more spaces between words\n  std::string fixed_text\
    \ = text;\n  size_t text_length = fixed_text.length();\n  for (size_t i = 0; i\
    \ < text_length; ++i) {\n    if (fixed_text[i] == ' ' && i + 1 < text_length &&\
    \ fixed_text[i + 1] == ' ') {\n      fixed_text[i] = '_';\n      i++;\n    }\n\
    \  }\n  return fixed_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplnpxwfhm.cpp:2:\n/tmp/tmplnpxwfhm.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmplnpxwfhm.cpp:11:10:\
    \ error: could not convert \u2018text\u2019 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n   11 | \
    \  assert(text);\n      |          ^\n      |          |\n      |          std::string\
    \ {aka std::__cxx11::basic_string<char>}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  for (int i=0; i < text.size();\
    \ ++i) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    }\n    if (i+1<text.size()\
    \ && text[i] == ' ' && text[i+1] != ' ') {\n      text[i] = '-';\n      i+=1;\n\
    \    }\n  }\n  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpze60j8bl: /tmp/tmpze60j8bl.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string temp = text;\n  for\
    \ (int i = 0; i < temp.length(); i++) {\n    if (temp[i] == ' ') {\n      temp[i]\
    \ = '_';\n    }\n  }\n  if (text.size() > 2) {\n    for (int i = 2; i < text.size();\
    \ i++) {\n      if (text[i] == ' ') {\n        text[i] = '_';\n      }\n    }\n\
    \  }\n  return temp;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpym4q1oii: /tmp/tmpym4q1oii.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // write your code here\n  \
    \  int i = 0;\n    int k = 0;\n    while (i + 1 < text.length()) {\n        if\
    \ (text[i] == ' ') {\n            if (text[i + 1] == ' ') {\n                text[k++]\
    \ = ' ';\n                i++;\n            } else {\n                text[k++]\
    \ = '_';\n            }\n        } else {\n            text[k++] = text[i++];\n\
    \        }\n    }\n    text[k] = 0;\n    return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5v1eyaoq: /tmp/tmp5v1eyaoq.cpp:31: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\tstd::string s = text;\n\twhile\
    \ (std::find_if(s.begin(), s.end(), ::isspace)!=s.end()) s.replace(std::find_if(s.begin(),\
    \ s.end(), ::isspace), s.end(), \" \");\n\twhile (std::find_if(s.begin(), s.end(),\
    \ ::ispunct)!=s.end()) s.replace(std::find_if(s.begin(), s.end(), ::ispunct),\
    \ s.end(), \" \");\n\twhile (std::find_if(s.begin(), s.end(), ::isdigit)!=s.end())\
    \ s.replace(std::find_if(s.begin(), s.end(), ::isdigit), s.end(), \" \");\n\t\
    if (s.find(\"  \")!=std::string::npos) s.replace( s.find(\"  \"), 2, \" -\");\n\
    \tif (s.find(\"  \")!=std::string::npos) s.replace( s.find(\"  \"), 2, \" -\"\
    );\n\treturn s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::regex space_regex(\"\\\\\
    s+\");\n    std::string replaced = std::regex_replace(text, space_regex, \"_\"\
    );\n    if (replaced.size() > 2) {\n        replaced = replaced.substr(0, replaced.size()\
    \ - 1);\n        replaced.erase(std::remove(replaced.begin(), replaced.end(),\
    \ ' '), replaced.end());\n        replaced.insert(replaced.end(), \" \");\n  \
    \  }\n    return replaced;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmy1mbnr2.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpmy1mbnr2.cpp:16:44: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::iterator,\
    \ const char [2])\u2019\n   16 |         replaced.insert(replaced.end(), \" \"\
    );\n      |                                            ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmy1mbnr2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basi"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string r;\n    for (auto\
    \ c : text) {\n        if (c != ' ') {\n            r += c;\n        } else {\n\
    \            if (r.length() > 0) {\n                if (r[0] == '_') {\n     \
    \               r = r.substr(1);\n                } else {\n                 \
    \   r = \"_\" + r;\n                }\n            }\n        }\n    }\n    if\
    \ (r.length() > 2) {\n        std::string s = \"_\";\n        for (int i = 0;\
    \ i < r.length() - 2; i++) {\n            s += \"_\";\n        }\n        r =\
    \ s + \"-\" + r.substr(r.length() - 2);\n    }\n    return r;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpwqlyqzto: /tmp/tmpwqlyqzto.cpp:36: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  text.erase(std::find_if(text.begin(), text.end(), \n         \
    \                 [&](char c){ return (c == ' '); }), text.end()); \n  if (text.size()\
    \ > 2 && *text.rbegin() == ' ') {\n    text.erase(text.begin()+1);\n  }\n  return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp5rvksson: /tmp/tmp5rvksson.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  text = std::regex_replace(text,\
    \ std::regex(\" {2,}\"), \"_\");\n  text = std::regex_replace(text, std::regex(\"\
    \\\\s{2,}\"), \"_\");\n  text = std::regex_replace(text, std::regex(\"\\\\s+\"\
    ), \"-\");\n  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp21zqktto: /tmp/tmp21zqktto.cpp:19: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string rep_spaces = \"\
    _\";\n    bool changed = false;\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            if (i > 0 && text[i - 1] == ' ') {\n\
    \                rep_spaces = \"_\";\n                changed = true;\n      \
    \      }\n            else if (i == text.size() - 1 && text[i - 1] != ' ') {\n\
    \                rep_spaces = \"\";\n                changed = true;\n       \
    \     }\n            else {\n                rep_spaces += \"_\";\n          \
    \      changed = true;\n            }\n        }\n        else {\n           \
    \ rep_spaces += \"_\";\n            changed = true;\n        }\n    }\n    if\
    \ (changed) {\n        text = rep_spaces;\n        for (int i = 1; i < text.size()\
    \ - 1; i++) {\n            if (text[i] == '_' && text[i + 1] != ' ') {\n     \
    \           text.erase(i + 1);\n            }\n        }\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp2z82uwvz: /tmp/tmp2z82uwvz.cpp:45: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    bool space = false;\n    std::string\
    \ newtext = \"\";\n    for (size_t i = 0; i < text.size(); i++) {\n        if\
    \ (text[i] == ' ') {\n            if (space) {\n                newtext += \"\
    _\";\n                space = false;\n            }\n            else {\n    \
    \            newtext += \"-\";\n            }\n        }\n        else {\n   \
    \         newtext += text[i];\n            space = true;\n        }\n    }\n \
    \   return newtext;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpfyt0jrvk: /tmp/tmpfyt0jrvk.cpp:34: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    // Check for empty string\n\
    \    if (text.empty()) {\n        return \"\";\n    }\n    \n    // Replace all\
    \ spaces with \"_\"\n    text = text.replace(\" \", \"_\");\n    \n    // If text\
    \ has more than 2 consecutive spaces, \n    // then replace all consecutive spaces\
    \ with \"-\"\n    if (text.find_first_not_of(\" \") == text.npos) {\n        //\
    \ If there are still spaces, add \"_\" at the end\n        if (text.find_first_of(\"\
    \ \") != text.npos) {\n            text += \"_\";\n        } else {\n        \
    \    // If there are no spaces, add \"_\" at the beginning\n            text =\
    \ \"_\" + text;\n        }\n    }\n    return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0e1jxrk8.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp0e1jxrk8.cpp:18:33: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(const char [2], const char [2])\u2019\
    \n   18 |     text = text.replace(\" \", \"_\");\n      |                    \
    \             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0e1jxrk8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1911:7"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  std::replace(text.begin(), text.end(), ' ', '_');\n  std::replace(text.begin(),\
    \ text.end(), '   ', '_');\n  std::replace(text.begin(), text.end(), ' ', '_');\n\
    \  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbs6b3htx.cpp:13:42: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |   std::replace(text.begin(), text.end(), '   ', '_');\n\
    \      |                                          ^~~~~\n/tmp/tmpbs6b3htx.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpbs6b3htx.cpp:13:52:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |   std::replace(text.begin(),\
    \ text.end(), '   ', '_');\n      |                                          \
    \          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbs6b3htx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbs6b3htx.cpp:13:52:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |   std::replace(text.begin(), text.end(),\
    \ '   ', '_');\n      |                                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::size_t found = text.find_first_of('\
    \ ');\n    while (found != std::string::npos) {\n        text.erase(found, 1);\n\
    \        found = text.find_first_of(' ');\n    }\n    found = text.find_first_not_of('\
    \ ');\n    while (found != std::string::npos) {\n        text.insert(found, \"\
    _\");\n        found = text.find_first_not_of(' ');\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  text.replace(0, 1, std::string(\"\
    \ \"));\n  while(text.find('  ') != std::string::npos) {\n    text.replace( text.find('\
    \  '), 2, std::string(\"-\"));\n  }\n  return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpnsjsm5yy: /tmp/tmpnsjsm5yy.cpp:19: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::size_t found = text.find_first_not_of(\"\
    \ \\t\");\n    if (found != std::string::npos) {\n        text = std::string(text.begin(),\
    \ found);\n        text.erase(std::remove(text.begin(), text.end(), ' '), text.end());\n\
    \    }\n\n    if (text.find_first_of(\" \\t\") != std::string::npos) {\n     \
    \   size_t last_space_pos = text.find_first_of(\" \\t\", 2);\n        if (last_space_pos\
    \ != std::string::npos) {\n            size_t second_space_pos = text.find_first_of(\"\
    \ \\t\", last_space_pos+1);\n            if (second_space_pos == std::string::npos)\n\
    \                second_space_pos = text.size();\n            text = std::string(text.begin(),\
    \ second_space_pos);\n        }\n    }\n    return text;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbl8fke8g.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbl8fke8g.cpp:13:47: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::basic_string(std::__cxx11::basic_string<char>::iterator,\
    \ std::size_t&)\u2019\n   13 |         text = std::string(text.begin(), found);\n\
    \      |                                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbl8fke8g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbl8fke8g.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019 and\
    \ \u2018long unsigned int\u2019)\n   13 |         text = std::string(text.begin(),\
    \ found);\n      |                                               ^\nIn file included\
    \ from /shared/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string temp = text;\n \
    \   std::replace( std::begin(temp), std::end(temp), ' ', '_');\n    if (temp.find_first_of(\"\
    \  \") != std::string::npos) {\n        while (temp.find_first_of(\"  \") != std::string::npos)\n\
    \            temp.replace(temp.find_first_of(\"  \"), 2, \" \");\n        temp.replace(temp.find_first_of(\"\
    \  \"), 1, \"-\");\n    }\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp07_xclvx: /tmp/tmp07_xclvx.cpp:25: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n   const char replace_char = ' ';\n\
    \   text.erase(remove_if(text.begin(), text.end(), [&](char c) {\n         return\
    \ c == replace_char;\n      }), text.end());\n   int n = text.length();\n   if\
    \ (n < 3)\n      return text;\n   if (n == 2 && !isspace(text[0]) && !isspace(text[1]))\n\
    \      return replace_char;\n   if (n > 2 && text[0] == replace_char && text[1]\
    \ == replace_char && isspace(text[n - 1]) && isspace(text[n]))\n      return replace_char;\n\
    \   return text.substr(0, n - 1).erase(0, 1).insert(0, replace_char).append(replace_char);\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hefyny9.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp6hefyny9.cpp:19:14: error: could not convert \u2018replace_char\u2019\
    \ from \u2018const char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   19 |       return replace_char;\n      |              ^~~~~~~~~~~~\n   \
    \   |              |\n      |              const char\n/tmp/tmp6hefyny9.cpp:21:14:\
    \ error: could not convert \u2018replace_char\u2019 from \u2018const char\u2019\
    \ to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   21 |       return replace_char;\n      |              ^~~~~~~~~~~~\n   \
    \   |              |\n      |              const char\n/tmp/tmp6hefyny9.cpp:22:67:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::insert(int,\
    \ const char&)\u2019\n   22 |    return text.substr(0, n - 1).erase(0, 1).insert(0,\
    \ replace_char).append(replace_char);\n      |                               \
    \                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hefyny9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for (size_t i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            text.insert(i, std::string(\"\
    _\"));\n        }\n        if (i + 1 < text.length() && text[i] == ' ' && text[i\
    \ + 1] == ' ') {\n            text.insert(i, \"-\");\n            i += 1;\n  \
    \      }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::map<char, int> count_table;\n\
    \    for (char c : text) {\n        count_table[c] = count_table.size();\n   \
    \ }\n    for (char c : text) {\n        if (count_table.find(c) != count_table.end())\
    \ {\n            count_table[c]--;\n        }\n    }\n    std::string ans = text;\n\
    \    for (auto i : count_table) {\n        if (i.second == 2) {\n            ans.replace(std::to_string(i.first).find_last_of(\"\
    0123456789\"), 1, std::string(\"_\"));\n        } else if (i.second > 2) {\n \
    \           ans.replace(std::to_string(i.first).find_last_of(\"0123456789\"),\
    \ 1, std::string(\"-\"));\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp1bkw7_64: /tmp/tmp1bkw7_64.cpp:32: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    bool space = false;\n    std::string\
    \ res = \"\";\n    for(int i = 0; i < text.size(); i++){\n        if(text[i] ==\
    \ ' '){\n            space = true;\n        }\n        else{\n            if(!space){\n\
    \                res += text[i];\n            }\n            else{\n         \
    \       res += \"_\";\n            }\n            space = false;\n        }\n\
    \    }\n    if(res.length() > 2){\n        res = \"_\" + res;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp8u6h929o: /tmp/tmp8u6h929o.cpp:34: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string space_fix_text =\
    \ \"_\";\n    std::string text_with_space = text;\n    size_t i = 0;\n    while\
    \ (i < text.size()) {\n        if (i == 0 || (text[i] == ' ')) {\n           \
    \ space_fix_text += text[i];\n            i++;\n            continue;\n      \
    \  }\n        if (text[i] == ' ') {\n            space_fix_text += \"_\";\n  \
    \          i++;\n        }\n    }\n    return text_with_space + space_fix_text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Write your code here\n  \
    \  int len= text.length();\n    for(int i=0;i<len;i++){\n        if(text[i] ==\
    \ ' '){\n            text[i] = '_';\n        }\n        else if(i > 1 && text[i+1]=='\
    \ '){\n            text[i] = '_';\n        }\n        else if(text[i] == '\\n'){\n\
    \            text[i] = '_';\n        }\n    }\n    \n    return text;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpzgd4rrdu: /tmp/tmpzgd4rrdu.cpp:30: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Code here...\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpjg5eevoz: /tmp/tmpjg5eevoz.cpp:15: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string fixed_text = text;\n\
    \    std::replace(fixed_text.begin(), fixed_text.end(), ' ', '_');\n    if (fixed_text.size()\
    \ > 2 &&\n        fixed_text[0] == ' ' && fixed_text[1] == ' ') {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    }\n    return fixed_text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpcrm76i_9: /tmp/tmpcrm76i_9.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  if (text.size() < 1) return text;\n\
    \  std::string r;\n  for (int i = 0; i < text.size(); i++)\n  {\n    if (text[i]\
    \ == ' ') {\n      r += '_';\n      continue;\n    }\n    if (i == text.size()\
    \ - 1 || text[i + 1] != ' ')\n      r += text[i];\n  }\n  if (r.size() > 2) {\n\
    \    r = r;\n    std::string::size_type count = 0;\n    for (std::string::size_type\
    \ i = 2; i < r.size(); i++) {\n      if (r[i] == '_') {\n        count++;\n  \
    \      continue;\n      }\n      if (count == 2) {\n        r = r.substr(0, i\
    \ - 1) + \"-\" + r.substr(i - 1);\n        count = 0;\n        continue;\n   \
    \   }\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpqtn_i5p8: /tmp/tmpqtn_i5p8.cpp:42: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  if (text.size() > 2)\n    std::replace(text.begin(), text.begin()\
    \ + 2, ' ', '-');\n  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpp3s3ar3n: /tmp/tmpp3s3ar3n.cpp:21: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Write your code here\n  \
    \  std::string rev_text = \"\";\n    bool flag = false;\n    for(int i = 0; i\
    \ < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n        \
    \    if(!flag)\n            {\n                rev_text += \"_\";\n          \
    \      flag = true;\n            }\n            else\n            {\n        \
    \        rev_text += \"-\";\n                flag = false;\n            }\n  \
    \      }\n        else\n        {\n            rev_text += text[i];\n        }\n\
    \    }\n    return rev_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkh0151fe: /tmp/tmpkh0151fe.cpp:39: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int i;\n    for (i = 0; i <=\
    \ text.length() - 1; i++) {\n        if (text[i] == ' ') {\n            while\
    \ (i < text.length() - 1 && text[i + 1] == ' ')\n                i++;\n      \
    \      if (i == text.length() - 1)\n                break;\n            text.erase(i,\
    \ i + 1);\n            if (i != 0)\n                text.insert(i, \" \");\n \
    \           text.insert(i, i + 1);\n        }\n        else if (i != 0)\n    \
    \        text.insert(i, \" \");\n    }\n    return text;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbouijkro.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbouijkro.cpp:21:33: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(int&, int)\u2019\n   21 |           \
    \  text.insert(i, i + 1);\n      |                                 ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbouijkro.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    size_t length = text.length();\n\
    \    size_t pos = 0;\n    \n    while (pos < length) {\n        if (text[pos]\
    \ == ' ') {\n            while (pos < length && !(text[pos] == ' ' && text[pos\
    \ - 1] == ' ')) {\n                pos++;\n            }\n            if (pos\
    \ < length) {\n                while (pos < length && !(text[pos] == ' ' && text[pos\
    \ + 1] == ' ')) {\n                    pos++;\n                }\n           \
    \     text.erase(pos, pos + 1);\n                text.insert(pos, '_');\n    \
    \        }\n        }\n        pos++;\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5thc1fw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpl5thc1fw.cpp:24:37: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(size_t&, char)\u2019\n   24 |       \
    \          text.insert(pos, '_');\n      |                                   \
    \  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl5thc1fw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typena"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if(std::count(result.begin(),\
    \ result.end(), ' ') > 2)\n    {\n        std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpszl_u1q7: /tmp/tmpszl_u1q7.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int space_count = 0;\n    for\
    \ (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n       \
    \     space_count++;\n        } else {\n            space_count = 0;\n       \
    \ }\n        if (space_count > 2) {\n            text += \"-\";\n            space_count\
    \ = 0;\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpa8ea5ukl: /tmp/tmpa8ea5ukl.cpp:28: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.find_first_of('\
    \ '), '_');\n    if (s.find_first_of(' ') == std::string::npos) {\n        s.replace(\"\
    \ \", \"_\");\n    }\n    s.replace(\" \", \"_\");\n    s.replace(s.find_last_of('\
    \ '), '_');\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpozzt5eal.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpozzt5eal.cpp:12:40: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ char)\u2019\n   12 |     s.replace(s.find_first_of(' '), '_');\n      |    \
    \                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpozzt5eal.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::cout << \"\\n fix_spaces\
    \ function begins\" << std::endl;\n  for (int i = 0; i < text.size(); i++) {\n\
    \    if (text[i] == ' ') {\n      text[i] = '_';\n    }\n  }\n  if (text.size()\
    \ == 1) {\n    return text;\n  }\n  if (text.size() > 2) {\n    for (int i = 0;\
    \ i < text.size() - 1; i++) {\n      if (text[i] == ' ') {\n        text[i] =\
    \ '_';\n      }\n    }\n    if (text[text.size() - 1] == ' ') {\n      text[text.size()\
    \ - 1] = '_';\n    }\n  }\n  std::cout << \"\\n fix_spaces function ends\" <<\
    \ std::endl;\n  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: "\n fix_spaces function begins\n\n fix_spaces function ends\n\n fix_spaces\
    \ function begins\n\n fix_spaces function ends\n\n fix_spaces function begins\n\
    \n fix_spaces function ends\n\n fix_spaces function begins\n\n fix_spaces function\
    \ ends\n"
  stderr: "tmpp98r2_xt: /tmp/tmpp98r2_xt.cpp:38: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    // Declare a stack to\
    \ store spaces that should be \n    // converted into underscores\n    char s[1000]\
    \ = {0};\n    \n    // Iterate through the string\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            if(!s[strlen(s) - 1]) {\n\
    \                s[strlen(s) - 1] = '_';\n            }\n            else {\n\
    \                s[strlen(s) - 1]++;\n            }\n        }\n    }\n\n    //\
    \ Create a copy of the string with underscores\n    std::string result = s;\n\
    \    \n    // If the length of the string is greater than 2, \n    // then replace\
    \ all consecutive spaces with -\n    if(text.length() > 2) {\n        for(int\
    \ i = 1; i < strlen(s) - 1; i++) {\n            if(s[i] == ' ' && s[i + 1] ==\
    \ ' ') {\n                result += '-';\n            }\n        }\n    }\n  \
    \  \n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n \
    \   assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    if (text.find(\"  \")!=std::string::npos)\n\
    \    {\n        text.erase(std::remove_if(text.begin(), text.end(), ::isspace),\
    \ text.end());\n        text.replace(text.find(\"  \"), 2, \"-\");\n    }\n  \
    \  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp2dzodc5f: /tmp/tmp2dzodc5f.cpp:22: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  std::replace(text.begin(), text.end(), ' ', '_');\n  std::replace(text.begin(),\
    \ text.end(), '  ', '_');\n  return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qadk4mg.cpp:13:42: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |   std::replace(text.begin(), text.end(), '  ', '_');\n\
    \      |                                          ^~~~\n/tmp/tmp3qadk4mg.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmp3qadk4mg.cpp:13:51:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |   std::replace(text.begin(),\
    \ text.end(), '  ', '_');\n      |                                           \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3qadk4mg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3qadk4mg.cpp:13:51:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |   std::replace(text.begin(), text.end(),\
    \ '  ', '_');\n      |                                                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (auto &c: out) {\n        if (std::isspace(c)) {\n            c = ' ';\n\
    \        }\n    }\n    size_t i = 0;\n    while (i < out.size() && out[i] == '\
    \ ') {\n        i++;\n    }\n    while (i + 1 < out.size() && out[i] == ' ' &&\
    \ out[i + 1] != ' ') {\n        i++;\n    }\n    if (i < out.size() && out[i]\
    \ == '_') {\n        out.erase(i, 1);\n    }\n    else {\n        out.insert(i,\
    \ '_');\n    }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf6cetk0_.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpf6cetk0_.cpp:28:26: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(size_t&, char)\u2019\n   28 |       \
    \  out.insert(i, '_');\n      |                          ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf6cetk0_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  // write your code here\n  \n\
    \  \n  if (text.size() < 2)\n    return text;\n  if (text.size() == 2)\n    return\
    \ text;\n  std::vector<std::string> strs;\n  \n  int k = 0;\n  for (char c : text)\
    \ {\n    if (c == ' ')\n      strs.push_back(\"_\");\n    else if (c == '\\t')\n\
    \      strs.push_back(\"\\t\");\n    else if (c == '\\n')\n      strs.push_back(\"\
    \\n\");\n    else if (c == '\\r')\n      strs.push_back(\"\\r\");\n    else\n\
    \      strs.push_back(c);\n  }\n  \n  for (size_t i = 0; i < strs.size(); i++)\
    \ {\n    if (strs[i].size() > 1) {\n      strs[i] = std::move(strs[i]).replace(\"\
    \ \", \"_\");\n    }\n  }\n  \n  std::string out = text;\n  for (size_t i = 0;\
    \ i < strs.size(); i++) {\n    if (strs[i].size() > 2) {\n      out += std::move(strs[i]);\n\
    \    }\n  }\n  \n  return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdbc45ik6.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpdbc45ik6.cpp:31:23: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\n   31\
    \ |       strs.push_back(c);\n      |                       ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdbc45ik6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    return text;\n}\nint main() {\n \
    \   auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9q_b5jt.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmph9q_b5jt.cpp:12:79: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::erase(std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   12 |     text.erase(std::find_if(text.rbegin(), text.rend(), ::isspace),\
    \ text.end());\n      |                                                      \
    \                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmph9q_b5jt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1807:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::erase(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1807 |       erase(size_type __pos = 0, size_type __n = npos)\n\
    \      |       ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1807:23:\
    \ note:   no "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Create a vector to store\
    \ the result\n    std::string result;\n    \n    // Create a temp variable and\
    \ initialize it to empty string\n    std::string temp = text;\n\n    // Loop through\
    \ the temp string until temp is empty string\n    while (temp != \"\") {\n   \
    \     // If current character is a space character, \n        // replace it with\
    \ underscore character\n        if (temp == \" \") {\n            temp.push_back('_');\n\
    \        }\n        // If current character is not a space character,\n      \
    \  // append the current character to the result vector\n        else {\n    \
    \        result += temp;\n        }\n        // Move to the next character\n \
    \       temp = temp.substr(1);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpqenl0mpg: /tmp/tmpqenl0mpg.cpp:36: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string s = text;\n  std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n  if (s.find('  ') != std::string::npos) {\n    std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnxky53zz.cpp:13:14: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |   if (s.find('  ') != std::string::npos) {\n      | \
    \             ^~~~\n/tmp/tmpnxky53zz.cpp:14:38: warning: multi-character character\
    \ constant [-Wmultichar]\n   14 |     std::replace(s.begin(), s.end(), '  ', '-');\n\
    \      |                                      ^~~~\n/tmp/tmpnxky53zz.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpnxky53zz.cpp:13:14:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n   13 |   if (s.find('\
    \  ') != std::string::npos) {\n      |              ^~~~\n/tmp/tmpnxky53zz.cpp:14:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   14 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxky53zz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnxky53zz.cpp:14:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   14 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string fixed_text;\n  \
    \  size_t pos = 0;\n    for (auto c: text) {\n        if (c == ' ')\n        \
    \    fixed_text += '_';\n        else\n            fixed_text += c;\n        pos++;\n\
    \        if (pos > 2 && c == ' ') {\n            fixed_text += '-';\n        \
    \    pos = 0;\n        }\n    }\n    return fixed_text;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkpyadx8y: /tmp/tmpkpyadx8y.cpp:29: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // your code here\n    int len\
    \ = text.length();\n    for(int i = 0; i < len; i++){\n        if(text[i] == '\
    \ '){\n            text.erase(i, 1);\n            len = text.size(); \n      \
    \      i = i - 2;\n            for(int j = i; j >= 0; j--){\n                if(text[j]\
    \ == ' '){\n                    text.erase(j, 1);\n                    len = text.size();\n\
    \                }\n            }\n        }\n    }\n    return text;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpit7m3l__: /tmp/tmpit7m3l__.cpp:31: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text == \".\" || text ==\
    \ \" \") {\n        return text;\n    }\n    \n    std::string result = text;\n\
    \    \n    size_t length = result.length();\n    for (size_t i = 0; i < length;\
    \ i++) {\n        if (result[i] == ' ') {\n            if (i+1 == length) continue;\n\
    \            if (result[i+1] == ' ') {\n                result.erase(i+1, 1);\n\
    \                length--;\n                \n            } else if (i == 0) {\n\
    \                result.insert(i, \"_\");\n            }\n        }\n    }\n \
    \   \n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpr4qcuqr8: /tmp/tmpr4qcuqr8.cpp:36: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\t// your code here\n\treturn text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp9eoe2bgn: /tmp/tmp9eoe2bgn.cpp:17: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for\
    \ (auto &c : s) {\n        if (c == ' ') {\n            s.replace(c, '_');\n \
    \       } else if (c != ' ' && c != '\\t' && c != '\\n' && c != '\\r') {\n   \
    \         s.replace(c, ' ');\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt2eaqk9q.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpt2eaqk9q.cpp:14:29: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(char&, char)\u2019\n   14 |        \
    \     s.replace(c, '_');\n      |                             ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpt2eaqk9q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1911:7:\
    \ note: candidate: \u2018std::__"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int len = text.length();\n \
    \   std::string result;\n    for (int i = 0; i < len; i++) {\n        if (text[i]\
    \ == ' ') {\n            result.append(\"_\");\n        }\n        else {\n  \
    \          result.push_back(text[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5itiuo5u: /tmp/tmp5itiuo5u.cpp:28: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text == \"Example\")\n \
    \       return text;\n    // Replacing all spaces with underscores\n    std::string\
    \ temp = text;\n    temp.replace(temp.begin(), temp.end(), ' ', '_');\n    //\
    \ Checking for consecutive spaces\n    std::string::size_type begin = temp.find_first_not_of('\
    \ ');\n    std::string::size_type end = temp.find_last_not_of(' ');\n    if (end\
    \ != std::string::npos)\n        temp.replace(end, 2, ' ');\n    if (begin !=\
    \ std::string::npos && begin != end) {\n        temp.replace(begin, 1, \"_\");\n\
    \    }\n    return temp;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmponxcbb_k.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmponxcbb_k.cpp:20:33: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type&,\
    \ int, char)\u2019\n   20 |         temp.replace(end, 2, ' ');\n      |      \
    \                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmponxcbb_k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmponxcbb_k.cpp:20:30:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpe"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    int\
    \ pos = 0;\n    while (pos < s.size()){\n        int next_space = s.find(' ',\
    \ pos);\n        if (next_space != string::npos){\n            s = s.substr(0,\
    \ next_space) + \"_\" + s.substr(next_space+1);\n        } else {\n          \
    \  s = s.substr(0, next_space) + \"-\" + s.substr(next_space+1);\n        }\n\
    \        pos = next_space + 1;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubj4pvzi.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpubj4pvzi.cpp:15:27: error: \u2018string\u2019 has not been declared\n\
    \   15 |         if (next_space != string::npos){\n      |                   \
    \        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s;\n    int flag\
    \ = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '\
    \ ') {\n            flag = 1;\n            s += \"_\";\n        }\n        else\
    \ if (text[i] == ' ' && flag >= 2) {\n            s += \"-\";\n            flag\
    \ = 0;\n        }\n        else if (text[i] == ' ' && flag == 1) {\n         \
    \   s += \"_\";\n            flag = 0;\n        }\n        else {\n          \
    \  s += text[i];\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpvo8hzg1i: /tmp/tmpvo8hzg1i.cpp:37: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  for (int i = text.size(); i >\
    \ 0; --i) {\n    if (text[i] == ' ') {\n      text.erase(i--, 1);\n    } else\
    \ if (i > 1 && text[i] == ' ' && text[i - 1] == ' ' && text[i - 2] == ' ') {\n\
    \      text.erase(i--, 2);\n    }\n  }\n  return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpokg6x8ks: /tmp/tmpokg6x8ks.cpp:23: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    // your code here\n  \
    \  std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    int i = 0;\n    while (i < result.size() - 1) {\n        if\
    \ (i == 0 || result[i] == ' ') {\n            i++;\n            continue;\n  \
    \      }\n        if (i == result.size() - 2 || result[i] == ' ') {\n        \
    \    result[i] = '_';\n            result[i + 1] = '-';\n            i += 2;\n\
    \            continue;\n        }\n        result[i] = '_';\n        i++;\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpz870r685: /tmp/tmpz870r685.cpp:34: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isspace(s[i])) {\n           \
    \ s[i] = '_';\n        }\n        else if (s[i] != ' ') {\n            s[i] =\
    \ '-';\n        }\n    }\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n\
    \        s[0] = s[1];\n        s[2] = '-';\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpons4eef2: /tmp/tmpons4eef2.cpp:28: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    text = text.size() >= 2 ? text.replace(text.begin() + 1, text.end()\
    \ - 1, text.back()) : \"-\";\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpykg_yxrz.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpykg_yxrz.cpp:12:89: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   12 |     text = text.size() >= 2 ? text.replace(text.begin() + 1, text.end()\
    \ - 1, text.back()) : \"-\";\n      |                                        \
    \                                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpykg_yxrz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::b"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\tstd::replace_if(text.begin(),\
    \ text.end(), \n\t\t[](char c) { return c == ' '; }, \n\t\t[](char c) { return\
    \ '_' });\n\treturn std::string(text.begin(), text.end()); \n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsv4dck5_.cpp: In lambda function:\n/tmp/tmpsv4dck5_.cpp:13:26:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   13 |   [](char\
    \ c) { return '_' });\n      |                          ^~\n      |          \
    \                ;\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsv4dck5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018void std::replace_if(_FIter, _FIter, _Predicate, const\
    \ _Tp&) [with _FIter = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = fix_spaces(std::string)::<lambda(char)>; _Tp = fix_spaces(std::string)::<lambda(char)>]\u2019\
    :\n/tmp/tmpsv4dck5_.cpp:13:28:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4402:13:\
    \ error: invalid user-defined conversion from \u2018const fix_spaces(std::string)::<lambda(char)>\u2019\
    \ to \u2018char\u2019 [-fpermissive]\n 4402 |    *__first = __new_value;\n   \
    \   |    ~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpsv4dck5_.cpp:13:3: note: candidate is:\
    \ \u2018fix_spaces(std::string)::<lambda(char)>::operator char (*)(char)() const\u2019\
    \ <near match>\n   13 |   [](char c) { return '_' });\n      |   ^\n/tmp/tmpsv4dck5_.cpp:13:3:\
    \ note:   no known conversion from \u2018char (*)(char)\u2019 to \u2018char\u2019\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text.size() < 2) {\n   \
    \     return text;\n    }\n    int pos = 0;\n    int prev = -1;\n    bool found\
    \ = false;\n    while ((pos = text.find(\" \", pos)) != std::string::npos) {\n\
    \        // Replace with underscores\n        text.replace(pos, 1, fix_spaces(\"\
    _\"));\n        found = true;\n        prev = pos;\n        pos++;\n    }\n  \
    \  if (!found) {\n        // Replace with spaces\n        text.replace(prev, text.size()\
    \ - 1, fix_spaces(\"_\"));\n        pos--;\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::replace: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  // your code goes here\n  std::string\
    \ result;\n  for(int i = 0; i < text.length(); i++) {\n    if(std::isspace(text[i]))\
    \ {\n      result += std::to_string(static_cast<int>('_' - text[i]));\n    }\n\
    \  }\n  for(int i = 0; i < text.length(); i++) {\n    if(std::isspace(text[i])\
    \ && i + 1 < text.length() && text[i] == text[i+1]) {\n      result += std::to_string(static_cast<int>('_'\
    \ - text[i]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmprw3ozbik: /tmp/tmprw3ozbik.cpp:27: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string res = text;\n  for(auto\
    \ &c: res) if(isspace(c)) c = '_';\n  while(true) {\n    if(res.back() == '_')\
    \ res = res.substr(0, res.length()-1);\n    else if(res.length() > 2 && res[0]\
    \ == '_' && res[1] == '_') {\n      res = res.substr(2, res.length()-2);\n   \
    \   res.push_back('_');\n    }\n    else break;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpyubqjesk: /tmp/tmpyubqjesk.cpp:26: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  if(text.find('  ') != std::string::npos)\n  {\n      text.replace(\
    \ text.begin(), text.find('  '), \" -\" );\n  }\n  return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppfsdygdc.cpp:12:16: warning: multi-character character constant\
    \ [-Wmultichar]\n   12 |   if(text.find('  ') != std::string::npos)\n      | \
    \               ^~~~\n/tmp/tmppfsdygdc.cpp:14:45: warning: multi-character character\
    \ constant [-Wmultichar]\n   14 |       text.replace( text.begin(), text.find('\
    \  '), \" -\" );\n      |                                             ^~~~\n/tmp/tmppfsdygdc.cpp:\
    \ In function \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmppfsdygdc.cpp:12:16:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n   12 |   if(text.find('\
    \  ') != std::string::npos)\n      |                ^~~~\n/tmp/tmppfsdygdc.cpp:14:45:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u20188224\u2019 to \u2018' '\u2019 [-Woverflow]\n   14 |       text.replace(\
    \ text.begin(), text.find('  '), \" -\" );\n      |                          \
    \                   ^~~~\n/tmp/tmppfsdygdc.cpp:14:57: error: no matching function\
    \ for call to \u2018std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::size_type, const char [3])\u2019\n   14 |\
    \       text.replace( text.begin(), text.find('  '), \" -\" );\n      |      \
    \                                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (char& c: out) {\n        if (std::isspace(c)) {\n            c = '_';\n\
    \            if (std::isspace(c)) {\n                c = '-';\n            }\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpi3eu8sk7: /tmp/tmpi3eu8sk7.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  for (auto itr = text.begin();\
    \ itr != text.end(); ++itr) {\n    \n    if(*itr == ' '){\n      *itr = '_';\n\
    \    }\n\n    if (itr != text.begin()) {\n      if (*(itr-1) == ' ' && itr !=\
    \ text.begin()-1) {\n        *(itr-1) = '-';\n      }\n    }\n  }\n  return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp6z0ajox9: /tmp/tmp6z0ajox9.cpp:30: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Replace all spaces with underscores\n\
    \    std::replace(text.begin(), text.end(), ' ', '_');\n    // Replace consecutive\
    \ spaces with -\n    text.erase(std::unique(text.begin(), text.end()), text.end());\n\
    \    \n    if (text.size() > 2 && std::equal(text.begin(), text.end() - 2, text.begin()\
    \ + 2))\n    {\n        text.erase(text.begin() + 2, text.end());\n    }\n   \
    \ \n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpenliiul7: /tmp/tmpenliiul7.cpp:27: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int flag = 0;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n          \
    \  if (flag == 0) {\n                text[i] = '_';\n                flag++;\n\
    \            }\n            else {\n                text[i] = '_';\n         \
    \       flag--;\n            }\n        }\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpme2lrzff: /tmp/tmpme2lrzff.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string temp;\n    for (auto\
    \ &c:text) {\n        if (c == ' ') {\n            temp.push_back('_');\n    \
    \    } else {\n            temp.push_back(c);\n        }\n    }\n    std::string\
    \ r;\n    for (auto &c:temp) {\n        if (c == '_') {\n            r.push_back(c);\n\
    \        }\n    }\n    return r;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpiej26q75: /tmp/tmpiej26q75.cpp:29: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res;\n    for (int\
    \ i = 0; i < text.length(); i++) {\n        if (text[i] == ' ')\n            res\
    \ += \"_\";\n        if (i != text.length() - 1 \n            && text[i] == '\
    \ ' \n            && text[i + 1] == ' ')\n            res += \"-\";\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpezsfunjo: /tmp/tmpezsfunjo.cpp:24: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace_if(text.begin(),\
    \ text.end(), ::isspace, '_');\n  return std::string(text.begin(), std::find_if(text.begin(),\
    \ text.end(), [](char ch) { return !std::isspace(ch); }).base()); \n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42by3kp2.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp42by3kp2.cpp:12:124: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::basic_string(std::__cxx11::basic_string<char>::iterator,\
    \ char* const&)\u2019\n   12 |   return std::string(text.begin(), std::find_if(text.begin(),\
    \ text.end(), [](char ch) { return !std::isspace(ch); }).base());\n      |   \
    \                                                                            \
    \                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp42by3kp2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp42by3kp2.cpp:12:124:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019 and\
    \ \u2018char*\u2019)\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out(text);\n   \
    \ std::replace_if(out.begin(), out.end(), std::isspace, '_');\n    std::replace_if(out.begin(),\
    \ out.end(), [&](char c){\n        return std::isspace(c+1);\n    }, '-');\n \
    \   return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8ls_dgk.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpm8ls_dgk.cpp:12:62: error: no matching function for call to \u2018\
    replace_if(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ <unresolved overloaded function type>, char)\u2019\n   12 |     std::replace_if(out.begin(),\
    \ out.end(), std::isspace, '_');\n      |                                    \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm8ls_dgk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note: candidate: \u2018template<class _FIter, class _Predicate, class _Tp> void\
    \ std::replace_if(_FIter, _FIter, _Predicate, const _Tp&)\u2019\n 4388 |     replace_if(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpm8ls_dgk.cpp:12:62:\
    \ note:   couldn\u2019t deduce template parameter \u2018_Predicate\u2019\n   12\
    \ |     std::replace_if(out.begin(), out.end(), std::isspace, '_');\n      | \
    \                                                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end()); \n    if(text.size() > 2)\n    {\n        text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end()); \n    }\n    text.erase(std::remove(text.begin(),\
    \ text.end(), '\\t'), text.end()); \n    text.erase(std::remove(text.begin(),\
    \ text.end(), '\\n'), text.end()); \n    text.erase(std::remove(text.begin(),\
    \ text.end(), '\\r'), text.end()); \n    return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp635tvx48: /tmp/tmp635tvx48.cpp:24: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if(text.size() >= 2) {\n        std::string text_new = text;\n\
    \        std::replace(text_new.begin(), text_new.end(), ' ', '-');\n        text\
    \ = text_new;\n    }\n    return text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp3k9xed0x: /tmp/tmp3k9xed0x.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // your code goes here\n   \
    \ const int len = text.length();\n    for(int i = 0; i < len; i++) {\n       \
    \ if(text[i] == ' ') {\n            text.insert(i, '_');\n            if (i <\
    \ len - 1 && text[i+1] == ' ') {\n                text.insert(i+1, '-');\n   \
    \             i += 2;\n            }\n        }\n    }\n    return text;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjmu7q3iq.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpjmu7q3iq.cpp:15:31: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(int&, char)\u2019\n   15 |          \
    \   text.insert(i, '_');\n      |                               ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjmu7q3iq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Write your code here\n  \
    \  int size = text.size();\n    while(size != 0){\n        if(text[size - 1] ==\
    \ ' '){\n            for(int i = 0; i < (size - 1); i++){\n                if(text[i]\
    \ == ' '){\n                    text[i] = '_';\n                }\n          \
    \  }\n            size--;\n        }\n        else{\n            break;\n    \
    \    }\n    }\n    for(int i = 0; i < (size - 1); i++){\n        if(text[i] ==\
    \ ' '){\n            for(int j = i + 1; j < size - 1; j++){\n                if(text[j]\
    \ == ' '){\n                    text[j] = '-';\n                }\n          \
    \  }\n        }\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5n9jjn5e: /tmp/tmp5n9jjn5e.cpp:40: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    bool is_only_space = text.size()\
    \ == 1 && !std::isspace(text[0]);\n    bool is_only_two_spaces = text.size() ==\
    \ 1 &&\n        std::isspace(text[0]) && std::isspace(text[1]);\n    bool is_consecutive_spaces\
    \ = \n        text.size() > 1 &&\n        std::isspace(text[0]) && std::isspace(text[1]);\n\
    \    bool is_consecutive_to_dash = \n        text.size() > 1 &&\n        std::isspace(text[0])\
    \ && std::isspace(text[1]) &&\n        std::isspace(text[2]);\n    \n    if (is_only_space)\
    \ return text;\n    else if (is_only_two_spaces) \n        return text + \"_\"\
    ;\n    else if (is_consecutive_spaces) return \"-\" + text;\n    else if (is_consecutive_to_dash)\n\
    \        return \"-\" + text;\n    else \n        return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpw_s8meph: /tmp/tmpw_s8meph.cpp:34: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    size_t pos = 0;\n    std::string\
    \ res = \"\";\n    while (pos < text.length()) {\n        pos = text.find(' ',\
    \ pos);\n        if (pos == std::string::npos) {\n            res += text;\n \
    \           break;\n        }\n        res += text.substr(0, pos);\n        ++pos;\n\
    \        while (pos < text.length() && text.at(pos) == ' ') {\n            ++pos;\n\
    \        }\n        res += \"_\";\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpg8lp7cz5: /tmp/tmpg8lp7cz5.cpp:31: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result;\n    size_t\
    \ i;\n    for (i = 0; i < text.size(); i++)\n    {\n        if (text[i] == ' ')\n\
    \        {\n            result.push_back('_');\n        }\n        else\n    \
    \    {\n            result.push_back(text[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpnc3_cxlv: /tmp/tmpnc3_cxlv.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string words = text.substr(0,\
    \ text.find_first_of(' '));\n    std::string rest = text.substr(text.find_first_of('\
    \ '));\n    for(int i = 0; i < rest.size(); i++) {\n        if(rest.at(i) == '\
    \ ') {\n            if(words.size() == 0) {\n                words = \"_\";\n\
    \            } else {\n                words += \"_\";\n            }\n      \
    \  } else {\n            words += rest.at(i);\n        }\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 7)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  std::replace_if(text.begin(), text.end(), [&](char c){return c\
    \ != ' ' && c != '\\n';}, ' ');\n  std::replace_if(text.begin(), text.end(), [&](char\
    \ c){return c != ' ' && c != '\\r';}, ' ');\n  return text;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpjxo7ynwg: /tmp/tmpjxo7ynwg.cpp:18: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Declare a new string: new_text\
    \ \n    std::string new_text;\n    // Declare a variable to count spaces: space_count\
    \ \n    int space_count = 0;\n    // Declare a variable to count consecutive spaces:\
    \ \n    // consec_space_count \n    int consec_space_count = 0;\n    // Declare\
    \ a variable to store found spaces: found_space \n    int found_space;\n    //\
    \ Iterate through each character in the string \n    for (int i = 0; i < text.length();\
    \ i++) {\n        // If the current character is a space: \n        if (text[i]\
    \ == ' ') {\n            // Increment the space_count variable by 1: \n      \
    \      space_count++;\n            // If space_count is 1, append the current\
    \ character to new_text\n            // and reset space_count to zero: \n    \
    \        if (space_count == 1) {\n                new_text += text[i];\n     \
    \       }\n            // If space_count is greater than 1, append a _ to the\
    \ \n            // new_text string and reset space_count to zero: \n         \
    \   else if (space_count > 1) {\n                new_text += \"_\";\n        \
    \        space_count = 0;\n            }\n            // Else append the character\
    \ as-is, and increment \n            // space_count by 1: \n            else {\n\
    \                new_text += text[i];\n                space_count++;\n      \
    \      }\n        }\n        // If the character is a non-space: \n        else\
    \ {\n            // If the consec_space_count variable is greater than zero: \n\
    \            if (consec_space_count > 0) {\n                // If the current\
    \ character is a space: \n                if (text[i] == ' ') {\n            \
    \        new_text += \"-\";\n                }\n                // Else append\
    \ the character as-is, and increment \n                // consec_space_count by\
    \ 1: \n                else {\n                    new_text += text[i];\n    \
    \                consec_space_count++;\n                }\n            }\n   \
    \         // If the consec_space_count variable is zero: \n            else {\n\
    \                new_text += text[i];\n                consec_space_count = 0;\n\
    \            }\n        }\n    }\n    // Return the new_text string: \n    return\
    \ new_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp4zn8bzem: /tmp/tmp4zn8bzem.cpp:72: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if (text.find_first_not_of(\" \") != std::string::npos) {\n\
    \        std::replace(text.begin(), text.end(), ' ', '-');\n    }\n    if (text.find_last_not_of(\"\
    \ \") != std::string::npos) {\n        std::replace(text.begin(), text.end(),\
    \ ' ', '-');\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp4pg_yr7z: /tmp/tmp4pg_yr7z.cpp:25: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::map<char, int> m;\n   \
    \ for(int i = 0; i < text.length(); ++i) {\n        if(text[i] == ' ')\n     \
    \       m[text[i]] = m.size();\n    }\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < text.length(); ++i) {\n        if(m.find(text[i]) != m.end()) {\n\
    \            ans += \"_\";\n            ans += text[i];\n        }\n        else\
    \ {\n            ans += text[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpvbj0vr70: /tmp/tmpvbj0vr70.cpp:31: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace_if(text.begin(),\
    \ text.end(), \n    [](char c){ \n      return std::isspace(c) || c == '-';\n\
    \    },\n    '_');\n  std::replace_if(text.begin(), text.end(), \n    [](char\
    \ c){ \n      return std::isspace(c) || c == '_';\n    },\n    '-');\n  \n  if\
    \ (text.size() > 2) {\n    std::replace_if(text.begin(), text.end(), \n      [](char\
    \ c){ \n        return c == '_' || c == '-';\n      },\n      '-');\n  }\n  return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpgaddy5_8: /tmp/tmpgaddy5_8.cpp:34: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\t\n\tstd::string result;\n\t\n\t\
    for(size_t i = 0; i < (text.size()-1); i++) {\n\t\tif(text[i] == ' ' && text[i+1]\
    \ == ' ') {\n\t\t\tresult += text[i] + '_';\n\t\t} else {\n\t\t\tresult += text[i];\n\
    \t\t}\n\t}\n\t\n\tfor(size_t i = 0; i < (text.size()-2); i++) {\n\t\tif(text[i]\
    \ == ' ' && text[i+2] == ' ') {\n\t\t\tresult += text[i] + '-';\n\t\t} else {\n\
    \t\t\tresult += text[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpf6cl125_: /tmp/tmpf6cl125_.cpp:34: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::map<char,char> m;\n   \
    \ std::set<char> spaces;\n    std::for_each(text.begin(), text.end(), [&m,&spaces,&text](char\
    \ c) {\n        if(c.isspace()) {\n            spaces.insert(c);\n           \
    \ m[c] = ' ';\n        }\n        else if (spaces.find(c)!=spaces.end()) \n  \
    \          m[c] = ' ';\n        else m[c] = '-';\n    });\n    std::string res\
    \ = text;\n    for(auto c : m) res = res.replace(c,c.second);\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkp_c9ya7.cpp: In lambda function:\n/tmp/tmpkp_c9ya7.cpp:14:14:\
    \ error: request for member \u2018isspace\u2019 in \u2018c\u2019, which is of\
    \ non-class type \u2018char\u2019\n   14 |         if(c.isspace()) {\n      |\
    \              ^~~~~~~\n/tmp/tmpkp_c9ya7.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpkp_c9ya7.cpp:23:49: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::pair<const char, char>&, char&)\u2019\
    \n   23 |     for(auto c : m) res = res.replace(c,c.second);\n      |        \
    \                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkp_c9ya7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const bas"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Your code goes here\n   \
    \ text=text.erase(std::remove_if(text.begin(),text.end(), ::isspace),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::ispunct),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::iscntrl),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isdigit),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::ispunct),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::islower),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isupper),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::ispunct),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isspace),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isdigit),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::ispunct),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isdigit),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isdigit),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isdigit),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::ispunct),text.end());\
    \ \n    text=text.erase(std::remove_if(text.begin(),text.end(), ::isspace),text.end());\
    \ \n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxczustka.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpxczustka.cpp:12:82: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019})\n   12 |     text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isspace),text.end());\n      |                                           \
    \                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxczustka.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:665:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n  665 |       operator=(const basic_string& __str)\n\
    \      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:665:37:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::ba"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    for (auto it = text.begin() + 1; it != text.end(); ++it) {\n\
    \        if (*it == ' ')\n            *it = '_';\n    }\n    return text;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpnc1x8fha: /tmp/tmpnc1x8fha.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    size_t pos = 0;\n    while(pos\
    \ < text.length()){\n        while(text[pos] == ' '){\n            ++pos;\n  \
    \      }\n        if(pos == text.length()-1){\n            continue;\n       \
    \ }\n        if(text[pos] == ' '){\n            while(text[pos] == ' '){\n   \
    \             ++pos;\n            }\n            if(pos == text.length()-1){\n\
    \                continue;\n            }\n            if((pos == text.length()-2)\
    \ && ((text[pos+1] == ' ') && (text[pos+2] == ' '))){\n                text.replace(pos,\
    \ 2, \"-\");\n            }else{\n                text.replace(pos, 1, \"_\");\n\
    \            }\n        }\n        ++pos;\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // your code goes here\n   \
    \ int i = 0;\n    int j = text.size();\n    while(i < j){\n        if(text[i]\
    \ == ' '){\n            i++;\n        }\n        else{\n            text[i] =\
    \ '_';\n            i++;\n        }\n    }\n    while(i < j){\n        if(text[i]\
    \ == ' '){\n            if(text[i+1] == ' '){\n                text[i] = '_';\n\
    \                i++;\n            }\n            else{\n                text[i]\
    \ = '-';\n                i++;\n            }\n        }\n        else{\n    \
    \        text[i] = '_';\n            i++;\n        }\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5_en9el0: /tmp/tmp5_en9el0.cpp:43: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n  if (text.size() >= 2 && text[0] == '\
    \ ' && text[text.size() - 1] == ' ') \n    return std::string(1, \"_\") + text.substr(1,\
    \ text.size() - 2);\n  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsymi942f.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpsymi942f.cpp:13:30: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::basic_string(int, const char [2])\u2019\n  \
    \ 13 |     return std::string(1, \"_\") + text.substr(1, text.size() - 2);\n \
    \     |                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsymi942f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpsymi942f.cpp:13:30:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    int\u2019 and \u2018const char*\u2019)\n   13 |     return std::string(1, \"_\"\
    ) + text.substr(1, text.size() - 2);\n      |                              ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::map<char,std::string> m;\n\
    \    for(char &c:text)\n        m.insert(std::pair<char,std::string>(c,c));\n\
    \    for(char &c:text)\n        if(m[c]!=c)\n            c=m[c];\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6uiyum_q.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp6uiyum_q.cpp:13:49: error: no matching function for call to \u2018\
    std::pair<char, std::__cxx11::basic_string<char> >::pair(char&, char&)\u2019\n\
    \   13 |         m.insert(std::pair<char,std::string>(c,c));\n      |        \
    \                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6uiyum_q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:436:9:\
    \ note: candidate: \u2018template<class ... _Args1, long unsigned int ..._Indexes1,\
    \ class ... _Args2, long unsigned int ..._Indexes2> std::pair<_T1, _T2>::pair(std::tuple<_Args1\
    \ ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2\
    \ ...>)\u2019\n  436 |         pair(tuple<_Args1...>&, tuple<_Args2...>&,\n  \
    \    |         ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:436:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6uiyum_q.cpp:13:49:\
    \ note:   mismatched types \u2018std::tuple<_Tps ...>\u2019 and \u2018char\u2019\
    \n   13 |         m.insert(std::pair<char,std::string>(c,c));\n      |       \
    \                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  int n = text.length();\n    for (int i = 0; i < n; ++i) {\n        char ch\
    \ = text[i];\n        if (std::isspace(ch)) {\n            if (i == 0)\n     \
    \           res = std::to_string(static_cast<unsigned char>(ch));\n          \
    \  else\n                res[i] = std::to_string(static_cast<unsigned char>('\
    \ '));\n            i += 1;\n        } else if (i == n - 1)\n            res[i]\
    \ = std::to_string(static_cast<unsigned char>('\\0'));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8y6hvahz.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp8y6hvahz.cpp:19:40: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} in assignment\n   19 |      \
    \           res[i] = std::to_string(static_cast<unsigned char>(' '));\n      |\
    \                          ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \
    \     |                                        |\n      |                    \
    \                    std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmp8y6hvahz.cpp:22:36:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   22 |             res[i] = std::to_string(static_cast<unsigned\
    \ char>('\\0'));\n      |                      ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                    |\n      |                       \
    \             std::string {aka std::__cxx11::basic_string<char>}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    // Replace multiple spaces with a single space\n    // result.erase(remove(\
    \ result.begin(), result.end(), ' ' ), result.end()); \n    while (!result.empty()\
    \ && result.back() == ' ') {\n        result.pop_back();\n    }\n    // Remove\
    \ all spaces \n    result = result.erase(std::remove(result.begin(), result.end(),\
    \ ' '), result.end()); \n    \n    if(result.length() > 1) {\n        while (result.length()\
    \ > 1 && result.front() == ' ') {\n            result.erase(result.begin());\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1v0auilr.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp1v0auilr.cpp:18:87: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019})\n   18 |     result = result.erase(std::remove(result.begin(),\
    \ result.end(), ' '), result.end());\n      |                                \
    \                                                       ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1v0auilr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:665:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n  665 |       operator=(const basic_string& __str)\n\
    \      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:665:37:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n        std::string clean(text);\n\
    \        std::string::size_type len = clean.size();\n        clean.replace(len,\
    \ len, ' ');\n        clean.replace(len - 1, len - 1, ' ');\n        if (clean.find_first_not_of('\
    \ ') != clean.find_last_not_of(' ') + 1) {\n                clean.replace(len\
    \ - 2, len - 2, ' ');\n        }\n        return clean;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpurrol5a8.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpurrol5a8.cpp:13:36: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type&,\
    \ std::__cxx11::basic_string<char>::size_type&, char)\u2019\n   13 |         clean.replace(len,\
    \ len, ' ');\n      |                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpurrol5a8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpurrol5a8.cpp:13:33:\
    \ error: invali"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::regex space_re(\"\\\\s+\"\
    );\n    std::regex_replace(text.begin(), text.end(), space_re, \"_\");\n    if\
    \ (std::regex_replace(text.begin(), text.end(), space_re, \" \") != text.end())\n\
    \        text += '-';\n    return text;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhgedphh.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpfhgedphh.cpp:12:63: error: no matching function for call to \u2018\
    regex_replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::regex&, const char [2])\u2019\n   12 |     std::regex_replace(text.begin(),\
    \ text.end(), space_re, \"_\");\n      |                                     \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpfhgedphh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2365:5:\
    \ note: candidate: \u2018template<class _Out_iter, class _Bi_iter, class _Rx_traits,\
    \ class _Ch_type, class _St, class _Sa> _Out_iter std::regex_replace(_Out_iter,\
    \ _Bi_iter, _Bi_iter, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&,\
    \ const std::__cxx11::basic_string<_Ch_type, _St, _Sa>&, std::regex_constants::match_flag_type)\u2019\
    \n 2365 |     regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n\
    \      |     ^~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2365:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfhgedphh.cpp:12:63:\
    \ note:   deduced conflicting types for parameter \u2018_Bi_iter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019 and\
    \ \u2018std::__cxx11::basic_regex<char>\u2019)\n   12 |     std::regex_replace(text.begin(),\
    \ text.end(), space_re, \"_\");\n      |                                     \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2870,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpfhgedphh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  text = std::regex_replace(text,\
    \ std::regex(\"\\\\s+\"), std::string(\"\"));\n  text = std::regex_replace(text,\
    \ std::regex(\"\\\\s{1,}\"), std::string(\"-\"));\n  return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmptsc0wkxa: /tmp/tmptsc0wkxa.cpp:18: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' '){\n            text[i] = '_';\n        }\n\
    \        else if(text[i] == ' '){\n            if((i + 1) < text.length() && text[i+1]\
    \ == ' '){\n                text[i] = '-';\n                text[i+1] = '-';\n\
    \                i++;\n            }\n        }\n    }\n    return text;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpy6_f0rep: /tmp/tmpy6_f0rep.cpp:30: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n           \
    \ s[i] = '_';\n        }\n    }\n\n    int flag = 0;\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (s[i] == ' ') {\n            flag = 1;\n    \
    \    }\n        else {\n            if (flag) {\n                s[i] = '_';\n\
    \            }\n            else {\n                flag = 0;\n            }\n\
    \        }\n    }\n\n    if (s.substr(0, 2).equals(\"_\")) {\n        s = s.substr(2);\n\
    \    }\n\n    if (s.length() > 2) {\n        for (int i = 1; i < s.length() -\
    \ 2; i++) {\n            if (s.at(i) == ' ') {\n                s[i] = '-';\n\
    \            }\n        }\n    }\n\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq1_czylr.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpq1_czylr.cpp:33:24: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018equals\u2019\n   33 |     if (s.substr(0, 2).equals(\"\
    _\")) {\n      |                        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            if (i + 1 < text.size() &&\
    \ text[i + 1] == ' ') {\n                text[i] = '_';\n                text[i\
    \ + 1] = '-';\n                i += 1;\n            }\n        }\n    }\n    return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp1i45q7e8: /tmp/tmp1i45q7e8.cpp:25: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int n = text.length();\n   \
    \ std::string ans = \"\";\n    for (int i = 0; i < n; i++) {\n        if (text[i]\
    \ == ' ')\n            ans += \"_\";\n        else\n            ans += text[i];\n\
    \    }\n    if (ans.length() > 2) {\n        while (ans.find(\"  \", 0) != std::string::npos)\
    \ {\n            ans.replace(ans.find(\"  \", 0), 2, \"-\");\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwk5lz0aq: /tmp/tmpwk5lz0aq.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  for (int i = 0; i < text.length(); i++) {\n        if(text[i] == ' '){\n  \
    \          res.push_back('_');\n        }\n    }\n    \n    int spaces = 0;\n\
    \    for (int i = 0; i < res.length(); i++) {\n        if (res[i] == ' ')\n  \
    \          spaces++;\n        else\n            spaces = 0;\n        if (spaces\
    \ > 2)\n            res.replace(i + spaces - 1, i + spaces - 1, \"-\");\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpk7_kvb2z: /tmp/tmpk7_kvb2z.cpp:32: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for (int i=0;i<text.length();i++)\
    \ {\n        switch (text[i]) {\n        case ' ':\n            text[i] = '_';\n\
    \            break;\n        case '\\t':\n            text[i] = '_';\n       \
    \     break;\n        default:\n            break;\n        }\n    }\n    return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp5m71p7zu: /tmp/tmp5m71p7zu.cpp:30: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int n = text.length();\n   \
    \ for (int i = 0; i < n; i++) {\n        if (text[i] == ' ') {\n            text[i]\
    \ = '_';\n        } else if (text[i] != ' ' && text[i+1] != ' ' && text[i+2] !=\
    \ ' ') {\n            text[i+1] = '-';\n        }\n    }\n    return text;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp3a7k86s5: /tmp/tmp3a7k86s5.cpp:23: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::istringstream iss(text);\n\
    \    std::string res;\n    std::string temp;\n    while(iss) {\n        temp =\
    \ std::getline(iss, temp, ' ');\n        if(temp.empty()) {\n            if(!iss)\
    \ break;\n        }\n        else {\n            res += temp;\n        }\n   \
    \     while(iss) {\n            temp = std::getline(iss, temp, ' ');\n       \
    \     if(temp.empty()) {\n                if(!iss) break;\n            }\n   \
    \         else {\n                res += temp;\n            }\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_phei73.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpm_phei73.cpp:15:43: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018std::basic_istream<char>\u2019)\n   15 |         temp = std::getline(iss,\
    \ temp, ' ');\n      |                                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpm_phei73.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:665:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n  665 |       operator=(const basic_string& __str)\n\
    \      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:665:37:\
    \ note:   no known conversion for argument 1 from \u2018std::basic_istream<char>\u2019\
    \ to \u2018const std::__cxx11::basic_string<char>&\u2019\n  665 |       operator=(const\
    \ basic_string& __str)\n      |                 ~~~~~~~~~~~~~~~~~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:704:7:\
    \ note: candidate: \u2018std::__c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string fixed_text = text;\n\
    \    int flag = 0;\n    for (int i = 0; i <= fixed_text.size(); ++i) {\n     \
    \   if (fixed_text[i] == ' ')\n            flag++;\n        else if (flag > 2)\n\
    \            fixed_text[i] = '-';\n        else if (flag == 2) {\n           \
    \ fixed_text[i] = '_';\n        }\n    }\n    return fixed_text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp64_q_rr1: /tmp/tmp64_q_rr1.cpp:27: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for (auto c : text) \n     \
    \   if (!isspace(c)) \n            text += \"_\";\n    text = text.replace(' ',\
    \ '-');\n    if (text.size() > 2) \n        text = text.substr(0, text.size()\
    \ - 2);\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpknfnbv99.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpknfnbv99.cpp:14:33: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(char, char)\u2019\n   14 |     text\
    \ = text.replace(' ', '-');\n      |                                 ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpknfnbv99.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1911:7:\
    \ note: candidate: \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    size_t index = text.find_first_not_of('\
    \ ');\n    while(index != std::string::npos) {\n        text.insert(index, std::to_string(index));\n\
    \        index = text.find_first_not_of(' ', index+1);\n    }\n    \n    if(text.size()>2){\n\
    \        index = text.find_last_not_of(' ');\n        while(index != std::string::npos)\
    \ {\n            text.erase(text.begin()+index);\n            index = text.find_last_not_of('\
    \ ', index-1);\n        }\n    }\n    \n    return text;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string fixed_text = text;\n\
    \  std::replace(fixed_text.begin(), fixed_text.end(), ' ', '_');\n  std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n  int count = 0;\n  \n  // Check for consecutive\
    \ spaces, if count exceeds 2, then replace with -\n  for (int i = 1; i < fixed_text.size();\
    \ i++) {\n    if (fixed_text[i] == ' ' && fixed_text[i - 1] == ' ') {\n      count++;\n\
    \      if (count > 2) {\n        fixed_text[i - 1] = '-';\n        fixed_text[i\
    \ - 2] = '-';\n      }\n    }\n  }\n  return fixed_text;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkbco7tr9: /tmp/tmpkbco7tr9.cpp:33: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string new_text = \"\"\
    ;\n    for(unsigned int i = 0; i<text.length(); i++){\n        if(text[i] == '\
    \ '){\n            new_text.append(1, '_');\n        }else{\n            new_text.append(text[i]);\n\
    \        }\n    }\n    // If text has more than 2 spaces between words\n    if(new_text.find(\"\
    ____\") != std::string::npos){\n        // Get rid of the consecutive spaces\n\
    \        std::string new_text_2;\n        new_text_2 = fix_spaces(new_text);\n\
    \        return new_text_2;\n    }else{\n        return new_text;\n    }\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3pp0w241.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp3pp0w241.cpp:16:36: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   16 |             new_text.append(text[i]);\n \
    \     |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3pp0w241.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1263 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmp3pp0w241.cpp:16:36:\
    \ error: invalid conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n\
    \   16 |             new_text.append(text[i]);\n      |                      \
    \              ^\n      |                                    |\n      |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    text.erase(std::remove_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n\n    for (std::string::size_type i =\
    \ 0; i < text.size(); i++) {\n        if (i != 0 && !isspace(text[i-1])) {\n \
    \           text.insert(text.begin(), '_');\n        }\n        if (isspace(text[i]))\
    \ {\n            if (i != text.size() - 1 && !isspace(text[i+1])) {\n        \
    \        text.insert(text.begin(), '-');\n            }\n            else {\n\
    \                text.erase(i, 1);\n            }\n        }\n    }\n    return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpour42qs8.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpour42qs8.cpp:12:81: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::erase(std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   12 |     text.erase(std::remove_if(text.rbegin(), text.rend(), ::isspace),\
    \ text.end());\n      |                                                      \
    \                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpour42qs8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1807:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::erase(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1807 |       erase(size_type __pos = 0, size_type __n = npos)\n\
    \      |       ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1807:23:\
    \ note:  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for (auto i : text) {\n    \
    \    if (i == ' ') {\n            text.replace(i, 1, '_');\n        } else if\
    \ (text.at(i) != ' ' &&\n            text.at(i) != '_') {\n            text.replace(i,\
    \ 1, std::string(\"_\"));\n        }\n    }\n    \n    std::string str = \"\"\
    ;\n    for (auto i : text) {\n        if ((text[i] == '_') && (text.at(i + 1)\
    \ == ' ') &&\n            (text.at(i - 1) == ' ')) {\n            str += text.at(i);\n\
    \        } else {\n            str += text[i];\n        }\n    }\n    return str;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeh4x4mtp.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpeh4x4mtp.cpp:13:35: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(char&, int, char)\u2019\n   13 |   \
    \          text.replace(i, 1, '_');\n      |                                 \
    \  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpeh4x4mtp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpeh4x4mtp.cpp:13:32:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   13 |             text."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string fixed_text = text;\n\
    \  for (size_t i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n \
    \     fixed_text[i] = '_';\n    } else if (fixed_text[i] == ' ') {\n      fixed_text[i]\
    \ = '_';\n    }\n  }\n  if (fixed_text.find(' ') != fixed_text.length() - 1) {\n\
    \    fixed_text += '-';\n  }\n  return fixed_text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpreyj10yz: /tmp/tmpreyj10yz.cpp:26: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string s = text;\n  for (char\
    \ c: s) {\n    if (isspace(c))\n      s.replace(c, ' ', '_');\n    if (s.size()\
    \ > 2 && c == ' ' && s[2-1] == ' ')\n      s.replace(2, 1, \"-\");\n  }\n  return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvtxipj9r.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpvtxipj9r.cpp:14:28: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(char&, char, char)\u2019\n   14 |  \
    \     s.replace(c, ' ', '_');\n      |                            ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvtxipj9r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpvtxipj9r.cpp:14:25:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   14 |       s.replace(c, ' ', '_');\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    auto new_text = text;\n    size_t\
    \ i = 0;\n    while (i < new_text.length()) {\n        if (new_text[i] == ' ')\
    \ {\n            ++i;\n        }\n        if (new_text[i] == ' ' && new_text[i+1]\
    \ == ' ') {\n            new_text[i] = '_';\n            new_text[i+1] = '-';\n\
    \            i += 2;\n        } else {\n            ++i;\n        }\n    }\n \
    \   return new_text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpefm2i_fl: /tmp/tmpefm2i_fl.cpp:30: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    text.erase(std::find_if(text.begin(), text.end(), [](char ch)\
    \ { return ch == ' '; }), text.end());\n    return text;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpsqgs7rfw: /tmp/tmpsqgs7rfw.cpp:20: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::ostringstream fix;\n  \
    \  std::size_t i;\n    for (i = 0; i < text.size(); ++i) {\n        if (text[i]\
    \ == ' ')\n            fix << \"_\";\n        else {\n            fix << text[i];\n\
    \        }\n    }\n    return fix.str();\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpfgfkqs2e: /tmp/tmpfgfkqs2e.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    size_t\
    \ start_pos = 0;\n    size_t end_pos = 0;\n    while (end_pos != s.size()) {\n\
    \        end_pos = s.find_first_not_of(\" \", start_pos);\n        if (end_pos\
    \ != std::string::npos) {\n            s.erase(start_pos, end_pos - start_pos);\n\
    \            start_pos = end_pos + 1;\n        } else {\n            start_pos\
    \ = s.size();\n        }\n    }\n    while (start_pos != 0) {\n        start_pos\
    \ = s.find_first_not_of(\" \", start_pos);\n        if (start_pos != 0) {\n  \
    \          s.erase(start_pos, std::string::npos);\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    size_t start = 0;\n    size_t\
    \ end = 0;\n    \n    for (end = text.size(); end > 0; end--) {\n        if (text[end]\
    \ == ' ') {\n            if (end == start) {\n                text[end] = '_';\n\
    \            }\n            else {\n                text[end] = '-';\n       \
    \     }\n        }\n    }\n    \n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5pf5gz53: /tmp/tmp5pf5gz53.cpp:30: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    text.erase(std::unique(text.begin(), text.end()), text.end());\n\
    \    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp7wppckxq: /tmp/tmp7wppckxq.cpp:19: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string newText = std::move(text);\n\
    \    std::string beforeSpaces = std::move(newText);\n    std::string::size_type\
    \ first = beforeSpaces.find_first_not_of(\" \");\n    if (std::string::npos ==\
    \ first) {\n        return beforeSpaces;\n    }\n    newText = beforeSpaces.substr(0,\
    \ first);\n    newText += \"_\";\n    first = beforeSpaces.find_first_of(\" \"\
    , first + 1);\n    while (std::string::npos != first && std::string::npos != first\
    \ + 1) {\n        newText += \"-\";\n        first = beforeSpaces.find_first_of(\"\
    \ \", first + 1);\n    }\n    return newText + std::move(beforeSpaces.substr(first\
    \ + 1, beforeSpaces.size() - first));\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp7k2rpx12: /tmp/tmp7k2rpx12.cpp:28: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = \"\";\n  \
    \  for(auto &c : text)\n    {\n        if(std::isspace(c))\n        {\n      \
    \      out += c; \n        }\n        else\n        {\n            out += std::to_string(std::find_if(out.begin(),\
    \ out.end(), [&c](unsigned char x){return x == 32;}));\n        }\n    }\n   \
    \ return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaq_5jci1.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpaq_5jci1.cpp:20:111: error: no matching function for call to \u2018\
    to_string(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >)\u2019\n   20 |             out += std::to_string(std::find_if(out.begin(),\
    \ out.end(), [&c](unsigned char x){return x == 32;}));\n      |              \
    \                                                                            \
    \                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaq_5jci1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6546\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:17:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018int\u2019\n 6546 |   to_string(int\
    \ __val)\n      |             ~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(unsigned int)\u2019\
    \n 6551 |   to_string(unsigned __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for(std::size_t i = 0; i < text.length();\
    \ i++)\n    {\n        if(text[i] == ' ')\n        {\n            text[i] = '_';\n\
    \        }\n        if(text[i] == ' ')\n        {\n            while(i < text.length()\
    \ - 1 && text[i] == ' ')\n            {\n                text[i] = '_';\n    \
    \            i++;\n            }\n        }\n    }\n    return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgcy0wu49: /tmp/tmpgcy0wu49.cpp:33: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    for(auto it = text.begin();\
    \ it != text.end(); it++)\n    {\n        if(*it == ' ')\n            *(it-1)\
    \ = '_';\n    }\n    for(auto it = text.begin() + text.size() - 1; it != text.end();\
    \ it++)\n    {\n        if(*it == ' ')\n        {\n            *(it+1) = '-';\n\
    \            break;\n        }\n    }\n    return text;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp9il2royv: /tmp/tmp9il2royv.cpp:29: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2)\n        std::replace(s.begin(),\
    \ s.begin() + 2, ' ', '-');\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmplki03vv1: /tmp/tmplki03vv1.cpp:22: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Your code here\n    \n  \
    \  int k = 0, i = 0;\n    int length = 0;\n    while(i < text.length()) {\n  \
    \      if(text[i] == ' ')\n            length++;\n        else\n            length\
    \ = 0;\n        if(length > 2 && k < text.length() - 2) {\n            for(int\
    \ j = i + 2; j < text.length() && j < i + length + 2; j++) {\n               \
    \ if(text[j] == ' ') {\n                    k++;\n                    text[k]\
    \ = '-';\n                }\n                else {\n                    k = 0;\n\
    \                    text[k++] = text[j];\n                }\n            }\n\
    \        }\n        i++;\n    }\n    \n    return text;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpx7k45j8x: /tmp/tmpx7k45j8x.cpp:40: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text.empty()) return text;\n\
    \    std::string out = text;\n    for (string::size_type i=0; i<out.size(); ++i)\
    \ {\n        if (out[i] == ' ') {\n            out.at(i) = out[i];\n        }\n\
    \    }\n    // replace consecutive spaces with a single -\n    bool has_space\
    \ = out.find(' ') != string::npos;\n    while (out.find(' ') != string::npos)\
    \ {\n        out.erase(out.begin(), out.begin()+out.find(' '));\n        out.erase(0,\
    \ out.find(' ')+1);\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkh2qmih0.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpkh2qmih0.cpp:13:10: error: \u2018string\u2019 has not been declared\n\
    \   13 |     for (string::size_type i=0; i<out.size(); ++i) {\n      |       \
    \   ^~~~~~\n/tmp/tmpkh2qmih0.cpp:13:33: error: \u2018i\u2019 was not declared\
    \ in this scope\n   13 |     for (string::size_type i=0; i<out.size(); ++i) {\n\
    \      |                                 ^\n/tmp/tmpkh2qmih0.cpp:19:39: error:\
    \ \u2018string\u2019 has not been declared\n   19 |     bool has_space = out.find('\
    \ ') != string::npos;\n      |                                       ^~~~~~\n\
    /tmp/tmpkh2qmih0.cpp:20:29: error: \u2018string\u2019 has not been declared\n\
    \   20 |     while (out.find(' ') != string::npos) {\n      |                \
    \             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  int spaces = 0;\n  for (auto c : text) {\n    if (c == ' ') spaces++;\n\
    \    else if (!--spaces) return text;\n  }\n  std::transform(text.begin(), text.end(),\
    \ text.begin(), ::tolower);\n  std::replace(text.begin(), text.end(), '_', '-');\n\
    \  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp9p8dyos8: /tmp/tmp9p8dyos8.cpp:23: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string res = (text == \"\
    Example\") ? text : text.replace(\" \", \"_\");\n  res = res.replace(\" \", \"\
    -\");\n  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6v6dqchw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp6v6dqchw.cpp:11:71: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(const char [2], const char [2])\u2019\
    \n   11 |   std::string res = (text == \"Example\") ? text : text.replace(\" \"\
    , \"_\");\n      |                                                           \
    \            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6v6dqchw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::string temp;\n    for (int i = 0; i < (int)(res.size()); i++) {\n    \
    \    if (res[i] == ' ') {\n            temp.push_back('_');\n        } else {\n\
    \            temp.push_back(' ');\n        }\n    }\n    res = temp;\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpjjgm1cl1: /tmp/tmpjjgm1cl1.cpp:25: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  // your code goes here\n  \n \
    \ std::string::iterator it;\n  std::string result;\n  int prev = -1;\n  for (it\
    \ = text.begin(); it != text.end(); ++it) {\n    if (*it == ' ') {\n      if (prev\
    \ == -1) {\n        result += *it;\n        prev = *it;\n      } else {\n    \
    \    result += '_';\n        result += *it;\n        prev = *it;\n      }\n  \
    \  } else {\n      result += *it;\n      prev = *it;\n    }\n  }\n  \n  if (prev\
    \ == -1) {\n    result += *it;\n  } else {\n    result += '_';\n    result +=\
    \ *it;\n  }\n  return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmptxfz62jl: /tmp/tmptxfz62jl.cpp:42: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Write your code here\n  \
    \  for(size_t i=0;i<text.length();i++) {\n        if(text[i]==' ') {\n       \
    \     text.append(\"_\");\n        }\n    }\n    if(text.find(\"  \")!=text.npos)\n\
    \        text.erase(text.find(\"  \"),text.npos);\n    else if(text.find(\" \"\
    )!=text.npos)\n        text.erase(text.find(\" \"),text.npos);\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpba7njpfl: /tmp/tmpba7njpfl.cpp:26: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  int i = 0;\n  while (i < text.size())\
    \ {\n    if (text[i] == ' ') {\n      text.erase(i--, 1);\n      text.insert(i,\
    \ \"_\");\n      continue;\n    }\n    i++;\n  }\n  while (i < text.size() &&\
    \ text[i] == ' ')\n    i++;\n  return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp1wvc2qk9: /tmp/tmp1wvc2qk9.cpp:27: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace_if(text.begin(),\
    \ text.end(), \n    [](char ch) {\n      return (std::isspace(ch) || std::isspace(std::prev_element(text.begin(),\
    \ text.end()))) ? \"_\" : ch;\n    }, ' ');\n  if (text.size() > 2 && text[0]\
    \ == ' ')\n    return fix_spaces(text.substr(1));\n  return text;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxdo5j12b.cpp: In lambda function:\n/tmp/tmpxdo5j12b.cpp:13:53:\
    \ error: \u2018prev_element\u2019 is not a member of \u2018std\u2019; did you\
    \ mean \u2018nth_element\u2019?\n   13 |       return (std::isspace(ch) || std::isspace(std::prev_element(text.begin(),\
    \ text.end()))) ? \"_\" : ch;\n      |                                       \
    \              ^~~~~~~~~~~~\n      |                                         \
    \            nth_element\n/tmp/tmpxdo5j12b.cpp:13:66: error: \u2018text\u2019\
    \ is not captured\n   13 |       return (std::isspace(ch) || std::isspace(std::prev_element(text.begin(),\
    \ text.end()))) ? \"_\" : ch;\n      |                                       \
    \                           ^~~~\n/tmp/tmpxdo5j12b.cpp:12:6: note: the lambda\
    \ has no capture-default\n   12 |     [](char ch) {\n      |      ^\n/tmp/tmpxdo5j12b.cpp:10:36:\
    \ note: \u2018std::string text\u2019 declared here\n   10 | std::string fix_spaces(std::string\
    \ text) {\n      |                        ~~~~~~~~~~~~^~~~\n/tmp/tmpxdo5j12b.cpp:13:80:\
    \ error: \u2018text\u2019 is not captured\n   13 |       return (std::isspace(ch)\
    \ || std::isspace(std::prev_element(text.begin(), text.end()))) ? \"_\" : ch;\n\
    \      |                                                                     \
    \           ^~~~\n/tmp/tmpxdo5j12b.cpp:12:6: note: the lambda has no capture-default\n\
    \   12 |     [](char ch) {\n      |      ^\n/tmp/tmpxdo5j12b.cpp:10:36: note:\
    \ \u2018std::string text\u2019 declared here\n   10 | std::string fix_spaces(std::string\
    \ text) {\n      |                        ~~~~~~~~~~~~^~~~\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxdo5j12b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018void std::replace_if(_FIter, _FIter, _Predicate, const\
    \ _Tp&) [with _FIter = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = fix_spaces(std::string)::<lambda(char)>; _Tp = char]\u2019:\n\
    /tmp/tmpxdo5j12b.cpp:14:11:   re"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  // Replace all spaces with underscores\
    \ \n  text = std::regex_replace(text, std::regex(\"\\\\s+\"), \" \");\n  // If\
    \ a word has 2 or more consecutive spaces, \n  // then replace all consecutive\
    \ spaces with - \n  std::smatch match;\n  while ((match = std::regex_search(text,\
    \ std::regex(\"\\\\s+\"), [&](const std::smatch& m){ text = std::regex_replace(text,\
    \ std::regex(\"\\\\s+\"), \" \"); }))) {\n    // Replace all spaces with - \n\
    \    text = std::regex_replace(text, std::regex(\"\\\\s+\"), \"-\");\n  }\n  return\
    \ text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj16iigz9.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpj16iigz9.cpp:16:149: error: no matching function for call to \u2018\
    regex_search(std::string&, std::__cxx11::regex, fix_spaces(std::string)::<lambda(const\
    \ smatch&)>)\u2019\n   16 |   while ((match = std::regex_search(text, std::regex(\"\
    \\\\s+\"), [&](const std::smatch& m){ text = std::regex_replace(text, std::regex(\"\
    \\\\s+\"), \" \"); }))) {\n      |                                           \
    \                                                                            \
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpj16iigz9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2217:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc, class _Ch_type,\
    \ class _Rx_traits> bool std::regex_search(_Bi_iter, _Bi_iter, std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&, const std::__cxx11::basic_regex<_CharT, _TraitsT>&, std::regex_constants::match_flag_type)\u2019\
    \n 2217 |     regex_search(_Bi_iter __s, _Bi_iter __e,\n      |     ^~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2217:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpj16iigz9.cpp:16:149:\
    \ note:   deduced conflicting types for parameter \u2018_Bi_iter\u2019 (\u2018\
    std::__cxx11::basic_string<char>\u2019 and \u2018std::__cxx11::basic_regex<char>\u2019\
    )\n   16 |   while ((match = std::regex_search(text, std::regex(\"\\\\s+\"), [&](const\
    \ std::smatch& m){ text = std::regex_replace(text, std::regex(\"\\\\s+\"), \"\
    \ \"); }))) {\n      |                                                       \
    \                                                                            \
    \                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \         "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if(text.size() > 2) {\n        auto first = text.begin();\n\
    \        auto last = text.end() - 1;\n        while (first != last) {\n      \
    \      if (*(first) == ' ') {\n                *(last) = '_';\n              \
    \  first++;\n            }\n            else\n                first++;\n     \
    \       last--;\n        }\n    }\n    return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::size_t prev = 0, next = 0, i = 0;\n    while (i < res.length()) {\n  \
    \      if (res.at(i) == ' ') {\n            next = i;\n            while (next\
    \ < res.length() && res.at(next) == ' ') {\n                next++;\n        \
    \    }\n            if (next == prev + 1) {\n                res += '-';\n   \
    \         }\n            else {\n                res += '_';\n            }\n\
    \            prev = next;\n        }\n        else { i++; }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::find_if(text.begin(),\
    \ text.end(), [](int x){return !std::isspace(x);}), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), [](int x){return !std::isspace(x);}), text.end());\n    size_t\
    \ spaces = 0;\n    size_t start = 0;\n    for (size_t i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            spaces++;\n            if\
    \ (spaces > 1) {\n                text.insert(start, std::to_string(spaces - 1),\
    \ '-');\n                start = i;\n                spaces = 0;\n           \
    \ } else {\n                text.insert(start, std::to_string(i), '_');\n    \
    \            start = i;\n            }\n        } else {\n            text.insert(start,\
    \ std::to_string(i));\n            start = i;\n        }\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkb8l67od.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpkb8l67od.cpp:12:105: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::erase(std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   12 |     text.erase(std::find_if(text.rbegin(), text.rend(), [](int x){return\
    \ !std::isspace(x);}), text.end());\n      |                                 \
    \                                                                        ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkb8l67od.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1807:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::erase(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1807 |       erase(size_type __pos = 0, size_type __n = npos)\n\
    \      |       ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/inclu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    bool flag = false;\n    std::string\
    \ result = text;\n    std::size_t i = 0;\n    while (i < result.size()) {\n  \
    \      if (isspace(result[i])) {\n            if (!flag) {\n                flag\
    \ = true;\n                i++;\n                while (i < result.size() && isspace(result[i]))\
    \ {\n                    i++;\n                }\n                flag = false;\n\
    \            }\n        }\n        else {\n            if (flag)\n           \
    \     result[i] = '_';\n            i++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmprvwt05au: /tmp/tmprvwt05au.cpp:36: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace_if(res.begin(), res.end(), std::isspace, ' ');\n    std::replace_if(res.begin(),\
    \ res.end(), [](char c) {\n        return c == ' ' || c == '\\t' || c == '\\n'\
    \ || c == '\\r';\n    }, ' ');\n    res.erase(std::find_if(res.rbegin(), res.rend(),\
    \ [](char c) { return c == ' '; }), res.end());\n    if (res.size() > 2) {\n \
    \       std::replace_if(res.begin(), res.end(), [&](char c) {\n            return\
    \ c == ' ' && res.size() > 2 && res.at(2) == ' ';\n        }, '-');\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplfvql9dr.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmplfvql9dr.cpp:12:62: error: no matching function for call to \u2018\
    replace_if(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ <unresolved overloaded function type>, char)\u2019\n   12 |     std::replace_if(res.begin(),\
    \ res.end(), std::isspace, ' ');\n      |                                    \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplfvql9dr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note: candidate: \u2018template<class _FIter, class _Predicate, class _Tp> void\
    \ std::replace_if(_FIter, _FIter, _Predicate, const _Tp&)\u2019\n 4388 |     replace_if(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplfvql9dr.cpp:12:62:\
    \ note:   couldn\u2019t deduce template parameter \u2018_Predicate\u2019\n   12\
    \ |     std::replace_if(res.begin(), res.end(), std::isspace, ' ');\n      | \
    \                                                             ^\n/tmp/tmplfvql9dr.cpp:16:97:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::erase(std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   16 |     res.erase(std::find_if(res.rbegin(), res.rend(), [](char c) { return\
    \ c == ' '; }), res.end());\n      |                                         \
    \                                                        ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/inc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    std::string result = text;\n\
    \    \n    std::string result1 = result.replace(\" \",\"_\");\n    if(result1.length()>2)\n\
    \        result1 = result1.substr(0,result1.length()-2)+\"-\"+result1.substr(result1.length()-2);\n\
    \    \n    result = result1.replace(\" \",\"-\");\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8m1tpsoo.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp8m1tpsoo.cpp:14:49: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(const char [2], const char [2])\u2019\
    \n   14 |     std::string result1 = result.replace(\" \",\"_\");\n      |    \
    \                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8m1tpsoo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (unsigned int i = 0; i < out.size(); i++) {\n        if (out[i] == ' ')\
    \ {\n            out.insert(i, \"_\");\n        }\n        if (i + 1 == out.size()\
    \ || (out[i] == '_' && out[i + 1] == ' ')) {\n            out.insert(i, \"-\"\
    );\n            i++;\n        }\n    }\n    return out;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpcwcdst5q: /tmp/tmpcwcdst5q.cpp:25: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    int i = 1;\n    while (i < text.length())\
    \ {\n        if (text[i] == ' ' && text[i-1] != ' ' && text[i-2] == ' ') {\n \
    \           text[i] = '_';\n            i++;\n        } else {\n            i++;\n\
    \        }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpzqj6bwru: /tmp/tmpzqj6bwru.cpp:25: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // your code goes here\n   \
    \ for (auto &c: text)\n    {\n        if(c==' ')\n        {\n            c='_';\n\
    \        }\n    }\n    if((text.size()-text.find_last_of(\" \")) > 1)\n    {\n\
    \        std::string result=text;\n        std::size_t start=0;\n        std::size_t\
    \ end=0;\n        std::size_t count=0;\n        while (end < result.size())\n\
    \        {\n            if (result[end] == ' ') {\n                count++;\n\
    \            } else {\n                count = 1;\n            }\n           \
    \ if (count == 2) {\n                result[start] = '-';\n                result[end]\
    \ = '-';\n                start = end + 1;\n                end = result.size();\n\
    \            }\n            end++;\n        }\n        result = result.substr(0,\
    \ start-1) + result.substr(start);\n        return result;\n    }\n    else\n\
    \    {\n        return text;\n    }\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp6awvuduq: /tmp/tmp6awvuduq.cpp:50: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string result;\n  for (int\
    \ i=0; i<text.size(); i++) {\n    if (text[i] == ' ') {\n      result.push_back('_');\n\
    \    } else {\n      result.push_back(text[i]);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpq_8tiga3: /tmp/tmpq_8tiga3.cpp:26: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos,\
    \ pos2;\n    std::string temp;\n    while(true)\n    {\n        pos = text.find(\"\
    \  \");\n        if (pos == std::string::npos)\n        {\n            break;\n\
    \        }\n        temp.assign(text.begin(), text.begin() + pos - 1);\n     \
    \   temp.push_back(\" \");\n        temp.push_back(temp[pos - 2]);\n        pos2\
    \ = temp.find(\"  \");\n        if (pos2 == std::string::npos)\n        {\n  \
    \          temp.push_back(\" \");\n        }\n        else\n        {\n      \
    \      temp.resize(pos2 + 1);\n        }\n        text = temp + text.substr(pos);\n\
    \    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwagm1luw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpwagm1luw.cpp:21:24: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018char\u2019 [-fpermissive]\n   21 |         temp.push_back(\" \");\n\
    \      |                        ^~~\n      |                        |\n      |\
    \                        const char*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwagm1luw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24:\
    \ note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n\
    \      |                 ~~~~~~~^~~\n/tmp/tmpwagm1luw.cpp:26:28: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018char\u2019 [-fpermissive]\n\
    \   26 |             temp.push_back(\" \");\n      |                         \
    \   ^~~\n      |                            |\n      |                       \
    \     const char*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    if(text.length() <= 1)\n\
    \        return text;\n    \n    bool flag = false;\n    int counter = 0;\n  \
    \  for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ')\n    \
    \        counter++;\n        else {\n            if(flag)\n                text[i]\
    \ = '_';\n            else\n                text[i] = text[i];\n            \n\
    \            counter = 1;\n            flag = true;\n        }\n    }\n    \n\
    \    if(counter == 2)\n        for(int i = 0; i < text.length() - 1; i++) {\n\
    \            if(text[i] == ' ')\n                text[i] = '_';\n        }\n \
    \   \n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n  \
    \  assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpnfxk6de0: /tmp/tmpnfxk6de0.cpp:41: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    bool flag = false;\n    for\
    \ (unsigned int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n\
    \            if(!flag) {\n                text[i] = '_';\n                flag\
    \ = true;\n            } else {\n                text[i] = '_';\n            }\n\
    \        } else {\n            flag = false;\n            text[i] = '_';\n   \
    \     }\n    }\n    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpyh_m4xte: /tmp/tmpyh_m4xte.cpp:29: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(int\
    \ i = 0; i < (int)s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i]\
    \ = '_';\n        }\n        if(i > 0 && s[i - 1] == ' ') {\n            s[i]\
    \ = '_';\n        }\n    }\n    for(int i = 0; i < (int)s.length(); i++) {\n \
    \       if(s[i] == '_' && s[i + 1] == '_') {\n            s[i] = ' ';\n      \
    \  }\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpeg7wv4ae: /tmp/tmpeg7wv4ae.cpp:31: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    // Write your code here\n  \
    \  int space = text.find(' ');\n    if (space != std::string::npos) {\n      \
    \  if (text.find(\"  \", space) != std::string::npos) {\n            return text.replace(\"\
    \  \", \"-\");\n        }\n        return text.replace(\" \", \"_\");\n    }\n\
    \    return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpptpiybmb.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpptpiybmb.cpp:15:42: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(const char [3], const char [2])\u2019\
    \n   15 |             return text.replace(\"  \", \"-\");\n      |           \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpptpiybmb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/bas"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\t\n\tstd::string result = text;\n\
    \tfor (auto i = text.size(); i >= 0; i--) {\n\t\tif (text[i] == ' ')\n\t\t\tresult.insert(i,\
    \ '_');\n\t\telse if (text[i] == ' ' && text[i+1] == ' ')\n\t\t\tresult.insert(i,\
    \ '_');\n\t\telse if (i > 0 && text[i-1] == ' ' && text[i] == ' ')\n\t\t\tresult.insert(i,\
    \ '-');\n\t}\n\t\n\treturn result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzheb4lrg.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpzheb4lrg.cpp:15:24: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(long unsigned int&, char)\u2019\n   15\
    \ |    result.insert(i, '_');\n      |                        ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzheb4lrg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    std::string::size_type pos = 0;\n    while ((pos = text.find_first_not_of(\"\
    \ \\t\\n\", pos)) != text.npos) {\n        text.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 2;\n    }\n    return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp_34zn943: /tmp/tmp_34zn943.cpp:21: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    for (size_t i = 0; i < result.length(); ++i) {\n        char ch = text[i];\n\
    \        if (ch != ' ') {\n            result[i] = ch;\n        } else if (i +\
    \ 1 < result.length() && (result[i + 1] == ' ')) {\n            result[i] = '-';\n\
    \            ++i;\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpx3hafvwj: /tmp/tmpx3hafvwj.cpp:26: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\tsize_t start = 0;\n\tsize_t end\
    \ = text.length();\n\tbool flag = false;\n\twhile (flag == false) {\n\t\tstart\
    \ = text.find(' ', start);\n\t\tend = text.find(' ', end);\n\t\tif (end != std::string::npos)\n\
    \t\t\tif (end - start > 1)\n\t\t\t\ttext = text.substr(0, start) + \"_\" + text.substr(start\
    \ + 1, end - 1);\n\t\telse {\n\t\t\tflag = true;\n\t\t}\n\t}\n\treturn text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  if (text.find('  ') != std::string::npos) {\n    text.replace(2,\
    \ 2, std::string(\"_\"));\n  }\n  return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmplic54m_r: /tmp/tmplic54m_r.cpp:22: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if(text.size()==0)\n       \
    \ return \"\";\n    int i=0;\n    while(text[i]!=' ' && text[i]!='\\0')\n    \
    \    i++;\n    if(i==0)\n        return text;\n    int count=1;\n    while(text[i]!='\
    \ ' && text[i]!='\\0'){\n        if(text[i]=='\\0')\n            break;\n    \
    \    if(text[i]==' ')\n            count++;\n        else\n            count--;\n\
    \        i++;\n    }\n    if(count<2)\n        return text;\n    std::string s;\n\
    \    while(count>0)\n    {\n        if(count==1)\n            s=s+\"_\";\n   \
    \     else\n            s=s+\"-\";\n        count--;\n        i++;\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp9cmvxpgm: /tmp/tmp9cmvxpgm.cpp:45: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if (text.find_first_of(' ') >= 2) {\n        std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    }\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpo1e630wr: /tmp/tmpo1e630wr.cpp:22: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string ans;\n    std::string\
    \ space=\"_\";\n    std::string newspace=\" \";\n    std::size_t found = text.find(space);\n\
    \    while(found != std::string::npos) {\n        ans = ans + text.substr(0,found);\n\
    \        ans = ans + newspace;\n        ans = ans + text.substr(found+1,text.length());\n\
    \        found = text.find(space,found+1);\n    }\n    ans = ans + text;\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp8k73rzn_: /tmp/tmp8k73rzn_.cpp:27: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  text.resize(text.size());\n  int\
    \ index = 0;\n  while (index < text.size()) {\n    char ch = text[index];\n  \
    \  if (std::isspace(ch)) {\n      index = text[index];\n      continue;\n    }\n\
    \    else if (index > 0) {\n      char prev_ch = text[text.length - index - 1];\n\
    \      if (prev_ch == ' ') {\n        text[text.length - index - 1] = '-';\n \
    \     }\n    }\n    else { // text[0] == ''\n      index = text[index];\n    \
    \  continue;\n    }\n    ++index;\n  }\n  return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyzmk69oz.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpyzmk69oz.cpp:20:32: error: invalid use of member function \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length()\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019 (did you forget the \u2018()\u2019 ?)\n   20 |       char prev_ch\
    \ = text[text.length - index - 1];\n      |                           ~~~~~^~~~~~\n\
    \      |                                      ()\n/tmp/tmpyzmk69oz.cpp:22:19:\
    \ error: invalid use of member function \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length()\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019 (did you forget the \u2018()\u2019 ?)\n   22 |         text[text.length\
    \ - index - 1] = '-';\n      |              ~~~~~^~~~~~\n      |             \
    \            ()\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string::size_type pos =\
    \ 0;\n    bool space = false;\n    while(text[pos] == ' ') {\n        space =\
    \ true;\n        pos++;\n    }\n    while(pos < text.size()) {\n        if(text[pos]\
    \ == ' ') {\n            space = true;\n        } else {\n            space =\
    \ false;\n        }\n        if(space) {\n            text.replace(1, text.size()\
    \ - 1, std::string(\"_\"));\n        } else {\n            text.replace(1, text.size()\
    \ - 1, std::string(\"-\"));\n        }\n        pos++;\n    }\n    return text;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp27dze8cd: /tmp/tmp27dze8cd.cpp:34: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::replace_if(text.begin(),\
    \ text.end(), std::isspace, ' ');\n    return std::accumulate(text.begin(), text.end(),\
    \ std::string(\"\"), \n            [](std::string acc, char c) {\n           \
    \     return acc + std::string(1, c == ' ' ? '_' : ' ');\n            });\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpch0oz0v_.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpch0oz0v_.cpp:11:64: error: no matching function for call to \u2018\
    replace_if(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ <unresolved overloaded function type>, char)\u2019\n   11 |     std::replace_if(text.begin(),\
    \ text.end(), std::isspace, ' ');\n      |                                   \
    \                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpch0oz0v_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note: candidate: \u2018template<class _FIter, class _Predicate, class _Tp> void\
    \ std::replace_if(_FIter, _FIter, _Predicate, const _Tp&)\u2019\n 4388 |     replace_if(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpch0oz0v_.cpp:11:64:\
    \ note:   couldn\u2019t deduce template parameter \u2018_Predicate\u2019\n   11\
    \ |     std::replace_if(text.begin(), text.end(), std::isspace, ' ');\n      |\
    \                                                                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    if (text.empty()) return text;\n\
    \    std::string buffer = text;\n    std::size_t pos = 0;\n    bool modified =\
    \ false;\n    while (pos < buffer.size()) {\n        char ch = buffer[pos];\n\
    \        if (ch == ' ') {\n            if (modified) {\n                pos =\
    \ buffer.find_last_not_of(\" \", pos);\n            } else {\n               \
    \ pos = buffer.find_first_not_of(\" \", pos);\n            }\n            modified\
    \ = true;\n        } else {\n            modified = false;\n            buffer[pos]\
    \ = '_';\n            ++pos;\n        }\n    }\n    return buffer;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpeczl_ilw: /tmp/tmpeczl_ilw.cpp:34: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    text.erase(std::find_if(text.begin(),\
    \ text.end(), [](char c) {\n        return c == ' ' || c == '\\t';\n    }), text.end());\
    \ // remove all spaces in text\n    if (text.size() >= 2 && *text.rbegin() ==\
    \ ' ') // if text has only 1 consecutive space, \n        text = text.substr(0,\
    \ text.size() - 1) + '-';\n    return text;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp9v7wvya9: /tmp/tmp9v7wvya9.cpp:21: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result;\n    int\
    \ spaces = 0;\n    for (int i = 0; i < text.size(); i++) {\n        char c = text[i];\n\
    \        if (c == ' ') {\n            spaces++;\n        }\n        else {\n \
    \           if (spaces > 1) {\n                result.append(1, '-');\n      \
    \      }\n            spaces = 0;\n            result.append(1, c);\n        }\n\
    \    }\n    if (spaces > 1) {\n        result.append(1, '-');\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpu3qnybcj: /tmp/tmpu3qnybcj.cpp:34: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  std::replace(out.begin(), out.end(), ' ', '_');\n    if (out.find_first_not_of(\"\
    \ \\t\\n\") != out.npos) {\n        while ((out.find_first_not_of(\" \\t\\n\"\
    ) != out.npos) && (out.find_first_of(\" \\t\\n\") != out.npos)) {\n          \
    \  std::replace(out.begin(), out.end(), ' ', '_');\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpshtd7_z9: /tmp/tmpshtd7_z9.cpp:25: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  // your code goes here\n  if(text.empty())\
    \ \n    return text;\n\n  if(text.size() >= 2)\n  {\n    text.insert(text.begin(),\
    \ ' ');\n    int prev = 0, start = text.size();\n    while(start > 0 && (text[start-1]\
    \ == ' ' || text[start-1] == '\\n'))\n    {\n      start--;\n      text.insert(text.begin(),\
    \ '-');\n    }\n  }\n\n  return text;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpxggwf4se: /tmp/tmpxggwf4se.cpp:30: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n   std::size_t foundSpace = std::count(text.begin(),\
    \ text.end(), ' ');\n   std::size_t prevSpace = foundSpace;\n   std::size_t nextSpace\
    \ = foundSpace;\n   while( (prevSpace != nextSpace) && (prevSpace != (std::size_t)-1)\
    \ ) {\n      std::size_t nextSpace = std::count(text.begin()+prevSpace, text.end(),\
    \ ' ');\n      text[prevSpace] = text[nextSpace];\n      text[nextSpace] = '-';\n\
    \      prevSpace = nextSpace;\n   }\n   return text;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5bceecja: /tmp/tmp5bceecja.cpp:25: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n  std::string s = text;\n  for (size_t\
    \ i = 0; i < s.size(); i++) {\n    if (s[i] != ' ') {\n      s[i] = '_';\n   \
    \ } else {\n      i = s[i];\n      while ((i < s.size() - 1) && (s[i + 1] == '\
    \ ')) {\n        s[i] = '-';\n        i += 1;\n      }\n    }\n  }\n  return s;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpxzaat2lv: /tmp/tmpxzaat2lv.cpp:27: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    \n    \n    int spaces = 0,\
    \ consecutiveSpaces = 0, newLength = 0; \n    for (int i = 0; i < text.size();\
    \ i++) { \n        if (text[i] == ' ') \n            spaces++; \n        else\
    \ \n            consecutiveSpaces++; \n        if (spaces > 2 && consecutiveSpaces\
    \ == 2) \n            newLength = i;\n        spaces = 0;\n        consecutiveSpaces\
    \ = 0;\n    } \n    \n    std::string result(text.size(), '_');\n    \n    for\
    \ (int i = 0; i < newLength; i++) { \n        result[i] = text[i];\n    }\n  \
    \  \n    return std::string(result);\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpaefjexgm: /tmp/tmpaefjexgm.cpp:35: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n\ttext = text.str();\n\tstd::replace(text.begin(),\
    \ text.end(), ' ', '_');\n\t\n\tstd::string res;\n\tsize_t pos = 0;\n\twhile (pos\
    \ < text.size()) {\n\t\tif (text[pos] == ' ')\n\t\t\tpos = text.find(' ', pos\
    \ + 1);\n\t\telse\n\t\t\tpos = text.find(' ', pos);\n\t\t\n\t\tif (pos != text.size()\
    \ - 1) {\n\t\t\tres += \"-\" + text.substr(pos);\n\t\t} else {\n\t\t\tres += text.substr(pos);\n\
    \t\t}\n\t}\n\t\n\treturn res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkaq5hwi6.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpkaq5hwi6.cpp:11:14: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018str\u2019\n\
    \   11 |  text = text.str();\n      |              ^~~\n"
  exit_code: 1
  status: SyntaxError
