name: HumanEval_145_order_by_points
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> res;\n    int len\
    \ = nums.size();\n    if(len == 0){\n        return res;\n    }\n    long l =\
    \ 0;\n    long h = 0;\n    long min = 0;\n    long max = nums[0] * nums[0];\n\
    \    for(int i = 1; i < len; i++){\n        if(nums[i] < 0){\n            if(nums[i\
    \ - 1] > 0){\n                h += nums[i - 1];\n                l = i;\n    \
    \        }\n        }\n        else{\n            l = i;\n        }\n        if(nums[i]\
    \ > max){\n            max = nums[i];\n        }\n        if(nums[i] < min){\n\
    \            min = nums[i];\n        }\n    }\n    int m = 1;\n    for(int i =\
    \ len - 1; i >= 0; i--){\n        long ans = nums[i] + nums[i - 1];\n        if(l\
    \ == i){\n            if(ans > max){\n                max = ans;\n           \
    \ }\n            if(ans < min){\n                min = ans;\n            }\n \
    \       }\n        else{\n            if(ans > max){\n                max = ans;\n\
    \                max = m;\n            }\n            if(ans < min){\n       \
    \         min = ans;\n                min = m;\n            }\n        }\n   \
    \     m += 1;\n    }\n    int cur = (max > min) ? max : min;\n    int minl = l\
    \ - 1;\n    long maxl = (l - 1) * cur;\n    long minh = h;\n    long maxh = (h\
    \ - 1) * cur;\n    while(l < len - 1){\n        if(maxl > len){\n            break;\n\
    \        }\n        long a = maxl;\n        long b = (len - 1) - l;\n        if(a\
    \ > b){\n            long tmp = a;\n            a = b;\n            b = tmp;\n\
    \        }\n        long sum = 0;\n        for(int i = 0; i < a; i++){\n     \
    \       sum += nums[l + i];\n        }\n        for(int i = l; i < b; i++){\n\
    \            sum += nums[l + i];\n        }\n        if(sum > cur){\n        \
    \    l = l + 1;\n            maxl = l;\n        }\n        else{\n           \
    \ if(sum < cur){\n                maxl = l;\n            }\n            l = l\
    \ + 1;\n            maxl = l;\n        }\n        sum = 0;\n        for(int i\
    \ = 0; i < b; i++){\n            sum += nums[l + i];\n        }\n        if(sum\
    \ > cur){\n            h = h + 1;\n            maxh = h;\n        }\n        else{\n\
    \            if(sum < cur){\n                maxh = h;\n            }\n      \
    \      h = h + 1;\n            maxh = h;\n        }\n    }\n    while(l > 0){\n\
    \        if(maxl > len){\n            break;\n        }\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_g16papb.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_g16papb.cpp:116:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  116 | int main() {\n      |     \
    \       ^\n/tmp/tmp_g16papb.cpp:124:1: error: expected \u2018}\u2019 at end of\
    \ input\n  124 | }\n      | ^\n/tmp/tmp_g16papb.cpp:10:59: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long> nums)\
    \ {\n      |                                                           ^\n/tmp/tmp_g16papb.cpp:124:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  124 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> ans;\n    for (long\
    \ &i: nums) {\n        long sum = 0;\n        while (i != 0) {\n            sum\
    \ += (i & 1) ? 9 : 1;\n            i /= 2;\n        }\n        if (sum > 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    \n    return ans;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmps_m01zs4: /tmp/tmps_m01zs4.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty())\n        return nums;\n    std::vector<long>\
    \ bigger_nums = nums;\n    // TODO: do sorting in O(n*logn) time with stable sorting\n\
    \    for (auto &i : nums) {\n        size_t sum_of_digits = 0;\n        while\
    \ ((i /= 10) != 0) {\n            sum_of_digits += i % 10;\n        }\n      \
    \  bigger_nums.erase(std::remove_if(bigger_nums.begin(),\n                   \
    \                       bigger_nums.end(),\n                                 \
    \         [sum_of_digits](long) {\n                                          \
    \    return sum_of_digits == i;\n                                          }),\n\
    \                          bigger_nums.end());\n    }\n    return bigger_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn573fa71.cpp: In lambda function:\n/tmp/tmpn573fa71.cpp:23:71:\
    \ error: \u2018i\u2019 is not captured\n   23 |                              \
    \                 return sum_of_digits == i;\n      |                        \
    \                                               ^\n/tmp/tmpn573fa71.cpp:22:57:\
    \ note: the lambda has no capture-default\n   22 |                           \
    \                [sum_of_digits](long) {\n      |                            \
    \                             ^\n/tmp/tmpn573fa71.cpp:15:16: note: \u2018long\
    \ int& i\u2019 declared here\n   15 |     for (auto &i : nums) {\n      |    \
    \            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpn573fa71.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = order_by_points(std::vector<long int>)::<lambda(long int)>]\u2019\
    :\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:869:13:\
    \   required from \u2018_ForwardIterator std::__remove_if(_ForwardIterator, _ForwardIterator,\
    \ _Predicate) [with _ForwardIterator = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _Predicate = __gnu_cxx::__ops::_Iter_pred<order_by_points(std::vector<long\
    \ int>)::<lambda(lo"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() != 0);\n    // init result\n    std::vector<long>\
    \ res(nums.size());\n    // sort nums\n    std::sort(nums.begin(), nums.end());\n\
    \    // compute sum of nums\n    long sum = 0;\n    for (long &num : nums) {\n\
    \        sum += num;\n    }\n    // sort them by their sum\n    std::sort(res.begin(),\
    \ res.end(), [sum](long a, long b) {\n        return sum - a + b < sum - a - b;\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp713jpedm: /tmp/tmp713jpedm.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    // You can use any standard sort\
    \ function\n    std::sort(nums.begin(), nums.end(), [](const long& lhs, const\
    \ long& rhs) {\n        return lhs + rhs == 0;\n    });\n    std::vector<long>\
    \ ret(std::begin(nums), std::end(nums));\n    // std::reverse(ret.begin(), ret.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp747zwxbh: /tmp/tmp747zwxbh.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // TODO: Write your code here\n    std::vector<long> order;\n \
    \   long long sum = 0;\n    long long max = 0;\n    for (long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if (sum > max){\n            max = sum;\n\
    \        }\n    }\n    for (long i = 0; i < nums.size(); i++){\n        order.push_back(-1);\n\
    \    }\n    for (long i = 0; i < nums.size(); i++){\n        sum -= nums[i];\n\
    \        if (sum == 0){\n            order[i] = nums[i];\n        }\n        if\
    \ (sum > 0){\n            order[i] = sum;\n        }\n    }\n    return order;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpf9q_3_gi: /tmp/tmpf9q_3_gi.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    auto sum = std::accumulate(nums.begin(), nums.end(), 0);\n    auto\
    \ min_sum = std::min_element(nums.begin(), nums.end(),\n        [sum](int a, int\
    \ b) { return std::abs(sum - a) < std::abs(sum - b); });\n    return std::vector<long>(nums.begin()\
    \ + min_sum, nums.end());\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpybifwfc8.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpybifwfc8.cpp:14:43: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   14 |     return std::vector<long>(nums.begin()\
    \ + min_sum, nums.end());\n      |                              ~~~~~~~~~~~~ ^\
    \ ~~~~~~~\n      |                                        |    |\n      |    \
    \                                    |    __normal_iterator<[...],[...]>\n   \
    \   |                                        __normal_iterator<[...],[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpybifwfc8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:859:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  859 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // TODO: implement the function here.\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpaqgerg56: /tmp/tmpaqgerg56.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ordered_nums = nums;\n    if (nums.empty()) {\n\
    \        return ordered_nums;\n    }\n\n    // Sort the list based on their sum.\n\
    \    std::sort(ordered_nums.begin(), ordered_nums.end(),\n              [&nums]\
    \ (long a, long b) {\n                  long s = a + b;\n                  return\
    \ s < 0 ? 1 : s == 0 ? 0 : -1;\n              });\n    // Order the list based\
    \ on the original index in the list.\n    for (size_t i = 0; i < nums.size();\
    \ i++) {\n        ordered_nums[i] = i;\n    }\n\n    return ordered_nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0o_aegwt: /tmp/tmp0o_aegwt.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy(nums);\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a<b;});\n    std::vector<long> nums_sorted\
    \ = nums_copy;\n    return nums_sorted;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpn55jr7r6: /tmp/tmpn55jr7r6.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ sorted_nums;\n    for(auto num: nums){\n        sum+=num;\n    }\n    for(auto\
    \ num: nums){\n        if(sum==0){\n            sum=num;\n        }\n        else\
    \ if(sum<num){\n            sorted_nums.push_back(std::abs(sum-num));\n      \
    \      sum=num;\n        }\n        else{\n            sorted_nums.push_back(std::abs(sum-num));\n\
    \            sum-=num;\n        }\n    }\n    return sorted_nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp64_x7ou_: /tmp/tmp64_x7ou_.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    if (nums.size() == 0)\n        return\
    \ result;\n    // Store digit sums into a map where keys are the sum of digits\
    \ of an item\n    // and values are the indices of the items in nums whose digits\
    \ sums to that key\n    std::map<long, int> sums;\n    for (int i = 0; i < nums.size();\
    \ i++)\n    {\n        int sum = 0;\n        long digits = 0;\n        while (nums[i]\
    \ > 0)\n        {\n            digits = nums[i] % 10;\n            sum += digits;\n\
    \            nums[i] /= 10;\n        }\n        auto it = sums.find(sum);\n  \
    \      if (it != sums.end())\n        {\n            result.push_back(it->second);\n\
    \        }\n        sums[sum] = i;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpn78ym8_n: /tmp/tmpn78ym8_n.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    for (auto i : nums)\
    \ {\n        sum += i;\n    }\n    long temp = sum;\n    std::vector<long> ans;\n\
    \    long index = 0;\n    while (temp != 0) {\n        ans.push_back(temp % 10);\n\
    \        temp /= 10;\n    }\n    ans.push_back(index);\n    ans.push_back(ans[1]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplmcyk76u: /tmp/tmplmcyk76u.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end());\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3a8rn2d9: /tmp/tmp3a8rn2d9.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums2;\n    nums2.reserve(nums.size());\n   \
    \ for (long i : nums) {\n        long temp = (nums2 << 1) + i;\n        long j\
    \ = 0;\n        while (temp > 0) {\n            int t = temp % 10;\n         \
    \   temp = temp / 10;\n            nums2.push_back(t - j * 10);\n            j\
    \ = j + 1;\n        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplx1iwcsc.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplx1iwcsc.cpp:14:28: error: no match for \u2018operator<<\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   14 |         long temp = (nums2 << 1) + i;\n      |                      ~~~~~\
    \ ^~ ~\n      |                      |        |\n      |                     \
    \ |        int\n      |                      std::vector<long int>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplx1iwcsc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1553:5:\
    \ note: candidate: \u2018template<class _Ch_type, class _Ch_traits, class _Bi_iter>\
    \ std::basic_ostream<_CharT, _Traits>& std::__cxx11::operator<<(std::basic_ostream<_CharT,\
    \ _Traits>&, const std::__cxx11::sub_match<_Bi_iter>&)\u2019\n 1553 |     operator<<(basic_ostream<_Ch_type,\
    \ _Ch_traits>& __os,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1553:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplx1iwcsc.cpp:14:31:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::basic_ostream<_CharT,\
    \ _Traits>\u2019\n   14 |         long temp = (nums2 << 1) + i;\n      |     \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, long> result;\n    // Write your code in here.\n\
    \    for (long i : nums) {\n        result[i] += i;\n    }\n    std::vector<long>\
    \ ans(nums.size());\n    for (auto it = result.begin(); it != result.end(); it++)\
    \ {\n        ans[it->second] = it->first;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmp5qavh0ar': free(): invalid next size (fast): 0x0000000001327d80\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2b6bd346f329]\n\
    /tmp/tmp5qavh0ar[0x403c42]\n/tmp/tmp5qavh0ar[0x403a57]\n/tmp/tmp5qavh0ar[0x4033a7]\n\
    /tmp/tmp5qavh0ar[0x402a2c]\n/tmp/tmp5qavh0ar[0x402352]\n/tmp/tmp5qavh0ar[0x401d9c]\n\
    /tmp/tmp5qavh0ar[0x401cc6]\n/tmp/tmp5qavh0ar[0x400d7c]\n/tmp/tmp5qavh0ar[0x400ef2]\n\
    /lib64/libc.so.6(__libc_start_main+0xf5)[0x2b6bd3410555]\n/tmp/tmp5qavh0ar[0x400b59]\n\
    ======= Memory map: ========\n00400000-00407000 r-xp 00000000 08:02 277751   \
    \                          /tmp/tmp5qavh0ar\n00606000-00607000 r--p 00006000 08:02\
    \ 277751                             /tmp/tmp5qavh0ar\n00607000-00608000 rw-p\
    \ 00007000 08:02 277751                             /tmp/tmp5qavh0ar\n01316000-01348000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2b6bd28d7000-2b6bd28f9000\
    \ r-xp 00000000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2b6bd28f9000-2b6bd28fc000\
    \ rw-p 00000000 00:00 0 \n2b6bd2915000-2b6bd291a000 rw-p 00000000 00:00 0 \n2b6bd2af8000-2b6bd2af9000\
    \ r--p 00021000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2b6bd2af9000-2b6bd2afa000\
    \ rw-p 00022000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2b6bd2afa000-2b6bd2afb000\
    \ rw-p 00000000 00:00 0 \n2b6bd2afb000-2b6bd2cc4000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2b6bd2cc4000-2b6bd2ec3000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b6bd2ec3000-2b6bd2ece000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b6bd2ece000-2b6bd2ed1000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b6bd2ed1000-2b6bd2ed4000 rw-p 00000000 00:00 0 \n2b6bd2ed4000-2b6bd2fd5000 r-xp\
    \ 00000000 08:01 50332722                   /usr/lib64/libm-2.17.so\n2b6bd2fd5000-2b6bd31d4000\
    \ ---p 00101000 08:01 50332722                   /usr/lib64/libm-2.17.so\n2"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code goes here\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpoyfrpib6: /tmp/tmpoyfrpib6.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    if (nums.empty()) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> sorted_nums;\n    long sum\
    \ = 0;\n    for (auto i : nums) {\n        sum += i;\n        if (sum < 0) {\n\
    \            sum *= -1;\n        }\n        sorted_nums.push_back(sum);\n    }\n\
    \    for (auto i : sorted_nums) {\n        auto j = std::find(sorted_nums.begin(),\
    \ sorted_nums.end(), i);\n        if (j == sorted_nums.end()) {\n            sorted_nums.push_back(i);\n\
    \        } else {\n            std::iter_swap(j, sorted_nums.end());\n       \
    \ }\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjqtraup7: /tmp/tmpjqtraup7.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> res(std::begin(nums),\
    \ std::end(nums));\n    res.resize(0);\n    std::vector<long> v;\n    for(int\
    \ i = 0; i < res.size(); ++i){\n        v.push_back(0);\n    }\n    for(int i\
    \ = 0; i < res.size(); ++i){\n        if(res[i] == 0){\n            for(int j\
    \ = i; j < res.size(); ++j){\n                if(res[j] > 0){\n              \
    \      for(int k = j; k < res.size(); ++k){\n                        if(res[k]\
    \ < 0){\n                            long tmp = v[k];\n                      \
    \      v[k] = v[j];\n                            v[j] = tmp;\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    for(auto i : v){\n        res.push_back(i - 0);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0cyqj4f8: /tmp/tmp0cyqj4f8.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> ordered_nums;\n\
    \    long long sum = 0;\n    for (auto num : nums) {\n        sum += num;\n  \
    \  }\n    for (auto num : nums) {\n        if (num < 0)\n            sum += num;\n\
    \        if (sum > 0) {\n            unordered_map<long long, long> map;\n   \
    \         for (auto num : nums) {\n                map[num] += 1;\n          \
    \  }\n            map[0] = 0;\n            unordered_map<long long, long>::iterator\
    \ it = map.begin();\n            while (it != map.end()) {\n                if\
    \ (it->second == 0) {\n                    ordered_nums.push_back(it->first);\n\
    \                    it++;\n                } else {\n                    unordered_map<long\
    \ long, long>::iterator tmp = it;\n                    for (it++; it != map.end()\
    \ && !(it->second == 0); it++) {\n                        if (it->second == 0)\
    \ {\n                            unordered_map<long long, long>::iterator tmp2\
    \ = it;\n                            ordered_nums.push_back(it->first);\n    \
    \                        it = tmp;\n                            break;\n     \
    \                   }\n                    }\n                    unordered_map<long\
    \ long, long>::iterator tmp2 = it;\n                    ordered_nums.push_back(it->first);\n\
    \                    it = tmp;\n                    unordered_map<long long, long>::iterator\
    \ tmp3 = it;\n                    for (; it != map.end() && !(it->second == 0);\
    \ it++) {\n                        if (it->second == 0) {\n                  \
    \          unordered_map<long long, long>::iterator tmp4 = it;\n             \
    \               ordered_nums.push_back(it->first);\n                         \
    \   it = tmp3;\n                            break;\n                        }\n\
    \                    }\n                    unordered_map<long long, long>::iterator\
    \ tmp4 = it;\n                    ordered_nums.push_back(it->first);\n       \
    \             it = tmp3;\n                    unordered_map<long long, long>::iterator\
    \ tmp5 = it;\n                    for (; it != map.end() && !(it->second == 0);\
    \ it++) {\n                        if (it->second == 0) {\n                  \
    \          unordered_map<long long, long>::iterator tmp6 = it;\n             \
    \               ordered_nums.push_back(it->first);\n                         \
    \   it = tmp5;\n                            break;\n                        }\n\
    \                    }\n                    unordered_map<long long, long>::iterator\
    \ tmp6 = it;\n                    ordered_nums.push_back(it->first);\n       \
    \             it = tmp5;\n                    unordered_map<long long, long>::iterator\
    \ tmp7 = it;\n                    for (; it != map.end() && !(it->second == 0);\
    \ it++) {\n                        if (it->second == 0) {\n                  \
    \          unordered_map<long long, long>::iterator tmp8 = it;\n             \
    \               ordered_nums.push_back(it->first);\n\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qh3nai1.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3qh3nai1.cpp:21:13: error: \u2018unordered_map\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_map\u2019?\n \
    \  21 |             unordered_map<long long, long> map;\n      |             ^~~~~~~~~~~~~\n\
    \      |             std::unordered_map\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp3qh3nai1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:102:11:\
    \ note: \u2018std::unordered_map\u2019 declared here\n  102 |     class unordered_map\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp3qh3nai1.cpp:21:27: error: expected\
    \ primary-expression before \u2018long\u2019\n   21 |             unordered_map<long\
    \ long, long> map;\n      |                           ^~~~\n/tmp/tmp3qh3nai1.cpp:23:17:\
    \ error: \u2018map\u2019 was not declared in this scope; did you mean \u2018std::map\u2019\
    ?\n   23 |                 map[num] += 1;\n      |                 ^~~\n     \
    \ |                 std::map\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp3qh3nai1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:100:11:\
    \ note: \u2018std::map\u2019 declared here\n  100 |     class map\n      |   \
    \        ^~~\n/tmp/tmp3qh3nai1.cpp:25:13: error: \u2018map\u2019 was not declared\
    \ in this scope; did you mean \u2018std::map\u2019?\n   25 |             map[0]\
    \ = 0;\n      |             ^~~\n      |             std::map\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n         \
    \        from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp3qh3nai1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:100:11:\
    \ note: \u2018s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    std::vector<long> ret(std::begin(nums), std::end(nums));\n\
    \    // std::accumulate and std::sort are C++11, so use std::for_each instead.\n\
    \    std::for_each(std::begin(nums), std::end(nums), std::[&](const long &item)\
    \ {\n        sum += item;\n        ret[sum % 10] = item;\n    });\n    std::for_each(std::begin(ret),\
    \ std::end(ret), [](const long &item) {\n        // If item was already in reverse\
    \ order, delete it.\n        if (std::find(std::begin(ret), std::end(ret), item)\
    \ != std::end(ret)) {\n            ret.erase(std::find(std::begin(ret), std::end(ret),\
    \ item));\n        }\n    });\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25jy3ntq.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp25jy3ntq.cpp:14:58: error: expected unqualified-id before\
    \ \u2018[\u2019 token\n   14 |     std::for_each(std::begin(nums), std::end(nums),\
    \ std::[&](const long &item) {\n      |                                      \
    \                    ^\n/tmp/tmp25jy3ntq.cpp:14:60: error: expected primary-expression\
    \ before \u2018]\u2019 token\n   14 |     std::for_each(std::begin(nums), std::end(nums),\
    \ std::[&](const long &item) {\n      |                                      \
    \                      ^\n/tmp/tmp25jy3ntq.cpp:14:62: error: expected primary-expression\
    \ before \u2018const\u2019\n   14 |     std::for_each(std::begin(nums), std::end(nums),\
    \ std::[&](const long &item) {\n      |                                      \
    \                        ^~~~~\n/tmp/tmp25jy3ntq.cpp: In lambda function:\n/tmp/tmp25jy3ntq.cpp:20:34:\
    \ error: \u2018ret\u2019 is not captured\n   20 |         if (std::find(std::begin(ret),\
    \ std::end(ret), item) != std::end(ret)) {\n      |                          \
    \        ^~~\n/tmp/tmp25jy3ntq.cpp:18:52: note: the lambda has no capture-default\n\
    \   18 |     std::for_each(std::begin(ret), std::end(ret), [](const long &item)\
    \ {\n      |                                                    ^\n/tmp/tmp25jy3ntq.cpp:12:23:\
    \ note: \u2018std::vector<long int> ret\u2019 declared here\n   12 |     std::vector<long>\
    \ ret(std::begin(nums), std::end(nums));\n      |                       ^~~\n\
    /tmp/tmp25jy3ntq.cpp:20:49: error: \u2018ret\u2019 is not captured\n   20 |  \
    \       if (std::find(std::begin(ret), std::end(ret), item) != std::end(ret))\
    \ {\n      |                                                 ^~~\n/tmp/tmp25jy3ntq.cpp:18:52:\
    \ note: the lambda has no capture-default\n   18 |     std::for_each(std::begin(ret),\
    \ std::end(ret), [](const long &item) {\n      |                             \
    \                       ^\n/tmp/tmp25jy3ntq.cpp:12:23: note: \u2018std::vector<long\
    \ int> ret\u2019 declared here\n   12 |     std::vector<long> ret(std::begin(nums),\
    \ std::end(nums));\n      |                       ^~~\n/tmp/tmp25jy3ntq.cpp:20"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> rev_nums;\n    std::map<long, int> digit_map;\n\
    \    rev_nums.push_back(0); // Add zero to the front\n    for (long num : nums)\
    \ {\n        int digit = get_digit(num, digit_map);\n        int index = rev_nums.size()\
    \ - 1;\n        while (index >= 0 && rev_nums[index] > num) {\n            --index;\n\
    \        }\n        rev_nums.insert(rev_nums.begin() + index, num);\n    }\n \
    \   return rev_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw50ktkh4.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw50ktkh4.cpp:15:21: error: \u2018get_digit\u2019 was not\
    \ declared in this scope\n   15 |         int digit = get_digit(num, digit_map);\n\
    \      |                     ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0, tmp = 0;\n    \n   \
    \ for(long n : nums){\n        sum += n;\n    }\n\n    std::vector<long> res;\n\
    \    res.push_back(sum);\n    \n    long cur = sum;\n    \n    for(int i = nums.size()\
    \ - 1; i >= 0; i--){\n        tmp = nums[i];\n        nums[i] = nums[cur];\n \
    \       nums[cur] = tmp;\n        cur += sum;\n        res.push_back(cur);\n \
    \   }\n    \n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_ulmnyfp: /tmp/tmp_ulmnyfp.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if(nums.empty()) return nums;\n    \n    long long s = nums.front();\n\
    \    for(auto i = nums.begin(); i != nums.end(); ++i) {\n        auto sum = (*i)\
    \ + s;\n        if(sum < 0) sum = (sum + 10) * -1;\n        \n        if(s ==\
    \ sum) {\n            std::iter_swap(i, nums.begin());\n        }\n    }\n   \
    \ \n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxx4zjk80: /tmp/tmpxx4zjk80.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> sorted(nums.size());\n\
    \    long sum = 0;\n    for (long &num : nums) {\n        sum += num;\n    }\n\
    \    for (long &num : nums) {\n        long pos = std::distance(std::begin(nums),\
    \ std::find_if(std::begin(nums), std::end(nums),\n            [](long &n){return\
    \ sum != 0 && sum == n;}));\n        sorted[pos] = num;\n        sum -= num;\n\
    \    }\n    return sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcdq85lef.cpp: In lambda function:\n/tmp/tmpcdq85lef.cpp:19:32:\
    \ error: \u2018sum\u2019 is not captured\n   19 |             [](long &n){return\
    \ sum != 0 && sum == n;}));\n      |                                ^~~\n/tmp/tmpcdq85lef.cpp:19:14:\
    \ note: the lambda has no capture-default\n   19 |             [](long &n){return\
    \ sum != 0 && sum == n;}));\n      |              ^\n/tmp/tmpcdq85lef.cpp:13:10:\
    \ note: \u2018long int sum\u2019 declared here\n   13 |     long sum = 0;\n  \
    \    |          ^~~\n/tmp/tmpcdq85lef.cpp:19:44: error: \u2018sum\u2019 is not\
    \ captured\n   19 |             [](long &n){return sum != 0 && sum == n;}));\n\
    \      |                                            ^~~\n/tmp/tmpcdq85lef.cpp:19:14:\
    \ note: the lambda has no capture-default\n   19 |             [](long &n){return\
    \ sum != 0 && sum == n;}));\n      |              ^\n/tmp/tmpcdq85lef.cpp:13:10:\
    \ note: \u2018long int sum\u2019 declared here\n   13 |     long sum = 0;\n  \
    \    |          ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcdq85lef.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = order_by_points(std::vector<long int>)::<lambda(long int&)>]\u2019\
    :\n/shared/centos7/gcc/9.2.0-sk"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    auto comp = [](const long& a, const long& b) { return (a + b) <\
    \ 0; };\n    auto res = std::stable_partition(nums.begin(), nums.end(), comp);\n\
    \    std::vector<long> sorted;\n    for (long i = 0, j = 1; i < nums.size(); i++)\
    \ {\n        while (nums[i] > nums[j]) {\n            sorted.push_back(nums[i]);\n\
    \            i++;\n        }\n        sorted.push_back(nums[j]);\n        j++;\n\
    \    }\n    return sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi44jgkrp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = order_by_points(std::vector<long int>)::<lambda(const long int&,\
    \ const long int&)>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1570:16:\
    \   required from \u2018_ForwardIterator std::__stable_partition_adaptive(_ForwardIterator,\
    \ _ForwardIterator, _Predicate, _Distance, _Pointer, _Distance) [with _ForwardIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Pointer\
    \ = long int*; _Predicate = __gnu_cxx::__ops::_Iter_pred<order_by_points(std::vector<long\
    \ int>)::<lambda(const long int&, const long int&)> >; _Distance = long int]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1625:34:\
    \   required from \u2018_ForwardIterator std::__stable_partition(_ForwardIterator,\
    \ _ForwardIterator, _Predicate) [with _ForwardIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Predicate = __gnu_cxx::__ops::_Iter_pred<order_by_points(std::vector<long\
    \ int>)::<lambda(const long int&, const long int&)> >]\u2019\n/shared/centos7/gcc/9.2.0-skylak"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long maxSum = 0;\n    int maxSumIndex = 0;\n    int i = 0;\n    for (i =\
    \ 0; i < nums.size(); i++) {\n        long currentSum = nums[i] + nums[i + 1];\n\
    \        if (maxSum < currentSum) {\n            maxSum = currentSum;\n      \
    \      maxSumIndex = i;\n        }\n        numsSorted[i] = nums[i];\n    }\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        sum +=\
    \ numsSorted[i];\n        if (sum > 0) {\n            numsSorted[maxSumIndex]\
    \ = numsSorted[i];\n            numsSorted[maxSumIndex + 1] = 0;\n        }\n\
    \    }\n    for (int i = 0; i < numsSorted.size(); i++) {\n        numsSorted[i]\
    \ = numsSorted[i] / 10;\n    }\n    return numsSorted;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpha2qgzbw: /tmp/tmpha2qgzbw.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret(nums.size());\n    for(size_t i = 0; i !=\
    \ ret.size(); ++i)\n        ret[i] = 0;\n    for(size_t i = 0; i != nums.size();\
    \ ++i) {\n        size_t index = 0;\n        long digit = nums[i];\n        for(;\
    \ index != ret.size() && digit < ret[index]; ++index)\n            ret[index +\
    \ 1] = ret[index];\n        ret[index + 1] = digit;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_p36f0n0: /tmp/tmp_p36f0n0.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty())\n        return nums;\n    std::vector<long>\
    \ res(nums.size());\n    long prev_sum = 0;\n    long curr = nums[0];\n    long\
    \ i;\n    long j;\n    for (i = 1; i < nums.size(); i++) {\n        long curr_sum\
    \ = curr + nums[i];\n        if (curr_sum > prev_sum) {\n            res[i - 1]\
    \ = curr - nums[i];\n            prev_sum = curr_sum;\n        } else {\n    \
    \        res[i - 1] = curr - prev_sum;\n            prev_sum = curr_sum;\n   \
    \     }\n        curr = nums[i];\n    }\n    res[nums.size() - 1] = prev_sum;\n\
    \    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6gb8j710: /tmp/tmp6gb8j710.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tif (nums.empty()) return nums;\n\tstd::vector<long> sorted_nums;\n\
    \tlong digit = 0;\n\tfor (auto num: nums) {\n\t\tdigit = 0;\n\t\tfor (auto c:\
    \ num) {\n\t\t\tdigit *= 10;\n\t\t\tdigit += c;\n\t\t}\n\t\tsorted_nums.push_back(digit);\n\
    \t}\n\tstd::sort(sorted_nums.begin(), sorted_nums.end());\n\treturn sorted_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyygkwesn.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyygkwesn.cpp:16:16: error: \u2018begin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::begin\u2019?\n   16 |   for (auto c:\
    \ num) {\n      |                ^~~\n      |                std::begin\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyygkwesn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmpyygkwesn.cpp:16:16: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   16 |\
    \   for (auto c: num) {\n      |                ^~~\n      |                std::end\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyygkwesn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    int res = 0;\n    for (const auto\
    \ i : nums) {\n        res += i;\n    }\n    std::vector<long> res;\n    for (std::size_t\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) continue;\n      \
    \  for (std::size_t j = i + 1; j < nums.size(); j++) {\n            if (nums[i]\
    \ + nums[j] <= res && res - nums[i] + nums[j] <= res)\n                std::swap(nums[i],\
    \ nums[j]);\n        }\n        res.push_back(nums[i]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpph_oo3wu.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpph_oo3wu.cpp:16:23: error: conflicting declaration \u2018\
    std::vector<long int> res\u2019\n   16 |     std::vector<long> res;\n      | \
    \                      ^~~\n/tmp/tmpph_oo3wu.cpp:12:9: note: previous declaration\
    \ as \u2018int res\u2019\n   12 |     int res = 0;\n      |         ^~~\n/tmp/tmpph_oo3wu.cpp:23:13:\
    \ error: request for member \u2018push_back\u2019 in \u2018res\u2019, which is\
    \ of non-class type \u2018int\u2019\n   23 |         res.push_back(nums[i]);\n\
    \      |             ^~~~~~~~~\n/tmp/tmpph_oo3wu.cpp:25:12: error: could not convert\
    \ \u2018res\u2019 from \u2018int\u2019 to \u2018std::vector<long int>\u2019\n\
    \   25 |     return res;\n      |            ^~~\n      |            |\n     \
    \ |            int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    // Write your code here\n    std::sort(nums.begin(),\
    \ nums.end(), [] (int a, int b) {\n        return std::fmod(a, b) + a < b;\n \
    \   });\n    int sum = std::accumulate(nums.begin(), nums.end(), 0);\n    for\
    \ (long num: nums) {\n        int index = sum % 10;\n        sum -= index;\n \
    \       if (index > 0) {\n            result.push_back(index);\n            sum\
    \ = std::fmod(sum, 10);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5rw9glli: /tmp/tmp5rw9glli.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) return nums;\n    long sum_of_digits = nums[0]\
    \ + nums[0] + nums[0] + nums[0] + nums[0];\n    std::vector<long> sorted_nums;\n\
    \    for (auto &item : nums) {\n        long cur_sum_of_digits = sum_of_digits\
    \ + item;\n        if (cur_sum_of_digits > sum_of_digits) {\n            sorted_nums.push_back(item);\n\
    \            sum_of_digits = cur_sum_of_digits;\n        } else {\n          \
    \  while (cur_sum_of_digits > sum_of_digits) {\n                sum_of_digits\
    \ += nums[sorted_nums.size() - 1];\n                sorted_nums.push_back(nums[sorted_nums.size()\
    \ - 1]);\n            }\n            sum_of_digits -= item;\n            sorted_nums.push_back(item);\n\
    \        }\n    }\n    return sorted_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpoxen8rns: /tmp/tmpoxen8rns.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> tmp;\n    long sum = 0;\n    // TODO: replace\
    \ this loop with std::max_element\n    for (long num : nums) {\n        sum +=\
    \ num;\n        tmp.push_back(sum);\n    }\n\n    // Sort by first element\n \
    \   std::sort(tmp.begin(), tmp.end());\n    // Sort by second element\n    std::sort(tmp.begin(),\
    \ tmp.end(), [](long a, long b) { return a > b; });\n    // Sort by sum\n    std::sort(tmp.begin(),\
    \ tmp.end(), [](long a, long b) { return a + b; });\n    return tmp;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxv_9zhmv: /tmp/tmpxv_9zhmv.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    long s = 0;\n    for(long n; nums.size();\
    \ nums.pop_back(), n++) {\n        s += nums.back();\n        res.push_back(n);\n\
    \    }\n    if(s != 0) {\n        res.push_back(s);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4dz6tt93: /tmp/tmp4dz6tt93.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    for (auto i : nums) {\n        int\
    \ sum = (int) i;\n        for (int n = sum; n > 0; n--) {\n            sum -=\
    \ n % 10;\n        }\n        ans.push_back(sum);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp54ongqyo: /tmp/tmp54ongqyo.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Write your code here.\n  long sum = 0;\n  std::vector<long> res;\n\
    \  for (long i : nums) {\n    if (i == -1)\n      continue;\n    if (sum + i >\
    \ sum) {\n      res.push_back(i);\n      sum = i;\n    } else {\n      sum +=\
    \ i;\n    }\n  }\n  res.push_back(sum);\n  return res;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpui2yx8lz: /tmp/tmpui2yx8lz.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res(std::begin(nums), std::end(nums));\n    for\
    \ (size_t i = 0; i < res.size(); ++i) {\n        long sum = 0;\n        for (size_t\
    \ j = 0; j < res.size(); ++j) {\n            if (i != j) {\n                sum\
    \ += nums[j];\n            }\n        }\n        if (sum > 0) {\n            std::swap(res[i],\
    \ res[sum]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgu6iy1c9: /tmp/tmpgu6iy1c9.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, std::vector<long> > di;\n    for (long i = 0; i\
    \ != nums.size(); i++) {\n        if (di.find(nums[i]) == di.end()) {\n      \
    \      std::vector<long> vec;\n            vec.push_back(nums[i]);\n         \
    \   di.insert(std::make_pair(nums[i], vec));\n        } else {\n            di[nums[i]].push_back(nums[i]);\n\
    \        }\n    }\n    std::vector<long> ans;\n    for (auto &kv : di) {\n   \
    \     ans.push_back(kv.first);\n    }\n    std::sort(ans.begin(), ans.end(), [&di](int\
    \ l, int r) {\n        std::vector<long> lefts = di.at(l);\n        std::vector<long>\
    \ rights = di.at(r);\n        std::vector<long> left_sum = 0;\n        std::vector<long>\
    \ right_sum = 0;\n        for (long i : lefts) {\n            left_sum += i;\n\
    \        }\n        for (long i : rights) {\n            right_sum += i;\n   \
    \     }\n        if (left_sum == right_sum) {\n            return std::abs(l -\
    \ r);\n        } else {\n            return left_sum > right_sum;\n        }\n\
    \    });\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp585bc8q4.cpp: In lambda function:\n/tmp/tmp585bc8q4.cpp:28:38:\
    \ error: conversion from \u2018int\u2019 to non-scalar type \u2018std::vector<long\
    \ int>\u2019 requested\n   28 |         std::vector<long> left_sum = 0;\n    \
    \  |                                      ^\n/tmp/tmp585bc8q4.cpp:29:39: error:\
    \ conversion from \u2018int\u2019 to non-scalar type \u2018std::vector<long int>\u2019\
    \ requested\n   29 |         std::vector<long> right_sum = 0;\n      |       \
    \                                ^\n/tmp/tmp585bc8q4.cpp:31:22: error: no match\
    \ for \u2018operator+=\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   31 |             left_sum += i;\n      |     \
    \        ~~~~~~~~~^~~~\n/tmp/tmp585bc8q4.cpp:34:23: error: no match for \u2018\
    operator+=\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    long int\u2019)\n   34 |             right_sum += i;\n      |             ~~~~~~~~~~^~~~\n\
    /tmp/tmp585bc8q4.cpp:39:31: error: inconsistent types \u2018int\u2019 and \u2018\
    bool\u2019 deduced for lambda return type\n   39 |             return left_sum\
    \ > right_sum;\n      |                               ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // code here\n    std::vector<long> v;\n    v.assign( nums.begin(),\
    \ nums.end() );\n    std::sort(v.begin(), v.end(), [](long a, long b) {\n    \
    \    long sum = 0;\n        long d = 1;\n        while (a || b) {\n          \
    \  long tmp = a;\n            a = b;\n            b = tmp;\n            sum +=\
    \ d;\n            d *= 10;\n        }\n        return sum < 0;\n    });\n    return\
    \ v;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // code here\n    if(nums.size() == 0)\n        return nums;\n\
    \    long sum = 0;\n    for(long i : nums)\n        sum += i;\n    std::vector<long>\
    \ result;\n    for(long i : nums)\n    {\n        int index = sum % 10;\n    \
    \    if(index != 0)\n        {\n            sum += index * i;\n            result.push_back(nums[index]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdzml7cwx: /tmp/tmpdzml7cwx.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// write your code here\n\tlong long int sum = 0;\n\tfor (int i =\
    \ 0; i < nums.size(); i++) {\n\t\tsum += nums[i];\n\t}\n\tstd::vector<long> sorted_nums;\n\
    \tint i = 0;\n\twhile (i < nums.size()) {\n\t\tif (sum == nums[i]) {\n\t\t\tsorted_nums.push_back(nums[i]);\n\
    \t\t\ti++;\n\t\t} else if (sum > nums[i]) {\n\t\t\tstd::swap(nums[i], nums[nums.size()-1]);\n\
    \t\t\tstd::swap(nums[i], nums[nums.size()-1]);\n\t\t\tnums[nums.size()-1] = nums[nums.size()-1]\
    \ + nums[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tsorted_nums.push_back(nums[i]);\n\
    \t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn sorted_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqsjqdidh: /tmp/tmpqsjqdidh.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\tlong sum = 0;\n\tstd::vector<long> sorted_nums;\n\tfor (long &n :\
    \ nums) {\n\t\tsum += n;\n\t\tsorted_nums.push_back(n);\n\t}\n\tstd::sort(sorted_nums.begin(),\
    \ sorted_nums.end(),\n\t\t\t[sum] (long a, long b) {\n\t\t\t\treturn a - b > 0;\n\
    \t\t\t});\n\tstd::vector<long> res;\n\tfor (long &n : sorted_nums) {\n\t\tres.push_back(n);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3lwk3iul: /tmp/tmp3lwk3iul.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// Sort nums in ascending order\n\tstd::stable_sort(nums.begin(),\
    \ nums.end());\n\t// Store sorted nums into another vector.\n\tstd::vector<long>\
    \ sorted_nums(nums.begin(), nums.end());\n\n\t// Store index for each nums.\n\t\
    std::vector<int> sorted_indexs(nums.size(), 0);\n\n\t// Store the sum of the sorted\
    \ nums.\n\tstd::vector<long> sums(nums.size(), 0);\n\n\t// Iterate through the\
    \ nums\n\tfor (int num : sorted_nums) {\n\t\t// Store sum for each num\n\t\tsums[num]\
    \ += num;\n\t\t// Store index in sorted_indexs\n\t\tsorted_indexs[num] = sorted_indexs[num]\
    \ + 1;\n\t}\n\n\t// Store sorted sums into another vector\n\tstd::vector<long>\
    \ sorted_sums(sums.begin(), sums.end());\n\t// Sort the sums\n\tstd::stable_sort(sorted_sums.begin(),\
    \ sorted_sums.end());\n\n\t// Return the sorted nums\n\treturn sorted_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmp6uvnnyrw': double free or corruption (out): 0x0000000001ecacb0\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2ba46fa79329]\n\
    /tmp/tmp6uvnnyrw[0x404742]\n/tmp/tmp6uvnnyrw[0x403a4a]\n/tmp/tmp6uvnnyrw[0x402efa]\n\
    /tmp/tmp6uvnnyrw[0x4025a2]\n/tmp/tmp6uvnnyrw[0x401fb1]\n/tmp/tmp6uvnnyrw[0x400dc7]\n\
    /tmp/tmp6uvnnyrw[0x400fa6]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2ba46fa1a555]\n\
    /tmp/tmp6uvnnyrw[0x400a89]\n======= Memory map: ========\n00400000-00409000 r-xp\
    \ 00000000 08:02 50398                              /tmp/tmp6uvnnyrw\n00608000-00609000\
    \ r--p 00008000 08:02 50398                              /tmp/tmp6uvnnyrw\n00609000-0060a000\
    \ rw-p 00009000 08:02 50398                              /tmp/tmp6uvnnyrw\n01eb9000-01eeb000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2ba46eee1000-2ba46ef03000\
    \ r-xp 00000000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2ba46ef03000-2ba46ef06000\
    \ rw-p 00000000 00:00 0 \n2ba46ef1f000-2ba46ef24000 rw-p 00000000 00:00 0 \n2ba46f102000-2ba46f103000\
    \ r--p 00021000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2ba46f103000-2ba46f104000\
    \ rw-p 00022000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2ba46f104000-2ba46f105000\
    \ rw-p 00000000 00:00 0 \n2ba46f105000-2ba46f2ce000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2ba46f2ce000-2ba46f4cd000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ba46f4cd000-2ba46f4d8000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ba46f4d8000-2ba46f4db000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ba46f4db000-2ba46f4de000 rw-p 00000000 00:00 0 \n2ba46f4de000-2ba46f5df000 r-xp\
    \ 00000000 08:01 50332722                   /usr/lib64/libm-2.17.so\n2ba46f5df000-2ba46f7de000\
    \ ---p 00101000 08:01 50332722                   /usr/lib64/libm-2.17.so\n2ba46f7de000-2ba46f7df000\
    \ r--p 00100000 08:01 50332722  "
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    long sum = 0;\n    long largest =\
    \ nums[0];\n    for (long num : nums) {\n        sum += num;\n        if (sum\
    \ > largest) {\n            largest = sum;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(0);\n    result.push_back(-1);\n    for (long\
    \ i : nums) {\n        if (i == 0) {\n            result.push_back(i);\n     \
    \       continue;\n        }\n        if (sum - i == largest) {\n            result.push_back(i);\n\
    \            result.push_back(-1);\n            continue;\n        }\n       \
    \ if ((sum - i) > largest) {\n            result.push_back(-1);\n            result.push_back(i);\n\
    \        }\n    }\n    return std::move(result);\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphpkr3avc: /tmp/tmphpkr3avc.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int N = nums.size();\n    std::vector<long> ordered_nums(N);\n\
    \    int digit_sum = 0;\n    for (long &n : ordered_nums) {\n        n = nums.size();\n\
    \        digit_sum += nums[n - 1];\n    }\n    int sum = 0;\n    for (int i =\
    \ 0; i < N; i++) {\n        int index = abs(nums[i] - digit_sum);\n        int\
    \ pos = i;\n        while (index != 0) {\n            sum = (sum * 10) + (nums[pos]\
    \ - '0');\n            pos--;\n            index--;\n        }\n        ordered_nums[pos]\
    \ = sum;\n    }\n    return ordered_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpykdm1c25: /tmp/tmpykdm1c25.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty())\n        return std::vector<long>();\n    std::vector<int>\
    \ preSum(101, -1);\n    for (long n: nums)\n        preSum[n] += n;\n    int ans\
    \ = preSum[0];\n    for (int i = 1; i < 10; ++i)\n        ans = max(ans, preSum[i]);\n\
    \    std::vector<long> ansList;\n    for (long n: nums)\n        ansList[n] =\
    \ ans;\n    std::sort(ansList.begin(), ansList.end(), [](int x, int y) {\n   \
    \     if (x < y)\n            return true;\n        if (x > y)\n            return\
    \ false;\n        return x < y;\n    });\n    for (long n : nums)\n        ans\
    \ = max(ans, ansList[n]);\n    return ansList;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1arytcpw.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1arytcpw.cpp:18:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   18 |         ans = max(ans,\
    \ preSum[i]);\n      |               ^~~\n      |               std::max\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1arytcpw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp1arytcpw.cpp:30:15: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   30 |         ans = max(ans, ansList[n]);\n      |               ^~~\n    \
    \  |               std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1arytcpw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code goes here\n    std::vector<long> res;\n    for (auto\
    \ i = nums.begin(); i != nums.end(); i++) {\n        int val = *i;\n        long\
    \ sum = 0;\n        while (val != 0) {\n            sum += val & 1;\n        \
    \    val >>= 1;\n        }\n        if (sum != 0) res.push_back(*i);\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), std::greater<long>());\n  \
    \  std::vector<long> result;\n    for (size_t i = 0; i < nums.size(); i++) {\n\
    \        if (i > 0 && nums[i] == nums[i - 1]) {\n            result.push_back(nums[i]);\n\
    \        } else {\n            result.push_back(nums[i]);\n            result.push_back(std::abs(nums[i]\
    \ - nums[i - 1]));\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpcs_4v9zr: /tmp/tmpcs_4v9zr.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if(nums.empty()) {\n        return nums;\n    }\n    // Get the\
    \ current sum\n    long cur_sum = 0;\n    for(auto item : nums) {\n        cur_sum\
    \ += item;\n    }\n    // Create a map of digits to sums, to store the sum index\n\
    \    typedef std::unordered_map<long, int> DigitsToSumMap;\n    DigitsToSumMap\
    \ digit_sums;\n    // Initialize the map with 0\n    for(auto item : nums) {\n\
    \        digit_sums[item] = 0;\n    }\n    // Calculate the sum of digits\n  \
    \  for(auto item : nums) {\n        digit_sums[item] += 1;\n    }\n    // Sort\
    \ the index\n    std::sort(nums.begin(), nums.end(), [&](auto l, auto r){return\
    \ digit_sums[l] < digit_sums[r]; });\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpn8ywip1r: /tmp/tmpn8ywip1r.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    int sum = 0;\n    for(long i=0; i<\
    \ nums.size(); i++){\n        sum+=nums[i];\n    }\n    std::vector<long> v;\n\
    \    for(long i = 0; i<nums.size(); i++){\n        int d = nums[i] - sum;\n  \
    \      v.push_back(d);\n    }\n    std::sort(v.begin(), v.end());\n    return\
    \ v;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0a9ambfe: /tmp/tmp0a9ambfe.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // O(n) time, O(1) space solution\n    std::vector<long> ordered;\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n        sum +=\
    \ nums[i];\n        ordered.push_back(sum % 10);\n        sum = (sum / 10) % 10;\n\
    \    }\n    if (ordered.size() == 0) {\n        return ordered;\n    }\n    std::sort(ordered.begin(),\
    \ ordered.end());\n    return ordered;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphrmtnzxy: /tmp/tmphrmtnzxy.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if(nums.empty())\n    {\n        return nums;\n    }\n    int n\
    \ = nums.size();\n    int ans = nums[0];\n    long sum = 0;\n    int index = 0;\n\
    \    for(int i = 1; i < n; i++)\n    {\n        index = nums[i]%10;\n        if(index\
    \ < 0)\n            index = index*-1;\n        sum += index;\n        if(sum <\
    \ ans)\n            ans = sum;\n    }\n    std::vector<long> ans_list;\n    while(index\
    \ > 0)\n    {\n        ans_list.push_back(ans);\n        index = index/10;\n \
    \       ans = ans*10 + index;\n    }\n    return ans_list;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvmmw7753: /tmp/tmpvmmw7753.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  long long sum = 0;\n  for (const auto num : nums) {\n    sum += num;\n\
    \  }\n\n  std::vector<long> result;\n  result.push_back(0);\n  for (auto i = 0;\
    \ i < nums.size(); i++) {\n    if (nums[i] > 0) {\n      result.push_back(0);\n\
    \      continue;\n    }\n    // std::cout << nums[i] << \" \" << sum << \"\\n\"\
    ;\n    // assert(nums[i] <= sum);\n    for (auto j = sum; nums[i] > 0; j--) {\n\
    \      assert(j < sum);\n      result.push_back(nums[i] + j);\n      break;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpofxcigny: /tmp/tmpofxcigny.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n    \
    \    sum += nums[i];\n        result.push_back(sum);\n    }\n    // Sort the list\
    \ by the sum of their digits\n    std::sort(result.begin(), result.end(), [](long\
    \ a, long b){\n        return a < b;\n    });\n\n    // Sort them by the order\
    \ of their position in the original list\n    std::vector<long> sorted_by_points;\n\
    \    for (auto it : result) {\n        std::size_t i = std::distance(result.begin(),\
    \ std::find(result.begin(), result.end(), it));\n        sorted_by_points.push_back(std::move(nums[i]));\n\
    \    }\n    return sorted_by_points;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphryqrozv: /tmp/tmphryqrozv.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::map<long, long> m;\n  for (auto i : nums) {\n    m[i]+=i;\n\
    \  }\n  \n  long order = 1;\n  for (auto &pair : m) {\n    pair.second = pair.second%10\
    \ + order;\n    order *= 10;\n  }\n  \n  return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpd6c4iajn: /tmp/tmpd6c4iajn.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n\t// Your code here\n\tstd::sort(nums.begin(), nums.end(), [](const\
    \ long &a, const long &b) {\n\t\treturn a<b;\n\t});\n\tstd::reverse(nums.begin(),\
    \ nums.end());\n\treturn nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr72gb2_l: /tmp/tmpr72gb2_l.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long max_sum = 0;\n    for (long &i\
    \ : nums) {\n        long s = i;\n        for (long d = 0; d < 10; d++) {\n  \
    \          s += nums[nums.size()-d-1]/pow(10, d);\n        }\n        if (s >\
    \ max_sum) {\n            max_sum = s;\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end(), [max_sum](long a, long b){return a>b; });\n    return nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpaj6bgagy: /tmp/tmpaj6bgagy.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sorted_nums;\n    long temp_sum = 0;\n    for\
    \ (long i : nums) {\n        temp_sum += i;\n        sorted_nums.push_back(temp_sum);\n\
    \    }\n    std::sort(sorted_nums.begin(), sorted_nums.end(), [](long a, long\
    \ b) -> bool {\n        return a < b;\n    });\n    return sorted_nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp95jpwjtw: /tmp/tmp95jpwjtw.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> order;\n    long long sum_digits(long long n)\
    \ {\n        long long sum = 0;\n        while (n) {\n            sum += n % 10;\n\
    \            n = n / 10;\n        }\n        return sum;\n    }\n    for (const\
    \ auto &num : nums) {\n        long long sum_of_digits = sum_digits(num);\n  \
    \      long long position = 0;\n        for (long long i = 0; i <= sum_of_digits;\
    \ i++, position++) {\n            long long next_position = position + 1;\n  \
    \          if (next_position > order.size()) {\n                order.push_back(position);\n\
    \            } else {\n                long long current_sum = 0;\n          \
    \      while (next_position > 0) {\n                    current_sum += order[next_position\
    \ - 1];\n                    next_position--;\n                }\n           \
    \     if (next_position == 0) {\n                    if (sum_of_digits > current_sum)\
    \ {\n                        order.push_back(position);\n                    }\n\
    \                } else {\n                    while (sum_of_digits > current_sum)\
    \ {\n                        long long temp = order[next_position];\n        \
    \                order[next_position] = position;\n                        position\
    \ = next_position;\n                        next_position = temp;\n          \
    \          }\n                }\n            }\n        }\n    }\n    return order;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1lm281c0.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1lm281c0.cpp:12:39: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   12 |     long long sum_digits(long\
    \ long n) {\n      |                                       ^\n/tmp/tmp1lm281c0.cpp:21:35:\
    \ error: \u2018sum_digits\u2019 was not declared in this scope; did you mean \u2018\
    sum_of_digits\u2019?\n   21 |         long long sum_of_digits = sum_digits(num);\n\
    \      |                                   ^~~~~~~~~~\n      |               \
    \                    sum_of_digits\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ordered;\n    // Sort the list in ascending order\
    \ by sum of their digits.\n    std::sort(nums.begin(), nums.end(), [&](int a,\
    \ int b) {\n        int ca = str(a);\n        int cb = str(b);\n        return\
    \ ca < cb ? -1 : ca > cb ? 1 : 0;\n    });\n    // Sort the list by their index\
    \ in original list.\n    std::transform(nums.begin(), nums.end(), std::back_inserter(ordered),\n\
    \                   [&](int n) { return std::find(ordered.begin(), ordered.end(),\
    \ n)->first; });\n    return ordered;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zqjdxfx.cpp: In lambda function:\n/tmp/tmp5zqjdxfx.cpp:14:18:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   14 |         int ca = str(a);\n      |                  ^~~\n      |   \
    \               std\n/tmp/tmp5zqjdxfx.cpp: In lambda function:\n/tmp/tmp5zqjdxfx.cpp:20:86:\
    \ error: request for member \u2018first\u2019 in \u2018* std::find<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, int>((& ordered)->std::vector<long int>::begin(),\
    \ (& ordered)->std::vector<long int>::end(), n).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   20 |                    [&](int n) { return std::find(ordered.begin(),\
    \ ordered.end(), n)->first; });\n      |                                     \
    \                                                 ^~~~~\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5zqjdxfx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation)\
    \ [with _IIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::back_insert_iterator<std::vector<long int> >; _UnaryOperation\
    \ = order_by_points(std::vector<long int>)::<lambda(int)>]\u2019:\n/tmp/tmp5zqjdxfx.cpp:20:94:\
    \   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4298:12:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::back_insert_iterator<std::vector<long\
    \ int> >\u2019 and \u2018void\u2019)\n 4298 |  *__result = __unary_op(*__first);\n\
    \      |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int n = nums.size();\n    assert(n > 0);\n\n    long cur = 0;\n\
    \    std::vector<long> result;\n    result.reserve(n);\n\n    result.push_back(nums[0]);\n\
    \    for (int i = 1; i < n; ++i) {\n        cur += nums[i];\n        result.push_back(cur);\n\
    \    }\n    result.push_back(cur);\n\n    for (auto i : result) {\n        if\
    \ (i > 0)\n            assert(i < n);\n    }\n\n    auto cmp = [](long a, long\
    \ b) -> bool {\n        return b < a;\n    };\n    std::sort(result.begin(), result.end(),\
    \ cmp);\n\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxjs7foy_: /tmp/tmpxjs7foy_.cpp:27: std::vector<long int> order_by_points(std::vector<long\
    \ int>): Assertion `i < n' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  if (nums.empty()) return nums;\n  // Sort nums from smallest to largest.\n\
    \  std::vector<long> nums_tmp = nums;\n  std::sort(nums_tmp.begin(), nums_tmp.end(),\
    \ [](long a, long b){\n    return a + b < 0;\n  });\n  // Find first and last\
    \ digits of nums_tmp.\n  size_t first_digit = 0, last_digit = 0;\n  while (last_digit\
    \ < nums_tmp.size() && nums_tmp[last_digit] == 0)\n    last_digit++;\n  while\
    \ (first_digit < last_digit && nums_tmp[first_digit] == 0)\n    first_digit++;\n\
    \  // Find sum of digits in the range [first_digit, last_digit].\n  long sum_of_digits\
    \ = first_digit;\n  for (size_t i = first_digit + 1; i < last_digit; ++i)\n  \
    \  sum_of_digits += nums_tmp[i];\n  // Find index (from 0 to n-1) where nums_tmp\
    \ has the largest sum_of_digits.\n  size_t index_of_largest_digit = 0;\n  for\
    \ (size_t i = 0; i < nums_tmp.size(); ++i) {\n    size_t sum = nums_tmp[i] + sum_of_digits;\n\
    \    if (sum > sum_of_digits) {\n      index_of_largest_digit = i;\n      sum_of_digits\
    \ = sum;\n    }\n  }\n  // Sort nums_tmp by first digit of its elements using\
    \ index_of_largest_digit\n  // as index instead of i (to break ties) and then\
    \ by sum of digits of\n  // elements using sum_of_digits as index.\n  std::sort(nums_tmp.begin()\
    \ + index_of_largest_digit,\n            nums_tmp.begin() + nums_tmp.size(),\n\
    \            [](long a, long b){\n              if (a + b < 0)\n             \
    \   return 1;\n              if (a + b > 0)\n                return -1;\n    \
    \          return a < b;\n            });\n  // Return sorted nums_tmp.\n  return\
    \ nums_tmp;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjhm0qmd3.cpp: In lambda function:\n/tmp/tmpjhm0qmd3.cpp:46:26:\
    \ error: inconsistent types \u2018int\u2019 and \u2018bool\u2019 deduced for lambda\
    \ return type\n   46 |               return a < b;\n      |                  \
    \        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if(nums.empty())\n        return nums;\n    long digit_sum = 0;\n\
    \    long index = 0;\n    // Loop over all the digits\n    for(long num : nums)\
    \ {\n        // Update digit sum\n        digit_sum += num;\n        // Check\
    \ if digit sum is same\n        if(digit_sum == 0) {\n            // If digit\
    \ sum is same, just sort based on original index\n            index = num;\n \
    \           break;\n        }\n    }\n    if(digit_sum < 0)\n        index = -index;\n\
    \    // Create a sorted list of integers\n    std::vector<long> sorted_nums(nums.size());\n\
    \    // Sort based on sorted index\n    for(long i = 0; i < nums.size(); i++)\
    \ {\n        sorted_nums[i] = nums[(index * nums.size()) + i];\n    }\n    return\
    \ sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp21vky2nj: /tmp/tmp21vky2nj.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) {\n        return nums;\n    }\n    // Sort from\
    \ small to large sums\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long x, long y) {\n        return x + y == y;\n    });\n\
    \    // Get the digits of the sums\n    std::set<long> digits;\n    std::vector<long>\
    \ nums_with_digits;\n    for (long &n : nums_copy) {\n        int index = sums(n);\n\
    \        digits.insert(index);\n        nums_with_digits.push_back(n);\n    }\n\
    \    // Get the indexes of the sorted numbers and sort them based on the\n   \
    \ // index of their original number\n    std::vector<int> indexes;\n    indexes.reserve(nums_with_digits.size());\n\
    \    for (long &n : nums_with_digits) {\n        int index = digits[sums(n)];\n\
    \        indexes.push_back(index);\n    }\n    std::sort(indexes.begin(), indexes.end(),\
    \ [](int x, int y) {\n        return nums[indexes[x]] > nums[indexes[y]];\n  \
    \  });\n    // Construct the output vector\n    std::vector<long> ordered_nums\
    \ = nums_with_digits;\n    for (auto i : indexes) {\n        ordered_nums[i] =\
    \ nums[i];\n    }\n    return ordered_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5azojt_m.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5azojt_m.cpp:23:21: error: \u2018sums\u2019 was not declared\
    \ in this scope; did you mean \u2018nums\u2019?\n   23 |         int index = sums(n);\n\
    \      |                     ^~~~\n      |                     nums\n/tmp/tmp5azojt_m.cpp:32:28:\
    \ error: \u2018sums\u2019 was not declared in this scope; did you mean \u2018\
    nums\u2019?\n   32 |         int index = digits[sums(n)];\n      |           \
    \                 ^~~~\n      |                            nums\n/tmp/tmp5azojt_m.cpp:\
    \ In lambda function:\n/tmp/tmp5azojt_m.cpp:36:16: error: \u2018nums\u2019 is\
    \ not captured\n   36 |         return nums[indexes[x]] > nums[indexes[y]];\n\
    \      |                ^~~~\n/tmp/tmp5azojt_m.cpp:35:48: note: the lambda has\
    \ no capture-default\n   35 |     std::sort(indexes.begin(), indexes.end(), [](int\
    \ x, int y) {\n      |                                                ^\n/tmp/tmp5azojt_m.cpp:10:53:\
    \ note: \u2018std::vector<long int> nums\u2019 declared here\n   10 | std::vector<long>\
    \ order_by_points(std::vector<long> nums) {\n      |                         \
    \          ~~~~~~~~~~~~~~~~~~^~~~\n/tmp/tmp5azojt_m.cpp:36:21: error: \u2018indexes\u2019\
    \ is not captured\n   36 |         return nums[indexes[x]] > nums[indexes[y]];\n\
    \      |                     ^~~~~~~\n/tmp/tmp5azojt_m.cpp:35:48: note: the lambda\
    \ has no capture-default\n   35 |     std::sort(indexes.begin(), indexes.end(),\
    \ [](int x, int y) {\n      |                                                ^\n\
    /tmp/tmp5azojt_m.cpp:29:22: note: \u2018std::vector<int> indexes\u2019 declared\
    \ here\n   29 |     std::vector<int> indexes;\n      |                      ^~~~~~~\n\
    /tmp/tmp5azojt_m.cpp:36:35: error: \u2018nums\u2019 is not captured\n   36 | \
    \        return nums[indexes[x]] > nums[indexes[y]];\n      |                \
    \                   ^~~~\n/tmp/tmp5azojt_m.cpp:35:48: note: the lambda has no\
    \ capture-default\n   35 |     std::sort(indexes.begin(), indexes.end(), [](int\
    \ x, int y) {\n      |                                                ^\n/tmp/tmp5azojt_m.cpp:10:53:\
    \ note: \u2018std::vector<long int> nums\u2019 decla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::map<int, std::map<long, int> > points;\n  for(long num : nums)\
    \ {\n    int point = num / 10;\n    if(points[point].count(num))\n      points[point][num]\
    \ += 1;\n    else\n      points[point][num] = 1;\n  }\n  std::vector<long> sorted;\n\
    \  std::map<int, std::map<long, int> >::iterator it;\n  for(it=points.begin();\
    \ it!=points.end(); ++it) {\n    std::map<long, int>::iterator jt;\n    for(jt=it->second.begin();\
    \ jt!=it->second.end(); ++jt) {\n      sorted.push_back((it->first + jt->first)\
    \ % 10);\n    }\n  }\n  return sorted;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpyvkg52z0: /tmp/tmpyvkg52z0.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> answer;\n    long\
    \ sum = 0;\n    for (long x: nums) {\n        sum += x;\n        answer.push_back(x);\n\
    \    }\n    for (long x: answer) {\n        for (long y: answer) {\n         \
    \   if (y == x || x == -y) continue;\n            long a = y;\n            long\
    \ b = x;\n            if (a + b > 0 && a < b) {\n                long temp = y;\n\
    \                y = x;\n                x = temp;\n            }\n        }\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmp7_683y: /tmp/tmpmp7_683y.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](const long & l, const long\
    \ & r){\n        long m = std::max(l, r);\n        long c = std::count(nums.begin(),\
    \ nums.end(), m);\n        return c > 1;\n    });\n    return nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3gkg9q73.cpp: In lambda function:\n/tmp/tmp3gkg9q73.cpp:13:29:\
    \ error: \u2018nums\u2019 is not captured\n   13 |         long c = std::count(nums.begin(),\
    \ nums.end(), m);\n      |                             ^~~~\n/tmp/tmp3gkg9q73.cpp:11:42:\
    \ note: the lambda has no capture-default\n   11 |     std::sort(nums.begin(),\
    \ nums.end(), [](const long & l, const long & r){\n      |                   \
    \                       ^\n/tmp/tmp3gkg9q73.cpp:10:53: note: \u2018std::vector<long\
    \ int> nums\u2019 declared here\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                   ~~~~~~~~~~~~~~~~~~^~~~\n\
    /tmp/tmp3gkg9q73.cpp:13:43: error: \u2018nums\u2019 is not captured\n   13 | \
    \        long c = std::count(nums.begin(), nums.end(), m);\n      |          \
    \                                 ^~~~\n/tmp/tmp3gkg9q73.cpp:11:42: note: the\
    \ lambda has no capture-default\n   11 |     std::sort(nums.begin(), nums.end(),\
    \ [](const long & l, const long & r){\n      |                               \
    \           ^\n/tmp/tmp3gkg9q73.cpp:10:53: note: \u2018std::vector<long int> nums\u2019\
    \ declared here\n   10 | std::vector<long> order_by_points(std::vector<long> nums)\
    \ {\n      |                                   ~~~~~~~~~~~~~~~~~~^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) {\n        return {};\n    }\n    std::vector<long>\
    \ nums2;\n    nums2.reserve(nums.size());\n    for (int i = 0; i < nums.size();\
    \ ++i) {\n        auto j = nums[i];\n        int sum = 0;\n        while (j !=\
    \ 0) {\n            sum += (j % 10);\n            j = j / 10;\n        }\n   \
    \     if (sum > 0) {\n            nums2.push_back(sum);\n        }\n    }\n  \
    \  std::sort(nums2.begin(), nums2.end());\n    std::vector<long> ans;\n    for\
    \ (int i = 0; i < nums.size(); ++i) {\n        if (nums2[i] != i) {\n        \
    \    ans.push_back(nums[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph_v2_qb1: /tmp/tmph_v2_qb1.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // your code here\n  assert(nums.size() > 0);\n  int n = nums.size();\n\
    \  std::vector<long> result(n);\n  for (int i = 0; i < n; i++) {\n    int sum\
    \ = 0;\n    for (int j = 0; j < i; j++) {\n      sum += nums[j];\n    }\n    int\
    \ k = i;\n    while (sum > 0) {\n      result[k--] = nums[sum % 10];\n      sum\
    \ = (sum - nums[sum % 10]) / 10 + 1;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpp4_dqqeh: /tmp/tmpp4_dqqeh.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // code here\n    std::vector<long> s;\n    // Sort nums by the\
    \ sum of their digits in s \n    for(int i = 0; i < nums.size(); i++){\n     \
    \   if(s.find(nums[i]) == s.end()){\n            s.push_back(nums[i]);\n     \
    \   }\n    }\n    return s;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq_24s9uk.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq_24s9uk.cpp:15:14: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   15 |         if(s.find(nums[i])\
    \ == s.end()){\n      |              ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::sort(nums.begin(), nums.end(), [](const long &x, const long\
    \ &y){\n    return x + y == y;\n  });\n  std::vector<long> rev(nums.size());\n\
    \  for (std::size_t i = 1; i < nums.size(); i++) {\n    if (nums[i] + nums[i -\
    \ 1] == nums[i - 1]) {\n      rev[i - 1]++;\n    } else {\n      rev[i] = nums[i\
    \ - 1] + 1;\n    }\n  }\n  return rev;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpanme30cp: /tmp/tmpanme30cp.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> new_nums;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        int sum = 0;\n        int curr = nums[i];\n        while (curr\
    \ != 0) {\n            sum += (curr % 10);\n            curr = curr / 10;\n  \
    \      }\n        // If nums[i] is same as nums[sum] or nums[i] == 0, remove it\n\
    \        // If sum == nums[i], remove nums[i]\n        if (i == sum || sum ==\
    \ 0 && nums[i] != 0) {\n            continue;\n        }\n        new_nums.push_back(nums[i]);\n\
    \    }\n    return new_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgsq6clh3: /tmp/tmpgsq6clh3.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    // std::map<long, std::vector<long>\
    \ > m;\n    // for(auto num:nums) m.insert({num+(num>0), num});\n    // return\
    \ m.values().begin()+m.values().end()\n\n    std::vector<long> nums_copy = nums;\n\
    \    sort(nums_copy.begin(), nums_copy.end(), [](const long& a, const long& b){return\
    \ a>b;});\n    std::map<long, std::vector<long> > m;\n    for(auto num:nums_copy)\
    \ m.insert({num+(num>0), num});\n    return m.values().begin()+m.values().end();\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpakpi9jba.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpakpi9jba.cpp:19:56: error: no matching function for call\
    \ to \u2018std::map<long int, std::vector<long int> >::insert(<brace-enclosed\
    \ initializer list>)\u2019\n   19 |     for(auto num:nums_copy) m.insert({num+(num>0),\
    \ num});\n      |                                                        ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpakpi9jba.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:801:7:\
    \ note: candidate: \u2018std::pair<typename std::_Rb_tree<_Key, std::pair<const\
    \ _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename\
    \ __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator,\
    \ bool> std::map<_Key, _Tp, _Compare, _Alloc>::insert(const value_type&) [with\
    \ _Key = long int; _Tp = std::vector<long int>; _Compare = std::less<long int>;\
    \ _Alloc = std::allocator<std::pair<const long int, std::vector<long int> > >;\
    \ typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const\
    \ _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const\
    \ _Key, _Tp> >::other>::iterator = std::_Rb_tree_iterator<std::pair<const long\
    \ int, std::vector<long int> > >; std::map<_Key, _Tp, _Compare, _Alloc>::value_type\
    \ = std::pair<const long int, std::vector<long int> >]\u2019\n  801 |       insert(const\
    \ value_type& __x)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:801:32:\
    \ note:   no known conversion for argument 1 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::pair<const\
    \ long int, std::vector<long int> >&\u2019}\n  801 |       insert(const value_type&\
    \ __x)\n      |              ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:808:7:\
    \ not"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() != 0);\n    // Write your code here\n    //\
    \ return nums;\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpg9fs_m32: /tmp/tmpg9fs_m32.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](long a, long b){\n     \
    \   return (a-b) * (a%b);\n    });\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0h550msv: /tmp/tmp0h550msv.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    // write your code here\n    long long\
    \ sum = 0;\n    long long ans = 0;\n    for (long x : nums) {\n        sum +=\
    \ x;\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        if (sum > 0)\
    \ {\n            sum += nums[i];\n            ans.push_back(i);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph7p5ridj.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph7p5ridj.cpp:14:15: error: conflicting declaration \u2018\
    long long int ans\u2019\n   14 |     long long ans = 0;\n      |             \
    \  ^~~\n/tmp/tmph7p5ridj.cpp:11:23: note: previous declaration as \u2018std::vector<long\
    \ int> ans\u2019\n   11 |     std::vector<long> ans;\n      |                \
    \       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    assert(nums.size() != 0);\n    long\
    \ long mod = pow(10, nums.size()-1);\n    long long sum = 0;\n    for (auto i\
    \ : nums) {\n        sum += i;\n    }\n    long long ret[nums.size()];\n    int\
    \ index = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        ret[index++]\
    \ = sum % mod;\n        sum -= ret[index];\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3tmxclv.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk3tmxclv.cpp:24:12: error: could not convert \u2018ret\u2019\
    \ from \u2018long long int [(<anonymous> + 1)]\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   24 |     return ret;\n      |            ^~~\n      |       \
    \     |\n      |            long long int [(<anonymous> + 1)]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    int sum = 0;\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    std::vector<long>\
    \ result;\n    for (std::size_t i = 0; i < nums.size(); i++) {\n        result.push_back(nums[i]);\n\
    \        if (sum == nums[i]) {\n            std::swap(result[i], result[nums.size()-i-1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpu14gjvpa: /tmp/tmpu14gjvpa.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret(nums.size(), 0);\n    for (long x: nums)\
    \ {\n        while (x > 0) {\n            int carry = x % 10;\n            x /=\
    \ 10;\n            long next = (ret[carry << 1] + x) % 10;\n            ret[carry\
    \ << 1] = next;\n        }\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdvf2h_zr: /tmp/tmpdvf2h_zr.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Sort nums first\n    std::sort(nums.begin(), nums.end());\n\n\
    \    // For each num in nums, find the sum of its digits\n    // and append it\
    \ to the result if it does not yet exist in nums\n    std::vector<long> results;\n\
    \    for (long num : nums)\n    {\n        // Find the sum of its digits\n   \
    \     long sum = 0;\n        while (num != 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n\n        // Insert num if its sum\
    \ not in nums\n        if (std::find(results.begin(), results.end(), sum) == results.end())\n\
    \        {\n            results.push_back(sum);\n        }\n    }\n    return\
    \ results;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7twnldrp: /tmp/tmp7twnldrp.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    std::vector<long> numsCopy = nums;\n\
    \    std::sort(numsCopy.begin(), numsCopy.end(), [](long a, long b){return a+b<0;});\n\
    \    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpa4hgtkgp: /tmp/tmpa4hgtkgp.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](long a, long b) {\n    \
    \    if (a < b)\n            return true;\n        if ((a < 0) && (b > 0))\n \
    \           return false;\n        // if both a and b are non-negative, return\
    \ a negative result\n        if ((a < 0) && (b < 0))\n            return true;\n\
    \        return false;\n    });\n    return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpk3ao509a: /tmp/tmpk3ao509a.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_9239css: /tmp/tmp_9239css.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n \
    \   }\n    long min_sum = sum;\n    std::vector<long> nums2;\n    for (long i\
    \ : nums) {\n        sum += i;\n        if (sum < min_sum) {\n            min_sum\
    \ = sum;\n            nums2 = nums;\n        }\n    }\n    nums2.erase(std::unique(nums2.begin(),\
    \ nums2.end()), nums2.end());\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwf64fo9v: /tmp/tmpwf64fo9v.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long min_sum = 1000000000000LL;\n\
    \    std::vector<long> result;\n    for (auto &i : nums) {\n        long sum =\
    \ 0;\n        for (int j = 0; j < i.size(); j++) {\n            sum += i[j];\n\
    \        }\n        if (sum < min_sum) {\n            min_sum = sum;\n       \
    \     result = std::vector<long>();\n            result.push_back(i);\n      \
    \  } else if (sum == min_sum) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqknp7fy9.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqknp7fy9.cpp:16:31: error: request for member \u2018size\u2019\
    \ in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n   16 | \
    \        for (int j = 0; j < i.size(); j++) {\n      |                       \
    \        ^~~~\n/tmp/tmpqknp7fy9.cpp:17:23: error: invalid types \u2018long int[int]\u2019\
    \ for array subscript\n   17 |             sum += i[j];\n      |             \
    \          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> sorted_nums(nums.size());\n  int cur_sum = 0;\n\
    \  for (int i = 0; i < nums.size(); i++) {\n    cur_sum += nums[i];\n    sorted_nums[i]\
    \ = nums[i];\n  }\n  while (cur_sum > 0) {\n    int j = 0;\n    for (; j < cur_sum;\
    \ j++) {\n      int m = cur_sum - j;\n      if (m >= 0 && sorted_nums[j] > sorted_nums[m])\
    \ {\n        sorted_nums[j] = sorted_nums[m];\n      }\n    }\n    cur_sum -=\
    \ sorted_nums[cur_sum];\n    sorted_nums[cur_sum] = nums[nums.size()-1];\n   \
    \ nums.pop_back();\n  }\n  return sorted_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpt1qmy9_3: /tmp/tmpt1qmy9_3.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    std::vector<long> res(10);\n    for\
    \ (long i : nums) {\n        int sum = 0;\n        while (i > 0) {\n         \
    \   int temp = i % 10;\n            sum += temp;\n            i /= 10;\n     \
    \   }\n        res[sum] += i;\n    }\n    for (long i = 0; i < res.size(); i++)\
    \ {\n        if (res[i] != 0) res.erase(std::remove(std::begin(res), std::end(res),\
    \ 0), std::end(res));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgbktnosy: /tmp/tmpgbktnosy.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    \n    long long max = 0;\n    long\
    \ long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum > max) {\n            max = sum;\n        }\n    }\n\
    \    std::vector<long> res;\n    for (long i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n        if (sum > max) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph0n9pm5m: /tmp/tmph0n9pm5m.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    int result = 0;\n    std::vector<long>\
    \ res;\n    for(int i = 0; i < nums.size(); i++){\n        result += nums[i];\n\
    \        if(result > 0){\n            res.push_back(result);\n            result\
    \ = 0;\n        }\n    }\n    res.push_back(result);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3l61j9uz: /tmp/tmp3l61j9uz.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res(std::begin(nums), std::end(nums));\n    std::sort(std::begin(res),\
    \ std::end(res),\n        [&](long a, long b) -> bool\n    {\n        return a\
    \ + b < 0;\n    });\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_pjusu21: /tmp/tmp_pjusu21.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [&nums](long& a, long& b) {\n\
    \        long c = a + b;\n        long d = c - a;\n        return d < 0;\n   \
    \ });\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplkm7i_wp: /tmp/tmplkm7i_wp.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) return {};\n    long digits[10];\n    for (long\
    \ &n : nums)\n        for (int i = 0; i < 10; i++)\n            digits[i] += n\
    \ % 10 * i;\n    std::sort(std::begin(digits), std::end(digits), [](const long\
    \ a, const long b) {\n        return a > b;\n    });\n\n    std::vector<long>\
    \ ret;\n    for (long &n : nums)\n        ret.push_back(n);\n    // Sort digits\
    \ in descending order\n    std::sort(std::begin(digits), std::end(digits), [](const\
    \ long a, const long b) {\n        return a > b;\n    });\n    std::reverse(std::begin(digits),\
    \ std::end(digits));\n    std::vector<long> nums2;\n    int cur = 0;\n    for\
    \ (long &n : nums)\n        nums2.push_back(n);\n    for (int i = 0; i < 10; i++)\
    \ {\n        while (cur != i) {\n            auto pos = std::upper_bound(std::begin(nums2),\
    \ std::end(nums2), digits[cur]);\n            if (pos != std::end(nums2)) {\n\
    \                auto v = pos->second;\n                nums2.erase(pos);\n  \
    \              ret.push_back(v);\n                cur--;\n            }\n    \
    \    }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4prwy_3e.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4prwy_3e.cpp:36:31: error: request for member \u2018second\u2019\
    \ in \u2018* pos.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   36\
    \ |                 auto v = pos->second;\n      |                           \
    \    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) {\n        return {};\n    }\n    // Find the\
    \ sum of all digits\n    long sum = 0;\n    for (long num : nums) {\n        sum\
    \ += num;\n    }\n    // Sort according to sum\n    long min = 0;\n    long max\
    \ = sum;\n    std::sort(nums.begin(), nums.end(), [&sum, &min](long a, long b)\
    \ {\n        return std::abs(a - b) < std::abs(sum - min);\n    });\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpt1sxuxit: /tmp/tmpt1sxuxit.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int sum=0;\n    for(auto n:nums)\n    {\n        sum+=n;\n    }\n\
    \    std::vector<long> nums_res(nums.size());\n    std::sort(nums.begin(),nums.end(),[sum](long\
    \ a,long b){return sum-a-b;});\n    for(auto n:nums)\n    {\n        nums_res[sum-n]=n;\n\
    \    }\n    return nums_res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5m7nlmw9: /tmp/tmp5m7nlmw9.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppnbcm07j: /tmp/tmppnbcm07j.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Write your code here\n  long long sum = 0, point = 0;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum < 0) sum =\
    \ -sum;\n    if (sum == 0) point = 0;\n    else if (sum > 0) point = 1;\n    else\
    \ point = 2;\n    if (point == 0) std::swap(nums[i], nums[point]);\n  }\n\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] < 0 || nums[i]\
    \ == 0 && nums[i + 1] == 0) continue;\n    else res.push_back(nums[i]);\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpi17hcjam: /tmp/tmpi17hcjam.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    for (int i = 0; i < nums.size();\
    \ i++)\n        for (int j = 0; j < i; j++)\n            if (nums[i] + nums[j]\
    \ > 0)\n                break;\n        result.emplace_back(nums[i]);\n      \
    \  int j = i;\n        while (j < nums.size() && nums[j] < 0)\n            result.emplace_back(nums[j++]);\n\
    \        return result;\n    }\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphzhbbauu.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphzhbbauu.cpp:16:34: error: \u2018i\u2019 was not declared\
    \ in this scope\n   16 |         result.emplace_back(nums[i]);\n      |      \
    \                            ^\n/tmp/tmphzhbbauu.cpp: At global scope:\n/tmp/tmphzhbbauu.cpp:22:1:\
    \ error: expected declaration before \u2018}\u2019 token\n   22 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    sort(numsCopy.begin(),\
    \ numsCopy.end(), [](const long &a, const long &b) {\n            return a + b\
    \ < 0;\n    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5y0me85n: /tmp/tmp5y0me85n.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpx1kvguxw: /tmp/tmpx1kvguxw.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Sort nums in ascending order by sum of their digits.\n    //\
    \ Note that there might exist more than one valid orderings.\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&](long\
    \ a, long b) {\n        return a + b > 0;\n    });\n\n    // Use index to find\
    \ items in nums that have the same sum of their digits.\n    std::vector<long>\
    \ result;\n    std::vector<size_t> index; // the index to nums_copy that has same\
    \ sum of their digits\n    for (int i = 0; i != nums.size(); ++i) {\n        index.resize(nums.size());\n\
    \        for (int j = 0; j != nums.size(); ++j) {\n            index[j] = i;\n\
    \        }\n        std::sort(index.begin(), index.end(), [&](size_t a, size_t\
    \ b) {\n            return nums_copy[a] + nums_copy[b] > 0;\n        });\n   \
    \     if (index[i] != i) {\n            std::swap(nums_copy[i], nums_copy[index[i]]);\n\
    \            std::swap(index[i], index[index[i]]);\n        }\n        result.push_back(nums_copy[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_niknocx: /tmp/tmp_niknocx.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // O(n log n)\n    if (nums.empty()) {\n        return {};\n  \
    \  }\n    // create a map to store the sum of each digits\n    std::map<int, int>\
    \ m;\n    // store sum for each digits\n    int sum = nums.front();\n    for (auto\
    \ n : nums) {\n        m[sum] += n;\n        sum += n;\n    }\n\n    // sort by\
    \ key\n    auto it = m.begin();\n    auto end = m.end();\n    std::vector<long>\
    \ res(end);\n    for (; it != end; ++it) {\n        res.push_back(it->second);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4p9hb0td.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4p9hb0td.cpp:27:30: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(std::_Rb_tree_iterator<std::pair<const\
    \ int, int> >&)\u2019\n   27 |     std::vector<long> res(end);\n      |      \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4p9hb0td.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4p9hb0td.cpp:27:30:\
    \ note:   candidate expects 3 arguments, 1 provided\n   27 |     std::vector<long>\
    \ res(end);\n      |                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4p9hb0td.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:43:\
    \ note:   no k"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [](long a, long b) {\n    \
    \    return a + b > 0 ? b - a : b - a;\n    });\n    return nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpcy3q80g2: /tmp/tmpcy3q80g2.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> out;\n  // Write your code here\n  long sum=0;\n\
    \  for(auto i:nums)\n  {\n    sum=sum+i;\n    out.push_back(sum);\n  }\n  std::sort(out.begin(),\
    \ out.end());\n  return out;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphzvnp59_: /tmp/tmphzvnp59_.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end());\n    std::vector<long> res;\n    for (long i : nums_copy)\n\
    \        res.push_back(i);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpt3ker3qv: /tmp/tmpt3ker3qv.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code here\n    std::vector<long> numsCopy = nums;\n   \
    \ std::sort(numsCopy.begin(), numsCopy.end(), [&](long a, long b) {\n        //\
    \ Write your comparison function here\n        long sum = 0;\n        for (int\
    \ i = 0; i < 9; i++) {\n            sum += (a / 10) * i + (a % 10);\n        }\n\
    \        sum += (b / 10) * i + (b % 10);\n        return sum < 0;\n    });\n \
    \   return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9aeopttv.cpp: In lambda function:\n/tmp/tmp9aeopttv.cpp:19:27:\
    \ error: \u2018i\u2019 was not declared in this scope\n   19 |         sum +=\
    \ (b / 10) * i + (b % 10);\n      |                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, int> digits;\n    for (long n : nums) {\n      \
    \  int digit = n % 10;\n        digits[n] = digit;\n    }\n    std::map<long,\
    \ int>::iterator itr = digits.begin();\n    std::vector<long> ordered;\n    for\
    \ (std::map<long, int>::iterator itr1 = digits.begin();\n         itr1 != digits.end();\
    \ ++itr1) {\n        int sum = 0;\n        for (std::map<long, int>::iterator\
    \ itr2 = digits.begin();\n             itr2 != digits.end(); ++itr2) {\n     \
    \       int value = itr1->second + itr2->second;\n            sum += value;\n\
    \        }\n        if (sum > 0) {\n            ordered.push_back(itr1->first);\n\
    \        }\n    }\n    return ordered;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmyj9w9yo: /tmp/tmpmyj9w9yo.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() > 0);\n    std::vector<long> result;\n    std::stack<long>\
    \ st;\n    long total = 0;\n    for (long num : nums) {\n        while (num >\
    \ 0) {\n            st.push(num % 10);\n            num /= 10;\n        }\n  \
    \      while (!st.empty()) {\n            total += st.top();\n            result.pop_back();\n\
    \            st.pop();\n        }\n    }\n    if (st.empty()) {\n        while\
    \ (total > 0) {\n            result.pop_back();\n            total -= result.pop_back();\n\
    \        }\n        return result;\n    }\n    std::vector<long> temp;\n    for\
    \ (long i = result.size() - 1; i >= 0; --i) {\n        temp.push_back(result[i]);\n\
    \        result[i] = total - result[i];\n        total -= temp[i];\n    }\n  \
    \  return temp;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9felllke.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9felllke.cpp:29:37: error: void value not ignored as it\
    \ ought to be\n   29 |             total -= result.pop_back();\n      |      \
    \                ~~~~~~~~~~~~~~~^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty())\n        return nums;\n    // Calculate the sum\
    \ of all digits in the number\n    long sum = 0;\n    for (auto n : nums)\n  \
    \      sum += n;\n    // Sort based on the sum of the digits\n    std::sort(nums.begin(),\
    \ nums.end(),\n        [](const long &a, const long &b) { return sum - a + b;\
    \ });\n    // Sort based on the index in the original list\n    nums.erase(std::remove_if(nums.begin(),\
    \ nums.end(),\n        [](const long &n) {return n < 0;}),\n        nums.end());\n\
    \    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpacqnlgay.cpp: In lambda function:\n/tmp/tmpacqnlgay.cpp:19:51:\
    \ error: \u2018sum\u2019 is not captured\n   19 |         [](const long &a, const\
    \ long &b) { return sum - a + b; });\n      |                                \
    \                   ^~~\n/tmp/tmpacqnlgay.cpp:19:10: note: the lambda has no capture-default\n\
    \   19 |         [](const long &a, const long &b) { return sum - a + b; });\n\
    \      |          ^\n/tmp/tmpacqnlgay.cpp:14:10: note: \u2018long int sum\u2019\
    \ declared here\n   14 |     long sum = 0;\n      |          ^~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpacqnlgay.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = order_by_points(std::vector<long int>)::<lambda(const long\
    \ int&, const long int&)>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<ord"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::sort(nums.begin(), nums.end(), [](const long& a, const long&\
    \ b) {\n    return a + b < 0;\n  });\n  return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpg39epfz4: /tmp/tmpg39epfz4.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() > 0);\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [&](long x, long y){\n    \
    \    return x + y == y + x;\n    });\n    return nums_copy;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpx_oj5t8p: /tmp/tmpx_oj5t8p.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> rev_nums;\n    std::vector<long> tmp;\n    for\
    \ (long num: nums) {\n        rev_nums.push_back(num);\n    }\n\n    std::sort(rev_nums.begin(),\
    \ rev_nums.end(), [](long a, long b)\n    {\n        return b - a;\n    });\n\n\
    \    for (long i = 1; i < rev_nums.size(); i++) {\n        long cur_sum = i;\n\
    \        for (long j = i; j > 0; j--) {\n            cur_sum -= rev_nums[j];\n\
    \            tmp.push_back(cur_sum);\n        }\n    }\n\n    rev_nums.clear();\n\
    \    rev_nums = tmp;\n\n    return rev_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4stexce1: /tmp/tmp4stexce1.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    long sum = 0;\n    for (long &n: nums)\
    \ {\n        sum += n;\n    }\n    long last = nums[0];\n    long max = -99999999;\n\
    \    ans.push_back(max);\n    for (long &n: nums) {\n        n -= last;\n    \
    \    long temp = sum - n;\n        if (temp > max) {\n            max = temp;\n\
    \            ans.push_back(n);\n        } else {\n            ans.push_back(last);\n\
    \            ans.push_back(temp);\n        }\n        last = n;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpc7u8_9ff: /tmp/tmpc7u8_9ff.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    if (nums.empty()){\n        return\
    \ res;\n    }\n    long currSum = nums.front();\n    long lastSum = currSum;\n\
    \    for (int i = 0; i < nums.size() - 1; i++){\n        currSum += nums[i];\n\
    \        if (currSum != lastSum){\n            res.push_back(lastSum);\n     \
    \       currSum = lastSum;\n        }\n        lastSum = nums[i];\n    }\n   \
    \ res.push_back(lastSum);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdr074z18: /tmp/tmpdr074z18.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> nums1(nums.size());\n  for (size_t i = 0; i < nums.size();\
    \ i++) {\n    nums1[i] = nums[i];\n  }\n\n  std::sort(nums1.begin(), nums1.end(),\
    \ [&nums](long a, long b) -> bool {\n    return std::abs(a - b) < std::abs(std::accumulate(nums.begin(),\
    \ nums.end(), 0) - b);\n  });\n\n  std::vector<long> nums2(nums.size());\n  for\
    \ (size_t i = 0; i < nums.size(); i++) {\n    nums2[i] = nums1[i];\n  }\n  return\
    \ nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_1jckmgg: /tmp/tmp_1jckmgg.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::sort(nums.begin(), nums.end(),\
    \ [] (long a, long b) { return std::abs(a - b) < 10; });\n    return nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppgug3a30: /tmp/tmppgug3a30.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here\n    long long int sum = 0;\n    for(int i=0;\
    \ i<nums.size(); i++){\n        sum += nums[i];\n    }\n    std::vector<long>\
    \ tmp;\n    for(int i=0; i<nums.size(); i++){\n        if((sum - nums[i])<0){\n\
    \            tmp.push_back(nums[i]);\n            sum -= nums[i];\n        }\n\
    \    }\n    for(int i=0; i<nums.size(); i++){\n        sum -= nums[i];\n    }\n\
    \    std::reverse(std::begin(tmp), std::end(tmp));\n    for(long long int i=0;\
    \ i<tmp.size(); i++){\n        nums.push_back(tmp[i]);\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqi6t8yxe: /tmp/tmpqi6t8yxe.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    auto n = (int)nums.size();\n    std::vector<long> res(n);\n   \
    \ std::iota(res.begin(), res.end(), 0);\n    std::sort(res.begin(), res.end(),\
    \ [&nums](const long &a, const long &b) {\n        return std::accumulate(nums.begin(),\
    \ nums.end(), 0LL) * 10 + a * 10 + b * 10 >= 0;\n    });\n    return res;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpysv2panp: /tmp/tmpysv2panp.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // TODO\n\n    std::vector<long> result;\n    for (auto &n : nums)\
    \ {\n        auto digitSum = n*n + n*n;\n        result.push_back(digitSum);\n\
    \    }\n    std::sort(result.begin(), result.end(), [](long a, long b) -> bool\
    \ {\n        return a < b;\n    });\n    return result;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfif_oa09: /tmp/tmpfif_oa09.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  long long sum = 0;\n  for (auto it: nums)\n    sum += it;\n  std::sort(nums.begin(),\
    \ nums.end(), [&sum](long long a, long long b) {\n    if (a > b)\n      return\
    \ 1;\n    if (a < b)\n      return -1;\n    if (a == b)\n      return 0;\n   \
    \ return sum - a - b;\n  });\n  return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqf8rddap.cpp: In lambda function:\n/tmp/tmpqf8rddap.cpp:21:22:\
    \ error: inconsistent types \u2018int\u2019 and \u2018long long int\u2019 deduced\
    \ for lambda return type\n   21 |     return sum - a - b;\n      |           \
    \           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    if(nums.empty()){\n        return\
    \ nums;\n    }\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n\
    \        sum += nums[i];\n    }\n    long index = 0;\n    for(int i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum > 0){\n            swap(nums[index],\
    \ nums[i]);\n            index++;\n        }\n    }\n    return nums;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8iisf_n8.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8iisf_n8.cpp:23:13: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   23 |             swap(nums[index], nums[i]);\n      |    \
    \         ^~~~\n/tmp/tmp8iisf_n8.cpp:23:13: note: suggested alternatives:\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8iisf_n8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8iisf_n8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \             "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result(nums.size());\n    for (long &n : result)\
    \ {\n        int digits = count_digits(n);\n        n = n * 10 + (digits == 0\
    \ ? 0 : digits - 1);\n    }\n    std::sort(result.begin(), result.end(), [](long\
    \ a, long b) {\n        return count_digits(b) - count_digits(a) < 0;\n    });\n\
    \    for (long &n : result) {\n        n = n % 10;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvdenhtmj.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvdenhtmj.cpp:13:22: error: \u2018count_digits\u2019 was\
    \ not declared in this scope\n   13 |         int digits = count_digits(n);\n\
    \      |                      ^~~~~~~~~~~~\n/tmp/tmpvdenhtmj.cpp: In lambda function:\n\
    /tmp/tmpvdenhtmj.cpp:17:16: error: \u2018count_digits\u2019 was not declared in\
    \ this scope\n   17 |         return count_digits(b) - count_digits(a) < 0;\n\
    \      |                ^~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvdenhtmj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = order_by_points(std::vector<long int>)::<lambda(long int,\
    \ long int)>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<order_by_points(std::vector<long\
    \ int>"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    if (nums.size() == 0)\n        return\
    \ nums;\n    std::vector<long> nums2 = nums;\n    std::sort(nums2.begin(), nums2.end(),\
    \ [](long n1, long n2) { return n1 > n2; });\n    long long sum = 0;\n    for\
    \ (auto &item : nums2) {\n        sum += item;\n    }\n    for (auto &item : nums2)\
    \ {\n        if (sum == item)\n            std::swap(nums2.back(), nums2.front());\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpacke1jzg: /tmp/tmpacke1jzg.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> results;\n    long sum_of_digits = 0;\n    for\
    \ (long num : nums) {\n        sum_of_digits += num;\n        results.push_back(sum_of_digits);\n\
    \    }\n    std::sort(results.begin(), results.end());\n    return results;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3f3sh3_3: /tmp/tmp3f3sh3_3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    for (auto num : nums) {\n        sum += num;\n\
    \    }\n    std::vector<long> sorted_nums;\n    long curr = 1;\n    while (!nums.empty())\
    \ {\n        if (sum == curr) {\n            sorted_nums.push_back(nums.front());\n\
    \            nums.pop_front();\n        } else {\n            if (sum > curr)\
    \ {\n                curr /= 10;\n                long a = nums.front();\n   \
    \             nums.erase(nums.begin());\n                sorted_nums.push_back(a);\n\
    \                curr = sum - a;\n            }\n        }\n    }\n    return\
    \ sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4dofwx3.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo4dofwx3.cpp:20:18: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018pop_front\u2019\n   20 |             nums.pop_front();\n\
    \      |                  ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // code here\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfr8y77cr: /tmp/tmpfr8y77cr.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long total_value = 0;\n    for (auto num : nums)\n        total_value\
    \ += num;\n    long prev_value = 0;\n    long next_value = 0;\n    long i = 0;\n\
    \    std::vector<long> results;\n    while (i < nums.size()) {\n        long value\
    \ = nums[i];\n        long sum = 0;\n        while (value/10 != 0)\n         \
    \   sum += value % 10;\n        if (sum > 0)\n            results.push_back(value\
    \ - sum * 10);\n        else\n            results.push_back(value - sum);\n  \
    \      if (total_value / 10 > 0 && total_value % 10 > 0) {\n            total_value\
    \ -= sum * 10;\n            total_value += prev_value - next_value;\n        \
    \    prev_value = next_value;\n        }\n        else if (total_value / 10 >\
    \ 0) {\n            total_value -= sum * 10;\n            prev_value = next_value;\n\
    \        }\n        else if (total_value % 10 > 0) {\n            total_value\
    \ += prev_value - next_value;\n            next_value = prev_value;\n        }\n\
    \        i++;\n    }\n    return results;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  if (nums.empty()) return {};\n  std::vector<int> v(nums.size());\n\
    \  for (size_t i = 0; i < v.size(); i++)\n    v[i] = nums[i] + i * pow(10, nums.size()\
    \ - i - 1);\n  std::sort(v.begin(), v.end(), [](auto a, auto b) {\n    return\
    \ a < b;\n  });\n  std::vector<long> ans;\n  for (size_t i = 0; i < v.size();\
    \ i++)\n    ans.push_back(std::abs(v[i] - v[ans.size() - 1]));\n  return ans;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpngai0sj7: /tmp/tmpngai0sj7.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int digit_sum = 0;\n    for (long num : nums) {\n        int num_digits\
    \ = std::log10(num);\n        digit_sum += num_digits;\n    }\n    std::vector<long>\
    \ result;\n    for (long num : nums) {\n        if (digit_sum == num) {\n    \
    \        result.push_back(num);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpybgitld0: /tmp/tmpybgitld0.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    std::iota(numsSorted.begin(),\
    \ numsSorted.end(), 0);\n    std::sort(numsSorted.begin(), numsSorted.end(),\n\
    \      [&nums] (long n1, long n2) -> bool {\n        return nums[n1] > nums[n2];\n\
    \    });\n    return numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3mmaucob: /tmp/tmp3mmaucob.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() > 0);\n    // Store the original index -> digit\
    \ pairs\n    std::map<long, long> sorted_digits;\n    // Store the digit sums\
    \ -> original index pairs\n    std::map<long, std::vector<long> > sorted_digits_sums;\n\
    \    // Store the original index -> sorted digit pairs\n    std::vector<std::pair<long,\
    \ long>> sorted_idxs;\n    // Store the sorted digit sums -> sorted index pairs\n\
    \    std::vector<std::pair<long, std::vector<long>>> sorted_idxs_sums;\n\n   \
    \ // Sort `nums`, which is a list of sorted indexes in ascending order.\n    //\
    \ We do this by traversing each index of `nums`\n    // and storing its corresponding\
    \ digit, i.e. `nums[i]`,\n    // together with its sum `sum_of_digits[i]`, in\
    \ a map.\n    // We then store these key-value pairs in vectors, `sorted_digits`,\n\
    \    // `sorted_digits_sums`, `sorted_idxs` and `sorted_idxs_sums`.\n    // Then,\
    \ we sort these vectors by their sums in ascending order.\n    for (int i = 0;\
    \ i < nums.size(); i++) {\n        const long idx = nums[i];\n        const long\
    \ digit_sum = nums[i] / nums.size();\n        if (sorted_digits.find(digit_sum)\
    \ == sorted_digits.end()) {\n            sorted_digits[digit_sum] = idx;\n   \
    \         sorted_digits_sums[digit_sum].push_back(idx);\n        } else {\n  \
    \          sorted_digits_sums[digit_sum].push_back(idx);\n        }\n    }\n\n\
    \    // Store the sorted digits in vectors, `sorted_idxs`,\n    // `sorted_idxs_sums`.\n\
    \    for (auto it = sorted_digits.begin(); it != sorted_digits.end();\n      \
    \   it++) {\n        sorted_idxs.push_back(std::make_pair(it->second, it->first));\n\
    \        sorted_idxs_sums.push_back(std::make_pair(it->first,\n              \
    \                                   std::vector<long>(it->second)));\n    }\n\n\
    \    // Sort the vectors, `sorted_idxs` and `sorted_idxs_sums`.\n    std::sort(sorted_idxs.begin(),\
    \ sorted_idxs.end(), cmp);\n    std::sort(sorted_idxs_sums.begin(), sorted_idxs_sums.end(),\
    \ cmp);\n\n    // Finally, return a vector containing the original indexes of\
    \ the sorted\n    // indexes stored in `sorted_idxs` and `sorted_idxs_sums`.\n\
    \    std::vector<long> sorted_idxs_copy(sorted_idxs);\n    std::vector<std::vector<long>\
    \ > sorted_idxs_sums_copy(sorted_idxs_sums);\n    return sorted_idxs_copy;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvdp9c8t.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdvdp9c8t.cpp:49:55: error: \u2018cmp\u2019 was not declared\
    \ in this scope; did you mean \u2018bcmp\u2019?\n   49 |     std::sort(sorted_idxs.begin(),\
    \ sorted_idxs.end(), cmp);\n      |                                          \
    \             ^~~\n      |                                                   \
    \    bcmp\n/tmp/tmpdvdp9c8t.cpp:54:51: error: no matching function for call to\
    \ \u2018std::vector<long int>::vector(std::vector<std::pair<long int, long int>\
    \ >&)\u2019\n   54 |     std::vector<long> sorted_idxs_copy(sorted_idxs);\n  \
    \    |                                                   ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdvdp9c8t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdvdp9c8t.cpp:54:51:\
    \ note:   candidate expects 3 arguments, 1 provided\n   54 |     std::vector<long>\
    \ sorted_idxs_copy(sorted_idxs);\n      |                                    \
    \               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdvdp9c8t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    // Sort the list\n   \
    \ qsort(nums_copy.begin(), nums_copy.end(), sizeof(long));\n    // Get sum of\
    \ digits\n    int sum = 0;\n    for (long i : nums_copy) {\n        sum += i;\n\
    \    }\n    // Get index of each digit in original list\n    std::vector<int>\
    \ indices;\n    for (int i = 0; i < nums_copy.size(); i++) {\n        indices.push_back(static_cast<int>(nums_copy[i]));\n\
    \    }\n    // Return sorted list\n    return nums_copy;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9rq0ghbx.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9rq0ghbx.cpp:13:26: error: cannot convert \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} to \u2018void*\u2019\n   13 |     qsort(nums_copy.begin(), nums_copy.end(),\
    \ sizeof(long));\n      |           ~~~~~~~~~~~~~~~^~\n      |               \
    \           |\n      |                          std::vector<long int>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/std_abs.h:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9rq0ghbx.cpp:2:\n/usr/include/stdlib.h:760:26:\
    \ note:   initializing argument 1 of \u2018void qsort(void*, size_t, size_t, __compar_fn_t)\u2019\
    \n  760 | extern void qsort (void *__base, size_t __nmemb, size_t __size,\n  \
    \    |                    ~~~~~~^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code goes here\n    long sum = 0;\n    for (auto &num :\
    \ nums) {\n        sum += num;\n    }\n\n    if (sum % 10 == 0) {\n        std::sort(nums.begin(),\
    \ nums.end(), [](long a, long b) {\n            return b - a;\n        });\n \
    \   }\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzd3vt_tt: /tmp/tmpzd3vt_tt.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Write your code here.\n  // You just need to sort the nums according\
    \ to the sum of their digits.\n  std::sort(nums.begin(), nums.end(), [](long a,\
    \ long b) { return a + b < b + a; });\n  return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpuvb92uhg: /tmp/tmpuvb92uhg.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n    }\n    std::vector<long> res(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        int j;\n        for (j\
    \ = 0; j < nums.size(); j++) {\n            if (i == j)\n                continue;\n\
    \            if (nums[i] + nums[j] == sum)\n                res[i] = nums[j];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmcrwptph: /tmp/tmpmcrwptph.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    std::vector<std::pair<long, long>>\
    \ digit_sums;\n    long sum = 0;\n    for (long &n : nums)\n        sum += n;\n\
    \    long max_digit = std::abs(sum);\n    for (long &n : nums)\n        digit_sums.emplace_back(n,\
    \ sum % max_digit);\n    std::sort(digit_sums.begin(), digit_sums.end());\n  \
    \  for (long &n : nums)\n        ans.emplace_back(n - digit_sums[ans.size() -\
    \ 1].first);\n    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_m6hahs4: /tmp/tmp_m6hahs4.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.size() < 2)\n        return nums;\n    std::vector<long>\
    \ res(2);\n    for (long k = 0; k < nums.size(); k++)\n        if (nums[k] > 0)\n\
    \            res[k] = nums[k];\n        else\n            res[k] = nums[k + 1];\n\
    \    long sum = 0;\n    for (size_t k = 0; k < res.size(); k++) {\n        sum\
    \ += res[k];\n    }\n    std::vector<long>::iterator it;\n    for (it = res.begin();\
    \ it != res.end(); it++) {\n        long tmp = *it + sum;\n        long idx =\
    \ 0;\n        for (; k < res.size(); k++) {\n            if ((tmp -= res[k]) <\
    \ 0) {\n                tmp += nums[idx];\n                break;\n          \
    \  }\n            idx++;\n        }\n        if (idx == res.size())\n        \
    \    res.push_back(tmp);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_geffj8l.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_geffj8l.cpp:27:16: error: \u2018k\u2019 was not declared\
    \ in this scope\n   27 |         for (; k < res.size(); k++) {\n      |      \
    \          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here\n    long max_sum = INT_MIN;\n    int max_index\
    \ = -1;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        int tmp = nums[i];\n\
    \        int sum = 0;\n        while (i >= 0) {\n            sum += nums[--i];\n\
    \        }\n        if (sum > 0) {\n            max_sum = std::max(sum, max_sum);\n\
    \            if (max_sum < 0 || sum < 0) break;\n            max_index = i;\n\
    \        }\n    }\n    if (max_index == -1) {\n        return nums;\n    }\n \
    \   std::vector<long> result(nums.size());\n    int pos = max_index;\n    int\
    \ i = max_index;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        long\
    \ tmp = nums[i];\n        int sum = 0;\n        while (i >= 0) {\n           \
    \ sum += nums[--i];\n        }\n        result[pos++] = tmp - sum;\n    }\n  \
    \  std::stable_sort(result.begin(), result.end());\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxctg1kw3.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxctg1kw3.cpp:21:44: error: no matching function for call\
    \ to \u2018max(int&, long int&)\u2019\n   21 |             max_sum = std::max(sum,\
    \ max_sum);\n      |                                            ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxctg1kw3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxctg1kw3.cpp:21:44:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long int\u2019)\n   21 |             max_sum = std::max(sum,\
    \ max_sum);\n      |                                            ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::sort(nums.begin(), nums.end(), compare);\n  std::vector<long>\
    \ ret;\n  int sum = 0;\n  for (auto i : nums) {\n    sum += i;\n    ret.push_back(i);\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp84r_3a2l.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp84r_3a2l.cpp:11:39: error: \u2018compare\u2019 was not\
    \ declared in this scope\n   11 |   std::sort(nums.begin(), nums.end(), compare);\n\
    \      |                                       ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret;\n    long long ans = std::numeric_limits<long\
    \ long>::max();\n    int len = 0;\n    for (auto e : nums) {\n        len = std::max(len,\
    \ std::abs(e));\n    }\n    for (auto e : nums) {\n        long long sum = 0;\n\
    \        int index = 0;\n        for (auto i = std::abs(e); i > 0; i--) {\n  \
    \          sum += e % 10;\n            e /= 10;\n            index++;\n      \
    \  }\n        if (index == len) {\n            ret.push_back(sum);\n        }\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwkmpfcwr.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwkmpfcwr.cpp:15:40: error: no matching function for call\
    \ to \u2018max(int&, long int)\u2019\n   15 |         len = std::max(len, std::abs(e));\n\
    \      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwkmpfcwr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwkmpfcwr.cpp:15:40:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long int\u2019)\n   15 |         len = std::max(len, std::abs(e));\n\
    \      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long long sum = 0;\n    for(auto &i\
    \ : nums)\n    {\n        sum += i;\n    }\n    std::vector<long> res;\n    std::map<long\
    \ long, size_t> index;\n    for(auto &i : nums)\n    {\n        if(index.find(sum)\
    \ != index.end())\n        {\n            res.push_back(index[sum]);\n       \
    \     index[sum]++;\n        }\n        else\n        {\n            res.push_back(i);\n\
    \            index[i] = res.size();\n        }\n        sum += i;\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpe8wk1v78: /tmp/tmpe8wk1v78.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sorted_nums(nums.size(), -1);\n    for (long\
    \ num : nums) {\n        long sum = 0;\n        while (num != 0) {\n         \
    \   sum += num % 10;\n            num /= 10;\n        }\n        long index =\
    \ sorted_nums[sum] - 1;\n        sorted_nums[sum] = num;\n        if (index >=\
    \ 0)\n            sorted_nums[index] += 1;\n    }\n    return sorted_nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8ie3juqf: /tmp/tmp8ie3juqf.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // code here\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpy70mcs10: /tmp/tmpy70mcs10.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // code here\n    long long sum = 0;\n    int n = nums.size();\n\
    \    for(int i=0;i<n;i++)\n    {\n        sum+=nums[i];\n    }\n    long long\
    \ result[n];\n    for(int i=0;i<n;i++)\n    {\n        result[i]=nums[i]+(sum%10);\n\
    \        sum/=10;\n    }\n    std::sort(result, result+n);\n    std::vector<long>\
    \ res(n);\n    for(int i=0;i<n;i++)\n    {\n        res[i]=result[i];\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpypyu0okp: /tmp/tmpypyu0okp.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(),\n        [](const long &n1,\
    \ const long &n2) -> bool {\n            return n1 > n2;\n        });\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmped1dihzg: /tmp/tmped1dihzg.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  if (nums.empty()) {\n    return {};\n  }\n\n  std::unordered_map<long,\
    \ std::vector<long>> memo;\n\n  for (size_t i = 0; i < nums.size(); ++i) {\n \
    \   long val = nums[i];\n    std::vector<long> &vec = memo[val];\n    if (vec.empty())\
    \ {\n      vec.push_back(i);\n    } else {\n      auto it = std::find(vec.begin(),\
    \ vec.end(), i);\n      if (it != vec.end()) {\n        vec[std::distance(vec.begin(),\
    \ it)] = i;\n      }\n    }\n  }\n\n  std::vector<long> sorted_nums = nums;\n\
    \  for (const auto &vec : memo) {\n    if (vec.size() >= 2) {\n      sorted_nums[vec[0]]\
    \ = vec[1];\n      sorted_nums.erase(sorted_nums.begin() + vec[0] + 1);\n    }\n\
    \  }\n\n  return sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptkq1ubf1.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptkq1ubf1.cpp:32:13: error: \u2018const struct std::pair<const\
    \ long int, std::vector<long int> >\u2019 has no member named \u2018size\u2019\
    \n   32 |     if (vec.size() >= 2) {\n      |             ^~~~\n/tmp/tmptkq1ubf1.cpp:33:22:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018const std::pair<const\
    \ long int, std::vector<long int> >\u2019 and \u2018int\u2019)\n   33 |      \
    \ sorted_nums[vec[0]] = vec[1];\n      |                      ^\n/tmp/tmptkq1ubf1.cpp:33:32:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018const std::pair<const\
    \ long int, std::vector<long int> >\u2019 and \u2018int\u2019)\n   33 |      \
    \ sorted_nums[vec[0]] = vec[1];\n      |                                ^\n/tmp/tmptkq1ubf1.cpp:34:50:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018const std::pair<const\
    \ long int, std::vector<long int> >\u2019 and \u2018int\u2019)\n   34 |      \
    \ sorted_nums.erase(sorted_nums.begin() + vec[0] + 1);\n      |              \
    \                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code goes here\n    std::vector<long> ans;\n    int n =\
    \ nums.size();\n    int m = 0;\n    long maxv = INT_MAX;\n    long minv = INT_MIN;\n\
    \    for(int i = 0; i < n; i++) {\n        if(minv > nums[i]){\n            minv\
    \ = nums[i];\n        }\n        if(maxv < nums[i]){\n            maxv = nums[i];\n\
    \        }\n    }\n    while(m <= maxv) {\n        long temp = minv;\n       \
    \ for(int i = 0; i < n; i++) {\n            if(nums[i] > temp){\n            \
    \    temp = nums[i];\n            }\n        }\n        ans.push_back(temp);\n\
    \        minv = temp;\n        m++;\n    }\n    for(int i = n-1; i >= 0; i--)\
    \ {\n        long temp = maxv;\n        for(int j = 0; j < n; j++) {\n       \
    \     if(nums[j] < temp){\n                temp = nums[j];\n            }\n  \
    \      }\n        ans.push_back(temp);\n        maxv = temp;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    std::vector<long> result;\n    long\
    \ long sum = 0;\n    for(long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long l, long r){\n\
    \        return sum-l > sum-r;\n    });\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpf6af0rlg: /tmp/tmpf6af0rlg.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() > 0);\n    std::vector<long> result;\n    std::unordered_map<long,\
    \ std::vector<long> > mp;\n    for (long &i : nums)\n    {\n        mp[i] = std::vector<long>{};\n\
    \        mp[i].reserve(nums.size());\n        for (long &j : mp)\n        {\n\
    \            if (j > i)\n                j.push_back(i);\n        }\n    }\n \
    \   for (long &i : mp)\n    {\n        auto j = i;\n        std::vector<long>\
    \ &v = mp[j];\n        std::sort(v.begin(), v.end());\n        result.insert(result.end(),\
    \ v.begin(), v.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdv0fnt9v.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdv0fnt9v.cpp:18:24: error: invalid initialization of reference\
    \ of type \u2018long int&\u2019 from expression of type \u2018std::pair<const\
    \ long int, std::vector<long int> >\u2019\n   18 |         for (long &j : mp)\n\
    \      |                        ^~\n/tmp/tmpdv0fnt9v.cpp:21:19: error: request\
    \ for member \u2018push_back\u2019 in \u2018j\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   21 |                 j.push_back(i);\n      |     \
    \              ^~~~~~~~~\n/tmp/tmpdv0fnt9v.cpp:24:20: error: invalid initialization\
    \ of reference of type \u2018long int&\u2019 from expression of type \u2018std::pair<const\
    \ long int, std::vector<long int> >\u2019\n   24 |     for (long &i : mp)\n  \
    \    |                    ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::map<long, int> m;\n  for (auto n : nums) {\n    m[n] += n %\
    \ 10;\n  }\n  std::vector<long> ans;\n  long max_n = std::numeric_limits<long>::max();\n\
    \  for (auto [n, i] : m) {\n    if (n != max_n) {\n      ans.push_back(n);\n \
    \     max_n = n;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpijikjux5: /tmp/tmpijikjux5.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (size_t i =\
    \ 0; i < nums.size(); i++) {\n        numsSorted[i] = i;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end(),\n        [](long a, long b) -> bool {\n            long sum\
    \ = 0;\n            while (a > 0 || b > 0) {\n                sum += a % 10;\n\
    \                a /= 10;\n                sum += b % 10;\n                b /=\
    \ 10;\n            }\n            return (sum < (long)1); //if sum is greater\
    \ than 1, then swap them\n        });\n\n    int index = 0;\n    std::vector<long>\
    \ numsSortedAfterSorting(nums.size());\n    for (size_t i = 0; i < numsSorted.size();\
    \ i++) {\n        numsSortedAfterSorting[i] = nums[index];\n        index++;\n\
    \    }\n    return numsSortedAfterSorting;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8vy755x2: /tmp/tmp8vy755x2.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ans;\n    int largestSumSoFar = INT_MIN;\n  \
    \  int currentSum = INT_MIN;\n    for (int num : nums) {\n        currentSum +=\
    \ num;\n        largestSumSoFar = max(largestSumSoFar, currentSum);\n        ans.push_back(currentSum);\n\
    \    }\n    std::sort(ans.begin(), ans.end(), [](long a, long b) -> bool {\n \
    \       return a < b;\n    });\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfllkt4bd.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfllkt4bd.cpp:16:27: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   16 |         largestSumSoFar\
    \ = max(largestSumSoFar, currentSum);\n      |                           ^~~\n\
    \      |                           std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfllkt4bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    std::vector<long> sorted_nums = nums;\n\
    \    long least_point = 0;\n    long max_point = -1;\n    long min_point = LONG_MAX;\n\
    \    for (long i = 0; i < sorted_nums.size(); i++) {\n        int current_point\
    \ = sorted_nums[i];\n        least_point = std::min(least_point, current_point);\n\
    \        max_point = std::max(max_point, current_point);\n        min_point =\
    \ std::min(min_point, current_point);\n    }\n    std::vector<long> sorted_points(sorted_nums.size());\n\
    \    for (int i = min_point; i <= max_point; i++) {\n        sorted_points[i]\
    \ = i;\n    }\n    for (long i = 0; i < sorted_nums.size(); i++) {\n        int\
    \ current_point = sorted_nums[i];\n        int current_index = sorted_points.size()\
    \ - 1;\n        while (current_index >= 0) {\n            long j = current_index\
    \ - 1;\n            long sum = 0;\n            while (j >= 0 && sorted_points[j]\
    \ == current_point) {\n                sum++;\n                j--;\n        \
    \    }\n            if (sum < current_point) {\n                break;\n     \
    \       } else if (sum == current_point) {\n                sorted_points[j] =\
    \ current_index;\n                break;\n            } else {\n             \
    \   j--;\n            }\n            current_index--;\n        }\n    }\n    return\
    \ sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5_ryf9d9.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5_ryf9d9.cpp:18:58: error: no matching function for call\
    \ to \u2018min(long int&, int&)\u2019\n   18 |         least_point = std::min(least_point,\
    \ current_point);\n      |                                                   \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5_ryf9d9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5_ryf9d9.cpp:18:58:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   18 |         least_point = std::min(least_point,\
    \ current_point);\n      |                                                   \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_ord;\n    for (auto i : nums) {\n      \
    \  nums_ord.push_back(i);\n    }\n    sort(nums_ord.begin(), nums_ord.end(), [](long\
    \ a, long b) {\n        return std::accumulate(nums_ord.begin(), nums_ord.end(),\
    \ 0LL, \n                              [&](auto &acc, auto val) {\n          \
    \                       return std::accumulate(acc, 0, \n                    \
    \                                    [&](auto &a, long b) {\n                \
    \                                            return a + std::to_string(b).size();\n\
    \                                                        });\n               \
    \               });\n    });\n    return nums_ord;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp517iozk0.cpp: In lambda function:\n/tmp/tmp517iozk0.cpp:16:32:\
    \ error: \u2018nums_ord\u2019 is not captured\n   16 |         return std::accumulate(nums_ord.begin(),\
    \ nums_ord.end(), 0LL,\n      |                                ^~~~~~~~\n/tmp/tmp517iozk0.cpp:15:45:\
    \ note: the lambda has no capture-default\n   15 |     sort(nums_ord.begin(),\
    \ nums_ord.end(), [](long a, long b) {\n      |                              \
    \               ^\n/tmp/tmp517iozk0.cpp:11:23: note: \u2018std::vector<long int>\
    \ nums_ord\u2019 declared here\n   11 |     std::vector<long> nums_ord;\n    \
    \  |                       ^~~~~~~~\n/tmp/tmp517iozk0.cpp:16:50: error: \u2018\
    nums_ord\u2019 is not captured\n   16 |         return std::accumulate(nums_ord.begin(),\
    \ nums_ord.end(), 0LL,\n      |                                              \
    \    ^~~~~~~~\n/tmp/tmp517iozk0.cpp:15:45: note: the lambda has no capture-default\n\
    \   15 |     sort(nums_ord.begin(), nums_ord.end(), [](long a, long b) {\n   \
    \   |                                             ^\n/tmp/tmp517iozk0.cpp:11:23:\
    \ note: \u2018std::vector<long int> nums_ord\u2019 declared here\n   11 |    \
    \ std::vector<long> nums_ord;\n      |                       ^~~~~~~~\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp517iozk0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Write your code here.\n  std::sort(nums.begin(), nums.end(), [](long\
    \ x, long y){return x > y;});\n  return nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjlv0lqce: /tmp/tmpjlv0lqce.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code in C++17\n    std::vector<long> new_nums;\n\
    \    long sum = 0;\n    int i = 0;\n    while (i<nums.size()) {\n        sum +=\
    \ nums[i];\n        if(sum == 0) {\n            new_nums.push_back(nums[i]);\n\
    \            sum = 1;\n        }\n        else if(sum < 0){\n            new_nums.push_back(nums[i]);\n\
    \            sum = sum*-1;\n            i++;\n        }\n        else if(sum >\
    \ 0){\n            sum = 0;\n            i++;\n        }\n    }\n    \n    return\
    \ new_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgkx2b4b5: /tmp/tmpgkx2b4b5.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> nums_sorted = nums;\n  int sum = sum(nums);\n \
    \ for (int i = nums_sorted.size() - 1; i >= 0; --i) {\n    if (sum - nums_sorted[i]\
    \ > 0) {\n      std::swap(nums_sorted[i], nums_sorted[i + sum - nums_sorted[i]]);\n\
    \      std::swap(nums_sorted[i + sum - nums_sorted[i]], nums_sorted[i]);\n   \
    \ }\n  }\n  return nums_sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgc724ay8.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgc724ay8.cpp:12:21: error: \u2018sum\u2019 cannot be used\
    \ as a function\n   12 |   int sum = sum(nums);\n      |                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> tmp;\n    for (int\
    \ i=0; i< nums.size(); i++){\n        long sum = 0;\n        for (int j=nums[i];\
    \ j>0; j/=10)\n            sum += j%10;\n        if (tmp.size() == 0 || sum !=\
    \ tmp[tmp.size() - 1])\n            tmp.push_back(sum);\n    }\n    std::sort(tmp.begin(),\
    \ tmp.end());\n    return tmp;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppsflsoy4: /tmp/tmppsflsoy4.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_sorted(nums.size());\n    int num_sum =\
    \ 0;\n    for (size_t i = 0; i < nums.size(); i++) {\n        nums_sorted[i] =\
    \ nums[i];\n        num_sum += nums[i];\n    }\n    if (num_sum > 0) {\n     \
    \   for (int i = 0; i < nums.size(); i++) {\n            num_sum -= nums[i];\n\
    \            for (int j = i; j < nums.size(); j++) {\n                num_sum\
    \ += nums[j];\n                if (num_sum < 0)\n                    break;\n\
    \                if (num_sum == 0)\n                    std::swap(nums_sorted[i],\
    \ nums_sorted[j]);\n            }\n        }\n    }\n    return nums_sorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplcvy2axt: /tmp/tmplcvy2axt.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty())\n        return nums;\n\n    std::vector<long>\
    \ numsCopy(nums);\n    std::sort(numsCopy.begin(), numsCopy.end(), std::greater<long>());\n\
    \    numsCopy.erase(numsCopy.begin() + 1);\n\n    for (size_t i = 0; i < nums.size();\
    \ i++) {\n        size_t j = i;\n        while (j + 1 < nums.size() && nums[j\
    \ + 1] == nums[j] + nums[i]) {\n            j++;\n        }\n        if (j !=\
    \ i)\n            nums[j], nums[i] = nums[i], nums[j];\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7d9k0tvh: /tmp/tmp7d9k0tvh.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret;\n    if (nums.empty())\n        return ret;\n\
    \    long sum = 0;\n    for (auto val : nums)\n        sum += val;\n    long digits\
    \ = nums.size();\n    // sort the list first by digits size\n    std::sort(nums.begin(),\
    \ nums.end(), [sum](long l, long r){\n        return l > r || (l == r && l - r\
    \ < std::min(digits, sum - l));\n    });\n    // now sort by sum\n    std::sort(nums.begin(),\
    \ nums.end(), [sum](long l, long r){\n        return sum - l > sum - r || (sum\
    \ - l == sum - r && l < r);\n    });\n    // now sort by index\n    std::sort(nums.begin(),\
    \ nums.end());\n    for (auto val : nums)\n        ret.push_back(val);\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzk9or304.cpp: In lambda function:\n/tmp/tmpzk9or304.cpp:20:53:\
    \ error: \u2018digits\u2019 is not captured\n   20 |         return l > r || (l\
    \ == r && l - r < std::min(digits, sum - l));\n      |                       \
    \                              ^~~~~~\n/tmp/tmpzk9or304.cpp:19:45: note: the lambda\
    \ has no capture-default\n   19 |     std::sort(nums.begin(), nums.end(), [sum](long\
    \ l, long r){\n      |                                             ^\n/tmp/tmpzk9or304.cpp:17:10:\
    \ note: \u2018long int digits\u2019 declared here\n   17 |     long digits = nums.size();\n\
    \      |          ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzk9or304.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = order_by_points(std::vector<long int>)::<lambda(long int,\
    \ long int)>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    if(nums.empty())\n    {\n        return\
    \ nums;\n    }\n\n    // sort by sum of digits\n    long long sum = 0;\n    for\
    \ (long long num : nums) {\n        sum += num;\n    }\n    std::sort(nums.begin(),\
    \ nums.end(), [](long long n1, long long n2) {\n        return (n1 > n2) - (n1\
    \ < n2);\n    });\n\n    // sort by index in original list\n    long long index\
    \ = 0;\n    for (long long num : nums) {\n        sum += num;\n        if (sum\
    \ > index) {\n            index = sum;\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end(), [](long long n1, long long n2) {\n        return (n1 > n2) - (n1\
    \ < n2);\n    });\n\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpv1ufb604: /tmp/tmpv1ufb604.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long long sum = 0;\n    for (auto\
    \ n: nums)\n    {\n        sum += n;\n    }\n    \n    long long num = 0;\n  \
    \  std::vector<long> ans;\n    long long mod = num;\n    \n    for(auto n : nums)\n\
    \    {\n        num = (num % 10 + n)%10;\n        mod = (num - num)%10;\n    \
    \    if (sum != num) {\n            ans.push_back(num);\n            sum = num;\n\
    \        }\n    }\n    if (sum == num)\n        ans.push_back(num);\n    \n  \
    \  ans.push_back(mod);\n    \n    return ans;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprcpvyrh6: /tmp/tmprcpvyrh6.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> res(nums.size(),\
    \ 0);\n    for (long i : nums)\n    {\n        int sum = 0;\n        while (i\
    \ > 0) {\n            int d = i % 10;\n            sum += d;\n            i /=\
    \ 10;\n        }\n        res[sum - 1]++;\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_waxnm48: /tmp/tmp_waxnm48.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    for (long num: nums) {\n        sum += num;\n\
    \    }\n    std::vector<long> result;\n    for (long num: nums) {\n        if\
    \ (sum != 0) {\n            auto pos = sum - num;\n            result.push_back(pos);\n\
    \        }\n        sum += num;\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpyua9svdo: /tmp/tmpyua9svdo.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Your code here\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpaxmauccn: /tmp/tmpaxmauccn.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::iota(nums.begin(), nums.end(), 0L);\n  std::sort(nums.begin(),\
    \ nums.end(), [](const long a, const long b) {\n    return a + b > 0;\n  });\n\
    \  std::vector<long> result;\n  result.reserve(nums.size());\n  for (auto it =\
    \ nums.begin(); it != nums.end(); ++it)\n    result.push_back(*it);\n  return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbys6zhin: /tmp/tmpbys6zhin.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // your code here\n    long ans[nums.size()];\n    long sum[100];\n\
    \    for (long &x: ans)\n        x = 0;\n\n    for (long &x: sum)\n        x =\
    \ 0;\n\n    for (long &x: nums) {\n        x = 10 * x + nums[x];\n    }\n    std::sort(nums.begin(),\
    \ nums.end(),\n              [&sum](long &a, long &b) { return sum[a - b] < sum[b\
    \ - a]; });\n\n    std::reverse(sum.begin(), sum.end());\n    return nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfm6x3kxd.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfm6x3kxd.cpp:26:22: error: request for member \u2018begin\u2019\
    \ in \u2018sum\u2019, which is of non-class type \u2018long int [100]\u2019\n\
    \   26 |     std::reverse(sum.begin(), sum.end());\n      |                  \
    \    ^~~~~\n/tmp/tmpfm6x3kxd.cpp:26:35: error: request for member \u2018end\u2019\
    \ in \u2018sum\u2019, which is of non-class type \u2018long int [100]\u2019\n\
    \   26 |     std::reverse(sum.begin(), sum.end());\n      |                  \
    \                 ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if(nums.empty())\n        return nums;\n    std::vector<long> nums_sorted\
    \ = nums;\n    std::sort(nums_sorted.begin(), nums_sorted.end());\n    std::vector<long>\
    \ result(nums_sorted.size());\n    int i = 0, j = 0, k = 0, sum = 0;\n    while(i\
    \ < nums_sorted.size()) {\n        sum = nums_sorted[i];\n        j = i;\n   \
    \     while(j < nums_sorted.size() && sum < nums_sorted[j]) {\n            sum\
    \ += nums_sorted[j++];\n        }\n        result[k++] = sum;\n        i++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqe29_xs5: /tmp/tmpqe29_xs5.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy;\n    // O(n) time and O(1) space for\
    \ copy operations\n    std::copy(nums.begin(), nums.end(), std::back_inserter(numsCopy));\n\
    \    long sum = numsCopy.front();\n    std::vector<long> result;\n    // O(n)\
    \ time and O(1) space for intermediate storage\n    for (const auto num : numsCopy)\
    \ {\n        sum += num;\n        result.push_back(num);\n    }\n    // O(n) time\
    \ and O(1) space for final result\n    std::sort(result.begin(), result.end());\n\
    \    // O(n) time and O(1) space\n    for (size_t i = 1; i < result.size(); i++)\
    \ {\n        result[i] += result[i - 1];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpirl2kkmk: /tmp/tmpirl2kkmk.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result(nums.size());\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    \n    std::sort(result.begin(),\
    \ result.end(), [](long a, long b) {return (a > b); });\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjkeddydg: /tmp/tmpjkeddydg.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> answer;\n    long ans = 0;\n    long long sum\
    \ = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum > ans) {\n            ans = sum;\n            answer.push_back(i);\n\
    \        }\n    }\n    if (ans > 0) {\n        answer.push_back(0);\n    }\n \
    \   return answer;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpd8k6c6bi: /tmp/tmpd8k6c6bi.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code in C++11 style\n    // refer to https://en.cppreference.com/w/cpp/algorithm/sort\n\
    \    std::sort(nums.begin(), nums.end(), [](const long &a, const long &b){\n \
    \       return std::abs(a)<std::abs(b);\n    });\n    return nums;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1c3h3bfe: /tmp/tmp1c3h3bfe.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int m = nums.size();\n    int k = m % 10;\n    int l = m / 10;\n\
    \    int temp[100][100];\n    for (int i = 0; i < m; i++) {\n        int curr\
    \ = nums[i];\n        int digit = 0;\n        int sum = 0;\n        while (curr\
    \ != 0) {\n            digit = curr % 10;\n            sum += digit;\n       \
    \     curr = curr /10;\n        }\n        // if sum is same or less than k, then\
    \ keep original order.\n        if (sum >= k || sum == k) {\n            temp[i][k]\
    \ = 1;\n        }\n        else {\n            temp[i][k] = 0;\n        }\n  \
    \      if (sum >= l || sum == l) {\n            temp[i][l] = 1;\n        }\n \
    \       else {\n            temp[i][l] = 0;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (int i = 0; i < k; i++) {\n        for (int j = 0; j < l; j++)\
    \ {\n            if (temp[i][j] == 1) {\n                ans.push_back(j);\n \
    \           }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp08hagcr1: /tmp/tmp08hagcr1.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> res;\n    for (long num : nums) {\n        long\
    \ sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n       \
    \     num /= 10;\n        }\n        res.push_back(sum);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpgu_j0xw8: /tmp/tmpgu_j0xw8.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    int n = nums.size();\n    std::vector<long> sorted(n);\n    //\
    \ To find the number of digits used in the sum\n    std::vector<std::pair<long,\
    \ int> > digits(n);\n    for (long &val : nums) {\n        int digit = val % 10;\n\
    \        digits[digit].first = val;\n        digits[digit].second = digit;\n \
    \   }\n    for (long &val : nums) {\n        int digit = val % 10;\n        long\
    \ cur_sum = digits[digit].first;\n        for (long i = digits[digit].second;\
    \ i > 0; --i)\n            cur_sum += nums[i - 1];\n        sorted[nums.index(val)\
    \ - 1] = cur_sum;\n    }\n    std::sort(sorted.begin(), sorted.end());\n    return\
    \ sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwrc2vovh.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwrc2vovh.cpp:25:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018index\u2019\n   25 |         sorted[nums.index(val)\
    \ - 1] = cur_sum;\n      |                     ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    // vector<long> v;\n    // long s\
    \ = 0;\n    // for(long i : nums){\n    //     s = s+i;\n    //     v.push_back(s);\n\
    \    // }\n    // v.sort([](long l, long r){return l < r});\n    // for(long i\
    \ : v){\n    //     cout<<i<<\" \";\n    // }\n    long s = 0, res[10];\n    for\
    \ (auto i : nums) {\n        s += i;\n        res[s - i] = i;\n    }\n    long\
    \ ans[10];\n    long ans1[10];\n    for (long i = 0; i < 10; i++) {\n        ans[i]\
    \ = res[i];\n    }\n    sort(res, ans);\n    ans1[0] = ans[0];\n    for (long\
    \ i = 1; i < 10; i++) {\n        ans1[i] = ans[i - 1] + ans[i];\n    }\n    sort(ans1,\
    \ ans);\n    long ans2[10];\n    for (long i = 0; i < 10; i++) {\n        ans2[ans1[i]\
    \ - i] = ans1[i];\n    }\n    sort(ans2, ans);\n    std::vector<long> res;\n \
    \   for (long i = 0; i < 10; i++) {\n        res.push_back(ans2[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpusc69s80.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpusc69s80.cpp:32:5: error: \u2018sort\u2019 was not declared\
    \ in this scope; did you mean \u2018std::sort\u2019?\n   32 |     sort(res, ans);\n\
    \      |     ^~~~\n      |     std::sort\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpusc69s80.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note: \u2018std::sort\u2019 declared here\n 4848 |     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last,\n      |     ^~~~\n/tmp/tmpusc69s80.cpp:43:23:\
    \ error: conflicting declaration \u2018std::vector<long int> res\u2019\n   43\
    \ |     std::vector<long> res;\n      |                       ^~~\n/tmp/tmpusc69s80.cpp:22:17:\
    \ note: previous declaration as \u2018long int res [10]\u2019\n   22 |     long\
    \ s = 0, res[10];\n      |                 ^~~\n/tmp/tmpusc69s80.cpp:45:13: error:\
    \ request for member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class\
    \ type \u2018long int [10]\u2019\n   45 |         res.push_back(ans2[i]);\n  \
    \    |             ^~~~~~~~~\n/tmp/tmpusc69s80.cpp:47:12: error: could not convert\
    \ \u2018res\u2019 from \u2018long int [10]\u2019 to \u2018std::vector<long int>\u2019\
    \n   47 |     return res;\n      |            ^~~\n      |            |\n    \
    \  |            long int [10]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Your code here\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1hv9gslp: /tmp/tmp1hv9gslp.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::sort(nums.begin(), nums.end(), [&](long a, long b) -> bool\
    \ {\n        return a<b;\n    });\n    return nums;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp20d0itdv: /tmp/tmp20d0itdv.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, int> m;\n    for (auto i : nums)\n        m[abs(i)]\
    \ += 1;\n    for (auto [d, c] : m)\n        nums[c] = d;\n    return nums;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8v3krj9v: /tmp/tmp8v3krj9v.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(!nums.empty());\n    std::vector<long> sorted_nums;\n  \
    \  sorted_nums.reserve(nums.size());\n    for (long num : nums) {\n        if\
    \ (sorted_nums.size() > 0) {\n            sorted_nums.push_back(sorted_nums.back()\
    \ + num);\n        } else {\n            sorted_nums.push_back(num);\n       \
    \ }\n    }\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    return\
    \ sorted_nums;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpi82jq01e: /tmp/tmpi82jq01e.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // write your code here\n    std::vector<long> ans;\n    for (long\
    \ n : nums) {\n        long count = 0;\n        while (n > 0) {\n            n\
    \ /= 10;\n            ++count;\n        }\n        ans.push_back(count);\n   \
    \ }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp25lew9xj: /tmp/tmp25lew9xj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty())\n        return nums;\n    // Initialize result\
    \ vector with sorted copy of input vector\n    std::vector<long> result(nums.size());\n\
    \    std::iota(result.begin(), result.end(), 0);\n    long current_sum = 0;\n\
    \    // Compute sum of digits in nums\n    for (long num: nums)\n        current_sum\
    \ += num;\n    // Compute indices of nums whose sum is equal to current_sum\n\
    \    std::vector<long> indices;\n    for (long i = 0; i < nums.size(); ++i) {\n\
    \        if (current_sum == sum(nums, i)) {\n            // Add num to indices\
    \ vector\n            indices.push_back(i);\n            // Remove num from input\
    \ vector\n            nums.erase(nums.begin() + i);\n        }\n    }\n    //\
    \ Sort nums according to the indices in indices vector\n    for (size_t i = 0;\
    \ i < indices.size() - 1; ++i)\n        std::iter_swap(result[indices[i]], result[indices[i\
    \ + 1]]);\n    // Return result vector\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpregbcgco.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpregbcgco.cpp:23:28: error: \u2018sum\u2019 was not declared\
    \ in this scope\n   23 |         if (current_sum == sum(nums, i)) {\n      | \
    \                           ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpregbcgco.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In instantiation of \u2018void std::iter_swap(_ForwardIterator1, _ForwardIterator2)\
    \ [with _ForwardIterator1 = long int; _ForwardIterator2 = long int]\u2019:\n/tmp/tmpregbcgco.cpp:32:66:\
    \   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:151:12:\
    \ error: invalid type argument of unary \u2018*\u2019 (have \u2018long int\u2019\
    )\n  151 |       swap(*__a, *__b);\n      |            ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:151:18:\
    \ error: invalid type argument of unary \u2018*\u2019 (have \u2018long int\u2019\
    )\n  151 |       swap(*__a, *__b);\n      |                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy(nums);\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [&nums_copy](int lhs, int rhs) {\n        int sum = 0;\n  \
    \      std::vector<int> digits_lhs(10, 1);\n        for (int i = 0; i < 10; i++)\
    \ {\n            digits_lhs[i] = nums_copy[i] / 10;\n            sum += digits_lhs[i];\n\
    \            nums_copy[i] %= 10;\n        }\n        std::vector<int> digits_rhs(10,\
    \ 1);\n        for (int i = 0; i < 10; i++) {\n            digits_rhs[i] = nums_copy[rhs\
    \ / 10];\n            sum += digits_rhs[i];\n            nums_copy[rhs / 10] %=\
    \ 10;\n        }\n        return sum < 0 ? -1 : (sum == 0 ? 0 : 1);\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmp0hzl65_j': free(): invalid size: 0x0000000001ab0cb0\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2adf1dd39329]\n\
    /tmp/tmp0hzl65_j[0x403bdc]\n/tmp/tmp0hzl65_j[0x403956]\n/tmp/tmp0hzl65_j[0x4035fe]\n\
    /tmp/tmp0hzl65_j[0x403110]\n/tmp/tmp0hzl65_j[0x402c45]\n/tmp/tmp0hzl65_j[0x400bd0]\n\
    /tmp/tmp0hzl65_j[0x402045]\n/tmp/tmp0hzl65_j[0x401e0c]\n/tmp/tmp0hzl65_j[0x401c8c]\n\
    /tmp/tmp0hzl65_j[0x401b1b]\n/tmp/tmp0hzl65_j[0x401a6d]\n/tmp/tmp0hzl65_j[0x400c6e]\n\
    /tmp/tmp0hzl65_j[0x400dcf]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2adf1dcda555]\n\
    /tmp/tmp0hzl65_j[0x4008a9]\n======= Memory map: ========\n00400000-00407000 r-xp\
    \ 00000000 08:02 342404                             /tmp/tmp0hzl65_j\n00606000-00607000\
    \ r--p 00006000 08:02 342404                             /tmp/tmp0hzl65_j\n00607000-00608000\
    \ rw-p 00007000 08:02 342404                             /tmp/tmp0hzl65_j\n01a9f000-01ad1000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2adf1d1a1000-2adf1d1c3000\
    \ r-xp 00000000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2adf1d1c3000-2adf1d1c6000\
    \ rw-p 00000000 00:00 0 \n2adf1d1df000-2adf1d1e4000 rw-p 00000000 00:00 0 \n2adf1d3c2000-2adf1d3c3000\
    \ r--p 00021000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2adf1d3c3000-2adf1d3c4000\
    \ rw-p 00022000 08:01 50332378                   /usr/lib64/ld-2.17.so\n2adf1d3c4000-2adf1d3c5000\
    \ rw-p 00000000 00:00 0 \n2adf1d3c5000-2adf1d58e000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2adf1d58e000-2adf1d78d000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2adf1d78d000-2adf1d798000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2adf1d798000-2adf1d79b000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2adf1d79b000-2adf1d79e000 rw-p 00000000 00:00 0 \n2adf1d79e000-2adf1d89f000 r-xp\
    \ 00000000 08:01 50332722                   /usr/lib64/libm-2.17.so\n2a"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) return nums;\n\n    // Count sum of digits\n\
    \    long s = 0;\n    for (long i : nums) {\n        s += i;\n    }\n\n    //\
    \ Sort the numbers\n    std::sort(nums.begin(), nums.end(), [&s](const long &\
    \ a, const long & b) {\n        return s + a - b;\n    });\n\n    // Return the\
    \ result\n    return nums;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpeo3a5pmb: /tmp/tmpeo3a5pmb.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> answer;\n    long smallest_sum = 0;\n    long\
    \ greatest_sum = 0;\n    for (long num : nums) {\n        long sum = num;\n  \
    \      while (sum >= 10) {\n            sum /= 10;\n        }\n        answer\
    \ .push_back(sum);\n        smallest_sum += sum;\n        greatest_sum += sum;\n\
    \    }\n    // If there is only one number\n    if (nums.size() == 1) {\n    \
    \    answer.push_back(nums[0]);\n        return answer;\n    }\n    // If there\
    \ is more than one number with the same sum\n    // then we need to order them\
    \ based on their index.\n    // For example: given [11, -12, 13], the order should\
    \ be [-12, -13, 11]\n    // because they have same sum of their digits.\n    if\
    \ (smallest_sum > greatest_sum) {\n        std::sort(answer.begin(), answer.end(),\
    \ \n                  [smallest_sum](long n1, long n2){ return smallest_sum -\
    \ n1 < n2 - smallest_sum; });\n    } else {\n        std::sort(answer.begin(),\
    \ answer.end(), \n                  [greatest_sum](long n1, long n2){ return greatest_sum\
    \ - n1 < n2 - greatest_sum; });\n    }\n    return answer;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1kvs6584: /tmp/tmp1kvs6584.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> points;\n    long\
    \ t = 0;\n    for(long &i: nums){\n        t += i;\n    }\n    std::sort(points.begin(),\
    \ points.end(), [&](long &a, long &b) {\n        return a > b ? a : b;\n    });\n\
    \    return points;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4jz21kkj: /tmp/tmp4jz21kkj.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpiz841mi5: /tmp/tmpiz841mi5.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if (nums.empty()) {\n        return nums;\n    }\n    std::vector<long>\
    \ nums_sorted = nums;\n    std::sort(nums_sorted.begin(), nums_sorted.end(), [&nums]\
    \ (long a, long b) {\n        int digit_a = (int) (a/10);\n        int digit_b\
    \ = (int) (b/10);\n        int sum_of_digits = digit_a + digit_b;\n        return\
    \ sum_of_digits < 0;\n    });\n    return nums_sorted;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0y9pyugq: /tmp/tmp0y9pyugq.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  std::vector<long> ordered_nums;\n  ordered_nums.reserve(nums.size());\n\
    \  int prev_sum = 0;\n  for (long i : nums) {\n    int cur_sum = prev_sum + i;\n\
    \    ordered_nums.push_back(cur_sum);\n    prev_sum = cur_sum;\n  }\n  std::sort(ordered_nums.begin(),\
    \ ordered_nums.end());\n  return ordered_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1s5qdw70: /tmp/tmp1s5qdw70.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::map<long, std::pair<long, int>> sums;\n\n    for (long &num\
    \ : nums) {\n        long sum = 0;\n        int count = 0;\n        while (num)\
    \ {\n            sum += num % 10;\n            num /= 10;\n            count++;\n\
    \        }\n        sums[sum] += count;\n    }\n\n    std::vector<long> sorted;\n\
    \    for (auto &sum : sums) {\n        sorted.push_back(sum.first);\n    }\n \
    \   std::sort(sorted.begin(), sorted.end(), [&sums](long x, long y) {\n      \
    \  return sums[x] == sums[y] ? 0 : sums[x] > sums[y];\n    });\n    return sorted;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8h3s25i3.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8h3s25i3.cpp:21:19: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::map<long int, std::pair<long int, int> >::mapped_type\u2019\
    \ {aka \u2018std::pair<long int, int>\u2019} and \u2018int\u2019)\n   21 |   \
    \      sums[sum] += count;\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> ret(nums.size());\n    for (long &i : ret) {\n\
    \        int count = 0;\n        while (i > 0) {\n            i /= 10;\n     \
    \       ++count;\n        }\n        ret[count] = i;\n    }\n\n    long prev =\
    \ 0;\n    for (long &i : ret) {\n        while (i > prev) {\n            long\
    \ temp = prev;\n            prev = i;\n            i = temp;\n        }\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpehe603hw: /tmp/tmpehe603hw.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Do not change this function.\n    std::vector<long> ans;\n \
    \   for (long &i : nums) {\n        long sumofdigits = 0;\n        while (i !=\
    \ 0) {\n            sumofdigits += i % 10;\n            i /= 10;\n        }\n\
    \        if (ans.size() == 0) {\n            ans.push_back(i);\n            ans.push_back(i);\n\
    \        } else if (ans.size() == 1 && sumofdigits > ans[0]) {\n            ans.push_back(i);\n\
    \            ans.push_back(i);\n        } else {\n            int idx = -1;\n\
    \            long sum = 0;\n            for (int j = 0; j < ans.size(); j++) {\n\
    \                sum += ans[j] / 10;\n                sum += ans[j] % 10;\n  \
    \              if (sum == sumofdigits) {\n                    idx = j;\n     \
    \           }\n            }\n            if (idx != -1) {\n                std::swap(ans[idx],\
    \ ans[i]);\n            } else {\n                ans.push_back(i);\n        \
    \        ans.push_back(i);\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptri4vr1d: /tmp/tmptri4vr1d.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n \
    \   }\n    long last = sum / 10;\n    long count = 0;\n    std::vector<long> res(10);\n\
    \    for (long i : nums) {\n        if (i == last) {\n            count++;\n \
    \           res[count % 10] = i;\n        } else {\n            count = 0;\n \
    \           sum = i;\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnfuhyq1l: /tmp/tmpnfuhyq1l.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    if(!nums) return nums;\n    int sum = 0;\n    std::vector<long>\
    \ nums_with_sum;\n    for(auto num : nums) {\n        if(num < 0)\n          \
    \  num *= -1;\n        if(!nums_with_sum.empty()) {\n            long prev_sum\
    \ = sum;\n            sum = prev_sum + num;\n            long next_sum = sum;\n\
    \            while(next_sum == prev_sum) {\n                nums_with_sum.push_back(nums_with_sum.back());\n\
    \                prev_sum += nums_with_sum.back();\n                next_sum +=\
    \ nums_with_sum.back();\n                --nums_with_sum.back();\n           \
    \ }\n        }\n        sum += num;\n        nums_with_sum.push_back(num);\n \
    \   }\n    return nums_with_sum;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf44maj6m.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf44maj6m.cpp:11:8: error: no match for \u2018operator!\u2019\
    \ (operand type is \u2018std::vector<long int>\u2019)\n   11 |     if(!nums) return\
    \ nums;\n      |        ^~~~~\n/tmp/tmpf44maj6m.cpp:11:8: note: candidate: \u2018\
    operator!(bool)\u2019 <built-in>\n/tmp/tmpf44maj6m.cpp:11:8: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018bool\u2019\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> sorted_nums;\n    long sum = 0;\n    for (long\
    \ n : nums) {\n        sum += n; // sum += n will change the value of sum.\n \
    \       sorted_nums.push_back(sum);\n    }\n    std::sort(sorted_nums.begin(),\
    \ sorted_nums.end());\n    return sorted_nums;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkvkeyj4b: /tmp/tmpkvkeyj4b.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    long sum = 0; // Initialize sum as 0.\n    std::sort(nums.begin(),\
    \ nums.end(), [&](long a, long b) {\n        // Use C++11's lambda to implement\
    \ the comparison logic here.\n        sum += (a + b) % 10;\n        // Return\
    \ 0 if a and b are equal, -1 if b is greater, 1 if b is less.\n        return\
    \ sum == 0;\n    });\n    return nums;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpi1tnoncz: /tmp/tmpi1tnoncz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n  // Write your code here.\n  long sum = 0;\n  std::vector<long> nums_copy;\n\
    \  for (int i = 0; i < nums.size(); i++) {\n    int num = nums[i];\n    sum +=\
    \ num;\n    nums_copy.push_back(num);\n  }\n\n  std::sort(nums_copy.begin(), nums_copy.end(),\
    \ [&](long x, long y){return sum > y;});\n\n  return nums_copy;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_guqg0sy: /tmp/tmp_guqg0sy.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    assert(nums.size() > 0);\n    std::vector<long> ordered_nums;\n\
    \    long max_sum = std::numeric_limits<long>::max();\n    for (long &num : nums)\
    \ {\n        sum += num;\n        if (max_sum < sum) {\n            ordered_nums.clear();\n\
    \            sum = 0;\n        }\n        if (sum > 0) {\n            ordered_nums.push_back(num);\n\
    \        }\n        max_sum = std::min(max_sum, sum);\n    }\n    return ordered_nums;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4qck7r95.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4qck7r95.cpp:15:9: error: \u2018sum\u2019 was not declared\
    \ in this scope; did you mean \u2018num\u2019?\n   15 |         sum += num;\n\
    \      |         ^~~\n      |         num\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums2;\n    long sum = 0;\n    for (auto &n:\
    \ nums)\n    {\n        sum += n;\n        nums2.push_back(n);\n    }\n    //\
    \ std::sort(nums2.begin(), nums2.end(), sort_by_points);\n    std::sort(nums2.begin(),\
    \ nums2.end(), sort_by_points);\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoticwufm.cpp: In function \u2018std::vector<long int> order_by_points(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoticwufm.cpp:19:43: error: \u2018sort_by_points\u2019\
    \ was not declared in this scope; did you mean \u2018order_by_points\u2019?\n\
    \   19 |     std::sort(nums2.begin(), nums2.end(), sort_by_points);\n      | \
    \                                          ^~~~~~~~~~~~~~\n      |           \
    \                                order_by_points\n"
  exit_code: 1
  status: SyntaxError
