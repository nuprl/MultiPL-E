name: HumanEval_24_largest_divisor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find\
  \ the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
  // 5\nlong largest_divisor(long n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
  \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
  \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
completions: ["    long long int i = 1, j = 1;\n    while(j <= n / i) {\n        i\
    \ += (2 * j);\n        j += i;\n    }\n    return i;", "    long res = 1;\n  \
    \  long temp = n;\n    while(temp > 0){\n        res = temp;\n        temp /=\
    \ 2;\n    }\n    return res;", "  long factor = 1;\n  while ( n >= factor ) {\n\
    \    factor *= 2;\n  }\n  return factor;", "\tlong max_divisor = 0;\n\tlong i;\n\
    \tlong t;\n\tlong m = 1;\n\n\tfor (i = 1; i < n; i++) {\n\t\tt = m % n;\n\t\t\
    m = t;\n\t\tif (i == t)\n\t\t\tcontinue;\n\t\tif (t != 0)\n\t\t\tmax_divisor =\
    \ i;\n\t}\n\treturn max_divisor;", "\tif(n == 1)\n\t\treturn 1;\n\tlong result\
    \ = 0;\n\tlong temp = n;\n\tfor(long i = 2; i <= temp; i++)\n\t{\n\t\tif(n % i\
    \ == 0)\n\t\t\tresult += i;\n\t}\n\treturn result;", "  assert(n > 1);\n  long\
    \ maxDiv = n;\n  long currDiv = n;\n  while (currDiv % 2 == 0 && currDiv > maxDiv)\
    \ {\n    maxDiv = currDiv;\n    currDiv = maxDiv * 2;\n  }\n  return currDiv;",
  "  assert(n % 2 == 0);\n  long largest_divisor = n;\n  long divisor = 3;\n  while\
    \ (divisor <= largest_divisor / 2) {\n    if (n % divisor == 0)\n      largest_divisor\
    \ = divisor;\n    divisor *= 2;\n  }\n  return largest_divisor;", "    long res\
    \ = 0;\n    long d = 1, res = 1;\n    while (d < n / 2) {\n        res = res *\
    \ 2 + d;\n        d = d + 1;\n    }\n    return res;", "    long long max_divisor\
    \ = 1;\n    long long divisor_count = 1;\n    for (int i = 1; i * i <= n; ++i)\
    \ {\n        while (n % i == 0) {\n            n = n / i;\n            ++divisor_count;\n\
    \            if (divisor_count > max_divisor) {\n                max_divisor =\
    \ divisor_count;\n            }\n        }\n    }\n    return max_divisor;", "\t\
    // Your code here\n\tassert(n % 2 == 0);\n\tlong long mod = n;\n\tlong long maxDivisor\
    \ = 1;\n\twhile (mod != 0) {\n\t\tmod = mod / 2;\n\t\tmaxDivisor++;\n\t}\n\treturn\
    \ maxDivisor;", "    long res = n;\n    for(long d = 2; d <= n; ++d)\n       \
    \ if(n%d == 0)\n            res = d;\n    return res;", "    std::queue<long>\
    \ q;\n    q.push(n);\n    long max;\n    while (!q.empty()) {\n        max = q.front();\n\
    \        q.pop();\n        for (long i = 1; i * i <= n; i++) {\n            if\
    \ (n % i == 0) {\n                q.push(n/i);\n                if (n > max)\n\
    \                    max = n;\n                break;\n            }\n       \
    \ }\n    }\n    return max;", "    long count = 0;\n    long d = n;\n    while(d\
    \ % 2 == 0) {\n        count++;\n        d /= 2;\n    }\n    if(count > 0) {\n\
    \        return count;\n    } else {\n        return n;\n    }", "    long ans\
    \ = 1;\n    long i = 2;\n    while (i <= n/2) {\n        if (n % i == 0)\n   \
    \         ans = i;\n        i++;\n    }\n    return ans;", "  assert(n % 2 ==\
    \ 0);\n  long largest = n;\n  long t = 2;\n  while (t < n){\n    if (n % t ==\
    \ 0){\n      largest = t;\n    }\n    t++;\n  }\n  return largest;", "    long\
    \ long c = 1;\n    long long d = 0;\n    long long f = 0;\n    long long g = 1;\n\
    \    long long h = 0;\n    while (g < n) {\n        g = c * g + h;\n        if\
    \ (g < n) {\n            h = g;\n        }\n        c += d;\n        d = g - h;\n\
    \    }\n    return c;", "    // Initialize result to 1\n    long result = 1;\n\
    \    // Initialize n to largest number that can be divided by result evenly\n\
    \    long div = n;\n    // Now initialize i to 2 to avoid divide-by-zero\n   \
    \ long i = 2;\n    // While i is smaller than or equal to div, divide it by result\
    \ and decrease i\n    while(i <= div) {\n        div = div / i;\n        i--;\n\
    \    }\n    // Store the answer in the result variable\n    result = div;\n  \
    \  // Return the result variable\n    return result;", "    if(n < 2)\n      \
    \  return 1;\n    long largest = 1;\n    for(long i = 2; i < n; i++) {\n     \
    \   if(n % i == 0) {\n            largest = i;\n        }\n    }\n    return largest;",
  "    long long int max_divisor = n; //initialise max_divisor with n\n    long long\
    \ int max_divisor_ind = 1;\n    for(int i = 2; i <= n; ++i) {\n        if(n %\
    \ i == 0) {\n            if(max_divisor < i) {\n                max_divisor =\
    \ i;\n                max_divisor_ind = i;\n            }\n        }\n    }\n\
    \    return max_divisor;", "\tassert(n>0);\n\tlong l=n; int t=n%2;\n\tfor(int\
    \ i=3;i*i<t;++i){\n\t\tt=t*i;\n\t\tif(t%n==0){\n\t\t\tl=i;\n\t\t}\n\t}\n\treturn\
    \ l;", "    long long remainder = n % 2;\n    long long max_divisor = 1;\n   \
    \ for(long long i = 3; i <= n; i*=2)\n    {\n        if(n % i == 0)\n        {\n\
    \            long long temp = n;\n            while(temp % i == 0) {\n       \
    \         temp = temp / i;\n            }\n            max_divisor = i;\n    \
    \        assert(temp == n);\n            break;\n        }\n    }\n    assert(remainder\
    \ == 0);\n    return max_divisor;", '    return sqrt(n);', "\tlong res = n;\n\t\
    for(long i = 2; i <= n/2; i++) {\n\t\tif(n % i == 0)\n\t\t\tres = i;\n\t}\n\t\
    return res;", "    assert(n >= 2);\n    long ans = 1;\n    long limit = sqrt(n);\n\
    \    long div = 1;\n    while(limit < n) {\n        div++;\n        limit *= div;\n\
    \    }\n    while(n >= limit) {\n        long div = 1;\n        while(n >= limit)\
    \ {\n            div++;\n            limit *= div;\n        }\n        ans = max(ans,\
    \ div);\n        n /= limit;\n    }\n    return ans;", "  assert(n > 0);\n  long\
    \ largest = 1;\n  for (int i = 2; i < n; ++i) {\n    if (n % i == 0) {\n     \
    \ largest = i;\n    }\n  }\n  return largest;", "    long l = 1;\n    long m =\
    \ 0;\n    long r = n;\n    while (r != 0) {\n        long q = l / r;\n       \
    \ if (q == 0)\n            m = r;\n        else {\n            l = q;\n      \
    \      m = r / l;\n        }\n        r = m;\n    }\n    return m;", "\tif (n\
    \ < 2)\n\t\treturn n;\n\tlong max_div = 1;\n\tlong max_div_num = n+1;\n\tlong\
    \ max_div_num2 = n;\n\twhile (max_div_num % 2 == 0) {\n\t\tmax_div_num /= 2;\n\
    \t\tmax_div_num2 /= 2;\n\t}\n\twhile (max_div_num % 3 == 0) {\n\t\tmax_div_num\
    \ /= 3;\n\t\tmax_div_num2 /= 3;\n\t}\n\twhile (max_div_num % 5 == 0) {\n\t\tmax_div_num\
    \ /= 5;\n\t\tmax_div_num2 /= 5;\n\t}\n\twhile (max_div_num % 7 == 0) {\n\t\tmax_div_num\
    \ /= 7;\n\t\tmax_div_num2 /= 7;\n\t}\n\treturn max_div_num2;", "  // Initialize\
    \ the array\n  long arr[n+1];\n  // Initialize all the elements of the array to\
    \ 1\n  for(long i=0;i<=n;i++)\n    arr[i] = 1;\n  // Find the largest number that\
    \ divides n evenly and smaller than n\n  long max = 0;\n  for(long i=1;i<=n;i++)\n\
    \    if(arr[i] > max)\n      max = arr[i];\n  for(long i=1;i<=n;i++)\n    if(arr[i]\
    \ >= max)\n      arr[i]++;\n  for(long i=1;i<=n;i++)\n    if(arr[i] > max)\n \
    \     max = arr[i];\n  return max;", "\t// Use Sieve of Eratosthenes\n\tstd::vector\
    \ <bool> isPrime(std::sqrt(n) + 1);\n\tfor (int i = 2; i < n; i++)\n\t\tisPrime[i]\
    \ = true;\n\tfor (int i = 2; i <= std::sqrt(n); i++) {\n\t\tif (isPrime[i]) {\n\
    \t\t\tfor (int j = i * i; j < n; j += i)\n\t\t\t\tisPrime[j] = false;\n\t\t}\n\
    \t}\n\tfor (int i = 2; i < n; i++)\n\t\tif (isPrime[i])\n\t\t\treturn i;\n\tassert(0);\n\
    \treturn -1;", "    long ans = n;\n    while(true) {\n        if(n%2 == 0) {\n\
    \            ans = 2;\n            break;\n        }\n        ans = ans*3 + 1;\n\
    \        if(ans > n) break;\n        n /= 2;\n    }\n    return ans;", "    long\
    \ divisor, largest_divisor = 1, last_divisible_divisor = 1;\n    // First calculate\
    \ the last divisor smaller than n\n    for (divisor = 1; divisor <= n; divisor++)\
    \ {\n        if (n % divisor == 0) {\n            last_divisible_divisor = divisor;\n\
    \            break;\n        }\n    }\n\n    // Now, find the largest divisor\
    \ that divides n evenly, and larger than last_divisible_divisor\n    while (true)\
    \ {\n        largest_divisor = last_divisible_divisor;\n        for (divisor =\
    \ last_divisible_divisor + 1; divisor <= n; divisor++) {\n            if (n %\
    \ divisor == 0) {\n                largest_divisor = divisor;\n              \
    \  break;\n            }\n        }\n\n        if (largest_divisor <= last_divisible_divisor)\
    \ {\n            break;\n        }\n\n        last_divisible_divisor = largest_divisor;\n\
    \    }\n\n    return largest_divisor;", "\tif (n == 0)\n\t\treturn 0;\n\tlong\
    \ max_div = 1;\n\twhile (n % 2 == 0)\n\t\tmax_div <<= 1;\n\tlong div_of_max_div\
    \ = max_div;\n\tfor (int i = 3; i <= max_div; i *= 2)\n\t\tif (n % i == 0)\n\t\
    \t\tdiv_of_max_div = i;\n\treturn div_of_max_div;", "    assert(n>0);\n    long\
    \ max_n = 1, current_n = n;\n    while(current_n>max_n){\n        max_n=current_n;\n\
    \        for(long i=max_n; i>=2; i--){\n            if(current_n%i == 0){\n  \
    \              current_n= current_n/i;\n                break;\n            }\n\
    \        }\n    }\n    return max_n;", "  if (n<2) return n;\n  long result=n;\n\
    \  for (long i=3; i<=n/2; i++) if (n%i==0) result=i;\n  return result;", "  long\
    \ max_div = 1, max_div2 = 1, div = n;\n  for (int i = 2; i <= n / i; i++) {\n\
    \    if ((n % i == 0) && (div % i == 0)) {\n      if (max_div <= i) {\n      \
    \  max_div = i;\n        max_div2 = div;\n      } else if (max_div2 <= i) {\n\
    \        max_div2 = i;\n      }\n      div = div / i;\n    }\n  }\n  return max_div2;",
  "    long max_divisor = 1;\n    long max_divisor_squared = max_divisor * max_divisor;\n\
    \n    while(n > max_divisor) {\n        n /= max_divisor;\n        max_divisor_squared\
    \ *= max_divisor;\n    }\n\n    return max_divisor;", "    long a = n % 10;\n\
    \    return n > a ? largest_divisor(n / 10) : a;", "    long m = 0;\n    long\
    \ i = 0;\n    for (; ;) {\n        if (n % i == 0) {\n            m = i;\n   \
    \         i += 1;\n        } else {\n            i += 2;\n        }\n        if\
    \ (i > n) {\n            break;\n        }\n    }\n    return m;", "    long max_div\
    \ = 1, div = n;\n    while (div > max_div) {\n        long next = max_div * max_div;\n\
    \        if (next > div)\n            next /= div;\n        max_div = next;\n\
    \    }\n    return max_div;", "    assert(n % 2 == 0);\n    long l = 3 * n + 1;\n\
    \    for(long m = 4; m <= l; m++) {\n        if(n % m == 0) {\n            return\
    \ m;\n        }\n    }\n    return l;", "  long maxDivisor = 1; // the largest\
    \ number that divides n evenly will be the divisor after this\n  for (long i =\
    \ 1; i*i < n; i++) {\n    if (n % i == 0) {\n      if (maxDivisor < i) {\n   \
    \     maxDivisor = i;\n      }\n    }\n  }\n  return maxDivisor;", "\t// Fill\
    \ this in\n\t\n\t// Your code here\n\treturn 0;", "    long d = 0;\n    long max_d\
    \ = 0;\n    long max_d_index = 0;\n    for(long i=n; i>1; i/=2) {\n        if(i%2)\n\
    \            d++;\n        if( d > max_d ) {\n            max_d = d;\n       \
    \     max_d_index = i;\n        }\n    }\n    return max_d_index;", "    int max_divisor\
    \ = n;\n    int max_divisor_value = n;\n    \n    for(int divisor = 2; divisor\
    \ <= n; divisor++) {\n        if(n % divisor == 0) {\n            int value =\
    \ n / divisor;\n            if((max_divisor < value) && (value > max_divisor_value))\
    \ {\n                max_divisor = value;\n                max_divisor_value =\
    \ value;\n            }\n        }\n    }\n    return max_divisor;", "    long\
    \ max_divisor = 1;\n    long max_divisor_index = -1;\n    for (long divisor =\
    \ 2; divisor <= n; divisor++) {\n        if (n % divisor == 0) {\n           \
    \ if (max_divisor <= divisor) {\n                max_divisor = divisor;\n    \
    \            max_divisor_index = divisor;\n            }\n        }\n    }\n \
    \   if (max_divisor_index == 1)\n        return 1;\n    else\n        return max_divisor;",
  "    long max_d = n;\n    long max_d = max_d / max_d / max_d;\n    return max_d;",
  "    long x = n;\n    long max_num = x;\n    long divisor = 1;\n    while (x > 2)\
    \ {\n        if (x % 2 == 0) {\n            x /= 2;\n            divisor *= 2;\n\
    \        } else {\n            x /= 2;\n        }\n        if (x > max_num) {\n\
    \            max_num = x;\n        }\n    }\n    return max_num;", "    if(n <\
    \ 2) {\n        // If n is less than 2, then it has no divisors.\n        // So\
    \ return 1.\n        return 1;\n    }\n    \n    // Initialize the array of prime\
    \ number\n    vector<long> primes;\n    primes.push_back(n);\n    \n    // Loop\
    \ until you find a prime number that divides n evenly\n    for(long p = 2; p <=\
    \ sqrt(n); p++) {\n        if(n % p == 0) {\n            primes.push_back(p);\n\
    \            break;\n        }\n    }\n    \n    // Find the largest prime number\n\
    \    long largest_p = primes[0];\n    for(long i = 1; i < primes.size(); i++)\
    \ {\n        if(primes[i] > largest_p) {\n            largest_p = primes[i];\n\
    \        }\n    }\n    \n    return largest_p;", "  // n is even, therefore a\
    \ number greater than n must divide it evenly\n  // since all multiples of n are\
    \ greater than n\n  if(n%2 == 0){\n    long max_divisor = n;\n    while(max_divisor%2\
    \ == 0){\n      max_divisor = max_divisor/2;\n    }\n    return max_divisor;\n\
    \  }\n  // n is odd, so return one less than the largest number that divides n\
    \ evenly\n  long max_divisor = n;\n  while(max_divisor%2 == 0){\n    max_divisor\
    \ = max_divisor/2;\n  }\n  return max_divisor+1;", "\tassert(n > 0);\n\tlong res\
    \ = 0;\n\tlong curr = 0;\n\twhile (n != 0) {\n\t\tcurr = n % 10;\n\t\tres = (res\
    \ * 10 + curr) % n;\n\t\tn = n / 10;\n\t}\n\treturn res;", "    if (n < 2) return\
    \ n;\n    // Use divide-and-conquer to get the divisors until you hit n\n    long\
    \ long long n2 = n;\n    for (long long i = 3; i <= n; i += 2) {\n        n2 =\
    \ n2 / i;\n    }\n    return n2;", "    long max_divisor = 1;\n    for (long i\
    \ = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long div = n / i;\n\
    \            if (div > max_divisor) {\n                max_divisor = div;\n  \
    \          }\n        }\n    }\n    return max_divisor;", "    long largest =\
    \ 2;\n    for(long div = 2 * largest; div <= n; div += largest) {\n        if\
    \ (n % div == 0) {\n            return div;\n        }\n    }\n    return largest;",
  "    assert(n >= 0);\n    long max_div = 1, max_div2 = 1;\n    long div = 1, div2\
    \ = 1;\n    // Iterate from 1 to n and find out if any number divides n evenly\n\
    \    for(long i = 1 ; i < n ; ++i) {\n        if( n % i == 0) {\n            div\
    \ = i;\n            break;\n        }\n    }\n    max_div = div;\n    div += 1;\n\
    \    for(long i = 2 ; i < n ; ++i) {\n        if( n % i == 0) {\n            div2\
    \ = i;\n            break;\n        }\n    }\n    max_div2 = max_div2 > div2 ?\
    \ max_div2 : div2;\n    return max_div2;", "\tlong max_divisor = 0;\n\tlong current_divisor\
    \ = 1;\n\twhile (current_divisor <= n) current_divisor *= 2;\n\twhile (current_divisor\
    \ > max_divisor) max_divisor = current_divisor;\n\tassert(current_divisor <= n);\n\
    \treturn max_divisor;", "    long long res = 0;\n    long long m = 0;\n    while(n\
    \ > 1) {\n        long long temp = 1;\n        while (m <= n && temp <= n) {\n\
    \            temp *= m;\n            m++;\n        }\n        res = temp;\n  \
    \      n = m;\n        m = 0;\n    }\n    return res;", "    long res = 0;\n \
    \   // Using a loop to find the largest divisor\n    for (long i = 1; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            res = i;\n            break;\n   \
    \     }\n    }\n    return res;", "    if(n==0)\n        return 0;\n    if(n==1)\n\
    \        return 1;\n    vector<long long int> primes(n+1);\n    primes[0]=2;\n\
    \    for(int i=2;i<=primes.size();i++) {\n        if(primes[i]==0)\n         \
    \   continue;\n        for(int j=i*i;j<primes.size();j+=i) {\n            primes[j]=1;\n\
    \            for(long long int k=i*i;k<primes.size();k+=i)\n                primes[k]=0;\n\
    \        }\n    }\n    vector<long long int> factors(n+1);\n    factors[0]=1;\n\
    \    for(int i=1;i<primes.size();i++) {\n        long long int candidate=1;\n\
    \        for(int j=0;j<=i;j++) {\n            if(primes[i]&(j==i))\n         \
    \       candidate*=j;\n        }\n        if(candidate>factors[n])\n         \
    \   factors[n]=candidate;\n    }\n    return factors[n];", "    int div = 1;\n\
    \    while (n > 0) {\n        if (n % div == 0) {\n            return div;\n \
    \       }\n        ++div;\n    }\n    return -1;", "    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long largest = 1;\n    while (y != 0) {\n     \
    \   if (n / y == 0) {\n            if (y % 2 == 0) {\n                largest\
    \ = z;\n            }\n            z = y;\n            y /= 2;\n        } else\
    \ {\n            y *= 2;\n        }\n    }\n    return largest;", "\tlong largest_divisor\
    \ = n; //Initialize largest divisor to n\n\tlong div = 0;\n\tfor(long i = 3; i\
    \ <= n; i *= 2) {\n\t\tif (n % i == 0) {\n\t\t\tdiv = i;\n\t\t\twhile (div * div\
    \ < n) div++;\n\t\t}\n\t}\n\treturn div;", "  // write your code here\n  long\
    \ largest_div = 0;\n  for (long i = 1; i < n; i++) {\n    long div = n / i;\n\
    \    if (div > largest_div) {\n      largest_div = div;\n    }\n  }\n  return\
    \ largest_div;", "    long long m = 1;\n    long long c = 2;\n    // while (m\
    \ <= n / c) { ... } --> n / c >= m\n    while(c < n) {\n        m += c;\n    \
    \    // cout << m << endl;\n        c += 2;\n    }\n    return m;", "\tint i =\
    \ 1;\n\tlong largest_divisor = n;\n\twhile (i <= n/2) {\n\t\tif (n % i == 0) {\n\
    \t\t\tlargest_divisor = i;\n\t\t}\n\t\ti++;\n\t}\n\treturn largest_divisor;",
  "    long maxDiv = sqrt(n);\n    long largest_divisor = 1;\n    long counter = 1;\n\
    \    for (int i = 1; i < maxDiv; i++) {\n        if (n % i == 0) {\n         \
    \   counter++;\n            if (counter > largest_divisor) {\n               \
    \ largest_divisor = counter;\n            }\n        }\n    }\n    return largest_divisor;",
  "    long nDivisor = n;\n    long largest_div = 1;\n    long largest_div_prime =\
    \ 1;\n    while (true) {\n        long div = floor(nDivisor / largest_div);\n\
    \        if (nDivisor % div == 0)\n            break;\n        largest_div = largest_div\
    \ * largest_div_prime;\n        largest_div_prime += 2;\n    }\n    return largest_div;",
  "  assert(n % 2 == 0);\n  if (n == 1) return 1;\n  if (n % 3 == 0) return 3;\n \
    \ if (n % 5 == 0) return 5;\n  long max = (n - 1) / 3, mid = n * max;\n  long\
    \ i = 3, p = 2;\n  while (i * p < mid) {\n    if (mid % i == 0) {\n      max =\
    \ i;\n    } else {\n      i++;\n    }\n  }\n  return max + 1;", "    assert(n\
    \ >= 0);\n    if (n == 0) return 0;\n    long d = 1;\n    while (n % d == 0) {\n\
    \        d = d + 1;\n    }\n    return d;", "    long result = 1;\n    while (result\
    \ < n) {\n        if (n % result == 0) {\n            result = result + 1;\n \
    \       }\n        else {\n            result = result * 2 + 1;\n        }\n \
    \   }\n    return result;", "    assert(n % 2 == 0 && n > 0);\n    long a = 3,\
    \ d = 1;\n    while ((n % a) == 0) {\n        if (n % a == 0) {\n            d\
    \ *= a;\n        }\n        a++;\n    }\n    return d;", "  assert(n >= 0);\n\
    \  // Base case\n  if (n == 0)\n    return 0;\n  // Initialize maximum and its\
    \ factor\n  long max_divisor = 0;\n  long divisor = 1;\n  // Check all numbers\
    \ from 1 to sqrt(n)\n  for (long i = 2; i <= sqrt(n); ++i) {\n    // If the number\
    \ is not evenly divisible by divisor\n    if (n % i == 0) {\n      max_divisor\
    \ = i;\n      divisor = i;\n    } else {\n      // If this number is less than\
    \ max_divisor, swap the values\n      if (max_divisor < i)\n        std::swap(max_divisor,\
    \ i);\n      // Update factor of current divisor\n      divisor = max_divisor\
    \ / i;\n    }\n  }\n  return max_divisor;", "  long long div = 1LL << 32;\n  for\
    \ (int i = 1; i < 32; i++) {\n    if (n % i == 0) {\n      div = i;\n    }\n \
    \ }\n  return div;", "    if (n == 0)\n        return 0;\n    long largest = 1;\n\
    \    long d = 2;\n    for (long i = 3; i <= n; i += 2) {\n        if (i % 2 ==\
    \ 0) {\n            largest = i;\n            if (i > d)\n                d =\
    \ i;\n        }\n    }\n    return largest;", "\tlong l = n;\n\twhile (l % 2 ==\
    \ 0) l--;\n\twhile (l % 3 != 0) l--;\n\twhile (l % 4 != 0) l--;\n\twhile (l %\
    \ 5 != 0) l--;\n\twhile (l % 6 != 0) l--;\n\twhile (l % 7 != 0) l--;\n\twhile\
    \ (l % 8 != 0) l--;\n\twhile (l % 9 != 0) l--;\n\twhile (l % 10 != 0) l--;\n\t\
    while (l % 11 != 0) l--;\n\twhile (l % 12 != 0) l--;\n\twhile (l % 13 != 0) l--;\n\
    \twhile (l % 14 != 0) l--;\n\twhile (l % 15 != 0) l--;\n\twhile (l % 16 != 0)\
    \ l--;\n\twhile (l % 17 != 0) l--;\n\twhile (l % 18 != 0) l--;\n\twhile (l % 19\
    \ != 0) l--;\n\twhile (l % 20 != 0) l--;\n\treturn l;", "    long long d= n;\n\
    \    long long div=1;\n    while( d%2==0 && d!=1)\n    {\n        d /= 2;\n  \
    \      div++;\n    }\n    return d;", "  long long max = 1;\n  for (long long\
    \ i = 3; i <= n; i += 2) {\n    long long c = 1;\n    for (long long j = 2; j\
    \ <= i; j++) {\n      if (i % j == 0) {\n        c = i;\n        break;\n    \
    \  }\n    }\n    if (c > max) max = c;\n  }\n  return max;", "    long long div\
    \ = 0;\n    for (int i = 3; i <= n; i += 2) {\n        while ((n % i) == 0) {\n\
    \            div = i;\n            n /= i;\n        }\n    }\n    return div;",
  "    long maxi = 1;\n    for (long i = 2; i <= n; i++)\n        if (n % i == 0)\n\
    \            maxi = i;\n    return maxi;", "    long int m=n;\n    long long int\
    \ p=1;\n    while(p*p<=n)\n        p*=2;\n    long int r=1;\n    while(r*r<n){\n\
    \        if(n/r==p){\n            m=r;\n        }\n        r*=2;\n    }\n    return\
    \ m;", "    assert(n >= 1);\n    long long res = 1;\n    long long m = n;\n  \
    \  while (m != 1) {\n        long long tmp = m % 2;\n        m = tmp;\n      \
    \  res = (long long)max(res, res * tmp);\n    }\n    return res;", "    vector<long\
    \ long int> divisors(n);\n    long long int max_divisor = 0;\n    for (long long\
    \ int i = 1; i <= n; i++)\n        divisors[i] = divisors[i-1] + i;\n    for (long\
    \ long int d = 1; d <= n; d++) {\n        long long int max_div = 0, max_div_pos\
    \ = 0;\n        for (long long int i = 0; i <= d; i++)\n            if (divisors[i]\
    \ % d == 0) {\n                if (max_div > d)\n                    max_div =\
    \ d;\n                max_div_pos = i;\n            }\n        max_divisor = max_div;\n\
    \    }\n    return max_divisor;", "    int count = 0;\n    long max_div = 1, max_div_number\
    \ = n;\n    int max_div_number_int = (int)max_div_number;\n    while (max_div_number\
    \ % 2 == 0) {\n        max_div_number = max_div_number / 2;\n        count++;\n\
    \    }\n    int count = 0;\n    while (n > 1) {\n        while (n % 2 == 0 &&\
    \ n != 1) {\n            n = n / 2;\n            count++;\n        }\n       \
    \ max_div_number = max_div_number / 2;\n        max_div_number_int = (int)max_div_number;\n\
    \        if (max_div_number > max_div_number_int) {\n            max_div_number\
    \ = max_div_number_int;\n            max_div_number_int = (int)max_div_number;\n\
    \        }\n        count++;\n        n = n / 2;\n    }\n    while (count >= 1)\
    \ {\n        if (max_div_number % 2 == 0) {\n            max_div_number = max_div_number\
    \ / 2;\n        } else {\n            max_div_number = max_div_number * 3 + 1;\n\
    \        }\n        count--;\n    }\n    return max_div_number;", "    int x =\
    \ 0;\n    long maxdiv = 1;\n    long temp = n;\n\n    while(temp > 0) {\n    \
    \    temp = temp / 2;\n        x++;\n    }\n\n    for(int i = 0; i < x; i++) {\n\
    \        long a = maxdiv;\n\n        if(n%a == 0){\n            maxdiv = maxdiv\
    \ * 2;\n        }\n\n    }\n\n    return maxdiv;", "  assert(n > 0);\n  long res\
    \ = 1;\n  for (long i = 1; i < n; ++i) {\n    if (n % i == 0) {\n      if (res\
    \ < i) res = i;\n    } else {\n      res = n;\n    }\n  }\n  return res;", " \
    \   long long m = n;\n    long long divisor = 2;\n    while (m % divisor == 0)\
    \ {\n        divisor++;\n    }\n    return divisor;", "    long largest = n+1;\n\
    \    for(int i = 2; i <= largest; i = i*2)\n        if((n / i) % 2 == 0)\n   \
    \         largest = i;\n    return largest;", "    long long count = 1;\n    long\
    \ long m = 1;\n    while(n % m){\n        ++count;\n        m *= 2;\n    }\n \
    \   return count;", "    int k = 1;\n    long x = 2;\n    long y = 3;\n    while\
    \ (x * x <= n) {\n        if (n % x == 0) {\n            x = x + y;\n        \
    \    k = k + 1;\n        }\n        y = y + 1;\n    }\n    return k;", "    if\
    \ (n == 1) return n;\n    long r = n;\n    long s = 1;\n    long p = 1;\n    long\
    \ t;\n    // set r = n/2\n    while (!(r & 1)) {\n        r = r / 2;\n    }\n\
    \    // set s = 1\n    while (r > 1) {\n        s = s * 2;\n        r = r / 2;\n\
    \    }\n    // if s is even, then r is even, else it is odd\n    if ((r & 1) ==\
    \ 0) r = r / 2;\n    while (r != 1) {\n        p = p * 10;\n        if (r % 2\
    \ != 0) r = r / 2;\n        else {\n            t = r / p;\n            if ((t\
    \ == r) && (t % 2 == 0)) r = t;\n        }\n    }\n    return p;", "    long d\
    \ = 0;\n    for(long i=1;i<=n;i++){\n        long c = n/i;\n        if(c==0) continue;\n\
    \        long tmp = d*i;\n        if(tmp < n){\n            d = tmp;\n       \
    \ }\n    }\n    return d;", "  assert(n % 2 == 0);\n  long result = 1;\n  for\
    \ (int i = 2; i < n; i += 2) {\n    result *= i;\n    if (result < n) {\n    \
    \  result *= (n / i);\n    }\n  }\n  return result;", "    if (n==1 || n==0)\n\
    \        return n;\n    long max_div = n%2;\n    for (long i=3;i*i<=n;i+=2)\n\
    \        if (n%i==0)\n            max_div = i;\n    return max_div;", "    long\
    \ long m = n;\n    long long divisor = 0;\n    while (m % 2 == 0) {\n        m\
    \ /= 2;\n        divisor++;\n    }\n    return divisor;", "    assert(n % 2 ==\
    \ 0);\n    long res = n;\n    long sq = n * n;\n    long sq2 = sq / 2;\n    long\
    \ m = n / sq2;\n    for (int i = 3; i <= m; i *= 2) {\n        if (sq % i == 0)\
    \ {\n            res = i;\n            sq2 = sq / i;\n            break;\n   \
    \     }\n    }\n    assert(sq2 == sq);\n    return res;", "    long divisor =\
    \ 1;\n    while (n % 2 == 0 && divisor <= n) {\n        divisor *= 2;\n    }\n\
    \    n /= 2;\n    long max_divisor = 1;\n    while (n % divisor == 0) {\n    \
    \    max_divisor *= divisor;\n        n /= divisor;\n    }\n    return max_divisor;",
  "    if (n<=1) {\n        return 1;\n    }\n    int count[32] = {0};\n    for (long\
    \ i=0;i<32;i++){\n        while (n % 2 == 0) {\n            ++count[i];\n    \
    \        n /= 2;\n        }\n    }\n    long max_divisor = 1;\n    for (int i\
    \ = 1;i < 32;i++){\n        if (count[i] > count[i - 1]) {\n            max_divisor\
    \ = i;\n        }\n    }\n    return max_divisor;", "\tlong res = 0;\n\twhile(n\
    \ % 2 == 0) {\n\t\tres +=2;\n\t\tn /= 2;\n\t}\n\twhile(n % 3 == 0) {\n\t\tres\
    \ +=3;\n\t\tn /= 3;\n\t}\n\twhile(n % 5 == 0) {\n\t\tres +=5;\n\t\tn /= 5;\n\t\
    }\n\twhile(n % 7 == 0) {\n\t\tres +=7;\n\t\tn /= 7;\n\t}\n\treturn res;", "  \
    \  // Write your code here\n    if (n%2==0)\n        return n;\n    else\n   \
    \     return largest_divisor(3*n+1)+n/2;", "    long ans = 1;\n    long max_divisor\
    \ = 1;\n    long curr_div = 1;\n    long remainder;\n\n    while (curr_div <=\
    \ n) {\n        if (n % curr_div == 0) {\n            ans = curr_div;\n      \
    \      curr_div = curr_div * 10;\n        }\n        else {\n            curr_div\
    \ = curr_div * 10;\n            if (curr_div > n) {\n                curr_div\
    \ = n;\n            }\n        }\n    }\n    return ans;", "\tint d = 1;\n\tlong\
    \ m = 0;\n\twhile (m != 0) {\n\t\tm = n / d;\n\t\td++;\n\t}\n\treturn d;", "\t\
    if (n < 2)\n\t\treturn n;\n\tlong largest = 1, divisor;\n\twhile (1) {\n\t\tdivisor\
    \ = n / largest;\n\t\tif (divisor > largest)\n\t\t\tlargest = divisor;\n\t\telse\
    \ if (divisor == largest)\n\t\t\tbreak;\n\t}\n\treturn largest;", "  // find the\
    \ largest divisor of n\n  // by doing the following for n\n  // 1.  Divide n by\
    \ 2 until the remainder becomes 0 or 1\n  // 2.  Divide by 2\n  // 3.  If it divides\
    \ n, then divide by 3 and repeat until n divides evenly\n  // 4.  It will either\
    \ divide by n (if n is even) or n/2 (if n is odd)\n\n  // n is already odd.  Start\
    \ at 1\n  // divide n by 2\n  while(n%2==0){\n    // divide by 2\n    n/=2;\n\
    \    // if n divides evenly, then divide by 3 and repeat until n divides evenly\n\
    \    while(n%2==0){\n      n/=2;\n    }\n  }\n  if(n>=1){\n    // n divides evenly\n\
    \    return n;\n  }\n  // if n doesn't divide evenly, then divide by 3 and repeat\
    \ until n divides evenly\n  while(n%2!=0){\n    n/=2;\n  }\n  if(n>=1){\n    //\
    \ n divides evenly\n    return n;\n  }\n  // if n doesn't divide evenly, then\
    \ divide by 3 and repeat until n divides evenly\n  while(n%2==0){\n    n/=2;\n\
    \  }\n  if(n>=1){\n    // n divides evenly\n    return n;\n  }\n  // if n doesn't\
    \ divide evenly, then divide by 3 and repeat until n divides evenly\n  while(n%2!=0){\n\
    \    n/=2;\n  }\n  if(n>=1){\n    // n divides evenly\n    return n;\n  }\n  //\
    \ if n doesn't divide evenly, then divide by 3 and repeat until n divides evenly\n\
    \  while(n%2==0){\n    n/=2;\n  }\n  if(n>=1){\n    // n divides evenly\n    return\
    \ n;\n  }\n  // if n doesn't divide evenly, then divide by 3 and repeat until\
    \ n divides evenly\n  while(n%2!=0){\n    n/=2;\n  }\n  if(n>=1){\n    // n divides\
    \ evenly\n    return n;\n  }\n  // if n doesn't divide evenly, then divide by\
    \ 3 and repeat until n divides evenly\n  while(n%2==0){\n    n/=2;\n  }\n  if(n>=1){\n\
    \    // n divides evenly\n    return n;\n  }\n  // if n doesn't divide evenly,\
    \ then divide by 3 and repeat until n divides ", "  long largest = 1;\n  while\
    \ (n) {\n    if (n % 2 == 0) largest = n / 2;\n    else largest = largest * 3\
    \ + 1;\n    n /= 2;\n  }\n  return largest;", "    if(n % 2 == 0) {\n        //\
    \ If the number n is even, there is no such number that divides n\n        return\
    \ -1;\n    }\n    long largest = n;\n    long temp = 1;\n    while(temp * 2 <=\
    \ largest) {\n        temp = temp * 2 + 1;\n    }\n    return temp;", "    long\
    \ long int largest = n;\n    long long int last_divisor = n;\n    while(last_divisor!=1){\n\
    \        last_divisor--;\n        if(last_divisor%2==0) largest++;\n    }\n  \
    \  return largest;", "    int div = 1;\n    long res = 1;\n    while(div*div <=\
    \ n) {\n        div *= 2;\n        res = 2*res;\n    }\n    return res;", "  \
    \  long max_d = 0;\n    for(long d = 2; d <= sqrt(n); d++) {\n        if(n % d\
    \ == 0) {\n            max_d = d;\n            break;\n        }\n    }\n    return\
    \ max_d;", "    long div = 1;\n    while (n>0) {\n        if (n%div==0) return\
    \ div;\n        div++;\n        n /= div;\n    }\n    return div;", "    // write\
    \ your code in C++14\n    return __builtin_ctz(n);", "    long l = n;\n    while(l\
    \ % 2 == 0)\n        l /= 2;\n    while(l % 3 == 0)\n        l /= 3;\n    while(l\
    \ % 5 == 0)\n        l /= 5;\n    while(l % 7 == 0)\n        l /= 7;\n    while(l\
    \ % 11 == 0)\n        l /= 11;\n    while(l % 13 == 0)\n        l /= 13;\n   \
    \ return n;", "\tint cnt = 0;\n\tlong result = 1;\n\tint limit = sqrt(n);\n\t\
    while (result < n) {\n\t\tcnt ++;\n\t\tresult *= limit;\n\t\tif (result > n) {\n\
    \t\t\tlimit = limit + limit / 10;\n\t\t}\n\t}\n\treturn cnt % 2 == 0 ? limit :\
    \ limit / 2;", "    if(n < 2) {\n        std::cout << \"n must be positive\" <<\
    \ std::endl;\n        return 0;\n    }\n    int maxDiv = (n%2)?n:n/2;\n    long\
    \ div = 1;\n    while(div < maxDiv) {\n        long mod = n/div;\n        if(div\
    \ + mod < maxDiv) {\n            div += mod;\n        } else {\n            div\
    \ = mod;\n        }\n    }\n    return maxDiv;", "    long max_value = 1;\n  \
    \  long largest_div = 0;\n    while(n % 2 == 0 && largest_div < max_value) {\n\
    \        largest_div += 2;\n        largest_value *= 2;\n    }\n    if(largest_div\
    \ < max_value) {\n        largest_value += 1;\n    }\n    return largest_div;",
  "    long long divisor = 1;\n    for (long i = 3; i < n; i *= 2) {\n        if (n\
    \ % i == 0) {\n            divisor = i;\n            while (n % i == 0)\n    \
    \            n /= i;\n            break;\n        }\n    }\n    return n;", " \
    \   long m = 0;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i ==\
    \ 0)\n            m = i;\n    }\n    return m;", "    // Write your code here\n\
    \    long max=0;\n    long temp=n;\n    while(n>0)\n    {\n        if(n%2==0)\n\
    \        {\n            if(n>max)\n            {\n                max=n;\n   \
    \         }\n            n/=2;\n        }\n        else if(n>max)\n        {\n\
    \            max=n;\n        }\n        else\n        {\n            if(n>temp)\n\
    \            {\n                max=n;\n            }\n            n/=2;\n   \
    \     }\n    }\n    return max;", "\tint k = 0, flag = 0;\n\tlong max = 2;\n\t\
    long m = 0;\n\twhile (n != 0) {\n\t\tif (n % 2 == 0 && n % m == 0) {\n\t\t\t++k;\n\
    \t\t\tif (flag != 0) {\n\t\t\t\tmax = k;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tm = k;\n\
    \t\t}\n\t\t++k;\n\t\tn /= 2;\n\t\tflag = 1;\n\t}\n\treturn max;", "    long max_div\
    \ = n;\n    long max_div2 = max_div;\n    long next_div = max_div;\n    long next_div2\
    \ = next_div;\n    while (next_div2 >= max_div) {\n        next_div = next_div\
    \ * 2 + 1;\n        next_div2 = next_div * 2 + 1;\n    }\n    return next_div;",
  "    long ans=1;\n    for(long i=1;i<=n;i+=2){\n        if(n%i==0)\n           \
    \ ans=max(ans,i);\n    }\n    return ans;", "    long n1 = n/2, n2 = n1;\n   \
    \ while (n1%2 == 0 && n2 <= n) n2 += 2;\n    return n2;", "    // write your code\
    \ here\n    long largest_divisor = 0;\n    long i;\n    long long remainder;\n\
    \    for(i = 2; i <= n; i++) {\n        remainder = 0;\n        while(i) {\n \
    \           if(i%2 == 0)\n                remainder+=1;\n            i/=2;\n \
    \       }\n        if(remainder == 0) largest_divisor = i;\n    }\n    return\
    \ largest_divisor;", "    long maxDiv = n/2;\n    for(long i = 3; i <= maxDiv\
    \ ; i += 2){\n        if(n % i == 0){\n            maxDiv = i;\n        }\n  \
    \  }\n    return maxDiv;", "\tlong maxdiv = n;\n\tlong curdiv = 1;\n\tlong max_div\
    \ = 1;\n\twhile (curdiv <= maxdiv) {\n\t\tif (curdiv * curdiv == n) {\n\t\t\t\
    max_div = curdiv;\n\t\t\tbreak;\n\t\t}\n\t\tcurdiv++;\n\t}\n\treturn max_div;",
  "\tassert(n >= 0);\n\tlong m = n;\n\tlong largest_div = m;\n\tlong div;\n\tfor (div\
    \ = 1; div < n; div++) {\n\t\tif ((m % div) == 0) {\n\t\t\tm = div;\n\t\t\tif\
    \ (m > largest_div)\n\t\t\t\tlargest_div = m;\n\t\t}\n\t}\n\treturn largest_div;",
  "    vector<int> v;\n    long maxDivisor = 0;\n    v.push_back(0);\n    for(long\
    \ i = 1; i <= n; ++i) {\n        if(n%i == 0) {\n            v.push_back(i);\n\
    \            maxDivisor = i;\n        }\n    }\n    return v.size() > maxDivisor?\
    \ v.at(v.size()-1): maxDivisor;", "    assert(n % 2 == 0);\n    long ans = 2;\n\
    \    long d;\n    for(d = ans; d < n; d *= 2, ans++) {\n        if(n % d == 0)\
    \ {\n            return d;\n        }\n    }\n    return ans;", "\tassert(n %\
    \ 2 == 0);\n\tlong ans = 0;\n\tlong d = 2;\n\twhile ((n /= d) != 0) {\n\t\tif\
    \ (n % d == 0) {\n\t\t\tans = d;\n\t\t\tbreak;\n\t\t}\n\t\td++;\n\t}\n\treturn\
    \ ans;", "  if (n<2)return 0;\n  long maxdiv = n;\n  long div = 1;\n  while (div<n)\
    \ {\n    div *= 2;\n    if (div > maxdiv) {\n      maxdiv = div;\n    }\n  }\n\
    \  return maxdiv;", "    if(n < 2)\n        return 1;\n    long l = 3;\n    long\
    \ long m = n;\n    for(; ; l++) {\n        if((m % l) == 0) {\n            m /=\
    \ l;\n            return l;\n        }\n    }", "\tlong long d = n;\n\tlong long\
    \ t = 1;\n\twhile (d % 2 == 0) {\n\t\td /= 2;\n\t\tt *= 2;\n\t}\n\td *= 2;\n\t\
    while (d % 2 == 0) {\n\t\td /= 2;\n\t\tt++;\n\t}\n\treturn t;", "    assert(n\
    \ > 0);\n    long res = -1;\n    for (int i = 2; i < n; ++i) {\n        if (n\
    \ % i == 0) {\n            if (n > i) {\n                res = i;\n          \
    \  }\n            break;\n        }\n    }\n    return res;", "\tif (n == 0)\n\
    \t\treturn 0;\n\tlong a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tlong d = 1;\n\t\
    long e = 1;\n\tlong f = 1;\n\tlong g = 1;\n\tlong h = 1;\n\tlong i = 0;\n\n\t\
    for (;;) {\n\t\tb = (b * b + c) % n;\n\t\tc = (c * c + d) % n;\n\t\td = (d * d\
    \ + e) % n;\n\t\te = (e * e + f) % n;\n\t\tf = (f * f + g) % n;\n\t\tg = (g *\
    \ g + h) % n;\n\t\th = (h * h + i) % n;\n\t\ti = (a * b * c * d + e*f*g*h) % n;\n\
    \t\tif (i == 0)\n\t\t\treturn n;\n\t\ta = (a % i);\n\t\tb = (b * i % n);\n\t\t\
    c = (c * i % n);\n\t\td = (d * i % n);\n\t\te = (e * i % n);\n\t\tf = (f * i %\
    \ n);\n\t\tg = (g * i % n);\n\t\th = (h * i % n);\n\t}", "    long ans = n;\n\
    \    for (long d = 2; d * d <= n; d++)\n        if (n % d == 0)\n            ans\
    \ = d;\n    return ans;", "\tassert(n % 2 == 0);\n\tlong a = (long) sqrt(n);\n\
    \tint count = 0;\n\tfor(int i = 3; i <= a; ++i){\n\t\tif(n % i == 0)\n\t\t\tbreak;\n\
    \t\tcount += 1;\n\t}\n\treturn count;", "    if (n == 1) return n;\n    if (n\
    \ % 2 == 0) return 2;\n    long m = (n + 1) >> 1;\n    return m > n ? m : largest_divisor(m);",
  "    long largest_divisor = 1;\n    for (long i = 1; i <= n; i++) {\n        if\
    \ (n % i == 0)\n            largest_divisor = i;\n        if (largest_divisor\
    \ > n)\n            break;\n    }\n    return largest_divisor;", "    long long\
    \ res = 1LL;\n    for(long long i = 1LL; i <= n; ++i) {\n        res *= i;\n \
    \       if(res%n == 0) {\n            res = n-1;\n        }\n    }\n    return\
    \ res;", "    long max_divisor = 1;\n    long max_divisor_idx = 1;\n    long i\
    \ = 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ div = i / max_divisor;\n            if (div > max_divisor) {\n             \
    \   max_divisor = div;\n                max_divisor_idx = max_divisor - 1;\n \
    \           }\n            i++;\n        }\n        else\n            i++;\n \
    \   }\n    return max_divisor_idx;", "    // Write your code here\n    long largest\
    \ = -1;\n    long divisor = 1;\n    for(long i=2; i<=n; i++) {\n        if(n%i\
    \ == 0) {\n            divisor = i;\n            if((largest < divisor) || (largest\
    \ == -1 && n < divisor)) {\n                largest = divisor;\n            }\n\
    \        }\n    }\n    return largest;", "    // O(n)\n    long max_divisor =\
    \ 0;\n    long next_divisor = 0;\n    for (int i = 1; i <= n; i++) {\n       \
    \ // O(log n)\n        while (next_divisor < n) {\n            next_divisor *=\
    \ i;\n            if (next_divisor > n) {\n                next_divisor = n;\n\
    \            }\n        }\n        max_divisor = next_divisor;\n        next_divisor\
    \ = 1;\n    }\n    return max_divisor;", "    long num = 1;\n    long c = 1;\n\
    \    while(c < n){\n        num *= c;\n        c++;\n    }\n    long long a =\
    \ num;\n    long long max_divisor = a;\n    for(long long d = 2; d*d <= n; d++){\n\
    \        if(a%d==0){\n            a = a/d;\n            max_divisor = d;\n   \
    \     }\n    }\n    return max_divisor;", "    long max_div = n;\n    long max_div_factor\
    \ = 1;\n    for (long i = 1; i < n; i++) {\n        if (n % i == 0) {\n      \
    \      max_div_factor = i;\n        }\n        if (max_div_factor > max_div) {\n\
    \            max_div = max_div_factor;\n        }\n    }\n    return max_div;",
  "  long m = n / 2 + 1;\n  long max_div = m * m;\n  long m2 = m * m;\n  long m3 =\
    \ m2 * m;\n  long m4 = m3 * m;\n  long m5 = m4 * m;\n  while (max_div < n) {\n\
    \    if (n % max_div == 0) return max_div;\n    max_div++;\n  }\n  if (n > max_div)\
    \ return n;\n  long a = 1;\n  long b = m;\n  long c = m2;\n  long d = m3;\n  while\
    \ (a < n) {\n    while (d < n) {\n      if (b % d == 0) {\n        if (max_div\
    \ > c) return max_div;\n        c = d;\n      }\n      d++;\n    }\n    while\
    \ (b % d == 0) {\n      if (max_div > c) return max_div;\n      c = d;\n    }\n\
    \    a++;\n    b++;\n    d--;\n  }\n  return max_div;", "    // Write your code\
    \ here\n    long ans = 1;\n    while(n%2==0){\n        n = n/2;\n        ans++;\n\
    \    }\n    while(n%5==0){\n        n = n/5;\n        ans++;\n    }\n    while(n%8==0){\n\
    \        n = n/8;\n        ans++;\n    }\n    return ans;", "\tassert(n % 2 ==\
    \ 0);\n\tlong x = n;\n\tlong y = 2;\n\twhile (y <= x)\n\t{\n\t\tx = y;\n\t\ty\
    \ = x * x + n;\n\t}\n\treturn x;", "    long largest_divisor = INT_MIN;\n    \n\
    \    if (n <= 1) {\n        return 1;\n    }\n    \n    for (long i = 1; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            if (largest_divisor < i){\n\
    \                largest_divisor = i;\n            }\n        }\n    }\n    return\
    \ largest_divisor;", "    long d = n;\n    while (d % 2 != 0) {\n        d /=\
    \ 2;\n    }\n    return d;", "    long ans = 1;\n    while (n % 2 == 0) n /= 2;\n\
    \    while (n % 3 == 0) n /= 3;\n    while (n % 5 == 0) n /= 5;\n    while (n\
    \ % 7 == 0) n /= 7;\n    while (n % 9 == 0) n /= 9;\n    while (n % 11 == 0) n\
    \ /= 11;\n    while (n % 13 == 0) n /= 13;\n    while (n % 17 == 0) n /= 17;\n\
    \    while (n % 19 == 0) n /= 19;\n    while (n % 23 == 0) n /= 23;\n    while\
    \ (n % 29 == 0) n /= 29;\n    while (n % 31 == 0) n /= 31;\n    while (n % 37\
    \ == 0) n /= 37;\n    while (n % 41==0) n /= 41;\n    while (n % 43 == 0) n /=\
    \ 43;\n    while (n % 47 == 0) n /= 47;\n    while (n % 53 == 0) n /= 53;\n  \
    \  while (n % 59 == 0) n /= 59;\n    while (n % 61 == 0) n /= 61;\n    while (n\
    \ % 67 == 0) n /= 67;\n    while (n % 71 == 0) n /= 71;\n    while (n % 73 ==\
    \ 0) n /= 73;\n    while (n % 79 == 0) n /= 79;\n    while (n % 83 == 0) n /=\
    \ 83;\n    while (n % 89 == 0) n /= 89;\n    while (n % 93 == 0) n /= 93;\n  \
    \  while (n % 97 == 0) n /= 97;\n    while (n % 103==0) n /= 103;\n    while (n\
    \ % 107==0) n /= 107;\n    while (n % 111 == 0) n /= 111;\n    while (n % 113==0)\
    \ n /= 113;\n    while (n % 115==0) n /= 115;\n    while (n % 117==0) n /= 117;\n\
    \    while (n % 121==0) n /= 121;\n    while (n % 123==0) n /= 123;\n    while\
    \ (n % 127==0) n /= 127;\n    while (n % 129==0) n /= 129;\n    while (n % 131==0)\
    \ n /= 131;\n    while (n % 133==0) n /= 133;\n    while (n % 135==0) n /= 135;\n\
    \    while (n % 137==0) n /= 137;\n    while (n % 139==0) n /= 139;\n    while\
    \ (n % 141==0) n /= 141;\n    while (n % 143==0) n /= 143;\n    while (n % 145==0)\
    \ n /= 145;\n    while (n % 147==0) n /= 147;\n    while (n % 149==0) n /= 149;\n\
    \    while (n % 151==0) n /= 151;\n    while (n % 153==0) n /= 153;\n    while\
    \ (n % 155==0) n /= 155;\n    while (n % 157==0) n /= 157;\n", "    long long\
    \ ans = 1;\n    while ((n % ans) == 0) {\n        ans *= 2;\n    }\n    return\
    \ ans;", "  if (n < 2) return n;\n  // We only need to check odd numbers\n  for\
    \ (int i = 2; i <= n / 2; i++) {\n    if (n % i == 0)\n      return i;\n  }\n\
    \  return n;", "    // Find divisor using binary search\n    long lower = 0, upper\
    \ = n;\n    while (lower < upper) {\n        long mid = (lower + upper) / 2;\n\
    \        if (n % mid == 0) {\n            upper = mid;\n        } else {\n   \
    \         lower = mid;\n        }\n    }\n    return lower;", "\tint max_divisor\
    \ = 1;\n\tint max_divisor_value = n;\n\twhile (max_divisor < n / 2)\n\t\tmax_divisor++;\n\
    \twhile (max_divisor * max_divisor < n) {\n\t\tif (max_divisor % 2 == 1) {\n\t\
    \t\tmax_divisor = max_divisor + 1;\n\t\t\tmax_divisor_value = max_divisor_value\
    \ * max_divisor_value;\n\t\t\tmax_divisor_value = max_divisor_value / max_divisor;\n\
    \t\t} else {\n\t\t\tmax_divisor = max_divisor + 2;\n\t\t\tmax_divisor_value =\
    \ max_divisor_value * max_divisor_value;\n\t\t\tmax_divisor_value = max_divisor_value\
    \ / max_divisor;\n\t\t}\n\t}\n\treturn max_divisor_value;", "  long k = 1;\n \
    \ while (k < n) {\n    if (n % k == 0) {\n      n = n / k;\n    }\n    k++;\n\
    \  }\n  return k;", '    return n/2 + n/3 + (n%2==0)?n/2:n/2;', "    auto result\
    \ = n;\n    auto numDivisors = n;\n    for (int i = 1; i <= n; ++i) {\n      \
    \  numDivisors /= i;\n        if (numDivisors % 2 == 0) result = i;\n    }\n \
    \   return result;", "\tlong largest_div = 0;\n\tlong div = n; // initialize divisor\
    \ with n\n\n\twhile (div > 0) {\n\t\tif (div%2 != 0) div--;\n\t\telse largest_div\
    \ = div;\n\t}\n\treturn largest_div;", "    long d= n;\n    while(1) {\n     \
    \   if(n%2 ==0)\n            n= n/2;\n        else if(n%2 == 1)\n            n=\
    \ 3*n+1;\n        else\n            break;\n        d= d;\n    }\n    return d;",
  "\tlong divisor = 2;\n\tlong i = 1;\n\tlong remainder = n;\n\twhile (remainder %\
    \ divisor == 0 && i <= 1000) {\n\t\tdivisor++;\n\t\ti++;\n\t}\n\treturn divisor;",
  "    int max_div = INT_MIN;\n    for (int i = 2; i < n; i++) {\n        long div\
    \ = n / i;\n        if (div > max_div) {\n            max_div = div;\n       \
    \ }\n    }\n    return max_div;", "    long d = 1;\n    for (long i = 1; i < n;\
    \ i++)\n        if (n % i == 0)\n            d *= i;\n    return d;", "\tlong\
    \ long counter = 1;\n\tlong long divisor = 1;\n\twhile (n != 0) {\n\t\tlong long\
    \ remainder = n % divisor;\n\t\tif (remainder != 0) {\n\t\t\tn = remainder;\n\t\
    \t\tcounter++;\n\t\t}\n\t\tdivisor++;\n\t}\n\treturn counter;", "\tassert(n >\
    \ 0);\n\tstd::bitset<sizeof(long)*8> bs(n);\n\tassert(bs);\n\tfor (long i = bs.length()\
    \ - 1; i >= 0; --i) {\n\t\tif (bs[i]) {\n\t\t\tlong long res = n/i;\n\t\t\tif\
    \ (res < n) break;\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;", "  long m = 0,\
    \ d = 1;\n  while ((n % d) == 0) {\n    m = d;\n    d *= 10;\n  }\n  if (n % d\
    \ == 0) {\n    return d;\n  } else {\n    return m + 1;\n  }", "    long largest_divisor\
    \ = n;\n    long i = 1L;\n    while (i <= n) {\n        if (n % i == 0) {\n  \
    \          largest_divisor = i;\n        }\n        i++;\n    }\n    return largest_divisor;",
  "    // TODO: Use a binary search here instead of recursion\n    if (n<2) return\
    \ 1;\n    if (n%2==0) return 2;\n    return largest_divisor(n/2);", "    long\
    \ res = n;\n    while(1) {\n        if(n % res == 0) {\n            res = n;\n\
    \        }\n        n /= res;\n        if(n == 1) break;\n    }\n    return res;",
  "    if (n == 0) return 0;\n    long maxDiv = 1;\n    long maxDivisor = 2;\n   \
    \ for (int i = 3; i <= n; ++i) {\n        if (n % i == 0) {\n            maxDiv\
    \ = maxDiv * i;\n            maxDivisor = i;\n        }\n    }\n    return maxDiv;",
  "    long highest_divisor = 1, current_divisor;\n    while (n > highest_divisor)\
    \ {\n        current_divisor = highest_divisor;\n        for (long i = current_divisor;\
    \ n / i >= current_divisor; --i) {\n            if (n % i == 0) {\n          \
    \      highest_divisor = i;\n                break;\n            }\n        }\n\
    \    }\n    return highest_divisor;", "    // Initialization\n    long result\
    \ = n;\n    // The algorithm finds the smallest number divisable by n\n    while\
    \ (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0)\
    \ {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result\
    \ /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n \
    \   while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result\
    \ % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n\
    \        result /= 17;\n    }\n    while (result % 19 == 0) {\n        result\
    \ /= 19;\n    }\n    while (result % 23 == 0) {\n        result /= 23;\n    }\n\
    \    while (result % 29 == 0) {\n        result /= 29;\n    }\n    while (result\
    \ % 31 == 0) {\n        result /= 31;\n    }\n    // Return result\n    return\
    \ result;", "    long maxDivisor = 0;\n    long currDivisor = 1;\n    for(int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            currDivisor++;\n\
    \            if (maxDivisor < currDivisor) {\n                maxDivisor = currDivisor;\n\
    \            }\n        }\n    }\n    return maxDivisor;", "    // your code goes\
    \ here\n    long max_divisor = n; //initial value\n    for(long i=2;i<n;i++){\n\
    \        if(n % i == 0){\n            if(max_divisor>i)\n                max_divisor\
    \ = i;\n        }\n    }\n    return max_divisor;", "  // write your code here\n\
    \  assert(n % 2 == 0);\n  if (n < 10) {\n    return n;\n  }\n  long s = n % 10;\n\
    \  long p = 2;\n  while (p < s) {\n    p += 2;\n  }\n  while (p < n) {\n    p\
    \ += 4;\n  }\n  return p;", "  assert(n >= 0);\n  long max_div_n = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      max_div_n = i;\n    }\n\
    \  }\n  return max_div_n;", "\tassert(n > 0);\n\tlong max_div = n;\n\tlong cur_div\
    \ = n;\n\n\twhile(cur_div > 0) {\n\t\t// cur_div is now the largest divisor that\
    \ divides n evenly\n\t\tassert(cur_div > 1);\n\t\t--cur_div;\n\t\t// if the divisor\
    \ is now smaller than n\n\t\tif(cur_div < n) {\n\t\t\tmax_div = cur_div;\n\t\t\
    }\n\t}\n\n\treturn max_div;", "\tlong long int max_div = n;\n\tlong long int cur_div\
    \ = n;\n\n\twhile(cur_div != 0) {\n\t\tif (cur_div % 2 == 0) cur_div = cur_div/2;\n\
    \t\telse cur_div = (cur_div - 1) + (cur_div >> 1);\n\t\tassert(cur_div > 0);\n\
    \t\tmax_div = std::max(max_div, cur_div);\n\t}\n\treturn max_div;", "  assert(n\
    \ >= 0);\n  if (n%2 == 0) {\n    return 2;\n  }\n  if (n%3 == 0) {\n    return\
    \ 3;\n  }\n  if (n%5 == 0) {\n    return 5;\n  }\n  if (n%7 == 0) {\n    return\
    \ 7;\n  }\n  \n  long largest = n%10;\n  long i = 1;\n  while ((i*10)+10 <= n)\
    \ {\n    largest = i*10 + largest;\n    i++;\n  }\n  \n  return largest;", " \
    \ assert(n % 2 == 0);\n  long res = n;\n  while (res) {\n    int d = res / 2;\n\
    \    if (d % 2 == 0) {\n      res = d;\n    } else {\n      res *= 2;\n    }\n\
    \  }\n  return res;", "    long res = 1;\n    while (n > 0) {\n        if (n %\
    \ 2 == 0) {\n            res = max(res, n);\n        }\n        n /= 2;\n    }\n\
    \    return res;", "  // Write your code here\n  long max_divisible = 1;\n  long\
    \ counter = 1;\n  for (long i = 1; i <= n; ++i) {\n    if (n % i == 0)\n     \
    \ counter++;\n    else\n      if (counter > max_divisible)\n        max_divisible\
    \ = counter;\n      counter = 1;\n  }\n  return max_divisible;", "    long max_divisor\
    \ = n; // start with any divisor > n\n    for (long i = 1; i < n; i++) {\n   \
    \     if (n % i == 0) {\n            long divisor_before = max_divisor;\n    \
    \        max_divisor = i;\n            // if divisor after > n, then no number\
    \ > n can divide it evenly without exceeding n\n            if (divisor_before\
    \ > n) {\n                break;\n            }\n        }\n    }\n    return\
    \ max_divisor;", "    long max_divisor = 1;\n    for(long i = 2; i*i <= n; ++i)\n\
    \        if(n%i == 0)\n            max_divisor = i;\n    return max_divisor;",
  "    long a = n / 2;\n    while ( a % 2 == 0 && a > 1){\n        a = a / 2;\n  \
    \  }\n    return a;", "    // n is assumed to be positive\n    // initialize to\
    \ 1\n    long ans = 1;\n\n    for (long d = 2; d < n; d++) {\n        if (n %\
    \ d == 0) {\n            // the number is already divisible by d and no larger\
    \ dividor was found\n            ans = d;\n            break;\n        }\n   \
    \     if (d > ans) {\n            // there is no smaller dividor for this number,\
    \ so this dividor is larger\n            ans = d;\n        }\n    }\n\n    return\
    \ ans;", "    std::stack<long> sq;\n    long ans = 1;\n    for (long i = 1; i\
    \ < n; ++i) {\n        while (!sq.empty() && sq.top() % 2 == 0)\n            sq.pop();\n\
    \        sq.push(i);\n        while (!sq.empty() && sq.top() % 3 == 0)\n     \
    \       sq.pop();\n        sq.push(i);\n        while (!sq.empty() && sq.top()\
    \ % 5 == 0)\n            sq.pop();\n        sq.push(i);\n        while (!sq.empty()\
    \ && sq.top() % 7 == 0)\n            sq.pop();\n        sq.push(i);\n        while\
    \ (!sq.empty() && sq.top() % 11 == 0)\n            sq.pop();\n        sq.push(i);\n\
    \        while (!sq.empty() && sq.top() % 13 == 0)\n            sq.pop();\n  \
    \      sq.push(i);\n        while (!sq.empty() && sq.top() % 17 == 0)\n      \
    \      sq.pop();\n        sq.push(i);\n        while (!sq.empty() && sq.top()\
    \ % 19 == 0)\n            sq.pop();\n        sq.push(i);\n        while (!sq.empty()\
    \ && sq.top() % 23 == 0)\n            sq.pop();\n        sq.push(i);\n       \
    \ while (!sq.empty() && sq.top() % 29 == 0)\n            sq.pop();\n        sq.push(i);\n\
    \        while (!sq.empty() && sq.top() % 31 == 0)\n            sq.pop();\n  \
    \      sq.push(i);\n        while (!sq.empty() && sq.top() % 37 == 0)\n      \
    \      sq.pop();\n        sq.push(i);\n        while (!sq.empty() && sq.top()\
    \ % 41 == 0)\n            sq.pop();\n        sq.push(i);\n        while (!sq.empty()\
    \ && sq.top() % 43 == 0)\n            sq.pop();\n        sq.push(i);\n       \
    \ while (!sq.empty() && sq.top() % 47 == 0)\n            sq.pop();\n        sq.push(i);\n\
    \        while (!sq.empty() && sq.top() % 51 == 0)\n            sq.pop();\n  \
    \      sq.push(i);\n        while (!sq.empty() && sq.top() % 55 == 0)\n      \
    \      sq.pop();\n        sq.push(i);\n        while (!sq.empty() && sq.top()\
    \ % 59 == 0)\n            sq.pop();\n        sq.push(i);\n        while (!sq.empty()\
    \ && sq.top() % 61 == 0)\n            sq.pop();\n        sq.push", "    // write\
    \ your code here\n    int count = 0;\n    long max_num = n;\n    long sum = 0;\n\
    \    long temp = 0;\n    for (long i = 1; i <= n; i++) {\n        temp = max_num\
    \ / i;\n        if (temp % 2 == 0) {\n            count++;\n            sum +=\
    \ temp;\n            if (sum >= max_num) {\n                max_num = sum;\n \
    \           }\n        }\n    }\n    return max_num;", "  assert(n % 2 == 0);\n\
    \  long maxdiv = 2;\n  long currentdiv = 0;\n  for (long i = 3; i * i <= n; i\
    \ += 2) {\n    currentdiv += 2;\n    if (n % i == 0) {\n      maxdiv = i;\n  \
    \    assert(currentdiv <= maxdiv);\n    }\n  }\n  return maxdiv;", "    long max_div\
    \ = 1, cur = n, factor = 1;\n    while (cur > 1) {\n        max_div = cur;\n \
    \       factor++;\n        cur = (n / factor);\n    }\n    return max_div;", " \
    \ int x = 1;\n  long y = 0;\n  while (x > y) {\n    if ((n % x) == 0) x = x +\
    \ 1;\n    else y = y + 1;\n  }\n  return y;", "    long max_div = n;\n    while\
    \ (n % 2 == 0) {\n        max_div = max_div * 2;\n        n /= 2;\n    }\n   \
    \ if (n == 1) return max_div;\n    long div = max_div;\n    while (n > 1) {\n\
    \        if (n % div == 0) {\n            n /= div;\n            return div;\n\
    \        }\n        div++;\n    }\n    return max_div;", "    // base case\n \
    \   if(n <= 1){\n        return n;\n    }\n\n    // remember largest divisor of\
    \ n\n    long largest = n;\n    // loop while there is another factor < n\n  \
    \  while(n % 2 == 0){\n        // multiply largest by 2, then divide n by this\
    \ number\n        largest *= 2;\n        n /= 2;\n    }\n    return largest;",
  "  int primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\
    \ 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229,\
    \ 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\
    \ 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,\
    \ 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,\
    \ 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\
    \ 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,\
    \ 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,\
    \ 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953,\
    \ 967, 971, 977, 983, 991, 997};\n\n  // Initialize a boolean array 'result' to\
    \ false\n  bool result[n + 1] = {0};\n\n  // Initialize 'result' array using 'primes'\
    \ array\n  for (int i = 0; i <= n; i++) {\n    bool check = true;\n    for (int\
    \ j = 0; j <= n; j++) {\n      if (i == j) {\n        // If both i and j are the\
    \ same number, the divisor is i\n        result[j] = true;\n      }\n      if\
    \ (i % primes[j] == 0) {\n        // If i is divisible by any of the prime numbers,\
    \ set 'result' array\n        // as 'false'\n        check = false;\n      }\n\
    \    }\n    if (check) {\n      // If all elements of 'result' are 'false', then\
    \ n can be divided evenly\n      return i;\n    }\n  }\n\n  // Return negative\
    \ infinity if the given number does not divide evenly\n  return numeric_limits<int>::min();",
  "\tassert(n % 2 != 0);\n\tlong max_divisor = 2;\n\twhile (max_divisor < n) {\n\t\
    \tmax_divisor++;\n\t}\n\tlong max_divisor_inv = max_divisor - 1;\n\treturn max_divisor\
    \ - max_divisor_inv;", "    long max_num = 1;\n    long max_devid = 1;\n    for\
    \ (int i = 0; i < n; i++) {\n        max_devid = max_devid * (i + 1);\n      \
    \  if (max_devid > max_num)\n            max_num = max_devid;\n    }\n    return\
    \ max_num;", "    assert(n % 2 == 0);\n    long max_d = 0;\n    for (int i = 3;\
    \ i <= sqrt(n); i += 2)\n        if (n % i == 0)\n            if (max_d <= i /\
    \ 2)\n                max_d = i / 2;\n            else\n                max_d\
    \ = i;\n    return max_d;", "    assert(n > 0);\n    long max_divisor = 1;\n \
    \   long max_divisor_p = 1;\n    for(long d = 2; d <= n; d++) {\n        if(n\
    \ % d == 0){\n            if(max_divisor < d)\n                max_divisor = d;\n\
    \            if(max_divisor_p == 0)\n                max_divisor_p = d;\n    \
    \    }\n    }\n    assert(max_divisor_p == n);\n    return max_divisor;", "  \
    \  long res = 0;\n    while (n > 0) {\n        if (n % 2 == 0)\n            n\
    \ /= 2;\n        else\n            n /= 2;\n        ++res;\n    }\n    return\
    \ res;", "  long max_div=1;\n  long div=2;\n  while(n%div!=0 && div<=n)\n  {\n\
    \    div+=2;\n    max_div=max(max_div,div);\n  }\n  return max_div;", "    int\
    \ k = 1;\n    for (int i = 2; i <= n; i++) {\n        long a = n / i;\n      \
    \  if (a % 2 == 0) k++;\n        if (k > i) break;\n    }\n    return i;", " \
    \   long largest_divisor = 0;\n    long div = 1;\n    while (n > 0) {\n      \
    \  while (n % div == 0) {\n            n /= div;\n            largest_divisor\
    \ = div;\n        }\n        div += 1;\n    }\n    return largest_divisor;", " \
    \   long long ans = 1;\n    for (long long i = 1; i < n; ++i) {\n        if (n\
    \ % i == 0) {\n            ans = max(ans, i);\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
