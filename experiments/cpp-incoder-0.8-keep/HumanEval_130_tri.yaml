name: HumanEval_130_tri
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
  \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
  \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
  \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n\
  // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n\
  // tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n\
  // = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have\
  \ to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n\
  // Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long n) {\n"
tests: "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
  \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
  \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6))\
  \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
  \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) ==\
  \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
  \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
  \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9,\
  \ 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
  \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
completions: []
stop_tokens:
- "\n}"
