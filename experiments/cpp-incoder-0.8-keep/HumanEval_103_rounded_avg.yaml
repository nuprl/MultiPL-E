name: HumanEval_103_rounded_avg
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
  \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0)\
  \ {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
  \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
  \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m, and\
  \ your task is to compute the\n// average of the integers from n through m (including\
  \ n and m). \n// Round the answer to the nearest integer and convert that to binary.\n\
  // If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\
  \n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20,\
  \ 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n"
tests: "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
  \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) ==\
  \ (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
  0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
  0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
  0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
  0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
  0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
  0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
  0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
  \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
  \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
completions: ["    Union_std_string_long result = rounded_avg(n);\n    if (result\
    \ < 0){\n        return -1;\n    }\n    unsigned long long long ans = ((n - result.f1)\
    \ + (m - result.f0)) / (m-l);\n    std::string res = std::to_string(ans, 2);\n\
    \    return Union_std_string_long(res);", "    if (n < m)\n        return Union_std_string_long();\n\
    \    if (n == m) return \"0b\" + std::to_string(n);\n    long t = m - n;\n   \
    \ Union_std_string_long u(std::to_string(n));\n    Union_std_string_long v2(std::to_string(t));\n\
    \    Union_std_string_long v3(std::to_string(t - t%2));\n    Union_std_string_long\
    \ v4(std::to_string(t - t%2 - t%3));\n    Union_std_string_long v5(std::to_string(t\
    \ - t%2 - t%3 - t%4));\n    Union_std_string_long v6(std::to_string(t - t%2 -\
    \ t%3 - t%4 - t%5));\n    Union_std_string_long v7(std::to_string(t - t%2 - t%3\
    \ - t%4 - t%5 - t%6));\n    Union_std_string_long v8(std::to_string(t - t%2 -\
    \ t%3 - t%4 - t%5 - t%6 - t%7));\n    Union_std_string_long v9(std::to_string(t\
    \ - t%2 - t%3 - t%4 - t%5 - t%6 - t%7 - t%8));\n    Union_std_string_long v10(std::to_string(t\
    \ - t%2 - t%3 - t%4 - t%5 - t%6 - t%7 - t%8 - t%9));\n    Union_std_string_long\
    \ v11(std::to_string(t - t%2 - t%3 - t%4 - t%5 - t%6 - t%7 - t%8 - t%9 - t%10));\n\
    \    Union_std_string_long v12(std::to_string(t - t%2 - t%3 - t%4 - t%5 - t%6\
    \ - t%7 - t%8 - t%9 - t%10 - t%11));\n    Union_std_string_long v13(std::to_string(t\
    \ - t%2 - t%3 - t%4 - t%5 - t%6 - t%7 - t%8 - t%9 - t%10 - t%11 - t%12));\n  \
    \  Union_std_string_long v14(std::to_string(t - t%2 - t%3 - t%4 - t%5 - t%6 -\
    \ t%7 - t%8 - t%9 - t%10 - t%11 - t%12 - t%13));\n    Union_std_string_long v15(std::to_string(",
  "    if (n >= m) return Union_std_string_long(n);\n    Union_std_string_long res\
    \ = Union_std_string_long(n);\n    // To avoid overflow problems, we store the\
    \ intermediate results in ints.\n    int i1 = 0, i2 = 0;\n    while (i2 <= m)\
    \ {\n        if ((i1 + i2) <= m) {\n            i1 = i1 + 1;\n        } else {\n\
    \            i2 = i2 + 1;\n        }\n    }\n    while (i1 >= n) {\n        i1\
    \ = i1 - 1;\n    }\n    while (i2 >= n) {\n        i2 = i2 - 1;\n    }\n    Union_std_string_long\
    \ re = Union_std_string_long(i1);\n    while (i2 > 1) {\n        re = Union_std_string_long(re)\
    \ + Union_std_string_long(i2-1);\n        i2 = i2 - 1;\n    }\n    return re;",
  "    std::string answer;\n    if (n <= m) {\n        assert(n == m);\n        std::cout\
    \ << std::setprecision(std::numeric_limits<long>::digits10 + 2) << std::setw(8)\
    \ << n << std::endl;\n        return Union_std_string_long(std::to_string(n));\n\
    \    }\n    std::string bin_m = std::to_string((m >> 1) + 1);\n    std::string\
    \ bin_n = std::to_string((n >> 1) + 1);\n    std::string bin_answer;\n    bin_answer\
    \ = bin_m + (bin_n ? '1' : '0');\n    long round = (n - (m >> 1)) / 2;\n    bin_answer\
    \ += std::to_string((round >> 1) + 1);\n    answer = \"0b\" + bin_answer;\n  \
    \  std::cout << std::setprecision(std::numeric_limits<long>::digits10 + 2) <<\
    \ std::setw(8) << std::to_string(round) << std::endl;\n    return Union_std_string_long(answer);",
  "    Union_std_string_long result;\n    if(n>m) return -1;\n    long num;\n    long\
    \ den;\n    if(n%2==0){\n        num = n;\n        den = 1;\n    }\n    else if(n%2==1){\n\
    \        num = n/2;\n        den = 2;\n    }\n    else{\n        num = n/2;\n\
    \        den = 2*(n-1)+1;\n    }\n    for(int i=num; i<=m; i++){\n        union{long\
    \ f0,long f1;} u;\n        u.f0 = num;\n        u.f1 = den;\n        if(i==num){\n\
    \            result =Union_std_string_long(u.f0);\n        }\n        if(i==den){\n\
    \            result =Union_std_string_long(u.f1);\n        }\n        else{\n\
    \            result =Union_std_string_long(u.f0);\n        }\n    }\n    return\
    \ result;", "    Union_std_string_long u(n);\n    long k = n - m;\n    if( k >\
    \ 0) {\n        u.f0 = std::to_string(n);\n        u.f1 = m;\n    } else {\n \
    \       u.f1 = std::to_string(n);\n        u.f0 = std::to_string(m);\n    }\n\
    \    std::string s = std::to_string(u.f1) + std::to_string(u.f0);\n    std::cout\
    \ << s << std::endl;\n    std::stringstream ss;\n    ss << s;\n    std::string\
    \ str_s = ss.str();\n    Union_std_string_long u2 = ss.str();\n    std::cout <<\
    \ str_s << std::endl;\n    std::string str_f = std::to_string(u2.f1);\n    Union_std_string_long\
    \ u3 = std::to_string(u2.f0);\n    Union_std_string_long u4 = std::to_string(u3.f1);\n\
    \    Union_std_string_long u5 = std::to_string(u3.f0);\n    if(str_f[0] == '1'){\n\
    \        Union_std_string_long u6 = Union_std_string_long(str_f);\n        u6.f0\
    \ += u4.f1;\n        u6.f1 += u5.f1;\n        return u6;\n    }\n    if(str_f[0]\
    \ == '0'){\n        Union_std_string_long u7 = Union_std_string_long(str_f);\n\
    \        u7.f0 += u4.f0;\n        u7.f1 += u5.f0;\n        return u7;\n    }\n\
    \    return u3;", "    Union_std_string_long res(n);\n    for (long i = n; i <=m;\
    \ i++){\n        res.f1 += i;\n    }\n    res.f1 = (long long)res.f1/m;\n    if(res.f1>n){\n\
    \        res.f1 = res.f1-n;\n    }\n    return res;", "    if(n>=m){\n       \
    \ return Union_std_string_long(\"-1\");\n    }\n    long mid=(n+m)/2;\n    long\
    \ left_avg=rounded_avg(n,mid);\n    long right_avg=rounded_avg(mid+1,m);\n   \
    \ std::string result=std::to_string(left_avg+right_avg);\n    result=std::bitset<sizeof(result)>(result).to_string();\n\
    \    Union_std_string_long u0(std::to_string(left_avg));\n    Union_std_string_long\
    \ u1(std::to_string(right_avg));\n    Union_std_string_long result1(u0+u1);\n\
    \    if(result1==result){\n        return result;\n    }\n    else{\n        return\
    \ result1;\n    }", "    Union_std_string_long res = Union_std_string_long(-1);\n\
    \    if (n >= m) return res;\n    if (n == 0) return res;\n    while (m--) {\n\
    \        n--;\n        res.f1 = res.f0 + (n%2);\n        res.f0 = n >> 1;\n  \
    \  }\n    res.f1 += res.f0 + (m%2);\n    return res;", "    assert(n > m && n\
    \ >= 0 && m >= 0);\n    // Initialize an Union_std_string_long to represent the\
    \ result.\n    Union_std_string_long result(\"0b0\");\n    \n    // If the first\
    \ number is greater than the second, the answer will be -1.\n    if (n > m) {\n\
    \        result.f1 = -1;\n        return result;\n    }\n    \n    // If m+1 is\
    \ not the largest number that can be represented, return -1.\n    if (m >= (n\
    \ + 1))\n        result.f1 = -1;\n        return result;\n    \n    // Loop through\
    \ the numbers from n-1 to m.\n    for (long i = n-1; i > m + 1; i--)\n    {\n\
    \        // Add the current bit from i to the result and move to the left.\n \
    \       // This means every i numbers that we get will have been added already.\n\
    \        // Add i to the right of the number, and subtract i from the left of\
    \ the\n        // number to get the number of bits from the left that should be\
    \ added\n        // to the result.\n        result.f0 += (i & (1 << i)) >> i;\n\
    \        // Add the bits from i from the right of the number to the result.\n\
    \        result.f1 += i & (1 << (m - i + 1));\n    }\n    \n    // Add the bits\
    \ from the right of the number to the result.\n    result.f1 += (m - n) & ~((1\
    \ << (m - n)) - 1);\n    \n    // Round the result to the nearest integer and\
    \ convert to binary string.\n    std::string bin = result.f0.to_string(2);\n \
    \   // Remove all 0b from the string.\n    bin = bin.substr(2);\n    // Add one\
    \ at the start of the string.\n    bin = \"0b\" + bin;\n    // Append a trailing\
    \ zero if the string isn't exactly 8 characters in length.\n    while (bin.length()\
    \ != 8)\n    {\n        bin = \"0\" + bin;\n    }\n    // Return the string.\n\
    \    return result;", "    long i, k = (m + n) / 2;\n    Union_std_string_long\
    \ answer;\n    std::string ans = \"\";\n    long j = 0;\n    for (i = k; i >=\
    \ 0 && j < n + 1; i--) {\n        if (j == n || j == m || j == (i + 1)) {\n  \
    \          ans += \"1\";\n            ++j;\n        }\n        else if (i < j)\
    \ {\n            ans += \"0\";\n        }\n        else {\n            ans +=\
    \ \"1\";\n        }\n    }\n    if (ans == \"\") {\n        ans = \"0b0\";\n \
    \   }\n    return Union_std_string_long(ans);", "    long low = n;\n    long high\
    \ = m;\n    std::string result = \"\";\n    while(low<=high){\n        result+=to_string(low);\n\
    \        low+=1;\n    }\n    return Union_std_string_long(result);", "    Union_std_string_long\
    \ u;\n    long i1,i2,i3,i4,sum;\n    i1 = n;\n    i2 = m;\n    u.f0 = to_string(i1);\n\
    \    while(i2 > i1){\n        i2 -= i1;\n        u.f1 += i1;\n        u.f0 +=\
    \ to_string(1);\n        i1 += 1;\n    }\n    while(i > 0){\n        i -= i1;\n\
    \        u.f1 += i1;\n        u.f0 += to_string(1);\n        i1 += 1;\n    }\n\
    \    u.f1 += i2;\n    u.f0 += to_string(i2);\n    return u;", "    Union_std_string_long\
    \ ans = Union_std_string_long(\"-1\");\n    // write your code here\n    if(n>m)\
    \ return ans;\n    long mid = (n+m)/2;\n    if(n%2==0) ans = Union_std_string_long(std::to_string(mid)\
    \ +\"1\");\n    else ans = Union_std_string_long(std::to_string(mid) +\"0\");\n\
    \    return ans;", "    assert(n >= 0 && m >= 0);\n    union{long f; std::string\
    \ s;} u;\n    u.s = std::to_string(n);\n    u.f += m;\n    u.f -= m;\n    u.f\
    \ = u.f % 2;\n    u.s = std::to_string(u.f);\n    if(u.s == \"0\")\n        return\
    \ Union_std_string_long(-1);\n    return Union_std_string_long(u.s);", "    assert(n\
    \ >= 0 && m >= 0);\n    Union_std_string_long u(\"\");\n    std::string binary\
    \ = \"\";\n    for(long i = 0; i <= m; i++){\n        if(n == i)\n           \
    \ u += std::to_string(1);\n        else\n            u += std::to_string(n%2)\
    \ + std::to_string(m-i%2);\n        n = (n - i) / 2;\n    }\n    std::reverse(u.f0.begin(),\
    \ u.f0.end());\n    std::reverse(binary.begin(), binary.end());\n    u = Union_std_string_long(binary);\n\
    \    std::stringstream ss;\n    ss << u;\n    return ss.str();", "    Union_std_string_long\
    \ num(n), denom(m);\n    Union_std_string_long rec(num.f0, 0);\n    while (denom.f1\
    \ != 0){\n        rec = Union_std_string_long(rec + num.f0, num.f1 / denom.f1);\n\
    \        num = Union_std_string_long(num.f0, num.f1 % denom.f1);\n        denom\
    \ = Union_std_string_long(denom.f1, 0);\n    }\n    // printf( \"rec = %s, num\
    \ = %s\\n\", rec.f0, num.f0 );\n    rec = Union_std_string_long(rec + num.f0,\
    \ num.f1 / denom.f1);\n    return rec;", "    Union_std_string_long u(n);\n  \
    \  u.f1 = m;\n    if (n >= m) {\n        return -1;\n    }\n    Union_std_string_long\
    \ u0(n - 1);\n    u0.f0 = std::to_string(u0.f1);\n    Union_std_string_long u1(m\
    \ + 1);\n    u1.f0 = std::to_string(u1.f1);\n    Union_std_string_long u2 = u;\n\
    \    Union_std_string_long u3 = u;\n    u2.f1 = u1.f1 + u2.f1;\n    u3.f1 = u0.f1\
    \ + u3.f1;\n    std::string res = \"\";\n    int cnt = 0;\n    while (u2.f0 !=\
    \ \"0\") {\n        cnt += 1;\n        std::string f1 = u2.f0;\n        u2.f0\
    \ = u3.f0;\n        u3.f0 = f1;\n        std::string f2 = u3.f1;\n        u3.f1\
    \ = \"0\";\n        std::string f3 = u3.f0;\n        u3.f0 = f3;\n        res\
    \ = res + f2 + f3;\n    }\n    std::string f4 = u3.f1;\n    u3.f1 = \"0\";\n \
    \   std::string f5 = u3.f0;\n    u3.f0 = f4;\n    res = res + f5 + u3.f1;\n  \
    \  std::string f6 = u2.f1;\n    u2.f1 = \"0\";\n    std::string f7 = u2.f0;\n\
    \    u2.f0 = f6;\n    res = res + f7 + u2.f1;\n    Union_std_string_long u7(fres);\n\
    \    return u7;", "    std::cout << std::bitset<32>(n) << \" \" << std::bitset<32>(m)\
    \ << std::endl;\n    Union_std_string_long ans = Union_std_string_long(-1);\n\
    \    if(n >= m) {\n        return ans;\n    }\n    if(n == 0)\n    {\n       \
    \ return ans.f0;\n    }\n    std::string f1 = std::to_string(n);\n    std::cout\
    \ << f1 << \" \" << std::bitset<32>(m) << std::endl;\n    if(f1.size() < 32)\n\
    \    {\n        f1 += std::to_string(32);\n    }\n    std::cout << f1 << \" \"\
    \ << std::bitset<32>(m) << std::endl;\n    Union_std_string_long a(n);\n    std::cout\
    \ << std::bitset<32>(n) << \" \" << std::bitset<32>(m) << std::endl;\n    long\
    \ k = 0;\n    for(; k < m && n >= 32; k++) {\n        n /= 32;\n    }\n    for(long\
    \ i = 0; i <= k; i++) {\n        ans.f0 += std::to_string(i);\n        Union_std_string_long\
    \ b(f1);\n        ans += b;\n    }\n    std::string f2 = std::to_string(n);\n\
    \    std::cout << f2 << \" \" << std::bitset<32>(m) << std::endl;\n    for(long\
    \ i = k; i < 32; i++) {\n        ans.f0 += std::to_string(i);\n    }\n    Union_std_string_long\
    \ c(m);\n    std::cout << f2 << \" \" << std::bitset<32>(m) << std::endl;\n  \
    \  ans += c;\n    std::cout << f2 << \" \" << std::bitset<32>(m) << std::endl;\n\
    \    ans.f0 += f1;\n    return ans;", "    // write your code here\n    if(n>m){\n\
    \        return Union_std_string_long(-1)\n    }\n    long sum = (n+m)/2;\n  \
    \  long avg = sum/2+sum%2;\n    long b = (long) avg;\n    long l = (long) (b>>31);\n\
    \    long r = (long) (b&(1LL<<31));\n    std::string s = std::to_string(l) + std::to_string(r);\n\
    \    return Union_std_string_long(s);", "    Union_std_string_long a(n), b(m);\n\
    \    Union_std_string_long res = a==b?a:b==a?b:a;\n    return (res.f1 == -1)?-1:res.f1;",
  "    long l1 = n / 10 ;\n    long l2 = n % 10 ;\n    return Union_std_string_long(l1,\
    \ l2);", "    if (n > m) {\n        return Union_std_string_long(-1);\n    }\n\
    \    long a = n + (m - n);\n    return Union_std_string_long(a / 2 + '0');", " \
    \   assert(n <= m);\n    auto n1 = n, n2 = n;\n    Union_std_string_long r1, r2;\n\
    \    do {\n        n1 += n2++;\n    } while (n2 <= m);\n    r1.f1 = n1;\n    r2.f1\
    \ = n2;\n    return (r1 == r2) ? \"0b\" + to_binary_string(n1) : -1;", "    std::ios_base::fmtflags\
    \ fc = std::cout.flags();\n    std::cout.flags(std::ios_base::hex);\n    std::cout.flags(std::ios_base::dec);\n\
    \    Union_std_string_long res(n);\n    long mid = m / 2;\n    long left = (n\
    \ - mid) * (m % 2) == 0 ? mid+1 : mid;\n    long right = (n - mid) * (m % 2) ==\
    \ 0 ? n-mid : n-mid+1;\n    long avg1 = left + right;\n    long avg2 = (n - avg1)\
    \ * (m % 2) == 0 ? n-avg1 : n-avg1+1;\n    res.f0 = std::to_string(avg1);\n  \
    \  if (avg2 != 0)\n        res.f0 += std::to_string(avg2);\n    res.f1 = std::to_string(m\
    \ % 2 == 1);\n    res.f0 += std::to_string(m % 2 == 0);\n    res.f1 = res.f0.substr(0,\
    \ res.f0.length()-1);\n    std::cout.flags(fc);\n    return res;", "    Union_std_string_long\
    \ avg = Union_std_string_long(\"0b\");\n    for (long i = n; i <= m; i++) {\n\
    \        avg = Union_std_string_long(avg.f0 + (i & 1) + \"0\") ;\n        i >>=\
    \ 1 ;\n    }\n    avg = Union_std_string_long(avg.f1 + '1') ;\n    avg = Union_std_string_long(avg.f1\
    \ + '0') ;\n    return avg;", "    if (n < m){\n        return Union_std_string_long(\"\
    -1\");\n    }\n    long sum = 0;\n    long half = m/2;\n    for(long i = n; i\
    \ <= m; i = i + half){\n        sum = sum + i;\n    }\n    long l = (long long)\
    \ sum/m;\n    long r = sum % m;\n    char buf[16];\n    sprintf(buf, \"%ld\",\
    \ l);\n    Union_std_string_long us(buf);\n    sprintf(buf, \"%ld\", r);\n   \
    \ Union_std_string_long ud(buf);\n    if (us == ud){\n        return us;\n   \
    \ }\n    return -1;", "    Union_std_string_long u;\n    if(n > m) return u;\n\
    \    long sum = 0;\n    long avg = sum / n;\n    long low = n;\n    long high\
    \ = m;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) /\
    \ 2;\n        sum += avg;\n        u.f0 += std::to_string(mid);\n        u.f1\
    \ += std::to_string(avg);\n        if(mid == n) break;\n        if(low == mid)\
    \ {\n            high = mid - 1;\n        }\n        else {\n            low =\
    \ mid + 1;\n        }\n    }\n    std::string temp;\n    for(long i = 2; i <=\
    \ n; ++i) {\n        if(std::to_string(u.f0 % i).length() < std::to_string(u.f1\
    \ % i).length()) {\n            temp += std::to_string(u.f0 % i) + std::to_string(u.f1\
    \ % i);\n        }\n        else {\n            temp += std::to_string(u.f1 %\
    \ i);\n        }\n    }\n    u.f0 += temp;\n    u.f1 += std::to_string(sum);\n\
    \    return u;", "    if (n <= m) return (Union_std_string_long)((long)((double)n/(double)m));\n\
    \    return -1;", "    if(n>m)\n        return Union_std_string_long(-1)\n   \
    \ long sum=n;\n    long count=m+1;\n    while(count>1){\n        sum+=n;\n   \
    \     count-=2;\n    }\n    while(sum>m){\n        sum-=m;\n        count+=2;\n\
    \    }\n    sum+=m; \n    count++;\n    Union_std_string_long res(to_string(sum%2)+to_string(n-sum/2));\n\
    \    while(count>1){\n        Union_std_string_long a(to_string(sum%2)+to_string(n-sum/2));\n\
    \        sum/=2;\n        n-=sum/2;\n        Union_std_string_long b(to_string(sum%2)+to_string(n-sum/2));\n\
    \        res.f0+=a<<\"0\"+b;\n        count--;\n    }\n    if(sum!=0)\n      \
    \  res.f0+=to_string(sum%2)+to_string(n-sum/2);\n    return res;", "    if (n\
    \ > m) return Union_std_string_long(-1);\n    int n_to_m = n - m;\n    long int\
    \ sum_ = n_to_m * m;\n    long int sum2 = 0 ;\n    long int k ;\n    for (int\
    \ i = 0; i < 64; i ++) {\n        k = (sum_ % 2) + m ;\n        sum_ -= k ;\n\
    \        sum2 += k ;\n    }\n    union Union_std_string_long result;\n    result.f0\
    \ = std::to_string(sum2) ;\n    result.f1 = sum2 ;\n    return result ;", "  \
    \  assert(n >= 0 && m >=0 );\n    Union_std_string_long sum = n <= m ? Union_std_string_long(n)\
    \ : Union_std_string_long(m);\n    int n_min = sum.f0 == \"\" ? 0 : sum.f0.length();\n\
    \    int m_min = sum.f1 == \"\" ? 0 : sum.f1.length();\n    int n_max = std::min(n,\
    \ m);\n    int m_max = std::max(m, n);\n    if(n_min == m_min && n_max == m_max)\n\
    \        return sum;\n    int mid = n_max;\n    Union_std_string_long mid_sum\
    \ = sum.f0 == \"\" ? Union_std_string_long(n) : sum;\n    Union_std_string_long\
    \ ans;\n    ans = mid_sum;\n    if(n_min == mid) {\n        ans = Union_std_string_long(\"\
    \");\n    }\n    return ans;", "    union{\n        std::string f0;\n        long\
    \ f1;\n    } u;\n    if(n <= m){\n        u.f0 = std::to_string(n);\n        u.f1\
    \ = m;\n        std::string f2 = std::to_string(int(u.f1));\n        u.f0 = u.f0\
    \ + (f2.length()>1?'1':'0');\n        if(f2.length()>1) u.f0 += '1';\n       \
    \ std::string f3 = std::to_string(int(u.f0));\n        u.f1 = (u.f1.to_ull()/pow(2,32))+(f3.length()>1?'1':'0');\n\
    \        if(f3.length()>1) u.f1 += '1';\n        return Union_std_string_long(u.f1,f2);\n\
    \    }\n    return Union_std_string_long(-1,-1);", "    union{long n, m;} u;\n\
    \    u.n = n;\n    u.m = m;\n    long m = u.m;\n    std::string str_n = std::to_string(n);\n\
    \    std::string str_m = std::to_string(m);\n    long long m = m;\n    std::string\
    \ res = \"\";\n    bool flag = false;\n    for(int i = 0 ; i < str_n.size() ;\
    \ i++){\n        if(m % 2 == 0){\n            res += '1';\n            m /= 2;\n\
    \        }\n        else{\n            res += '0';\n            m /= 2;\n    \
    \    }\n    }\n    std::string f1;\n    for(int i = 0 ; i < str_m.size() ; i++){\n\
    \        if(m % 2 == 0){\n            res += '1';\n            m /= 2;\n     \
    \   }\n        else{\n            res += '0';\n            m /= 2;\n        }\n\
    \    }\n    if(n>m){\n        if(!flag){\n            res = \"+\";\n        }\n\
    \        f1 = res;\n    }\n    else{\n        if(flag){\n            f1 = res;\n\
    \        }\n    }\n    if(res != \"\"){\n        std::cout << f1;\n    }\n   \
    \ std::cout << std::endl;\n    Union_std_string_long res1 = Union_std_string_long(f1);\n\
    \    return res1;", "    Union_std_string_long u(n + m);\n    if (u >= m) \n \
    \       return -1;\n    u.f1 = u.f1 + (m - (n + m));\n    if (u.f1 > pow(10,10))\n\
    \    {\n        u.f1 = (((int)u.f1/pow(10,10)) + 1);\n        u.f1 = u.f1 * 10;\n\
    \    }\n    return u;", "    long start = n;\n    long end = m;\n    long mid\
    \ = end - start < 0 ? start : end; // if start is bigger than end, use start\n\
    \    mid = start + (mid / 2);\n    std::string binary = std::to_string(mid);\n\
    \    Union_std_string_long rounded = Union_std_string_long(binary);\n    long\
    \ remainder = 0;\n    if (start > end) {\n        mid--;\n        remainder =\
    \ -1;\n    } else {\n        mid++;\n        remainder = 1;\n    }\n    binary\
    \ = std::to_string(mid);\n    Union_std_string_long result = Union_std_string_long(binary);\n\
    \    std::cout << binary << std::endl;\n    if (result.f1 == remainder) return\
    \ rounded;\n    else return result;", "    if (n <= m)\n    {\n        Union_std_string_long\
    \ u1 = Union_std_string_long(n);\n        Union_std_string_long u2 = Union_std_string_long(m);\n\
    \        long avg = (u1.f1 + u2.f1)/2;\n        return avg;\n    }\n    else\n\
    \        return -1;", "    Union_std_string_long u1 = Union_std_string_long(n);\n\
    \    Union_std_string_long u2 = Union_std_string_long(m);\n    if(u1 >= u2){\n\
    \        return -1;\n    }\n    long diff = (u2.f1 - u1.f1);\n    long sum = (u1.f1\
    \ + u2.f1)/2;\n    if(diff % 2 == 1){\n        sum +=1;\n    }\n    long roundedSum\
    \ = sum;\n    if(diff != 0){\n        long r = diff/2;\n        long tmpSum =\
    \ r * 2;\n        tmp = tmpSum;\n        while(tmpSum < diff){\n            tmp\
    \ += r;\n            tmpSum +=r*2;\n        }\n        roundedSum = tmpSum;\n\
    \    }\n    if(diff != 0){\n        long l = diff - 1;\n        long tmpSum =\
    \ l;\n        tmp = tmpSum;\n        while(tmpSum < diff){\n            tmp +=\
    \ l;\n            tmpSum +=l*2;\n        }\n        roundedSum = tmpSum;\n   \
    \ }\n    Union_std_string_long u3 = Union_std_string_long(roundedSum);\n    return\
    \ u3;", "    union Union_std_string_long u;\n    u.f0 = std::to_string(n);\n \
    \   if (m > n) return -1;\n    u.f1 = m;\n    std::string res = std::bitset<sizeof(long)*8>(u).to_string();\n\
    \    res.insert(res.end(),\"0\",1);\n    return Union_std_string_long(res);",
  "    Union_std_string_long u1,u2;\n    long cnt = 0;\n    if(n>=m){\n        return\
    \ -1;\n    }\n    for(long i=n;i<=m;i++){\n        cnt++;\n        if(i%2==0){\n\
    \            u1.f0 += std::to_string(i);\n        }\n        else{\n         \
    \   u2.f1 += i;\n        }\n    }\n    if(cnt%2==0){\n        u1.f0 += \"1\";\n\
    \    }\n    else{\n        u2.f1 += \"1\";\n    }\n    u1.f1 = (u1.f1.find_first_not_of(\"\
    0\")+1);\n    u1.f1 = (u1.f1/2).to_string(2);\n    u2.f1 = (u2.f1.find_first_not_of(\"\
    0\")+1);\n    u2.f1 = (u2.f1/2).to_string(2);\n    return u1+u2;", "    std::bitset<sizeof(long)*8>\
    \ u(n, m);\n    // if n is greater than m, return -1\n    if (u.test())\n    \
    \    return Union_std_string_long();\n    // round to nearest integer\n    long\
    \ x = u.to_ullong();\n    int y = x % 2;\n    // convert the integer to a binary\
    \ string\n    std::string a = std::bitset<sizeof(long)*8>(x >> y).to_string();\n\
    \    // if there are more than one bit set, concatenate them\n    if (a[0] ==\
    \ '1')\n        a.insert(a[0], '0');\n    if (a.size() > 1)\n        a = std::string(1,\
    \ a.back()) + a.substr(0, a.size() - 1);\n    // if the binary string has more\
    \ than one leading 0, convert them to 0\n    if (a[0] == '0') {\n        for (int\
    \ i = 1; i < a.size(); i++)\n            a[i] = '0';\n    }\n    return Union_std_string_long(a);",
  "    Union_std_string_long x;\n    if(n<m){\n        return Union_std_string_long(\"\
    -1\");\n    }\n    long k = n+m;\n    long l = 0;\n    for(int i = n; i <= m;\
    \ i++){\n        l = i + (k-l)/2;\n        x.f0 = std::to_string(i);\n       \
    \ x.f1 = l;\n        k = l+1;\n    }\n    if(x.f1<=0){\n        x.f0 = std::to_string(x.f1);\n\
    \        return x;\n    }\n    x.f0 = std::to_string(x.f1);\n    x.f1 = x.f0 -\
    \ '0';\n    return x;", "    Union_std_string_long nn = Union_std_string_long(n);\n\
    \    Union_std_string_long mm = Union_std_string_long(m);\n    if( n > m ) {\n\
    \        return nn;\n    }\n    long k = mm;\n    long cnt = 0;\n    while( k\
    \ > 0 ) {\n        cnt ++;\n        k >>= 1;\n    }\n    long mask = 0x0101010101010101L;\n\
    \    long result = 0;\n    while( cnt > 0 ) {\n        result += mask;\n     \
    \   cnt --;\n        mask >>= 1;\n    }\n    result &= 0x5555555555555555L;\n\
    \    result |= (nn << 1);\n    return Union_std_string_long(result);", "    Union_std_string_long\
    \ res = Union_std_string_long();\n    if(n<m)\n        return Union_std_string_long();\n\
    \    if(n == m)\n        res.f0 = to_binary_string(n);\n    else{\n        int\
    \ i = 0; \n        for(long k = n ; k < m ; k++){\n            i = i+1;\n    \
    \        if(i%2)\n                res.f0.insert(res.f0.begin(), to_binary_string(k));\n\
    \            else\n                res.f0.insert(res.f0.begin(), to_binary_string(k));\n\
    \        }\n    }\n    return res; ", "    long long avg = ((long long)(n + m))\
    \ /2;\n    Union_std_string_long ans = Union_std_string_long(avg);\n    long long\
    \ ans1 = 0;\n    int cnt = 0;\n    for(long long i=n;i<=m;i++) {\n        ans1++;\n\
    \        if(ans.f0[i] == '1') {\n            cnt++;\n        }\n    }\n    if(cnt\
    \ > ans1-1) {\n        return Union_std_string_long(-1);\n    }\n    while(ans.f0[ans.f1.size()-1]\
    \ == '1') {\n        ans.f1--;\n    }\n    for(int i = ans1.size();i>0;i--) {\n\
    \        ans.f0[i-1] = ans.f0[i];\n    }\n    return ans;", "    Union_std_string_long\
    \ res(n);\n    for (long i = n; i <= m; i++){\n        \n    }\n    return res;",
  "    if (n == m)\n        return Union_std_string_long(n);\n    if (n > m) {\n \
    \       return -1;\n    }\n    std::string s(sizeof(union Union_std_string_long)\
    \ / sizeof(char));\n    std::bitset<sizeof(union Union_std_string_long) >> 1>\
    \ bits(s);\n    std::size_t size = bits.size();\n    Union_std_string_long u(s);\n\
    \    bits.set(size-n, 1);\n    bits.set(size-m, 0);\n    bits.to_ulong();\n  \
    \  std::string ans = std::bitset<sizeof(union Union_std_string_long) >> 1>(u).to_string();\n\
    \    return Union_std_string_long(ans);", "    Union_std_string_long u(n);\n \
    \   Union_std_string_long v(m);\n    bool flag = false;\n    long sum = 0;\n \
    \   long count = 1;\n    while (v > u) {\n        flag = true;\n        sum +=\
    \ count;\n        count += 1;\n        v -= u;\n    }\n    if (flag) {\n     \
    \   return Union_std_string_long(-1);\n    }\n    long l1 = sum % 10;\n    long\
    \ r1 = sum / 10;\n    long l2 = n % 10;\n    long r2 = n / 10;\n    long l3 =\
    \ m % 10;\n    long r3 = m / 10;\n    if (l2 == 0) {\n        long f = l1;\n \
    \       if (l3 == 0) {\n            return Union_std_string_long(f);\n       \
    \ }\n        long f = l1;\n        if (l2 == 0) {\n            return Union_std_string_long(f);\n\
    \        }\n        long f = l1;\n        if (l3 == 0) {\n            return Union_std_string_long(f);\n\
    \        }\n        return Union_std_string_long((f + l3) / 2);\n    }\n    if\
    \ (r3 == 0) {\n        long f = r1;\n        if (r2 == 0) {\n            return\
    \ Union_std_string_long(f);\n        }\n        long f = r1;\n        if (r2 ==\
    \ 0) {\n            return Union_std_string_long(f);\n        }\n        long\
    \ f = r1;\n        if (r3 == 0) {\n            return Union_std_string_long(f);\n\
    \        }\n        return Union_std_string_long((f + r2) / 2);\n    }\n    if\
    \ (l3 == 0 && l2 == 0) {\n        long f = r1;\n        if (l1 == 0) {\n     \
    \       return Union_std_string_long(f);\n        }\n        long f = r1;\n  \
    \      if (l2 == 0) {\n            return Union_std_string_long(f);\n        }\n\
    \        long f = r1;\n        if (l3 == 0) {\n            return Union_std_string_long(f);\n\
    \        }\n        return Union_std_string_long((f + l1) / 2);\n    }\n    if\
    \ (r3 == 0 && r2 == 0) {\n        long f = l1;\n        if (l1 == 0) {\n     \
    \       return Union_std_string_long(f);\n        }\n        long f = l1;\n  \
    \      if (l2 == 0) {\n            return Union_std_string_long(f);\n        }\n\
    \        long f = l1;\n        if (l3 == 0) {\n            return Union_std_string_long(f);\n\
    \        }\n        return Union_std_string_long((f + r1) / 2);\n    }\n    if\
    \ (l3 == 0) {\n        long f = r1;\n        if (r2 == 0) {\n            return\
    \ Union_std_string_long(f);\n        }\n        long f = r1;\n        if (r2 == ",
  "    union{ long f; std::string f1;} s;\n    std::string bin;\n    long x = n; long\
    \ y = m; long f = 0;\n    while (x > 0){\n        if ((x % 10) == 0){\n      \
    \      s.f1.push_back(x % 10);\n            f += 1;\n        }\n        x /= 10;\n\
    \    }\n    while (y > 0){\n        if ((y % 10) == 0){\n            s.f1.push_back(y%10);\n\
    \            f += 1;\n        }\n        y /= 10;\n    }\n    if (n == 0 && m\
    \ == 0){\n        s.f0 = \"0b0\";\n    }\n    else{\n        if (m == 0){\n  \
    \          s.f0 = \"0b1\";\n        }\n    }\n    if (f == 0){\n        s.f1[0]\
    \ = \"0b0\";\n    }\n    else if (f == 1){\n        s.f1[0] = \"0b1\";\n    }\n\
    \    else{\n        if (s.f1.size() > 0){\n            if (s.f1.size() % 2 ==\
    \ 0){\n                s.f1[(s.f1.size()-1)/2] = \"0b1\";\n            }\n   \
    \     }\n    }\n    if (s.f0.size() > 1){\n        int count = 0;\n        for\
    \ (int i = 0; i < s.f0.size(); i++){\n            count += s.f0[i]-'0';\n    \
    \    }\n        s.f1 = s.f1.substr(0, count);\n    }\n    Union_std_string_long\
    \ res = s;\n    return res;", "    // write your code here\n    Union_std_string_long\
    \ u;\n    for(long i = n; i <= m; i++){\n        u.f0 += to_binary_string(i);\n\
    \    }\n    long l = u.f1 / (m - n);\n    l = floor(l);\n    std::string s = to_binary_string(l);\n\
    \    s += '0' + (u.f1 % (m - n)); \n    return u;", "    Union_std_string_long\
    \ u(n), v(m);\n    while (u < v) {\n        u.f1 += u.f0;\n    }\n    u.f1 -=\
    \ u.f0;\n    u.f0 = u.f1;\n    v.f1 -= v.f0;\n    v.f0 = v.f1;\n    return u;",
  "    \n    std::string str_n = std::to_string(n);\n    std::string str_m = std::to_string(m);\n\
    \    \n    long n = std::stoi(str_n);\n    long m = std::stoi(str_m);\n    \n\
    \    long sum = 0;\n    long avg = 0;\n    \n    for(int i = n; i <= m; ++i){\n\
    \        sum += i;\n    }\n    avg = sum / 2;\n    \n    std::string str = std::to_string(avg);\n\
    \    std::string bin = std::bitset<64>(str).to_string();\n    \n    if (bin ==\
    \ \"000000000000000000000000000000000000000000000001\") {\n        bin = \"0b1\"\
    ;\n    } else if (bin == \"000000000000000000000000000000000000000000000010\"\
    ) {\n        bin = \"0b10\";\n    } else if (bin == \"000000000000000000000000000000000000000000000100\"\
    ) {\n        bin = \"0b100\";\n    } else if (bin == \"000000000000000000000000000000000000000000001000\"\
    ) {\n        bin = \"0b1000\";\n    } else if (bin == \"000000000000000000000000000000000000000000010000\"\
    ) {\n        bin = \"0b10000\";\n    } else if (bin == \"000000000000000000000000000000000000000000100000\"\
    ) {\n        bin = \"0b100000\";\n    } else if (bin == \"0000000000000000000000000000000000000001000000\"\
    ) {\n        bin = \"b11000000\";\n    } else if (bin == \"0000000000000000000000000000000000000010000000\"\
    ) {\n        bin = \"b110000000\";\n    } else if (bin == \"000000000000000000000000000000000000010000000\"\
    ) {\n        bin = \"b1100000000\";\n    } else if (bin == \"0000000000000000000000000000000000001000000000\"\
    ) {\n        bin = \"b11000000000\";\n    } else if (bin == \"0000000000000000000000000000000000010000000000\"\
    ) {\n        bin = \"b110000000000\";\n    } else if (bin == \"0000000000000000000000000000000000100000000000\"\
    ) {\n        bin = \"b1100000000000\";\n    } else if (bin == \"0000000000000000000000000000000001000000000000\"\
    ) {\n        bin = \"b11000000000000\";\n    } else if (bin == \"0000000000000000000000000000000010000000000000\"\
    ) {\n        bin = \"b110000000000000\";\n    } else if (bin == \"11111111111111111111111111111111111111110\"\
    ) {\n        bin = \"b1111111111111111111111111111111111111110\";\n    } else\
    \ if (bin == \"1111111111111111111111111111111111111100\") {\n        bin = \"\
    b1111111111111111111111111111111111111100\";\n    } else if (bin == \"11111111111111111111111111111111111111000\"\
    ) {\n        bin = \"b11111111111111111111111111111111111111000\";\n    } else\
    \ if (bin == \"11111111111111111111111111111111111110000\") {\n        bin = \"\
    b11111111111111111111111111111111111110000\";\n    } else if (bin == \"111111111111111111111111111111111111100000\"\
    ) {\n        bin = \"b111111111111111111111111111111111111100000\";\n    } else\
    \ if (bin == \"1111111111111111111111111111111111111100000\") {\n        bin =\
    \ \"b1111111111111111111111111111111111111100000\";\n    } else if (bin == \"\
    111111111111111111111111111111111111111111111111\") {\n        bin = \"b111111111111111111111111111111111111111111111111\"\
    ;\n    }\n", "    if(n < m){\n        return Union_std_string_long(n);\n    }\n\
    \    long long n = std::min(n, m);\n    long long m = std::max(n, m);\n    long\
    \ long a = n + (m - n)/2;\n    long long b = n + (m -n)%2;\n    long long c =\
    \ b+a;\n    long long d = n+a;\n    long long e = (d - c)%2;\n    long long f\
    \ = c + e;\n    std::string result;\n    if (d % 2 == 0){\n        if (e == 0){\n\
    \            if (f == 1){\n                result = \"0b1\";\n            } else\
    \ {\n                std::string bin = std::to_string(f);\n                for\
    \ (int i = 31; i >= 0; i --){\n                    if(bin == \"0\"){\n       \
    \                 bin = \"1\";\n                        break;\n             \
    \       } else {\n                        bin = \"0\" + bin;\n               \
    \     }\n                }\n                result = \"0b\" + bin;\n         \
    \   }\n        } else {\n            if (f == 1){\n                result = \"\
    0b11\";\n            } else {\n                std::string bin = std::to_string(f);\n\
    \                for (int i = 31; i >= 0; i --){\n                    if(bin ==\
    \ \"0\"){\n                        bin = \"1\";\n                        break;\n\
    \                    } else {\n                        bin = \"0\" + bin;\n  \
    \                  }\n                }\n                result = \"0b\" + bin;\n\
    \            }\n        }\n    } else {\n        if (e == 0){\n            if\
    \ (f == 1){\n                result = \"0b11\";\n            } else {\n      \
    \          std::string bin = std::to_string(f);\n                for (int i =\
    \ 31; i >= 0; i --){\n                    if(bin == \"0\"){\n                \
    \        bin = \"1\";\n                        break;\n                    } else\
    \ {\n                        bin = \"0\" + bin;\n                    }\n     \
    \           }\n                result = \"0b\" + bin;\n            }\n       \
    \ } else {\n            if (f == 1){\n                result = \"0b110\";\n  \
    \          } else {\n                std::string bin = std::to_string(f);\n  \
    \              for (int i = 31; i >= 0; i --){\n                    if(bin ==\
    \ \"0\"){\n                        bin = \"1\";\n                        break;\n\
    \                    } else {\n                        bin = \"0\" + bin;\n  \
    \                  }\n                }\n                result = \"0b\" + bin;\n\
    \            }\n        }\n    }\n    Union_std_string_long u(std::move(result));\n\
    \    return u;", "    Union_std_string_long a = rounded(n - 1);\n    Union_std_string_long\
    \ b = rounded(m);\n    Union_std_string_long sum = a + b;\n    Union_std_string_long\
    \ r = sum / 2;\n    Union_std_string_long rem = sum % 2;\n    if (rem == 0) return\
    \ r;\n    Union_std_string_long ans = sum / 2;\n    return ans;", "    Union_std_string_long\
    \ result = rounded_avg2(n, m);\n    if(result == -1) return -1;\n    return result.f0;",
  "    Union_std_string_long u(n);\n    long m1 = m;\n    while(--m1) {\n        u.f1\
    \ = m1;\n        if(m1) u += n;\n    }\n    long l = n;\n    long r = m;\n   \
    \ while(l && r) {\n        if(l & 1) r--;\n        else l++;\n    }\n    Union_std_string_long\
    \ u0(r);\n    while(!u0) {\n        Union_std_string_long u1(r);\n        while(--l\
    \ && !u1) {\n            u1 = u;\n            if(!l--) u0 = u1;\n            else\
    \ if(l & 1) u1 = u + u;\n            else u1 = u + u1;\n        }\n        while(l\
    \ && !u1) {\n            u1 = u;\n            l--;\n            if(!l--) u0 =\
    \ u1;\n            else if(l & 1) u1 = u + u;\n            else u1 = u + u1;\n\
    \        }\n    }\n    assert(u);\n    return u;", "    Union_std_string_long\
    \ ans;\n    if(n >= m )\n        return ans;\n    if(n<0)\n        return ans;\n\
    \    long count = (long) (m+1) - n;\n    long num = 1L;\n    long den = 1L;\n\
    \    for(long i=n; i<=m; i++) {\n        if(i==n){\n            ans.f0 += \"1\"\
    ;\n            ans.f1 += num;\n        }\n        else if(i==m)\n        {\n \
    \           ans.f0 += \"0\";\n            ans.f1 += den;\n        }\n        else\
    \ {\n            ans.f0 += \"0\";\n            ans.f1 += num;\n            ans.f1\
    \ += \"1\";\n            ans.f1 += den;\n            num = 1L;\n            den\
    \ = 1L;\n        }\n    }\n    return ans;", "    long sum = 0;\n    for (long\
    \ i = n; i <= m; i++){\n        sum += i;\n    }\n    long avg = sum / 2;\n  \
    \  long digits = 0;\n    int i = 2;\n    while ( avg && i < 8 ){\n        avg\
    \ = ( avg % 2 == 0 ) ? avg / 2 : ( 3 * avg + 1 ) / 2;\n        digits++;\n   \
    \     i++;\n    }\n    Union_std_string_long ans;\n    if( digits > 0 ){\n   \
    \     std::cout << \"digits : \" << digits << std::endl;\n        long l = 0;\n\
    \        for( int i=0; i<digits; i++ ){\n            l += avg;\n            ans.f1[digits-i-1]\
    \ = l % 2;\n            l /= 2;\n        }\n        for( int i=digits-1; i>=0;\
    \ i-- ){\n            ans.f0[i-digits] = ans.f1[i] ;\n        }\n    }\n    return\
    \ ans;", "    // Write your code here\n    Union_std_string_long u(n);\n    u.f1\
    \ += m;\n    long mid = u.f1 / 2;\n    long left_half = u.f1 % 2;\n    u.f1 =\
    \ mid;\n    long right_half = u.f1 % 2;\n    u.f1 = left_half + right_half;\n\
    \    if(u.f1 < 0)\n    {\n        u.f1 += 2;\n    }\n    return u;", "    assert(m\
    \ >= n && n >= 1);\n    Union_std_string_long u(n);\n    long k = m;\n    if (m\
    \ > n){\n        return u;\n    }\n    while (k>0) {\n        if (k % 2 == 1)\
    \ {\n            u.f1 += 1;\n            k -= 2;\n        }\n        else{\n \
    \           u.f0 += 1;\n            k /= 2;\n        }\n    }\n    return u;",
  "    assert(n >= 0 && m >= 0);\n    if (n >= m) {\n        return Union_std_string_long(m);\n\
    \    }\n    Union_std_string_long res = Union_std_string_long(-1);\n    long long\
    \ total = (n - m) * 2;\n    long long cnt = (n - m);\n    long long cur = 0;\n\
    \    while (total > 1) {\n        res.f0 = res.f0 + std::to_string(cur);\n   \
    \     total -= cnt;\n        cur++;\n        cnt = (n - m) - cur;\n        cur\
    \ /= 2;\n    }\n    res.f0 = res.f0 + std::to_string(cur);\n    return res;",
  "    Union_std_string_long u(n);\n    Union_std_string_long v(m);\n    if (n > m)\
    \ return -1;\n    if (n <= m) {\n        u.f0 = std::to_string(n);\n        u.f1\
    \ = std::to_string(m) + std::to_string(n);\n        return u;\n    }\n    u.f1\
    \ = std::to_string(n);\n    v.f0 = std::to_string(m);\n    v.f1 = std::to_string(n);\n\
    \    return v;", "    Union_std_string_long result;\n    long diff = n - m;\n\
    \    if (diff <= 0) return result;\n    std::string bin = std::bitset<32>(n).to_string();\n\
    \    std::string rest = std::bitset<32>(diff).to_string();\n    rest = rest.substr(0,\
    \ rest.size() - 1);\n    result.f0 = bin + rest;\n    result.f1 = n;\n    return\
    \ result;", "    if (n == 0 || m == 0) {\n        std::cout << \"\\nInvalid arguments\
    \ : \" << n << \" and \" << m << std::endl;\n        return Union_std_string_long();\n\
    \    }\n\n    long sum = 0;\n    long half = (n + m - 1) / 2;\n    while (half)\
    \ {\n        sum += half;\n        half /= 2;\n    }\n    sum += n;\n    sum +=\
    \ m;\n\n    if (sum < 0) sum = sum + 2147483647;\n    long count = 0;\n    while\
    \ (n--) count++;\n    if (sum > 2147483647) count = sum - 2147483647;\n    long\
    \ a = 0;\n    long b = 1;\n    for (int i = 0; i < count; i++) {\n        long\
    \ temp = a + b;\n        a = b;\n        b = temp;\n    }\n    std::string s;\n\
    \    long curr = b;\n    while (curr != 0) {\n        s += ((int)curr % 2 == 0\
    \ ? \"0\" : \"1\");\n        curr = curr >> 1;\n    }\n    if (n == m || n-- ==\
    \ 0) s = \"0b\" + s;\n    if (n == 0 && m == 0) s = \"0b\" + \"0\";\n    s = s.substr(1);\n\
    \    return Union_std_string_long(s);", "    if (n == m || n >= m) return Union_std_string_long(-1);\n\
    \    std::string str1(n + 1), str2(n + 1), binary(n + 1);\n    if (n & 1 == 1)\
    \ str1.at(0) = '1';\n    if (n & 2 == 2) str1.at(1) = '1';\n    if (n & 4 == 4)\
    \ str1.at(2) = '1';\n    if (n & 8 == 8) str1.at(3) = '1';\n    if (n & 16 ==\
    \ 16) str1.at(4) = '1';\n    if (n & 32 == 32) str1.at(5) = '1';\n    if (n &\
    \ 64 == 64) str1.at(6) = '1';\n    if (n & 128 == 128) str1.at(7) = '1';\n   \
    \ if (n & 256 == 256) str1.at(8) = '1';\n    if (n & 512 == 512) str1.at(9) =\
    \ '1';\n    if (n & 1024 == 1024) str1.at(10) = '1';\n    if (n & 2048 == 2048)\
    \ str1.at(11) = '1';\n    if (n & 4096 == 4096) str1.at(12) = '1';\n    if (n\
    \ & 8192 == 8192) str1.at(13) = '1';\n    if (n & 16384 == 16384) str1.at(14)\
    \ = '1';\n    if (n & 32768 == 32768) str1.at(15) = '1';\n    if (n & 65536 ==\
    \ 65536) str1.at(16) = '1';\n    if (n & 131072 == 131072) str1.at(17) = '1';\n\
    \    if (n & 262144 == 262144) str1.at(18) = '1';\n    if (n & 524288 == 524288)\
    \ str1.at(19) = '1';\n    if (n & 1048576 == 1048576) str1.at(20) = '1';\n   \
    \ if (n & 2097152 == 2097152) str1.at(21) = '1';\n    if (n & 4194304 == 4194304)\
    \ str1.at(22) = '1';\n    if (n & 8388608 == 8388608) str1.at(23) = '1';\n   \
    \ if (n & 16777216 == 16777216) str1.at(24) = '1';\n    if (n & 33554432 == 33554432)\
    \ str1.at(25) = '1';\n    if (n & 67108864 == 67108864) str1.at(26) = '1';\n \
    \   if (n & 134217728 == 134217728) str1.at(27) = '1';\n    if (n & 268435456\
    \ == 268435456) ", "    if (n < m)\n    {\n        return Union_std_string_long(-1);\n\
    \    }\n    else if (n == m)\n    {\n        return Union_std_string_long(n);\n\
    \    }\n    long mid = (n + m) / 2;\n    Union_std_string_long mid1 = rounded_avg(n,\
    \ mid);\n    Union_std_string_long mid2 = rounded_avg(mid, m+1);\n    Union_std_string_long\
    \ mid3 = rounded_avg(mid+1, m+2);\n    Union_std_string_long mid4 = rounded_avg(mid+2,\
    \ m+3);\n    Union_std_string_long mid5 = rounded_avg(mid+3, m+4);\n    Union_std_string_long\
    \ mid6 = rounded_avg(mid+4, m+5);\n    Union_std_string_long mid7 = rounded_avg(mid+5,\
    \ m+6);\n    Union_std_string_long mid8 = rounded_avg(mid+6, m+7);\n    Union_std_string_long\
    \ mid9 = rounded_avg(mid+7, m+8);\n    Union_std_string_long mid10 = rounded_avg(mid+8,\
    \ m+9);\n    Union_std_string_long mid11 = rounded_avg(mid+9, m+10);\n    Union_std_string_long\
    \ mid12 = rounded_avg(mid+10, m+11);\n    Union_std_string_long mid13 = rounded_avg(mid+11,\
    \ m+12);\n    Union_std_string_long mid14 = rounded_avg(mid+12, m+13);\n    Union_std_string_long\
    \ mid15 = rounded_avg(mid+13, m+14);\n    Union_std_string_long mid16 = rounded_avg(mid+14,\
    \ m+15);\n    Union_std_string_long mid17 = rounded_avg(mid+15, m+16);\n    Union_std_string_long\
    \ mid18 = rounded_avg(mid+16, m+17);\n    Union_std_string_long mid19 = rounded_avg(mid+17,\
    \ m+18);\n    Union_std_string_long mid20 = rounded_avg(mid+18, m+19);\n    Union_std_string_long\
    \ mid21 = rounded_avg(mid+19, m+20);\n    Union_std_string_long mid22 = rounded_avg(mid+20,\
    \ m+21);\n    Union_std_string_long mid23 = rounded_avg(mid+21, m+22);\n    Union_std_string_long\
    \ mid24 = rounded_avg(mid+22, m+23);\n    Union_", "    Union_std_string_long\
    \ u(n);\n    assert(n >= m);\n    u <<= (n + m - 2) / 2;\n    u >>= (n + m - 2)\
    \ / 2;\n    return u;", "    union Union_std_string_long u1, u2;\n    if (n >=\
    \ m) return -1;\n    // Your code here.\n    u1.f0 = to_string(n);\n    u1.f1\
    \ = to_string(m);\n    u2.f0 = to_string(n+m);\n    u2.f1 = to_string(1);\n  \
    \  u2.f0 += u2.f1;\n    std::string result = to_string(int64_t(u1.f1/2)) + u2.f0;\n\
    \    return result;", "    Union_std_string_long ans(-1);\n    long avg = ((n+m)\
    \ / 2)*2;\n    long rest = (n+m-avg)*2;\n    long count = 0;\n    while (rest\
    \ > 0){\n        long mod = rest % 10;\n        count++;\n        rest /= 10;\n\
    \    }\n    avg /= count;\n    ans.f0 = std::to_string(avg);\n    if (ans.f0 !=\
    \ '1') {\n        ans.f0 = std::string(1, ans.f0);\n        ans.f0 += '1';\n \
    \   }\n    return ans;", "    Union_std_string_long avg = Union_std_string_long(0.0f);\n\
    \    if(n<m){\n        return avg;\n    }\n    long i=n;\n    long j=m;\n    while(i<j){\n\
    \        if(i%2==0){\n            avg = avg + i;\n        }\n        i = i + 1;\n\
    \    }\n    while(i>m){\n        avg = avg + i;\n        i = i - 1;\n    }\n \
    \   avg = avg / (2*m);\n    std::stringstream ss;\n    ss << std::setprecision(0)\
    \ << std::fixed << avg;\n    std::string s = ss.str();\n    char res[100];\n \
    \   res[0] = '0';\n    for(int i = s.length()-1 ; i >= 0 ; i--){\n        res[i+1]\
    \ = s[i];\n    }\n    Union_std_string_long re = Union_std_string_long(res);\n\
    \    return re;", "    Union_std_string_long ans(0);\n    std::string binNum;\n\
    \    while (n<=m) {\n        binNum += to_string(n);\n        n++;\n    }\n  \
    \  if (binNum != \"\") {\n        binNum = binNum.substr(binNum.length()-1);\n\
    \    }\n    ans.f1 = std::stoll(binNum);\n    return ans;", "    Union_std_string_long\
    \ u1 = Union_std_string_long(n);\n    Union_std_string_long u2 = Union_std_string_long(m);\n\
    \    long k = (u1.f1 - u2.f1) / ((u1.f0 - u2.f0) * 2);\n    long result = (u1.f0\
    \ - u2.f0) / k + u2.f0;\n    return Union_std_string_long(result);", "    // Write\
    \ your code here\n    \n    long low = n;\n    long high = m;\n    long mid;\n\
    \    Union_std_string_long ans;\n    if(high > low){\n        mid = (low + high)\
    \ / 2;\n        ans = rounded_avg(low, mid);\n        ans.f1 = mid;\n        ans\
    \ = rounded_avg(mid, high);\n        ans.f1 = mid;\n    }\n    return ans;", " \
    \   Union_std_string_long a = Union_std_string_long(n);\n    Union_std_string_long\
    \ b = Union_std_string_long(m);\n    Union_std_string_long c = Union_std_string_long(n\
    \ - m);\n    Union_std_string_long d = Union_std_string_long(n + m);\n    Union_std_string_long\
    \ e = Union_std_string_long(2 * n + 2 * m + 1);\n    Union_std_string_long f =\
    \ Union_std_string_long(2 * m + 1);\n    Union_std_string_long g = Union_std_string_long(2\
    \ * n - 2 * m + 1);\n    Union_std_string_long h = Union_std_string_long(2 * n\
    \ - m + 1);\n    Union_std_string_long i = Union_std_string_long(2 * n - n - m\
    \ + 1);\n    Union_std_string_long j = Union_std_string_long(2 * n + m - 1);\n\
    \    Union_std_string_long k = Union_std_string_long(2 * m + 1);\n    Union_std_string_long\
    \ l = Union_std_string_long(2 * n - m + 1);\n    Union_std_string_long m = Union_std_string_long(2\
    \ * n - n - m + 1);\n    Union_std_string_long n = Union_std_string_long(2 * n\
    \ + m - 1);\n    Union_std_string_long o = Union_std_string_long(2 * m + 1);\n\
    \    Union_std_string_long p = Union_std_string_long(2 * n - m + 1);\n    Union_std_string_long\
    \ q = Union_std_string_long(2 * n - n - m + 1);\n    Union_std_string_long r =\
    \ Union_std_string_long(2 * n + m - 1);\n    Union_std_string_long s = Union_std_string_long(2\
    \ * m - 1);\n    Union_std_string_long t = Union_std_string_long(2 * n - n - m\
    \ + 1);\n    Union_std_string_long u = Union_std_string_long(2 * n + 2 * m - 1);\n\
    \    Union_std_string_long v = Union_std_string_long(2 * n - m + 1);\n    Union_std_string_long\
    \ w = Union_std_string_long(2 * n + 2 * m - 1);\n    Union_std_string_long x =\
    \ Union_std_string_long(2 * n + m + 1);\n    Union_std_string_long y = Union_std_string_long(2\
    \ * n - m - 1);\n    Union_std_string_long z = Union_std_string_long(2 * m - 1);\n\
    \    Union_std_string_long aa = Union_std_string_long(n - 2 * m);\n    Union_std_string_long\
    \ ab = Union_std_string_long(n - m);\n    Union_std_string_long ac = Union_std_string_long(n\
    \ - 2 * ", "    Union_std_string_long result(n);\n    if (n <= m){\n        result.f1\
    \ = -1; \n        return result;\n    }\n    \n    long sum = 0;\n    \n    long\
    \ mid = n+m;\n    long sum1 = mid - 1;\n    while (sum1 < mid && sum < mid){\n\
    \        sum += mid;\n        sum1 += mid;\n    }\n    \n    long sum2 = mid;\n\
    \    while(sum1 < mid && sum2 < mid){\n        sum1 += mid;\n        sum2 += mid;\n\
    \    }\n    \n    long sum3 = sum2 - sum1;\n    \n    long sum4 = sum;\n    \n\
    \    while (sum4 < mid){\n        sum4 += mid;\n    }\n    \n    long sum5 = sum\
    \ - sum4;\n    \n    if (sum < mid){\n        result.f1 = sum5/2;\n        return\
    \ result;\n    }\n    if (sum2 > mid){\n        result.f1 = sum3/2;\n        return\
    \ result;\n    }\n    result.f1 = sum5/(2*mid);\n    return result;", "    assert(n\
    \ >= m && \"n is less than m\");\n    // To store the result\n    Union_std_string_long\
    \ res (0);\n    if (n > m)\n        res = -1;\n    long mid = n + (m - 1) / 2;\n\
    \    while (n <= mid && n <= mid) {\n        long k = n;\n        long remainder\
    \ = m % n;\n        while (m >= k && remainder >= k) {\n            m -= k;\n\
    \            n += k;\n            k /= 2;\n            mid = n + (m - 1)/2;\n\
    \            long remainderM = remainder % n;\n            if (remainder >= remainderM)\n\
    \                remainder = remainderM;\n        }\n        if (n <= mid)\n \
    \           res = Union_std_string_long(n);\n    }\n    // To store the remainders\n\
    \    long remainder1 = 0, remainder2 = 0;\n    if (n >= mid)\n        remainder1\
    \ = m % n;\n    if (mid >= m)\n        remainder2 = mid % n;\n    while (n <=\
    \ m) {\n        if (n <= mid)\n            res ^= Union_std_string_long(n);\n\
    \        n += k;\n        k /= 2;\n        mid = n + (m - 1)/2;\n        if (n\
    \ <= mid)\n            res ^= Union_std_string_long(n);\n    }\n    if (remainder1\
    \ > 0)\n        res ^= Union_std_string_long(remainder1);\n    if (remainder2\
    \ > 0)\n        res ^= Union_std_string_long(remainder2);\n    return res;", " \
    \   std::string bin = std::bitset<sizeof(n) * 8>(n).to_string();\n    bin = bin.substr(bin.find_last_not_of(\"\
    1\") + 1);\n    Union_std_string_long u = Union_std_string_long(bin);\n    assert(u.f0\
    \ <= m);\n    if (u.f0 <= n) {\n        std::string bin2 = std::bitset<sizeof(m)\
    \ * 8>(m).to_string();\n        bin2 = bin2.substr(bin2.find_last_not_of(\"1\"\
    ) + 1);\n        u = Union_std_string_long(bin2);\n    }\n    if (u.f1 < m) {\n\
    \        return -1;\n    }\n    return u.f0;", "    std::string res = \"\";\n\
    \    long num = 0;\n    if(n>m){\n        return Union_std_string_long(-1);\n\
    \    }\n    for(int i = n; i <= m; i++){\n        num = num + i;\n    }\n    num\
    \ = num / 2;\n    num = num + (num > 1 ? 1 : 0);\n    long remain = num % 2;\n\
    \    while(num > 0){\n        num = num - 1;\n        remain = remain * 2 + num\
    \ % 2;\n    }\n    res.push_back(remain);\n    return Union_std_string_long(res);",
  "    Union_std_string_long a(n);\n    Union_std_string_long b(m);\n    std::cout\
    \ << \"n=\" << (a.f1 == b.f1 ? a.f0 : \"-1\") << std::endl;\n    Union_std_string_long\
    \ c(a.f1);\n    std::cout << \"m=\" << (c.f1 == b.f1 ? c.f0 : \"-1\") << std::endl;\n\
    \    Union_std_string_long d = c.f1;\n    if (c.f1 == b.f1) {\n        return\
    \ a;\n    } else {\n        Union_std_string_long e = a.f1;\n        Union_std_string_long\
    \ f = c.f1;\n        if (c.f1 > b.f1) {\n            Union_std_string_long g =\
    \ a.f0;\n            Union_std_string_long h = b.f0;\n            Union_std_string_long\
    \ k = a.f1;\n            Union_std_string_long l = b.f1;\n            Union_std_string_long\
    \ m = c.f0;\n            Union_std_string_long n = c.f1;\n            Union_std_string_long\
    \ p = d.f1;\n            Union_std_string_long q = d.f0;\n            Union_std_string_long\
    \ r = c.f0;\n            Union_std_string_long s = c.f1;\n            Union_std_string_long\
    \ t = a.f0;\n            Union_std_string_long u = a.f1;\n            Union_std_string_long\
    \ v = b.f0;\n            Union_std_string_long w = b.f1;\n            Union_std_string_long\
    \ x = c.f0;\n            Union_std_string_long y = c.f1;\n            Union_std_string_long\
    \ z = d.f0;\n            Union_std_string_long aa = g.f0;\n            Union_std_string_long\
    \ ab = g.f1;\n            Union_std_string_long ac = h.f0;\n            Union_std_string_long\
    \ ad = h.f1;\n            Union_std_string_long ae = k.f0;\n            Union_std_string_long\
    \ af = k.f1;\n            Union_std_string_long ag = l.f0;\n            Union_std_string_long\
    \ ah = l.f1;\n            Union_std_string_long ai = m.f0;\n            Union_std_string_long\
    \ aj = m.f1;\n            Union_std_string_long ak = n.f0;\n            Union_std_string_long\
    \ al = n.f1;\n            Union_std_string_long am = p.f0;\n            Union_std_string_long\
    \ an = p.f1;\n            Union_std_string_long ap = q.f0;\n            Union_std_string_long\
    \ aq = q.f1;\n            Union_std_string_long ar = r.f0;", "    Union_std_string_long\
    \ u0{std::to_string(n)};\n    Union_std_string_long u1{std::to_string(m)};\n \
    \   if (u0.f1 > u1.f1) {\n        Union_std_string_long u2{u1.f1};\n        u1.f1\
    \ = u1.f0;\n        u1.f0 = u2.f0;\n    }\n    std::string str = u0.f0;\n    std::string\
    \ str2 = u1.f0;\n    int i = 0, count = 0;\n    while (str.length() && str2.length())\
    \ {\n        if (str[i] != '1') {\n            str += '0';\n            count++;\n\
    \        }\n        if (str2[i] != '1') {\n            str2 += '0';\n        \
    \    count++;\n        }\n        i++;\n    }\n    if (str.length()) str += '1';\n\
    \    if (str2.length()) str2 += '1';\n    long average = count ? str[0] + str1[0]\
    \ / count : 0;\n    if (average < 0) average = -1 * average;\n    return Union_std_string_long{std::to_string(average)};",
  "    if(n>m) return -1;\n    long l1 = (n >> 1) + 1;\n    long l2 = m >> 1;\n  \
    \  long l3 = n - m;\n    long l4 = m - n;\n    long l5 = m + 1;\n    long l6 =\
    \ n >> 1;\n    long l7 = m >> 1;\n    long l8 = m - n;\n    long l9 = n + 1;\n\
    \    long l10 = m >> 1;\n    long l11 = n >> 1;\n    long l12 = m >> 1;\n    long\
    \ l13 = n - m;\n    long l14 = m + 1;\n    long l15 = n + 1;\n    long l16 = m\
    \ >> 1;\n    long l17 = m >> 1;\n    long l18 = n >> 1;\n    long l19 = n >> 1;\n\
    \    long l20 = m >> 1;\n    long l21 = n >> 1;\n    long l22 = n - m;\n    long\
    \ l23 = n + 1;\n    long l24 = m >> 1;\n    long l25 = n + 1;\n    long l26 =\
    \ n >> 1;\n    long l27 = m >> 1;\n    long l28 = m - n;\n    long l29 = n - m;\n\
    \    long l30 = n - m;\n    long l31 = m + 1;\n    long l32 = n - m;\n    long\
    \ l33 = n - m;\n    long l34 = n >> 1;\n    long l35 = n >> 1;\n    long l36 =\
    \ m - n;\n    long l37 = n >> 1;\n    long l38 = n >> 1;\n    long l39 = n >>\
    \ 1;\n    long l40 = n >> 1;\n    long l41 = n >> 1;\n    long l42 = n >> 1;\n\
    \    long l43 = n >> 1;\n    long l44 = n >> 1;\n    long l45 = n >> 1;\n    long\
    \ l46 = n >> 1;\n    long l47 = n >> 1;\n    long l48 = n >> 1;\n    long l49\
    \ = n >> 1;\n    long l50 = n >> 1;\n    long l51 = n >> 1;\n    long l52 = n\
    \ >> 1;\n    long l53 = n >> 1;\n    long l54 = n >> 1;\n    long l55 = n >> 1;\n\
    \    long l56 = n >> 1;\n    long l57 = n >> 1;\n    long l58 = n >> 1;\n    long\
    \ l59 = n >> 1;\n    long ", "    // Write your code here\n    Union_std_string_long\
    \ u(n);\n    Union_std_string_long v(m);\n    assert(u != v);\n    if (u == v){\n\
    \        std::cout<<\"-1\";\n        return -1;\n    }\n    long i = n;\n    long\
    \ j = m;\n    Union_std_string_long result(u);\n    while(i>j){\n        result=result+v;\n\
    \        i--;\n        j++;\n    }\n    while(i<j){\n        result=result+u;\n\
    \        j--;\n        i++;\n    }\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 0;\n    a = result.f1.f1;\n    b = result.f1.f0;\n    c = result.f0.f1;\n\
    \    long k = 0;\n    while(a!=0 && b!=0 && a<b && b<c){\n        k++;\n     \
    \   a = result.f1.f1;\n        b = result.f1.f0;\n        c = result.f0.f1;\n\
    \    }\n    long result1 = k-1;\n    std::cout<<std::bitset<sizeof(long)>((long)\
    \ result1)<<std::endl;\n    long r = result/2;\n    if (r>n){\n        std::cout<<\"\
    -1\";\n        return -1;\n    }\n    long r1 = r - n;\n    Union_std_string_long\
    \ result2(n);\n    while (r1>0){\n        result2 = result2 + u;\n        r1--;\n\
    \    }\n    std::cout<<std::bitset<sizeof(long)>((long) result2)<<std::endl;\n\
    \    long r2 = 0;\n    while (r2>0){\n        r2--;\n        result2 = result2\
    \ + u;\n    }\n    std::cout<<std::bitset<sizeof(long)>((long) result2)<<std::endl;\n\
    \    Union_std_string_long result3 = result2/2;\n    std::cout<<std::bitset<sizeof(long)>((long)\
    \ result3)<<std::endl;\n    return Union_std_string_long(r);", "    assert(n >=\
    \ 0);\n    assert(m >= 0);\n    long sum = 0; \n    long mid = n + (m - 1); \n\
    \    while(n > 0){\n        sum += n; \n        n -= mid;\n    }\n    if(mid >\
    \ 0){\n        sum += mid; \n    }\n    mid = n - 1; \n    while(n > 0){\n   \
    \     sum += mid; \n        n -= mid; \n    }\n    sum /= m; \n    sum += 1; \n\
    \    while(sum != 0){\n        sum += '0'; \n    }\n    Union_std_string_long\
    \ u = Union_std_string_long(std::to_string(sum)); \n    return u; ", "    if (m\
    \ > n) return -1;\n    Union_std_string_long res;\n    if (n % 2 == 0) {\n   \
    \     for (long i = n; i > m; i -= 2) {\n            res.f0 += std::to_string(i);\n\
    \        }\n        res.f1 += std::to_string(n);\n    } else {\n        for (long\
    \ i = n; i > m; i -= 2) {\n            res.f1 += std::to_string(i);\n        }\n\
    \        res.f0 += std::to_string(n);\n    }\n    res.f1 = res.f1.find_first_not_of(\"\
    0\");\n    return res;", "    assert(n >= 0 && m >=0);\n    if(m == 0) return\
    \ Union_std_string_long(\"\");\n    \n    Union_std_string_long res(std::to_string(n));\n\
    \    while(res.f1 < m) {\n        ++res.f0;\n        ++res.f1;\n    }\n    return\
    \ res;", "    // write your code here\n    assert(n < m);\n    auto x = n + (m\
    \ - n ) / 2;\n    return x < n ? Union_std_string_long(x) : Union_std_string_long(-x-1);",
  "    if(n>m){\n        return Union_std_string_long(\"-\");\n    }\n    long x =\
    \ n;\n    long y = m;\n    long temp;\n    long xl = x%2;\n    long yl = y%2;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = -2;\n    long f = 0;\n    long g = -2;\n    long h = -2;\n    long i = -2;\n\
    \    long j = -2;\n    long k = -2;\n    long l = -2;\n    long m = -2;\n    long\
    \ n = -2;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = -2;\n    long t = -2;\n    long u = -2;\n    long v = -2;\n    long\
    \ w = -2;\n    long x = -2;\n    long y = -2;\n    long z = -2;\n    long aa =\
    \ 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = -2;\n    long am = -2;\n    long an\
    \ = -2;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = -2;\n    long at = -2;\n    long au = -2;\n    long av = -2;\n\
    \    long aw = -2;\n    long ax = -2;\n    long ay = -2;\n    long az = -2;\n\
    \    long aaa = -2;\n    long aab = -2;\n    long aac = -2;\n    long aad = -2;\n\
    \    long aae = 0;\n    long aaf = 0;\n    long aag = 0;\n    long aah = 0;\n\
    \    long aai = 0;\n    long aaj = 0;\n    long aak = 0;\n    long aal = 0;\n\
    \    long aam = 0;\n    long aan = 0;\n    long aoa = 0;\n    long aap = 0;\n\
    \    long aqo = 0;\n    long aar = 0;\n    long asa = 0;\n    long aat = 0;\n\
    \    long aua = 0;\n    long aav = 0;\n    long awa = -2;\n    long axa = 0;\n\
    \    long aya = 0;\n    long aza = 0;\n    long aaaa = -2;\n    long aaba = -2;\n\
    \    long aaca = ", "    assert(n >= 0 && m >= 0);\n    Union_std_string_long\
    \ result;\n    if (n <= m)\n    {\n        long n1 = n;\n        long m1 = m;\n\
    \        while (n1 <= m1)\n        {\n            long temp = n1;\n          \
    \  n1 = temp + 1;\n            if (n1 == m1)\n                result.f0 += '1';\n\
    \            else\n                result.f0 += '0';\n        }\n    }\n    else\n\
    \    {\n        long n1 = n;\n        long m1 = m;\n        while (n1 > m1)\n\
    \        {\n            long temp = m1;\n            m1 = temp - 1;\n        \
    \    if (n1 == m1)\n                result.f0 += '0';\n            else\n    \
    \            result.f0 += '1';\n        }\n    }\n    return Union_std_string_long(result.f0);",
  "    Union_std_string_long u;\n    long low = 0;\n    long high = n;\n    if (n\
    \ > m) {\n        low = n;\n        high = m;\n    }\n    u.f0 = to_string(low);\n\
    \    u.f1 = to_string(high);\n    Union_std_string_long result(rounded_avg(low,\
    \ high));\n    \n    bool flag = false;\n    if (n == m && result.f1 == 0) {\n\
    \        flag = true;\n    }\n    if (flag == true && result.f0 == result.f1)\
    \ {\n        result.f1 = \"0b1\";\n    }\n    if (flag == true && result.f0 !=\
    \ result.f1) {\n        result.f0 = result.f1 + result.f0;\n    }\n    return\
    \ result;", "    Union_std_string_long ans = 0;\n    if (n > m) {\n        return\
    \ Union_std_string_long(-1);\n    }\n    long i = n;\n    for (; i < m; i++) {\n\
    \        ans += i;\n    }\n    if (i > n) {\n        ans += n - i;\n    }\n  \
    \  long p = ((ans + m - n) * 10) % 10;\n    ans = Union_std_string_long(p);\n\
    \    return ans;", "    Union_std_string_long u(n, 0);\n    u = rounded_avg(n,\
    \ u);\n    u = rounded_avg(u, m);\n    return u;", "    Union_std_string_long\
    \ ans;\n    if(n == m)\n        return Union_std_string_long(n);\n    if(n < m)\n\
    \        ans = Union_std_string_long(n);\n    else{\n        ans = Union_std_string_long(m);\n\
    \        n = m - 1;\n    }\n    long rem = m % n;\n    while(rem > 0){\n     \
    \   ans.f0 += n & 1;\n        ans.f1 += rem & 1;\n        rem >>= 1;\n       \
    \ n >>= 1;\n    }\n    if(n == 0)\n        ans.f0 = \"\";\n    return ans;", " \
    \   Union_std_string_long sum;\n    for (long i = 0; i <= m; i++) {\n        sum.f1\
    \ += i;\n        sum.f1 %= 10;\n    }\n    if (sum.f0 < n) {\n        sum.f1 =\
    \ -1; // or sum.f1 = -sum.f1; // -sum.f1 -> 0b11111\n    }\n    sum.f1 /= 10;\n\
    \    return sum;", "    Union_std_string_long u;\n    u.f0 = to_binary_string(n);\n\
    \    u.f1 = to_binary_string(m);\n    if (n == m) \n        return u;\n    if\
    \ (n < m) {\n        std::swap(n, m);\n        std::swap(u);\n    }\n    if (n\
    \ > m)\n        return -1;\n    int i = 0;\n    while (u.f0[i] != '0') {\n   \
    \     i += 1;\n    }\n    long count = 0;\n    while (i < u.f1.length()) {\n \
    \       count += 1;\n        i += 1;\n    }\n    long s = 1;\n    int j = 0;\n\
    \    while (u.f1[j] != '0') {\n        s += 1;\n        j += 1;\n    }\n    long\
    \ res = n/s;\n    while (++i < u.f1.length()) \n        res += 1;\n    res = res\
    \ + (n - res)/2;\n    res = to_binary_string(res);\n    Union_std_string_long\
    \ u2;\n    u2.f0 = res;\n    u2.f1 = to_binary_string(n - res);\n    if (u ==\
    \ u2) \n        return u2;\n    return -1;", "    if(n>m) return -1;\n    Union_std_string_long\
    \ s;\n    long total = (m+1);\n    s.f1 = total;\n    std::string bin = s.f0.substr(0,\
    \ n);\n    for(long i=n; i<=m; i++){\n        total += i;\n        bin = s.f0+bin;\n\
    \    }\n    int pos = bin.find_last_not_of(\" \");\n    long digit = total - pos\
    \ - 1;\n    if(digit <= 9)\n        s.f0 = bin.substr(0,pos)+\"0\"+bin.substr(pos+1,bin.size()-pos-1);\n\
    \    else\n        s.f0 = bin.substr(0,pos)+\"1\"+bin.substr(pos+1,bin.size()-pos-1);\n\
    \    return s;", "    // Write your code here.\n    if(n>m){\n        return Union_std_string_long(-1);\n\
    \    }\n    int sum=n;\n    for(int i=n;i<m;i++){\n        sum+=i;\n    }\n  \
    \  long sum1=sum%2;\n    if(sum1==0){\n        return Union_std_string_long(sum);\n\
    \    }\n    else return Union_std_string_long(sum+1);", "    assert(n >= 0 &&\
    \ m >= 0 && n <= m);\n    long n0, n1;\n    n0 = n % 2;\n    n1 = n - n0;\n  \
    \  Union_std_string_long result(n0);\n    long m0, m1;\n    m0 = m % 2;\n    m1\
    \ = m - m0;\n    Union_std_string_long result(m0);\n    Union_std_string_long\
    \ v(n0);\n    Union_std_string_long w(m0);\n    long i = 1;\n    union{\n    \
    \    std::string f0;\n        long f1;\n    };\n    Union_std_string_long tmp(n0);\n\
    \    Union_std_string_long tmp1(m0);\n    union{\n        std::string f0;\n  \
    \      long f1;\n    };\n    Union_std_string_long tmp2(n0);\n    Union_std_string_long\
    \ tmp3(m0);\n    for (; i <= n; ++i) {\n        if (i % 2 != 0) {\n          \
    \  v = Union_std_string_long(i);\n            tmp += v;\n        }\n    }\n  \
    \  for (; i <= m; ++i) {\n        if (i % 2 != 0) {\n            w = Union_std_string_long(i);\n\
    \            tmp1 += w;\n        }\n    }\n    if (n0 > m0) {\n        return\
    \ -1;\n    }\n    if (n0 < m0) {\n        tmp = tmp - tmp1;\n        tmp2 = tmp\
    \ + tmp1;\n        std::swap(tmp3, tmp2);\n        tmp2 = Union_std_string_long(tmp2.f0);\n\
    \        tmp3 = Union_std_string_long(tmp3.f1);\n    }\n    std::cout << tmp2;",
  "    Union_std_string_long u;\n    long i;\n    for(i = n;i<=m;i++){\n        u.f0\
    \ = std::to_string(i);\n        u.f1 = i;\n        if(u.f0 == std::to_string(n))\n\
    \            return u;\n    }\n    return -1;", "    long result = 0;\n    long\
    \ sum = 0;\n    \n    if(n>m){\n        return -1;\n    }\n    else{\n       \
    \ for(int i=n; i<=m; i++){\n            sum += i;\n        }\n        result =\
    \ sum / m;\n        std::string s;\n        s = to_string(result);\n        std::string\
    \ a = \"0b\";\n        \n        for(long i=0; i<s.size(); i++){\n           \
    \ a = a + s[i];\n        }\n        return Union_std_string_long(a);\n    }",
  "    int n1 = n/2;\n    int m1 = m/2;\n    Union_std_string_long u1, u2;\n    u1.f0\
    \ = std::to_string(n1);\n    u2.f1 = std::to_string(m1);\n    if (u1.f0 > u2.f1)\
    \ {\n        return Union_std_string_long(-1)\n    }\n    union Union_std_string_long\
    \ u3, u4;\n    bool eq = u1 == u3 || u2 == u4;\n    \n    u3.f0 = std::to_string(n);\n\
    \    u4.f1 = std::to_string(m);\n    if (eq) {\n        return u3;\n    }\n  \
    \  u3.f0 = std::to_string(m-1);\n    u4.f1 = std::to_string(n);\n    if (eq) {\n\
    \        return u3;\n    }\n    u3.f0 = std::to_string(m+1);\n    u4.f1 = std::to_string(n);\n\
    \    if (eq) {\n        return u3;\n    }\n    \n    return Union_std_string_long(0);",
  "    Union_std_string_long u0(\"0\"), u1(\"1\");\n    for (long i = n; i <= m; i++)\n\
    \    {\n        if (i > m)\n        {\n            u0.f1 = -1;\n            return\
    \ u0;\n        }\n        u0.f0 = u1.f1;\n        if (u0.f0)\n        {\n    \
    \        u1.f0 = u0.f1;\n            u1.f1 = i;\n        }\n        else\n   \
    \     {\n            u1.f1 = i;\n        }\n    }\n    u0.f0 = u1.f1;\n    return\
    \ u0;", "    // write your code here\n    Union_std_string_long sum;\n    long\
    \ i, j, sum = 0;\n    int len = std::min(std::min(n, m), 1000);\n    for (i =\
    \ len; i <= n; i++)\n        sum += i;\n    for (j = len; j <= m; j++)\n     \
    \   sum += j;\n    for (i = len; i <= m; i++)\n        sum += i;\n    sum = (sum\
    \ * 8) / len + 1;\n    i = sum;\n    sum = sum / i;\n    sum += (i % 2);\n   \
    \ int b = sum % 2;\n    sum -= b;\n    int a = sum % 2;\n    std::string s;\n\
    \    int x = sum / 2;\n    if (x == 0)\n        return \"0b0\";\n    s += (x %\
    \ 2);\n    if (x < 10)\n        s += '0';\n    else s += '1';\n    s += ((sum\
    \ % 2) == 1);\n    s += a;\n    s += b;\n    Union_std_string_long av;\n    av.f0\
    \ = s;\n    return av;", "    assert(n <= m);\n    long sum = 0, rem = n >= m\
    \ ? m : n;\n    long count = 0;\n    while (rem > 0){\n        sum += rem;\n \
    \       count++;\n        rem -= rem;\n    }\n    long mod = sum % 2;\n    long\
    \ rem = sum / 2;\n    long ans = 0;\n    if (mod != 0)\n        ans = (mod !=\
    \ 1) ? rem/2 : rem*2 + 1; \n    else \n        ans = (mod != 1) ? rem/2 : rem*2;\n\
    \    return Union_std_string_long(std::to_string(ans));", "    long total = 0;\n\
    \    long count = 0; \n    long i = 0;\n    while(n <= m && i < 1000000){\n  \
    \      total += n;\n        ++i;\n        if(i % 3 == 0 || i == 1000000)\n   \
    \         count++;\n        n += i;\n    }\n    if(total > m){\n        return\
    \ -1;\n    }\n    else{\n        Union_std_string_long temp = Union_std_string_long(total);\n\
    \        temp.f0 = std::to_string((long)temp.f0);\n        temp.f1 = std::to_string((long)temp.f1);\n\
    \        std::cout<<\"\\n\"<<temp.f0;\n        std::cout<<\"\\n\"<<temp.f1;\n\
    \        std::cout<<\"\\n\"<<std::stoi(temp.f1,2);\n        std::cout<<\"\\n\"\
    <<std::stoi(temp.f1,8);\n    }\n    return 0;", "    long ln = std::max(static_cast<long>(n),\
    \ static_cast<long>(0));\n    long lm = std::max(static_cast<long>(m), static_cast<long>(0));\n\
    \    long sum = (lm + ln - 1) / 2;\n    long avg = sum / 2;\n    Union_std_string_long\
    \ u;\n    u.f1 = avg;\n    u.f0 = std::to_string(avg).substr(1);\n    return u;",
  "    int a = n;\n    int b = m;\n    int r = 1;\n    Union_std_string_long x = Union_std_string_long(\"\
    0b0\");\n    int i = 3;\n    while(i <= n && i <= m) {\n        a.f1 << 1;\n \
    \       b.f1 << 1;\n        r.f1 = a.f1 + b.f1;\n        x.f1 = (r == r.f1 ? r.f1\
    \ : r.f1) | (x.f1 << 1);\n        i += 2;\n        a.f0 += std::to_string(b);\n\
    \        b.f0 += std::to_string(b);\n    }\n    if(n == m) x.f1 = r.f1;\n    else\
    \ x.f1 = r.f0 | (x.f1 << 1);\n    return x;", "    std::bitset<sizeof(n) * CHAR_BIT>\
    \ bin;\n    union Union_std_string_long au;\n    std::string s = std::to_string(n);\n\
    \    for(long i = s.size() - 1; i >= 0; i--) {\n        if(s[i] == '0') break;\n\
    \        bin = (bin<<1) | 1;\n    }\n    au.f0 = \"0\";\n    for(long i = s.size();\
    \ i > 0; i--) {\n        if(s[i] == '1') {\n            bin = (bin<<1) | 1;\n\
    \        }\n        if(bin) {\n            au.f0 += std::to_string(bin);\n   \
    \         bin = (bin<<1) | 1;\n        }\n    }\n    s += std::to_string(bin);\n\
    \    bin = std::bitset<sizeof(n) * CHAR_BIT>(n);\n    for(long i = s.size(); i\
    \ > 0; i--) {\n        if(s[i] == '1') {\n            bin = (bin<<1) | 1;\n  \
    \      }\n        if(bin) {\n            au.f1 += std::to_string(bin);\n     \
    \       bin = (bin<<1) | 1;\n        }\n    }\n    au.f0 = \"0b\" + au.f0;\n \
    \   au.f1 = \"0b\" + au.f1;\n    std::cout << \"n = \" << n << \", m = \" << m\
    \ << \", s = \" << s << \" = \" << au.f0 + au.f1 << std::endl;\n    \n    if(n\
    \ < m) {\n        return -1;\n    }\n    return au.f0 + au.f1;", "    union  Union_std_string_long\
    \ u;\n    std::string f0, f1;\n    if(n<m){\n        if(n <= 0)\n            return\
    \ Union_std_string_long(-1);\n        u.f0 = std::to_string(n);\n        u.f1\
    \ = m;\n        return Union_std_string_long(u);\n    }\n    u.f1 = std::to_string(m);\n\
    \    u.f0 = std::to_string(n);\n    return Union_std_string_long(u);", "    Union_std_string_long\
    \ res (-1); \n    assert(n >= m);\n    if(n >= m) {\n        res.f0 = \"\";\n\
    \        res.f1 = -1;\n        return res;\n    }\n    // Round up to nearest\
    \ integer of base 2\n    long long n1 = (n + m - 1) / 2 * 2;\n    long long m1\
    \ = (m + n - 1) / 2 * 2;\n    // If integer is even, round up\n    long long n2\
    \ = n1 + 1;\n    long long m2 = m1 + 1;\n    // If integer is odd, round down\n\
    \    long long n3 = n2 - 1;\n    long long m3 = m2 - 1;\n    // Calculate average\
    \ of the integers\n    long long sum1 = n + m - 2;\n    long long sum2 = n1 +\
    \ m1 - 2;\n    long long sum3 = n2 + m2 - 2;\n    long long sum4 = n3 + m3 - 2;\n\
    \    res.f0 = reinterpret_cast < std::string > (std::to_string (sum1));\n    res.f1\
    \ = reinterpret_cast < std::string > (std::to_string (sum2));\n    res.f0 = reinterpret_cast\
    \ < std::string > (std::to_string (sum3));\n    res.f1 = reinterpret_cast < std::string\
    \ > (std::to_string (sum4));\n    return res;", "    if (n >= m) return -1;\n\
    \    auto res = (long) ceil(n / m) * m;\n    std::string bin = to_string(res);\n\
    \    auto s = \"\";\n    for(int i = 0; i < bin.length(); i++){\n        s +=\
    \ std::string(bin[i] == '1' ? \"1\" : \"0\");\n    }\n    return Union_std_string_long(s);",
  "    if(m>n){\n        std::cout<<\"-1\"<<std::endl;\n        return Union_std_string_long();\n\
    \    }\n    long sum = 0;\n    int count = 1;\n    for(long i=n; i< m; i++){\n\
    \        sum+=i;\n        count++;\n    }\n    long avg = sum/count;\n    long\
    \ remainder= sum%count;\n    long ret = 0;\n    while(remainder != 0){\n     \
    \   ret = remainder;\n        ++count;\n        remainder = sum%count;\n     \
    \   sum += count;\n    }\n    ret = (ret-1)+avg;\n    ret = ret*2;\n    Union_std_string_long\
    \ ret1 = Union_std_string_long(ret);\n    \n    return ret1;", "    std::string\
    \ binary = \"\";\n    long sum = 0;\n    if (n >= m) {\n        cout << \"-1\"\
    \ << endl;\n        return Union_std_string_long(-1);\n    }\n    std::string\
    \ s = std::to_string(n);\n    std::string bin = s.substr(0, s.length() - 1).to_string();\n\
    \    std::string last = s.substr(s.length() - 1, 1).to_string();\n    if (bin\
    \ == \"0\") {\n        if (binary.size() > 0 && last.compare(\"1\") != 0) {\n\
    \            binary = binary.substr(0, binary.size() - 1);\n        }\n      \
    \  binary = binary.concat(\"0\");\n    } else {\n        binary = binary.concat(bin);\n\
    \    }\n    while (bin != \"0\") {\n        int sum_bin = sum % 2;\n        sum\
    \ += sum_bin == 0 ? 1 : 0;\n        bin = bin.substr(0, bin.length() - 1);\n \
    \       if (bin.length() == 1) {\n            binary.concat(\"1\");\n        }\
    \ else {\n            binary.concat(\"0\");\n        }\n    }\n    bin = last.substr(last.length()\
    \ - 1, 1);\n    if (bin.length() == 1) {\n        binary.concat(\"1\");\n    }\
    \ else {\n        binary.concat(\"0\");\n    }\n    long average = (n + 1) / 2;\n\
    \    binary = binary.concat(std::to_string(average));\n    Union_std_string_long\
    \ result;\n    result.f0 = binary;\n    result.f1 = average;\n    return result;",
  "    // write your code here\n    if (m > n) {\n        return Union_std_string_long(-1);\n\
    \    }\n    auto u1 = (n + m) / 2;\n    auto u2 = (n + m - u1) / 2;\n    Union_std_string_long\
    \ u3 = u1 != u2;\n    auto u4 = u2 - u3;\n    if (u4.f0 != \"0b0\" && (u1.f0 !=\
    \ \"0b0\") && (u3.f1 != \"0b0\")) {\n        u3.f1 += \"1\";\n        u3.f1 =\
    \ to_bin(u3.f1);\n    }\n    return u3;", "    Union_std_string_long sum = (Union_std_string_long(n)).f1;\n\
    \    long temp = sum;\n    while(temp <= m){\n        sum += temp;\n        temp\
    \ += n;\n    }\n    assert(n <= m);\n    return sum == -1 ? -1 : union_to_binary(sum.f0);",
  "    if (n > m) \n        return Union_std_string_long();\n    if (n == m && n !=\
    \ 0) \n        return Union_std_string_long(std::to_string(n));\n    long i =\
    \ n;\n    long count = 1;\n    while (m > 0 && i < m) {\n        ++count;\n  \
    \      m /= 10;\n        ++i;\n    }\n    if (i == n) \n        return Union_std_string_long(std::to_string(n));\n\
    \    long rest = m % 10;\n    Union_std_string_long u2;\n    if (rest == 0 &&\
    \ count == 1) \n        u2.f0 = std::to_string(n);\n    else{\n        u2.f0 =\
    \ std::to_string(n) + std::to_string(count);\n    }\n    u2.f1 = rest;\n    return\
    \ u2;", "    // write your code in here\n    Union_std_string_long u(n), v(m),\
    \ sum;\n    for(long i=n; i<=m; i++){\n        sum = u;\n        u += v;\n   \
    \     v += sum;\n    }\n    if(n > m)\n        return u;\n    return -1;", " \
    \   if (n <= m){\n        assert(0);\n        return Union_std_string_long(\"\"\
    );\n    }\n    Union_std_string_long a(n), b(m);\n    a.f1 = a.f1 + b.f1;\n  \
    \  return (a.f0 >= b.f0) ? Union_std_string_long(a.f1) : Union_std_string_long(-1);",
  "    // write your code in C/C++ here\n    // double n = 1.5;\n    // double m =\
    \ 2;\n    // std::cout << std::setprecision(15);\n    // std::cout << std::fixed\
    \ << std::showpoint << n << \"\\n\";\n    // std::cout << std::fixed << std::showpoint\
    \ << m << \"\\n\";\n    // Union_std_string_long res; \n    // res = (n - m) /\
    \ (n * m);\n    // Union_std_string_long res;\n    // std::cout << std::fixed\
    \ << std::showpoint << res << \"\\n\";\n    // return res;\n    return Union_std_string_long(n\
    \ - m / static_cast<double>(n * m));", "    Union_std_string_long u(n);\n    u\
    \ = u + m;\n    u = u - n; \n    return u;", "    Union_std_string_long u;\n \
    \   long m = m - n;\n    long d = m / 2;\n    u.f0 = to_bits((n / 2) + d);\n \
    \   u.f1 = to_bits(m);\n    return u;", "    assert(n >= m && n != -1 && m !=\
    \ -1);\n    long sum = 0;\n    long cur = n; // current number\n    long i = m-1;\
    \ // left index \n    while(cur != 0){\n        sum += cur%2;\n        cur /=\
    \ 2;\n    }\n    union Union_std_string_long u;\n    u.f1 = sum;\n    if(cur ==\
    \ 1)\n        return u;\n    else\n        return -1L;", "    union{\n       \
    \ std::string f0;\n        long f1;\n    } s;\n    string str;\n    s.f0 = to_string(\
    \ (n + m)/2);\n    s.f1 = (n + m)/2;\n    str=s.f0;\n    for(long i=(str.length()+1)/2;\
    \ i>=0; --i) {\n        str += s.f1;\n    }\n    if(str.length()%2)\n        str\
    \ += '0';\n    return Union_std_string_long(str);", "    Union_std_string_long\
    \ u;\n    u.f1 = n;\n    long remainder = m - n;\n    std::string str = remainder\
    \ > 0 ? \"0b\" : \"0b0\";\n    std::string f2 = str;\n    long remainder_str =\
    \ remainder;\n    for(long i = 1; i < remainder; i++){\n        f2 = f2 + str;\n\
    \        remainder_str = remainder_str + i;\n    }\n    u.f1 = f2;\n    for(long\
    \ i = 0; i < remainder_str; i++){\n        u.f1 = u.f1 + \"1\";\n    }\n    u.f1\
    \ = u.f1 + str;\n    for(long i = remainder; i < m; i++){\n        u.f1 = u.f1\
    \ + \"0\";\n    }\n    return u;", "    assert(n <= m);\n    long sum = 0;\n \
    \   long m = m - n + 1;\n    long i = n;\n    while ((i >= m) && (sum < n)){\n\
    \        sum += i;\n        i += 1;\n    }\n    long result = sum / m; // sum\
    \ / m is int because sum is int\n    std::string s = std::to_string(result);\n\
    \    s += \"b\"; // this is string because result of sum / m is int because sum\
    \ is int\n    Union_std_string_long us(s); // this us = s is Union_std_string_long\n\
    \    return us;", "    Union_std_string_long u_nm(\"\");\n    if (n >= m) {\n\
    \        u_nm.f0 = \"\";\n        return u_nm;\n    }\n    long l1 = (n / 2) +\
    \ 1;\n    long l2 = (m / 2) + 1;\n    Union_std_string_long u_n(l2);\n    Union_std_string_long\
    \ u_m(l1);\n    // For each of the n numbers, put them into u_n\n    for (long\
    \ i = 0; i <= n; i++) {\n        u_n.f0 += \"1\";\n    }\n    // For each of the\
    \ m numbers, put them into u_m\n    for (long i = 0; i <= m; i++) {\n        u_m.f0\
    \ += \"0\";\n    }\n    // Find the common prefix of u_n and u_m\n    // If there\
    \ is a common prefix, put them into u_nm\n    u_nm.f0 = u_n.f0.substr(0, u_n.f0.size()\
    \ - u_m.f0.size()) + u_m.f0;\n    // Remove the common prefix of u_n and u_m\n\
    \    u_nm.f0 =\n        u_nm.f0.substr(u_nm.f0.size() - u_m.f0.size());\n    //\
    \ Find the average of u_n and u_m\n    u_nm.f0 = std::to_string(int(u_n.f0.size()\
    \ + u_m.f0.size()) / 2);\n    // Remove leading \"0b\"\n    u_nm.f0 = u_nm.f0.substr(1);\n\
    \    // Convert string to long binary format\n    u_nm.f1 = (u_nm.f0.size() -\
    \ 1) * 2 + (u_nm.f0.size() - 1) + 1L;\n    return u_nm;", "    if (n > m) return\
    \ Union_std_string_long(\"-nan\");\n    union{\n        long f1;\n        std::string\
    \ f0;\n    }u;\n    u.f1 = n;\n    u.f0 = \"\";\n    for (long i=n; i<m; i++)\
    \ {\n        u.f1 = u.f1 + i;\n    }\n    if (u.f1 > m)\n        return Union_std_string_long(\"\
    -nan\");\n    return Union_std_string_long(u.f0);", "    long n_ = n - 1;\n  \
    \  long m_ = m - 1;\n    Union_std_string_long u;\n    if( n_ < m_)\n        return\
    \ u;\n    u.f1 = m_;\n    m_ -= n_;\n    u.f0 = to_string((m_ + n_) / 2UL);\n\
    \    return u;", "    long x = n; // Start with n and iterate to m\n    if (x\
    \ < m) { \n        Union_std_string_long y = n;\n        Union_std_string_long\
    \ t = m;\n        while ( t >= n ) { \n            t = t - n;\n            x =\
    \ x + t;\n            y = y + t;\n        }\n        Union_std_string_long z =\
    \ m;\n        while (z > n) { \n            z = z - n;\n            x = x + z;\n\
    \            y = y + z;\n        }\n        return Union_std_string_long(x);\n\
    \    }\n    else if (x > m) {\n        return Union_std_string_long(x);\n    }\n\
    \    else {\n        long y = m ;\n        long t = m ;\n        while ( t >=\
    \ n ) { \n            t = t - n;\n            y = y + t;\n        }\n        return\
    \ Union_std_string_long(y);\n    }", "    int k = (n - m) / 2;\n    long long\
    \ a = n + k;\n    long long b = m - k;\n    long long a_ = a - 1;\n    long long\
    \ b_ = b - 1;\n    if(b > a){\n        Union_std_string_long u1(a);\n        Union_std_string_long\
    \ u2(b);\n        if(u2 == u1){\n            return u1;\n        }\n    }\n  \
    \  Union_std_string_long u(a);\n    Union_std_string_long v(b);\n    Union_std_string_long\
    \ u1(a_);\n    Union_std_string_long u2(b_);\n    if(u2 == u1){\n        Union_std_string_long\
    \ u3(u);\n        Union_std_string_long u4(u2);\n        if(u4 < u3){\n      \
    \      u = u3;\n            v = u4;\n        }\n    }\n    long long ans = (u\
    \ + v) / 2;\n    ans = ans << 1;\n    union{\n        long long f0;\n        std::string\
    \ f1;\n    }u1{ans};\n    union{\n        long long f0;\n        std::string f1;\n\
    \    }u2{u1.f0};\n    if(u2.f1 == u1.f0){\n        u1.f1 = u2.f1;\n    }else{\n\
    \        u1.f0 = u2.f0;\n    }\n    return u1;", "    long mid = (n + m) / 2;\n\
    \    long lower = std::max(n - mid, 0);\n    long upper = std::min(m + mid, 100);\n\
    \    std::string s1 = std::to_string(lower);\n    std::string s2 = std::to_string(upper);\n\
    \    std::string s3 = std::to_string(mid);\n    std::string s4 = s1 + s2;\n  \
    \  std::string s5 = s4 + s3;\n    std::string s6 = \"0b\" + s5;\n    Union_std_string_long\
    \ us(s6);\n    return us;", "    long sum = 0;\n    long mid = (n + m) / 2;\n\
    \    std::string binary = \"\";\n    while (n > 0 && m > 0) {\n        if (n %\
    \ 2 == 1 && m % 2 == 1) {\n            binary += \"0b\";\n        }\n        if\
    \ (n % 2 == 0) {\n            binary += \"1\";\n            n = n / 2;\n     \
    \   }\n        if (m % 2 == 0) {\n            binary += \"0\";\n            m\
    \ = m / 2;\n        }\n        sum += mid;\n        mid = (n + m) / 2;\n    }\n\
    \    return Union_std_string_long(std::to_string(sum) + binary);", "    Union_std_string_long\
    \ u;\n    long count = 0;\n    long sum = 0;\n    while (n<m){\n        sum =\
    \ sum + n;\n        count++;\n        n++;\n    }\n    u = Union_std_string_long(std::to_string(sum\
    \ / count));\n    if (n > m){\n        u = Union_std_string_long(\"-\" + std::to_string(-1));\n\
    \    }\n    return u;", "    long sum = 0;\n    long cur = 0;\n    while (n +\
    \ m > 0) {\n        if (n&m == 0) {\n            sum += n;\n        } else {\n\
    \            sum += m&(n-m);\n        }\n        n-=m&m;\n        cur+=n;\n  \
    \      m-=n;\n    }\n    if (cur <= sum/2) {\n        return Union_std_string_long(cur);\n\
    \    } else {\n        return Union_std_string_long(-1);\n    }", "    if (m >\
    \ n) {\n        return Union_std_string_long();\n    }\n    Union_std_string_long\
    \ a = Union_std_string_long(n);\n    Union_std_string_long b = Union_std_string_long(m);\n\
    \    Union_std_string_long sum = a;\n    long count = 0;\n    while (sum != b)\
    \ {\n        sum += a;\n        ++count;\n    }\n    Union_std_string_long avg;\n\
    \    if (count == 0) {\n        avg.f0 = \"\";\n        avg.f1 = 0;\n        return\
    \ avg;\n    }\n    avg.f0 = std::to_string((sum.f1 / count).f1);\n    avg.f1 =\
    \ sum.f1;\n    return avg;", "    Union_std_string_long u;\n    long k = n;\n\
    \    long l = m;\n    union Union_std_string_long u2;\n    u.f0 = std::to_string(k);\n\
    \    u.f1 = l;\n    k = u2.f1;\n    u.f0 = u.f1.substr(0, u.f1.find_last_not_of('0')\
    \ + 1);\n    l = k - n;\n    u.f1 = std::to_string(l);\n    return u;", "    if\
    \ (n >= m) return Union_std_string_long(\"-1\");\n    if (m == 0) return Union_std_string_long(\"\
    0b\" + std::to_string(n));\n    long avg = n + (n - m) / 2;\n    return Union_std_string_long(\"\
    0b\" + std::to_string(avg));", "    assert(n >= 0 && m >= 0 && n <= m);\n    Union_std_string_long\
    \ u = Union_std_string_long(m);\n    if(n <= m) return Union_std_string_long(n);\n\
    \    while(n > m) {\n        u.f1 = (u.f1 << 1) + 1;\n        n -= m;\n    }\n\
    \    u.f1 = (u.f1 >> 1) + 1;\n    return u;", "    long result = 0;\n    long\
    \ temp = 0;\n    if (n < m) {\n        temp = (n+m)>>1;\n        result = ((n+m)-temp)*2;\n\
    \        result = (result+temp)>>1;\n        result = (result+temp)>>1;\n    }\n\
    \    else {\n        result = (m>>1)+(n-m)>>1;\n    }\n    Union_std_string_long\
    \ us(result);\n    return us;", "    long result = 0;\n    for(long i = n; i <=\
    \ m; i++){\n        result += i;\n    }\n    if(n>m){\n        return Union_std_string_long(\"\
    -\");\n    }\n    std::string binary = std::bitset<sizeof(long)*8>(result).to_string();\n\
    \    binary = binary.substr(0, binary.size() - 1);\n    return Union_std_string_long(binary);",
  "    long result = (n - m) / 2 + m;\n    return result == n ? Union_std_string_long(m)\
    \ : Union_std_string_long(result);", "    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    Union_std_string_long u(n), v(m);\n    long diff = u - v;\n    long\
    \ avg = diff / 2; // round to nearest integer\n    long remainder = diff % 2;\
    \ // 0 or 1\n    // compute binary representation from avg\n    std::string bin;\n\
    \    std::stringstream ss, ss1, ss2;\n    ss1 << std::setfill('0') << std::setw(diff);\n\
    \    ss2 << std::setfill('0') << std::setw(diff);\n    for (long i = 0; i <= diff;\
    \ i++){\n        ss << std::setfill('0') << std::setw(1);\n        ss1 << avg;\n\
    \        ss2 << remainder;\n        bin += ss.str();\n        ss.str(\"\");\n\
    \        ss.clear();\n        ss1.str(\"\");\n        ss1.clear();\n        ss2.str(\"\
    \");\n        ss2.clear();\n    }\n    return Union_std_string_long(bin);", " \
    \   assert(n > 0 && m > 0);\n    long mid = n/2;\n    Union_std_string_long avg(\"\
    \");\n    long left,right;\n    if(n>mid){\n        left = n;\n        right =\
    \ mid;\n    }\n    else{\n        left = mid;\n        right = m;\n    }\n   \
    \ long sum = 0;\n    long k = 0;\n    while(left>0){\n        sum += left%2;\n\
    \        left /= 2;\n        k += 1;\n    }\n    while(right>0){\n        sum\
    \ += right%2;\n        right /= 2;\n        k += 1;\n    }\n    avg.f1 = sum/k;\n\
    \    avg.f0 = to_binary_str(avg.f1);\n    return avg;", "    if (n == m) return\
    \ Union_std_string_long(n);\n    long sum = (n - m) / 2;\n    long avg = (sum\
    \ * sum) + n;\n    long remainder = (n % 2 == 1) ? sum - avg : avg - sum;\n  \
    \  return Union_std_string_long(remainder);", "    Union_std_string_long u;\n\
    \    u.f1 = ((n + m) - 1) >> 1;\n    u.f1 = u.f1 << 1;\n    u.f1 |= ((n >> 1)\
    \ + m - 1) & 1;\n    u.f1 |= (n >> 1) & 1;\n    return u;", "    Union_std_string_long\
    \ res;\n    if (n > m) return res;\n    if (n == m) return std::to_string(1);\n\
    \    \n    long mid = (n + m)/2;\n    res.f0 = rounded_avg(n, mid);\n    res.f1\
    \ = rounded_avg(mid, m) + std::to_string((mid - n) % 2);\n    return res;", " \
    \   Union_std_string_long u(n);\n    u <<= m;\n    if (n >= m){\n        u >>=\
    \ (n-(m+1));\n        u += (Union_std_string_long(n));\n    }\n    return u;",
  "    Union_std_string_long answer;\n    if(n >= m) {\n        answer.f0 = std::to_string(n);\n\
    \        answer.f1 = m;\n        return answer;\n    }\n    long m = m + 1;\n\
    \    long n = n - m;\n    long sum = 0;\n    long k = 0;\n    long long max =\
    \ 1;\n    for(long i = n; i <= m; ++i) {\n        k = i;\n        while(k > 0\
    \ && k % 2 == 0) {\n            k = k/2;\n        }\n        sum += i;\n     \
    \   if(k > max) {\n            max = k;\n        }\n    }\n    answer.f0 = std::to_string(sum\
    \ / max);\n    answer.f1 = m;\n    return answer;", "    using namespace std;\n\
    \    assert(n >= 0);\n    assert(m >= 0);\n    assert(n == 0 || m == 0);\n   \
    \ if (n == 0)\n        return Union_std_string_long(\"0b0\");\n    if (m == 0)\n\
    \        return Union_std_string_long(\"0b0\");\n    string binary = \"0b\";\n\
    \    string str_bin = to_binary_string(n);\n    binary.append(str_bin);\n    string::size_type\
    \ pos_1 = binary.find('1');\n    if (pos_1 == string::npos)\n        return Union_std_string_long(\"\
    -1\");\n    binary.erase(pos_1, pos_1 + 1);\n    string::size_type pos_m = binary.find('1');\n\
    \    binary.erase(pos_m, pos_m + 1);\n    string::size_type pos_n = binary.find('1');\n\
    \    binary.erase(pos_n, pos_n + 1);\n    return Union_std_string_long(binary);",
  "    union{\n        long f0;\n        std::string f1;\n    }u1,u2,u3,u4,u5,u6,u7,u8,u9;\n\
    \    u1.f1 = n;\n    u2.f1 = m;\n    u3.f1 = u1.f1;\n    u4.f1 = u2.f1;\n    u5.f1\
    \ = u3.f1;\n    u6.f1 = u4.f1;\n    u7.f1 = u5.f1;\n    u8.f1 = u6.f1;\n    u9.f1\
    \ = u7.f1;\n    u2.f1 = std::max(u1.f1, u2.f1);\n    u3.f1 = std::max(u3.f1, u4.f1);\n\
    \    u4.f1 = std::max(u5.f1, u6.f1);\n    u5.f1 = std::max(u7.f1, u8.f1);\n  \
    \  u6.f1 = std::max(u9.f1, u1.f1);\n    u7.f1 = std::max(u1.f1, u3.f1);\n    u8.f1\
    \ = std::max(u2.f1, u4.f1);\n    u9.f1 = std::max(u3.f1, u5.f1);\n    u1.f1 =\
    \ std::min(std::max(-999999999999, u2.f1), u9.f1);\n    u2.f1 = std::min(std::max(-999999999999,\
    \ u3.f1), u9.f1);\n    u3.f1 = std::min(std::max(-999999999999, u4.f1), u9.f1);\n\
    \    u4.f1 = std::min(std::max(-999999999999, u5.f1), u9.f1);\n    u5.f1 = std::min(std::max(-999999999999,\
    \ u6.f1), u9.f1);\n    u6.f1 = std::min(std::max(-999999999999, u7.f1), u9.f1);\n\
    \    u7.f1 = std::min(std::max(-999999999999, u8.f1), u9.f1);\n    u8.f1 = std::min(std::max(-999999999999,\
    \ u9.f1), u1.f1);\n    u9.f1 = std::min(std::max(-999999999999, u1.f1), u2.f1);\n\
    \    u2.f1 = std::max(u1.f1, u2.f1);\n    u3.f1 = std::max(u3.f1, u4.f1);\n  \
    \  u4.f1 = std::max(u5.f1, u6.f1);\n    u5.f1 = std::max(u7.f1, u8.f1);\n    u6.f1\
    \ = std::max(u9.f1, u1.f1);\n    u7.f1 = std::max(u1.f1, ", "    assert(n >= 0\
    \ && m >= 0 && n <= m);\n    Union_std_string_long u;\n    long mid = (n + m)/2;\n\
    \    long left_avg, right_avg, left_diff, right_diff;\n    left_avg = right_avg\
    \ = left_diff = right_diff = 0;\n    while(mid >= n) {\n        left_avg += mid;\n\
    \        mid -= n;\n    }\n    while(n <= m) {\n        right_avg += n;\n    \
    \    n += m;\n    }\n    left_diff = m - left_avg;\n    right_diff = n - right_avg;\n\
    \    if (left_avg >= right_avg) {\n        u.f1 = left_avg;\n        u.f0 = right_avg;\n\
    \    } else {\n        u.f1 = right_avg;\n        u.f0 = left_avg;\n    }\n  \
    \  u.f1 += left_diff + right_diff;\n    u.f1 = round(u.f1/2);\n    u.f0 = u.f0.to_bitset();\n\
    \    return u;", "    Union_std_string_long res(\"\");\n    long diff = n - m;\n\
    \    if (diff >= 0) {\n        if (diff == 1)\n            res = Union_std_string_long(\"\
    0b0\");\n        else if (diff == 2)\n            res = Union_std_string_long(\"\
    0b1\");\n        else if (diff == 3)\n            res = Union_std_string_long(\"\
    0b10\");\n        else if (diff == 4)\n            res = Union_std_string_long(\"\
    0b11\");\n        else if (diff == 5)\n            res = Union_std_string_long(\"\
    0b100\");\n        else if (diff == 6)\n            res = Union_std_string_long(\"\
    0b101\");\n        else if (diff == 7)\n            res = Union_std_string_long(\"\
    0b110\");\n        else if (diff == 8)\n            res = Union_std_string_long(\"\
    0b111\");\n        else if (diff == 9)\n            res = Union_std_string_long(\"\
    0b1000\");\n        else if (diff == 10)\n            res = Union_std_string_long(\"\
    0b1001\");\n        else if (diff == 11)\n            res = Union_std_string_long(\"\
    0b1010\");\n        else if (diff == 12)\n            res = Union_std_string_long(\"\
    0b1011\");\n        else if (diff == 13)\n            res = Union_std_string_long(\"\
    0b1100\");\n        else if (diff == 14)\n            res = Union_std_string_long(\"\
    0b1101\");\n        else if (diff == 15)\n            res = Union_std_string_long(\"\
    0b1110\");\n        else if (diff == 16)\n            res = Union_std_string_long(\"\
    0b1111\");\n    }\n    return res;", "    Union_std_string_long res; \n    res.f0\
    \ = std::to_string(n);\n    res.f1 = m;\n    if(res.f1 > res.f0){\n        long\
    \ long temp = res.f1;\n        res.f1 = res.f0;\n        res.f0 = temp;\n    }\n\
    \    while(res.f1 <= res.f0){\n        res.f1 <<= 1;\n    }\n    std::string bin\
    \ = res.f0;\n    int len = bin.length();\n    for(int i = len - 1; i >= 0; i--){\n\
    \        if(bin[i] == '1'){\n            bin[i] = '0';\n        }\n        else{\n\
    \            bin[i] = '1';\n            break;\n        }\n    }\n    for(int\
    \ i = 0; i < bin.length(); i++){\n        if(bin[i] == '1'){\n            res.f1\
    \ -= (long long)(1LL<<i);\n            break;\n        }\n    }\n    return res;",
  "    Union_std_string_long u1, u2;\n    // You can write code here\n    if(n > m)\
    \ return u1;\n    u1.f0 = std::to_string(n/2);\n    u1.f1 = n%2;\n    u2.f0 =\
    \ std::to_string(m/2);\n    u2.f1 = m%2;\n    return u1 == u2 ? u1 : u2;", " \
    \   Union_std_string_long result = Union_std_string_long(\"0b0\");\n    assert(n\
    \ >= 0 && n <= m);\n    if (n > m) {\n        return -1;\n    }\n    long long\
    \ cur = n; // start at n, we increment cur until cur < m\n    for (long long i\
    \ = m; i >= n; i--){\n        result = result + Union_std_string_long(std::to_string((int)cur).c_str());\n\
    \        cur++;\n    }\n    return result;", "    Union_std_string_long ret;\n\
    \    if (n < m)\n        return ret;\n    long min_len = min(n, m);\n    long\
    \ max_len = max(min_len, m);\n    for (long i = min_len; i <= max_len; ++i) {\n\
    \        ret.f0 += to_binary(i);\n    }\n    return ret;", "    Union_std_string_long\
    \ res = Union_std_string_long(\"\");\n    int cnt = 0, cntm = 0;\n    while(n<=m){\n\
    \        if(n%2 == 0) {\n            res.f0 += n%2;\n            n /= 2;\n   \
    \         cnt++;\n        }\n        else{\n            res.f1 += n%2;\n     \
    \       n /= 2;\n            cntm++;\n        }\n    }\n    if (cnt > cntm){\n\
    \        return res;\n    }\n    else{\n        return Union_std_string_long(res.f0/cntm);\n\
    \    }", "    assert(n <= m);\n    if (n < m) {\n        return Union_std_string_long(n\
    \ + m - 1);\n    }\n    return Union_std_string_long(std::ceil(n * 1.0 / m));",
  "    if (n >= m)\n        return Union_std_string_long(\"-\");\n    Union_std_string_long\
    \ result(n);\n    long diff = m - n;\n    long s = diff;\n    long e = n;\n  \
    \  while (s % 2 == 0 && e % 2 == 0 && e > 0){\n        s /= 2;\n        e /= 2;\n\
    \    }\n    long p = 0;\n    if (diff > 0){\n        while (diff != 0){\n    \
    \        p += 1;\n            if (s > 0){\n                s -= 1;\n         \
    \   } else {\n                e--;\n            }\n        }\n        result.f1\
    \ = p;\n        result.f1 = (1 << p) - result.f1;\n        result.f0 = result.f1;\n\
    \    } else {\n        while (diff != 0){\n            p += 1;\n            if\
    \ (s < 0){\n                s += 1;\n            } else {\n                e++;\n\
    \            }\n        }\n        result.f1 = p;\n        result.f1 = (1 << p)\
    \ - result.f1;\n        result.f0 = result.f1;\n    }\n    return result;", " \
    \   int sum = 0;\n    for(int i = n; i <= m; i++){\n        sum += i;\n    }\n\
    \    \n    if(sum > m){\n        return Union_std_string_long(-1);\n    }\n  \
    \  Union_std_string_long ans = Union_std_string_long(\"\");\n    \n    for(int\
    \ i = n; i <= m; i++){\n        if(i & 1){\n            ans.f0 += std::to_string(i);\n\
    \        }\n    }\n    std::string result = ans.f0;\n    std::reverse(result.begin(),\
    \ result.end());\n    \n    while(result.length() > 1){\n        std::string result\
    \ = result;\n        std::reverse(result.begin(), result.end());\n        \n \
    \       if(result.length() == 3){\n            result += std::to_string(0b01000000);\n\
    \            std::reverse(result.begin(), result.end());\n        }\n        else\
    \ if(result.length() == 2){\n            result += std::to_string(0b01);\n   \
    \         std::reverse(result.begin(), result.end());\n        }\n        else\
    \ if(result.length() == 1){\n            result += std::to_string(0b00);\n   \
    \         std::reverse(result.begin(), result.end());\n        }\n    }\n    \n\
    \    if(result == \"0b00\"){\n        ans = Union_std_string_long(-1);\n    }\n\
    \    else if(result == \"0b01\"){\n        ans = Union_std_string_long(1);\n \
    \   }\n    else if(result == \"0b10\"){\n        ans = Union_std_string_long(2);\n\
    \    }\n    else if(result == \"0b11\"){\n        ans = Union_std_string_long(3);\n\
    \    }\n    else if(result == \"0b100\"){\n        ans = Union_std_string_long(4);\n\
    \    }\n    else if(result == \"0b101\"){\n        ans = Union_std_string_long(5);\n\
    \    }\n    else if(result == \"0b110\"){\n        ans = Union_std_string_long(6);\n\
    \    }\n    else if(result == \"0b111\"){\n        ans = Union_std_string_long(7);\n\
    \    }\n    else if(result == \"0b1000\"){\n        ans = Union_std_string_long(8);\n\
    \    }\n    else if(result == \"0b1001\"){\n        ans = Union_std_string_long(9);\n\
    \    }\n    else if(result == \"0b1010\"){\n        ans = Union_std_string_long(10);\n\
    \    }\n    else if(result == \"0b1011\"){\n        ans = Union_std_string_long(11);\n\
    \    }\n    else if(result == \"0b1100\"){\n        ans = Union_std_string_long(12);\n\
    \    }\n    else if(result == \"0b1101\"){", "    long k = (m + n) / 2;\n    Union_std_string_long\
    \ sum = rounded_avg(n, k);\n    Union_std_string_long avg = rounded_avg(k, m);\n\
    \    if(sum == avg) {\n        if(k == 1) return \"0b0\";\n        if(k == m)\
    \ return \"0b1\";\n        \n        return \"0b\" + std::to_string(k-1) + \"\
    0b1\";\n    }\n    if(sum < avg) return -1;\n    if(sum > avg) return -1;\n  \
    \  \n    if(sum == n) {\n        if(m == 1) return \"0b1\";\n        if(m == n)\
    \ return \"0b0\";\n    }\n    \n    return std::to_string(static_cast<long long>(n)\
    \ + static_cast<long long>(m)/2)\n        + \"0b\" + std::to_string(static_cast<long\
    \ long>(k-1) + \"0b0\");", "    assert(m >= n);\n    Union_std_string_long res;\n\
    \    res.f0 = to_binary_string(n);\n    res.f1 = to_binary_string(m);\n    assert(res.f1.size()\
    \ == res.f0.size());\n    std::string rem_str = res.f0.substr(res.f1.size());\n\
    \    res.f1 = res.f0.substr(0, res.f1.size());\n    // check whether rem_str is\
    \ of length 0\n    if (!rem_str.empty()) {\n        res.f1 += rem_str;\n     \
    \   long sum = 0;\n        long count = 0;\n        for (int i = 0; i < rem_str.size();\
    \ i++) {\n            if (int(rem_str[i]) == 1)\n                count++;\n  \
    \          else\n                sum += (count * int(rem_str[i]));\n         \
    \   assert(count < 1000000000);\n        }\n        assert(sum == count * sum);\n\
    \        long tmp = (sum / count) % 10;\n        res.f0 += to_binary_string(tmp);\n\
    \        assert(res.f0.size() == res.f1.size());\n    }\n    return res;", " \
    \   Union_std_string_long result((n<m) ? std::string(\"-1\") : \"\");\n    long\
    \ rest = n-m+1;\n    long left = (long)rest/2;\n    long right = (long)rest/2;\n\
    \    result.f1 = left+right;\n    result.f0 = std::to_string(left)+std::to_string(right);\n\
    \    return result;", "    union{\n        std::string f0;\n        long f1;\n\
    \    } u0{std::to_string(n)};\n    union{\n        std::string f0;\n        long\
    \ f1;\n    } u1{std::to_string(m)};\n    \n    if (u0.f1 < u1.f1){\n        return\
    \ -1L;\n    }\n    int k = (u1.f1 - u0.f1) >> 1;\n    std::swap(u0.f0, u0.f1);\n\
    \    std::swap(u1.f0, u1.f1);\n    std::swap(u0.f1, u1.f1);\n    std::string f0\
    \ = u0.f0;\n    long f1 = u0.f1;\n    while (f1 < k){\n        ++f1;\n       \
    \ std::string f0 = u0.f0;\n        long f1 = u0.f1;\n    }\n    \n    std::cout\
    \ << f0;\n    \n    long sum = 0;\n    \n    for (int i = f1 + 1; i < f1 + k ;\
    \ ++i){\n        sum += i;\n    }\n    \n    long average = sum / k;\n    std::cout\
    \ << std::to_string(average);\n    \n    return average;", "    assert(n > 0 &&\
    \ m > 0 && n == m);\n    Union_std_string_long avg = Union_std_string_long(\"\
    0b\");\n    long count = m, left = n;\n    while (count > 0) {\n        Union_std_string_long\
    \ mid = avg;\n        Union_std_string_long mid += left;\n        Union_std_string_long\
    \ mid = Union_std_string_long(std::to_string(int(mid.f1)));\n        left = mid;\n\
    \        count -= 1;\n    }\n    return avg;", "    \n    if (n < m)\n       \
    \ return -1; // return -1 if n is greater than m\n    \n    Union_std_string_long\
    \ ans = Union_std_string_long(n);\n    \n    // n through m is the range\n   \
    \ for (long i = n; i <= m; i++) {\n        \n        // calculate quotient\n \
    \       long q = i / 2;\n        \n        // determine quotient length\n    \
    \    int r = q % 2 == 0 ? 1 : 2;\n        \n        // calculate remainder\n \
    \       int r = q % 2;\n        \n        // determine if remainder is even or\
    \ odd\n        int r2 = ((int)r) - (int)(r % 2); // check remainder\n        \n\
    \        // if the remainder is even and the quotient length is odd, concatenate\
    \ \"0\"\n        if (r2 > 0 && r2 < 2) {\n            ans.f0 += \"0\";\n     \
    \   }\n        \n        // if the remainder is even and the quotient length is\
    \ even, concatenate \"1\" or \"0\"\n        if (r2 == 1 && r < 2) {\n        \
    \    ans.f0 += (r == 1 ? \"1\" : \"0\");\n        }\n        \n        // otherwise\
    \ concatenate quotient in binary \n        else {\n            ans.f0 += to_binary(q);\n\
    \        }\n    }\n    return ans;", "    Union_std_string_long u;\n    u.f0 =\
    \ std::to_string(n);\n    if (n >= m)\n        return u;\n    u.f1 = std::to_string(m);\n\
    \    u.f1 = std::to_string(n - m);\n    return u;", "    Union_std_string_long\
    \ u1 = {std::to_string(n)};\n    Union_std_string_long u2 = {std::to_string(m)};\n\
    \    Union_std_string_long u3 = {std::to_string(n) + std::to_string(m)};\n   \
    \ if (n >= m){\n        return Union_std_string_long{-1};\n    }\n    std::cout<<u1.f1;\n\
    \    Union_std_string_long u4 = u1;\n    Union_std_string_long u5 = u2;\n    Union_std_string_long\
    \ u6 = u3;\n    Union_std_string_long u7 = u4;\n    Union_std_string_long u8 =\
    \ u5;\n    Union_std_string_long u9 = u6;\n    Union_std_string_long u10 = u7;\n\
    \    Union_std_string_long u11 = u8;\n    Union_std_string_long u12 = u9;\n  \
    \  Union_std_string_long u13 = u10;\n    Union_std_string_long u14 = u11;\n  \
    \  Union_std_string_long u15 = u12;\n    Union_std_string_long u16 = u13;\n  \
    \  Union_std_string_long u17 = u14;\n    Union_std_string_long u18 = u15;\n  \
    \  Union_std_string_long u19 = u16;\n    Union_std_string_long u20 = u17;\n  \
    \  Union_std_string_long u21 = u18;\n    Union_std_string_long u22 = u19;\n  \
    \  Union_std_string_long u23 = u20;\n    Union_std_string_long u24 = u21;\n  \
    \  Union_std_string_long u25 = u22;\n    Union_std_string_long u26 = u23;\n  \
    \  Union_std_string_long u27 = u24;\n    Union_std_string_long u28 = u25;\n  \
    \  Union_std_string_long u29 = u26;\n    Union_std_string_long u30 = u27;\n  \
    \  Union_std_string_long u31 = u28;\n    Union_std_string_long u32 = u29;\n  \
    \  Union_std_string_long u33 = u30;\n    Union_std_string_long u34 = u31;\n  \
    \  Union_std_string_long u35 = u32;\n    Union_std_string_long u36 = u33;\n  \
    \  Union_std_string_long u37 = u34;\n    Union_std_string_long u38 = u35;\n  \
    \  Union_std_string_long u39 = u", "    if(m<n) return -1;\n    long sum=(n+m);\n\
    \    long reminder=sum%2;\n    long rest=sum/2;\n    if(rest==1){\n        Union_std_string_long\
    \ u1=Union_std_string_long(n);\n        Union_std_string_long u2=Union_std_string_long(m);\n\
    \        u1.f1=u2.f1;\n        return u1;\n    }\n    Union_std_string_long u1=rounded_avg(n,rest);\n\
    \    Union_std_string_long u2=rounded_avg(rest,m);\n    Union_std_string_long\
    \ u3=Union_std_string_long(reminder);\n    u1.f1=u2.f1;\n    u1.f1=u3.f1;\n  \
    \  return u1;", "    long avg = ((double)n + (double)m)/2 ;\n    long mod = avg\
    \ - floor (avg);\n    bool up_to_low = mod < 0;\n    if(up_to_low){\n        avg\
    \ -= mod;\n    }\n    if(mod > 9){\n        mod = mod/10;\n        avg += mod;\n\
    \    }\n    mod = avg - floor (avg);\n    bool round_to_zero = mod < 0;\n    if(round_to_zero){\n\
    \        avg = 0;\n    }\n    std::string str_avg = to_binary_string (avg);\n\
    \    std::string bin = to_binary_string (mod);\n    std::string res = str_avg\
    \ + bin;\n    if(up_to_low){\n        res = res + str_avg.substr(0, str_avg.length()-1);\n\
    \    }\n    if(round_to_zero){\n        res = res + str_avg.substr(0, str_avg.length()-1);\n\
    \    }\n    return Union_std_string_long(res);", "    auto avg = [](long m, long\
    \ n) {\n        if (m > n) {\n            return -1;\n        } else {\n     \
    \       long ans = 0;\n            for (long i = n; i > m; i--) {\n          \
    \      ans += i;\n            }\n            ans /= m - n + 1;\n            return\
    \ std::to_string(ans);\n        }\n    };\n    return avg(n, m);", "    Union_std_string_long\
    \ u1 = n, u2 = m;\n    if (u1 > u2)\n    {\n        u1 = u2;\n        u2 = n;\n\
    \    }\n    if (u2 <= 0 || u1 <= 0)\n        return Union_std_string_long(\"0b0\"\
    );\n    long u1int = (u1 + 1) / 2;\n    long u2int = (u2 + 1) / 2;\n    long avg\
    \ = (u1int + u2int) / 2;\n    long bin = -1;\n    std::string bits;\n    long\
    \ power = 0;\n    while (avg > 0)\n    {\n        power = (avg - 1) % 2;\n   \
    \     avg = avg / 2;\n        if (power)\n        {\n            bits.push_back('1');\n\
    \            bin = bin << 1;\n        }\n        else\n        {\n           \
    \ bits.push_back('0');\n            bin = bin << 1;\n        }\n    }\n    std::reverse(bits.begin(),\
    \ bits.end());\n    Union_std_string_long u3(bits);\n    return u3;", "    Union_std_string_long\
    \ ans;\n    ans.f0 = \"\";\n    if(m > n) return -1;\n    long mid = n/2;\n  \
    \  std::string s;\n    for(long i = mid; i >= 0; --i)\n    {\n        if(i ==\
    \ mid)\n        {\n            s << i;\n        }\n        else\n        {\n \
    \           s << '0';\n        }\n    }\n    s += '1';\n    s >>= (m - s.find_last_not_of('1'));\n\
    \    ans.f1 = std::stoul(s, nullptr, 2);\n    return ans;", "    std::string bin\
    \ = to_binary(n, m);\n    Union_std_string_long res(\"\");\n    if(bin[0] == '0'){\n\
    \        res.f0 = bin;\n        res.f1 = 0;\n    }else{\n        long l = bin.size();\n\
    \        long last_one = bin[l-1]-'0';\n        long rest = bin.size()-l;\n  \
    \      long cur = last_one;\n        for(int i = l-1; i >= 0; --i) {\n       \
    \     cur = rest/2;\n            res.f1 += (cur-'0')*pow(2,i);\n            res.f0\
    \ += rest%2;\n            rest = cur;\n        }\n    }\n    return res;", " \
    \   auto s = n;\n    for (long i = m; s > 0; i--) {\n        if (s % 2 == 0) {\n\
    \            s = (s - 1) / 2;\n        } else {\n            s = (s - 1) / 2;\n\
    \            s += 1;\n        }\n    }\n    Union_std_string_long u(s);\n    u.f1\
    \ &= 1<<(sizeof(Union_std_string_long)*8-1);\n    return u;", "    if (n > m)\
    \ return -1;\n    std::string f0, f1;\n    for (int i = n; i <= m; ++i)\n    \
    \    f0.push_back('0' + i % 10);\n    for (int i = m; i >= n; --i)\n        f1.push_back('0'\
    \ + i / 10);\n    Union_std_string_long u(f0), v(f1);\n    return std::make_pair(u.f1\
    \ == v.f1 ? u.f0 : -1, f1);", "    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    \n    long start = n;\n    long end = m;\n    long mid = start + (end\
    \ - start) / 2;\n    long res = 0;\n    while (start < end) {\n        if (mid\
    \ % 2 == 0) {\n            res += mid;\n        } else {\n            res -= mid\
    \ - 1;\n        }\n        mid++;\n        start += 2;\n        end -= 2;\n  \
    \  }\n    return Union_std_string_long(std::to_string(res));", "    if (m > n)\
    \ {\n        return Union_std_string_long();\n    }\n    auto a = (n / 2) * 2;\n\
    \    auto b = (m / 2) * 2;\n    auto c = a + b;\n    auto d = n / 2;\n    auto\
    \ e = m / 2;\n    if (c > d + e) return Union_std_string_long((d - c) / 2) + Union_std_string_long((e\
    \ - b) / 2);\n    return Union_std_string_long((e - b) / 2) + Union_std_string_long((d\
    \ - c) / 2);", "    long min_val = n;\n    long max_val = m;\n    long avg = 0;\n\
    \    long count = 0;\n    // The loop will continue till the min_val < max_val\
    \ and counts \n    // increases \n    while(min_val < max_val){\n        // Round\
    \ the avg to the next integer\n        avg = avg + min_val;\n        // If the\
    \ next integer is greater than or equal to m then return -1\n        if(avg >=\
    \ m) {\n            return Union_std_string_long(\"-\");\n        }\n        avg=avg-min_val;\n\
    \        // Keep track of the number of iterations to find the avg\n        count=count+1;\n\
    \        // Update min and max values\n        min_val=min_val+1;\n        if(min_val>max_val){\n\
    \            max_val=max_val-1;\n        }\n    }\n    // Return the avg rounded\
    \ to the nearest integer\n    long rounding_factor = avg / count; // The factor\
    \ to round the average\n    // Round the avg up to the nearest integer\n    long\
    \ rounded_avg = (avg+rounding_factor-1)/rounding_factor; // Round up\n    // The\
    \ result will be a string of bits to represent the rounded avg\n    // Convert\
    \ it to an int and return the answer\n    return Union_std_string_long(std::to_string(rounded_avg).c_str());",
  "    if (n < m) return Union_std_string_long(\"-1\");\n    int n_digits = 1;\n \
    \   long rest = n - m;\n    while (rest >= 10) n_digits++;\n    return Union_std_string_long(std::to_string(n_digits)\
    \ + (rest/10));", "    if (n < m && n >= 1){\n        Union_std_string_long res(n\
    \ + m);\n        while (m > 1 && n <= m){\n            res.f1 += m;\n        \
    \    m /= 10;\n        }\n        res.f0 += n;\n        res.f1 /= 10;\n      \
    \  return res;\n    }\n    return Union_std_string_long(-1);", "    assert(n >=\
    \ 0 && m >= n);\n    long result = 0;\n    for (long i = n; i <= m; i++) {\n \
    \       result += (n - i);\n        result += i;\n    }\n    std::cout << std::setw(2)\
    \ << result << std::endl;\n    assert(result == (result / 2) + (n - m));\n   \
    \ Union_std_string_long ans;\n    ans = result - ((result / 2) + (n - m));\n \
    \   std::cout << std::setw(2) << ans << std::endl;\n    return ans;", "    if\
    \ (m > n || m < 0) {\n        return Union_std_string_long(-1.0);\n    }\n   \
    \ union{\n        double f;\n        char g[3];\n    } u;\n    u.f = ((double)m\
    \ + (double)n)/2;\n    u.g[0] = u.f % 2;\n    u.g[1] = u.f / 2;\n    u.g[2] =\
    \ '\\0';\n    std::ostringstream oss;\n    if (u.g[0] == '0'){\n        oss <<\
    \ \"0b\" << std::dec << u.f; \n    }\n    else{\n        oss << \"-0b\" << std::dec\
    \ << u.f;\n    }\n    return Union_std_string_long(oss.str());", "    Union_std_string_long\
    \ u1(n);\n    Union_std_string_long u2(m);\n    Union_std_string_long u3 = u1\
    \ + u2;\n    Union_std_string_long u4 = u3 / 2;\n    Union_std_string_long u5\
    \ = u4 % 2;\n    return u5.f0;", "    // Write your code here\n    Union_std_string_long\
    \ res = 0 ;\n    if (n > m)\n        return res;\n    long sum = 0;\n    for (long\
    \ i = n +1 ; i <= m ; i++){\n        sum += i;\n    }\n    return res =  static_cast<Union_std_string_long>(sum/(m-n+1));",
  "    if (n >= m) \n        return Union_std_string_long(\"--1\");\n    long mid\
    \ = (n + m) / 2;\n    std::string str1 = to_string(mid), str2 = to_string(n),\
    \ str3 = to_string(m);\n    Union_std_string_long a = str1 + str2, b = str3 +\
    \ str1, ab = str2 + str3;\n    assert(ab == a);\n    long r = a + b;\n    long\
    \ ans = str1.size() + str2.size() + str3.size();\n    long mask = 1;\n    if (r\
    \ < 0)\n        ans = -ans;\n    return Union_std_string_long(to_string(ans %\
    \ 2 + 1) + to_string(ans >> 1) + mask);", "    Union_std_string_long u;\n    if\
    \ (n < m){\n        assert(false && \"n must be greater than m\");\n        return\
    \ u;\n    }\n    if (n == m){\n        u.f1 = n;\n        return u;\n    }\n \
    \   long n = n - m;\n    long m = m - n;\n    u.f1 = m + 1;\n    u.f0 = to_string(n)\
    \ + \"b\"+ (to_string(u.f1) +1);\n    return u;", "    if (n < m)\n    {\n   \
    \     Union_std_string_long ans = {-1};\n        return ans;\n    }\n    long\
    \ sum = 0;\n    for (long i = n; i <= m; i++)\n        sum += i;\n    long half\
    \ = (sum + m) / 2;\n    long count = (half - n) > (m - n) ? (m - n) : (half -\
    \ n);\n    long result = n - half + (count - 1) * pow(2,10);\n    Union_std_string_long\
    \ ans = {result};\n    return ans;", "    Union_std_string_long res;\n    if(n>m)\n\
    \        return res;\n    if(n==0 || m==0)\n        return res;\n    int n1=abs(n),m1=abs(m);\n\
    \    if(n1==m1)\n        return n;\n    long count=0;\n    int n2=n1-1,m2=m1-1;\n\
    \    while(n2<=m2){\n        long x=n%2;\n        long y=m/2;\n        count=count+(x<<1)*y;\n\
    \        n++;\n        m/=2;\n    }\n    count=count*(n1-m1);\n    res.f1=count;\n\
    \    return res;", "  assert(n >= 0 && m >= 0);\n  long long a = n + (n - 1);\n\
    \  long long b = m + (m - 1);\n  if (a > b) return -1;\n  Union_std_string_long\
    \ s = a * b / 2;\n  return s.f0;", "    assert(n >= 0);\n    assert(m >= n);\n\
    \    int digits = (int)(ceil(log10(m - n)) + 1);\n    long pow10 = 10;\n    long\
    \ r = 1;\n    long carry = 0;\n    long sum = 0;\n    for (long i = n; i < m;\
    \ i++) {\n        sum += r;\n        carry = sum / pow10;\n        r = carry *\
    \ pow10;\n        pow10 /= 10;\n    }\n    if (carry > 0) {\n        r = carry\
    \ * pow10;\n        pow10 /= 10;\n    }\n    return Union_std_string_long(std::to_string(sum)\
    \ + std::to_string(r));", "    Union_std_string_long ans;\n    std::string s =\
    \ std::to_string(n);\n    ans.f1 = n;\n    while (m > 0){\n        std::string\
    \ s1 = std::to_string(ans.f1);\n        s += s1 + std::to_string(std::pow(2,m));\n\
    \        ans.f1 <<= 1;\n        m -= 1;\n    }\n    ans.f0 = s;\n    assert(ans.f0\
    \ != \"\");\n    return ans;", "    if (n == m && n == 0)\n        return \"0b0\"\
    ;\n    long total = (n + m) / 2;\n    long x = ceil(total);\n    long y = ceil(total\
    \ - x);\n    char str[11];\n    long xbin = (x % 2);\n    long ybin = (y % 2);\n\
    \    sprintf(str, \"0b%o%o\", xbin, ybin);\n    Union_std_string_long u1(x);\n\
    \    Union_std_string_long u2(y);\n    bool r1 = u1 != u2;\n    if (r1)\n    \
    \    return u1;\n    return r1 ? u2 : -1;", "    assert(n >= 0 && n <= m && m\
    \ <= n);\n    Union_std_string_long sum = Union_std_string_long(\"\");\n    long\
    \ count = 0;\n    long l = n;\n    long r = m;\n    while( l <= r ){\n       \
    \ sum += Union_std_string_long(to_binary(l));\n        ++count;\n        ++l;\n\
    \        ++r;\n    }\n    if( n == m ){\n        return sum.f0;\n    }\n    else{\n\
    \        std::string ans = sum.f0;\n        if( n < m ){\n            int temp\
    \ = n;\n            n = m;\n            m = temp;\n        }\n        while( m\
    \ > 0 ){\n            std::string remainder = to_binary(m%2);\n            ans\
    \ += remainder;\n            m /= 2;\n        }\n        ans += to_binary(n);\n\
    \        return Union_std_string_long(ans);\n    }", "    Union_std_string_long\
    \ u = Union_std_string_long(n);\n    u.f1 += m;\n    u.f1 -= n;\n    if(u.f1 <\
    \ 0) u.f1 += m;\n    std::bitset<32> b = std::bitset<32>(u.f1);\n    std::string\
    \ s = b.to_string();\n    for(int i = s.size() - 1; i >= 0; i--){\n        if((i\
    \ & 1) != 0) s.insert(i + 1, '+');\n        else if((i & 2) != 0) s.insert(i +\
    \ 1, '-');\n        else s.insert(i + 1, '0');\n    }\n    return u;", "    Union_std_string_long\
    \ x;\n    if (n < m) {\n        x.f0 = std::to_string(n);\n        x.f1 = m;\n\
    \    }\n    else {\n        x.f0 = std::to_string(n);\n        x.f1 = std::to_string(m);\n\
    \    }\n    Union_std_string_long z(x.f0);\n    Union_std_string_long y(x.f1);\n\
    \    union_std_string_long z;\n    union_std_string_long y;\n    union_std_string_long\
    \ z(x.f0);\n    union_std_string_long y(x.f1);\n    union_std_string_long z(x.f0);\n\
    \    union_std_string_long y(x.f1);\n    union_std_string_long z;\n    union_std_string_long\
    \ y;\n    union_std_string_long z(x.f0);\n    union_std_string_long y(x.f1);\n\
    \    union_std_string_long z;\n    union_std_string_long y;\n    union_std_string_long\
    \ z(x.f0);\n    union_std_string_long y(x.f1);\n    union_std_string_long z;\n\
    \    union_std_string_long y;\n    union_std_string_long z(x.f0);\n    union_std_string_long\
    \ y(x.f1);\n    union_std_string_long z;\n    union_std_string_long y;\n    union_std_string_long\
    \ z(x.f0);\n    union_std_string_long y(x.f1);\n    union_std_string_long z;\n\
    \    union_std_string_long y;\n    union_std_string_long z(x.f0);\n    union_std_string_long\
    \ y(x.f1);\n    union_std_string_long z;\n    union_std_string_long y;\n    union_std_string_long\
    \ z(x.f0);\n    union_std_string_long y(x.f1);\n    union_std_string_long z;\n\
    \    union_std_string_long y;\n    union_std_string_long z(x.f0);\n    union_std_string_long\
    \ y(x.f1);\n    union_std_string_long z;\n    union_std_string_long y;\n    union_std_string_long\
    \ z(x.f0);\n    union_std_string_long y(x.f1);\n    union_std_string_long z;\n\
    \    union_std_string_long y;\n    union_std_string_long z(x.f0);\n    union_std_string_long\
    \ y(x.f1);\n    union_std_string_long z;\n    union_std_string_long y;\n    union_std_string_long\
    \ z(x.", "    Union_std_string_long u(n);\n    Union_std_string_long v(m);\n \
    \   while (v != u){\n        if (v < u){\n            u.f0 = std::to_string(int(v));\n\
    \            u.f1 -= int(u);\n            v = u;\n        }\n        else if (v\
    \ > u){\n            v.f0 = std::to_string(int(u));\n            v.f1 -= int(v);\n\
    \            u = v;\n        }\n        else {\n            u.f0 += std::to_string(int(v));\n\
    \            v.f0 += std::to_string(int(u));\n        }\n    }\n    if (u.f1 >\
    \ 0 && v.f1 == 0){\n        return -1;\n    }\n    std::size_t f = 0;\n    for\
    \ (;;){\n        if (u.f1 != 0 && v.f0 > u.f1){\n            u.f0 = std::to_string(int(u));\n\
    \            u.f1 -= int(u);\n            if (u.f0 > 0)\n                f +=\
    \ 2;\n        }\n        else if (v.f1 != 0 && u.f0 > v.f1){\n            v.f0\
    \ = std::to_string(int(v));\n            v.f1 -= int(v);\n            if (v.f0\
    \ > 0)\n                f += 2;\n        }\n        else {\n            f += 1;\n\
    \        }\n        if (u.f1 < 0 && v.f1 < 0 && v.f0 > u.f1){\n            if\
    \ (f == 1) return -1;\n            else if (f == 2) return u.f0;\n           \
    \ else if (f == 3) return v.f0;\n            else if (f == 4) return std::to_string(int(v.f0))\
    \ + std::to_string(int(u));\n        }\n        else if (u.f1 < 0 && v.f1 < 0\
    \ && v.f0 < u.f1){\n            if (f == 1) return -1;\n            else if (f\
    \ == 2) return std::to_string(int(u));\n            else if (f == 3) return v.f0;\n\
    \            else if (f == 4) return std::to_string(int(v.f0)) + std::to_string(int(u));\n\
    \        }\n        else if (u.f1 < 0 && v.f1 == 0 && v.f0 < u.f1){\n        \
    \    if (f == 1) return -1;\n            else if (f == 2) return std::to_string(int(v));\n\
    \            else if (f == 3) return std::to_string(int(u));\n            else\
    \ if (f == 4) return std::to_string(int(v.f0)) + std::to_string(int(u));\n   \
    \     }\n        else if (u.f1 < 0 && v.f1 == 0 && v.f0 > u.f1){\n           \
    \ if (f == 1) return -1;\n            else if (f == 2) return std::to_string(int(v));\n\
    \            else if (f == 3) return std::to_string(int(u));\n", "    if (n >=\
    \ m)\n        return Union_std_string_long(-1);\n    Union_std_string_long ans\
    \ = Union_std_string_long(\"0b\");\n    long cnt = 0;\n    for (long i = n; i\
    \ <= m; i++) {\n        cnt++;\n        Union_std_string_long tmp = Union_std_string_long(i);\n\
    \        while (tmp.f0[c] != '0')\n            tmp.f0[c] ++;\n        while (tmp.f1[c]\
    \ != '0')\n            tmp.f1[c] ++;\n        ans += tmp;\n    }\n    ans /= cnt;\n\
    \    std::string s = ans.f0;\n    for (auto it = s.rbegin(); it != s.rend(); it++)\n\
    \        cout << (*it); \n    cout << endl;\n    return ans;", "    Union_std_string_long\
    \ ans;\n    if(n>=m){\n        return ans;\n    }\n    if(n<0){\n        return\
    \ ans;\n    }\n    long i = n;\n    long j = m;\n    long sum = 0;\n    long c=0;\n\
    \    while(i>=j){\n        c = i%2;\n        sum+=c;\n        i/=2;\n        j/=2;\n\
    \    }\n    for(int k=0;k<i;k++){\n        sum+=1;\n    }\n    ans.f0 = to_binary_string(sum);\n\
    \    if(ans.f0 != to_binary_string(sum)){\n        return ans;\n    }\n    if(n>m){\n\
    \        return ans;\n    }\n    i = n;\n    j = m;\n    sum = 0;\n    c=0;\n\
    \    while(i>=j){\n        c = i%2;\n        sum+=c;\n        i/=2;\n        j/=2;\n\
    \    }\n    for(int k=0;k<i;k++){\n        sum+=1;\n    }\n    ans.f0 = to_binary_string(sum);\n\
    \    if(ans.f0 != to_binary_string(sum)){\n        return ans;\n    }\n    return\
    \ ans;", "    std::cout << \"n=\" << n << \" m=\" << m << std::endl;\n    assert(n\
    \ >= 0 && m >= 0);\n    \n    long long ans = (n+m)/2;\n    std::cout << \"ans=\"\
    \ << ans << std::endl;\n    std::cout << \"bits=\" << std::bitset<64>(ans).to_string()\
    \ << std::endl;\n    \n    Union_std_string_long u;\n    u.f0 = std::bitset<64>(ans).to_string();\n\
    \    \n    return u;", "    Union_std_string_long u(n);\n    for(int i=1; i<m;\
    \ i++) u+=Union_std_string_long(i);\n    // u is now the sum of n through m\n\
    \    // now to compute the average \n    // the sum is n*(n+1), since we add 1\
    \ to n everytime we add an int\n    // the average is the sum/(n+1)\n    // to\
    \ round the average to the nearest int\n    // we find the least significant bit\
    \ of n, n&(n-1)\n    // that is, we the least significant bit that does not contain\
    \ any 1\n    // then we add 1 to n, and shift it left by 1 bits\n    // we do\
    \ this for every bit of the average\n    // the average now is the average of\
    \ the numbers from 0 to (n-1)\n    // the least significant bit of the average\
    \ is now the bit with at least one 1 in it\n    // we repeat the above process\
    \ on the average\n    // and we now have the average\n    // we convert that to\
    \ a string of 1's and 0's using base 2\n    // the function below does this\n\
    \    auto to_binary = [&u](long x){\n        std::string bin = \"\";\n       \
    \ while(x>0){\n            if(x&1){\n                bin+=\"0\";\n           \
    \ }else{\n                bin+=\"1\";\n            }\n            x>>=1;\n   \
    \     }\n        return bin;\n    };\n    // now to compute the average\n    long\
    \ average = u;\n    long bits_after_average = average>>1;\n    average = average&bits_after_average;\n\
    \    // we need to get the least significant bit of the average\n    // we do\
    \ this by looking at the bits of the average\n    std::string average_bits  =\
    \ to_binary(average);\n    // we append that to the average\n    average_bits+=\"\
    1\";\n    average_bits=average_bits.substr(average_bits.length()-bits_after_average+1,average_bits.length()-bits_after_average+1);\n\
    \    // and we get the least significant bit of the average\n    // we do this\
    \ by looking at the bits of the average\n    std::string average_bits_ls = to_binary(average>>1);\n\
    \    // we append that to the average\n    average_bits_ls+=\"1\";\n    average_bits_ls=average_bits_ls.substr(average_bits_ls.length()-bits_after_average+1,average_bits_ls.length()-bits_after_average+1);\n\
    \    // and we concatenate everything together\n    std::string combined = average_bits+average_bits_ls;\n\
    \    // the combination of 1's and 0's is the average\n    long average_bits_num\
    \ = std::stoi(combined, nullptr, 2);\n    // now we convert that "]
stop_tokens:
- "\n}"
