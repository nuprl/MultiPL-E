name: HumanEval_104_unique_digits
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::set<long> s;\n    \n    for(long i : x) {\n        while(i>0) {\n\
    \            long d = i%10;\n            if((s.find(d)==s.end()) && (d<10)) {\n\
    \                s.insert(d);\n            }\n            i = i/10;\n        }\n\
    \    }\n    \n    std::vector<long> v;\n    for(long i : s) {\n        if(i!=0)\
    \ {\n            v.push_back(i);\n        }\n    }\n    \n    return v;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqhvei6t7: /tmp/tmpqhvei6t7.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    long long ans = 0;\n    long long num =\
    \ 0;\n    long long size = x.size();\n    for (long i = 0; i < size; i++) {\n\
    \        num += x[i];\n        ans += num / 10;\n        num -= num % 10;\n  \
    \  }\n    std::vector<long> ans_list;\n    if (ans % 2 == 0) {\n        for (long\
    \ i = 0; i < size; i++) {\n            if ((num / 10) % 2 == 0)\n            \
    \    ans_list.push_back(x[i]);\n            num -= num % 10;\n        }\n    }\
    \ else {\n        std::vector<long> evens;\n        for (long i = 0; i < size;\
    \ i++) {\n            if ((num / 10) % 2 != 0)\n                evens.push_back(x[i]);\n\
    \            num -= num % 10;\n        }\n        std::sort(evens.begin(), evens.end());\n\
    \        for (long i = 0; i < size; i++)\n            if (std::find(evens.begin(),\
    \ evens.end(), x[i]) == evens.end())\n                ans_list.push_back(x[i]);\n\
    \    }\n    std::sort(ans_list.begin(), ans_list.end());\n    return ans_list;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpb3yjf9v4: /tmp/tmpb3yjf9v4.cpp:45: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int N=x.size();\n    std::vector<long> v(N,0);\n    std::transform( v.begin(),\
    \ v.end(), v.begin(), [x](long t) { return t%10; });\n    std::sort( v.begin(),\
    \ v.end() );\n    \n    long result[] = { 0 };\n    for( int i=0; i<N; i++ )\n\
    \        result += v[i]; \n    return v[result/10] % 10 == 0;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4t1z5tlw.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4t1z5tlw.cpp:19:22: error: incompatible types in assignment\
    \ of \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to \u2018long int [1]\u2019\n   19 |         result\
    \ += v[i];\n      |                      ^\n/tmp/tmp4t1z5tlw.cpp:20:20: error:\
    \ invalid operands of types \u2018long int [1]\u2019 and \u2018int\u2019 to binary\
    \ \u2018operator/\u2019\n   20 |     return v[result/10] % 10 == 0;\n      | \
    \             ~~~~~~^~~\n      |              |      |\n      |              |\
    \      int\n      |              long int [1]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::set<long> s;\n    for(long i : x)\n        while(std::count(s.begin(),\
    \ s.end(), i))\n            s.insert(i);\n    std::vector<long> y;\n    std::copy(s.begin(),\
    \ s.end(), std::back_inserter(y));\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpsicf9mys: /tmp/tmpsicf9mys.cpp:22: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(long &v : x)\n        if(v % 2 == 0)\n\
    \            v.erase(v/2);\n        else\n            res.push_back(v);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpej88si5g.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpej88si5g.cpp:15:15: error: request for member \u2018erase\u2019\
    \ in \u2018v\u2019, which is of non-class type \u2018long int\u2019\n   15 | \
    \            v.erase(v/2);\n      |               ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::sort(x.begin(), x.end());\n  std::vector<long> result;\n  long temp\
    \ = 0;\n  long prev = 0;\n  long size = x.size();\n  for (int i = 0; i < size;\
    \ i++) {\n    temp = x[i] + 1;\n    while (temp != 0) {\n      if (temp % 2 ==\
    \ 0) {\n        temp = temp / 2;\n        result.push_back(temp);\n        prev++;\n\
    \      }\n      else {\n        temp /= 2;\n      }\n    }\n  }\n  std::sort(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp7_r5dga_: /tmp/tmp7_r5dga_.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // initialize vector to store unique number\n    std::vector<long> ans;\n\
    \    \n    // get all the digits of the number\n    long long m = std::accumulate(x.begin(),\
    \ x.end(), 0);\n    \n    // iterate through all number\n    for (long long i\
    \ = 0; i < m; i++) {\n        \n        // get all digits of number starting from\
    \ ith digit\n        long long d = std::floor(i / 10);\n        \n        // if\
    \ digit is even\n        if (i % 2 == 0) {\n            \n            // if it\
    \ is in our unique digits vector\n            if (std::find(ans.begin(), ans.end(),\
    \ d) == ans.end()) {\n                ans.push_back(d);\n            }\n     \
    \   }\n    }\n    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2174nvg0: /tmp/tmp2174nvg0.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int size = x.size();\n    std::vector<long> result(size);\n    long results[size];\n\
    \    long max = 0;\n    for(long i=0; i<size; i++) {\n        // For each element\
    \ x of the list check if x % 2 != 0\n        if(x[i] % 2 == 0) {\n           \
    \ // If x is even then add it to the result.\n            results[i] = x[i];\n\
    \        }\n    }\n    // Sort the result in increasing order.\n    std::sort(results,\
    \ results + size);\n    long i = 1;\n    for(long j=0; j<size; j++) {\n      \
    \  // For each element x of the result check if x % 2 == 0\n        if(results[j]\
    \ % 2 != 0) {\n            // If x is even then add it to the result.\n      \
    \      results[j] = i;\n        }\n        i++;\n    }\n    // Return result in\
    \ increasing order.\n    std::sort(results.begin(), results.end());\n    return\
    \ std::unique(results, results + size);\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6xs_w8w.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb6xs_w8w.cpp:35:23: error: request for member \u2018begin\u2019\
    \ in \u2018results\u2019, which is of non-class type \u2018long int [size]\u2019\
    \n   35 |     std::sort(results.begin(), results.end());\n      |            \
    \           ^~~~~\n/tmp/tmpb6xs_w8w.cpp:35:40: error: request for member \u2018\
    end\u2019 in \u2018results\u2019, which is of non-class type \u2018long int [size]\u2019\
    \n   35 |     std::sort(results.begin(), results.end());\n      |            \
    \                            ^~~\n/tmp/tmpb6xs_w8w.cpp:36:23: error: could not\
    \ convert \u2018std::unique<long int*>(((long int*)(& results)), (((long int*)(&\
    \ results)) + ((sizetype)(((long unsigned int)size) * 8))))\u2019 from \u2018\
    long int*\u2019 to \u2018std::vector<long int>\u2019\n   36 |     return std::unique(results,\
    \ results + size);\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       long int*\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long result = 0;\n  for(auto i : x){\n    result += i;\n  }\n  std::vector<long>\
    \ output;\n  for(auto i : x){\n    if(i % 2 == 0){\n      continue;\n    }\n \
    \   for(auto j : x){\n      if(j > i){\n        break;\n      }\n      if(i %\
    \ j == 0){\n        break;\n      }\n    }\n    output.push_back(i);\n  }\n  return\
    \ output;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp88mae1_y: /tmp/tmp88mae1_y.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    \n    for (auto &num : x) {\n        // If\
    \ any digit in the number is even, it's removed.\n        if (num % 2 == 0) {\n\
    \            ans.push_back(num);\n        } else {\n            // If not any\
    \ digit in the number is even, it's added to ans vector.\n            ans.push_back(-1);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpk86r0x4c: /tmp/tmpk86r0x4c.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for (long &it : x) {\n        while (it > 0)\
    \ {\n            int m = it % 10;\n            if (m != 0) break;\n          \
    \  it = it / 10;\n        }\n        y.push_back(it);\n    }\n    std::sort(y.begin(),\
    \ y.end());\n    for (long &it : y) {\n        while (it > 0) {\n            int\
    \ m = it % 10;\n            if (m == 0) break;\n            it = it / 10;\n  \
    \      }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpziq2smyz: /tmp/tmpziq2smyz.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res{};\n    std::set<long> seen{};\n    \n    for (auto\
    \ &v : x) {\n        for (auto &c : v) {\n            long d = c - '0';\n    \
    \        assert(d % 2 == 0);\n            if (seen.find(d) == seen.end())\n  \
    \              seen.insert(d);\n        }\n    }\n    \n    // All elements that\
    \ are in the seen set are in seen.\n    // Therefore all elements that are in\
    \ seen should be the \n    // elements in res\n    for (auto &v : x) {\n     \
    \   if (seen.find(v) == seen.end())\n            res.push_back(v);\n    }\n  \
    \  \n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_hjz95x.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr_hjz95x.cpp:16:24: error: \u2018begin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::begin\u2019?\n   16 |         for (auto\
    \ &c : v) {\n      |                        ^\n      |                       \
    \ std::begin\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpr_hjz95x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmpr_hjz95x.cpp:16:24: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   16 |\
    \         for (auto &c : v) {\n      |                        ^\n      |     \
    \                   std::end\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpr_hjz95x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> y;\n    long num;\n  \
    \  for(int i=0;i<x.size();i++)\n    {\n        num = (long int) x[i];\n      \
    \  if(num/2 == 0)\n        {\n            y.push_back(num);\n        }\n    }\n\
    \    long sum = 0;\n    for(int i=0;i<y.size();i++)\n    {\n        sum+=y[i];\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp66ghs6up: /tmp/tmp66ghs6up.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> ans;\n  long t = 0;\n  for(long &i : x) \n    for(long\
    \ j = 0; j < 9; j++)\n      if(i % 10 == j) \n        ans.push_back(i); \n  \n\
    \  for(long i = 0; i < (long)ans.size(); i++) {\n    if(ans[i] % 2 == 1) \n  \
    \    ans.erase(ans.begin() + i);\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpa4a3mnjb: /tmp/tmpa4a3mnjb.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long sum = 0;\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n\
    \    long last = 0;\n    for (long i = 0; i < x.size(); ++i) {\n        if (i\
    \ % 2 == 0 && x[i] != last) {\n            last = x[i];\n            ans.push_back(last);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpll7l5l_0: /tmp/tmpll7l5l_0.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::sort(x.begin(), x.end());\n  std::vector<long> ans;\n  for (int i\
    \ = 0; i < x.size(); ++i) {\n    // we only consider the numbers which has even\
    \ number of digit\n    if (x[i] % 2 == 0) {\n      ans.push_back(x[i]);\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpk3yj4thw: /tmp/tmpk3yj4thw.cpp:24: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int n = x.size();\n    std::unordered_set<long> unique_digits;\n    for(int\
    \ i = 0; i < n; i++) {\n        long digit = x[i];\n        int count = 0;\n \
    \       for(int j = 0; j < n; j++) {\n            long tmp_digit = x[j];\n   \
    \         if(tmp_digit > digit) {\n                count++;\n            }\n \
    \           if(tmp_digit == digit) {\n                if(count == 0)\n       \
    \             unique_digits.insert(tmp_digit);\n            }\n        }\n   \
    \ }\n    std::vector<long> result;\n    for(auto el : unique_digits)\n       \
    \ result.push_back(el);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpw4nw507_: /tmp/tmpw4nw507_.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    // Create a set that holds all elements that\
    \ are evenly divisible\n    // by i\n    std::vector<bool> divisible_by_i(x);\n\
    \    std::iota(divisible_by_i.begin(), divisible_by_i.end(), false);\n    for(auto\
    \ i : x) divisible_by_i[i/2] = true;\n    for(auto i : x) {\n        auto j =\
    \ i;\n        while(j > 0) {\n            if(divisible_by_i[j%10]) break;\n  \
    \          ans.push_back(j);\n            j/=10;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wht8_we.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3wht8_we.cpp:15:39: error: no matching function for call\
    \ to \u2018std::vector<bool>::vector(std::vector<long int>&)\u2019\n   15 |  \
    \   std::vector<bool> divisible_by_i(x);\n      |                            \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:68,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp3wht8_we.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_bvector.h:699:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<bool,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  699 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_bvector.h:699:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3wht8_we.cpp:15:39:\
    \ note:   candidate expects 3 arguments, 1 provided\n   15 |     std::vector<bool>\
    \ divisible_by_i(x);\n      |                                       ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:68,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp3wht8_we.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_bvector.h:687:7:\
    \ note: candidate: \u2018std::vector<bool, _Alloc>::vector(std::initializer_list<bool>,\
    \ const allocator_type&) [with _Alloc = std::allocator<bool>; std::vector<bool,\
    \ _Alloc>::allocator_type = std::allocator<bool>]\u2019\n  687 |       vector(initializer_list<bool>\
    \ __l,\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_bvector.h:687:37:\
    \ note:   no known conversion for a"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    \n    return x;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmps_ay4ngj: /tmp/tmps_ay4ngj.cpp:18: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for (auto const &i : x) {\n        int cnt\
    \ = 1;\n        while (i /= 10) {\n            cnt *= 10;\n        }\n       \
    \ cnt = 10 - cnt;\n        if (cnt % 2 == 0) ans.push_back(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpju6fbws9.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpju6fbws9.cpp:15:18: error: assignment of read-only reference\
    \ \u2018i\u2019\n   15 |         while (i /= 10) {\n      |                ~~^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> res;\n    for (long i=0;i<x.size();i++){\n\
    \        long sum=x[i];\n        res.push_back(sum);\n    }\n    sort(res.begin(),res.end());\n\
    \    for(int i=0;i<res.size();i++){\n        int count=0;\n        for(int j=i;j<res.size();j++){\n\
    \            if((res[i]%10)!=(res[j]%10) && res[i]<res[j])\n                count++;\n\
    \        }\n        if(count==0)\n            res.erase(res.begin()+i);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpe1x7s60w: /tmp/tmpe1x7s60w.cpp:33: int main(): Assertion `candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    int n = x.size();\n    std::vector<long> ans;\n\
    \    long long an = 0;\n    for (int i = 0; i < n; ++i) {\n        an = x[i -\
    \ 1];\n        long long cur = 0;\n        for (int j = i; j < n; ++j) {\n   \
    \         cur += (long long)x[j];\n        }\n        if (cur % 2 == 0) continue;\n\
    \        if ((an - cur / 2) % 2 == 0) {\n            ans.push_back(cur);\n   \
    \     }\n    }\n    std::sort(ans.begin(), ans.end());\n    std::vector<long>\
    \ res(ans.begin(), ans.end());\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdyoypmxc: /tmp/tmpdyoypmxc.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    \n    int n = x.size();\n    int count = 0;\n\
    \    \n    for(long i = 0; i < n; i++){\n        for(long j = 0; j < n; j++){\n\
    \            if(j >= (i+1)){\n                if( ((x[i]/10)%10) == ((x[j] / 10)%10)\
    \ ){\n                    count++;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    \n    std::vector<long> ans;\n   \
    \ \n    if(count == 0){\n        return ans;\n    }\n    \n    for(long i = 0;\
    \ i < n; i++){\n        for(long j = 0; j < n; j++){\n            if(j >= (i+1)){\n\
    \                if( ((x[i]/10)%10) == ((x[j] / 10)%10) ){\n                 \
    \   ans.push_back(x[i]);\n                    break;\n                }\n    \
    \        }\n        }\n    }\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp62uvxead: /tmp/tmp62uvxead.cpp:49: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> ans;\n  bool flag = true;\n  for (long i : x) {\n   \
    \ if (flag) {\n      long c = i;\n      for (int j = i; j > 0; j--) {\n      \
    \  if (c % 10 == 0 && c / 10 % 2 == 0) {\n          ans.push_back(j);\n      \
    \  }\n        c = c / 10;\n      }\n      flag = false;\n    }\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpq67i4sx5: /tmp/tmpq67i4sx5.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    \n    std::sort(x.begin(), x.end());\n    \n    std::vector<long> retval;\n\
    \    \n    long last_even = x[x.size() - 1];\n    \n    for (int i = 0; i < x.size();\
    \ i++) {\n        if (i % 2 == 0 && x[i] == last_even) {\n            continue;\n\
    \        }\n        retval.push_back(x[i]);\n    }\n    \n    return retval;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp5j449_sv: /tmp/tmp5j449_sv.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    long carry=0;\n    for (long i: x)\n      \
    \  {\n            y[ (i/10*10 + i%10) ] = carry + i;\n            carry = carry\
    \ % 10;\n        }\n    if (carry)\n        {\n            y.push_back( (carry+10)/10*10);\n\
    \        }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  \n  // initialize result\n  for(long i = 0;\
    \ i< x.size(); i++) {\n    result.push_back(x[i]);\n  }\n  \n  // find first even\
    \ digit\n  long first_even = *std::max_element(result.begin(), result.end());\
    \ \n  result.erase(std::remove(result.begin(), result.end(), first_even), result.end());\
    \ \n\n  // find other even digit\n  for(long i = 1; i < x.size(); i++) {\n   \
    \ if(result[i - 1] % 2 == 0) {\n      long temp = result[i - 1];\n      long digit\
    \ = result[i];\n      result[i] = temp;\n      result[i - 1] = digit;\n    } else\
    \ {\n      if(result[i - 1] % 2 != 0) {\n        long digit = result[i];\n   \
    \     result[i] = digit;\n      }\n    }\n  }\n\n  return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp7v8ffh22: /tmp/tmp7v8ffh22.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    long digit;\n\
    \    bool flag = 0;\n    long last_digit;\n    long size = x.size();\n    for\
    \ (long i = 0; i < size; i++) {\n        digit = static_cast<long>(x[i]);\n  \
    \      if (flag == 0 && digit % 2 != 0) {\n            result.push_back(digit);\n\
    \        }\n        else {\n            if (flag == 0 && result.size() == 0) {\n\
    \                result.push_back(digit);\n            }\n            else {\n\
    \                if (result.size() > 0 && result[result.size() - 1] > digit) {\n\
    \                    flag = 1;\n                    last_digit = result[result.size()\
    \ - 1];\n                }\n                else {\n                    flag =\
    \ 0;\n                    result.push_back(digit);\n                }\n      \
    \      }\n        }\n    }\n    return std::move(result);\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpnhrnzoq4: /tmp/tmpnhrnzoq4.cpp:43: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long count = 0;\n    std::vector<long> ans;\n    for (auto i : x)\
    \ {\n        while (i/10) {\n            count += 1;\n            i /= 10;\n \
    \       }\n        if (count%2 != 0) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0duww9sh: /tmp/tmp0duww9sh.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(int i=0; i< x.size();i++) {\n       \
    \ int tmp= x[i];\n        while(true) {\n            while (tmp%10 == 0){\n  \
    \              ans.push_back(tmp%10);\n                tmp /= 10;\n          \
    \  }\n            while (tmp%10 != 0) {\n                if(tmp%10<tmp) break;\n\
    \                tmp /= 10;\n            }\n            if (tmp==1) break;\n \
    \           ans.push_back(tmp%10);\n            tmp /= 10;\n        }\n    }\n\
    \    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long long sum = 0, maxSum = 0;\n  for(int i = 0; i < x.size(); i++) {\n\
    \    sum += x[i];\n    if(sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n\n\
    \  std::vector<long> ret;\n  for(int i = 0; i < x.size(); i++) {\n    if(maxSum\
    \ - x[i] < sum) {\n      ret.push_back(x[i]);\n    }\n  }\n\n  return ret;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpxb9rntfz: /tmp/tmpxb9rntfz.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    // Solution using std::unordered_set\n \
    \   \n    std::unordered_set<long> unique_digits_set;\n    std::vector<long> unique_digits_vec;\n\
    \    for (auto i : x) {\n        auto digit = i % 10;\n        if (unique_digits_set.count(digit)\
    \ == 0) {\n            unique_digits_set.insert(digit);\n            unique_digits_vec.push_back(i);\n\
    \        }\n    }\n\n    return unique_digits_vec;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpkwb446cr: /tmp/tmpkwb446cr.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    for(long i:x)\
    \ {\n        int cnt = 0;\n        while(i >= 10) {\n            cnt += i /  10;\n\
    \            i =  i %  10;\n        }\n        if(cnt==0)\n            ans.push_back(i);\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpwvknrtey: /tmp/tmpwvknrtey.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long prev_digit = -1;\n    for(long n: x)\
    \ {\n        if(n % 2 == 0) {\n            ans.push_back(n);\n            long\
    \ new_digit = n % 10;\n            if(new_digit == prev_digit) {\n           \
    \     ans.push_back(n);\n            }\n        } else {\n            prev_digit\
    \ = n % 10;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpq9nu_rgf: /tmp/tmpq9nu_rgf.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> tmp;\n    for(int i=0; i<x.size(); ++i){\n        long\
    \ digit = x[i];\n        while(digit>0){\n            digit = digit%10;\n    \
    \        tmp.push_back(digit);\n        }\n    }\n    sort(tmp.begin(), tmp.end());\n\
    \    std::vector<long> ans(tmp.begin(), tmp.end());\n    for(int i=0; i<ans.size();\
    \ ++i){\n        for(int j=0; j<ans.size(); ++j){\n            if(ans[i]==ans[j]){\n\
    \                ans.erase(ans.begin()+j);\n                j--;\n           \
    \     break;\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    assert(x.size() > 0);\n    std::map<long, int> digit_map;\n    for (long\
    \ number : x) {\n        int digit = 0;\n        while (number > 0) {\n      \
    \      digit += (number % 10);\n            number /= 10;\n        }\n       \
    \ digit_map[digit]++;\n    }\n    std::vector<long> ans;\n    for (auto it = digit_map.begin();\
    \ it != digit_map.end(); ++it) {\n        if (it->second == 0)\n            continue;\n\
    \        ans.push_back(it->first);\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpf1dk0r6c: /tmp/tmpf1dk0r6c.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int n = (int)x.size();\n    // Your code goes here\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpp11n3qsg: /tmp/tmpp11n3qsg.cpp:17: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // code here\n    std::vector<long> ret;\n    ret.resize(x.size());\n\
    \    for (long i=0;i<x.size();i++){\n        long digit = log10(x[i]) + 1;\n \
    \       while (x[i]>0){\n            while (digit%2 == 0 && digit>0) digit/=2;\n\
    \            if (x[i] > 0) x[i]--;\n        }\n        ret[i] = digit;\n    }\n\
    \    std::sort(ret.begin(),ret.end());\n    for (auto i = ret.begin(); i != ret.end();\
    \ ++i) std::cout << std::abs(*i) << \" \";\n    std::cout << std::endl;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: "1 1 1 1 \n"
  stderr: "tmp82lfyovm: /tmp/tmp82lfyovm.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::sort(x.begin(), x.end());\n\tstd::vector<long> ret;\n\tstd::vector<long>\
    \ s;\n\tfor(auto it = x.begin(); it != x.end(); it++) {\n\t\ts.push_back(*it);\n\
    \t}\n\tlong cnt = 0;\n\tfor(auto it = s.begin(); it != s.end(); it++) {\n\t\t\
    while(it != s.end()) {\n\t\t\tcnt++;\n\t\t\tit++;\n\t\t\tif((*it) % 2 == 0) {\n\
    \t\t\t\tit = s.erase(it);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tret.push_back(cnt);\n\
    \t\tcnt = 0;\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long n = x.size();\n    if(n < 1) return x;\n    std::vector<long> result;\n\
    \    for(auto &x:x)\n    {\n        long remainder = 0;\n        for(long i =\
    \ 0; i<n; i++)\n        {\n            remainder = remainder + x % 10;\n     \
    \       x /= 10;\n        }\n        if(remainder == 0) result.push_back(x);\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpe0kjo_0j: /tmp/tmpe0kjo_0j.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    \n    std::vector<long> ans;\n    long n = x.size();\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long nx = n-1;\n    while (i < nx) {\n\
    \        long val = x[i]; \n        if (val % 2 == 0) {\n            ans.push_back(val);\n\
    \            i++;\n        }\n        else { \n            j++;\n            while\
    \ (j < nx && x[j] > val) {\n                j++;\n            }\n            k\
    \ = j; \n            if (x[k] % 2 != 0) {\n                ans.push_back(val);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique_val;\n    std::set<long> digits;\n    for(long\
    \ i = x.size(); i > 0; i--) {\n        long val = 0;\n        for(long j = 0;\
    \ j < i; j++) {\n            val += (x[j] * powl(10, j));\n        }\n       \
    \ // add val to digits and remove from x\n        unique_val.push_back(val);\n\
    \        for(long j = 0; j < i; j++) {\n            x.erase(x.begin() + j);\n\
    \        }\n    }\n    std::sort(unique_val.begin(), unique_val.end());\n    for(long\
    \ i : unique_val) {\n        if(digits.find(i) == digits.end()) {\n          \
    \  unique_val.push_back(i);\n        }\n    }\n    return unique_val;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code goes here\n    std::vector<long> ans;\n    for (long i :\
    \ x)\n    {\n        int cnt = 0;\n        for (long j : x)\n        {\n     \
    \       if (i != j && j % i == 0)\n                cnt++;\n        }\n       \
    \ if (cnt == 0)\n        {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpck377jma: /tmp/tmpck377jma.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long sum = 0;\n    for (long i = 0;\
    \ i < x.size(); i++) {\n        sum += x[i];\n    }\n    int max_sum = std::accumulate(x.begin(),\
    \ x.end(), 0);\n    for (int i = 0; i < max_sum; i++) {\n        long cur = sum\
    \ - i;\n        int flag = 0;\n        for (long j : x) {\n            if (j %\
    \ 2 == 0 && cur % j == 0) {\n                flag = 1;\n            }\n      \
    \  }\n        if (flag == 1) {\n            ans.push_back(i);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpyhk8sljz: /tmp/tmpyhk8sljz.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v; //store the result here\n    long temp;\n    for(int\
    \ i=0; i<x.size(); i++) {\n        temp = x[i];\n        while(temp != 0) {\n\
    \            temp = temp/10;\n        }\n        if(v[temp] != 0) {\n        \
    \    continue;\n        }\n        v[temp] = 1;\n        for(int j=i+1; j<x.size();\
    \ j++) {\n            temp = x[j];\n            while(temp != 0) {\n         \
    \       temp = temp/10;\n            }\n            if(x[j] != 0 && x[j] != temp)\
    \ {\n                v[temp] = 1;\n            }\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for(int i=0; i<v.size(); i++) {\n        if(v[i] == 0) {\n       \
    \     ans.push_back(i);\n        }\n    }\n    for(int i=ans.size()-1; i>=0; i--)\
    \ {\n        for(int j=i+1; j<ans.size(); j++) {\n            if((ans[j] - ans[i])\
    \ > 1) {\n                swap(ans[i], ans[j]);\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprz6kwsa4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprz6kwsa4.cpp:42:17: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   42 |                 swap(ans[i], ans[j]);\n      |      \
    \           ^~~~\n/tmp/tmprz6kwsa4.cpp:42:17: note: suggested alternatives:\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmprz6kwsa4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprz6kwsa4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \             "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long evenNumber = 0;\n    for(long i : x){\n\
    \        long mod = i % 10;\n        if (mod != 0 && mod != evenNumber){\n   \
    \         ans.push_back(i);\n            evenNumber = mod;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0bkg2s5h: /tmp/tmp0bkg2s5h.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    auto end = std::end(x); \n    auto itr = std::unique(std::begin(x), end);\n\
    \    x.erase(itr, std::end(x));\n    return x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpktdnmh8k: /tmp/tmpktdnmh8k.cpp:19: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code here\n    std::vector<long> nums = x;\n    long long ans\
    \ = 0;\n    // traverse the array once\n    for (size_t i = 0; i < nums.size();\
    \ i++) {\n        int a = nums[i];\n        while (a >= 10) {\n            a /=\
    \ 10;\n            ans++;\n        }\n    }\n    return nums;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmps4gvgtz1: /tmp/tmps4gvgtz1.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long evens = 0;\n    long evens_size = 0;\n    // Loop through every\
    \ number to check if it has an even digit.\n    for(long i = 0; i < x.size();\
    \ ++i){\n        // If it has an even digit, add it to evens list. Increment \n\
    \        // evens size every time it adds an even digit.\n        if(x[i] % 2\
    \ ==0 ){\n            evens++;\n            evens_size++;\n        }\n    }\n\
    \    // If there are even digits in the original list, return an empty list.\n\
    \    if(evens == x.size() ){\n        return {};\n    }\n    // If there are even\
    \ digits in the original list, return evens size \n    // as the size of the evens\
    \ list.\n    if(evens == evens_size ){\n        return {evens};\n    }\n    //\
    \ If there are even digits in the original list. \n    // Remove all even digits\
    \ and return evens size as the size of the evens list.\n    for(int i = 0; i <\
    \ evens_size; ++i){\n        x.erase(x.begin()+i);\n    }\n    return {evens};\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp49mbu6bd: /tmp/tmp49mbu6bd.cpp:41: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long num = accumulate(x.begin(), x.end(), 0);\n    std::vector<long>\
    \ ans;\n    // if number is even, add it to the result if unique\n    // otherwise,\
    \ ignore\n    for(long i = 0; i < num; i++) {\n        if(i % 2 == 0) {\n    \
    \        if(std::find(x.begin(), x.end(), i) != x.end()) {\n                ans.push_back(i);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpnv39j5ip: /tmp/tmpnv39j5ip.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    long ans[100] = {0};\n    for(long i=0;i<x.length();i++){\n\
    \        ans[x[i]%10]++;\n    }\n    long n=0;\n    for(long i=0;i<100;i++){\n\
    \        if(ans[i]==0){\n            ans[i]=1;\n            n++;\n        }\n\
    \    }\n    std::vector<long> ans;\n    while(--n>0){\n        for(int i=0;i<100;i++){\n\
    \            if(ans[i]==0){\n                ans.push_back(i);\n            }\n\
    \        }\n    }\n    \n    for(long i=0;i<ans.size();i++){\n        x.erase(x.begin()+ans[i]);\n\
    \    }\n    \n    for(long i=0;i<x.size();i++){\n        ans[x[i]%10]++;\n   \
    \ }\n    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc3nyp5ml.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc3nyp5ml.cpp:14:22: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018length\u2019\n   14 |     for(long i=0;i<x.length();i++){\n\
    \      |                      ^~~~~~\n/tmp/tmpc3nyp5ml.cpp:24:23: error: conflicting\
    \ declaration \u2018std::vector<long int> ans\u2019\n   24 |     std::vector<long>\
    \ ans;\n      |                       ^~~\n/tmp/tmpc3nyp5ml.cpp:13:10: note: previous\
    \ declaration as \u2018long int ans [100]\u2019\n   13 |     long ans[100] = {0};\n\
    \      |          ^~~\n/tmp/tmpc3nyp5ml.cpp:28:21: error: request for member \u2018\
    push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018long int\
    \ [100]\u2019\n   28 |                 ans.push_back(i);\n      |            \
    \         ^~~~~~~~~\n/tmp/tmpc3nyp5ml.cpp:33:24: error: request for member \u2018\
    size\u2019 in \u2018ans\u2019, which is of non-class type \u2018long int [100]\u2019\
    \n   33 |     for(long i=0;i<ans.size();i++){\n      |                       \
    \ ^~~~\n/tmp/tmpc3nyp5ml.cpp:41:12: error: could not convert \u2018ans\u2019 from\
    \ \u2018long int [100]\u2019 to \u2018std::vector<long int>\u2019\n   41 |   \
    \  return ans;\n      |            ^~~\n      |            |\n      |        \
    \    long int [100]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(long &i: x) // loop through x\n    {\n\
    \        int digit = i % 10;\n        if(digit != 0) // if not a 0\n        {\n\
    \            y.push_back(digit);\n        }\n    }\n    std::sort(y.begin(), y.end());\
    \ // sort y from low to high\n    for(long &i: y)\n    {\n        i = i / 10;\
    \ // extract a digit\n        if(i == 0)\n        {\n            continue;\n \
    \       }\n        for(long &j: x)\n        {\n            j = j / 10; // extract\
    \ a digit\n            if(j == i)\n            {\n                x.erase(x.begin()\
    \ + y.size()); // remove it\n                break;\n            }\n        }\n\
    \    }\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppolzwraj: /tmp/tmppolzwraj.cpp:43: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long ans = 0;\n    long long t = 0;\n    for(long long i = 0; i\
    \ < x.size(); i++) {\n        t += x[i];\n        ans = t % 10;\n    }\n    std::vector<long>\
    \ ans_list;\n    for (long long i = 0; i < x.size(); i++) {\n        if (x[i]\
    \ % 2 == 0)\n            continue;\n        for(long long j = 0; j < ans_list.size();\
    \ j++) {\n            if(x[i] + ans_list[j] == ans)\n                break;\n\
    \        }\n        if (j == ans_list.size())\n            ans_list.push_back(x[i]);\n\
    \    }\n    return ans_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqqyr4ea9.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqqyr4ea9.cpp:26:13: error: \u2018j\u2019 was not declared\
    \ in this scope\n   26 |         if (j == ans_list.size())\n      |          \
    \   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    long\
    \ lastDigit = 0;\n    for (int i = 0; i < x.size(); ++i) {\n        long digit\
    \ = x[i];\n        if (digit % 2 == 0) {\n            result.push_back(digit);\n\
    \            while (lastDigit % 2 == 0) {\n                lastDigit /= 2;\n \
    \           }\n        }\n        else {\n            while (lastDigit % 2 !=\
    \ 0) {\n                lastDigit /= 2;\n            }\n            lastDigit\
    \ *= 10;\n        }\n    }\n    if (result.empty()) {\n        return result;\n\
    \    }\n    result.push_back(lastDigit);\n    return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int len = x.size();\n    std::vector<long> res;\n    long curr = 0, sum\
    \ = 0;\n    \n    for(int i=0; i<len; ++i) {\n        curr = x[i];\n        if(sum\
    \ % 2 == 0) {\n            sum += curr;\n        } else {\n            res.push_back(curr);\n\
    \        }\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmph_mgkol7: /tmp/tmph_mgkol7.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    for(long &i:\
    \ x)\n    {\n        if(i%2==0)\n        {\n            for(long j=i;j>0;j/=10)\n\
    \            {\n                ans.push_back(j%10);\n            }\n        }\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    ans.erase(std::unique(ans.begin(),\
    \ ans.end()), ans.end());\n    \n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpn71hy6kc: /tmp/tmpn71hy6kc.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> results;\n  \n  for (long i: x) {\n    while (x[i]%2\
    \ == 0)\n    {\n      ++i;\n    }\n    results.push_back(i);\n  }\n  return results;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    \n    for (long &i : x) {\n        if (seen.find(i) != seen.end())\
    \ continue;\n        seen.insert(i);\n        long temp = i;\n        while (temp\
    \ > 0) {\n            if (seen.find(temp / 10) != seen.end()) continue;\n    \
    \        result.push_back(temp % 10);\n            seen.insert(temp / 10);\n \
    \           temp /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::sort(x.begin(), x.end());\n  std::vector<long> ans;\n  for (long i\
    \ : x) {\n    if (!(i % 2)) {\n      ans.push_back(i);\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpvk4yig4k: /tmp/tmpvk4yig4k.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  assert(x.size() == 10);\n  std::vector<long> ans;\n  std::set<long> seen;\n\
    \  for (int i = 0; i < 10; i++) {\n    if (!seen.insert(x[i]).second) {\n    \
    \  ans.push_back(x[i]);\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2_5f42nb: /tmp/tmp2_5f42nb.cpp:12: std::vector<long int> unique_digits(std::vector<long\
    \ int>): Assertion `x.size() == 10' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long n = x.size();\n    std::vector<long> res;\n    for(long i=1; i<=n;\
    \ i++) {\n        long digit = x[i] - '0';\n        bool found = false;\n    \
    \    for(long j=0; j<res.size(); j++) {\n            if(res[j] == digit) found\
    \ = true;\n        }\n        if(!found) {\n            res.push_back(digit);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpkp201gvu: /tmp/tmpkp201gvu.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    \n    // sort the vector\n    std::sort(x.begin(),\
    \ x.end());\n    \n    // find the first even element\n    int first_even = std::find(x.begin(),\
    \ x.end(), 0) % x.size();\n    \n    // iterate until find first non-even element\n\
    \    while (first_even != std::end(ans))\n    {\n        std::advance(first_even,\
    \ 2);\n        \n        std::vector<int> even_index_to_remove = \n          \
    \  std::vector<int>(std::next(first_even), std::end(ans));\n        \n       \
    \ // remove even digits from vector\n        x.erase(std::remove(x.begin(), x.end(),\
    \ 0), x.end());\n        \n        // remove the even digits from list\n     \
    \   std::remove_erase(ans.begin(), even_index_to_remove, ans.end());\n    }\n\
    \    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph5a3g65z.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph5a3g65z.cpp:18:55: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   18 |     int first_even = std::find(x.begin(), x.end(),\
    \ 0) % x.size();\n      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~\n      |                               |                        \
    \       |\n      |                               |                           \
    \    std::vector<long int>::size_type {aka long unsigned int}\n      |       \
    \                        __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmph5a3g65z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmph5a3g65z.cpp:18:64:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   18 |     int first_even = std::find(x.begin(), x.end(), 0) % x.size();\n\
    \      |                                                                ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Create a temporary vector to store result\n    std::vector<long> v;\n\
    \    \n    // Sort the temporary vector\n    std::sort(v.begin(), v.end());\n\
    \    \n    // Copy temporary vector to result vector\n    std::copy_if(v.begin(),\
    \ v.end(), std::back_inserter(v), \n                [&](long i) { return i % 2\
    \ == 0; });\n    \n    // Return the result vector\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpw12rpu25: /tmp/tmpw12rpu25.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Complete this function\n    \n    // Write your code here\n    //\
    \ std::sort(x.begin(), x.end());\n    \n    // Write your code here\n    std::unordered_set<long>\
    \ u;\n    \n    for(long i: x)\n        u.insert(i);\n    \n    std::vector<long>\
    \ result;\n    result.push_back(x.front());\n    \n    while(u.size() > 0) {\n\
    \        long current = u.begin()->first;\n        \n        for(long i: x) {\n\
    \            if(i == current) \n                continue;\n            \n    \
    \        if((i % current) != 0)\n                result.push_back(i);\n      \
    \  }\n        \n        // Remove element\n        u.erase(u.begin());\n    }\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaqh6n62j.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaqh6n62j.cpp:27:35: error: request for member \u2018first\u2019\
    \ in \u2018* u.std::unordered_set<long int>::begin().std::__detail::_Node_iterator<long\
    \ int, true, false>::operator->()\u2019, which is of non-class type \u2018const\
    \ long int\u2019\n   27 |         long current = u.begin()->first;\n      |  \
    \                                 ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  assert(x.size() > 0);\n  // sort the input in ascending order \n  std::sort(x.begin(),\
    \ x.end());\n  // get the position of even digit\n  std::vector<int> position;\n\
    \  for (int i = 0; i < x.size(); ++i) {\n    if (x[i] % 2 == 0) {\n      position.push_back(i);\n\
    \    }\n  }\n  // loop through all elements in position and \n  // check if those\
    \ elements have even digit, \n  // if not add to output list\n  std::vector<long>\
    \ out;\n  for (int i = 0; i < position.size(); ++i) {\n    int size = position.size();\n\
    \    for (int j = 0; j < size; ++j) {\n      if (position[j] == i) {\n       \
    \ int k = position[j + 1];\n        for (int l = j + 1; l < size; ++l) {\n   \
    \       int m = position[l];\n          if (x[m] % 2 == 0) {\n            k =\
    \ position[m];\n            break;\n          }\n        }\n        if (k != i)\
    \ {\n          out.push_back(x[i]);\n        }\n        break;\n      }\n    }\n\
    \  }\n  return out;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpsmsn6c9p: /tmp/tmpsmsn6c9p.cpp:49: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    std::vector<bool> flag(x.size(), false);\n\
    \    std::sort(x.begin(), x.end());\n    \n    for(long i : x) {\n        if(flag[i])\
    \ {\n            continue;\n        }\n        for(long j=i;j>=0;j--) {\n    \
    \        if(flag[j]) {\n                break;\n            }\n            if(j%2==0)\
    \ {\n                y.push_back(i);\n                flag[j] = true;\n      \
    \          break;\n            }\n        }\n    }\n    \n    return y;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpb3e5zym0: /tmp/tmpb3e5zym0.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long long xn = x.size();\n    long long d\
    \ = xn % 2 == 0 ? 1 : 0;\n    long long cnt = 1;\n    long long pos = 0;\n   \
    \ for (int i = 0; i < xn; ++i) {\n        while (pos < xn && x[pos] % 10 == 0)\
    \ {\n            ++pos;\n        }\n        if (pos < xn && x[pos] % 10 != 0)\
    \ {\n            ans.push_back(x[pos]);\n        }\n        cnt *= 10;\n     \
    \   cnt += x[pos] % 10;\n        pos = 0;\n    }\n    for (long long k = 1; cnt\
    \ % k; ++k) {\n        cnt /= k;\n    }\n    ans.push_back(xn);\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0gfe7wvm: /tmp/tmp0gfe7wvm.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Use set to keep track of already visited numbers\n    std::set<long>\
    \ visited;\n    for (auto x : x) {\n        if (visited.find(x) != visited.end())\
    \ {\n            x.clear();\n        }\n        else if (x % 2 == 0) {\n     \
    \       x.clear();\n        }\n        else {\n            visited.insert(x);\n\
    \        }\n    }\n    std::vector<long> ans;\n    for (auto x : visited) {\n\
    \        ans.push_back(x);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn3eh1z9h.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn3eh1z9h.cpp:16:15: error: request for member \u2018clear\u2019\
    \ in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n   16 | \
    \            x.clear();\n      |               ^~~~~\n/tmp/tmpn3eh1z9h.cpp:19:15:\
    \ error: request for member \u2018clear\u2019 in \u2018x\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   19 |             x.clear();\n      |         \
    \      ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int n = x.size();\n    long long temp;\n    std::set<long> digits;\n\
    \    for (long i = 1, j = 1; i < n; i++) {\n        temp = (x[i - 1] % 10 + x[i\
    \ - 1] / 10 % 10 + x[i - 1] / 100) % 10;\n        while (digits.count(temp) ==\
    \ 0 && j < n) temp += (x[j - 1] % 10 + x[j - 1] / 10 % 10 + x[j - 1] / 100) %\
    \ 10;\n        digits.insert(temp);\n    }\n    return std::vector<long>(digits.begin(),\
    \ digits.end());\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long ret = 0;\n    std::vector<long> ret;\n    for (long i = 0;\
    \ i < x.size(); i++) {\n        ret += x[i];\n        long long mod = ret % 10;\n\
    \        ret = (ret / 10) * 10;\n        while(mod != 0) {\n            if (ret.back()\
    \ != mod) ret.push_back(mod);\n            ret /= 10;\n            mod /= 10;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg_3oc2uu.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg_3oc2uu.cpp:13:23: error: conflicting declaration \u2018\
    std::vector<long int> ret\u2019\n   13 |     std::vector<long> ret;\n      | \
    \                      ^~~\n/tmp/tmpg_3oc2uu.cpp:12:15: note: previous declaration\
    \ as \u2018long long int ret\u2019\n   12 |     long long ret = 0;\n      |  \
    \             ^~~\n/tmp/tmpg_3oc2uu.cpp:19:21: error: request for member \u2018\
    back\u2019 in \u2018ret\u2019, which is of non-class type \u2018long long int\u2019\
    \n   19 |             if (ret.back() != mod) ret.push_back(mod);\n      |    \
    \                 ^~~~\n/tmp/tmpg_3oc2uu.cpp:19:40: error: request for member\
    \ \u2018push_back\u2019 in \u2018ret\u2019, which is of non-class type \u2018\
    long long int\u2019\n   19 |             if (ret.back() != mod) ret.push_back(mod);\n\
    \      |                                        ^~~~~~~~~\n/tmp/tmpg_3oc2uu.cpp:24:12:\
    \ error: could not convert \u2018ret\u2019 from \u2018long long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   24 |     return ret;\n      |            ^~~\n\
    \      |            |\n      |            long long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long rem = 0, last = 0;\n    for (long i\
    \ = x.size() - 1; i >= 0; --i)\n    {\n        rem = x[i]%10;\n        if (rem\
    \ == 0)\n        {\n            ans.push_back(x[i]);\n        }\n        if (rem\
    \ != 0 && last == 0)\n        {\n            ans.push_back(x[i]);\n        }\n\
    \        last = rem;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpa4gsthd0: /tmp/tmpa4gsthd0.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> unique_digits;\n    std::set<long> setDigits; // Set\
    \ contains digits that haven't any even.\n    \n    for(long i : x)\n    {\n \
    \       setDigits.insert(i); \n    }\n    \n    for (std::set<long>::iterator\
    \ it = setDigits.begin(); it != setDigits.end(); ++it)\n    {\n        long value\
    \ = *it;\n        long count = 0;\n        // Iterate over each element and compare\
    \ with current value.\n        for (std::set<long>::iterator it2 = setDigits.begin();\
    \ it2 != setDigits.end(); ++it2)\n        {\n            long value = *it2;\n\
    \            if (value == value/2)\n            {\n                count++;\n\
    \            }\n        }\n        if (count == 0)\n        {\n            unique_digits.push_back(value);\n\
    \        }\n    }\n    return unique_digits;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpoyha2nxs: /tmp/tmpoyha2nxs.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> y;\n    \n    long c =\
    \ 0;\n    for (long i : x) {\n        while (i%10 != 0 && c%2 == 0) {\n      \
    \      y.push_back(i);\n            i/= 10;\n        }\n        c++;\n    }\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppaerwwdc: /tmp/tmppaerwwdc.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> v;\n    for(long y : x)\n    {\n        if(y%2 != 0)\n\
    \        {\n            v.push_back(y);\n        }\n    }\n    sort(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpraq_pu3h: /tmp/tmpraq_pu3h.cpp:26: int main(): Assertion `candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for (long n: x) {\n        long count = 0;\n\
    \        while (n != 0) {\n            long d = n % 10;\n            if (count\
    \ <= d) {\n                ans.push_back(n - 1);\n                n = n / 10;\n\
    \            } else {\n                count++;\n                n = n / 10;\n\
    \            }\n        }\n    }\n    for (long n: ans) ans.push_back(n);\n  \
    \  std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp79455jm_: /tmp/tmp79455jm_.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::set<long> s;\n    for(long i: x) s.insert(i);\n    std::vector<long>\
    \ ans;\n    for(auto i: s) ans.push_back(i);\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmrm3vofw: /tmp/tmpmrm3vofw.cpp:21: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here.\n    auto it = x.begin(), itEnd = x.end();\n\
    \    while (it != itEnd) {\n        while ((it != itEnd) && ((*it) %2 == 0))\n\
    \            it++;\n        if (it != itEnd)\n            it++;\n    }\n    return\
    \ x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplzw3dhhg: /tmp/tmplzw3dhhg.cpp:24: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long max_val = 0;\n  long max_index = 0;\n  for (long i = 0; i < x.size();\
    \ i++) {\n    if (max_val < x[i]) {\n      max_val = x[i];\n      max_index =\
    \ i;\n    }\n  }\n  std::vector<long> y;\n  long temp = max_val / 10;\n  for (long\
    \ i = max_index; i >= 0; i--) {\n    if (temp % 2 != 0) {\n      y.push_back(max_val\
    \ / 10);\n    }\n    temp = temp / 10;\n  }\n  return y;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpqo48w9no: /tmp/tmpqo48w9no.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for(long i : x){\n\
    \        sum += i;\n    }\n    for(long i : x){\n        long temp = sum - i;\n\
    \        if(temp == 0){\n            result.push_back(i);\n            sum = 0;\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpaugmxjk9: /tmp/tmpaugmxjk9.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    long d = 0;\n    long carry = 0;\n    for (auto\
    \ it = x.begin(); it != x.end(); ++it) {\n        d = (*it % 10) + (d % 10);\n\
    \        carry = d / 10;\n        d %= 10;\n        y.push_back(d);\n    }\n \
    \   sort(y.begin(), y.end());\n    while (d != 0) {\n        y.push_back(d);\n\
    \        d = carry;\n        carry = 0;\n        for (auto it = y.begin(); it\
    \ != y.end(); ++it) {\n            if (*it % 10 != 0) {\n                carry\
    \ += *it;\n                *it = carry % 10;\n                carry /= 10;\n \
    \           }\n        }\n    }\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmfbz8_w_: /tmp/tmpmfbz8_w_.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> ans;\n\tlong s = 0;\n\tfor (auto i : x)\n\t\ts = s *\
    \ 10 + i;\n\tstd::sort(x.begin(), x.end());\n\tfor (int i = 0; i < x.size(); i++)\n\
    \t\tans.push_back(x[i] - (s % 10));\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpi8v0hm5g: /tmp/tmpi8v0hm5g.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    \n    long long count = 0;\n    long long\
    \ sum = 0;\n    long long max_digit = std::numeric_limits<long long>::max();\n\
    \    for(long long i : x)\n    {\n        sum = sum + i;\n        if(sum > max_digit)\n\
    \        {\n            max = sum - max_digit;\n            count++;\n       \
    \ }\n    }\n    \n    long long i = 0;\n    std::vector<long> output;\n    while(i\
    \ + 1 < x.size())\n    {\n        if(sum % 2 == 0)\n        {\n            sum\
    \ = (sum + x[i]) % 10;\n            output[i++] = sum;\n        }\n        else\n\
    \        {\n            sum = (sum + x[i] + 10) % 10;\n            output[i++]\
    \ = sum;\n        }\n        sum = sum % 10;\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0etotcfo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0etotcfo.cpp:22:13: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   22 |             max =\
    \ sum - max_digit;\n      |             ^~~\n      |             std::max\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0etotcfo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here.\n    sort(x.begin(), x.end());\n    std::vector<long>\
    \ y{x.begin(), x.end()};\n    long ans = 0;\n    for(long i = 0; i < y.size();\
    \ i++)\n    {\n        if(y[i] % 2 == 0)\n            continue;\n        for(long\
    \ j = i; j < y.size(); j++)\n        {\n            if(y[j] % 2 != 0)\n      \
    \      {\n                long k = 0;\n                long l = i+1;\n       \
    \         while(l<y.size())\n                {\n                    if(y[l] %\
    \ 2 == 0)\n                        k++;\n                    l++;\n          \
    \      }\n                if(k == 1 && y[i]>y[j])\n                {\n       \
    \             x.erase(x.begin() + i);\n                    x.erase(x.begin() +\
    \ j);\n                    ans = i;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return x;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp7oreorip: /tmp/tmp7oreorip.cpp:46: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    for(auto &i : x) {\n        if(i % 10 !=\
    \ 0 && i > 0) {\n            ret.push_back(i);\n        }\n    }\n    sort(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpx8bwv88z: /tmp/tmpx8bwv88z.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res(std::begin(x), std::end(x));\n    std::sort(std::begin(x),\
    \ std::end(x));\n    \n    for (long &i : res) {\n        while (i%10 != 0) {\n\
    \            res.erase(std::remove(std::begin(res), std::end(res), i), std::end(res));\n\
    \        }\n    }\n\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res(x.size());\n    for(long i: x){\n        res.push_back(i);\n\
    \    }\n    sort(res.begin(), res.end());\n    std::vector<long> res;\n    for(long\
    \ i = 1; i<res.size(); i++){\n        if(res[i-1]%2 == 0) res.push_back(res[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4qj49j1.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg4qj49j1.cpp:17:23: error: redeclaration of \u2018std::vector<long\
    \ int> res\u2019\n   17 |     std::vector<long> res;\n      |                \
    \       ^~~\n/tmp/tmpg4qj49j1.cpp:12:23: note: \u2018std::vector<long int> res\u2019\
    \ previously declared here\n   12 |     std::vector<long> res(x.size());\n   \
    \   |                       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    for(long k : x) {\n        if(k%2 == 0) ret.push_back(k);\n\
    \    }\n    \n    sort(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpwta0z9az: /tmp/tmpwta0z9az.cpp:22: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long u=0;\n    std::vector<long> result;\n    for(int i = 0; i <\
    \ x.size(); i++)\n    {\n        while(x[i] >= 10) \n        {\n            u\
    \ *= 10;\n            u += x[i] - '0';\n            x[i] -= 10;\n        }\n \
    \       if (u % 2 == 0) \n        {\n            if(i == 0) \n            {\n\
    \                result.push_back(x[i]);\n            }\n            else if(x[i]\
    \ < result[result.size()-1]) \n            {\n                result.push_back(x[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    assert(x.size() != 0);\n    int result = 0, count[26] = {0};\n    for\
    \ (long &i : x) {\n        while (i != 0) {\n            i /= 10;\n          \
    \  result++;\n            count[static_cast<int>(i % 10)] += 1;\n        }\n \
    \   }\n    std::vector<long> ans;\n    for (long &i : x) {\n        while (i !=\
    \ 0) {\n            i /= 10;\n            result++;\n            count[static_cast<int>(i\
    \ % 10)] -= 1;\n        }\n        if (count[static_cast<int>(i % 10)] > 0)\n\
    \            ans.push_back(static_cast<long>(i));\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpjsf87jl0: /tmp/tmpjsf87jl0.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    std::vector<long> res;\n    for(long i:x){\n \
    \       if((i%10)==0){\n            for(int i=0;i<(int)log10(i);++i){\n      \
    \          long k=(int)log10(i);\n                long num=i;\n              \
    \  for(int j=0;j<k;j++){\n                    num*=10;\n                }\n  \
    \              res.push_back(num);\n            }\n        }\n    }\n    \n  \
    \  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpcr4m1ane: /tmp/tmpcr4m1ane.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    // O(n) solution\n    int n = (int)x.size();\n\
    \    std::vector<bool> v(n);\n    for(int i = 0; i < n; i++) {\n        v[i] =\
    \ false;\n    }\n    for(int i = 0; i < n; i++) {\n        if(v[x[i]]) {\n   \
    \         continue;\n        }\n        for(int j = i + 1; j < n; j++) {\n   \
    \         if(v[x[j]]) {\n                break;\n            }\n            if(std::isdigit(x[j])\
    \ && x[j] % 2 == 0) {\n                ans.push_back(x[j]);\n                v[x[j]]\
    \ = true;\n                break;\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpc2p9emrx: /tmp/tmpc2p9emrx.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    long\
    \ cnt = 0;\n    for (auto i : x) {\n        if ((i%2 == 0 && cnt < ans.size()))\n\
    \            ans.push_back(i);\n        else\n            cnt++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpq_jvqt3z: /tmp/tmpq_jvqt3z.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long sum = 0;\n    for (long i: x) {\n  \
    \      sum += i;\n    }\n\n    for (int i = 9; i <= sum; i += 2) {\n        for\
    \ (long j : x) {\n            if (j % i == 0) {\n                ans.push_back(j);\n\
    \            }\n        }\n    }\n\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpy3y34yyy: /tmp/tmpy3y34yyy.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Sort the list before finding even-numbered elements\n    std::sort(x.begin(),\
    \ x.end());\n    std::vector<long> ans;\n    for (long k : x) {\n        // Find\
    \ all elements whose number is even\n        if (k % 2 == 0) {\n            ans.push_back(k);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpzqxle94e: /tmp/tmpzqxle94e.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    for(int i=0; i< x.size(); i++) {\n      \
    \  int cnt = 1;\n        for(int j=0; j< i; j++) {\n            if(x[i]%10 ==\
    \ x[j]%10) cnt++;\n            else break;\n        }\n        if(cnt==1) ret.push_back(x[i]);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpisvddq01: /tmp/tmpisvddq01.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    if (x.size() == 0)\n        return {};\n    auto it = std::unique(x.begin(),\
    \ x.end());\n    auto itEnd = x.end();\n    x.erase(it, itEnd);\n    return x;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp1p4ihq4n: /tmp/tmp1p4ihq4n.cpp:21: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Sort x\n    std::sort(x.begin(), x.end());\n    // Initialize a map\n\
    \    std::map<long, bool> m;\n    // Initialize vector for result\n    std::vector<long>\
    \ res;\n    // Initialize a temporary variable for previous digit\n    long prev\
    \ = 0;\n    // Traverse x from end\n    for (auto it = x.rbegin(); it != x.rend();\
    \ ++it) {\n        // If prev is even and current is not even, then add current\
    \ \n        // number to res vector\n        if (prev % 2 == 0 && it % 2 == 0)\
    \ {\n            res.push_back(*it);\n            // Set current number as previous\
    \ number\n            prev = *it;\n            // If current number is already\
    \ in map m then add its \n            // corresponding value true\n          \
    \  m[*it] = true;\n        }\n        // If prev is odd and current is even then\
    \ add current number\n        // to res vector\n        if (prev % 2 != 0 && it\
    \ % 2 != 0) {\n            res.push_back(*it);\n            // Set current number\
    \ as previous number\n            prev = *it;\n            // If current number\
    \ is already in map m then add its \n            // corresponding value true\n\
    \            m[*it] = true;\n        }\n    }\n    // If there are elements left\
    \ in x then there are no even digit.\n    // Return empty vector\n    if (x.size()\
    \ > 0) {\n        return res;\n    } else {\n        return {};\n    }\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8aifbht8.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8aifbht8.cpp:24:33: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >\u2019 and \u2018int\u2019)\n   24 |        \
    \ if (prev % 2 == 0 && it % 2 == 0) {\n      |                              ~~\
    \ ^ ~\n      |                              |    |\n      |                  \
    \            |    int\n      |                              std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp8aifbht8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8aifbht8.cpp:24:35:\
    \ note:   \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   24 |         if (prev % 2 == 0 && it %\
    \ 2 == 0) {\n      |                                   ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp8aifbht8.cpp:2:\n/shared/cento"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(long &x: x){\n        if(x % 2 == 0){\n\
    \            ans.push_back(x);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpgzw6ht0_: /tmp/tmpgzw6ht0_.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here.\n    std::vector<long> y;\n    long digit;\n\
    \    bool flag = true;\n    int len = x.size();\n    for(long i = 0 ; i < len\
    \ ; ++i){\n        digit = x[len-i-1];\n        while(digit%2 == 0 && flag){\n\
    \            y.push_back(digit);\n            len--;\n            digit = x[len-i-1];\n\
    \        }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpdyvooywa: /tmp/tmpdyvooywa.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::multiset<long> y;\n  for(auto &n: x){\n    if(!y.count(n%10)){\n \
    \     y.insert(n%10);\n    }\n  }\n  std::vector<long> ans;\n  for(auto n: y){\n\
    \    ans.push_back(n);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpxcbiz0r9: /tmp/tmpxcbiz0r9.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int n = x.size();\n    std::vector<long> ans;\n    long digit;\n    for\
    \ (int i = 0; i < n; ++i) {\n        digit = pow(10, i) % 10;\n        if (!(digit\
    \ & 1)) {\n            ans.push_back(x[i]);\n        }\n    }\n    sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlvyw9f3.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptlvyw9f3.cpp:16:28: error: invalid operands of types \u2018\
    double\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   16 |    \
    \     digit = pow(10, i) % 10;\n      |                 ~~~~~~~~~~ ^ ~~\n    \
    \  |                    |         |\n      |                    double    int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::unordered_set<long> digits;\n    std::vector<long> result;\n\n \
    \   for(long &x: x) {\n        long &digit = x%10;\n\n        if(digits.find(digit)\
    \ == digits.end()) {\n            result.push_back(digit);\n            digits.insert(digit);\n\
    \        }\n    }\n\n    result.sort([](long a, long b){return a > b;});\n\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsy_e4emf.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsy_e4emf.cpp:16:24: error: cannot bind non-const lvalue\
    \ reference of type \u2018long int&\u2019 to an rvalue of type \u2018long int\u2019\
    \n   16 |         long &digit = x%10;\n      |                       ~^~~\n/tmp/tmpsy_e4emf.cpp:24:12:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sort\u2019\
    \n   24 |     result.sort([](long a, long b){return a > b;});\n      |       \
    \     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // sort x\n    std::sort(x.begin(), x.end());\n\n    // initialize return\
    \ list\n    std::vector<long> ret;\n\n    // initialize a boolean vector to mark\
    \ the same element.\n    std::vector<bool> seen(x.size(), false);\n\n    // scan\
    \ through x\n    for (long ele : x)\n    {\n        // check this element is seen\n\
    \        if (seen[ele]) continue;\n\n        // add this element to ret\n    \
    \    ret.push_back(ele);\n\n        // mark the element as seen\n        seen[ele]\
    \ = true;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpymts7nfs: /tmp/tmpymts7nfs.cpp:37: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int n = x.size();\n    std::vector<long> r;\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        long l = x[i];\n        for(int j = i+1; j < n; j++)\n\
    \        {\n            if (l % 2 == 0)\n            {\n                l = 0;\n\
    \                break;\n            }\n            else\n            {\n    \
    \            l++;\n            }\n        }\n        if (l != 0)\n        {\n\
    \            r.push_back(l);\n        }\n    }\n    return r;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmptj06igx_: /tmp/tmptj06igx_.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    long ans[100];\n\
    \    for(int i=0;i<x.length();i++){\n        if(x[i]%2==0){\n            int j=0;\n\
    \            while(x[i]%10==0){\n                x[i]/=10;\n                j++;\n\
    \            }\n            ans[j]=x[i];\n        }\n    }\n    for(int i=0;i<ans.size();i++){\n\
    \        ans[i]=ans[i]>0?ans[i]:0;\n    }\n    std::sort(ans, ans+ans.size()-1);\n\
    \    ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpggdaglgo.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpggdaglgo.cpp:14:10: error: conflicting declaration \u2018\
    long int ans [100]\u2019\n   14 |     long ans[100];\n      |          ^~~\n/tmp/tmpggdaglgo.cpp:13:23:\
    \ note: previous declaration as \u2018std::vector<long int> ans\u2019\n   13 |\
    \     std::vector<long> ans;\n      |                       ^~~\n/tmp/tmpggdaglgo.cpp:15:21:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018length\u2019\
    \n   15 |     for(int i=0;i<x.length();i++){\n      |                     ^~~~~~\n\
    /tmp/tmpggdaglgo.cpp:28:23: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019})\n   28 |     std::sort(ans, ans+ans.size()-1);\n\
    \      |                    ~~~^~~~~~~~~~~\n      |                    |     \
    \      |\n      |                    |           std::vector<long int>::size_type\
    \ {aka long unsigned int}\n      |                    std::vector<long int>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpggdaglgo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n   \n    std::vector<bool> v(false);\n    std::vector<long> ret;\n    for(auto\
    \ & c: x) \n    {\n        \n        for(auto i=0; i< v.size() && c%10==0; i++)\
    \ \n        {\n            v.push_back(false);\n        }\n        v[c-10] = true;\n\
    \        \n    }\n    for(auto & c: x)\n    {\n        if(v[c-10]==false) \n \
    \       {\n            ret.push_back(c);\n        }\n    }\n    \n    for(auto\
    \ i=ret.size()-1;i>0;i--)\n    {\n        if(ret[i]%2 == 0)\n        {\n     \
    \       ret.pop_back();\n        }\n        else \n        {\n            break;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    auto its = x.begin();\n    long long v = 0;\n    while (v == 0 && its\
    \ != x.end()) {\n        v = *its;\n        its = its + 1;\n    }\n    std::vector<long>\
    \ result;\n    while (its != x.end()) {\n        v = *its;\n        result.push_back(v);\n\
    \        its = its + 1;\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result; \n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmmi779s0: /tmp/tmpmmi779s0.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n\n   \
    \ for (long & i : x) {\n        long j = 0;\n        while (i%10 != 0) i += j;\n\
    \        j += i%10;\n        i = i/10;\n        result.push_back(i);\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    if (x.size() == 0 || x[0] < 0 || x[0] > 9) {\n        return {};\n  \
    \  }\n    // Initialize a vector<long> to store found digit numbers.\n    std::vector<long>\
    \ v;\n    // Add first digit number to found digit number.\n    v.push_back(x[0]);\n\
    \    // Move the rest of digit numbers into the v vector.\n    for (size_t i =\
    \ 1; i < x.size(); i++) {\n        // If the first digit in the vector is even,\
    \ add it to v vector.\n        if (x[i] % 2 == 0) {\n            v.push_back(x[i]);\n\
    \        }\n        // If current digit number hasn't any even digit, remove it\
    \ from the vector. \n        else if (v.back() % 2 == 0) {\n            v.back()\
    \ = v.back() / 10;\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpxiaw_dop: /tmp/tmpxiaw_dop.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here.\n    long long ans = 0;\n    for( long i = 0;\
    \ i < x.size(); i++){\n        long long n = x[i];\n        int flag = 1;\n  \
    \      while( n){\n            if( n % 10 != 0){\n                flag = 0;\n\
    \                break;\n            }\n            n /= 10;\n        }\n    \
    \    if(flag == 1)\n            ans++;\n    }\n    return { ans };\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmppnro6u9l: /tmp/tmppnro6u9l.cpp:31: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int sz = x.size();\n    std::vector<long> result;\n    long even[sz];\n\
    \    int i = 0;\n    for(long &e: x)\n        e /= 10;\n    for(long &e: x) {\n\
    \        e %= 10;\n        if(e % 2 == 0)\n            even[i++] = e;\n    }\n\
    \    std::sort(even, even + sz);\n    for(i = 0; i < sz; i++) {\n        if(even[i]\
    \ % 2 == 0) {\n            result.push_back(even[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpltaamydg: /tmp/tmpltaamydg.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    long ans = 0;\n    for (long i = 0; i < x.size();\
    \ i++) {\n        ans = x[i] * 10;\n        for (int j = 0; j < i; j++) {\n  \
    \          if (x[j] > ans) {\n                ans = x[j];\n            }\n   \
    \     }\n        y.push_back(ans);\n    }\n    return y;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpi52kyc35: /tmp/tmpi52kyc35.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::sort(x.begin(), x.end());\n  std::vector<long> ans;\n  for (long i\
    \ : x)\n    if (!(i&1)) ans.push_back(i);\n  return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpt230e71g: /tmp/tmpt230e71g.cpp:20: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    long s = 0;\n    long prev = 0;\n    for\
    \ (long d : x) {\n        s = s + d;\n        long c = s / 10;\n        prev =\
    \ s + c * prev;\n        ans.push_back(prev);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpxe_u_ba_: /tmp/tmpxe_u_ba_.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    long sum = 0;\n    long digit;\n    for(int\
    \ i : x) {\n        digit = i % 10;\n        if(sum + digit > 9) {\n         \
    \   sum += digit - 9;\n        } else {\n            sum += digit;\n        }\n\
    \    }\n    long num = 0;\n    for(int i : x) {\n        digit = i % 10;\n   \
    \     if(num + digit < sum) {\n            res.push_back(i);\n        }\n    \
    \    num += digit;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpi9_f4k_1: /tmp/tmpi9_f4k_1.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int size = (int)x.size();\n    // If there are no even digits return\
    \ empty list.\n    if (size < 1) return {};\n    // If there are just one digit\
    \ return it.\n    if (size == 1) return x;\n    // We know that each element will\
    \ never be odd.\n    std::vector<long> y{};\n    // If the first element is an\
    \ odd digit.\n    if (x[0] & 0x01) {\n        // Add it to the returned list.\n\
    \        y.push_back(x[0]);\n    }\n    // Iterate over the rest of the elements.\n\
    \    for (int i = 1; i < size; ++i) {\n        // If the i'th element is an even\
    \ digit.\n        if (x[i] & 0x01)\n            // Add it to the returned list.\n\
    \            y.push_back(x[i]);\n    }\n    return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpr4di8kt5: /tmp/tmpr4di8kt5.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::sort(x.begin(), x.end());\n  std::vector<long> ret;\n  ret.reserve(x.size());\n\
    \  for (long i : x) {\n    if (i % 2 == 0) {\n      ret.push_back(i);\n    }\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpy1c88sda: /tmp/tmpy1c88sda.cpp:24: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(long i: x){\n        for(long j=i;j>=10;j--){\n\
    \            if((j%10)==0) ans.push_back(j);\n        }\n    }\n    sort(ans.begin(),\
    \ ans.end()); // sorted in increasing order\n    for(int i=0;i<ans.size();i++){\n\
    \        if(ans[i]%2==0) ans.erase(ans.begin()+i);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpss59v9fx: /tmp/tmpss59v9fx.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long sum = 0;\n    long long count = 0;\n    for (long long &i :\
    \ x) {\n        sum += i;\n        ++count;\n    }\n    long long temp;\n    for\
    \ (long long &i : x) {\n        temp = sum;\n        sum -= i;\n        if (sum\
    \ == 0) {\n            sum += i;\n            ++count;\n            if (count\
    \ == 2) {\n                x.erase(std::remove(x.begin(), x.end(), temp), x.end());\n\
    \            }\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgs3ngsk4.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgs3ngsk4.cpp:14:25: error: cannot bind non-const lvalue\
    \ reference of type \u2018long long int&\u2019 to an rvalue of type \u2018long\
    \ long int\u2019\n   14 |     for (long long &i : x) {\n      |              \
    \           ^\n/tmp/tmpgs3ngsk4.cpp:19:25: error: cannot bind non-const lvalue\
    \ reference of type \u2018long long int&\u2019 to an rvalue of type \u2018long\
    \ long int\u2019\n   19 |     for (long long &i : x) {\n      |              \
    \           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  x.sort([](int a, int b){return a<b;});\n  std::unordered_map<long, int>\
    \ m;\n  for(long i=0;i<x.size();i++){\n    long sum=0;\n    for(int j=0;j<i;j++){\n\
    \      sum+=x[j]%10;\n    }\n    if(sum%2==0){\n      m[x[i]]=1;\n      std::sort(x.begin(),\
    \ x.end(), [](int a, int b){return a<b;});\n    }\n  }\n  std::vector<long> ans;\n\
    \  for(auto it=m.begin(); it!=m.end();it++){\n    if(it->second==0){\n      ans.push_back(it->first);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzy5vetq.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxzy5vetq.cpp:12:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   12 |   x.sort([](int a,\
    \ int b){return a<b;});\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n        long long count = 0;\n        for (int i = 0; i < x.size(); i++){\n\
    \            count += (x.at(i) % 10);\n        }\n        long long maxDigit =\
    \ count/10;\n        long long temp = count % 10;\n        std::vector<long> ans;\n\
    \        long long count = 0;\n        for (int i = 0; i < x.size(); i++){\n \
    \           count += (x.at(i) % 10);\n            if (count > maxDigit){\n   \
    \             long long rem = 0;\n                for (int j = 0; j < temp; j++){\n\
    \                    rem += (x.at(j) % 10);\n                }\n             \
    \   if (rem > maxDigit){\n                    ans.push_back(x);\n            \
    \    }\n                break;\n            }\n        }\n        return ans;\n\
    \    }\n</code>\n<|/ a dscore=0 tags=list,c++,arrays,algorithm |>\n<| c |>\nI\
    \ forgot to mention that `long long int count = 0` has to be changed to `long\
    \ long count = 0`\n<|/ c |>\n<| c |>\nThanks for the help! I edited my post and\
    \ added the code I wrote based on your solution. Still not working...\n<|/ c |>\n\
    <| c |>\n`vector<long>` does not have the member function `at()` that you are\
    \ using. Instead you can use `operator[]` instead. `x.at(i)` should be `x[i]`\n\
    <|/ c |>\n<| a dscore=0 tags=list,c++,arrays,algorithm |>\nI solved the problem\
    \ with my own method. I think it is kinda complicated but it works. I first converted\
    \ the input vector into a string and searched for a specific string that has the\
    \ characters that I needed and then I checked if those characters exist in the\
    \ string and I used the index function to count how many times those characters\
    \ are in the string. Below is my code:\n<code>\n#include <iostream>\n#include\
    \ <bits/stdc++.h>\n#include <algorithm>\nusing namespace std;\n\n// Given a list\
    \ of positive integers x. return a sorted list of all \n// elements that hasn't\
    \ any even digit.\n// Note: Returned list should be sorted in increasing order.\n\
    // For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>>\
    \ unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long>\
    \ x) {\n    string s = \"\";\n    for (int i = 0; i < x.size(); i++){\n      \
    \  s += to_string(x[i]);\n    }\n    long long count = 0;\n    for (int i = 0;\
    \ i < s.size(); i++){\n        if (s[i] == '2'){\n            count++;\n     \
    \   }\n    }\n    long long maxDigit = count/10;\n    long long temp = count %\
    \ 10;\n    std::vector<long\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp732euhi.cpp:38:26: error: stray \u2018`\u2019 in program\n   38\
    \ | I forgot to mention that `long long int count = 0` has to be changed to `long\
    \ long count = 0`\n      |                          ^\n/tmp/tmpp732euhi.cpp:38:50:\
    \ error: stray \u2018`\u2019 in program\n   38 | I forgot to mention that `long\
    \ long int count = 0` has to be changed to `long long count = 0`\n      |    \
    \                                              ^\n/tmp/tmpp732euhi.cpp:38:73:\
    \ error: stray \u2018`\u2019 in program\n   38 | I forgot to mention that `long\
    \ long int count = 0` has to be changed to `long long count = 0`\n      |    \
    \                                                                     ^\n/tmp/tmpp732euhi.cpp:38:93:\
    \ error: stray \u2018`\u2019 in program\n   38 | I forgot to mention that `long\
    \ long int count = 0` has to be changed to `long long count = 0`\n      |    \
    \                                                                            \
    \             ^\n/tmp/tmpp732euhi.cpp:44:1: error: stray \u2018`\u2019 in program\n\
    \   44 | `vector<long>` does not have the member function `at()` that you are\
    \ using. Instead you can use `operator[]` instead. `x.at(i)` should be `x[i]`\n\
    \      | ^\n/tmp/tmpp732euhi.cpp:44:14: error: stray \u2018`\u2019 in program\n\
    \   44 | `vector<long>` does not have the member function `at()` that you are\
    \ using. Instead you can use `operator[]` instead. `x.at(i)` should be `x[i]`\n\
    \      |              ^\n/tmp/tmpp732euhi.cpp:44:50: error: stray \u2018`\u2019\
    \ in program\n   44 | `vector<long>` does not have the member function `at()`\
    \ that you are using. Instead you can use `operator[]` instead. `x.at(i)` should\
    \ be `x[i]`\n      |                                                  ^\n/tmp/tmpp732euhi.cpp:44:55:\
    \ error: stray \u2018`\u2019 in program\n   44 | `vector<long>` does not have\
    \ the member function `at()` that you are using. Instead you can use `operator[]`\
    \ instead. `x.at(i)` should be `x[i]`\n      |                               \
    \                        ^\n/tmp/tmpp732euhi.cpp:44:97: error: stray \u2018`\u2019\
    \ in program\n   44 | `vector<long>` does not have the member function `at()`\
    \ that you are using. Instead"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long int temp = 0;\n  long int ans = 0;\n  for (long int i = 0; i < x.size();\
    \ i++) {\n    temp = x[i];\n    ans += temp%10;\n    temp /= 10;\n  }\n  std::vector<long>\
    \ res(x.size());\n  for (long int i = 0; i < x.size(); i++) {\n    long int temp\
    \ = 0;\n    long int ans = 0;\n    for (long int j = 0; j < x.size(); j++) {\n\
    \      temp = x[j];\n      ans += temp%10;\n      temp /= 10;\n    }\n    if (ans\
    \ % 2 == 0) {\n      res.push_back(x[i]);\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpj2wm6sgk: /tmp/tmpj2wm6sgk.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // sort the list\n    std::sort(x.begin(), x.end());\n    // find out\
    \ if the x has any even digit\n    std::vector<bool> isEven(x.size(), false);\n\
    \    long sum = 0;\n    for (long &i : x) {\n        isEven[i] = sum % 2 == 0;\n\
    \        sum += i;\n    }\n\n    // if no even digit, just return x\n    for (long\
    \ &i : x) {\n        if (!isEven[i]) {\n            return x;\n        }\n   \
    \ }\n\n    // otherwise, we can use isEven to find out all odd ones\n    // use\
    \ std::set to prevent duplicate elements\n    std::set<long> odds;\n    for (long\
    \ &i : x) {\n        if (!isEven[i]) {\n            odds.insert(i);\n        }\n\
    \    }\n\n    // finally return the odd ones in sorted order\n    std::vector<long>\
    \ res(odds.begin(), odds.end());\n    std::sort(res.begin(), res.end());\n   \
    \ return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplj4xta9i: /tmp/tmplj4xta9i.cpp:45: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long temp = 0;\n    std::vector<long> ans;\n    for (long i : x)\n  \
    \  {\n        temp = i / 10;\n        if (temp%2 != 0)\n            ans.push_back(temp);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp1stu5x5e: /tmp/tmp1stu5x5e.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    // Store the digits in an array so that we\
    \ can use it to check\n    // the digits of even number.\n    long d[4];\n   \
    \ for (long i: x) {\n        d[i%10] = i;\n    }\n    // The array d stores the\
    \ digits of x.\n    for (long i=0;i<4;i++) {\n        long sum = 0;\n        //\
    \ Checks whether the element x has any even digit.\n        for (long j=0;j<4;j++)\
    \ {\n            if (d[j]%2 == 1) {\n                sum += d[j];\n          \
    \  }\n        }\n        if (sum > 0) {\n            ans.push_back(d[0]);\n  \
    \          sum += d[0];\n        }\n        // Check whether all the element of\
    \ x are unique.\n        // If so, add that element to ans.\n        if (sum ==\
    \ x.size()) {\n            ans.push_back(d[0]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmqw_q4tb: /tmp/tmpmqw_q4tb.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // Sort the list first.\n  std::sort(x.begin(), x.end());\n  std::vector<long>\
    \ ans;\n  for (auto v : x) {\n    while (v & 1) {\n      v >>= 1;\n      ans.push_back(v);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp8ek4fo8a: /tmp/tmp8ek4fo8a.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> nums(x.size());\n    // get all digits from 0 to 9\n\
    \    std::iota(nums.begin(), nums.end(), 0);\n    // sort \n    std::sort(nums.begin(),\
    \ nums.end());\n    // iterate over the sorted list\n    std::vector<long> nums_copy(nums);\n\
    \    std::vector<long> ans;\n    long count = 0;\n    long sum = 0;\n    for (long\
    \ i : nums)\n    {\n        sum += i;\n        // if sum is even, add it to the\
    \ answer\n        if (sum % 2 == 0)\n        {\n            ans.push_back(i);\n\
    \            sum += i;\n            count++;\n        }\n        // otherwise\
    \ remove one from the sum\n        else\n        {\n            sum -= i;\n  \
    \          count--;\n        }\n    }\n    \n    if (count != 0)\n        ans.push_back(sum);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpp_n8yt_n: /tmp/tmpp_n8yt_n.cpp:46: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    \n    sort(x.begin(), x.end());\n    long long\
    \ ans = 0;\n    long long cnt = 0;\n    long long cur = 0;\n    for(int i : x)\
    \ {\n        cur = i % 10;\n        if(cur != 0) {\n            ans += 1;\n  \
    \          cnt += 1;\n        }\n    }\n    std::vector<long> res;\n    long long\
    \ d = cnt / 2;\n    while(d > 0) {\n        for(int i = 0; i < d; i++) {\n   \
    \         if(ans % 2 == 0) {\n                res.push_back(ans);\n          \
    \      ans = 0;\n            }\n            ans += 1;\n            cnt -= 1;\n\
    \        }\n        d = cnt / 2;\n    }\n    for(int i = 0; i < d; i++) {\n  \
    \      if(ans % 2 == 0) {\n            res.push_back(ans);\n            ans =\
    \ 0;\n        }\n        ans += 1;\n        cnt -= 1;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp31rzrve0: /tmp/tmp31rzrve0.cpp:50: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// Create a temporary container with all the unique digits\n\tstd::vector<long>\
    \ u;\n\tstd::set<long> u_set;\n\tfor(const auto &elem : x) u_set.insert(elem);\n\
    \n\t// Copy from unique to original\n\tfor(const auto &elem : u_set)\n\t\tx.push_back(elem);\n\
    \n\t// Sort the vector in increasing order\n\tstd::sort(x.begin(), x.end());\n\
    \n\t// Return the original vector if all elements are even.\n\t// This is to avoid\
    \ the return an empty vector with []\n\tfor(const auto &elem : x)\n\t\tif(elem\
    \ % 2 == 0)\n\t\t\treturn x;\n\n\treturn x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_o0l70br: /tmp/tmp_o0l70br.cpp:34: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    auto unique_digits_it = std::unique(x.begin(), x.end());\n    x.erase(unique_digits_it,\
    \ x.end());\n    return std::sort(x.begin(), x.end());\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwih6c22o.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwih6c22o.cpp:14:21: error: could not convert \u2018std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(x.std::vector<long int>::begin(), x.std::vector<long\
    \ int>::end())\u2019 from \u2018void\u2019 to \u2018std::vector<long int>\u2019\
    \n   14 |     return std::sort(x.begin(), x.end());\n      |            ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                     |\n      |                     void\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> nums;\n\tlong count = 0;\n\tfor(auto i : x) {\n\t\tcount\
    \ += i % 10;\n\t\tnums.push_back(i);\n\t}\n\tif(count > 0) {\n\t\tnums.push_back(count\
    \ % 10);\n\t}\n\tstd::sort(nums.begin(), nums.end());\n\treturn nums;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpspo9yo5r: /tmp/tmpspo9yo5r.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    for (long\
    \ n : x) {\n        if (n % 2 == 0) {\n            result.push_back(n);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return std::unique(result.begin(),\
    \ result.end());\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq1ogit00.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq1ogit00.cpp:20:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(result.std::vector<long int>::begin(), result.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n   20 |     return std::unique(result.begin(),\
    \ result.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y(x.size());\n    long ans = 0;\n    // find out how\
    \ many unique digits we have\n    long len = x.size();\n    for(long i = 0; i\
    \ < len; i++) {\n        long digit = int(x[i]);\n        bool found = false;\n\
    \        for(long j = 0; j < ans; j++)\n            if(digit < y[ans - 1 - j])\n\
    \                found = true;\n            else if(digit == y[ans - 1 - j])\n\
    \                found = true;\n            if(found)\n                break;\n\
    \        y[ans++] = digit;\n    }\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpcma7e5ot: /tmp/tmpcma7e5ot.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code here\n    int N = x.size();\n    std::vector<long> ans;\n\
    \    std::map<long, int> freq;\n    for (int i = 0; i < N; i++) {\n        long\
    \ xx = x[i];\n        if (freq.find(xx) == freq.end()) {\n            freq[xx]\
    \ = 1;\n            ans.push_back(xx);\n        } else {\n            freq[xx]++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp65szwaym: /tmp/tmp65szwaym.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // code here\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpxkwqpuv2: /tmp/tmpxkwqpuv2.cpp:16: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::set<long> nums;\n\tfor (long i : x)\n\t{\n\t\tif (nums.find(i) ==\
    \ nums.end())\n\t\t{\n\t\t\tnums.insert(i);\n\t\t}\n\t}\n\t\n\tstd::vector<long>\
    \ ans;\n\twhile (!nums.empty())\n\t{\n\t\tlong v = nums.begin()->second;\n\t\t\
    if (std::any_of(x.begin(), x.end(), [&](long i) {return i % v == 0;})) \n\t\t\
    {\n\t\t\tans.push_back(v);\n\t\t\tnums.erase(nums.begin());\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tnums.erase(nums.begin());\n\t\t}\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpihljoo63.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpihljoo63.cpp:24:26: error: request for member \u2018second\u2019\
    \ in \u2018* nums.std::set<long int>::begin().std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   24 |   long v = nums.begin()->second;\n      |                          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    long long sum\
    \ = 0;\n    for (long long i = x.size() - 1; i >= 0; i--) {\n        sum += x[i];\n\
    \    }\n    for (int i = 0; i < x.size(); i++) {\n        if (sum % 2 != 0) {\n\
    \            ans.push_back(x[i]);\n        }\n        sum -= x[i];\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmphmoua7yw: /tmp/tmphmoua7yw.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::sort(x.begin(), x.end());\n  std::vector<long> ans;\n  for (long i\
    \ = 0, j = 1; i < x.size(); ++i) {\n    if (x[i] % j == 0 && ans.size() == 0)\
    \ ans.push_back(x[i]);\n    if (x[i] % j != 0) ++j;\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmphqx2upef: /tmp/tmphqx2upef.cpp:22: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(int i : x){\n        std::cout << \"i=\"\
    \ << i << \" \";\n    }\n    int size = x.size();\n    std::vector<bool> visited(size,\
    \ false);\n    std::queue<long> q;\n    q.push(0);\n    visited[0] = true;\n \
    \   while(!q.empty()){\n        long cur = q.front();\n        q.pop();\n    \
    \    for(long i = 0; i < size; ++i){\n            long next = cur * 10 + x[i];\n\
    \            if(next % 2 == 0){\n                if(!visited[i]){\n          \
    \          visited[i] = true;\n                    y.push_back(next);\n      \
    \              q.push(next);\n                }\n            }\n        }\n  \
    \  }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: 'i=15 i=33 i=1422 i=1 '
  stderr: "tmpxaykl999: /tmp/tmpxaykl999.cpp:39: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    for(int i=0;i<x.size();i++) {\n        bool\
    \ found = false;\n        for(int j=i+1;j<x.size();j++) {\n            if(isEven(x[j]))\
    \ {\n                found = true;\n                res.push_back(x[j]);\n   \
    \             break;\n            }\n        }\n        if(!found) res.push_back(x[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5sb683lv.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5sb683lv.cpp:16:16: error: \u2018isEven\u2019 was not\
    \ declared in this scope\n   16 |             if(isEven(x[j])) {\n      |    \
    \            ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long ans = 0, i = x.size() - 1;\n    for(; i >= 0; --i) {\n        if(ans\
    \ == 0 && x[i] % 2 == 0) {\n            ans = 1;\n        }\n        else if(x[i]\
    \ % 2 != 0) {\n            x[i] = ans;\n            ans = 0;\n        }\n    }\n\
    \    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpy7u5ox5o: /tmp/tmpy7u5ox5o.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // code here\n    \n    long cnt = 0;\n    long long result = -1;\n \
    \   for (long i = 0; i < x.size(); i++) {\n        while (x.at(i % 10) == 0) i++;\n\
    \        long value = x.at(i % 10);\n        cnt += 1;\n        if (result !=\
    \ -1 && result != value) {\n            return std::vector<long>();\n        }\n\
    \        result = value;\n    }\n    return std::vector<long>();\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpksw5cybd: /tmp/tmpksw5cybd.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for (long i: x) {\n        while ((i & 1) ==\
    \ 0) {\n            i /= 10;\n        }\n        y.push_back(i);\n    }\n    return\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpr9ldzwgu: /tmp/tmpr9ldzwgu.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    if (x.size() == 0) return x;\n    std::vector<long> ans;\n    std::sort(x.begin(),\
    \ x.end());\n    std::set<long> digits;\n    for (long i : x) {\n        while\
    \ (i && digits.size()) {\n            long m = std::distance(x.begin(), std::find(x.begin(),\
    \ x.end(), digits.rbegin()));\n            if (m % 2 == 0) break;\n          \
    \  digits[--m] = true;\n        }\n        if (digits.size()) {\n            ans.push_back(i);\n\
    \        }\n        digits.clear();\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptt0athw8.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptt0athw8.cpp:20:19: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::set<long int>\u2019 and \u2018long int\u2019)\n\
    \   20 |             digits[--m] = true;\n      |                   ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptt0athw8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Value = const std::reverse_iterator<std::_Rb_tree_const_iterator<long int>\
    \ >]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::reverse_iterator<std::_Rb_tree_const_iterator<long\
    \ int> > >]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:161:23:\
    \   required from \u2018_Iterator std::__find_if(_Iterator, _Iterator, _Predicate)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vect"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // code here\n    \n    return x;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplt7h5sk1: /tmp/tmplt7h5sk1.cpp:18: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // your code goes here\n    std::vector<long> ans;\n    for(auto i:x)\
    \ {\n        if( (i%10)%2 != 0 ) {\n            ans.push_back(i);\n        }\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpibbshbrn: /tmp/tmpibbshbrn.cpp:25: int main(): Assertion `candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::set<long> s;\n    \n    for(long &it : x) {\n        s.insert(it);\n\
    \    }\n    \n    std::vector<long> ans;\n    \n    for(long &it : s) {\n    \
    \    long num = it;\n        long cnt = 0;\n        while(num > 0) {\n       \
    \     cnt += num % 10;\n            num /= 10;\n        }\n        if (cnt ==\
    \ 0) {\n            ans.push_back(it);\n        }\n    }\n    \n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1g7hpi3.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc1g7hpi3.cpp:20:20: error: binding reference of type \u2018\
    long int&\u2019 to \u2018const long int\u2019 discards qualifiers\n   20 |   \
    \  for(long &it : s) {\n      |                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int N=x.size();\n    std::vector<long> ans;\n    std::unordered_map<long,\
    \ bool> m;\n    std::vector<long> p;\n    std::vector<long> q;\n    for (long\
    \ &x: x)\n        m[x]=false;\n    for (long &x: x)\n        m[x]=true;\n    for\
    \ (int i=0; i<N; i++)\n    {\n        p=x;\n        q=p;\n        while (q>0)\n\
    \        {\n            long temp=p%10;\n            if (m[temp]==false)\n   \
    \         {\n                ans.push_back(temp);\n                m[temp]=true;\n\
    \                q=q/10;\n            }\n            else\n            {\n   \
    \             long temp2=q;\n                while (temp2!=0)\n              \
    \  {\n                    long temp3=temp2%10;\n                    if (m[temp3]==true)\n\
    \                    {\n                        ans.push_back(temp3);\n      \
    \                  m[temp3]=true;\n                        temp2=temp2/10;\n \
    \                   }\n                    else\n                        break;\n\
    \                }\n            }\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpew9e8_cx.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpew9e8_cx.cpp:25:17: error: no match for \u2018operator>\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   25 |         while (q>0)\n      |                ~^~\n      |            \
    \    | |\n      |                | int\n      |                std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpew9e8_cx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1081:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpew9e8_cx.cpp:25:18:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   25 |         while (q>0)\n      |                  ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpew9e8_cx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1136:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpew9e8_cx.cpp:25:1"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    if (x.empty()){\n        return {};\n    }\n    // Get digits length\
    \ for all elements in the list.\n    std::vector<long> digits_length(x.size());\n\
    \    for (long d: x) {\n        digits_length[d / 10] ++;\n    }\n    \n    //\
    \ Initialize a vector to store all digits.\n    std::vector<long> ret;\n    ret.resize(x.size());\n\
    \    \n    // For each digit, get the index of that digit in the list.\n    std::vector<std::pair<long,\
    \ std::size_t>> sorted_pos(digits_length.begin(), digits_length.end());\n    std::sort(sorted_pos.begin(),\
    \ sorted_pos.end(), sort_by_pair);\n    \n    // For each digit, get the index\
    \ of that digit in the list.\n    for (long d : sorted_pos) {\n        // If the\
    \ position is even, put the digit into the returned vector.\n        if (d.second\
    \ % 2 == 0) {\n            ret[d.first] = x[d.first];\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8uaf4q6a.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8uaf4q6a.cpp:27:53: error: \u2018sort_by_pair\u2019 was\
    \ not declared in this scope\n   27 |     std::sort(sorted_pos.begin(), sorted_pos.end(),\
    \ sort_by_pair);\n      |                                                    \
    \ ^~~~~~~~~~~~\n/tmp/tmp8uaf4q6a.cpp:30:19: error: cannot convert \u2018std::pair<long\
    \ int, long unsigned int>\u2019 to \u2018long int\u2019 in initialization\n  \
    \ 30 |     for (long d : sorted_pos) {\n      |                   ^~~~~~~~~~\n\
    /tmp/tmp8uaf4q6a.cpp:32:15: error: request for member \u2018second\u2019 in \u2018\
    d\u2019, which is of non-class type \u2018long int\u2019\n   32 |         if (d.second\
    \ % 2 == 0) {\n      |               ^~~~~~\n/tmp/tmp8uaf4q6a.cpp:33:19: error:\
    \ request for member \u2018first\u2019 in \u2018d\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   33 |             ret[d.first] = x[d.first];\n\
    \      |                   ^~~~~\n/tmp/tmp8uaf4q6a.cpp:33:32: error: request for\
    \ member \u2018first\u2019 in \u2018d\u2019, which is of non-class type \u2018\
    long int\u2019\n   33 |             ret[d.first] = x[d.first];\n      |      \
    \                          ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8uaf4q6a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h:\
    \ In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1\
    \ = std::pair<long int, long unsigned int>; _Args = {long int&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:\
    \   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> ans;\n    int n = x.size();\n\
    \    \n    int a = 0;\n    int b = n;\n    while(a <= b) {\n        if(x[a] %\
    \ 2 != 0) {\n            ans.push_back(x[a]);\n            a++;\n        } else\
    \ {\n            a++;\n        }\n    }\n    while(a < b) {\n        if(x[a] %\
    \ 2 == 0) {\n            ans.push_back(x[a]);\n            a++;\n        } else\
    \ {\n            b--;\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplj_5uk8i: /tmp/tmplj_5uk8i.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> y; \n  y = x;\n  int len = x.size();\n  for (int i =\
    \ 0; i < len; i++) {\n      for (int j = i + 1; j < len; j++) {\n          long\
    \ a= x[i];\n          long b = x[j];\n          while (a != 0) {\n           \
    \   long div = a % 10;\n              if (b != 0) {\n                  long m\
    \ = b / 10;\n                  if (m != 0 && m % 2 == 0) {\n                 \
    \     y.push_back(a);\n                      i = j;\n                      a =\
    \ b;\n                      break;\n                  }\n              }\n   \
    \           a = a / 10;\n              b = b / 10;\n          }\n      }\n  }\n\
    \  std::sort(y.begin(), y.end());\n  return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp77i20b3g: /tmp/tmp77i20b3g.cpp:40: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // your code goes here\n  \n  std::sort(x.begin(), x.end());\n  std::set<long>\
    \ v;\n  for (long x : x) v.insert(x);\n  std::vector<long> result;\n  while (!v.empty())\
    \ {\n    result.push_back(v.begin()->second);\n    v.erase(v.begin());\n  }\n\
    \  std::sort(result.begin(), result.end());\n  return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsql3n27j.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsql3n27j.cpp:19:33: error: request for member \u2018second\u2019\
    \ in \u2018* v.std::set<long int>::begin().std::_Rb_tree_const_iterator<long int>::operator->()\u2019\
    , which is of non-class type \u2018const long int\u2019\n   19 |     result.push_back(v.begin()->second);\n\
    \      |                                 ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int ans = x.size();\n    std::vector<int> xd = std::vector<int>(ans);\n\
    \    long last = 0;\n    long sum = 0;\n    for(size_t i = 0; i < x.size(); i++)\
    \ {\n        xd[i] = x[i]%10;\n        sum += x[i];\n        if(sum > last) ans\
    \ -= xd[i];\n        last = sum;\n    }\n    std::vector<long> ans(ans);\n   \
    \ for(size_t i = 0; i < ans.size(); i++){\n        if(ans[i] % 2 == 0) continue;\n\
    \        std::find(x.begin(), x.end(), ans[i]).\n            copy_to_range(ans.begin()\
    \ + i, ans.end());\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7eaynl1.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj7eaynl1.cpp:22:23: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   22 |     std::vector<long> ans(ans);\n   \
    \   |                       ^~~\n/tmp/tmpj7eaynl1.cpp:12:9: note: previous declaration\
    \ as \u2018int ans\u2019\n   12 |     int ans = x.size();\n      |         ^~~\n\
    /tmp/tmpj7eaynl1.cpp:23:31: error: request for member \u2018size\u2019 in \u2018\
    ans\u2019, which is of non-class type \u2018int\u2019\n   23 |     for(size_t\
    \ i = 0; i < ans.size(); i++){\n      |                               ^~~~\n/tmp/tmpj7eaynl1.cpp:24:17:\
    \ error: invalid types \u2018int[size_t {aka long unsigned int}]\u2019 for array\
    \ subscript\n   24 |         if(ans[i] % 2 == 0) continue;\n      |          \
    \       ^\n/tmp/tmpj7eaynl1.cpp:25:44: error: invalid types \u2018int[size_t {aka\
    \ long unsigned int}]\u2019 for array subscript\n   25 |         std::find(x.begin(),\
    \ x.end(), ans[i]).\n      |                                            ^\n/tmp/tmpj7eaynl1.cpp:26:31:\
    \ error: request for member \u2018begin\u2019 in \u2018ans\u2019, which is of\
    \ non-class type \u2018int\u2019\n   26 |             copy_to_range(ans.begin()\
    \ + i, ans.end());\n      |                               ^~~~~\n/tmp/tmpj7eaynl1.cpp:26:48:\
    \ error: request for member \u2018end\u2019 in \u2018ans\u2019, which is of non-class\
    \ type \u2018int\u2019\n   26 |             copy_to_range(ans.begin() + i, ans.end());\n\
    \      |                                                ^~~\n/tmp/tmpj7eaynl1.cpp:28:12:\
    \ error: could not convert \u2018ans\u2019 from \u2018int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   28 |     return ans;\n      |            ^~~\n      |       \
    \     |\n      |            int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n   std::sort(x.begin(), x.end());\n   std::set<long> s;\n   std::vector<long>\
    \ ans;\n   for(long i: x) {\n      s.insert(i);\n      while(!s.empty() && s.begin()->digit()\
    \ % 2 == 0) {\n         ans.push_back(s.begin()->digit());\n         s.pop();\n\
    \      }\n   }\n   return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeb98hmpk.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeb98hmpk.cpp:17:38: error: request for member \u2018digit\u2019\
    \ in \u2018* s.std::set<long int>::begin().std::_Rb_tree_const_iterator<long int>::operator->()\u2019\
    , which is of non-class type \u2018const long int\u2019\n   17 |       while(!s.empty()\
    \ && s.begin()->digit() % 2 == 0) {\n      |                                 \
    \     ^~~~~\n/tmp/tmpeb98hmpk.cpp:18:35: error: request for member \u2018digit\u2019\
    \ in \u2018* s.std::set<long int>::begin().std::_Rb_tree_const_iterator<long int>::operator->()\u2019\
    , which is of non-class type \u2018const long int\u2019\n   18 |          ans.push_back(s.begin()->digit());\n\
    \      |                                   ^~~~~\n/tmp/tmpeb98hmpk.cpp:19:12:\
    \ error: \u2018class std::set<long int>\u2019 has no member named \u2018pop\u2019\
    \n   19 |          s.pop();\n      |            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    // Write your code here\n    for (auto i\
    \ : x) {\n        for (int j = 1; j <= i; ++j) {\n            if (i % j == 0)\
    \ {\n                ans.push_back(i);\n                break;\n            }\n\
    \        }\n    }\n    // end your code\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp30m3l0qb: /tmp/tmp30m3l0qb.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long a = 0, b = 1, c = 0, d = 0;\n  \n  for (long &i : x) {\n    if (i\
    \ % 2 == 0) {\n      a = b;\n      b = i;\n    } else {\n      c = d;\n      d\
    \ = i;\n    }\n  }\n  \n  std::vector<long> result;\n  \n  while (a != 0) {\n\
    \    if (a % 2 == 0) {\n      result.push_back(b);\n      b = c;\n      c = d;\n\
    \    } else {\n      result.push_back(d);\n      d = a;\n      a = b;\n    }\n\
    \  }\n  \n  std::sort(result.begin(), result.end());\n  return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long res = 0;\n    for (int i = 0; i != x.size(); i++) {\n        long\
    \ temp = x[i];\n        if (i % 2 == 0) {\n            res = temp;\n        }\n\
    \    }\n    std::vector<long> ans;\n    while (x != 0) {\n        res *= 10;\n\
    \        res += x--;\n    }\n    std::vector<long> ress;\n    while (!res.zero())\
    \ {\n        ress.push_back(res % 10);\n        res /= 10;\n    }\n    std::sort(ress.begin(),\
    \ ress.end());\n    ans.reserve(ress.size());\n    for (auto &i : ress) {\n  \
    \      if (ans.size() == 0) {\n            ans.push_back(i);\n        } else {\n\
    \            bool exist = false;\n            for (int j = 0; j != ans.size();\
    \ j++) {\n                if (i == ans[j]) {\n                    exist = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!exist) {\n                ans.push_back(i);\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jcvgfoi.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7jcvgfoi.cpp:20:14: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   20 |     while (x != 0) {\n      |            ~ ^~ ~\n      |            |\
    \    |\n      |            |    int\n      |            std::vector<long int>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7jcvgfoi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7jcvgfoi.cpp:20:17:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   20 |     while (x != 0) {\n      |                 ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7jcvgfoi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7jcvgfoi.cpp:20:17"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> ans;\n  for (auto i : x) {\n    if (i / 2 != 0 && ans.size()\
    \ > 0) {\n      ans.back() = i;\n      ans.pop_back();\n    } else {\n      ans.push_back(i);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpyepb2_a4: /tmp/tmpyepb2_a4.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for (long &x: x)\n    {\n        int flag\
    \ = 1;\n        for (long &y: x)\n        {\n            if (y % 2 == 0)\n   \
    \         {\n                flag = 0;\n                break;\n            }\n\
    \        }\n        if (flag == 1)\n        {\n            ans.push_back(x);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4b65dpsw.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4b65dpsw.cpp:16:23: error: \u2018begin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::begin\u2019?\n   16 |         for (long\
    \ &y: x)\n      |                       ^\n      |                       std::begin\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp4b65dpsw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmp4b65dpsw.cpp:16:23: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   16 |\
    \         for (long &y: x)\n      |                       ^\n      |         \
    \              std::end\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp4b65dpsw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  long result = 0;\n  for (long i = 0; i < x.size(); ++i) {\n    result +=\
    \ x[i] * pow(10, i);\n  }\n  std::vector<long> ans;\n  while (result > 0) {\n\
    \    ans.push_back(result % 10);\n    result /= 10;\n  }\n  sort(ans.begin(),\
    \ ans.end());\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmphimy3uub: /tmp/tmphimy3uub.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // using map to record all possible number without duplicate.\n    std::vector<std::pair<long,\
    \ long> > nums;\n    for(long i=0;i<x.size();i++) {\n        long digit = x[i]/10;\n\
    \        // the key must be unique here.\n        assert(std::find(nums.begin(),\
    \ nums.end(), {digit, x[i]}) == nums.end());\n        nums.emplace_back(digit,\
    \ x[i]);\n    }\n\n    // sort the unique number in increasing order\n    std::sort(nums.begin(),\
    \ nums.end(), [](std::pair<long, long> p1, std::pair<long, long> p2){return p1.first\
    \ < p2.first;});\n\n    std::vector<long> result(nums.size());\n    for(auto &p:\
    \ nums) {\n        long digit = p.first;\n        // all digits should be even\
    \ number.\n        assert(digit % 2 == 0);\n        result[nums.size() - p - 1]\
    \ = digit;\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0scnk1ns.cpp:2:\n/tmp/tmp0scnk1ns.cpp: In function\
    \ \u2018std::vector<long int> unique_digits(std::vector<long int>)\u2019:\n/tmp/tmp0scnk1ns.cpp:17:65:\
    \ error: no matching function for call to \u2018find(std::vector<std::pair<long\
    \ int, long int> >::iterator, std::vector<std::pair<long int, long int> >::iterator,\
    \ <brace-enclosed initializer list>)\u2019\n   17 |         assert(std::find(nums.begin(),\
    \ nums.end(), {digit, x[i]}) == nums.end());\n      |                        \
    \                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:48,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0scnk1ns.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/streambuf_iterator.h:373:5:\
    \ note: candidate: \u2018template<class _CharT2> typename __gnu_cxx::__enable_if<std::__is_char<_CharT2>::__value,\
    \ std::istreambuf_iterator<_CharT> >::__type std::find(std::istreambuf_iterator<_CharT>,\
    \ std::istreambuf_iterator<_CharT>, const _CharT2&)\u2019\n  373 |     find(istreambuf_iterator<_CharT>\
    \ __first,\n      |     ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/streambuf_iterator.h:373:5:\
    \ note:   template argument deduction/substitution failed:\nI"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::sort(x.begin(), x.end(), [](long a, long b)\n    {\n        return\
    \ a % 10 < b % 10;\n    });\n    std::vector<long> result;\n    long last;\n \
    \   for (auto it=x.begin(); it!=x.end(); ++it)\n    {\n        long digit = *it/10;\n\
    \        long last_digit = last % 10;\n        if (last_digit == digit)\n    \
    \        result.push_back(*it);\n        last = digit;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpxu1judjx: /tmp/tmpxu1judjx.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ret;\n    \n    for(long &x: x)\n    {\n        x =\
    \ (x%10)*10 + (x/10);\n        \n        int flag = 0;\n        for(long &y: ret)\n\
    \        {\n            if(y == x)\n            {\n                flag = 1;\n\
    \                break;\n            }\n        }\n        \n        if(flag ==\
    \ 0)\n        {\n            ret.push_back(x);\n        }\n    }\n    \n    return\
    \ ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpiv7mkek8: /tmp/tmpiv7mkek8.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    for(long &i : x){\n        int c = i;\n \
    \       for(int j=1;; j++){\n            c%=10;\n            if(c <= 0)\n    \
    \            break;\n            c /= 10;\n        }\n        if(c != 0)\n   \
    \         ans.push_back(c);\n    }\n    std::sort(ans.begin(),ans.end());\n  \
    \  ans.erase(std::unique(ans.begin(),ans.end()),ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_k3p9yqo: /tmp/tmp_k3p9yqo.cpp:30: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    if (x.size() == 0) return x;\n    std::vector<long> result{};\n    long\
    \ last_index{};\n    for (auto it = x.begin(); it != x.end(); it++) {\n      \
    \  last_index = *it;\n        // If all digits have an even index.\n        if\
    \ (last_index % 2 == 0) {\n            result.push_back(*it);\n        }\n   \
    \ }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_ap725jq: /tmp/tmp_ap725jq.cpp:27: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    assert(x.size() != 0);\n    std::vector<long> ret;\n    bool found =\
    \ false;\n    for (long i : x) {\n        found = found || i % 2 != 0;\n     \
    \   if (found) ret.push_back(i);\n    }\n    return ret;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpet4hbao3: /tmp/tmpet4hbao3.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res; \n    bool flag = true;\n    for (long &num :\
    \ x) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n       \
    \     flag = false;\n        } else {\n            res.push_back(digit);\n   \
    \     }\n    }\n    if (flag) {\n        std::sort(res.begin(), res.end());\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpl3gnxzmk: /tmp/tmpl3gnxzmk.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for(long i = x.size() - 1; i >= 0; i--){\n\
    \        long xx = x[i];\n        long cnt = 0;\n        while(i != 0 && xx !=\
    \ 0){\n            if(xx % 10 == 0){\n                xx /= 10;\n            \
    \    cnt++;\n            }\n            else{\n                xx = xx/10;\n \
    \               cnt++;\n            }\n            i--;\n        }\n        y.push_back(cnt);\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpv7bmeh3m: /tmp/tmpv7bmeh3m.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::sort(x.begin(), x.end(), std::greater<long>());\n    std::vector<long>\
    \ ret;\n    for (auto & i: x)\n        if (i & 1)\n            ret.push_back(i);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpas1frras: /tmp/tmpas1frras.cpp:21: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // code here\n    std::vector<long> ans;\n    for (long i:x){\n     \
    \   long temp = i;\n        while(temp != 0){\n            temp = temp/10;\n \
    \       }\n        // check if ans already contains i\n        if (std::find(ans.begin(),\
    \ ans.end(), i) == ans.end()){\n            ans.push_back(i);\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp5u7i510e: /tmp/tmp5u7i510e.cpp:28: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  assert(x.size() != 0);\n  \n  long ans = x.at(0);\n  for (auto i = 1; i\
    \ < x.size(); ++i) {\n    for (auto j = i + 1; j <x.size(); ++j) {\n      assert(x[j]\
    \ % 2 != 0);\n      if (x[j] > x[i] && x[j] % 2 == 0) {\n        ans = x[i];\n\
    \      }\n    }\n  }\n  std::vector<long> ans_list = {ans};\n  return ans_list;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmplwbwvbud: /tmp/tmplwbwvbud.cpp:17: std::vector<long int> unique_digits(std::vector<long\
    \ int>): Assertion `x[j] % 2 != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> s;\n    for(long &it: x)\n        std::find(s.begin(),\
    \ s.end(), it) != s.end()\n            ? s.erase(std::remove(s.begin(), s.end(),\
    \ it))\n            : s.push_back(it);\n    return s;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq1ph7fb3.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq1ph7fb3.cpp:15:22: error: third operand to the conditional\
    \ operator is of type \u2018void\u2019, but the second operand is neither a throw-expression\
    \ nor of type \u2018void\u2019\n   15 |             ? s.erase(std::remove(s.begin(),\
    \ s.end(), it))\n      |               ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> ans;\n\tstd::sort(x.begin(), x.end());\n\tlong last =\
    \ 1;\n\tlong flag = 0;\n\tlong i = 1;\n\tfor (long i : x) {\n\t\tif (i%2 == 1)\
    \ {\n\t\t\tlast = i;\n\t\t}\n\t\twhile (i%2 == 0) {\n\t\t\tflag = 1;\n\t\t\tans.push_back(last);\n\
    \t\t\ti/= 2;\n\t\t\tlast *= 2;\n\t\t}\n\t}\n\tif (flag) {\n\t\tans.push_back(last);\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp5a901b6y: /tmp/tmp5a901b6y.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> ans;\n    // loop through the vector, use 'i' to hold\
    \ the index while checking the digits\n    for (long i = 0; i < x.size(); ++i)\
    \ {\n        long sum = 0;\n        // check if each element has any even digits\n\
    \        if (x.at(i) % 2 == 0)\n            continue;\n        // add each digit\
    \ to sum\n        for (long j = 0; j <= i; ++j) {\n            sum += x.at(j);\n\
    \        }\n        // if sum is not even, add it to ans\n        if (sum % 2\
    \ != 0)\n            ans.push_back(x);\n        // reset sum\n        sum = 0;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomb5slgr.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpomb5slgr.cpp:25:28: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>&)\u2019\n  \
    \ 25 |             ans.push_back(x);\n      |                            ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpomb5slgr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> y;\n    for (long &a: x) {\n        y += (a / 10);\n\
    \    }\n    for (long &a: y) {\n        bool flag = true;\n        for (long &b:\
    \ y) {\n            if (a % 10 != b % 10) {\n                flag = false;\n \
    \               break;\n            }\n        }\n        if (flag) {\n      \
    \      a.push_back(0);\n        }\n    }\n    // printf(\"y size: %lld\\n\", y.size());\n\
    \    for (long &a: y) {\n        std::sort(a.begin(), a.end());\n    }\n    //\
    \ printf(\"y size: %lld\\n\", y.size());\n    for (long &a: y) {\n        std::set<long>\
    \ s;\n        for (long &b: a) {\n            s.insert(b);\n        }\n      \
    \  // printf(\"%lld %lld %lld \", a, b, s.size());\n        std::vector<long>\
    \ z;\n        std::set_difference(y.begin(), y.end(), s.begin(), s.end(), std::back_inserter(z));\n\
    \        // printf(\"%lld %lld %lld \", a, b, s.size());\n        std::sort(z.begin(),\
    \ z.end());\n        std::set_union(a.begin(), a.end(), z.begin(), z.end(), std::back_inserter(y));\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz1pswefd.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz1pswefd.cpp:14:11: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019\
    )\n   14 |         y += (a / 10);\n      |         ~~^~~~~~~~~~~\n/tmp/tmpz1pswefd.cpp:25:15:\
    \ error: request for member \u2018push_back\u2019 in \u2018a\u2019, which is of\
    \ non-class type \u2018long int\u2019\n   25 |             a.push_back(0);\n \
    \     |               ^~~~~~~~~\n/tmp/tmpz1pswefd.cpp:30:21: error: request for\
    \ member \u2018begin\u2019 in \u2018a\u2019, which is of non-class type \u2018\
    long int\u2019\n   30 |         std::sort(a.begin(), a.end());\n      |      \
    \               ^~~~~\n/tmp/tmpz1pswefd.cpp:30:32: error: request for member \u2018\
    end\u2019 in \u2018a\u2019, which is of non-class type \u2018long int\u2019\n\
    \   30 |         std::sort(a.begin(), a.end());\n      |                     \
    \           ^~~\n/tmp/tmpz1pswefd.cpp:35:23: error: \u2018begin\u2019 was not\
    \ declared in this scope; did you mean \u2018std::begin\u2019?\n   35 |      \
    \   for (long &b: a) {\n      |                       ^\n      |             \
    \          std::begin\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpz1pswefd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmpz1pswefd.cpp:35:23: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   35 |\
    \         for (long &b: a) {\n      |                       ^\n      |       \
    \                std::end\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpz1pswefd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n/tmp/tmpz1pswefd.cpp:43:26: error: request for member\
    \ \u2018begin\u2019 in \u2018a\u2019, which is of non-class type \u2018long int\u2019\
    \n   43 |         std::set_union(a.begin(), a."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::vector<long> v;\n    for(auto x:x)\
    \ {\n        while(x != 0 && !(x%10)) {\n            v.push_back(x%10);\n    \
    \        x /= 10;\n        }\n    }\n    sort(v.begin(),v.end());\n    return\
    \ v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpj1a_7h96: /tmp/tmpj1a_7h96.cpp:25: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // base case\n    if(x.size() <= 1) return x;\n    // base case\n   \
    \ long result = x[0];\n    for(size_t i = 1; i < x.size(); i++) {\n        long\
    \ mod = x % 10;\n        if(mod != 0) result = result * 10 + mod;\n        x /=\
    \ 10;\n    }\n    return std::vector<long>(result);\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp45ms8fbb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp45ms8fbb.cpp:17:22: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   17 |         long mod = x % 10;\n      |                    ~ ^ ~~\n     \
    \ |                    |   |\n      |                    |   int\n      |    \
    \                std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp45ms8fbb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp45ms8fbb.cpp:17:24:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   17 |         long mod = x % 10;\n    \
    \  |                        ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp45ms8fbb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    auto it = x.begin();\n    auto end = x.end();\n    long s = 0;\n    long\
    \ d = 1;\n    while (it != end && d <= 10) {\n        s = s * 10 + (*it);\n  \
    \      d += 1;\n        ++it;\n    }\n\n    std::vector<long> ans;\n    while\
    \ (it != end) {\n        if (s % d == 0) {\n            ans.push_back(*it);\n\
    \            s /= d;\n        }\n        ++it;\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpvn7gjpou: /tmp/tmpvn7gjpou.cpp:35: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    std::set<long> v;\n    for(long i: x)\n\
    \    {\n        if(i%2 == 0)\n        {\n            v.insert(i);\n        }\n\
    \    }\n    return v; \n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7gqex138.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7gqex138.cpp:21:12: error: could not convert \u2018v\u2019\
    \ from \u2018std::set<long int>\u2019 to \u2018std::vector<long int>\u2019\n \
    \  21 |     return v;\n      |            ^\n      |            |\n      |   \
    \         std::set<long int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\tstd::vector<long> ans;\n\tstd::unordered_set<long> seen;\n\t// Sort the\
    \ input.\n\tstd::sort(x.begin(), x.end());\n\t\n\tfor(long i=0;i<x.size();i++)\
    \ {\n\t\tlong num = (x[i]/10)%10;\n\t\twhile(!seen.count(num)) {\n\t\t\tans.push_back(num);\n\
    \t\t\tseen.insert(num);\n\t\t\tnum =(num/10)%10;\n\t\t}\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp1zp5ieq7: /tmp/tmp1zp5ieq7.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::set<long> s;\n  for (long i : x) {\n    s.insert(i);\n  }\n  std::vector<long>\
    \ ans;\n  for (long i : s) {\n    int len = std::to_string(i).size();\n    if\
    \ (len > 1) {\n      for (int j = 0; j < len; j++) {\n        if (j % 2 != 0)\
    \ {\n          ans.push_back(i);\n          break;\n        }\n      }\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpu6u0y9mk: /tmp/tmpu6u0y9mk.cpp:32: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // initialize result\n    std::vector<long> result(x.size());\n    //\
    \ loop through every elements\n    for (size_t i = 0; i < x.size(); i++) {\n \
    \       // check all elements that have not even digits\n        for (size_t j\
    \ = i + 1; j < x.size(); j++) {\n            // if there is a pair of equal digits,\n\
    \            // swap them and recheck the other elements\n            if (x[i]\
    \ % x[j] == 0) {\n                long temp = x[i];\n                x[i] = x[j];\n\
    \                x[j] = temp;\n            }\n        }\n        // add i to the\
    \ result\n        result[i] = x[i];\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpp3rzxa16: /tmp/tmpp3rzxa16.cpp:33: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  // sort x in increasing order\n  sort(x.begin(), x.end());\n  // sort x\
    \ in decreasing order\n  std::reverse(x.begin(), x.end());\n  \n  // create result\
    \ list\n  std::vector<long> results;\n\n  // traverse x\n  for (int i = 0; i <\
    \ x.size(); i++) {\n    // traverse x-1 elements\n    for (int j = i; j < x.size();\
    \ j++) {\n      // if i-j is even, add it to results \n      if (x[i]%2 == 0 &&\
    \ x[j]%2 != 0) {\n        results.push_back(x[i] - x[j]);\n        break;\n  \
    \    }\n    }\n  }\n\n  // sort result in increasing order\n  std::sort(results.begin(),\
    \ results.end());\n  return results;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp_mnmvp0u: /tmp/tmp_mnmvp0u.cpp:38: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    int sz = x.size();\n    std::vector<long> y(sz);\n    int *p = new int[sz];\n\
    \    // Create a set of all digits.\n    for (int i = 0; i < sz; i++) {\n    \
    \    p[i] = x[i];\n    }\n\n    for (int i = 1; i < sz; i++) {\n        int u\
    \ = i;\n        while (true) {\n            int j = i;\n            while (j >\
    \ 0 && (p[j-1] > p[j])) {\n                j--;\n            }\n            if\
    \ (j == 0) {\n                break;\n            }\n            p[u] = p[j];\n\
    \            u = j;\n        }\n        y[i] = u;\n    }\n\n    for (int i = 0;\
    \ i < sz; i++) {\n        std::swap(x[i], x[y[i]]);\n    }\n    delete[] p;\n\n\
    \    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long evenDigits = 0;\n    for (auto e : x)\n    {\n        long temp\
    \ = ((e % 10) % 2);\n        if (temp == 0)\n        {\n            evenDigits++;\n\
    \        }\n        else\n        {\n            evenDigits = 0;\n        }\n\
    \    }\n\n    std::vector<long> result;\n    result.push_back(x);\n    for (auto\
    \ e : x)\n    {\n        long temp = ((e % 10) % 2);\n        if (temp == 0)\n\
    \        {\n            evenDigits++;\n            result.push_back(e);\n    \
    \    }\n    }\n\n    for (auto e : result)\n    {\n        if (evenDigits == 0)\n\
    \        {\n            result.erase(result.begin() + e);\n        }\n    }\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbwxzfma.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxbwxzfma.cpp:27:23: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>&)\u2019\n  \
    \ 27 |     result.push_back(x);\n      |                       ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxbwxzfma.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    std::vector<long> res;\n    long temp;\n    long count = 0;\n    for(auto\
    \ i : x) {\n        temp=i;\n        for(;temp;temp/=10)\n            count++;\n\
    \        if(count%2==0)\n            res=res+temp;\n        count=0;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_v7y4p3.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl_v7y4p3.cpp:20:20: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019\
    )\n   20 |             res=res+temp;\n      |                 ~~~^~~~~\n     \
    \ |                 |   |\n      |                 |   long int\n      |     \
    \            std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl_v7y4p3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpl_v7y4p3.cpp:20:21:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   20 |             res=res+temp;\n      |       \
    \              ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_trai"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Store all the encountered digits in a set.\n    std::set<long> seen_digits;\n\
    \    std::vector<long> ans;\n    for (long &i : x) {\n        while(!seen_digits.count(i))\
    \ {\n            seen_digits.insert(i);\n            ans.push_back(i);\n     \
    \       i += 9;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({15, 33,\
    \ 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    // return x;\n    int size = x.size();\n\
    \    int mid = size / 2;\n    int odd_count = 0;\n    int even_count = 0;\n  \
    \  for (int i = 0; i < mid; i++) {\n        if (x[i] % 2 == 0) {\n           \
    \ even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n\
    \    std::vector<long> res;\n    for (int i = 0; i < size; i++) {\n        if\
    \ (x[i] % 2 == 0 && even_count < odd_count) {\n            res.push_back(x[i]);\n\
    \            even_count++;\n        } else if (x[i] % 2 == 0 && odd_count < even_count)\
    \ {\n            odd_count++;\n        } else {\n            if (even_count ==\
    \ odd_count) {\n                res.push_back(x[i]);\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({15, 33, 1422, 1}))) == (std::vector<long>({1,\
    \ 15, 33})));\n    assert(candidate((std::vector<long>({152, 323, 1422, 10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2w5ku35w: /tmp/tmp2w5ku35w.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::unordered_map<long, bool> cache;\n  std::vector<long> ans;\n  for\
    \ (long i : x) {\n    if (!cache.count(i)) {\n      ans.push_back(i);\n      cache[i\
    \ - '0'] = true;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmphvj2tte2: /tmp/tmphvj2tte2.cpp:24: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    \n    // If x is empty or only has one element.\n    if (x.size() ==\
    \ 0 || x.size() == 1) {\n        return x;\n    }\n\n    // Create a map that\
    \ stores elements as key and its count as value\n    std::map<long, int> digitCount;\n\
    \    \n    // Count how many times each element appears in x vector\n    for (auto\
    \ i : x) {\n        auto it = digitCount.find(i);\n        if (it == digitCount.end())\
    \ {\n            digitCount[i] = 1;\n        } else {\n            digitCount[i]++;\n\
    \        }\n    }\n\n    // Create a list to store the unique elements\n    std::vector<long>\
    \ result;\n    \n    // Traverse the map, if the current value is 1, then store\
    \ it in result list.\n    for (auto i : digitCount) {\n        if (i.second ==\
    \ 1) {\n            result.push_back(i.first);\n        }\n    }\n\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp2ghmc2m7: /tmp/tmp2ghmc2m7.cpp:45: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Write your code here\n    long long result = 0;\n    for(auto &i:\
    \ x) {\n        if( i % 2 == 0) {\n            result += i;\n        }\n    }\n\
    \    std::vector<long> ans;\n    for(auto &i: x) {\n        if( i % 2 != 0) {\n\
    \            ans.push_back(i);\n        }\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpfwtz6ft7: /tmp/tmpfwtz6ft7.cpp:31: int main(): Assertion `candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n  std::vector<long> result;\n  std::set<long> set;\n  for(auto i : x) set.insert(i);\n\
    \  for(auto i : set) if(!x.count(i)) result.push_back(i);\n  return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphu_1guky.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphu_1guky.cpp:15:27: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   15 |   for(auto i : set)\
    \ if(!x.count(i)) result.push_back(i);\n      |                           ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n\t// write your code here\n\tstd::sort(x.begin(), x.end());\n\tstd::unordered_set<long>\
    \ s;\n\tfor(long i=0;i<x.size();i++) {\n\t\tif(s.find(x[i]) == s.end()) {\n\t\t\
    \ts.insert(x[i]);\n\t\t}\n\t}\n\t\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwo6b0csg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwo6b0csg.cpp:21:9: error: could not convert \u2018s\u2019\
    \ from \u2018std::unordered_set<long int>\u2019 to \u2018std::vector<long int>\u2019\
    \n   21 |  return s;\n      |         ^\n      |         |\n      |         std::unordered_set<long\
    \ int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long size = x.size();\n    std::sort(x.begin(), x.end());\n    std::vector<long>\
    \ ans;\n    long count = 0;\n    for (int i = 0; i < size; i++) {\n        while\
    \ (count <= 10 && x[i] == (count % 10)) {\n            count += 1;\n        }\n\
    \        if (count > 10) {\n            ans.push_back(x[i]);\n            count\
    \ = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpmq2kesl8: /tmp/tmpmq2kesl8.cpp:29: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    // vector<int> v={1,2,1,4,5};\n    std::vector<long>\
    \ retv;\n    // for (int i=1; i<x.size(); i++) {\n    //     if (x[i]%2==0) \n\
    \    //         for (int j=i;j<x.size();j++)\n    //             if (x[j]/2 ==\
    \ x[i]/2) {\n    //                 retv.push_back(x[j]);\n    //            \
    \     break;\n    //             }\n    // }\n    int size=x.size();\n    for\
    \ (int i=0; i<size; i++) {\n        // cout<<x[i]<<\" \";\n        // cout<<endl;\n\
    \        if (x[i]%2==0) {\n            for (int j=i;j<size-1;j++) {\n        \
    \        // cout<<x[j]<<\" \";\n                // cout<<endl;\n             \
    \   if (x[j]%2==0 && x[j+1]%2==0 && x[i]/2 != x[j+1]/2) {\n                  \
    \  retv.push_back(x[j]);\n                    break;\n                }\n    \
    \        }\n        }\n    }\n    return retv;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpi91syotw: /tmp/tmpi91syotw.cpp:42: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // write your code here\n    std::vector<long> y;\n    for(long i : x)\
    \ {\n        if(i % 2 == 0)\n            y.push_back(i);\n    }\n    std::sort(y.begin(),y.end());\n\
    \    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpp94bk10_: /tmp/tmpp94bk10_.cpp:23: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // Your code here\n    std::vector<long> v; \n    for (long i = 0; i\
    \ < x.size(); i++){\n       for (long j = i+1; j < x.size(); j++){\n         \
    \  if(x[i] % 2 == 0 && x[j] % 2 != 0){\n               v.push_back(x[i]);\n  \
    \             v.push_back(x[j]);\n           }\n       }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpzpjxfsvm: /tmp/tmpzpjxfsvm.cpp:26: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    \n    // sort the array (this will be done in place), \n    // but first\
    \ clear the vector.\n    x.clear();\n\n    // find all even digits\n    for (auto\
    \ i : x) {\n        if (i%2==0) {\n            x.push_back(i);\n        }\n  \
    \  }\n    // sort the vector\n    std::sort(x.begin(), x.end());\n\n    // now\
    \ find all unique digits except the even digits\n    for (auto i : x) {\n    \
    \    while (i%2==0) {\n            x.erase(x.begin());\n        }\n    }\n   \
    \ return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmp0wla7d9b: /tmp/tmp0wla7d9b.cpp:36: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    // code here\n    std::set<long> v;\n    for (long i = 0; i < x.size();\
    \ i++) {\n        if (x.at(i) % 2 == 0) {\n            v.insert(x.at(i));\n  \
    \      }\n    }\n    return std::vector(v);\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({15, 33, 1422, 1})))\
    \ == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe0gsd75f.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe0gsd75f.cpp:19:23: error: missing template arguments\
    \ before \u2018(\u2019 token\n   19 |     return std::vector(v);\n      |    \
    \                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    // >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152,\
    \ 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x)\
    \ {\n    long long temp;\n    std::vector<long> ans;\n    for(long long i=0;i<x.size();i++){\n\
    \        temp=x[i];\n        if(temp%10==0){\n            ans.push_back(temp);\n\
    \        }\n    }\n    if(ans.size()==0)\n    {\n        return ans;\n    }\n\
    \    for(long long i=0;i<ans.size();i++){\n        for(long long j=i+1;j<ans.size();j++){\n\
    \            if((ans[i]*10)+ans[j]<(ans[i]*10)+ans[j+1])\n                ans[j+1]=(ans[i]*10)+ans[j];\n\
    \        }\n    }\n    for(long long i=0;i<ans.size();i++){\n        for(long\
    \ long j=i+1;j<ans.size();j++){\n            if((ans[i]*10)+ans[j]>ans[i]*10+ans[j])\n\
    \                ans[j+1]=(ans[i]*10)+ans[j];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33})));\n    assert(candidate((std::vector<long>({152,\
    \ 323, 1422, 10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({12345,\
    \ 2033, 111, 151}))) == (std::vector<long>({111, 151})));\n    assert(candidate((std::vector<long>({135,\
    \ 103, 31}))) == (std::vector<long>({31, 135})));\n}\n"
  stdout: ''
  stderr: "tmpzqn3u0cm: /tmp/tmpzqn3u0cm.cpp:40: int main(): Assertion `candidate((std::vector<long>({15,\
    \ 33, 1422, 1}))) == (std::vector<long>({1, 15, 33}))' failed.\n"
  exit_code: -6
  status: Exception
