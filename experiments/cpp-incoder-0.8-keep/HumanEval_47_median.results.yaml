name: HumanEval_47_median
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto it\
    \ = l.begin();\n    float mid = (*it) + 1;\n    float count = 0;\n    for (; it\
    \ != l.end(); ++it) {\n        count += (*it);\n        if (count > mid)\n   \
    \         mid = count;\n    }\n    return mid;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpvauaaqv6: /tmp/tmpvauaaqv6.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float median\
    \ = l.front();\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < median)\
    \ {\n            median = l.front();\n        }\n        else if (l[i] > median)\
    \ {\n            median = l.back();\n        }\n        else {\n            break;\n\
    \        }\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpfaidiltq: /tmp/tmpfaidiltq.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ the vector\n    sort(l.begin(), l.end());\n    // Return the middle index\n\
    \    return l[l.size()/2];\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp_cw_wehf: /tmp/tmp_cw_wehf.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long size\
    \ = l.size();\n    if (size == 0)\n        return 0;\n    std::sort(l.begin(),\
    \ l.end());\n    float mid = (size * 1.0) / 2.0;\n    return l[(int)((size * 1.0)\
    \ / 2.0)];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmptui621um: /tmp/tmptui621um.cpp:19: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = floor(l.size()/2);\n    if(l.size()%2 == 1) mid++;\n    if(mid>l.size()/2)\
    \ mid = mid-1;\n    return l[mid];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpfdxogaxl: /tmp/tmpfdxogaxl.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    long long ll = 0;\n    float f = 0.0;\n    for (long long i = 0;\
    \ i < l.size(); i++) ll += l[i];\n    f = ll * (ll + 1) / 2;\n    return f;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpi0i1lf_e: /tmp/tmpi0i1lf_e.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float low\
    \ = 0;\n    float high = l.back();\n    long mid = 0;\n    while(low < high) {\n\
    \        mid = (low+high)/2;\n        if(l[mid] > mid) {\n            low = mid\
    \ + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return\
    \ low;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprca28m0x: /tmp/tmprca28m0x.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tif (l.size()\
    \ == 0)\n\t\tthrow std::out_of_range(\"List is empty\");\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint mid = l.size() / 2;\n\tif (l.size() % 2 == 0)\n\t\treturn (l[mid]\
    \ + l[mid-1]) / 2;\n\telse\n\t\treturn l[mid];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpswv75uda: /tmp/tmpswv75uda.cpp:23: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 5}))) == (5.5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long l\
    \ = std::min(l.size(), l.size() / 2);\n    long mid = l.size() / 2;\n    long\
    \ count = 0;\n    float res = 0.0;\n\n    for (long i = 0; i < l; i++) {\n   \
    \     if (i == mid)\n            mid++;\n        count += 1;\n        if (count\
    \ > 2) {\n            res = l[mid];\n            break;\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp51e65m34.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp51e65m34.cpp:9:10: error: declaration of \u2018long int l\u2019 shadows\
    \ a parameter\n    9 |     long l = std::min(l.size(), l.size() / 2);\n      |\
    \          ^\n/tmp/tmp51e65m34.cpp:9:25: error: request for member \u2018size\u2019\
    \ in \u2018l\u2019, which is of non-class type \u2018long int\u2019\n    9 | \
    \    long l = std::min(l.size(), l.size() / 2);\n      |                     \
    \    ^~~~\n/tmp/tmp51e65m34.cpp:9:35: error: request for member \u2018size\u2019\
    \ in \u2018l\u2019, which is of non-class type \u2018long int\u2019\n    9 | \
    \    long l = std::min(l.size(), l.size() / 2);\n      |                     \
    \              ^~~~\n/tmp/tmp51e65m34.cpp:10:18: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long int\u2019\n\
    \   10 |     long mid = l.size() / 2;\n      |                  ^~~~\n/tmp/tmp51e65m34.cpp:19:24:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 19 |             res = l[mid];\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size()/2, l.end());\n    return *l.begin();\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpglhixrrr: /tmp/tmpglhixrrr.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0)\n        return (l.at(l.size() / 2) -\
    \ l.at(l.size() / 2 - 1)) / 2.0;\n    else\n        return (l.at(l.size() / 2))\
    \ / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp45ck_g__: /tmp/tmp45ck_g__.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    long int k = n/2;\n    long int m = k == 0 ? 0 : (n-1) / k;\n\
    \    while (k != 0) {\n        if (l[k] < l[m]) {\n            swap(l[k], l[m]);\n\
    \        }\n        k--;\n        m++;\n    }\n    return l[m];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1qynxnpm.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp1qynxnpm.cpp:14:13: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   14 |             swap(l[k], l[m]);\n      |             ^~~~\n/tmp/tmp1qynxnpm.cpp:14:13:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp1qynxnpm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1qynxnpm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto median\
    \ = l.begin();\n    std::nth_element(l.begin(), l.begin() + l.size() / 2, l.end());\n\
    \    auto middle = l.begin() + l.size() / 2;\n    std::nth_element(middle, l.end(),\
    \ median);\n    return *median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = static_cast<long>(l.size()/2);\n    if(l.size()%2) return l[mid];\n    return\
    \ ((l[mid] + l[mid-1])/2); \n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp6vr585di: /tmp/tmp6vr585di.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  if (l.size()\
    \ == 0)\n    throw std::runtime_error(\"median requires at least one element\"\
    );\n  long mid = l.size() / 2;\n  std::vector<long> midlist;\n  midlist.reserve(mid);\n\
    \  for (int i = 0; i < mid; ++i)\n    midlist.push_back(l.at(i));\n  std::nth_element(midlist.begin(),\
    \ midlist.begin() + mid, midlist.end());\n  midlist.erase(midlist.begin() + mid,\
    \ midlist.end());\n  return static_cast<float>(midlist.at(0));\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdlfr0tl2: /tmp/tmpdlfr0tl2.cpp:23: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ medianVal = 0;\n    \n    for(long i = 0; i < l.size(); i++) {\n        if(l[i]\
    \ < medianVal) {\n            medianVal = l[i];\n        }\n    }\n    \n    return\
    \ medianVal;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdompu0lo: /tmp/tmpdompu0lo.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float\
    \ m = (l[n / 2] + l[n / 2 - 1]) / 2;\n    return m;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbehr_y2z: /tmp/tmpbehr_y2z.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float x=0,\
    \ y=0;\n    std::sort(l.begin(), l.end());\n    int length = l.size();\n    float\
    \ sum = 0;\n    for (int i = 0; i < length / 2; i++) {\n        sum += l[i];\n\
    \        x = sum / 2;\n    }\n    for (int i = length / 2; i < length; i++) {\n\
    \        sum += l[i];\n        y = sum / 2;\n    }\n    return y;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpm46kv1dd: /tmp/tmpm46kv1dd.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ middle = l.size() / 2;\n    long long largest = middle; // largest is just half\
    \ the length\n    long long smaller = middle - 1; // smaller is just one less\
    \ than the length\n    if (l.size() % 2 == 1) {\n        std::swap(smaller, largest);\n\
    \    }\n    float med = 0.f;\n    if (largest >= 1 && smallest <= l.size() - 1)\
    \ {\n        float largest1 = l[largest];\n        float smaller1 = l[smaller];\n\
    \        if (largest1 < smaller1)\n            std::swap(largest1, smaller1);\n\
    \        float x = (largest1 + smaller1) / 2;\n        float y = (largest + smaller)\
    \ / 2;\n        float z = (largest1 + smaller1 + largest) / 4;\n        float\
    \ w = (largest + smaller1 + largest1 + smaller) / 8;\n        float med1 = median([y,\
    \ x, z, w]);\n        float med2 = median([z, w, x, y, z]);\n        float med3\
    \ = median([x, z, y, w, x]);\n        float med4 = median([y, z, x, z, w]);\n\
    \        float med5 = median([z, w, z, y, x]);\n        float med6 = median([w,\
    \ z, x, z, y]);\n        float med7 = median([z, y, x, z, w]);\n        float\
    \ med8 = median([y, x, z, y, w]);\n        float med9 = median([z, w, y, x, z]);\n\
    \        float med10 = median([w, z, y, x, w]);\n        float med11 = median([z,\
    \ y, x, z, y]);\n        float med12 = median([y, x, z, y, w]);\n        float\
    \ med13 = median([z, w, y, z, x]);\n        float med14 = median([w, z, y, z,\
    \ w]);\n        float med15 = median([z, y, z, y, w]);\n        float med16 =\
    \ median([y, z, z, y, x]);\n        float med17 = median([z, w, z, z, y]);\n \
    \       float med18 = median([w, z, z, z, w]);\n        float med19 = median([z,\
    \ y, z, z, x]);\n        float med20 = median([y, z, z, y, x]);\n        float\
    \ med21 = median([z, w, y, z, y]);\n        float med22 = median([w, z, y, z,\
    \ w]);\n        float med23 = median([z, y, z, y, w]);\n        float med24 =\
    \ median([y, z, z, y, x]);\n        float med25 = median([z, w, y, z, z]);\n \
    \       float \n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8m5wo1uo.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp8m5wo1uo.cpp:16:25: error: \u2018smallest\u2019 was not declared in\
    \ this scope; did you mean \u2018smaller\u2019?\n   16 |     if (largest >= 1\
    \ && smallest <= l.size() - 1) {\n      |                         ^~~~~~~~\n \
    \     |                         smaller\n/tmp/tmp8m5wo1uo.cpp: In lambda function:\n\
    /tmp/tmp8m5wo1uo.cpp:25:41: error: expected \u2018{\u2019 before \u2018)\u2019\
    \ token\n   25 |         float med1 = median([y, x, z, w]);\n      |         \
    \                                ^\n/tmp/tmp8m5wo1uo.cpp: In function \u2018float\
    \ median(std::vector<long int>)\u2019:\n/tmp/tmp8m5wo1uo.cpp:25:41: error: could\
    \ not convert \u2018<lambda closure object>median(std::vector<long int>)::<lambda()>{y,\
    \ x, z, w}\u2019 from \u2018median(std::vector<long int>)::<lambda()>\u2019 to\
    \ \u2018std::vector<long int>\u2019\n/tmp/tmp8m5wo1uo.cpp:26:42: warning: already\
    \ captured \u2018z\u2019 in lambda expression\n   26 |         float med2 = median([z,\
    \ w, x, y, z]);\n      |                                          ^\n/tmp/tmp8m5wo1uo.cpp:\
    \ In lambda function:\n/tmp/tmp8m5wo1uo.cpp:26:44: error: expected \u2018{\u2019\
    \ before \u2018)\u2019 token\n   26 |         float med2 = median([z, w, x, y,\
    \ z]);\n      |                                            ^\n/tmp/tmp8m5wo1uo.cpp:\
    \ In function \u2018float median(std::vector<long int>)\u2019:\n/tmp/tmp8m5wo1uo.cpp:26:44:\
    \ error: could not convert \u2018<lambda closure object>median(std::vector<long\
    \ int>)::<lambda()>{z, w, x, y}\u2019 from \u2018median(std::vector<long int>)::<lambda()>\u2019\
    \ to \u2018std::vector<long int>\u2019\n/tmp/tmp8m5wo1uo.cpp:27:42: warning: already\
    \ captured \u2018x\u2019 in lambda expression\n   27 |         float med3 = median([x,\
    \ z, y, w, x]);\n      |                                          ^\n/tmp/tmp8m5wo1uo.cpp:\
    \ In lambda function:\n/tmp/tmp8m5wo1uo.cpp:27:44: error: expected \u2018{\u2019\
    \ before \u2018)\u2019 token\n   27 |         float med3 = median([x, z, y, w,\
    \ x]);\n      |                                            ^\n/tmp/tmp8m5wo1uo.cpp:\
    \ In function \u2018float median(std::vector<long int>)\u2019:\n/tmp/tmp8m5wo1uo.cpp:27:44:\
    \ error: could not convert \u2018<lambda closure object>median(std::vect"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int size\
    \ = l.size();\n    float mid = size / 2.0f;\n    // Sort list\n    std::sort(l.begin(),\
    \ l.end());\n    if (size % 2 == 1) {\n        return (l[mid] + l[mid-1]) / 2.f;\n\
    \    } else {\n        return l[mid];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmptfu6tu5o: /tmp/tmptfu6tu5o.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ > 0);\n  long n = 0;\n  for (auto& x : l)\n    n += x;\n  return float(n) /\
    \ l.size();\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkzqbatrr: /tmp/tmpkzqbatrr.cpp:18: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size()/2, l.end());\n    float median = (l.size() % 2 == 0) ?\
    \ (l[l.size()/2-1] + l[l.size()/2]) / 2.0f : l[l.size()/2];\n    return median;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7i2yugtz: /tmp/tmp7i2yugtz.cpp:16: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Your\
    \ code goes here\n    long long a = (l[0]+l[l.size()-1])/2;\n    for(long i=0;i<l.size();i++)\n\
    \    {\n        if(l[i]<a)\n        {\n            a = l[i];\n        }\n    }\n\
    \    return a;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyewxzmr0: /tmp/tmpyewxzmr0.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0)\n        return 0;\n    long mid = l.size() / 2;\n    std::vector<long>\
    \ l1 = l.begin() + mid, l2 = l.begin() + mid + 1;\n    if (l2 == l.end())\n  \
    \      return l[0];\n    if (l1[1] == l2[0])\n        return 0.5 * (l1[0] + l2[0]);\n\
    \    if (l1[l1.size() - 1] < l2[0])\n        return median(l1);\n    return median(l2);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9z7kxeml.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp9z7kxeml.cpp:12:38: error: conversion from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to non-scalar type \u2018std::vector<long\
    \ int>\u2019 requested\n   12 |     std::vector<long> l1 = l.begin() + mid, l2\
    \ = l.begin() + mid + 1;\n      |                            ~~~~~~~~~~^~~~~\n\
    /tmp/tmp9z7kxeml.cpp:12:66: error: conversion from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to non-scalar type \u2018std::vector<long\
    \ int>\u2019 requested\n   12 |     std::vector<long> l1 = l.begin() + mid, l2\
    \ = l.begin() + mid + 1;\n      |                                            \
    \      ~~~~~~~~~~~~~~~~^~~\n/tmp/tmp9z7kxeml.cpp:13:12: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   13 |     if (l2 == l.end())\n    \
    \  |         ~~ ^~ ~~~~~~~\n      |         |          |\n      |         |  \
    \        std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n      |         std::vector<long int>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9z7kxeml.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:886:5:\
    \ note: candidate: \u2018te"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long low\
    \ = 0;\n    long high = l.size()-1;\n    float mid = l[low];\n    if(l.size()\
    \ == 0) return mid;\n    while(low < high) {\n        // mid = ((low+high)/2)\n\
    \        if(l[low] > l[high]) {\n            float mid = ((low+high)/2);\n   \
    \         low = mid+1;\n        }\n        else if(l[low] < l[high]) {\n     \
    \       float mid = ((low+high)/2);\n            high = mid-1;\n        }\n  \
    \      else {\n            low = low+1;\n            high = high-1;\n        }\n\
    \        // mid = l[low]\n        mid = (l[low]+l[high])/2.0;\n    }\n    return\
    \ mid;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpf2g1qt8i: /tmp/tmpf2g1qt8i.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n        long\
    \ n = (l.size());\n        assert(n>0);\n        long half = n/2;\n        if(n\
    \ < 3) return l[0];\n        if(n < 5) return l[n/2] + l[n/2+1];\n        float\
    \ mid = (l[n/2+1] + l[n/2-1])/2;\n        return (l[n/2-1] + half) * (mid+1);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphodv6zm8: /tmp/tmphodv6zm8.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // If list\
    \ l is empty, return 0.\n    if (l.size() == 0) {\n        return 0;\n    }\n\
    \    // Sort list l with qsort algorithm from C standard\n    qsort (l.begin(),\
    \ l.end(), sizeof(long), long_cmp);\n    // If all elements are equal, return\
    \ 0.\n    if (l[0] == l[1]) {\n        return 0;\n    }\n    // Return median\
    \ (middle element) of list l.\n    return (l[l.size()/2]);\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvn2crq60.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpvn2crq60.cpp:14:46: error: \u2018long_cmp\u2019 was not declared in\
    \ this scope; did you mean \u2018longjmp\u2019?\n   14 |     qsort (l.begin(),\
    \ l.end(), sizeof(long), long_cmp);\n      |                                 \
    \             ^~~~~~~~\n      |                                              longjmp\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    sort(l.begin(), l.end());\n    float s = 0.0f;\n    long mid\
    \ = n / 2;\n    if (n % 2 == 0) {\n        mid = n - mid;\n        s = l[mid];\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9gijqhif: /tmp/tmp9gijqhif.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for (long i=mid; i>0; --i)\
    \ if (l[i] < median) median = l[i];\n    return median;\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpo40sy_m4: /tmp/tmpo40sy_m4.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 1) {\n        l.insert(l.begin(), 0);\n \
    \   }\n    if (l.size() == 2) {\n        return l[0];\n    }\n    // middle point\
    \ of data\n    int mid = (l.size() - 1) / 2;\n    float midVal = median(l);\n\
    \    if (midVal <= l[mid]) {\n        return midVal;\n    }\n    return l[mid];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ l1 = l.size();\n    long long mid = l1 / 2;\n    if (l1 % 2 == 0) {\n      \
    \  return ((l[mid-1] + l[mid]) / 2.0);\n    } else {\n        return ((l[mid-1]\
    \ + l[mid]) / 2.0);\n    }\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8_9qiphh: /tmp/tmp8_9qiphh.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n    float med\
    \ = l[mid];\n    for (long long i = 1; i < mid; i++)\n        med = std::max(med,\
    \ l[i]);\n    return med;\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4nn1i4k.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpf4nn1i4k.cpp:14:33: error: no matching function for call to \u2018\
    max(float&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   14 |         med = std::max(med, l[i]);\n      |                        \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf4nn1i4k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf4nn1i4k.cpp:14:33:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   14 |         med = std::max(med,\
    \ l[i]);\n      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    \n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpz8r40lph: /tmp/tmpz8r40lph.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ != 0);\n  std::nth_element(l.begin(), l.begin() + l.size() / 2, l.end());\n\
    \  return *std::max_element(l.begin(), l.begin() + l.size() / 2);\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5y1vfh81: /tmp/tmp5y1vfh81.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Write\
    \ your code in Python 2.7.\n  assert(l.size() > 0);\n  long mid = l.size() / 2;\n\
    \  if (l.size() == 1) {\n    return l[0];\n  }\n  if (l.size() == 2) {\n    if\
    \ (l[mid] > l[mid + 1]) {\n      return l[mid];\n    } else {\n      return l[mid\
    \ + 1];\n    }\n  }\n  float res = l[mid];\n  for (long i = mid + 1; i < l.size();\
    \ ++i) {\n    if (l[i] < res) {\n      res = l[i];\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpeg_wo99q: /tmp/tmpeg_wo99q.cpp:32: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long n =\
    \ l.size();\n  if (n % 2)\n    return std::nth_element(l.begin(), l.begin() +\
    \ n / 2, l.end()) -\n           l.begin() +\n           n / 2;\n  else\n    return\
    \ std::nth_element(l.begin(), l.begin() + n / 2, l.end());\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpn5qblng1.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpn5qblng1.cpp:11:68: error: no match for \u2018operator-\u2019 (operand\
    \ types are \u2018void\u2019 and \u2018std::vector<long int>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   11 |     return std::nth_element(l.begin(), l.begin() + n / 2, l.end())\
    \ -\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^\n      |                            |\n      |                           \
    \ void\n   12 |            l.begin() +\n      |            ~~~~~~~~~         \
    \                                       \n      |                   |\n      |\
    \                   std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpn5qblng1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:977:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  977 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    l.sort(std::greater<long>());\n\
    \    float mid = l[l.size()/2]; //Sort list in ascending order\n    return mid;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp01a3e0ac.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp01a3e0ac.cpp:9:7: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018sort\u2019\n    9 |     l.sort(std::greater<long>());\n\
    \      |       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long size\
    \ = l.size();\n    // Sort list.\n    std::sort(l.begin(), l.end());\n\n    //\
    \ If size is even, return middle element.\n    if ((size % 2) == 0)\n        return\
    \ l[(size / 2)];\n\n    // If size is odd, return average of middle 2 elements.\n\
    \    float mid = l[(size / 2)];\n    return (mid + l[(size / 2) - 1]) / 2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplxkf8xfc: /tmp/tmplxkf8xfc.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size()/2, l.end());\n    long median = (l[l.size()/2-1] + l[l.size()/2])/2;\n\
    \    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpxp1ai5ij: /tmp/tmpxp1ai5ij.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tsort(l.begin(),l.end());\n\
    \tlong n1=l.size()/2;\n\tif(l.size()%2==0) return l[n1];\n\treturn ((l[n1] + l[n1-1])/2);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpq3hsk244: /tmp/tmpq3hsk244.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long a=0,\
    \ b=l.size()-1;\n    float m = (float(a+b)/2.0);\n    long m1 = l, m2 = l;\n \
    \   while (m1 > 0 || m2 > 0) // while(m1>0 || m2>0)\n    {\n        if(m1 < 0)\
    \ // m1<0\n        {\n            std::swap(m1, m2);\n            std::swap(a,\
    \ b);\n        }\n        if(m2 < 0)\n        {\n            std::swap(m1, m2);\n\
    \            std::swap(a, b);\n        }\n        if(m1 < m2) {\n            long\
    \ c = m1;\n            m1 = m2;\n            m2 = c;\n        }\n        if(m1\
    \ >  m2)\n        {\n            long c = m1;\n            m1 = m2;\n        \
    \    m2 = c;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgmh5g6u.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpsgmh5g6u.cpp:11:15: error: cannot convert \u2018std::vector<long int>\u2019\
    \ to \u2018long int\u2019 in initialization\n   11 |     long m1 = l, m2 = l;\n\
    \      |               ^\n      |               |\n      |               std::vector<long\
    \ int>\n/tmp/tmpsgmh5g6u.cpp:11:23: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   11 |     long m1 =\
    \ l, m2 = l;\n      |                       ^\n      |                       |\n\
    \      |                       std::vector<long int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Find\
    \ median by sorting the list\n    std::sort(l.begin(), l.end());\n    long mid\
    \ = l.size() / 2;\n    long l = l[mid];\n    return l;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxl6hrih3.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpxl6hrih3.cpp:12:10: error: declaration of \u2018long int l\u2019 shadows\
    \ a parameter\n   12 |     long l = l[mid];\n      |          ^\n/tmp/tmpxl6hrih3.cpp:12:19:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 12 |     long l = l[mid];\n      |                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int len\
    \ = l.size();\n    if (len % 2 == 0)\n        return median(l, 0, len / 2);\n\
    \    return median(l, len / 2, len - 1);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfq6b5_l8.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpfq6b5_l8.cpp:11:36: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   11 |         return median(l, 0, len\
    \ / 2);\n      |                                    ^\n/tmp/tmpfq6b5_l8.cpp:8:7:\
    \ note: declared here\n    8 | float median(std::vector<long> l) {\n      |  \
    \     ^~~~~~\n/tmp/tmpfq6b5_l8.cpp:12:38: error: too many arguments to function\
    \ \u2018float median(std::vector<long int>)\u2019\n   12 |     return median(l,\
    \ len / 2, len - 1);\n      |                                      ^\n/tmp/tmpfq6b5_l8.cpp:8:7:\
    \ note: declared here\n    8 | float median(std::vector<long> l) {\n      |  \
    \     ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    l.sort(std::greater<long>());\n\
    \    long mid = l[1] / 2;\n    std::vector<long>::iterator it = std::partition(l.begin(),\
    \ l.end(),\n            std::bind2nd(std::greater<long>(), mid));\n    return\
    \ std::distance(l.begin(), it);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5tgr22w1.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp5tgr22w1.cpp:9:7: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018sort\u2019\n    9 |     l.sort(std::greater<long>());\n\
    \      |       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n;\n    int mid;\n    float median;\n\n    // Sort the array.\n    std::sort(l.begin(),\
    \ l.end());\n\n    // Get the length of the sorted array.\n    n = l.size();\n\
    \n    // Get the mid index.\n    mid = n / 2;\n\n    // Calculate median.\n  \
    \  median = (float) l.at(mid);\n\n    return median;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2s26tx_i: /tmp/tmp2s26tx_i.cpp:30: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n// sort input\
    \ in ascending order\nstd::sort(l.begin(), l.end());\n// Find number of elements.\n\
    int n = l.size();\n// Compute median, middle element\nfloat m = (n + 1.0) / 2.0;\n\
    // If number of elements is odd then return middle element as median.\nreturn\
    \ (n % 2) ? m : (n + 1) / 2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpp30_q5xw: /tmp/tmpp30_q5xw.cpp:21: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // O(NlogN)\
    \ time and O(1) space\n  // Write your code in Java.\n  std::sort(l.begin(), l.end());\n\
    \  l.erase(l.begin()+l.size()/2, l.end());\n  return l[(l.size()/2)];\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp772b88sn: /tmp/tmp772b88sn.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0) return 0;\n    l.sort();\n    return l[l.size() / 2];\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpeyfw85sn.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpeyfw85sn.cpp:10:7: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018sort\u2019\n   10 |     l.sort();\n      |       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll=l[0];\n    int size=l.size();\n    assert(size>1);\n    for(int i=1;i<size;i++)\n\
    \    {\n        ll=std::min(ll,l[i]);\n    }\n    return ll/size;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2o5rbt55.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp2o5rbt55.cpp:14:28: error: no matching function for call to \u2018\
    min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   14 |         ll=std::min(ll,l[i]);\n      |                            ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2o5rbt55.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2o5rbt55.cpp:14:28:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   14 |         ll=std::min(ll,l[i]);\n\
    \      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-sky"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  if (l.size()\
    \ == 0) \n    return 0;\n  std::nth_element(l.begin(), l.begin()+1, l.end());\
    \ // select median element\n  return l[0]; // return median\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5pbq0za7: /tmp/tmp5pbq0za7.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n  if (l.size() % 2 == 1) {\n    return\
    \ l[l.size() / 2];\n  }\n  return (l.end() - l.begin()) / 2.0;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp52q276x4: /tmp/tmp52q276x4.cpp:18: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return l[l.size() / 2];\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpawky5p0p: /tmp/tmpawky5p0p.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()\
    \ >= 2);\n\tlong low = l[0], high = l[0];\n\tfor(size_t i = 1; i < l.size(); i++)\
    \ {\n\t\tlow = std::min(low, l[i]);\n\t\thigh = std::max(high, l[i]);\n\t}\n\t\
    return (high + low) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpphlzqoz1: /tmp/tmpphlzqoz1.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Sort list\n\
    \tstd::sort(l.begin(), l.end());\n\t// Middle value\n\tfloat m = 0.0;\n\t// If\
    \ list is not even length\n\tif (l.size() % 2 == 1) {\n\t\t// Select middle value\n\
    \t\tm = (l.begin()[l.size() / 2] + l.begin()[l.size() / 2 - 1]) / 2.0;\n\t\t//\
    \ Check if list has even length\n\t\tif (l.size() % 2 == 0) {\n\t\t\t// Return\
    \ the median value\n\t\t\treturn m;\n\t\t}\n\t}\n\telse {\n\t\tm = (l.begin()[l.size()\
    \ / 2] + l.begin()[l.size() / 2 - 1]) / 2.0;\n\t}\n\treturn m;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv3om28e0: /tmp/tmpv3om28e0.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l.size() >= 2 ? (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0 : l[0];\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfrpr9p8f: /tmp/tmpfrpr9p8f.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long int\
    \ size = l.size();\n    long int mid = size / 2;\n    if (size % 2)\n        return\
    \ l[mid];\n    else\n        return (l[mid] + l[mid+1])/2.0;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpptpthni4: /tmp/tmpptpthni4.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n    \
    \    return l[mid];\n    } else {\n        return (l[mid] + l[mid + 1]) / 2.0;\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1tbaermt: /tmp/tmp1tbaermt.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ != 0);\n    long mid = l.size() / 2;\n    if (l.size() % 2 == 0) return (l[mid]\
    \ + l[mid]) / 2.0;\n    else return l[mid];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpnahfyops: /tmp/tmpnahfyops.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ % 2 == 1) {\n        return l[l.size()/2];\n    } else {\n        float a =\
    \ l[l.size()/2];\n        float b = l[l.size()/2-1];\n        return ((a > b)\
    \ ? a : b);\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_2vo5p9a: /tmp/tmp_2vo5p9a.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Check\
    \ for empty list.\n  if (l.empty()) {\n    return std::numeric_limits<float>::max();\n\
    \  }\n\n  // Define median as midpoint between first and last element\n  // of\
    \ the list. Also define median of first two elements\n  // as average of those\
    \ two.\n  const int middle = l.size() / 2;\n  const long first = l[0];\n  const\
    \ long last = l[middle - 1];\n  return std::min(first, last) / std::max(first,\
    \ last);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpw2_hz5rb: /tmp/tmpw2_hz5rb.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ the list into ascending order\n    std::sort(l.begin(), l.end());\n    long\
    \ mid = (l.begin() + l.end())/2;\n    float median = (*l.begin()+*mid)/2;\n  \
    \  if (l.size()%2) {\n        median = (*l.begin()+*l.end())/2;\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx6j1wp9e.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpx6j1wp9e.cpp:11:27: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   11 |     long mid = (l.begin() + l.end())/2;\n      |                 ~~~~~~~~~\
    \ ^ ~~~~~~~\n      |                        |         |\n      |             \
    \           |         __normal_iterator<[...],[...]>\n      |                \
    \        __normal_iterator<[...],[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx6j1wp9e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:859:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  859 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:859:33:\
    \ note:   no known conver"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Find length\
    \ of list\n\tsize_t n = l.size();\n\tif (n <= 1)\n\t\treturn l[0];\n\t// Find\
    \ middle of list\n\tsize_t m = n >> 1;\n\tif (n % 2 == 0)\n\t\tm++;\n\t// Find\
    \ median of middle elements\n\tfloat m1 = l[m];\n\tfloat m2 = (n - m) * l[m -\
    \ 1];\n\treturn 0.5 * (m1 + m2);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpgyt0kkxe: /tmp/tmpgyt0kkxe.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ != 0);\n    long mid = l.size()/2;\n    int pos = 0;\n    float midval = l[mid];\n\
    \n    // If the mid value is greater than\n    // the middle value, then return\
    \ the \n    // middle value.\n    if (midval > l[pos])\n        return midval;\n\
    \    // If midval is smaller, then return the \n    // smaller value.\n    else\
    \ if ((midval < l[pos]) && (pos < l.size()-1))\n        return l[pos];\n    //\
    \ If midval is equal or larger than the \n    // \n    if (pos == l.size()-1)\n\
    \        return l[pos];\n    // If midval is smaller than the \n    // middle\
    \ value, then return the \n    // middle value.\n    else\n        return midval;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprcyg62yj: /tmp/tmprcyg62yj.cpp:36: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1)\n        return l[mid];\n    else\n\
    \        return 0.5 * (l[mid] + l[mid+1]);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmprddp55be: /tmp/tmprddp55be.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ vector with quick sort algorithm\n    // Sort the vector with quick sort algorithm\n\
    \    // Sort vector with quick sort algorithm\n    long n = l.size();\n    int\
    \ pivotIndex = (n-1)/2;\n    long pivotValue = l[pivotIndex];\n    for (long i=0;\
    \ i<n; i++){\n        if (l[i] < pivotValue) {\n            std::swap(l[i], l[pivotIndex]);\n\
    \            std::swap(l[pivotIndex], l[i]);\n        }\n    }\n    return l[pivotIndex];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpiozdopnf: /tmp/tmpiozdopnf.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ >= 2);\n    float xlower = l[0];\n    float xupper = l[0];\n    float ylower\
    \ = l[0];\n    float yupper = l[0];\n    for (auto it = l.begin() + 1; it != l.end();\
    \ it++) {\n        xlower = std::max(xlower, *it);\n        xupper = std::min(xupper,\
    \ *it);\n        ylower = std::max(ylower, *it);\n        yupper = std::min(yupper,\
    \ *it);\n    }\n    return (xlower + xupper) / 2.0f;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpadje0oxn.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpadje0oxn.cpp:15:38: error: no matching function for call to \u2018\
    max(float&, long int&)\u2019\n   15 |         xlower = std::max(xlower, *it);\n\
    \      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpadje0oxn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpadje0oxn.cpp:15:38:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018long int\u2019)\n   15 |         xlower = std::max(xlower,\
    \ *it);\n      |                                      ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int n = l.size();\n\
    \  float x[n+1];\n  for (int i = 0; i <= n; i++) {\n    x[i] = l[i];\n  }\n  sort(x,\
    \ x + n); // Sort the array from small to large\n  int m = (n + 1) >> 1;\n  //\
    \ Find the pivot element.\n  // This loop assumes there exist at least one element\
    \ in x.\n  int i = 1;\n  for (; i < n; i++) {\n    if (x[i] < x[m]) {\n      m\
    \ = i;\n    }\n  }\n  // Swap the pivot element with the first element of x.\n\
    \  if (m != 0) {\n    float tmp;\n    tmp = x[m];\n    x[m] = x[n - 1];\n    x[n\
    \ - 1] = tmp;\n  }\n  // Return middle element.\n  return x[m];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8i0b0b2a.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp8i0b0b2a.cpp:14:3: error: \u2018sort\u2019 was not declared in this\
    \ scope; did you mean \u2018std::sort\u2019?\n   14 |   sort(x, x + n); // Sort\
    \ the array from small to large\n      |   ^~~~\n      |   std::sort\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8i0b0b2a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note: \u2018std::sort\u2019 declared here\n 4848 |     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last,\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  if (l.size()\
    \ % 2 == 0) {\n    return (static_cast<float>(l.at((l.size() - 1) / 2)) +\n  \
    \          static_cast<float>(l.at((l.size() - 1) / 2 + 1))) / 2;\n  }\n\n  return\
    \ static_cast<float>(l.at((l.size() - 1) / 2));\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpxwj6cxfu: /tmp/tmpxwj6cxfu.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    if (l.size() == 0)\n        return 0;\n    else if (l.size()\
    \ == 1)\n        return l[0];\n    else {\n        float mid = (l[0] + l[l.size()\
    \ / 2]) / 2;\n        return mid;\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpxwvmccrl: /tmp/tmpxwvmccrl.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Initialize\
    \ to the first element.\n    long l = l[0];\n    float res = 0.0;\n\n    // Search\
    \ for median of first and second halves.\n    for (size_t i = 0; i < l.size()\
    \ - 1; ++i) {\n        if (l[i] > l[i + 1]) {\n            res = l[i];\n     \
    \       break;\n        }\n    }\n\n    // If there are two elements, return average.\n\
    \    if (l.size() % 2 == 0) {\n        if (res < l[l.size() / 2]) {\n        \
    \    res = l[l.size() / 2];\n        }\n    }\n\n    // Return median.\n    return\
    \ res;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpynbqhycy.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpynbqhycy.cpp:10:10: error: declaration of \u2018long int l\u2019 shadows\
    \ a parameter\n   10 |     long l = l[0];\n      |          ^\n/tmp/tmpynbqhycy.cpp:10:17:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n   10 |\
    \     long l = l[0];\n      |                 ^\n/tmp/tmpynbqhycy.cpp:14:30: error:\
    \ request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   14 |     for (size_t i = 0; i < l.size() - 1;\
    \ ++i) {\n      |                              ^~~~\n/tmp/tmpynbqhycy.cpp:15:16:\
    \ error: invalid types \u2018long int[size_t {aka long unsigned int}]\u2019 for\
    \ array subscript\n   15 |         if (l[i] > l[i + 1]) {\n      |           \
    \     ^\n/tmp/tmpynbqhycy.cpp:15:27: error: invalid types \u2018long int[size_t\
    \ {aka long unsigned int}]\u2019 for array subscript\n   15 |         if (l[i]\
    \ > l[i + 1]) {\n      |                           ^\n/tmp/tmpynbqhycy.cpp:16:22:\
    \ error: invalid types \u2018long int[size_t {aka long unsigned int}]\u2019 for\
    \ array subscript\n   16 |             res = l[i];\n      |                  \
    \    ^\n/tmp/tmpynbqhycy.cpp:22:11: error: request for member \u2018size\u2019\
    \ in \u2018l\u2019, which is of non-class type \u2018long int\u2019\n   22 | \
    \    if (l.size() % 2 == 0) {\n      |           ^~~~\n/tmp/tmpynbqhycy.cpp:23:23:\
    \ error: request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   23 |         if (res < l[l.size() / 2]) {\n  \
    \    |                       ^~~~\n/tmp/tmpynbqhycy.cpp:24:23: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long int\u2019\n   24 |             res = l[l.size() / 2];\n      |          \
    \             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long long\
    \ size = l.size();\n  if (size % 2 == 0) {\n    return (float(l[size / 2 - 1]\
    \ + l[size / 2]) / 2);\n  } else {\n    return (float(l[size / 2 - 1] + l[size\
    \ / 2 - 1]) / 2.0);\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfh06dzlr: /tmp/tmpfh06dzlr.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float n\
    \ = float(l.size());\n    assert(n > 0); // handle empty list\n    std::vector<long>::iterator\
    \ middle = std::partition(l.begin(), l.end(), [](long x) { return x >= n/2; });\n\
    \    return (n.*middle)/(n/2); // floating point division is expensive, especially\
    \ for large n\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppq8rdkpf.cpp: In lambda function:\n/tmp/tmppq8rdkpf.cpp:11:102:\
    \ error: \u2018n\u2019 is not captured\n   11 |     std::vector<long>::iterator\
    \ middle = std::partition(l.begin(), l.end(), [](long x) { return x >= n/2; });\n\
    \      |                                                                     \
    \                                 ^\n/tmp/tmppq8rdkpf.cpp:11:78: note: the lambda\
    \ has no capture-default\n   11 |     std::vector<long>::iterator middle = std::partition(l.begin(),\
    \ l.end(), [](long x) { return x >= n/2; });\n      |                        \
    \                                                      ^\n/tmp/tmppq8rdkpf.cpp:9:11:\
    \ note: \u2018float n\u2019 declared here\n    9 |     float n = float(l.size());\n\
    \      |           ^\n/tmp/tmppq8rdkpf.cpp: In function \u2018float median(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppq8rdkpf.cpp:12:16: error: \u2018middle\u2019 cannot be\
    \ used as a member pointer, since it is of type \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    }\n   12 |     return (n.*middle)/(n/2); // floating point division is expensive,\
    \ especially for large n\n      |                ^~~~~~\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppq8rdkpf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018_BidirectionalIterator std::__partition(_BidirectionalIterator,\
    \ _BidirectionalIterator, _Predicate, std::bidirectional_iterator_tag) [with _BidirectionalIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = median(std::vector<long int>)::<lambda(long int)>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4645:30:\
    \   required from \u2018_BIter std::partition(_BIter, _BIter, _Predicate) [with\
    \ _BIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = median(std::vector<long int>)::<lambda(long int)>]\u2019\n/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 1);\n    sort(l.begin(), l.end());\n    return l[(l.size() - 1) /2]; \n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpry1rl5as: /tmp/tmpry1rl5as.cpp:16: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tlong n =\
    \ l.size();\n\tif (n == 0)\n\t\treturn -1;\n\tsort(l.begin(), l.end());\n\tif\
    \ (n % 2 == 0)\n\t\treturn l[n/2];\n\telse {\n\t\tint m = (n+1)/2;\n\t\treturn\
    \ l[m];\n\t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpzyz_03r2: /tmp/tmpzyz_03r2.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ the vector l first\n    std::sort(l.begin(), l.end());\n    long half = (l.size())\
    \ / 2;\n    if (l.size() % 2 == 1) {\n        return l[half];\n    } else {\n\
    \        return 0.5 * (l[half - 1] + l[half]);\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Sort list\
    \ to find median quickly.\n  std::sort(l.begin(), l.end());\n\n  // Store the\
    \ median.\n  float m = (l.size() % 2) ? l/2.0 + 0.5 : l[(l.size()-1)/2];\n\n \
    \ // Return the median.\n  return m;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcq1h_lzq.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpcq1h_lzq.cpp:13:31: error: no match for \u2018operator/\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018double\u2019)\n   13 |\
    \   float m = (l.size() % 2) ? l/2.0 + 0.5 : l[(l.size()-1)/2];\n      |     \
    \                         ~^~~~\n      |                              | |\n  \
    \    |                              | double\n      |                        \
    \      std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcq1h_lzq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:417:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  417 |     operator/(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcq1h_lzq.cpp:13:32:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   13 |   float m = (l.size() % 2) ? l/2.0 + 0.5 : l[(l.size()-1)/2];\n    \
    \  |                                ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcq1h_lzq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:426:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  426 |     operator/(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:426:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcq1h_lzq.cpp:13:32:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::compl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    if (n % 2 == 0)\n        return (l[n/2-1] + l[n/2]) / 2;\n\
    \    return l[(n-1)/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9_8_g1kw: /tmp/tmp9_8_g1kw.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto it\
    \ = std::nth_element(l.begin(), l.begin() + l.size()/2, l.end());\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvagp8li5.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpvagp8li5.cpp:9:10: error: \u2018void it\u2019 has incomplete type\n\
    \    9 |     auto it = std::nth_element(l.begin(), l.begin() + l.size()/2, l.end());\n\
    \      |          ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long a\
    \ = l[0];\n    long b = l[l.size()/2];\n    if (l.size() % 2)\n        return\
    \ (b + a) / 2.0;\n    else\n        return (b - a) / 2.0;\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpuazpcyfq: /tmp/tmpuazpcyfq.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ > 1);\n  std::nth_element(l.begin(), l.begin() + l.size() / 2, l.end());\n \
    \ return l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp22l1zf9u: /tmp/tmp22l1zf9u.cpp:16: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin()+l.size()/2, l.end());\n    return (float(l.size()/2) - l.at(l.size()/2))/l.size()*2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpa0x43skb: /tmp/tmpa0x43skb.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n    return (*(l.begin() + l.size() / 2));\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpeuzj33of: /tmp/tmpeuzj33of.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float ans\
    \ = l[0];\n    long mid = 0;\n    long cnt = 0;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > ans)\n            ans = l[i];\n        if (cnt ==\
    \ l.size() / 2) {\n            mid = i;\n            cnt++;\n        }\n    }\n\
    \    mid++;\n    return ans + (float)(mid - ans) / 2.0;\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwo99it6h: /tmp/tmpwo99it6h.cpp:26: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Your\
    \ code here\n    float sum = 0;\n    int count = 0;\n    for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        sum += *it;\n        count++;\n\
    \    }\n    float median = sum / count;\n    return median;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1u54kaqr: /tmp/tmp1u54kaqr.cpp:22: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = (l.size() / 2);\n    float a = l[mid];\n    float b = l[mid+1];\n    return\
    \ (a + b) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpy2jp30ez: /tmp/tmpy2jp30ez.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // TODO\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpu9ko7ql4: /tmp/tmpu9ko7ql4.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long size\
    \ = l.size();\n    if (size % 2 == 0) {\n        long mid = size / 2;\n      \
    \  long lo = l[mid];\n        long hi = l[mid+1];\n        return (lo + hi) /\
    \ 2.0;\n    }\n    else {\n        long mid = size / 2;\n        long lo = l[mid];\n\
    \        long hi = l[mid-1];\n        return (lo + hi) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3lqm0n74: /tmp/tmp3lqm0n74.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ % 2 == 0)\n        return l[(l.size() / 2)]; //odd length\n    return ((l[(l.size()\
    \ / 2)-1]+l[(l.size() / 2)+1])/2);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpe7hs6345: /tmp/tmpe7hs6345.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int length\
    \ = l.size();\n  if (length == 0) {\n    throw std::invalid_argument(\"Empty list!\"\
    );\n  }\n  long minimum = *std::min_element(l.begin(), l.end());\n  long maximum\
    \ = *std::max_element(l.begin(), l.end());\n  float average = (minimum + maximum)\
    \ / 2.0f;\n  if (length > 1) {\n    int mid = (length / 2);\n    float median\
    \ = ((float)(l[mid] + l[length - 1]) / 2.0f);\n    return median;\n  } else {\n\
    \    return average;\n  }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp81ngyl5n: /tmp/tmp81ngyl5n.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float mid,\
    \ lo, hi, sum;\n    int n = l.size();\n    lo = l[0];\n    hi = l[n - 1];\n  \
    \  for (int i = 1; i < n; ++i) {\n        mid = lo + (hi - lo) / 2.0;\n      \
    \  sum = mid;\n        for (int j = 0; j < i; ++j)\n            sum += l[j];\n\
    \        if (sum < 0)\n            hi = mid;\n        else if (sum > 0)\n    \
    \        lo = mid;\n        else\n            return mid;\n    }\n    return lo;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk64ia51a: /tmp/tmpk64ia51a.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  auto it =\
    \ std::cbegin(l);\n  auto beg = std::lower_bound(it, std::cend(l), l.begin());\n\
    \  auto end = std::cend(l)-1;\n  if (beg <= end) mid = beg;\n  else mid = std::upper_bound(it,\
    \ end, l.end());\n  return *mid;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo7lh0am8.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpo7lh0am8.cpp:12:19: error: \u2018mid\u2019 was not declared in this\
    \ scope\n   12 |   if (beg <= end) mid = beg;\n      |                   ^~~\n\
    /tmp/tmpo7lh0am8.cpp:13:8: error: \u2018mid\u2019 was not declared in this scope\n\
    \   13 |   else mid = std::upper_bound(it, end, l.end());\n      |        ^~~\n\
    /tmp/tmpo7lh0am8.cpp:14:11: error: \u2018mid\u2019 was not declared in this scope\n\
    \   14 |   return *mid;\n      |           ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo7lh0am8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_less_val::operator()(_Iterator,\
    \ _Value&) const [with _Iterator = __gnu_cxx::__normal_iterator<const long int*,\
    \ std::vector<long int> >; _Value = const __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:979:14:\
    \   required from \u2018_ForwardIterator std::__lower_bound(_ForwardIterator,\
    \ _ForwardIterator, const _Tp&, _Compare) [with _ForwardIterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; _Tp = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_less_val]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tauto it =\
    \ l.begin();\n\tif (it == l.end()) {\n\t\treturn 0.0;\n\t}\n\tauto mid = it +\
    \ l.size() / 2;\n\tassert(l.size() > 1);\n\twhile (it < mid) {\n\t\t++it;\n\t\
    }\n\tif (it == l.end()) {\n\t\treturn l[mid];\n\t}\n\twhile (it > mid) {\n\t\t\
    --it;\n\t}\n\treturn std::min(l[mid], l[it]);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_n8ir59r.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_n8ir59r.cpp:19:11: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   19 |   return l[mid];\n      |    \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_n8ir59r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type __n)\
    \ _GLIBCXX_NOEXCEPT\n      |                  ~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1058:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n    return *std::max_element(l.begin(),\
    \ l.begin() + l.size() / 2);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbwuvdyso: /tmp/tmpbwuvdyso.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long x =\
    \ 0;\n  long y = 0;\n  long count = 0;\n  for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n    if ((*it < 0) || (*it > 25)) {\n      x += (*it);\n    } else {\n\
    \      y += (*it);\n      ++count;\n    }\n  }\n  // If there are equally many\
    \ numbers, use average\n  float sum = ((float) count) / (float)l.size();\n  if\
    \ (l.size() % 2 == 0) {\n    // If the list size is an odd number, use average\
    \ of first and last\n    return (l.size() > 1) ? sum : ((sum * l.front() + l.back())\
    \ / 2);\n  } else {\n    // If the list size is an even number, use average of\
    \ middle two number\n    return (l.size() > 1) ? (sum * l.begin() + l.begin()\
    \ + l.back()) / 2 : sum;\n  }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpypac3w9d.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpypac3w9d.cpp:27:34: error: no match for \u2018operator*\u2019 (operand\
    \ types are \u2018float\u2019 and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   27 |     return (l.size() > 1) ? (sum * l.begin() + l.begin() + l.back())\
    \ / 2 : sum;\n      |                              ~~~ ^ ~~~~~~~~~\n      |  \
    \                            |            |\n      |                         \
    \     float        std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpypac3w9d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  387 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpypac3w9d.cpp:27:44:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018float\u2019\
    \n   27 |     return (l.size() > 1) ? (sum * l.begin() + l.begin() + l.back())\
    \ / 2 : sum;\n      |                                            ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n    \
    \             from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpypac3w9d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:396:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  396 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n <= 1) return l[0];\n  long mid = n / 2;\n  int m = (int) mid;\n  std::vector<long>::iterator\
    \ itr = l.begin();\n  while (itr != l.end()){\n    if (itr < l.begin() || (itr\
    \ + mid) < itr) {\n      itr++;\n    } else {\n      itr += mid;\n    }\n  }\n\
    \  return l[m];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end()); // Sort the elements in ascending order.\n\
    \    float med = l.at(l.size() / 2);\n    return med;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp10kn124m: /tmp/tmp10kn124m.cpp:16: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long low\
    \ = 0;\n    long high = l.size()-1;\n    float mid = l[low] + (l[high] - l[low])\
    \ / 2.0f;\n    float mid2 = (l[high] - l[low]) / 2.0f;\n    bool found;\n    while\
    \ ((found = std::find(l.begin(), l.end(), mid)) !=\n            l.end()) {\n \
    \       if (mid != l[found]) {\n            mid = (mid + mid2) / 2;\n        }\n\
    \        high--;\n        mid2 = mid;\n    }\n    return mid;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_elaos5t.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_elaos5t.cpp:14:30: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018bool\u2019 in assignment\n   14\
    \ |     while ((found = std::find(l.begin(), l.end(), mid)) !=\n      |      \
    \               ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n      |                  \
    \            |\n      |                              __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long temp=l.size();\n\
    \    assert(temp%2==0);\n    temp=temp/2;\n    float avg=static_cast<float>(l);\n\
    \    avg=(avg+avg)/2;\n    return avg;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpniwphatr.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpniwphatr.cpp:12:35: error: invalid static_cast from type \u2018std::vector<long\
    \ int>\u2019 to type \u2018float\u2019\n   12 |     float avg=static_cast<float>(l);\n\
    \      |                                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  if (l.size()\
    \ % 2 == 1) {\n    return ((l[l.size()/2-1] + l[l.size()/2])/2);\n  } else {\n\
    \    return std::median(l.begin(), l.end());\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcufldmzh.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpcufldmzh.cpp:12:17: error: \u2018median\u2019 is not a member of \u2018\
    std\u2019; did you mean \u2018median\u2019?\n   12 |     return std::median(l.begin(),\
    \ l.end());\n      |                 ^~~~~~\n/tmp/tmpcufldmzh.cpp:8:7: note: \u2018\
    median\u2019 declared here\n    8 | float median(std::vector<long> l) {\n    \
    \  |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    size_t\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0)\n        return l[mid];\n  \
    \  else\n        return (l[mid] + l[mid-1]) / 2.0;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpzwxnjtxi: /tmp/tmpzwxnjtxi.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// return\
    \ l[l.size()/2];\n\t// return l[l[0]+l[l].size()/2];\n\t// return std::inner_product(l.begin(),\
    \ l.end(), l.begin(), 0);\n\t// return std::accumulate(l.begin(), l.end(), 0)\
    \ / l.size();\n\t// return std::nth_element(l.begin(), l.begin() + l.size() /\
    \ 2, l.end());\n\t// return l[std::distance(l) / 2];\n\treturn (std::accumulate(l.begin(),\
    \ l.end(), 0) / l.size()) / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmphtomrpze: /tmp/tmphtomrpze.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long long\
    \ mid = (l.size() + 1) / 2;\n  float left_med = float((l.begin() + mid) / 2);\n\
    \  float right_med = float((l.rbegin() + mid) / 2);\n  return left_med + right_med;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7xzh6mwm.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp7xzh6mwm.cpp:10:44: error: no match for \u2018operator/\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 and \u2018int\u2019)\n   10 |   float left_med = float((l.begin() +\
    \ mid) / 2);\n      |                          ~~~~~~~~~~~~~~~~~ ^ ~\n      |\
    \                                     |        |\n      |                    \
    \                 |        int\n      |                                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7xzh6mwm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:417:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  417 |     operator/(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7xzh6mwm.cpp:10:46:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\n   10 |   float\
    \ left_med = float((l.begin() + mid) / 2);\n      |                          \
    \                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7xzh6mwm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:426:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  426 |     operator/(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:426:5:\
    \ n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n    return l[l.size() / 2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmph_i5642i: /tmp/tmph_i5642i.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  if (l.size()\
    \ % 2 == 1) {\n    int median = (l.begin() + l.size() / 2) - 1;\n    return l[median];\n\
    \  }\n  else {\n    float x = (l.begin() + l.size() / 2);\n    return (x[1] +\
    \ x[l.size() / 2]) / 2;\n  }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxnz34nys.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpxnz34nys.cpp:10:45: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018int\u2019 in initialization\n \
    \  10 |     int median = (l.begin() + l.size() / 2) - 1;\n      |            \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n      |                               \
    \              |\n      |                                             __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpxnz34nys.cpp:14:26: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018float\u2019 in initialization\n   14 |     float x = (l.begin() + l.size()\
    \ / 2);\n      |               ~~~~~~~~~~~^~~~~~~~~~~~~~~\n      |           \
    \               |\n      |                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpxnz34nys.cpp:15:16: error: invalid types\
    \ \u2018float[int]\u2019 for array subscript\n   15 |     return (x[1] + x[l.size()\
    \ / 2]) / 2;\n      |                ^\n/tmp/tmpxnz34nys.cpp:15:34: error: invalid\
    \ types \u2018float[std::vector<long int>::size_type {aka long unsigned int}]\u2019\
    \ for array subscript\n   15 |     return (x[1] + x[l.size() / 2]) / 2;\n    \
    \  |                                  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float midPoint\
    \ = std::accumulate(l.begin(), l.end(), 0.0) / l.size();\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n    std::vector<int> nums(l.begin(), l.begin()\
    \ + l.size() / 2);\n    float mean = std::accumulate(nums.begin(), nums.end(),\
    \ 0.0) / nums.size();\n    return (midPoint + mean);\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpjf1enjag: /tmp/tmpjf1enjag.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long size\
    \ = (int) l.size();\n    assert(size % 2 == 0);\n    if (size == 0) return 0;\n\
    \    int mid = size / 2;\n    return (l[mid] + l[size/2]) / 2.0;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdcph54pq: /tmp/tmpdcph54pq.cpp:10: float median(std::vector<long int>):\
    \ Assertion `size % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int size\
    \ = l.size();\n    if (size == 0)\n        throw std::runtime_error(\"Empty list.\"\
    );\n    std::vector<long>::iterator it;\n    int mid = size / 2;\n    if (size\
    \ == 1)\n        return l[0];\n    if (l[mid] < l[0])\n        it = (l.begin()\
    \ + 0);\n    else\n        it = (l.begin() + mid);\n    std::vector<long> v(it,\
    \ l.end());\n    std::nth_element(v.begin(), v.begin() + mid, v.end());\n    return\
    \ v[mid];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7rvj9p5q: /tmp/tmp7rvj9p5q.cpp:27: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Write\
    \ your code here\n  long size = l.size();\n  if(size % 2 == 0)\n    return l[size/2]\
    \ + (l[size/2-1] + l[size/2+1])/2;\n  else\n    return l[size/2-1];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7ol_a_dq: /tmp/tmp7ol_a_dq.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()\
    \ != 0);\n\tlong n = 0;\n\tfloat maxVal = std::numeric_limits<float>::min();\n\
    \tfor (auto &el : l)\n\t\tmaxVal = (std::max)(maxVal, el);\n\tfor (auto &el :\
    \ l)\n\t\tif (el == maxVal)\n\t\t\tn++;\n\tfloat medianVal = (float)(n + 1) /\
    \ 2.0;\n\treturn medianVal;\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq9vjo5i0.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpq9vjo5i0.cpp:13:33: error: no matching function for call to \u2018\
    max(float&, long int&)\u2019\n   13 |   maxVal = (std::max)(maxVal, el);\n   \
    \   |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq9vjo5i0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq9vjo5i0.cpp:13:33:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018long int\u2019)\n   13 |   maxVal = (std::max)(maxVal, el);\n\
    \      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long n =\
    \ l.size();\n  assert(n != 0);\n  long mid = n / 2;\n  long ret = 0;\n  \n  while\
    \ (true) {\n    if (m[mid] < 0) return ret;\n    long left = std::min(mid + 1,\
    \ n);\n    long right = std::max(mid - 1, 0);\n    \n    if (left >= right) break;\n\
    \    \n    long mid2 = mid + right + 1;\n    ret = std::max(ret, mid - (mid &\
    \ 1)*((left - mid) + mid * right));\n    mid += right + 1;\n    n = left;\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpiqbfown6.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpiqbfown6.cpp:15:9: error: \u2018m\u2019 was not declared in this scope\n\
    \   15 |     if (m[mid] < 0) return ret;\n      |         ^\n/tmp/tmpiqbfown6.cpp:17:37:\
    \ error: no matching function for call to \u2018max(long int, int)\u2019\n   17\
    \ |     long right = std::max(mid - 1, 0);\n      |                          \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpiqbfown6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpiqbfown6.cpp:17:37:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   17 |     long right = std::max(mid - 1,\
    \ 0);\n      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int mid = l.size() / 2;\n    if (l.size() % 2 == 1)\n       \
    \ return l[mid];\n    else\n        return ((l[mid] + l[mid]) / 2);\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp6n5ilrzp: /tmp/tmp6n5ilrzp.cpp:19: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    if (n & 1)\n        return l[n/2];\n    else\n        return\
    \ std::median(l.begin(), l.begin() + n/2-1);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgnmqqb9t.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpgnmqqb9t.cpp:13:21: error: \u2018median\u2019 is not a member of \u2018\
    std\u2019; did you mean \u2018median\u2019?\n   13 |         return std::median(l.begin(),\
    \ l.begin() + n/2-1);\n      |                     ^~~~~~\n/tmp/tmpgnmqqb9t.cpp:8:7:\
    \ note: \u2018median\u2019 declared here\n    8 | float median(std::vector<long>\
    \ l) {\n      |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0)\n        return median(l, mid);\n\
    \    float a = (l[mid] + l[mid-1]) / 2;\n    return median(l, mid - 1); \n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpawu740si.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpawu740si.cpp:11:29: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   11 |         return median(l, mid);\n\
    \      |                             ^\n/tmp/tmpawu740si.cpp:8:7: note: declared\
    \ here\n    8 | float median(std::vector<long> l) {\n      |       ^~~~~~\n/tmp/tmpawu740si.cpp:13:29:\
    \ error: too many arguments to function \u2018float median(std::vector<long int>)\u2019\
    \n   13 |     return median(l, mid - 1);\n      |                            \
    \ ^\n/tmp/tmpawu740si.cpp:8:7: note: declared here\n    8 | float median(std::vector<long>\
    \ l) {\n      |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(!l.empty());\n\
    \    float m = std::accumulate(l.begin(), l.end(), 0.0) / static_cast<float>(l.size());\n\
    \    return m;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpzjuaqmwz: /tmp/tmpzjuaqmwz.cpp:16: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here.\n    long long sum = 0;\n    int len = l.size();\n    if(len%2!=0){\n\
    \        return -1;\n    }\n    int mid = (len+1)/2;\n    for(int i=0;i<mid;i++){\n\
    \        sum += l[i];\n    }\n    int index = mid - 1;\n    while(index>=0 &&\
    \ sum>0){\n        sum += l[index];\n        index--;\n    }\n    return sum/((double)mid);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpx4hv4lto: /tmp/tmpx4hv4lto.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::nth_element(l.begin(),\
    \ l.begin()+l.size() / 2, l.end());\n  return *(l.begin() + l.size() / 2);\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3wzpbpa6: /tmp/tmp3wzpbpa6.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end()); // nth element median is of index l/2\n\
    \    return static_cast<float>(l[l.size() / 2]);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpf060ws3t: /tmp/tmpf060ws3t.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto s\
    \ = l.size();\n    if(s == 0) {\n        return 0;\n    }\n    long mid = s >>\
    \ 1;\n    long l = l[mid];\n    if(s == 1 || l < l[mid]) {\n        return l;\
    \ // l is median\n    }\n    if(s == 2) {\n        return std::max(l[mid], l[mid]);\
    \ // l is median\n    }\n    while(true) {\n        mid = (mid + 1) >> 1;\n  \
    \      if((mid & 1) == 0) {\n            if(l[mid] > l[mid + 1]) {\n         \
    \       return l[mid];\n            }\n            return l[mid + 1];\n      \
    \  }\n        if(l[mid] > l[mid - 1]) {\n            return l[mid];\n        }\n\
    \        return l[mid - 1];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6wio7837.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp6wio7837.cpp:14:10: error: declaration of \u2018long int l\u2019 shadows\
    \ a parameter\n   14 |     long l = l[mid];\n      |          ^\n/tmp/tmp6wio7837.cpp:14:19:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 14 |     long l = l[mid];\n      |                   ^\n/tmp/tmp6wio7837.cpp:15:27:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 15 |     if(s == 1 || l < l[mid]) {\n      |                           ^\n/tmp/tmp6wio7837.cpp:19:30:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 19 |         return std::max(l[mid], l[mid]); // l is median\n      |      \
    \                        ^\n/tmp/tmp6wio7837.cpp:19:38: error: invalid types \u2018\
    long int[long int]\u2019 for array subscript\n   19 |         return std::max(l[mid],\
    \ l[mid]); // l is median\n      |                                      ^\n/tmp/tmp6wio7837.cpp:24:21:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 24 |             if(l[mid] > l[mid + 1]) {\n      |                     ^\n\
    /tmp/tmp6wio7837.cpp:24:34: error: invalid types \u2018long int[long int]\u2019\
    \ for array subscript\n   24 |             if(l[mid] > l[mid + 1]) {\n      |\
    \                                  ^\n/tmp/tmp6wio7837.cpp:25:29: error: invalid\
    \ types \u2018long int[long int]\u2019 for array subscript\n   25 |          \
    \       return l[mid];\n      |                             ^\n/tmp/tmp6wio7837.cpp:27:29:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 27 |             return l[mid + 1];\n      |                             ^\n\
    /tmp/tmp6wio7837.cpp:29:17: error: invalid types \u2018long int[long int]\u2019\
    \ for array subscript\n   29 |         if(l[mid] > l[mid - 1]) {\n      |    \
    \             ^\n/tmp/tmp6wio7837.cpp:29:30: error: invalid types \u2018long int[long\
    \ int]\u2019 for array subscript\n   29 |         if(l[mid] > l[mid - 1]) {\n\
    \      |                              ^\n/tmp/tmp6wio7837.cpp:30:25: error: invalid\
    \ types \u2018long int[long int]\u2019 for array subscript\n   30 |          \
    \   return l[mid];\n     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // code\
    \ here\n    int n = l.size();\n    if(n < 2)\n        return 0;\n    long mid\
    \ = n/2;\n    std::nth_element(l.begin(), l.begin() + mid, l.end());\n    return\
    \ std::median(l.begin(), l.begin() + mid);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06_v4jre.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp06_v4jre.cpp:15:17: error: \u2018median\u2019 is not a member of \u2018\
    std\u2019; did you mean \u2018median\u2019?\n   15 |     return std::median(l.begin(),\
    \ l.begin() + mid);\n      |                 ^~~~~~\n/tmp/tmp06_v4jre.cpp:8:7:\
    \ note: \u2018median\u2019 declared here\n    8 | float median(std::vector<long>\
    \ l) {\n      |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med\
    \ = l[0];\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > med) {\n\
    \            med = l[i];\n        }\n    }\n    return med;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpw1rmvpbs: /tmp/tmpw1rmvpbs.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return std::distance(l.begin(), std::unique(l.begin(), l.end()));\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkbgh7gk2: /tmp/tmpkbgh7gk2.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        if (l[mid] > l[mid+1])\
    \ std::swap(l[mid], l[mid+1]);\n        float x = (l[mid] + l[mid+1]) / 2;\n \
    \       return x;\n    }\n    if (l[mid] > l[mid - 1]) std::swap(l[mid], l[mid\
    \ - 1]);\n    float x = (l[mid] + l[mid - 1]) / 2;\n    return x;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpovxlsa4y: /tmp/tmpovxlsa4y.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ the list l.\n    std::sort(l.begin(), l.end());\n    // Return median of list\
    \ l.\n    return (l.size() / 2) + l[l.size() / 2];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpmzmi0i89: /tmp/tmpmzmi0i89.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    long mid = l.size() / 2;\n    float a = l[mid];\n    long b = mid;\n\
    \    while (b < l.size() - 1 && l[b + 1] < a) {\n        b++;\n    }\n    if (b\
    \ == l.size() - 1) {\n        return a;\n    }\n    else {\n        return 0.5\
    \ * (a + l[b]);\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwf8sfl4o: /tmp/tmpwf8sfl4o.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Check\
    \ size of vector.\n    if (l.size() == 0) {\n        return 0;\n    }\n\n    long\
    \ mid = l.size() / 2;\n    float left = l[mid];\n\n    for (long i = mid + 1;\
    \ i < l.size(); i++) {\n        float right = l[i];\n        if (right < left)\
    \ {\n            left = right;\n        }\n    }\n\n    return left;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpqtfudjp_: /tmp/tmpqtfudjp_.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med;\n\
    \    long count = 0;\n\n    for (int i = 0; i < l.size(); i++)\n        count\
    \ += l[i];\n\n    med = (float) l.size() / (float) count;\n\n    if (med == (float)\
    \ 0.0)\n        med = 0.5;\n\n    return med;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpdikm0el6: /tmp/tmpdikm0el6.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float min\
    \ = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    float median = std::numeric_limits<float>::min();\n    for (long i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n            min = l[i];\n\
    \        }\n        if (l[i] < l[i - 1]) {\n            max = l[i];\n        }\n\
    \    }\n    float mid = min + (max - min) / 2;\n    if (l.size() % 2 == 0) {\n\
    \        median = mid;\n    } else {\n        if (mid - l[l.size() / 2] < l[l.size()\
    \ / 2 - 1] - mid) {\n            median = mid;\n        } else {\n           \
    \ median = l[l.size() / 2];\n        }\n    }\n    return median;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpy6kuzvur: /tmp/tmpy6kuzvur.cpp:34: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ >= 2);\n    float m = l[0];\n    int s = l.size();\n    for (int i = 1; i <\
    \ s; ++i) {\n        if (l[i] < m)\n            m = l[i];\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_bgdmk_1: /tmp/tmp_bgdmk_1.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Find median\
    \ of first two elements.\n  long mid1 = l[0] + l[1] >> 1;\n  long mid2 = l[0]\
    \ + l[1] >> 1;\n  assert(mid1 != mid2);\n  // If even, median is mid.\n  long\
    \ mid = mid1;\n  if (l[1] & 1)\n    mid = mid2;\n  // If odd, median is (mid-1)\
    \ + 1.\n  else\n    mid = (mid1 - 1) + 1;\n  // Return average of middle two elements.\n\
    \  float result = (mid * mid) >> 1;\n  // If there are an even number of elements,\
    \ median is the mean of the two.\n  if (l[1] & 1)\n    return result + (l[2] /\
    \ 2);\n  return result;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpksq_lw_h: /tmp/tmpksq_lw_h.cpp:12: float median(std::vector<long int>):\
    \ Assertion `mid1 != mid2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here.\n    float total = 0;\n    int n = l.size();\n    for (int i\
    \ = 0; i < n; i++)\n        total += l[i];\n    float mid = total / n;\n    float\
    \ left_sum = 0;\n    int left_count = 0;\n    int right_count = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        if (l[i] <= mid)\n            left_sum += l[i];\n\
    \        else\n            right_count += 1;\n    int count = 0;\n    while (left_count\
    \ < n && right_count < n)\n        if (l[count] < mid)\n            left_sum +=\
    \ l[count++];\n        else\n            right_count += 1;\n    if (left_count\
    \ == n)\n        return mid;\n    else if (right_count == n)\n        return l[n\
    \ - 1];\n    else if (left_sum / left_count > mid / right_count)\n        return\
    \ l[n - 1];\n    else\n        return mid;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmplgeavhfg: /tmp/tmplgeavhfg.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0)\n        throw std::runtime_error(\"No data\");\n    long mid = l.size()\
    \ / 2;\n    std::nth_element(l.begin(), l.begin() + mid, l.end());\n    return\
    \ l[mid];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpawr1g9o0: /tmp/tmpawr1g9o0.cpp:18: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::vector<int> ids(l.size());\n    std::iota(ids.begin(), ids.end(),\
    \ 0);\n    // sort based on first value\n    std::sort(ids.begin(), ids.end(),\n\
    \      [&l] (int x, int y) {\n          return l[x] > l[y];\n    });\n    std::vector<long>\
    \ medians;\n    long median_id = 0;\n    for (long x : ids) {\n        medians.push_back(l.at(x));\n\
    \        if (x != median_id) {\n            median_id = x;\n        }\n    }\n\
    \    long center = median(medians);\n    return l.at(median_id);\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    float x[n];\n    float sum = 0;\n    for (int i = 0; i < n; ++i)\
    \ {\n        x[i] = l[i];\n        sum += x[i];\n    }\n    return sum / n;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkc6tv0qo: /tmp/tmpkc6tv0qo.cpp:21: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto it\
    \ = std::begin(l);\n    auto it2 = std::next(it, l.size() / 2);\n    std::nth_element(it,\
    \ it2, it);\n    return *it;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpjj953gej: /tmp/tmpjj953gej.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    assert(n != 0); // if n is 0, median is undefined\n    long\
    \ mid = n%2 ? (n-1)/2 : (n./2)-1;\n    if (n == 1 || n == 0 || n == mid)\n   \
    \     return l[0];\n    else {\n        float f = l[mid - 1];\n        for (long\
    \ i = mid; i <= n; i++)\n            f += l[i];\n        return f / n;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyo4qww_n.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpyo4qww_n.cpp:11:35: error: expected unqualified-id before \u2018/\u2019\
    \ token\n   11 |     long mid = n%2 ? (n-1)/2 : (n./2)-1;\n      |           \
    \                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  sort(l.begin(),\
    \ l.end());\n  size_t mid = (l.size() - 1) / 2;\n  return ((l[mid] + (l[mid +\
    \ 1] + l[mid + 2])) / 3.0);\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpxpqvzaic: /tmp/tmpxpqvzaic.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    return l.size() > 1 ? l[(l.size() - 1) / 2] : l[0];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_lz1vzz3: /tmp/tmp_lz1vzz3.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto it\
    \ = std::nth_element(l.begin(), l.begin() + l.size() / 2, l.end());\n    return\
    \ std::distance(l.begin(), it);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrtkkgpw.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpcrtkkgpw.cpp:9:10: error: \u2018void it\u2019 has incomplete type\n\
    \    9 |     auto it = std::nth_element(l.begin(), l.begin() + l.size() / 2, l.end());\n\
    \      |          ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    long long med = l[0];\n    for (long long i = 1; i < l.size(); ++i)\n\
    \        med = l[i] > med ? l[i] : med;\n    return med;\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcistm735: /tmp/tmpcistm735.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0)\n        return 0;\n    long long s = std::accumulate(l.begin(), l.end(),\
    \ 0);\n    float x = (s - 1) / l.size();\n    return x;\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphk7_f47b: /tmp/tmphk7_f47b.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Sort list\
    \ l.\n  std::sort(l.begin(), l.end());\n  // Return median.\n  return l[l.size()\
    \ / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpq4x7veh1: /tmp/tmpq4x7veh1.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()\
    \ > 1);\n\tauto begin = l.begin();\n\tauto end = l.end();\n\tstd::nth_element(begin,\
    \ begin+l.size() / 2, end);\n\tassert(l.size() > l.size() / 2);\n\treturn *begin\
    \ + (begin+l.size() / 2)/2;\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvrxdrsm.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpkvrxdrsm.cpp:14:38: error: no match for \u2018operator/\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 and \u2018int\u2019)\n   14 |  return *begin + (begin+l.size() / 2)/2;\n\
    \      |                  ~~~~~~~~~~~~~~~~~~~~^~\n      |                    \
    \    |              |\n      |                        |              int\n   \
    \   |                        __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkvrxdrsm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:417:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  417 |     operator/(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkvrxdrsm.cpp:14:39:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\n   14 |  return\
    \ *begin + (begin+l.size() / 2)/2;\n      |                                  \
    \     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkvrxdrsm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:426:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  426 |     operator/(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:426:5:\
    \ note:   template argument deduction/substitution failed:\n/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0)\n        return 0;\n    std::nth_element(l.begin(), l.begin() + l.size()\
    \ / 2, l.end()); // Sort list to order descending based on its size.\n    return\
    \ l[l.size() / 2]; // Return middle element of sorted list.\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpbx_7z7xs: /tmp/tmpbx_7z7xs.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long i,\
    \ mid;\n    float x;\n\n    mid = (long)(l.size() / 2.0);\n    x = l[mid];\n \
    \   for (i = mid; i < l.size(); i++) {\n        if (l[i] < x) {\n            x\
    \ = l[i];\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpo4p4q7xf: /tmp/tmpo4p4q7xf.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    long mid = l.size() / 2;\n    if (l.size() % 2 == 0) return l[mid];\n\
    \    else return (l[mid] + l[mid-1]) / 2.0;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5y7bveqt: /tmp/tmp5y7bveqt.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid=l.size();\n\
    \    if(mid%2==0) mid=mid/2;\n    else mid=mid-1;\n    float x=(float)l[mid];\
    \ //left element\n    float y=(float)l[mid-1]; //right element\n    float z=x+y;\n\
    \    if(z==x) return x;\n    else if(z<x) return x;\n    else return z;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpm2mk9jbr: /tmp/tmpm2mk9jbr.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ >= 2);\n\n    // Sort in ascending order\n    std::sort(l.begin(), l.end());\n\
    \n    // If the size of the list is even, the median is the mean of the two middle\
    \ values.\n    // If the size of the list is odd, the median is the mean of the\
    \ middle value and the sum of the two middle values (rounded up to the next even\
    \ number).\n    if (l.size() % 2 == 0) {\n        return static_cast<float>((l[0]\
    \ + l[l.size()/2]) / 2.0);\n    } else {\n        return static_cast<float>((l[l.size()/2]\
    \ + l[l.size()/2-1]) / 2.0);\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbcgexhsp: /tmp/tmpbcgexhsp.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    return l[(l.size()+1)/2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpxq96vgbh: /tmp/tmpxq96vgbh.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ the array from greatest to least to preserve the original order.\n    sort(l.begin(),\
    \ l.end());\n    // Return greatest element of list if it is odd, otherwise return\
    \ least element.\n    if (l.size() % 2 == 1) {\n        return l[l.size() / 2];\n\
    \    }\n    else {\n        return -l[l.size() / 2];\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpxbd7nn5q: /tmp/tmpxbd7nn5q.cpp:22: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // code\
    \ here\n    // vector<int> l={2,3,5};\n    // for(int i=0;i<l.size();i++){\n \
    \   //     if(l[i]>l[i+1]){\n    //         l[i]=l[i+1];\n    //         l[i+1]=l[i];\n\
    \    //     }\n    // }\n    // return l[ls.size()/2];\n    \n    int n=l.size();\n\
    \    // cout << \"n=\" << n << endl;\n    if (n%2 == 1)\n        return l[n/2];\
    \ // odd number of elements\n    else // n is even\n        return (l[n/2] + l[n/2\
    \ - 1])/2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0b58eoe7: /tmp/tmp0b58eoe7.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size()/2, l.end());\n    return l.at(l.size()/2-1);\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpqmcq2uc5: /tmp/tmpqmcq2uc5.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ >= 2);\n  long l = static_cast<long>(l.size());\n  long middle = l / 2;\n  long\
    \ a = (l-1) / 2;\n  float b = a / 2.0F;\n  float c = l + 0.5F;\n  float ans =\
    \ (a+b+c) / 2.0F;\n  return ans;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae0xk37y.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpae0xk37y.cpp:10:8: error: declaration of \u2018long int l\u2019 shadows\
    \ a parameter\n   10 |   long l = static_cast<long>(l.size());\n      |      \
    \  ^\n/tmp/tmpae0xk37y.cpp:10:32: error: request for member \u2018size\u2019 in\
    \ \u2018l\u2019, which is of non-class type \u2018long int\u2019\n   10 |   long\
    \ l = static_cast<long>(l.size());\n      |                                ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    return l[(l.size()+1)/2-1];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmphipx6mpq: /tmp/tmphipx6mpq.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int n = l.size();\n\
    \  long long sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += l[i];\n  }\n\
    \  float result = sum / n;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp78kkmyxx: /tmp/tmp78kkmyxx.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    long mid = l.size() / 2;\n    float left = l[mid];\n    float right\
    \ = l[mid];\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i < mid)\
    \ {\n            if (l[i] > right) {\n                right = l[i];\n        \
    \    }\n        } else if (i > mid) {\n            if (l[i] < left) {\n      \
    \          left = l[i];\n            }\n        }\n    }\n    return (left + right)\
    \ / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdkiy2h7o: /tmp/tmpdkiy2h7o.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // sort\
    \ input vector first\n    std::sort(l.begin(), l.end());\n    // get middle element\
    \ (middle of the sorted vector)\n    auto middle = l.size() / 2;\n    // if size\
    \ is even middle is median\n    if (l.size() % 2 == 0) {\n        // if median\
    \ is less than first element\n        if (l[middle] < l[0]) {\n            //\
    \ return it\n            return l[middle];\n        }\n        // else median\
    \ is greater than first element\n        // check if middle element is greater\
    \ than first element\n        if (l[middle - 1] > l[middle]) {\n            //\
    \ return middle element\n            return l[middle];\n        }\n        //\
    \ else median is greater than first element and less than second element\n   \
    \     else {\n            // return middle element\n            return l[middle\
    \ - 1];\n        }\n    }\n    // if size is odd middle is median\n    else {\n\
    \        // if median is greater than first element\n        if (l[middle] > l[0])\
    \ {\n            // return it\n            return l[middle];\n        }\n    \
    \    // else median is less than first element\n        // check if middle element\
    \ is greater than first element\n        if (l[middle - 1] < l[middle]) {\n  \
    \          // return middle element\n            return l[middle];\n        }\n\
    \        // else median is greater than first element and less than second element\n\
    \        else {\n            // return middle element\n            return l[middle\
    \ - 1];\n        }\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0kizossw: /tmp/tmp0kizossw.cpp:55: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int size\
    \ = l.size();\n    if (size % 2 == 0) // Odd length list.\n        return l[(size\
    \ / 2)];\n    else // Even length list.\n        return (l[(size / 2) - 1] + l[(size\
    \ / 2)]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpe3yqnbcw: /tmp/tmpe3yqnbcw.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Sort l\
    \ first. O(n log n).\n\tstd::sort(l.begin(), l.end());\n\tint mid = l.size() /\
    \ 2;\n\tif (mid == 0)\n\t\treturn l[0];\n\tif (l.size() % 2 == 1)\n\t\treturn\
    \ l[mid - 1];\n\telse\n\t\treturn ((l[mid] + l[mid - 1]) / 2);\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpsi9vwhzo: /tmp/tmpsi9vwhzo.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\n\
    \    std::sort(l.begin(), l.end());\n    // find length\n    int length = l.size();\n\
    \    \n    if (length % 2 == 0) {\n        return (l[length / 2 - 1] + l[length\
    \ / 2]) / 2.0;\n    } else {\n        return l[length / 2];\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Sort elements\
    \ by their value.\n  std::sort(l.begin(), l.end());\n  \n  // Get median.\n  float\
    \ median = 0;\n  if (l.size() % 2 == 0) {\n    int mid = l.size() / 2;\n    median\
    \ = (l[mid] + l[mid - 1]) / 2;\n  }\n  else {\n    median = l[(l.size() / 2)];\n\
    \  }\n  return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpj4k3n6w9: /tmp/tmpj4k3n6w9.cpp:28: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 5}))) == (5.5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // your\
    \ code here\n    int n = l.size();\n    if (n % 2 == 0){\n        return (float(l[n\
    \ / 2] + l[n / 2 - 1])/2.0);\n    } else {\n        return (float(l[n / 2] + l[n\
    \ / 2 - 1]));\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphmtc3j6v: /tmp/tmphmtc3j6v.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long long\
    \ temp = 0;\n  long long n = l.size();\n  if (n & 1) return l[(n / 2) - 1];\n\
    \  for (int i = 0; i < n / 2; i++) temp = l[i];\n  int count = 0;\n  int max =\
    \ 0;\n  for (int i = 0; i < n; i++) {\n    temp += l[i];\n    if (temp > max)\
    \ {\n      max = temp;\n      count = 1;\n    } else if (temp == max) count++;\n\
    \  }\n  return count % 2 == 0 ? l[((n / 2) - 1)] : l[((n / 2) - 2) - 1] + l[((n\
    \ / 2) - 1)];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_iop963h: /tmp/tmp_iop963h.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ median_value = (llong) 0;\n    long long number_of_elements = l.size();\n  \
    \  long long max_value = number_of_elements - 1;\n    // If number of elements\
    \ is odd, then return middle element.\n    if (number_of_elements % 2 == 0) {\n\
    \        return l[max_value / 2];\n    }\n    // Find the middle of the list.\n\
    \    long long half_number = (max_value / 2) + 1;\n    // If list contains even\
    \ number of elements, then median is the middle element.\n    if (max_value %\
    \ 2 == 0) {\n        return l[half_number];\n    }\n    // If list contains odd\
    \ number of elements, then the median is middle - 1. \n    return l[half_number\
    \ - 1];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1w3zzm5m.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp1w3zzm5m.cpp:9:31: error: \u2018llong\u2019 was not declared in this\
    \ scope; did you mean \u2018ulong\u2019?\n    9 |     long long median_value =\
    \ (llong) 0;\n      |                               ^~~~~\n      |           \
    \                    ulong\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Sort list\
    \ l.\n  // >>> median([3, 1, 2, 4, 5])\n  // 3\n  // >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n  // 15.0\n  l.sort([](long a, long b) {return (a > b);});\n  // Find\
    \ median.\n  // >>> median([3, 1, 2, 4, 5])\n  // 3.0\n  // >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n  // 15.0\n  long mid = l.size() / 2;\n  assert(mid > 0);\n\
    \  return (l.at(mid) + l.at(mid)) / 2;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp414ua6m.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpp414ua6m.cpp:14:5: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018sort\u2019\n   14 |   l.sort([](long a, long b) {return\
    \ (a > b);});\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Sort\
    \ the list l.\n    sort(l.begin(), l.end());\n    // Return element with index\
    \ 0.\n    return l[0];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7q78sgn5: /tmp/tmp7q78sgn5.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long n =\
    \ l.size();\n  long mid = (n + 1) >> 1;\n  if (n == 0)\n    return 0.0f;\n  long\
    \ sum = 0;\n  for (long i = 0; i < mid; i++) {\n    sum += l[i];\n  }\n  return\
    \ sum / mid;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5t_rpiol: /tmp/tmp5t_rpiol.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0)\n        mid++;\n    long largest\
    \ = std::max(l[mid], l[0]);\n    if (largest == l[0])\n        return l[0];\n\
    \    long smallest = std::min(l[mid], l[0]);\n    if (largest == l[0])\n     \
    \   return l[0];\n    if (smallest == l[mid])\n        return l[mid];\n    return\
    \ (largest + smallest) / 2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpj9qg09p0: /tmp/tmpj9qg09p0.cpp:25: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    float mid = l.size() / 2;\n    return float (l[mid]);\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpjuyddi45: /tmp/tmpjuyddi45.cpp:16: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    float f = ((l[mid] + l[mid-1]) / 2.0f);\n    return f;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp8dtj95qo: /tmp/tmp8dtj95qo.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Your\
    \ code here\n    assert(l.size() >= 2);\n    std::nth_element(l.begin(), l.begin()\
    \ + l.size() / 2, l.end());\n    return l[l.size() / 2];\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4449fzqr: /tmp/tmp4449fzqr.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Number\
    \ of elements in list l.\n    int n = l.size();\n    if (n <= 1)\n        return\
    \ l[0];\n    // Sort the list l.\n    std::sort(l.begin(), l.end());\n    // Return\
    \ median.\n    return (float) n / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpb6od_ir5: /tmp/tmpb6od_ir5.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int a = (long long int)(l.size()/2);\n    long long int b = l.size() - a;\n\
    \    float mid = a;\n    mid = (float)(mid);\n    float x = 0;\n    if (b > 0)\
    \ {\n        x = ((float)(a+b))/2;\n    }\n    else x = ((float)(a))/2;\n    return\
    \ (mid-x);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpuit8hb_t: /tmp/tmpuit8hb_t.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    return l[l.size() / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpi2s84k9x: /tmp/tmpi2s84k9x.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::vector<long>\
    \ arr(l.size());\n  for (std::size_t i = 0; i < l.size(); i++)\n    arr[i] = l[i];\n\
    \  // Compute median by partitioning array around median.\n  // Median = (left\
    \ + right) / 2.\n  long lo = arr[0] / 2;\n  long hi = arr[-1] / 2;\n  long mid\
    \ = (lo + hi) / 2;\n  // If (lo + hi) / 2 overflows, partition\n  // lo to (hi\
    \ + lo) instead.\n  while (lo < hi) {\n    // mid = partition(arr, lo, hi);\n\
    \    if (arr[mid] < mid)\n      lo = mid + 1;\n    else\n      hi = mid - 1;\n\
    \    mid = (lo + hi) / 2;\n  }\n  return mid;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmppxxo_udh: /tmp/tmppxxo_udh.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    long mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian\
    \ = median(l, mid - 1, mid);\n    float rightMedian = median(l, mid + 1, l.size()\
    \ - 1);\n    return leftMedian + rightMedian;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2cxfrf_4.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp2cxfrf_4.cpp:12:46: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   12 |     float leftMedian = median(l,\
    \ mid - 1, mid);\n      |                                              ^\n/tmp/tmp2cxfrf_4.cpp:8:7:\
    \ note: declared here\n    8 | float median(std::vector<long> l) {\n      |  \
    \     ^~~~~~\n/tmp/tmp2cxfrf_4.cpp:13:56: error: too many arguments to function\
    \ \u2018float median(std::vector<long int>)\u2019\n   13 |     float rightMedian\
    \ = median(l, mid + 1, l.size() - 1);\n      |                               \
    \                         ^\n/tmp/tmp2cxfrf_4.cpp:8:7: note: declared here\n \
    \   8 | float median(std::vector<long> l) {\n      |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    long leftI = 0;\n    long rightI = mid;\n    while (leftI\
    \ < rightI) {\n        if (l[leftI] < l[rightI]) {\n            ++leftI;\n   \
    \     } else {\n            ++rightI;\n        }\n    }\n    return l[rightI];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvwmvr312: /tmp/tmpvwmvr312.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ sum = 0;\n    for (long long i = 0; i < l.size(); i++)\n        sum += l[i];\n\
    \n    float x = 0;\n    if (l.size() % 2 == 1) {\n        float median = (l[l.size()\
    \ / 2] + l[l.size() / 2 - 1]) / 2.0;\n        x = median;\n    }\n\n    float\
    \ a = 0, b = 0, c;\n    for (long long i = 0; i < l.size(); i++)\n        sum\
    \ += l[i];\n\n    float median = sum / l.size();\n    for (long long i = 0; i\
    \ < l.size(); i++)\n        if (l[i] < median) {\n            median = l[i];\n\
    \            a = b + 1;\n        }\n        else\n            b = i;\n    c =\
    \ b + 1 - a;\n    if (c < 0)\n        c = 0;\n    median = (b + a + c) / 2;\n\
    \    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpokvf20pj: /tmp/tmpokvf20pj.cpp:39: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // initialize\
    \ median as first element of l.\n    float mid = l[0];\n    // sort list l, place\
    \ the largest number at the\n    // beginning of l.\n    std::sort(l.begin(),\
    \ l.end());\n    // if there are more than two elements, return the\n    // average\
    \ of the two numbers\n    if (l.size() > 2) {\n        mid = static_cast<float>(l.size())\
    \ / 2;\n    }\n    // return the median of the list\n    return mid;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp17l4gq1y: /tmp/tmp17l4gq1y.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Sort list\
    \ l.\n  std::sort(l.begin(), l.end());\n  // Return median of elements in the\
    \ list l.\n  long size = l.size();\n  float pivot = l.at(size / 2);\n  float total\
    \ = pivot;\n  for (int i = 0; i < size; i++)\n    if (pivot > l[i])\n      total\
    \ -= l[i];\n    else if (pivot < l[i])\n      total += l[i];\n  return total;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpg097ehxk: /tmp/tmpg097ehxk.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return l.size() == 0 || l.size() == 1 ? l[0] : (l.size() % 2 ==\
    \ 0) ?\n      ((l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0) : (l[l.size() /\
    \ 2] + l[l.size() / 2 - 1]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpjj8jqjyr: /tmp/tmpjj8jqjyr.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Find\
    \ half of list length.\n    size_t half_size = l.size() / 2;\n    // Check if\
    \ list is even or odd.\n    if (l.size() % 2 == 0)\n        return l[half_size];\n\
    \n    // If even, recurse on even half, otherwise on odd half.\n    return median(l.begin()\
    \ + half_size, l.begin() + half_size, l.end());\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp11axx1s0.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp11axx1s0.cpp:16:29: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)half_size))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  16 |     return median(l.begin() + half_size, l.begin() + half_size, l.end());\n\
    \      |                   ~~~~~~~~~~^~~~~~~~~~~\n      |                    \
    \         |\n      |                             __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0)\n        return 0.0f;\n    long m = l[l.size()/2];\n    for (size_t i\
    \ = l.size()/2; i < l.size(); i++)\n        m = std::max(m, l[i]);\n    return\
    \ m/2.0f;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9mrkwuuc: /tmp/tmp9mrkwuuc.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long mid\
    \ = (long) l.size() / 2;\n  std::nth_element(l.begin(), l.begin() + mid, l.end());\n\
    \  long left = mid;\n  long right = mid;\n  while (left <= right) {\n    if (l[left]\
    \ <= l[right]) left++;\n    else right--;\n  }\n  return l[right];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpygqrm7ct: /tmp/tmpygqrm7ct.cpp:22: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2)\n        return l[mid];\n    float p1\
    \ = median(l.substr(0, mid));\n    float p2 = median(l.substr(mid));\n    return\
    \ (p1 + p2) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4tzlplba.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp4tzlplba.cpp:12:25: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018substr\u2019\n   12 |     float p1 = median(l.substr(0,\
    \ mid));\n      |                         ^~~~~~\n/tmp/tmp4tzlplba.cpp:13:25:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   13 |     float p2 = median(l.substr(mid));\n      |                     \
    \    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tstd::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n\tlong mid = l.size() / 2;\n\tif (l.size()\
    \ % 2 != 0)\n\t\treturn l[mid];\n\telse\n\t\treturn (float) (l[mid] + l[mid-1]);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpgh67b53i: /tmp/tmpgh67b53i.cpp:19: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::nth_element(l.begin(),\
    \ l.begin() + l.size() / 2, l.end());\n  return *std::max_element(l.begin(), l.begin()\
    \ + l.size() / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyav9c2q2: /tmp/tmpyav9c2q2.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // If vector\
    \ is empty, return 0\n  if (l.empty()) {\n    return 0.0;\n  }\n  // Find the\
    \ midpoint\n  long mid = l.size() / 2;\n  // If the midpoint is odd, return the\
    \ average of the middle two\n  if (mid % 2 == 1) {\n    return l[mid/2];\n  }\n\
    \  // Otherwise, return the middle element\n  return l[mid];\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_3tkvh_7: /tmp/tmp_3tkvh_7.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int mid\
    \ = (l.size() + 1) / 2;\n    if (l.size() % 2)\n        return l[mid];\n    else\
    \ return l[mid] - l[mid - 1] / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5qqn8fe_: /tmp/tmp5qqn8fe_.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Write\
    \ your code here.\n  // std::vector<long double> l_copy;\n  // for(long double\
    \ i:l)\n  //     l_copy.push_back(i);\n  // sort(l_copy.begin(), l_copy.end());\n\
    \  // return l_copy[l_copy.size() / 2];\n  \n  // Time Complexity\n  //     Time\
    \ complexity O(N)\n  //     Space complexity O(N)\n  // In above code, N denotes\
    \ the number of elements in given list\n  // To sort a list, we have to traverse\
    \ through all the elements of the list, that\n  // takes O(N) time. Thus total\
    \ time complexity becomes O(N^2) and space complexity becomes O(N)\n  \n  // Alternative\
    \ solution\n  \n  // Write your code here.\n  \n  \n  // Time Complexity\n  //\
    \     Time complexity O(N.log(N))\n  //     Space complexity O(1)\n  // In above\
    \ code, N denotes the number of elements in given list\n  // To sort a list, we\
    \ have to traverse through all the elements of the list, that\n  // takes O(N.log(N))\
    \ time. Thus total time complexity becomes O(N.log(N)) and space complexity becomes\
    \ O(1)\n  \n  // Alternative solution\n  \n  // Write your code here.\n  \n  \n\
    \  // Time Complexity\n  //     Time complexity O(Nlog(N))\n  //     Space complexity\
    \ O(1)\n  // In above code, N denotes the number of elements in given list\n \
    \ // To sort a list, we have to traverse through all the elements of the list,\
    \ that\n  // takes O(Nlog(N)) time. Thus total time complexity becomes O(Nlog(N))\
    \ and space complexity becomes O(1)\n  \n  // Alternative solution\n  \n  // Write\
    \ your code here.\n  \n  \n  // Time Complexity\n  //     Time complexity O(NlogN)\n\
    \  //     Space complexity O(1)\n  // In above code, N denotes the number of elements\
    \ in given list\n  // To sort a list, we have to traverse through all the elements\
    \ of the list, that\n  // takes O(NlogN) time. Thus total time complexity becomes\
    \ O(NlogN) and space complexity becomes O(1)\n  \n  // Alternative solution\n\
    \  \n  // Write your code here.\n  \n  \n  // Time Complexity\n  //     Time complexity\
    \ O(NlogN)\n  //     Space complexity O(1)\n  // In above code, N denotes the\
    \ number of elements in given list\n  // To sort a list, we have to traverse through\
    \ all the elements of the list, that\n  // takes O(NlogN) time. Thus \n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpegocyzyp: /tmp/tmpegocyzyp.cpp:73: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()\
    \ >= 2);\n\tlong mid = l.size() / 2;\n\tlong a1 = l[mid];\n\tlong a2 = l[mid+1];\n\
    \tif (l.size() % 2 == 1)\n\t\treturn a2;\n\telse\n\t\treturn (static_cast<float>(a1)\
    \ + static_cast<float>(a2)) / 2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpy96vct1x: /tmp/tmpy96vct1x.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    auto middle\
    \ = (l.size() / 2) + 1;\n    // Sort list\n    sort(l.begin(), l.end());\n   \
    \ if (middle == l.size()) return l[0];\n    if (middle > l.size()) return l.front();\n\
    \    long sum = 0;\n    for (int i = 0; i < middle; ++i) {\n        sum += l[i];\n\
    \    }\n    return (float(sum) / middle);\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9_pi24t_: /tmp/tmp9_pi24t_.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    long l = l.size() / 2;\n    return l[l % l.size()];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxb7bl4zy.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpxb7bl4zy.cpp:10:10: error: declaration of \u2018long int l\u2019 shadows\
    \ a parameter\n   10 |     long l = l.size() / 2;\n      |          ^\n/tmp/tmpxb7bl4zy.cpp:10:16:\
    \ error: request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   10 |     long l = l.size() / 2;\n      |     \
    \           ^~~~\n/tmp/tmpxb7bl4zy.cpp:11:20: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long int\u2019\n\
    \   11 |     return l[l % l.size()];\n      |                    ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 2);\n    long x = l.front();\n    for (std::vector<long>::const_iterator it\
    \ = l.begin() + 1; it != l.end(); ++it) {\n        if (x < *it) {\n          \
    \  x = *it;\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpr6ectz_t: /tmp/tmpr6ectz_t.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float x\
    \ = 0;\n    float y = 0;\n    float avg = 0;\n\n    for (int i = 0; i < l.size();\
    \ i++) {\n        x = x + l[i];\n        y = y + i;\n    }\n    avg = x/y;\n \
    \   return avg;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpew_i9jwj: /tmp/tmpew_i9jwj.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    if (n <= 1) {\n        return l[0];\n    }\n\n    std::vector<long>\
    \ med;\n    std::nth_element(l.begin(), l.begin() + n-1, l.end());\n    med.push_back(l[n-1]);\n\
    \n    if (n % 2 == 1) {\n        return std::min(med[1], med[n/2]);\n    }\n \
    \   return med[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7ygyd8l: /tmp/tmpb7ygyd8l.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::nth_element(l.begin(),\
    \ l.begin() + l.size()/2, l.end()); \n    return l[l.size()/2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvfcx2076: /tmp/tmpvfcx2076.cpp:15: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float mid\
    \ = l.size() / 2;\n    if (l.size() == 0)\n        return -1;\n    else if (l.size()\
    \ == 1)\n        return l[0];\n    else if (l.size() % 2 == 0) {\n        return\
    \ std::max<long>(l[mid], l[l.size()/2 - 1]);\n    }\n    else {\n        std::vector<long>\
    \ l2 = l;\n        l2.insert(l2.begin() + mid, 0);\n        l2.insert(l2.begin()\
    \ + mid, 0);\n        return std::max<long>(l[mid], std::max<long>(l2[mid], l[l.size()/2\
    \ - 1]));\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpikt5uxij: /tmp/tmpikt5uxij.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ >= 2);\n    long mid = l.size() / 2;\n    float midVal = l[mid];\n    return\
    \ midVal == l[mid-1] ? midVal : (midVal+l[mid])/2.f;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbzb6upit: /tmp/tmpbzb6upit.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int l =\
    \ l.size();\n    assert(l % 2 == 0);\n    if (l == 0)\n        return 0;\n   \
    \ int mid = (l - 1) / 2;\n    if (l%2 == 1)\n        return l[mid + 1];\n    return\
    \ ((l[mid + 1] + l[mid]) / 2.0);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnttgp8iy.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpnttgp8iy.cpp:9:9: error: declaration of \u2018int l\u2019 shadows a\
    \ parameter\n    9 |     int l = l.size();\n      |         ^\n/tmp/tmpnttgp8iy.cpp:9:15:\
    \ error: request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018int\u2019\n    9 |     int l = l.size();\n      |               ^~~~\n\
    /tmp/tmpnttgp8iy.cpp:15:25: error: invalid types \u2018int[int]\u2019 for array\
    \ subscript\n   15 |         return l[mid + 1];\n      |                     \
    \    ^\n/tmp/tmpnttgp8iy.cpp:16:23: error: invalid types \u2018int[int]\u2019\
    \ for array subscript\n   16 |     return ((l[mid + 1] + l[mid]) / 2.0);\n   \
    \   |                       ^\n/tmp/tmpnttgp8iy.cpp:16:32: error: invalid types\
    \ \u2018int[int]\u2019 for array subscript\n   16 |     return ((l[mid + 1] +\
    \ l[mid]) / 2.0);\n      |                                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    long size = l.size();\n    if(size%2==0){\n        return\
    \ l[size/2];\n    }else{\n        return (l[size/2] + l[size/2-1])/2.0;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7tr8jftp: /tmp/tmp7tr8jftp.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
