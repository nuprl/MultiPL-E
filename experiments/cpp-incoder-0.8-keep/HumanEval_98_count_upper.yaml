name: HumanEval_98_count_upper
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the\
  \ number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf')\
  \ returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns\
  \ 0\nlong count_upper(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"\
  aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"\
  dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"\
  U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
  EEEE\")) == (2));\n}\n"
completions: ["  // Write your code here.\n  long ans = 0;\n  for (int i = 0; i <\
    \ s.size(); ++i) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      ans += (s[i]\
    \ <= 'a' ? 1 : 0);\n    }\n  }\n  return ans;", "    long count = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if((i % 2) == 0 && s[i] >= 'A' &&\
    \ s[i] <= 'Z')\n            count++;\n    }\n    return count;", "     long countUpper=0;\n\
    \     int i;\n     for (i=0;i<s.length();i++)\n     {\n         if (s[i]=='A'\
    \ || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')\n         {\n         \
    \    countUpper +=1;\n         }\n     }\n    return countUpper;", "     long\
    \ long int even_cnt=0;\n     int n=s.size();\n     for(int i=0;i<n;i++)\n    \
    \ {\n         if(s[i]==('a' || 'e' || 'i' || 'o' || 'u'))\n         {\n      \
    \       even_cnt++;\n         }\n     }\n     return even_cnt;", "    int count1=0,\
    \ count2=0;\n    long ans=0;\n    for(int i=0; i<s.length(); i++) {\n        if(s[i]=='A'\
    \ || s[i]=='a') {\n            count1+=2;\n        }\n        else if(s[i]=='B'\
    \ || s[i]=='b') {\n            count1+=1;\n        }\n        else if(s[i]=='C'\
    \ || s[i]=='c') {\n            count2+=2;\n        }\n        else if(s[i]=='D'\
    \ || s[i]=='d') {\n            count2+=1;\n        }\n        else if(s[i]=='E'\
    \ || s[i]=='e') {\n            count1+=1;\n            count2+=1;\n        }\n\
    \        else if(s[i]=='F' || s[i]=='f') {\n            count1+=1;\n         \
    \   count2+=1;\n        }\n        else if(s[i]=='G' || s[i]=='g') {\n       \
    \     count1+=2;\n            count2+=2;\n        }\n        else if(s[i]=='H'\
    \ || s[i]=='h') {\n            count1+=2;\n            count2+=1;\n        }\n\
    \        else if(s[i]=='I' || s[i]=='i') {\n            count1+=1;\n         \
    \   count2+=1;\n        }\n        else if(s[i]=='J' || s[i]=='j') {\n       \
    \     count1+=1;\n            count2+=2;\n        }\n        else if(s[i]=='K'\
    \ || s[i]=='k') {\n            count1+=2;\n            count2+=2;\n        }\n\
    \        else if(s[i]=='L' || s[i]=='l') {\n            count1+=2;\n         \
    \   count2+=1;\n        }\n        else if(s[i]=='M' || s[i]=='m') {\n       \
    \     count1+=2;\n            count2+=2;\n        }\n        else if(s[i]=='N'\
    \ || s[i]=='n') {\n            count1+=2;\n            count2+=1;\n        }\n\
    \        else if(s[i]=='O' || s[i]=='o') {\n            count1+=1;\n         \
    \   count2+=1;\n        }\n        else if(s[i]=='P' || s[i]=='p') {\n       \
    \     count1+=1;\n            count2+=2;\n        }\n        else if(s[i]=='Q'\
    \ || s[i]=='q') {\n            count1+=2;\n            count2+=2;\n        }\n\
    \        else if(s[i]=='R' || s[i]=='r') {\n            count1+=2;\n         \
    \   count2+=1;\n        }\n        else if(s[i]=='S' || s[i]=='s') {\n       \
    \     count1+=2;\n            count2+=1;\n        }\n        else if(s[i]=='T'\
    \ || s[i]=='t') {\n            count1+=2;\n            count2+=2;\n        }\n\
    \        else if(s[i]=='U' || s[i]=='u') {\n            count1+=1;", "   int n\
    \ = s.size();\n   long ans = 0;\n   assert(n % 2 == 0);\n   int i = 1;\n   while(i\
    \ < n) {\n      char c = s[i];\n      if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n         ans += 1;\n      }\n      i += 2;\n   }\n  \
    \ return ans;", "    int n = s.length();\n    long ans = 0;\n    for (int i =\
    \ 0; i < n; ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            ans\
    \ += 1;\n        }\n        else if (s[i] >= 'a' && s[i] <= 'z') {\n         \
    \   ans += 1;\n        }\n        else if (s[i] >= '0' && s[i] <= '9') {\n   \
    \         ans += 1;\n        }\n    }\n    return ans;", "    // Write your code\
    \ here\n    long int ans = 0;\n    long int i = 0;\n    while (i<s.length()){\n\
    \        if (s[i]>=65 && s[i]<=90){\n            ans += 1;\n        }\n      \
    \  i += 1;\n    }\n    return ans;", "    long count = 0;\n    // Check for empty\
    \ string\n    if (s.empty()) {\n        return 0;\n    }\n    // Check for only\
    \ lowercase vowels\n    for (int i = 0; i < s.length(); i++) {\n        char c\
    \ = s[i];\n        if (c >= 'a' && c <= 'z') {\n            count += 1;\n    \
    \    }\n    }\n    for (int i = 0; i < s.length(); i += 2) {\n        char c =\
    \ s[i];\n        if (c >= 'a' && c <= 'z') {\n            count += 1;\n      \
    \  }\n    }\n    return count;", "    long count = 0;\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n         \
    \   count += (s[i] - 'A') % 2;\n        }\n    }\n    return count;", "    int\
    \ count = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i]\
    \ == 'A' || s[i] == 'a' || s[i] == 'B' || s[i] == 'b' || s[i] == 'C' || s[i] ==\
    \ 'c' || s[i] == 'D' || s[i] == 'd' || s[i] == 'E' || s[i] == 'e' || s[i] == 'F'\
    \ || s[i] == 'f' || s[i] == 'G' || s[i] == 'g' || s[i] == 'H' || s[i] == 'h' ||\
    \ s[i] == 'I' || s[i] == 'i' || s[i] == 'J' || s[i] == 'j' || s[i] == 'K' || s[i]\
    \ == 'k' || s[i] == 'L' || s[i] == 'l' || s[i] == 'M' || s[i] == 'm' || s[i] ==\
    \ 'N' || s[i] == 'n' || s[i] == 'O' || s[i] == 'o' || s[i] == 'P' || s[i] == 'p'\
    \ || s[i] == 'Q' || s[i] == 'q' || s[i] == 'R' || s[i] == 'r' || s[i] == 'S' ||\
    \ s[i] == 's' || s[i] == 'T' || s[i] == 't' || s[i] == 'U' || s[i] == 'u' || s[i]\
    \ == 'V' || s[i] == 'v' || s[i] == 'W' || s[i] == 'w' || s[i] == 'X' || s[i] ==\
    \ 'x' || s[i] == 'Y' || s[i] == 'y' || s[i] == 'Z' || s[i] == 'z')\n         \
    \   count++;\n    }\n    return count;", "    long count = 0;\n    for (auto itr\
    \ = s.cbegin(); itr < s.cend(); itr++) {\n        auto temp = *itr;\n        if\
    \ (temp == 'A' || temp == 'a' || temp == 'E' || temp == 'e' || temp == 'I' ||\
    \ temp == 'i' || temp == 'O' || temp == 'o' || temp == 'U' || temp == 'u') {\n\
    \            count++;\n        }\n    }\n    return count;", "    long ans = 0;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        char c = s[i];\n        if\
    \ (((i + 1) % 2) == 0 && ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    long cnt = 0;\n\
    \    for (long i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            cnt += (s[i] - 'a' > 'A' - s[i] - 'a');\n        }\n   \
    \ }\n    return cnt;", "\t// Write your code here.\n\tint n=s.size();\n\tint count=0;\n\
    \tfor(int i=0;i<n;i++)\n\t{\n\t\tif(s[i]==s[(i+1)%n]&&s[i]==s[(i+2)%n])\n\t\t\
    {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "  int vowels = 0;\n  for (int\
    \ i = 0; i < s.size(); ++i) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U') {\n      vowels++;\n    }\n  }\n  return vowels;",
  "    long ans = 0;\n    for (long i = 0; i < s.length(); i++) {\n        if ((s[i]\
    \ >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "  long res = 0;\n  for (int i = 0; i < s.size();\
    \ i += 2)\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\
    \ s[i] == 'U')\n      res++;\n  return res;", "  int cnt = 0;\n  for (int i =\
    \ 0; i < s.size(); ++i) {\n    if (isupper(s[i])) ++cnt;\n    if (i % 2 == 0 &&\
    \ !isupper(s[i])) cnt += 1;\n  }\n  return cnt;", "    // write your code here\n\
    \    // string vowels[6] = {\"a\",\"e\",\"i\",\"o\",\"u\"};\n    string vowels[]\
    \ = {\"a\",\"e\",\"i\",\"o\",\"u\"};\n    long answer = 0;\n    for(int i = 0;\
    \ i < s.size(); i++)\n    {\n        if(s[i] != vowels[i])\n        {\n      \
    \      answer++;\n        }\n    }\n    return answer;", "  // code here\n  long\
    \ long N = (long long)s.size();\n  long long ans = 0;\n  for (int i = 0; i < N;\
    \ i++)\n    if (s[i] >= 'a' && s[i] <= 'z')\n      ans += N % 2 == 0 ? 1 : 0;\n\
    \  \n  return ans;", "  int upperCount = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    // if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u')\n    if (s[i] >= 'A' && s[i] <= 'Z')\n      upperCount++;\n\
    \  }\n  return upperCount;", "    long ans = 0;\n    for (int i = 0; i < (int)s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n                ans++;\n            }\n        }\n    }\n\
    \    return ans;", "    int n = s.size();\n    long int arr[n];\n    for (int\
    \ i = 0; i < n; i++) {\n        arr[i] = 0;\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        if (s[i] != s[i]) arr[i]++;\n    }\n    for (int i = 0; i <\
    \ n; i++) {\n        if (i % 2 == 0) arr[i] /= 2;\n    }\n    return arr[n-1];",
  "    long vowels = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        if (i %\
    \ 2 == 0) vowels += toupper(s[i] - 'A');\n    }\n    return vowels;", "  long\
    \ n = 0;\n  for (int i = 0, l = s.length(); i < l; i++) {\n    if (s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n      n++;\n \
    \ }\n  return n;", "    long ans=0;\n    for(int i=0 ; i<s.length() ; i++) {\n\
    \        long count = 0;\n        for(int j=0 ; j<s.length() ; j++) {\n      \
    \      if(s[i]+s[j]>='A' && s[i]+s[j]<='Z') {\n                count++;\n    \
    \        }\n        }\n        if(count%2==0) {\n            ans++;\n        }\n\
    \    }\n    return ans;", "  int len = s.size();\n  int count = 0;\n  for (int\
    \ i = 0; i < len; i++) {\n    if (isupper(s.at(i))) {\n      count += 1;\n   \
    \   i += 2;\n      continue;\n    }\n    if (isupper(s.at(i + 1)))\n      i +=\
    \ 1;\n  }\n  return count;", "  int n = s.size();\n  long ans = 0;\n  for (int\
    \ i = 0; i < n; i++) {\n    if ((s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' &&\
    \ s[i] <= 'z')) {\n      ans += (s[i] - 'A') % 2; // even indices.\n    }\n  }\n\
    \  return ans;", "    int n = s.length();\n    long count = 0;\n    int start\
    \ = 0;\n    while (start < n) {\n        int end = s.find_first_not_of(\"aeiou\"\
    , start);\n        if (end == std::string::npos) break;\n        if (s[end] ==\
    \ 'e') count++;\n        if (s[end] == 'i') count++;\n        if (s[end] == 'o')\
    \ count++;\n        if (s[end] == 'u') count++;\n        start = end + 1;\n  \
    \  }\n    return count;", "    long sum = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s.at(i) == 'a' || s.at(i) == 'e' || s.at(i) == 'i' || s.at(i)\
    \ == 'o' || s.at(i) == 'u')\n            sum++;\n        if (s.at(i) == 'A' ||\
    \ s.at(i) == 'E' || s.at(i) == 'I' || s.at(i) == 'O' || s.at(i) == 'U')\n    \
    \        sum++;\n    }\n    return sum;", "  long ans = 0;\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z')\n      ans++;\n\
    \    else\n      ans = 0;\n  }\n  return ans;", "\tint even = 0;\n\tint upper\
    \ = 0;\n\tfor (int i = 0; i < (int) s.length(); i++) {\n\t\tif (s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\t\t\teven++;\n\
    \t\t} else {\n\t\t\tupper++;\n\t\t}\n\t}\n\treturn even * 2 + upper;", "  long\
    \ count = 0;\n  for (int i = 0; i < s.size(); i++)\n    if (s[i] == 'A' || s[i]\
    \ == 'a' || s[i] == 'B' || s[i] == 'b')\n      count++;\n  return count;", " \
    \   long result = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        bool\
    \ cond = (s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z');\n     \
    \   result += cond ? 1 : 0;\n    }\n    return result;", "    int count = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I'|| s[i] == 'O' || s[i] == 'U'){\n            count++;\n  \
    \      } else if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u') {\n            count = 0;\n        }\n    }\n    return count;",
  "    long count = 0L;\n    for (long i = 0; i < s.size(); i++) {\n        if ((s[i])\
    \ >= 'a' && s[i] <= 'z' && ((s[i]) != 'A' || (s[i]) != 'B') &&\n            (s[i])\
    \ != 'C' && (s[i]) != 'D' && (s[i]) != 'E' && (s[i]) != 'F') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long long int ans = 0;\n    int i=0;\n\
    \    for(i=0;i<s.length();i++){\n        if(s[i] == 'A' || s[i] == 'a' || s[i]\
    \ == 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] ==\
    \ 'o' || s[i] == 'U' || s[i] == 'u')\n            ans++;\n    }\n    return ans;",
  "    long ans = 0;\n    for (int i = 0; i < (int) s.size(); i++) {\n        if ((i\
    \ % 2) == 0) {\n            if (s[i] == 'A' || s[i] == 'a') ans++;\n        }\n\
    \    }\n    return ans;", "    std::stack<char> s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U' || s[i] == 'Y')\n            s.push(s[i]);\n        else if (s.empty())\n\
    \            return 0;\n        else if (s[i] == 'B')\n            s.pop();\n\
    \        else if (s[i] == 'C')\n            s.pop();\n        else if (s[i] ==\
    \ 'D')\n            s.pop();\n        else if (s[i] == 'F')\n            s.pop();\n\
    \        else if (s[i] == 'G')\n            s.pop();\n    }\n    if (s.empty())\n\
    \        return 0;\n    return s.size();", '    // Your code goes here', "   \
    \ long count=0;\n    for(int i=0;i<s.length();++i)\n    {\n        if(s[i]>='A'&&s[i]<='Z')\n\
    \            count+=((s[i]-'A')%2)==0;\n    }\n    return count;", "    long counter\
    \ = 0;\n    long i = 0;\n    for (i = 0; i <= s.length()/2; i++) {\n        if\
    \ (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i] == 'I' ||\
    \ s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] == 'u') {\n\
    \            counter++;\n        }\n    }\n    return counter;", "  assert(s.size()\
    \ > 0);\n  int upper = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (isupper(s[i])\
    \ == 1) {\n      upper++;\n    }\n  }\n  return upper;", "    long ans = 0;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if ((i % 2) == 0) {\n     \
    \       if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u') {\n                ans++;\n            }\n        }\n    }\n    return\
    \ ans;", "    long count = 0;\n    long n = s.length();\n    for (int i = 0; i\
    \ < n; ++i) {\n        // Only uppercase letters get counted\n        if (std::toupper(s[i])\
    \ == 'A') {\n            count++;\n            i += 2;\n        } else if (std::toupper(s[i])\
    \ == 'E') {\n            i += 2;\n        } else if (std::toupper(s[i]) == 'I')\
    \ {\n            i += 2;\n        } else if (std::toupper(s[i]) == 'O') {\n  \
    \          i += 2;\n        } else if (std::toupper(s[i]) == 'U') {\n        \
    \    i += 2;\n        }\n    }\n    return count;", "\t// code here\n\tassert(s.length()>=2);\n\
    \tlong res = 0;\n\tfor (auto c : s) {\n\t\tif (isupper(c)) {\n\t\t\tres+=1;\n\t\
    \t}\n\t}\n\treturn res;", "   long ans = 0, n = s.length(), idx = 0;\n   while\
    \ (idx < n) {\n      if (s[idx] >= 'A' && s[idx] <= 'Z') {\n         ans++;\n\
    \      }\n      idx++;\n   }\n   return ans;", "  int count = 0; // Initialize\
    \ counter\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n      count++;\n   \
    \ }\n  }\n  return count;", "    long count = 0;\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u')\n            count++;\n    }\n    return count;", "   std::map<char,\
    \ int> m;\n   for (char c: s)\n      ++m[c];\n   for (int i = 0; i < s.size();\
    \ ++i)\n      if (i % 2 == 0 && m.at(s[i]) >= 2) // odd index \n         return\
    \ 0;\n   return s.size();", "    int n = s.length();\n    long ans = 0;\n    for\
    \ (int i = 0; i < (n-1); i++)\n    {\n        if ((s[i] == 'A') || (s[i] == 'E')\
    \ || (s[i] == 'I') || (s[i] == 'O') || (s[i] == 'U'))\n        {\n           \
    \ ans += 1;\n        }\n    }\n    return ans;", "    long ans=0;\n    for(int\
    \ i=0; i<s.length(); i++)\n        if(s[i]=='a' || s[i]=='A')\n            ans++;\n\
    \    return ans;", "    long res = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            if (s[i] != 'a' &&\
    \ s[i] != 'e' && s[i] != 'i' &&\n                s[i] != 'o' && s[i] != 'u')\n\
    \                res++;\n        }\n    }\n    return res;", "    long ans = 0;\n\
    \    for (int i = 0; i < s.length(); i += 2)\n        if (s[i] == 'A' || s[i]\
    \ == 'a')\n            ans++;\n    return ans;", "    long ans = 0, i;\n    for(i\
    \ = 0; i < s.length(); i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'){\n            ans ++;\n        }\n    }\n   \
    \ return ans;", "    // Initialize all counters to 0.\n    long ans = 0;\n   \
    \ int len = s.size();\n    for (int i = 0; i < len; i++) {\n        char c = s[i];\n\
    \        // If the character is uppercase vowel then add one to ans.\n       \
    \ if ('A' <= c && c <= 'Z')\n            ans += 1;\n        // If an even index\
    \ is found an uppercase vowel then add one to\n        // ans.\n        if ((i\
    \ + 1) % 2 == 0 && 'A' <= c && c <= 'Z')\n            ans += 1;\n    }\n    return\
    \ ans;", "    int n = s.size();\n    long ans = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        if (isupper(s[i])) {\n            ans++;\n        }\n      \
    \  if ((i + 1) % 2 == 0 && ans > 0) {\n            ans++;\n        }\n    }\n\
    \    return ans;", "\t// Complete this function\n\tint even_index_sum = 0;\n\t\
    int even_index_count = 1;\n\tfor (char c : s) {\n\t\tif (c >= 'a' && c <= 'z')\n\
    \t\t\teven_index_sum += c - 'a' + even_index_count;\n\t\teven_index_count += 1;\n\
    \t}\n\tif (even_index_sum % 2 == 0)\n\t\treturn even_index_sum / 2;\n\telse\n\t\
    \treturn even_index_sum / 2 + 1;", "    long vowels = 0 ;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E'\
    \ || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' ||\
    \ s[i] == 'U' || s[i] == 'u') {\n            vowels += 2 ;\n        }\n    }\n\
    \    return vowels ;", "    long even = 0;\n    int n = s.size();\n    for(int\
    \ i = 0; i<n; i++)\n    {\n        if(s[i]=='a')\n        {\n            if(s[i]=='A')\n\
    \            {\n                even++;\n            }\n            else\n   \
    \         {\n                even--;\n            }\n        }\n    }\n    return\
    \ even;", '  // code here', "    long count = 1;\n    for (long i = 0; i < s.size();\
    \ ++i) if (s[i] == 'A' || s[i] == 'a') ++count;\n    for (long i = 0; i < s.size();\
    \ ++i) if (s[i] == 'E' || s[i] == 'e') ++count;\n    for (long i = 0; i < s.size();\
    \ ++i) if (s[i] == 'I' || s[i] == 'i') ++count;\n    for (long i = 0; i < s.size();\
    \ ++i) if (s[i] == 'O' || s[i] == 'o') ++count;\n    for (long i = 0; i < s.size();\
    \ ++i) if (s[i] == 'U' || s[i] == 'u') ++count;\n    for (long i = 0; i < s.size();\
    \ ++i) if (s[i] == 'Y' || s[i] == 'y') ++count;\n    return count;", "    if (s.empty())\
    \ return 0;\n    int cnt = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n \
    \       char ch = s[i];\n        if (std::isupper(ch)) {\n            cnt += (s[i]\
    \ - 'A') % 2 == 0;\n        }\n    }\n    return cnt;", "    long count = 0;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        char c = s[i];\n     \
    \   if (std::isupper(c)) {\n            if (i % 2 == 0)\n                count++;\n\
    \        }\n    }\n    return count;", "    long n = 0;\n    for (std::size_t\
    \ i = 0; i != s.length(); ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \            n += s[i] - 'A';\n        }\n    }\n    return n;", "    long ans\
    \ = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            ans ++;\n\
    \        }\n    }\n    return ans;", "\tint i, j, count=0; \n\tfor (size_t i =\
    \ 0; i < s.size(); i++)\n\t{\n\t\tif (s[i] == 'a' || s[i] == 'A')\n\t\t{\n\t\t\
    \tfor (j = i+1; j < s.size(); j++)\n\t\t\t{\n\t\t\t\tif (s[j] == 'e' || s[j] ==\
    \ 'E')\n\t\t\t\t{\n\t\t\t\t\tcount ++;\n\t\t\t\t\ti = j-1;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    assert(s.length() >= 2);\n\
    \    long ans = 0;\n    for (int i = 0; i < (int) s.length() - 1; ++i) {\n   \
    \     if (s[i] == 'A' || s[i] == 'a')\n            ans++;\n        else if (s[i]\
    \ == 'E' || s[i] == 'e')\n            ans++;\n        else if (s[i] == 'I' ||\
    \ s[i] == 'i')\n            ans++;\n        else if (s[i] == 'O' || s[i] == 'o')\n\
    \            ans++;\n        else if (s[i] == 'U' || s[i] == 'u')\n          \
    \  ans++;\n    }\n    return ans;", "    int count_upper = 0;\n    for (int i\
    \ = 0; i <s.size(); i++) {\n        if (s[i] == 'A' && s[i + 1] == 'B' || s[i]\
    \ == 'B' && s[i + 1] == 'A') {\n            count_upper++;\n        }\n    }\n\
    \    return count_upper;", "    long count = 0;\n    for (auto &i : s) {\n   \
    \     if (i % 2 != 0)\n            count++;\n    }\n    return count;", "    long\
    \ count = 0;\n    // Use two pointers\n    for (auto it = s.begin(); it != s.end();\
    \ ++it) {\n        if (*it == 'A' || *it == 'a') {\n            ++count;\n   \
    \     } else if (*it == 'E' || *it == 'e') {\n            ++count;\n        }\
    \ else if (*it == 'I' || *it == 'i') {\n            ++count;\n        } else if\
    \ (*it == 'O' || *it == 'o') {\n            ++count;\n        } else if (*it ==\
    \ 'U' || *it == 'u') {\n            ++count;\n        }\n    }\n    return count;",
  "  int n = s.size();\n  long ans = 0;\n  assert(n > 0);\n  for (int i = 0; i < n;\
    \ ++i) {\n    if (isupper(s[i])) {\n      ans++;\n    }\n    else if (islower(s[i]))\
    \ {\n      ans += 2;\n    }\n  }\n  return ans;", "    long ans = 0;\n    for\
    \ (int i = 0; i < s.length(); ++i) {\n        char ch = s[i];\n        if (ch\
    \ == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch\
    \ == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            ans++;\n     \
    \   }\n    }\n    return ans;", "    long ans = 0;\n    long even_index = 0;\n\
    \    for (long i = 0; i < s.length(); i++) {\n        if (s[i] == 'a') {\n   \
    \         even_index += 2;\n        }\n        else if (s[i] == 'b') {\n     \
    \       even_index += 1;\n        }\n        else if (s[i] == 'c') {\n       \
    \     even_index += 1;\n        }\n        else if (s[i] == 'd') {\n         \
    \   even_index += 1;\n        }\n        else if (s[i] == 'e') {\n           \
    \ even_index += 1;\n        }\n        else if (s[i] == 'f') {\n            even_index\
    \ += 1;\n        }\n        else if (s[i] == 'g') {\n            even_index +=\
    \ 1;\n        }\n        else {\n            ans += even_index;\n            even_index\
    \ = 0;\n        }\n    }\n    return ans;", "    long cnt = 0;\n    for (int i\
    \ = 0; i < s.length(); i++)\n    {\n        char c = s[i];\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            cnt += 1;\n  \
    \  }\n    return cnt;", "  long counter = 0;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] != s[i] && s[i] >= 'a' && s[i] <= 'z') {\n      counter++;\n\
    \    }\n  }\n  return counter;", "    long cnt = 0;\n    for( int i = 0; i < s.length();\
    \ ++i )\n    {\n        if( s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' )\n            ++cnt;\n    }\n    return cnt;", "    //\
    \ Your code goes here\n    \n    long count{0};\n    for(auto cs: s)\n    {\n\
    \        if(((cs >= 'a' && cs <= 'z') || (cs >= 'A' && cs <= 'Z'))&&(cs != '_'))\n\
    \            count++;\n    }\n    \n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'E' || s[i]\
    \ == 'e') {\n            count += 1;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for (auto const &c : s)\n        if (std::toupper(c)\
    \ == c)\n            count += 1;\n    return count;", "  int count = 0;\n  for\
    \ (int i = 0; i < s.size(); i++)\n    if (s[i] == 'A' || s[i] == 'E' || s[i] ==\
    \ 'I' || s[i] == 'O' || s[i] == 'U')\n      count++;\n  return count;", "    long\
    \ long ans = 0;\n    for(int i = 0; i < s.size(); i += 2) {\n        if(s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n         \
    \   ans++;\n    }\n    return ans;", "     int n = s.length();\n     long count\
    \ = 0;\n     for (int i = 0; i < n; i++) {\n         if (s[i] == 'a')\n      \
    \       count++;\n         if (s[i] == 'e')\n             count++;\n         if\
    \ (s[i] == 'i')\n             count++;\n         if (s[i] == 'o')\n          \
    \   count++;\n         if (s[i] == 'u')\n             count++;\n     }\n     return\
    \ count;\n }\n \n// Given a string s, return the lexicographically minimum number\
    \ of\n// uppercase vowels.\n// For example:\n// lexicographical_upper('aBCdEf')\
    \ returns 1\n// lexicographical_upper('abcdefg') returns 0\n// lexicographical_upper('dBBE')\
    \ returns 0\nlong lexicographical_upper(std::string s) {\n     int n = s.length();\n\
    \     long min = 0;\n     for (int i = 0; i < n; i++) {\n         if (s[i] ==\
    \ 'a')\n             min = std::min(min, count_upper(s));\n         if (s[i] ==\
    \ 'e')\n             min = std::min(min, count_upper(s));\n         if (s[i] ==\
    \ 'i')\n             min = std::min(min, count_upper(s));\n         if (s[i] ==\
    \ 'o')\n             min = std::min(min, count_upper(s));\n         if (s[i] ==\
    \ 'u')\n             min = std::min(min, count_upper(s));\n     }\n     return\
    \ min;", "    long count = 0;\n    for (auto c : s)\n        if ('A' <= c && c\
    \ <= 'Z' && c % 2 == 0)\n            count++;\n    return count;", "    int N\
    \ = s.size();\n    long count = 0;\n    for (int i = 0; i < N; i++) {\n      \
    \  if (s[i] != s[i] && s[i] <= 'z')\n            count++;\n    }\n    return count;",
  "    int count1 = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 =\
    \ 0;\n    int count5 = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  if (s[i] >= 'a' && s[i] <= 'z')\n            count1++;\n        else if (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n            count2++;\n        else if (s[i] >= '0'\
    \ && s[i] <= '9')\n            count3++;\n        else if (s[i] == '.')\n    \
    \        count4++;\n        else if (s[i] == '-')\n            count5++;\n   \
    \ }\n    return count1 - count2 - count3 - count4 - count5;", "    long count\
    \ = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a')\
    \ {\n            if (s[i + 1] == 'e')\n                count += 2;\n         \
    \   else if (s[i + 1] == 'i')\n                count += 1;\n            else if\
    \ (s[i + 1] == 'o')\n                count += 1;\n            else if (s[i + 1]\
    \ == 'u')\n                count += 1;\n            else\n                count++;\n\
    \        }\n    }\n    return count;", "    long long ans = 0;\n    // TODO: You\
    \ can do better than O(n) by using a stack\n    // and counting the number of\
    \ \"upper\" characters seen in a row.\n    for (const auto& i : s) {\n       \
    \ switch (i) {\n        case 'a':\n        case 'A':\n        case 'e':\n    \
    \    case 'E':\n        case 'i':\n        case 'I':\n        case 'o':\n    \
    \    case 'O':\n        case 'u':\n        case 'U':\n        case 'A':\n    \
    \    case 'a':\n        case 'A':\n        case 'e':\n        case 'E':\n    \
    \    case 'i':\n        case 'I':\n        case 'o':\n        case 'O':\n    \
    \    case 'u':\n        case 'U':\n        case 'i':\n        case 'I':\n    \
    \    case 'o':\n        case 'O':\n        case 'u':\n        case 'U':\n    \
    \        ans++;\n            break;\n        default:\n            break;\n  \
    \      }\n    }\n    return ans;", "    long countUpper = 0;\n    for (long index\
    \ = 0; index < s.length(); index++) {\n        if (s[index] >= 'A' && s[index]\
    \ <= 'Z') {\n            countUpper++;\n        }\n        if (s[index] >= 'a'\
    \ && s[index] <= 'z') {\n            countUpper++;\n        }\n    }\n    return\
    \ countUpper;", "    int n = s.size();\n    long ans = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (i % 2 == 0) {\n            if (s[i] == 'A' || s[i]\
    \ == 'a') ans++;\n            if (s[i] == 'E' || s[i] == 'e') ans++;\n       \
    \     if (s[i] == 'I' || s[i] == 'i') ans++;\n            if (s[i] == 'O' || s[i]\
    \ == 'o') ans++;\n            if (s[i] == 'U' || s[i] == 'u') ans++;\n       \
    \     if (s[i] == 'Y' || s[i] == 'y') ans++;\n        }\n    }\n    return ans;",
  "    std::size_t n = 0;\n    for (std::size_t i = 0; i != s.length(); ++i) {\n \
    \       if (s[i] == 'A' && s[i] != 'a') {\n            ++n;\n        } else if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n            ++n;\n        }\n    }\n    return\
    \ n;", "  long count = 0L;\n  for (int i = 1; i < s.size(); i++) {\n    if (s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') count++;\n\
    \  }\n  return count;", "    // your code goes here\n    long sum = 0;\n    for\
    \ (int i = 0; i < s.size(); i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            if (s[i] >= 'a' && s[i] <= 'z')\n                sum = sum + 1;\n\
    \        }\n    }\n    return sum;", "    long ans = 0;\n    int n = s.size();\n\
    \    for (int i = 0; i < n; i++)\n    {\n        char c = s[i];\n        if ((c\
    \ >= 'A') && (c <= 'Z'))\n        {\n            if (i % 2 == 0)\n           \
    \     ans++;\n        }\n    }\n    return ans;", "    long res = 0;\n    for(int\
    \ i=0;i<s.length();i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') {\n            if(i%2==0) res++;\n        }\n\
    \    }\n    return res;", "    long ans = 0;\n    for (std::size_t i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U')\n            ans++;\n        else if (s[i] != 'a')\n\
    \            ans++;\n    }\n    return ans;", "    long n = 0, i = 0;\n    bool\
    \ flag = false;\n    for (; i < s.length(); i++) {\n        if (s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            if\
    \ (flag == false) {\n                n = n + 1;\n                flag = true;\n\
    \            }\n        } else {\n            flag = false;\n        }\n    }\n\
    \    return n;", "    long count = 0;\n    for (int i = 0; i < s.size(); i +=\
    \ 2)\n        if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' ||\
    \ s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i]\
    \ == 'u')\n            count += 1;\n    return count;", "    long ans = 0;\n \
    \   for(int i=0; i < s.size(); i++)\n    {\n        char c = s[i]; \n        if(c\
    \ >= 'a' && c <= 'z')\n            ans += (c <= 'Z' ? 1 : 0); \n    }\n    return\
    \ ans;", "    long v = 0;\n    for(int i=0;i<s.length();i++)\n        if((s[i]>='A'&&s[i]<='Z')\
    \ || (s[i]>='a'&&s[i]<='z'))\n            v = v+1;\n    return v;", "    long\
    \ res = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if ((s[i] >= 'a'\
    \ && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\n            if (s[i] > 'Z')\n\
    \                res++;\n    }\n    return res;", "    long n = 0;\n    for (auto\
    \ c: s) {\n        if (c >= 'A' && c <= 'Z')\n            n += !(c & 1);\n   \
    \ }\n    return n;", "  int count = 0;\n  int even_index = 0;\n  for (int i =\
    \ 0; i < s.length(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      if (even_index\
    \ % 2 == 0) count++;\n      even_index += 2;\n    }\n  }\n  return count;", " \
    \   long count = 0;\n    for (auto i : s) {\n        if ((i & 1) == 0 && std::isupper(i))\n\
    \            count++;\n    }\n    return count;", "    long ans = 0;\n    assert(s.size()\
    \ > 0);\n    auto it = s.cbegin();\n    auto end = s.cend();\n    while (it !=\
    \ end) {\n        if (std::isupper(*it)) {\n            ++ans;\n            while\
    \ (it != end && std::isupper(*it))\n                ++it;\n            if (it\
    \ == end)\n                break;\n        } else {\n            while (it !=\
    \ end && !std::isupper(*it))\n                ++it;\n        }\n    }\n    return\
    \ ans;", "\tlong sum = 0;\n\tfor (auto &c: s) {\n\t\tif (c == 'a' || c == 'A')\
    \ sum += 1;\n\t\tif (c == 'e' || c == 'E') sum += 1;\n\t\tif (c == 'i' || c ==\
    \ 'I') sum += 1;\n\t\tif (c == 'o' || c == 'O') sum += 1;\n\t\tif (c == 'u' ||\
    \ c == 'U') sum += 1;\n\t}\n\treturn sum;", "    // code here\n    int counter\
    \ = 0;\n    std::string vowels = \"AEIOUaeiou\";\n    for (unsigned int i = 0;\
    \ i < s.size(); i++) {\n        if (vowels.find(s[i]) != std::string::npos) {\n\
    \            if (s[i] == 'A') {\n                counter++;\n            }\n \
    \       }\n    }\n    return counter;", "    assert(s.size() > 0);\n    long count\
    \ = 0;\n    long i = 0;\n    while (i < s.size()) {\n        // if (s[i] == 'a')\
    \ count++;\n        if (s[i] == 'A') count++;\n        if (s[i] == 'a') count++;\n\
    \        if (s[i] == 'e') count++;\n        if (s[i] == 'E') count++;\n      \
    \  if (s[i] == 'i') count++;\n        if (s[i] == 'I') count++;\n        if (s[i]\
    \ == 'o') count++;\n        if (s[i] == 'O') count++;\n        if (s[i] == 'u')\
    \ count++;\n        if (s[i] == 'U') count++;\n        i++;\n    }\n    return\
    \ count;", "    long ans = 0;\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      // Even indices.\n        if (i % 2 == 0) {\n            // Uppercase vowel.\n\
    \            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n                ans++;\n            }\n        }\n    }\n    return\
    \ ans;", "  int c = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (isupper(s[i]))\
    \ {\n      c++;\n      if (c % 2 == 0) {\n        c = 0;\n      }\n    }\n  }\n\
    \  return c;", "    long ans = 0;\n    char c;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        c = s[i];\n        if ((c >= 'A') && (c <= 'Z')) ans += 1;\n\
    \        if ((i % 2) == 0) ans += 1;\n    }\n    return ans;", "    long count\
    \ = 0;\n    for (unsigned int i = 0; i < s.length(); ++i) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            if (i % 2 == 0) {\n                ++count;\n\
    \            }\n        }\n    }\n    return count;", "    long vowel_count =\
    \ 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' ||\
    \ s[i] == 'A')\n            vowel_count++;\n        if (s[i] == 'e' || s[i] ==\
    \ 'E')\n            vowel_count++;\n        if (s[i] == 'i' || s[i] == 'I')\n\
    \            vowel_count++;\n        if (s[i] == 'o' || s[i] == 'O')\n       \
    \     vowel_count++;\n        if (s[i] == 'u' || s[i] == 'U')\n            vowel_count++;\n\
    \    }\n    return vowel_count;", "    std::sort(s.begin(), s.end());\n    auto\
    \ n = s.size();\n    long ans = 0;\n    // std::upper_bound is an iterator to\
    \ the first element in an array equal to or greater than the value passed as argument.\n\
    \    for(auto it = std::upper_bound(s.begin(), s.end(), s[0]); it != s.end();\
    \ ++it) {\n        auto c = *it;\n        if ((c >= 'a') && (c <= 'z')) {\n  \
    \          ans += 1;\n        }\n    }\n    return ans;", "    int i = 0;\n  \
    \  while (i < s.size()) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n       \
    \     i++;\n            if (s[i] >= 'A' && s[i] <= 'Z') {\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return s.size() - i;", " \
    \   if(s.size() == 0) return 0;\n    // Make two passes over the string.\n   \
    \ size_t i = 0;\n    size_t even_index = 0;\n    while((i = s.find(uppercaseVowels[even_index],\
    \ i)) != string::npos){\n        i += 1;\n        even_index += 1;\n    }\n  \
    \  // The string ends in a vowel.\n    if(even_index > 0) return even_index;\n\
    \    // The string does not end in a vowel.\n    return s.size() - 1;", "    long\
    \ ans = 0;\n    long even = 0;\n    for(int i=0; i< s.size(); i++)\n    {\n  \
    \      if(s[i] == 'A'|| s[i] == 'E'|| s[i] == 'I' || s[i] == 'O'|| s[i] == 'U')\n\
    \        {\n            even++;\n        }\n    }\n    for(int i=0; i< s.size();\
    \ i++)\n    {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u')\n        {\n            even++;\n        }\n    }\n    for(int\
    \ i=0; i< s.size(); i++)\n    {\n        if(s[i] == 'A'|| s[i] == 'E'|| s[i] ==\
    \ 'I' || s[i] == 'O'|| s[i] == 'U')\n        {\n            ans++;\n        }\n\
    \    }\n    if(even%2 == 0)\n    {\n        ans++;\n    }\n    return ans;", " \
    \ int n = s.size();\n  int even = 0;\n  long ans = 0;\n  long i;\n  for (i = 0;\
    \ i < n; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      even++;\n    }\n\
    \  }\n  for (i = 0; i < n; i++) {\n    if (s[i] != ' ' && s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n      ans = ans + even;\n      even = 0;\n    }\n  }\n  return ans;",
  "    long count = 0;\n    for (int i = 0; i <= s.size(); i++) {\n        if (s[i]\
    \ >= 'A' && s[i] <= 'Z' && s[i] != 'a' && s[i] != 'A' && s[i] != 'E') {\n    \
    \        count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i : s)\n        if (i != 'a' && i != 'A' && i != 'e' && i != 'E'\
    \ && i != 'i' && i != 'I' && i != 'o' && i != 'O' && i != 'u' && i != 'U')\n \
    \           count++;\n    return count;", "    long ans = 0;\n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'A')\n            ans += 1;\n    return ans;",
  "  int counter = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n      counter += s[i] - 'a';\n    }\n  }\n  return counter;",
  "    int n = s.length();\n    long ans = 0;\n    for (int i = 1; i < n; ++i) {\n\
    \        // skip even indices\n        if (i & 1) {\n            continue;\n \
    \       }\n        // ignore lowercase\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            continue;\n        }\n        // count vowels\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      \
    \      ans++;\n    }\n    return ans;", "    long count = 0;\n    // Iterate over\
    \ string and use even indices\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      // Check if current character is upper case\n        if (isupper(s[i]))\
    \ {\n            // Increment the count by 1\n            count++;\n        }\n\
    \    }\n    return count;", "    int i,count=0;\n    for(i=0;i<s.size();i++)\n\
    \    {\n         if(s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')\n\
    \         {\n            count++;\n         }\n    }\n    return count;", "  \
    \  if (s.size() <= 1) return 0;\n    long ans = 0;\n    for (int i = 0; i < (int)s.size()\
    \ - 1; i++) {\n        bool upper = s[i] == 'A' || s[i] == 'a';\n        bool\
    \ vowel = s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u';\n        bool even = i % 2 == 0;\n        if (upper == vowel && even) ans++;\n\
    \    }\n    return ans;", "    long count = 0;\n    long len = s.length();\n \
    \   for (int i = 0; i < len; ++i) {\n        if (s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n       \
    \ }\n    }\n    return count;", '    // Write your code here.', "    // Your code\
    \ here\n    long ans = 0;\n    for(int i = 0; i < s.size(); ++i) {\n        if(s[i]\
    \ == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] ==\
    \ 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U')\n         \
    \   ans++;\n    }\n    return ans;", "    int count[26];\n    int i;\n    for\
    \ (i = 0; i < s.length(); i++)\n        count[s[i]-'a']++;\n    // Find even indices\n\
    \    for (i = s.length()-1; i >= 0; i--)\n        if (count[s[i]-'a'] & 1)\n \
    \           count[s[i]-'a']--;\n    return i;", "  int i = 0, count = 0;\n  while\
    \ (i < s.size()) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u') {\n      count++;\n    }\n    i++;\n  }\n  return count;",
  "    long ans = 0;\n    for (long i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ > 'Z') {\n            if (s[i] >= 'A' && s[i] <= 'Z') {\n                ans++;\n\
    \            }\n        }\n    }\n    return ans;", "    // Write your code here\n\
    \    int count = 0, len = s.size();\n    for (int i = 0; i < len; i++)\n    {\n\
    \        if (s[i] == 'a' || s[i] == 'A')\n        {\n            count++;\n  \
    \      }\n    }\n    return count;", "    std::stack<char> st;\n    long ans =\
    \ 0;\n    for (int i = 0; i <s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            if (isupper(s[i])) {\n                st.push(s[i]);\n          \
    \  } else {\n                if (st.empty()) st.push(s[i]);\n                else\
    \ ans += 1;\n                st.pop();\n            }\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    long start = 0;\n    long end = s.size();\n\n\
    \    while (end > start) {\n        if (s[start] == 'A' || s[start] == 'E' ||\
    \ s[start] == 'I' || s[start] == 'O' || s[start] == 'U')\n            ans++;\n\
    \        start++;\n        end--;\n    }\n    return ans;", "    long ans = 0;\n\
    \    for(auto i = 0; i < s.length(); i++) {\n        if(s[i] >= 'a' && s[i] <=\
    \ 'z')\n            ans++;\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U')\n            ans++;\n    }\n    return ans;",
  "    long count = 0;\n    for (auto c: s) {\n        if (c == 'A' || c == 'E' ||\
    \ c == 'I'|| c == 'O' || c == 'U') count++;\n    }\n    return count;", "    long\
    \ count = 0;\n    long i = 0;\n    while (i < s.size()) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            i += 1;\n        }\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            i += 1;\n            count += 1;\n        }\n\
    \        i += 1;\n    }\n    return count;", "    long count = 0;\n    for (int\
    \ i = 0; i != s.length(); i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n\
    \            count += s[i] - 'A';\n    }\n    return count;", "    long cnt =\
    \ 0;\n    for (long i = 0, j = 0; i < s.size(); i++, j += 2) {\n        if (s[i]\
    \ == 'a')\n            cnt++;\n        if (j != i && s[i] == 'A')\n          \
    \  cnt++;\n    }\n    return cnt;", "    // write your code here\n    long count\
    \ = 0LL;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            count++;\n\
    \    }\n    return count;", "    if (s.size() < 1)\n        return 0;\n    long\
    \ ans = 0;\n    for (long i = 0; i < s.size(); ++i) {\n        if (s[i] == 'a'\
    \ || s[i] == 'A') {\n            ++ans;\n        }\n    }\n    return ans;", " \
    \   long long int count = 0;\n    for (int i = 0; i < (int) s.size(); i++) {\n\
    \        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' || s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U')\n            count++;\n    }\n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            count += 1;\n   \
    \ }\n    return count;", "    long result = 0;\n    for (size_t i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            result += (s[i]\
    \ - 'A') % 2 == 0;\n    }\n    return result;", "  // Your code goes here\n  assert(s.size()\
    \ > 0);\n  int count = 0;\n  for (int i = 0; i <= s.size(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;", "\t\
    int count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] - 'A' ==\
    \ s[i] - 'a') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "  int n = s.size();\n\
    \  int upper = 0;\n  for (int i = 0; i <= n; i++) {\n    if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n      upper++;\n    }\n  }\n  return upper;", "    int n=s.length();\n\
    \    int count=0;\n    for (int i=0;i<n;i++)\n    {\n        if (s[i]>='A' &&\
    \ s[i]<='Z')\n        {\n            if (i%2==0 && s[i]>='A' && s[i]<='E')\n \
    \               count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            count++;\n\
    \    }\n    return count;", "    int count = 0;\n    for (auto c : s) {\n    \
    \    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n            count++;\n\
    \        }\n    }\n    return count;", "    long ans = 0;\n    // loop over each\
    \ of the even indices of the string\n    for (int i = 0; i < s.size(); i += 2)\
    \ {\n        // check if the current character is a vowel\n        if (s[i] ==\
    \ 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I'\
    \ || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U')\n            //\
    \ increment the counter\n            ++ans;\n    }\n    return ans;", "    long\
    \ n = 0, x = 0;\n    for(int i = 0; i != s.length(); i++) {\n        if(s[i] ==\
    \ 'A' || s[i] == 'a') {\n            if(i % 2 == 0)\n                x += 1;\n\
    \            else\n                x -= 1;\n        } else if(s[i] == 'B' || s[i]\
    \ == 'b') {\n            if(i % 2 == 0)\n                x += 1;\n           \
    \ else\n                x -= 1;\n        } else if(s[i] == 'C' || s[i] == 'c')\
    \ {\n            if(i % 2 == 0)\n                x += 1;\n            else\n \
    \               x -= 1;\n        } else if(s[i] == 'D' || s[i] == 'd') {\n   \
    \         if(i % 2 == 0)\n                x += 1;\n            else\n        \
    \        x -= 1;\n        } else if(s[i] == 'E' || s[i] == 'e') {\n          \
    \  if(i % 2 == 0)\n                x += 1;\n            else\n               \
    \ x -= 1;\n        } else if(s[i] == 'F' || s[i] == 'f') {\n            if(i %\
    \ 2 == 0)\n                x += 1;\n            else\n                x -= 1;\n\
    \        } else if(s[i] == 'G' || s[i] == 'g') {\n            if(i % 2 == 0)\n\
    \                x += 1;\n            else\n                x -= 1;\n        }\
    \ else if(s[i] == 'H' || s[i] == 'h') {\n            if(i % 2 == 0)\n        \
    \        x += 1;\n            else\n                x -= 1;\n        } else if(s[i]\
    \ == 'I' || s[i] == 'i') {\n            if(i % 2 == 0)\n                x += 1;\n\
    \            else\n                x -= 1;\n        } else if(s[i] == 'J' || s[i]\
    \ == 'j') {\n            if(i % 2 == 0)\n                x += 1;\n           \
    \ else\n                x -= 1;\n        } else if(s[i] == 'K' || s[i] == 'k')\
    \ {\n            if(i % 2 == 0)\n                x += 1;\n            else\n \
    \               x -= 1;\n        } else if(s[i] == 'L' || s[i] == 'l') {\n   \
    \         if(i % 2 == 0)\n                x += 1;\n            else\n        \
    \        x -= 1;\n        } else if(s[i] == 'M' || s[i] == 'm') {\n          \
    \  if(i % 2 == 0)\n                x += 1;\n            else\n               \
    \ x -= 1;\n        } else if(s[i] == 'N' || s[i] == 'n') {\n            if(i %\
    \ 2 == 0)\n                x += 1;\n            else\n                x -= 1;\n\
    \        } else if(s[i] == 'O' || s[i] == 'o') {\n            if(i % 2 == 0)\n\
    \                x += 1;\n            else\n                x -= 1;\n        }\
    \ else if(s[i] == 'P' || s[i] == 'p') {\n            if(i % 2 == 0)\n        \
    \        x += 1;\n            else\n                x -= 1;\n        } else if(s[i]\
    \ == 'Q' || s[i] == 'q') {\n            if(i % 2 == 0)\n                x += 1;\n\
    \            else\n                x -= 1;\n        } else if(s[i] == '", "  \
    \  assert(s.size());\n    long count = 0;\n    for(int i=0; i<s.size() && s[i]!='\\\
    0'; i++) {\n        if(s[i]=='A' || s[i]=='a') {\n            count++;\n     \
    \   }\n        if(s[i]=='E' || s[i]=='e') {\n            count++;\n        }\n\
    \        if(s[i]=='I' || s[i]=='i') {\n            count++;\n        }\n     \
    \   if(s[i]=='O' || s[i]=='o') {\n            count++;\n        }\n        if(s[i]=='U'\
    \ || s[i]=='u') {\n            count++;\n        }\n    }\n    return count;",
  "    int even_index;\n    int vowel_count;\n    for (even_index = 0; even_index\
    \ < s.length(); even_index += 2) {\n        vowel_count = count_vowel(s.substr(even_index,\
    \ 2));\n        if (vowel_count == 1) {\n            break;\n        }\n    }\n\
    \    return vowel_count;", "  // Create a map of uppercase letters to integers,\
    \ one for each letter.\n  long lookup[26];\n  for (long i = 0; i < 26; i++) {\n\
    \    // Use i as the index for the map and initialize each index with 0.\n   \
    \ lookup[i] = 0;\n  }\n\n  // Now iterate over all characters and increase the\
    \ counter for each letter.\n  for (int i = 0; i < s.length(); i++) {\n    // Get\
    \ the character at index i in the string s.\n    char letter = s[i];\n\n    if\
    \ (letter >= 'A' && letter <= 'Z') {\n      lookup[letter - 'A']++;\n    }\n \
    \ }\n\n  // Finally return the value of the lookup array at the even indices.\n\
    \  return lookup[2 * lookup[0] - 1] + lookup[2 * lookup[1] - 1];", "    long count\
    \ = 0;\n    for (long i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' &&\
    \ s[i] <= 'Z')\n            if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U')\n                count++;\n    }\n    return count;",
  "  int counter = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] != s[i\
    \ + 1])\n      counter++;\n  }\n  return counter;", "\tlong count = 0;\n\tfor\
    \ (int i = 0; i < (int)s.length(); i++) {\n\t\tif (s[i] >= 'A' && s[i] <= 'Z'\
    \ && i % 2 == 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    long ret\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i]\
    \ <= 'Z')\n            ret = 1 + ret;\n    }\n    return ret;", "    long ans\
    \ = 0;\n    for (auto i = 0; i < s.size(); i++)\n        if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            if (s[i] != 'A' && s[i] != 'E')\n                ans++;\n\
    \        }\n    return ans;", "    long res = 0;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        char ch = s[i];\n        if (i % 2 == 0) {\n            if (std::toupper(ch)\
    \ == ch)\n                res += 1;\n        }\n    }\n    return res;", "   \
    \ long count = 0L;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            if (i % 2 == 0)\n                count++;\n\
    \        }\n    }\n    return count;", "\tlong answer = 0;\n\tstd::unordered_set<char>\
    \ vowels;\n\tfor (char c : s) {\n\t\tif (isupper(c))\n\t\t\tif (vowels.find(c)\
    \ == vowels.end())\n\t\t\t\tanswer++;\n\t\t\telse\n\t\t\t\tanswer = 0;\n\t\tvowels.insert(c);\n\
    \t}\n\treturn answer;", "\tint count = 0;\n\tfor (int i = 0; i < s.size(); i++)\
    \ {\n\t\tif (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    // code here\n\
    \    long even_index = 0;\n    long count = 0; \n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e'\
    \ || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' ||\
    \ s[i] == 'u') {\n            count += 1;\n        }\n        else {\n       \
    \     even_index += 1;\n        }\n    }\n    return count;", "    assert(s.size()\
    \ >= 2); //only even length strings allowed\n    long ans = 0;\n    for(int i\
    \ = 0; i < (int)s.size() - 1; i++) {\n        if(s[i] == 'A' && s[i + 1] == 'E')\
    \ {\n            ans += 1;\n        }\n        else if(s[i] == 'E' && s[i + 1]\
    \ == 'A') {\n            ans += 1;\n        }\n        else if(s[i] == 'E' &&\
    \ s[i + 1] == 'I') {\n            ans += 1;\n        }\n        else if(s[i] ==\
    \ 'I' && s[i + 1] == 'A') {\n            ans += 1;\n        }\n        else if(s[i]\
    \ == 'I' && s[i + 1] == 'I') {\n            ans += 1;\n        }\n        else\
    \ if(s[i] == 'O' && s[i + 1] == 'O') {\n            ans += 1;\n        }\n   \
    \     else if(s[i] == 'U' && s[i + 1] == 'U') {\n            ans += 1;\n     \
    \   }\n        else if(s[i] == 'Y' && s[i + 1] == 'A') {\n            ans += 1;\n\
    \        }\n        else if(s[i] == 'Y' && s[i + 1] == 'E') {\n            ans\
    \ += 1;\n        }\n        else if(s[i] == 'Y' && s[i + 1] == 'O') {\n      \
    \      ans += 1;\n        }\n        else if(s[i] == 'Y' && s[i + 1] == 'U') {\n\
    \            ans += 1;\n        }\n        else if(s[i] == 'a' && s[i + 1] ==\
    \ 'b') {\n            ans += 1;\n        }\n        else if(s[i] == 'b' && s[i\
    \ + 1] == 'c') {\n            ans += 1;\n        }\n        else if(s[i] == 'b'\
    \ && s[i + 1] == 'd') {\n            ans += 1;\n        }\n        else if(s[i]\
    \ == 'b' && s[i + 1] == 'e') {\n            ans += 1;\n        }\n        else\
    \ if(s[i] == 'b' && s[i + 1] == 'f') {\n            ans += 1;\n        }\n   \
    \     else if(s[i] == 'c' && s[i + 1] == 'd') {\n            ans += 1;\n     \
    \   }\n        else if(s[i] == 'c' && s[i + 1] == 'e') {\n            ans += 1;\n\
    \        }\n        else if(s[i] == 'c' && s[i + 1] == 'f') {\n            ans\
    \ += 1;\n        }\n        else if(s[i] == 'd' && s[i + 1] == 'e') {\n      \
    \      ans += 1;\n        }\n        else if(s[i] == 'd' && s[i + 1] == 'f') {\n\
    \            ans += 1;\n        }\n        else if(s[i] == 'e' && s[i + 1] ==\
    \ 'f') {\n            ans += 1;\n        }\n    }\n    return ans;", "    long\
    \ ans = 0;\n    for(int i = 0; i < s.length(); ++i) {\n        if(s[i] - 'A')\
    \ % 2 == 0 && s[i] != 'a'\n            ans++;\n    }\n    return ans;", "    long\
    \ ans = 0, i = 0;\n    while (i < s.size()) {\n        if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            i += 2;\n            if (i % 2 == 0) ans++;\n       \
    \ }\n        i++;\n    }\n    return ans;", "    // Complete this function\n \
    \   int n = s.size();\n    int evenCount = 0;\n    for(int i=0; i<n; i++){\n \
    \       if(s[i]+=s[i]==s[i]+s[i]){\n            evenCount++;\n        }\n    }\n\
    \    return evenCount;", "    std::map<char,int> counts;\n    for(const char&\
    \ c: s) {\n        ++counts[c];\n    }\n    long ans = 0;\n    for(const auto&\
    \ count: counts) {\n        // If the count of 'A' is not even, we consider it\
    \ as 'vowel'\n        if(count.second & 1) {\n            ans += count.first;\n\
    \        }\n    }\n    return ans;", "  assert(s.size() > 0);\n  long even_idx\
    \ = 0, odd_idx = 0;\n  for (auto &c : s)\n    if (c == 'E' || c == 'e') even_idx++;\n\
    \    else if (c == 'O' || c == 'o') odd_idx++;\n    else return 0;\n  return even_idx\
    \ - odd_idx;", "    long long cnt=0;\n    for(int i=0;i<s.size();++i)\n      \
    \  if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u')\n       \
    \     ++cnt;\n    return cnt;", "\tint even = 0, odd = 0;\n\tfor (int i = 0; i\
    \ < s.size(); i++) {\n\t\tchar c = s[i];\n\t\tif ('A' <= c && c <= 'Z')\n\t\t\t\
    even++;\n\t\tif ('a' <= c && c <= 'z')\n\t\t\todd++;\n\t}\n\treturn (even + (odd\
    \ - even) / 2);", "  int n = s.size();\n  long ans = 0;\n  for (int i = 0; i <\
    \ n; i++) {\n    char ch = s[i];\n    if (ch == 'a' || ch == 'e' || ch == 'i'\
    \ || ch == 'o' || ch == 'u' ) {\n      ans += 1;\n      if (i % 2 == 0) {\n  \
    \      ans += 1;\n      }\n    }\n  }\n  return ans;", "    long count=0,index=0;\n\
    \    for(char c : s){\n        index =index+1;\n        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'){\n\
    \            count=count+1;\n        }\n    }\n    return count;", "  int n =\
    \ s.size();\n  long ans = 0;\n  int i = 0;\n  while (i < n) {\n    if (s[i] >=\
    \ 'a' && s[i] <= 'z')\n      ++ans;\n    ++i;\n  }\n  return ans;", "    int i,\
    \ cnt = 0;\n    for (i = 0; i + 2 < s.size(); i+=2) {\n        if (s[i] == 'A'\
    \ && s[i+1] == 'A') {\n            cnt += 1;\n        }\n    }\n    return cnt;",
  "    long n = 0;\n    int n = s.size();\n    for (int i = 0; i < n; ++i) {\n   \
    \     if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i] ==\
    \ 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] == 'u')\n\
    \            ++n;\n        else\n            n = 0;\n    }\n    return n;", " \
    \   std::map<char, long> m;\n    for (char c: s) m[c]++;\n    for (char c: s)\
    \ m[c] &= 3;\n    return m[s.back()];", "    long count = 0;\n    for (long i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n     \
    \       count++;\n            if (i % 2 == 0) count--;\n        }\n    }\n   \
    \ return count;", "    // your code here\n    std::string vowels = {\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"};\n    long evenCount = 0;\n    for(int i =0; i<s.size(); i++)\n\
    \    {\n        std::string vowels2 = s.substr(i, 2);\n        for(int j =0; j<vowels2.length();\
    \ j++)\n        {\n            if(vowels2[j] == vowels[j])\n            {\n  \
    \              evenCount++;\n            }\n        }\n    }\n    return evenCount;",
  "    long ans = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z')\n            ans += (s[i] - 'a') % 2 == 0 ? 1 : 0;\n   \
    \ }\n    return ans;", "    // code here\n    long count = 0;\n    for (long i\
    \ = 0, n = s.length(); i < n; i++){\n        if (s[i] == 'A' || s[i] == 'E' ||\
    \ s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            count++;\n    }\n  \
    \  return count;", "  // Write your code here.\n  long count = 0;\n  for (int\
    \ i = 0; i < s.size(); i += 2){\n    if(s[i] == 'A' && s[i+1] == 'B')\n      count\
    \ += 1;\n  }\n  return count;", "   int i = 0;\n   int count = 0;\n   while (s[i]\
    \ != '\\0') {\n      if (s[i] >= 'a' && s[i] <= 'z') {\n         i++;\n      }\
    \ else if (s[i] >= 'A' && s[i] <= 'Z') {\n         count++;\n         i++;\n \
    \     } else {\n         break;\n      }\n   }\n   return count;", "  int len\
    \ = s.length();\n  long count = 0;\n  for (int i = 0; i <= len - 1; i++) {\n \
    \   if ((s[i] >= 'a') && (s[i] <= 'z')) {\n      count += 1;\n      i += 2;\n\
    \    } else {\n      i += 1;\n    }\n  }\n  return count;", "  int i = 0;\n  int\
    \ count = 0;\n  while (i < s.size()) {\n    char ch = s[i];\n    if (isupper(ch))\
    \ {\n      ++count;\n      if (i % 2 == 0)\n        ++i;\n    } else {\n     \
    \ i = i + 1;\n    }\n  }\n  return count;", "  int ans = 0;\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    int l = toupper((int) s[i]) - 'A';\n    if (l %\
    \ 2 == 0)\n      ans++;\n  }\n  return ans;", "   int i=0;\n   for (char& c :\
    \ s)\n   {\n      if (c=='A' || c=='a') i++;\n      if (c=='E' || c=='e') i++;\n\
    \      if (c=='I' || c=='i') i++;\n      if (c=='O' || c=='o') i++;\n      if\
    \ (c=='U' || c=='u') i++;\n   }\n   return i;", "    // Complete the counting\
    \ function below.\n    long i=0,j=0;\n    for (int k=0;k<s.size();k++) {\n   \
    \     if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U') {\n            j++;\n        }\n        i++;\n    }\n    return j;", " \
    \   int counts[26];\n    for (int i = 0; i < s.size(); i++) {\n        // even\
    \ indices have an uppercase vowel\n        if (i % 2 == 0) {\n            char\
    \ c = s[i];\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                counts[c - 'a']++;\n            }\n        }\n  \
    \  }\n    int count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (counts[i])\
    \ {\n            count++;\n        }\n    }\n    return count;", "    long count\
    \ = 0;\n    for (long i = 0; i < s.length(); i++) {\n        if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            count++;\n        }\n        if (s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            count++;\n       \
    \ }\n    }\n    return count;", "  long ans = 0;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z' && s[i] % 2 != 0) {\n      ans++;\n\
    \    }\n  }\n  return ans;", "    assert(s.size() >= 2);\n    long count = 0;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (!(s[i] == 'a' || s[i] ==\
    \ 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] == 'o'\
    \ || s[i] == 'O' || s[i] == 'u' || s[i] == 'U')) {\n            count++;\n   \
    \     }\n    }\n    return count;", "    long ans=0;\n    long count=0;\n    for(char\
    \ c:s)\n    {\n        count=0;\n        for(long i=0;i<=c;i++)\n        {\n \
    \           if(toupper(c)==toupper(i))\n                count++;\n        }\n\
    \        if(count%2==0)\n            ans+=count;\n    }\n    return ans;", " \
    \   int cnt = 0;\n    long len = s.length();\n    for (int i = 0; i < len; i++)\
    \ {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U')\n            cnt++;\n    }\n    return cnt;", "    long ans = 0;\n \
    \   for (long i = 0; i < s.size(); ++i) {\n        if (s[i] == 'A' || s[i] ==\
    \ 'E' || s[i] == 'I'\n            || s[i] == 'O' || s[i] == 'U') {\n         \
    \   ans += 1;\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
