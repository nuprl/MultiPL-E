name: HumanEval_35_max_element
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in\
  \ the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5,\
  \ 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
  \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
completions: ["    // Write your code here.\n    long max_val = 0;\n    for (auto\
    \ i : l) {\n        if (i > max_val) {\n            max_val = i;\n        }\n\
    \    }\n    return max_val;", "  long max = 0;\n  long min = 0;\n  for (long i\
    \ : l) {\n    if (i > max) {\n      max = i;\n    } else if (i < min) {\n    \
    \  min = i;\n    }\n  }\n  return std::max(min, max);", "    long max_val = 0;\n\
    \    for (long i = 1; i < l.size(); ++i) {\n        if (l[i] > l[max_val]) {\n\
    \            max_val = i;\n        }\n    }\n    return max_val;", "    if (l.size()\
    \ > 0) {\n        long maxElem = l[0];\n        for (long i = 0; i < l.size();\
    \ i++) {\n            if (l[i] > maxElem)\n                maxElem = l[i];\n \
    \       }\n        return maxElem;\n    }\n    return 0;", "    assert(l.size()\
    \ > 0);\n    assert(l[0] >= 0);\n\n    long ans = l[0];\n    long mx = l[0];\n\
    \    long idx = 0;\n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > mx)\n            mx = l[i];\n        ans = std::max(ans, mx);\n        idx++;\n\
    \    }\n\n    return ans;", "    long maximum = -1;\n    for (long i : l) {\n\
    \        if (maximum < i)\n            maximum = i;\n    }\n    return maximum;",
  "\tassert(l.size() > 0);\n\tlong max_so_far = l[0], max_ele = l[0];\n\tfor (long\
    \ i : l) {\n\t\tif (i > max_so_far) {\n\t\t\tmax_so_far = i;\n\t\t}\n\t\tif (i\
    \ > max_ele) {\n\t\t\tmax_ele = i;\n\t\t}\n\t}\n\treturn max_ele;", "    auto\
    \ it = std::max_element(l.begin(), l.end());\n    assert(*it == std::max(l.begin(),\
    \ l.end()));\n    return *it;", "    long max_ele = 0, ele = INT_MIN;\n    for\
    \ (long i: l) {\n        if (i != ele) {\n            ele = i;\n            max_ele\
    \ = ele;\n        }\n    }\n    return max_ele;", "    long ans = -1LL;\n    long\
    \ max = l[0];\n    for (long x : l)\n        if (x > max) max = x;\n    for (long\
    \ x : l)\n        if (x > ans)\n            ans = x;\n    return max;", "    //\
    \ Your code goes here\n    long max_element=0;\n    long min=0;\n    for(long\
    \ i=0;i<l.size();i++){\n        if(l[i]>max_element){\n            max_element=l[i];\n\
    \        }\n        if(l[i]<min){\n            min=l[i];\n        }\n    }\n \
    \   return max;", "  std::max_element(std::begin(l), std::end(l));\n  return l.size();",
  "  long max_val = std::numeric_limits<long>::min();\n  for (size_t i = 0; i < l.size();\
    \ i++) {\n    max_val = std::max(max_val, l[i]);\n  }\n  return max_val;", " \
    \   std::sort(l.begin(), l.end());\n    return l[l.size()-1];", "    long max_element\
    \ = l[0];\n    long max_i = 1;\n    for (size_t i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_element) {\n            max_element = l[i];\n        \
    \    max_i = i;\n        }\n    }\n    return max_element;", "  // Find the largest\
    \ element in array\n  // using quick sort algo \n  // which has O(nlogn) time\
    \ complexity\n  long max_value = l[0];\n  for (long i : l) {\n    if (i > max_value)\
    \ {\n      max_value = i;\n    }\n  }\n  return max_value;", "    // return -1;\n\
    \    long res = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > res)\n            res = l[i];\n    }\n    return res;", "    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max)\n            max = i;\n    }\n \
    \   return max;", "    std::vector<long> u = l;\n    auto max_element = *std::max_element(std::begin(u),\
    \ std::end(u));\n    return max_element;", "    if (l.size() == 0) {\n       \
    \ return 0;\n    }\n    long max_so_far = l.at(0);\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l.at(i) > max_so_far) {\n            max_so_far = l.at(i);\n\
    \        }\n    }\n    return max_so_far;", "    std::sort(l.begin(), l.end());\n\
    \    return l.back();", "    long ans = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > ans) ans = l[i];\n    }\n    return ans;", "  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your code goes here\n  // Your code goes here\n  //\
    \ Your code goes here\n  // Your ", "    assert(l.size() > 0);\n    return *std::max_element(std::begin(l),\
    \ std::end(l));", "    long min_value  = std::numeric_limits<long>::max();\n \
    \   long max_value = std::numeric_limits<long>::min();\n    long max_idx = -1;\n\
    \n    for (int i = 0; i < l.size(); ++i)\n    {\n        if (l[i] < min_value)\n\
    \        {\n            min_value = l[i];\n        }\n        else if (l[i] >\
    \ max_value)\n        {\n            max_value = l[i];\n            max_idx =\
    \ i;\n        }\n    }\n    return max_idx;", "    if(l.size() == 0) return 0;\n\
    \    long long max = l[0];\n    for(long long i = 0; i < l.size(); i++) {\n  \
    \      if(max < l[i]) max = l[i];\n    }\n    return max;", "    std::vector<long>::iterator\
    \ it = std::max_element(l.begin(), l.end());\n    return it == l.end() ? 0 : *it;",
  "    long max = 0;\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  auto\
    \ maxv = *std::max_element(l.begin(), l.end());\n  return maxv.first;", "    std::sort(l.begin(),\
    \ l.end());\n    return std::prev(std::max_element(l.begin(), l.end()));", " \
    \   long max = l[0];\n    for (long i: l) if (i >= max) max = i;\n    return max;",
  "    auto it = std::max_element(l.begin(), l.end());\n    return *it;", "    auto\
    \ it = std::max_element(l.begin(), l.end());\n    return *it;", "    long max\
    \ = l[0];\n    for (int i = 0; i < l.size(); i++)\n        if (l[i] > max)\n \
    \           max = l[i];\n    return max;", "    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *(it);", "    std::sort(l.begin(), l.end());\n    return\
    \ std::distance(l.begin(), std::max_element(l.begin(), l.end()));", "    long\
    \ max = l[0];\n    for (auto i : l) if (i > max) max = i;\n    return max;", "//\
    \ your code here\n  assert(l.size() > 0);\n  int max = 0;\n  for (int i = 0; i\
    \ < l.size(); i++) {\n    if (l[i] > max)\n      max = l[i];\n  }\n  return max;",
  "    long max_value = 0;\n    for (long i : l) {\n        max_value = max(max_value,\
    \ i);\n    }\n    return max_value;", "    long max = 0;\n    for (auto i : l)\
    \ {\n        max = i;\n        if (i > max) {\n            max = i;\n        }\n\
    \    }\n    return max;", "    for (long i : l) {\n        if (i > l.back())\n\
    \            l.push_back(i);\n    }\n    return l.back();", "\tassert(!l.empty());\n\
    \tlong max_val = l[0];\n\tfor (long i : l) if (i > max_val) max_val = i;\n\treturn\
    \ max_val;", "    long max_val = INT_MIN;\n    long max_pos = -1;\n\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n            max_pos = i;\n        }\n    }\n    return max_pos;", " \
    \ auto max = *std::max_element(l.begin(), l.end());\n  return max;", "    long\
    \ max = -long_MAX;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ int n=l.size();\n    long max_value=(l[0]<l[1] ? l[0] : l[1]);\n    long i,j;\n\
    \    for(i=1;i<n;i++){\n        if(l[i]>max_value)\n            max_value=l[i];\n\
    \    }\n    for(j=1;j<n;j++){\n        if(l[j]<max_value)\n            max_value=l[j];\n\
    \    }\n    return max_value;", "    if (l.empty())\n        return 0;\n    long\
    \ maximum = l.front();\n    for (long i = 1; i < l.size(); i++)\n        if (maximum\
    \ < l.at(i))\n            maximum = l.at(i);\n    return maximum;", "    if (l.size()\
    \ == 0)\n        return 0;\n\n    long ans = l[0];\n    for (long i = 1; i < l.size();\
    \ i++)\n        ans = std::max(ans, l[i]);\n\n    return ans;", "    long ans\
    \ = l[0];\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > ans)\
    \ {\n            ans = l[i];\n        }\n    }\n    return ans;", '    return
    std::max_element(std::begin(l), std::end(l));', "    assert(l.size() != 0);\n\
    \    long max_elem = l[0];\n    for (long i = 0; i < l.size(); i++)\n        if\
    \ (l[i] > max_elem)\n            max_elem = l[i];\n    return max_elem;", "  assert(l.size()\
    \ > 0);\n  long max = l[0];\n  long max_index = -1;\n  for (size_t i = 1; i <\
    \ l.size(); ++i) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index\
    \ = i;\n    }\n  }\n  return max_index;", "    long max_val = l[0];\n    for (long\
    \ i : l) {\n        if (i > max_val)\n            max_val = i;\n    }\n    return\
    \ max_val;", "    if (l.size() == 0)\n        return 0;\n\n    std::sort(l.begin(),\
    \ l.end());\n    return l[l.size() - 1];", "    // Find the maximum in l\n   \
    \ long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (max\
    \ < l[i]) {\n            max = l[i];\n        }\n    }\n    // Return it\n   \
    \ return max;", "    assert(l.size() > 0);\n    return *std::max_element(l.begin(),\
    \ l.end());", "    int n = l.size();\n    if (n == 0) {\n        return 0;\n \
    \   }\n    // find the max number in the list\n    long max = l[0];\n    int i\
    \ = 0;\n    while (i < n) {\n        if (max < l[i]) {\n            max = l[i];\n\
    \        }\n        ++i;\n    }\n    return max;", "  long max_i = 0;\n  for (auto\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > l[max_i]) {\n      max_i = i;\n\
    \    }\n  }\n  return max_i;", "    // Your code here\n    long max_element =\
    \ l[0];\n    for (long i : l) {\n        if (i > max_element) {\n            max_element\
    \ = i;\n        }\n    }\n    return max_element;", "    assert(l.size() > 0);\n\
    \    auto it = l.begin();\n    auto last = l.end();\n    // Return first element\
    \ if list is empty\n    if (it == last) {\n        return *it;\n    }\n    long\
    \ max = *it;\n    for (auto it = it++; it != last; ++it) {\n        if (*it >\
    \ max) {\n            max = *it;\n        }\n    }\n    return max;", "    auto\
    \ it = std::max_element(l.begin(), l.end());\n    long max_value = std::distance(l.begin(),\
    \ it);\n    return max_value;", "    auto it = std::max_element(l.begin(), l.end());\n\
    \    return std::distance(l.begin(), it);", "    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return std::distance(l.begin(), it);", "  std::sort(l.begin(),\
    \ l.end());\n  return *std::max_element(l.begin(), l.end());", "    for (long\
    \ i = 0; i < l.size(); i++) {\n        std::swap(l[i], l[std::max_element(l.begin()\
    \ + i, l.end())]);\n    }\n    return l[l.size()-1];", "    assert(l.size() >\
    \ 0);\n    auto it = l.begin();\n    long max_value = *it;\n    for (; it != l.end();\
    \ ++it) {\n        if (*it > max_value) {\n            max_value = *it;\n    \
    \    }\n    }\n    return max_value;", "    // initialize max variable with the\
    \ first element\n    long max_element = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        // If the current element is greater than max variable,\n  \
    \      // update max variable\n        if (l[i] > max_element) {\n           \
    \ max_element = l[i];\n        }\n    }\n    return max_element;", "\tint n =\
    \ l.size();\n\tif (n == 0)\n\t\treturn -1;\n\tstd::pair<long, long> m = std::max_element(l.begin(),\
    \ l.end());\n\treturn m.second;", "  std::sort(l.begin(), l.end());\n  return\
    \ *std::max_element(l.begin(), l.end());", "    long max_elm = 0;\n    int len\
    \ = l.size();\n    for (long i : l) {\n        max_elm = i;\n        for (long\
    \ j = 0 ; j < len; j++)\n            if (l[j] > max_elm)\n                max_elm\
    \ = l[j];\n    }\n    return max_elm;", "  // Sort vector.\n  sort(l.begin(),\
    \ l.end());\n\n  // Return position of maximum element.\n  auto it = std::max_element(l.begin(),\
    \ l.end());\n\n  // Return value.\n  return *it;", "    long maxValue = -long_MAX;\n\
    \    long minValue = long_MAX;\n    for (long i = 0; i < l.size(); ++i) {\n  \
    \      maxValue = max(maxValue, l[i]);\n        minValue = min(minValue, l[i]);\n\
    \    }\n    if (minValue == maxValue)\n        return minValue;\n    return maxValue;",
  "    // Write your code here.\n    if(l.empty()) {\n        return 0;\n    }\n \
    \   long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ auto it = std::max_element(l.begin(), l.end());\n    if (it == l.end())\n  \
    \      return -l.back();\n    return *it;", "  assert(l.size() > 0);\n  long max\
    \ = l[0];\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n  \
    \    max = l[i];\n    }\n  }\n  return max;", "  // Initialize max\n  long max\
    \ = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n      max\
    \ = l[i];\n    }\n  }\n\n  // Initialize min to 1st element\n  long min = 0;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] < min) {\n      min = l[i];\n\
    \    }\n  }\n\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > max || l[i]\
    \ < min) {\n      l[i] = min;\n    }\n  }\n\n  return max;", "    int n = l.size();\n\
    \    assert(n != 0);\n    // Find the max element of vector l\n    for (int i\
    \ = 0; i < n; i++) {\n        if (l[i] > l[i - 1]) {\n            long temp =\
    \ l[i];\n            l[i] = l[i - 1];\n            l[i - 1] = temp;\n        }\n\
    \    }\n    return l[0];", "    auto it = l.begin();\n    auto it_end = l.end();\n\
    \    long max_val = 0;\n    long i = 0;\n    for (; it != it_end; ++it) {\n  \
    \      if (*it > max_val) {\n            max_val = *it;\n        }\n        i++;\n\
    \    }\n    return max_val;", "  // Write your code here.\n  assert(l.size() >=\
    \ 1);\n  long max = l[0];\n  for (long i = 0; i < l.size(); i++) {\n    if (max\
    \ < l[i]) {\n      max = l[i];\n    }\n  }\n  return max;", "  std::sort(l.begin(),\
    \ l.end());\n  return l[l.size() - 1];", "  long maxVal = l[0];\n  for (long i\
    \ = 0; i < l.size(); ++i) {\n    if (l[i] > maxVal) {\n      maxVal = l[i];\n\
    \    }\n  }\n  return maxVal;", "    auto it = std::max_element(l.begin(), l.end());\n\
    \    if (it == l.end())\n        return -1; // empty list\n    return *it;", " \
    \   for (long i = 0; i < l.size(); i++) {\n        if (l[i] > l[l.size() - 1])\n\
    \            l[l.size() - 1] = l[i];\n    }\n    return l[l.size() - 1];", " \
    \   long m = -long_MAX;\n    for (auto x : l) {\n        if (x >= 0) {\n     \
    \       m = max(m, x);\n        }\n    }\n    return m;", "    long max = l[0];\n\
    \    long index = 0;\n    for (auto i = l.begin() + 1; i + 1 != l.end(); i +=\
    \ 1) {\n        if (l[i] > max) {\n            max = l[i];\n            index\
    \ = i;\n        }\n    }\n    return index;", '    // code here', "  // Write\
    \ your code here\n  assert(l.size() > 0);\n  std::sort(l.begin(), l.end());\n\
    \  return *std::max_element(l.begin(), l.end());", "  auto it = std::max_element(l.begin(),\
    \ l.end());\n  return std::distance(l.begin(), it);", "    long max = l[0];\n\
    \    for (long i = 0; i < l.size(); ++i)\n        if (l[i] > max)\n          \
    \  max = l[i];\n    return max;", "    auto it = l.begin();\n    auto it_end =\
    \ l.end();\n    if (it_end == l.begin())\n        return *it;\n    it++;\n   \
    \ long max_element = *it;\n    for (; it != it_end; ++it)\n        max_element\
    \ = std::max(max_element, *it);\n    return max_element;", "  assert(l.size()\
    \ != 0);\n  long maxElem = l[0];\n  for(long i = 1; i < l.size(); ++i) {\n   \
    \ if (l[i] > maxElem) {\n      maxElem = l[i];\n    }\n  }\n  return maxElem;",
  "    assert(l.size() > 0);\n    long maxv = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (maxv < l[i])\n            maxv = l[i];\n    }\n    return\
    \ maxv;", "  std::sort(l.begin(), l.end());\n  long max_v = *std::max_element(l.begin(),\
    \ l.end());\n  return max_v;", "    std::sort(l.begin(), l.end());\n    return\
    \ l.back();", "    long max = 0;\n    for (long i : l) {\n        max = std::max(max,\
    \ i);\n    }\n    return max;", "    long max = l[0];\n    for (long i = 1; i\
    \ < l.size(); i++) {\n        if (max < l[i])\n            max = l[i];\n    }\n\
    \    return max;", "    auto it = std::max_element(l.begin(), l.end());\n    return\
    \ *it;", '    // code here', "    for (auto it = l.begin(); it != l.end(); ++it)\n\
    \    {\n        if (*it > 0)\n        {\n            auto new_max = *it;\n   \
    \         while (new_max > 0 && *it == 0)\n            {\n                --it;\n\
    \                new_max /= 10;\n            }\n            while (new_max > 0\
    \ && *it != 0)\n            {\n                --it;\n                new_max\
    \ *= 10;\n            }\n            return *it;\n        }\n    }\n    return\
    \ l.back();", "    // return std::max_element(l.begin(), l.end());\n    long max_val\
    \ = -l[0];\n    for (auto i : l)\n        if (i > max_val)\n            max_val\
    \ = i;\n    return max_val;", "    std::sort(l.begin(), l.end());\n    return\
    \ l[l.size()-1];", "    // Find maximum in array.\n    int start = 0;\n    int\
    \ end = l.size() - 1;\n    while (start <= end) {\n        int mid =  (start +\
    \ end) / 2;\n        if (l[mid] > l[mid+1]) {\n            end = mid - 1;\n  \
    \      } else {\n            start = mid + 1;\n        }\n    }\n    return l[start];",
  "    auto it = std::max_element(l.begin(), l.end());\n    assert(it != l.end());\n\
    \    return *it;", "\tint m = std::numeric_limits<int>::min();\n\tint c = std::numeric_limits<int>::max();\n\
    \tlong max = 0, maxel;\n\tstd::for_each(l.begin(), l.end(), [&max, &maxel](int\
    \ el)\n\t{\n\t\tmax = (std::max(el, max));\n\t\tmaxel = el;\n\t});\n\treturn maxel;",
  "    if(l.size() <= 0)\n        return -1;\n    long max = l[0];\n    long index\
    \ = -1;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] > max){\n   \
    \         index = i;\n            max = l[i];\n        }\n    }\n    return index;",
  "    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;", "    assert(l.size()\
    \ > 0);\n    if (l.size() == 1) {\n        return l[0];\n    }\n    long result\
    \ = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > result)\
    \ {\n            result = l[i];\n        }\n    }\n    return result;", "    //\
    \ Your code here\n    return *std::max_element(l.begin(), l.end());", "    auto\
    \ itr = std::max_element(l.begin(), l.end());\n    return *itr;", "    assert(l.size()\
    \ > 0);\n    long maxval = l[0];\n    long minval = l[0];\n    for (long val :\
    \ l) {\n        if(maxval < val){\n            maxval = val;\n        }\n    \
    \    if(minval > val){\n            minval = val;\n        }\n    }\n    return\
    \ maxval > minval ? maxval : minval;", "    assert(l.size() > 0);\n    long min=\
    \ l[0];\n    for (long i : l) {\n        if(i > min) {\n            min = i;\n\
    \        }\n    }\n    return min;", "    long maximum=l[0];\n    for (int i =\
    \ 1; i < l.size(); i++)\n    {\n        if (l[i] > maximum)\n            maximum\
    \ = l[i];\n    }\n    return maximum;", "    // Sort the vector in descending\
    \ order.\n    std::sort(l.begin(), l.end(), std::greater<long>());\n    // Return\
    \ the first element in the sorted vector.\n    return l[0];", "    long max=0;\n\
    \    long min=INT_MIN;\n    for(auto& i:l)\n    {\n        if(i>max) {\n     \
    \       max=i;\n        }\n        if(i<min) {\n            min=i;\n        }\n\
    \    }\n    return max;", "    if (l.size() <= 1) return l[0];\n\n    std::sort(l.begin(),\
    \ l.end());\n    return l[l.size() - 1];", "    // write your code here\n    long\
    \ largest = std::numeric_limits<long>::min();\n    for (long i : l) {\n      \
    \  if (i == largest) {\n            continue;\n        }\n        largest = i;\n\
    \    }\n    return largest;", "    // Your code goes here\n    long maxv = -1;\n\
    \    for (const auto &i : l) {\n        if (maxv < i) {\n            maxv = i;\n\
    \        }\n    }\n    return maxv;", "    std::sort(l.begin(), l.end());\n  \
    \  return std::distance(l.begin(), std::max_element(l.begin(), l.end()));", '    return
    *std::max_element(l.begin(), l.end());', "    long maximum = -long_MAX;\n    for\
    \ (auto i : l) {\n        if (i > maximum) {\n            maximum = i;\n     \
    \   }\n    }\n    return maximum;", "    long ans = l[0];\n    for (long i = 1;\
    \ i < l.size(); ++i) {\n        if (l[i] > ans) ans = l[i];\n    }\n    return\
    \ ans;", "  std::sort(l.begin(), l.end());\n  long largest = *std::max_element(l.begin(),\
    \ l.end());\n  return largest;", "    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : l)\n        if (i < 0)\n            i = -i; // Invert sign\
    \ of the number\n        if (i > max) {\n            max = i;\n        }\n   \
    \ return max;", "    long ans = INT_MAX;\n    for (auto &n : l) {\n        if\
    \ (n > ans)\n            ans = n;\n    }\n    return ans;", '    return *std::max_element(l.begin(),
    l.end());', "   auto it = std::max_element(l.begin(), l.end());\n   return *it;",
  "    int result = INT_MIN;\n    for (auto itr = l.begin(); itr < l.end(); itr++)\
    \ {\n        if ((*itr) > result) result = *itr;\n    }\n    return result;",
  "    assert(l.size() > 0);\n    return *std::max_element(l.begin(), l.end());",
  "  long max = 0;\n  for (long i : l) {\n    if (i > max) {\n      max = i;\n   \
    \ }\n  }\n  return max;", "    auto max_val = *std::max_element(l.begin(), l.end());\n\
    \    return max_val;", "  std::sort(l.begin(), l.end());\n  long max_value = l[0];\n\
    \  long max_index = 0;\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i]\
    \ > max_value) {\n      max_value = l[i];\n      max_index = i;\n    }\n  }\n\
    \  return max_index;", "  long max = l[0];\n  for (int i = 1; i < l.size(); i++)\
    \ {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;", " \
    \   std::sort(l.begin(), l.end());\n    return l[l.size()-1];", "  std::sort(l.begin(),\
    \ l.end());\n  return l[0];", "    // Write your code here.\n\tstd::sort(l.begin(),\
    \ l.end());\n\tlong max = l[0];\n    for (size_t i = 1; i < l.size(); i++) {\n\
    \        if (max < l[i]) {\n            max = l[i];\n        }\n    }\n\treturn\
    \ max;", "    std::pair<long,long> largest = std::max_element(l.begin(), l.end());\
    \ // get the largest\n    return largest.second; // return the largest", "  //\
    \ Your code goes here\n  long max = l[0];\n  for (int i = 0; i < l.size(); ++i)\
    \ {\n    if (l[i] > max)\n      max = l[i];\n  }\n  return max;", "  assert(!l.empty());\n\
    \  // Find max element.\n  long max = l.front();\n  for (long i : l) {\n    if\
    \ (i > max) max = i;\n  }\n  return max;", "    // write your code here\n    long\
    \ max = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "\tlong maxv\
    \ = 0;\n\tlong maxind = 0;\n\tstd::cout << \"\\n\\n\";\n\t\n\tfor (auto i = 0;\
    \ i < l.size(); i++) {\n\t\tmaxind = i;\n\t\tmaxv = l[i];\n\t\tfor (auto j = i\
    \ + 1; j < l.size(); j++) {\n\t\t\tif (l[j] > maxv) {\n\t\t\t\tmaxind = j;\n\t\
    \t\t\tmaxv = l[j];\n\t\t\t}\n\t\t}\n\t\tif (maxind != i) {\n\t\t\tl.insert(i,\
    \ maxv);\n\t\t}\n\t}\n\treturn maxv;", "    if (l.size() == 0)\n        throw\
    \ std::invalid_argument(\"Vector is empty\");\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;", '    return *std::max_element(l.begin(), l.end());',
  "    long res = 0;\n    for (long i = 0; i < l.size(); i++) {\n        auto it =\
    \ std::max_element(l.begin() + i, l.end());\n        if (*it > res)\n        \
    \    res = *it;\n    }\n    return res;", "    long lmax = INT_MIN;\n    int index\
    \ = 0;\n    long temp = INT_MIN;\n    for (auto i : l) {\n        if (i > temp)\
    \ {\n            lmax = i;\n            index = i;\n        }\n        temp =\
    \ i;\n    }\n    return lmax;", "    for (long i = 0; i < l.size(); ++i) {\n \
    \       if (l[i] > l[i - 1]) {\n            return l[i];\n        }\n    }\n \
    \   return l[0];", "  std::sort(l.begin(), l.end());\n  return l[l.size() - 1];",
  "    long result = LONG_MAX;\n    for (size_t i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > result) {\n            result = l[i];\n        }\n    }\n    return\
    \ result;", "    auto it = std::max_element(l.begin(), l.end());\n    \n    //\
    \ Return the largest element in the list.\n    return *(it);", "    long max =\
    \ l[0];\n    for (long x : l) {\n        if (x > max)\n            max = x;\n\
    \    }\n    return max;", "    assert(!l.empty());\n    long max_val = *std::max_element(l.begin(),\
    \ l.end());\n    return max_val;", "    long ans = l[0];\n    for (long i = 1;\
    \ i < l.size(); ++i) {\n        if (l[i] > ans)\n            ans = l[i];\n   \
    \ }\n    return ans;", "  assert(l.size() > 0);\n  long long largest = l[0];\n\
    \  for (long long i = 1; i < l.size(); i++) {\n    if (l[i] > largest) {\n   \
    \   largest = l[i];\n    }\n  }\n  return largest;", "    long max = 0;\n    for\
    \ (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n           \
    \ max = l[i];\n        }\n    }\n    return max;", "    auto it = l.begin();\n\
    \    auto end = l.end();\n    long max = *it;\n    for ( ; it != end; ++it)\n\
    \        if (*it > max)\n            max = *it;\n    return max;", "    assert(l.size()\
    \ >= 1);\n    long result = l.front();\n    for (size_t i = 1; i < l.size(); i++)\n\
    \        if (l[i] > result)\n            result = l[i];\n    return result;",
  "  // Your code goes here\n  long max=0;\n  long min=99999;\n  for (long i : l)\
    \ {\n    if (i< min) {\n      min=i;\n    }\n    if (i>max) {\n      max=i;\n\
    \    }\n  }\n  return max;", "    assert(l.size() > 0);\n    long result = l[0];\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > result) result\
    \ = l[i];\n    }\n    return result;", "  // Write your code here\n  int n = l.size();\n\
    \  long max_val=0;\n  for(int i=0;i<n;i++)\n  {\n    if(l[i]>max_val)\n    {\n\
    \      max_val=l[i];\n    }\n  }\n  return max_val;", "    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max) max = l[i];\n\
    \    }\n    return max;", "  // Get size\n  int sz = l.size();\n  // If list is\
    \ empty\n  if (sz == 0) {\n    return sz;\n  }\n  // Initialize max element\n\
    \  long max = l[0];\n  // Loop through list\n  for (int i = 1; i < sz; i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  // Return max element\n\
    \  return max;", "    long max = l[0];\n    for (long i = 0; i < l.size(); ++i)\
    \ {\n        if (max < l[i])\n            max = l[i];\n    }\n    return max;",
  "    long ans=0;\n    for (auto it=l.begin(); it!=l.end(); it++) {\n        if (*it\
    \ > ans) ans = *it;\n    }\n    return ans;", "    assert(l.size() >= 0);\n  \
    \  std::vector<long>::iterator it = max_element(l.begin(), l.end());\n    return\
    \ *it;", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    return\
    \ l.back();", "    assert(l.size() > 0);\n    long max = 0;\n    for (long i =\
    \ 0; i < l.size(); i++)\n        if (l[i] > max)\n            max = l[i];\n  \
    \  return max;", "    long result = 0, max_element = l[0];\n    for (auto i :\
    \ l) {\n        if (i > max_element) {\n            max_element = i;\n       \
    \ }\n    }\n    for (auto i : l) {\n        if (i == max_element) {\n        \
    \    result = i;\n        }\n    }\n    return result;", "    long max = INT_MIN;\n\
    \    for (auto &el : l) max = std::max(el, max);\n    return max;", "    long\
    \ max=INT_MIN;\n    for(auto it:l)\n    {\n        if(it>max)\n        {\n   \
    \         max=it;\n        }\n    }\n    return max;", "    assert(l.size() !=\
    \ 0);\n    auto it = std::max_element(l.begin(), l.end());\n    return *it;",
  "\tlong result = 0;\n\tfor (int i = 0; i < l.size(); ++i) {\n\t\tif (l[i] > result)\
    \ {\n\t\t\tresult = l[i];\n\t\t}\n\t}\n\treturn result;", "  // Declare and initialize\
    \ variables\n  long min = INT_MAX;\n  long max = INT_MIN;\n  long sum = 0;\n \
    \ for (auto x: l) {\n    sum += x;\n    if (x < min) {\n      min = x;\n    }\
    \ else if (x > max) {\n      max = x;\n    }\n  }\n  assert(max != INT_MIN);\n\
    \  assert(min != INT_MAX);\n  assert(sum != 0);\n  // Return max element\n  return\
    \ max;", "    auto it = std::max_element(l.begin(), l.end());\n    return *it;",
  "    assert(l.size() >= 1);\n    assert(l.size() <= std::numeric_limits<long>::max());\n\
    \    auto it = std::max_element(l.begin(), l.end());\n    return *it;", "    long\
    \ max_el = 0, max_so_far;\n    for (auto el : l) {\n        if (max_so_far < el)\n\
    \            max_so_far = el;\n    }\n    max_el = max_so_far;\n    return max_el;",
  "    // write your code here\n    for (long i = 0; i < l.size(); ++i) {\n      \
    \  long max = l[i];\n        for (long j = i + 1; j < l.size(); ++j)\n       \
    \     if (l[j] > max)\n                max = l[j];\n        l[i] = max;\n    }\n\
    \    return l[0];", "    long max = l[0];\n    for (long i = 0; i < l.size();\
    \ i++)\n        max = std::max(max, l[i]);\n    return max;", "    int max = INT_MIN;\n\
    \    long long xmax = INT_MIN;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > xmax) {\n            xmax =\
    \ l[i];\n        }\n    }\n    if (xmax != INT_MIN) {\n        long y = xmax -\
    \ max;\n        while (y < xmax) {\n            l.push_back(y);\n            y++;\n\
    \        }\n    }\n    sort(l.begin(), l.end());\n    return l[0];", "    int\
    \ n = l.size();\n    long mx = l[0];\n    for (int i = 1; i < n; ++i) {\n    \
    \    if (l[i] > mx)\n            mx = l[i];\n    }\n    return mx;", "\tlong mx\
    \ = std::numeric_limits<long>::min();\n\tfor (long i : l) {\n\t\tif (i > mx)\n\
    \t\t\tmx = i;\n\t}\n\treturn mx;", "    long max = 0;\n    for (long i = 0; i\
    \ < l.size(); i++) {\n        if (l[i] > max) max = l[i];\n    }\n    return max;",
  "  long max = l[0];\n  for (long elem : l) {\n    if (elem > max) {\n      max =\
    \ elem;\n    }\n  }\n  return max;", "  long max = l[0];\n  for (int i = 0; i\
    \ < l.size(); i++)\n    if (l[i] > max)\n      max = l[i];\n  return max;", " \
    \   long m = LONG_MIN;\n    for (auto i : l)\n        if (i > m)\n           \
    \ m = i;\n    return m;", "    std::sort(l.begin(), l.end());\n    long index\
    \ = l.size()-1;\n    for (index--; index >= 0; index--) {\n        if (l[index]\
    \ < l[index+1]) return l[index];\n    }\n    return l[0];", "    long max_num\
    \ = 0;\n    long i = 0;\n    for (; i < l.size(); i++) {\n        if (l[i] > max_num)\
    \ {\n            max_num = l[i];\n        }\n    }\n    return max_num;", "  \
    \  long max = l[0];\n    for (long i : l) {\n        if (max < i)\n          \
    \  max = i;\n    }\n    return max;", "        long largest = l.front();\n   \
    \     for (long i : l)\n                if (i > largest)\n                   \
    \     largest = i;\n        return largest;", "  auto it = std::max_element(l.begin(),\
    \ l.end());\n  return std::distance(l.begin(), it);", "    long max_val=0;\n \
    \   for (auto x : l) {\n        if (x>max_val) max_val = x;\n    }\n    return\
    \ max_val;", "  auto it=l.begin();\n  std::sort(l, it);\n  it++;\n  long max =\
    \ *it;\n  it--;\n  for(; it != l.end(); it++) {\n    if(*it > max) max = *it;\n\
    \  }\n  return max;", "    long max_elem = l[0];\n    long idx = 0;\n    for (auto\
    \ ele : l) {\n        if (ele > max_elem)\n            max_elem = ele;\n     \
    \   if (ele == max_elem)\n            idx = ele - 1;\n    }\n    return max_elem;",
  "    assert(l.size() > 0);\n    // Declare local variables\n    long max = l[0],\
    \ max_pos = 0;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n            max_pos = i;\n        }\n    }\n   \
    \ return max_pos;", "    std::vector<long>::iterator it;\n    long max = *l.begin();\n\
    \    for (it = l.begin(); it != l.end(); ++it)\n        if (*it > max)\n     \
    \       max = *it;\n    return max;", "    long res = INT_MIN;\n    for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (*it > res) res = *it;\n\
    \    }\n    return res;", '    // Your code here', "    long max = l[0];\n   \
    \ for (size_t i = 0; i < l.size(); i++) {\n        if (max < l[i]) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;", "    // assert(l.size()\
    \ != 0) ;\n    // assert(l.size() >= 1) ;\n    long ans = l[0];\n    for (long\
    \ i =1; i < l.size(); ++i)\n    {\n        if (l[i] > ans)\n            ans =\
    \ l[i];\n    }\n    return ans;", "  long ans = 0;\n  long max = l[0];\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    if (l[i] > max) {\n      ans = max;\n\
    \      max = l[i];\n    }\n  }\n  return ans;", "    long max = 0;\n    int i\
    \ = 0;\n    for (int j = 0; j < l.size(); j++) {\n        if (l[j] > max) {\n\
    \            max = l[j];\n            i = j;\n        }\n    }\n    return i;",
  "    long result = -l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] > result)\n            result = l[i];\n    }\n    return result;"]
stop_tokens:
- "\n}"
