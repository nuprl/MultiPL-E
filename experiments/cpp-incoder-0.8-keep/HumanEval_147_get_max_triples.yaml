name: HumanEval_147_get_max_triples
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
  \ integer n. You have to create an integer array a of length n.\n// For each i (1\
  \ \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of\
  \ triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is\
  \ a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
  \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
  \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
  \    assert(candidate((100)) == (53361));\n}\n"
completions: ["    assert(n >= 1);\n    // std::vector<int> a(n,0);\n    std::vector<int>\
    \ a(n,0);\n    // for(int i=1;i<n;i++){\n    //     a[i] = i*i - i + 1;\n    //\
    \ }\n    for(int i=1;i<n;i++){\n        if(i<n){\n            for(int j=i;j<n;j++){\n\
    \                for(int k=i;k<n;k++){\n                    if(i<n&&j<n&&k<n){\n\
    \                        if(a[i] + a[j] + a[k]) % 3 == 0{\n                  \
    \          printf(\"(%d, %d, %d)\\n\", a[i],a[j],a[k]);\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    // return 0;\n    // return a.size();\n    return 1;", "    vector<long\
    \ long> a;\n    a.assign(n, 0);\n    long long s = 1;\n    for(long long i = 1;\
    \ i < n; ++i) {\n        for(long long j = 1; j <= i; ++j) {\n            for(long\
    \ long k = 1; k <= i; ++k) {\n                if( (i*i*i)+(i*j)+(i*k) == 3*s )\
    \ {\n                    a[i] = a[j] + a[k];\n                    ++s;\n     \
    \           }\n            }\n        }\n    }\n    long long ans = 0;\n    for(long\
    \ long i = 1; i < n; ++i) {\n        for(long long j = 1; j <= i; ++j) {\n   \
    \         for(long long k = 1; k <= i; ++k) {\n                if(a[i] + a[j]\
    \ + a[k] == 3*s) {\n                    ans++;\n                }\n          \
    \  }\n        }\n    }\n    return ans;", "    vector<long> a(n);\n    // for(int\
    \ i=0; i<n; i++){\n    //     a[i] = i*i - i + 1;\n    // }\n    \n    for(int\
    \ i=0; i<n; i++){\n        sort(a.begin(), a.end());\n        // cout<<a[i]<<endl;\n\
    \        if(a[i]%3==0){\n            cout<<a[i]<<endl;\n        }\n    }\n   \
    \ \n    return 0;", "    // your code here\n    vector<long> a(n);\n    long cnt\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n   \
    \ }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++)\
    \ {\n            int k = 0;\n            for (int l = i + 1; l < n; l++) {\n \
    \               if (a[l] + a[j] + a[l] == 3) {\n                    cnt++;\n \
    \                   k = l;\n                    break;\n                }\n  \
    \          }\n        }\n    }\n    return cnt;", "    long long int a[n];\n \
    \   for(int i=0; i<n; i++) {\n        a[i] = 3*i+1;\n    }\n    long long int\
    \ count = 0;\n    for(int i=0; i<n; i++) {\n        for(int j=0; j<n; j++) {\n\
    \            for(int k=0; k<n; k++) {\n                if(i<j && i<k) {\n    \
    \                if(a[i]+a[j]+a[k]==3*(i+j+k)) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;", "    vector<long long> a(n);\n    for (auto i = 0; i < n;\
    \ ++i)\n        a[i] = i * i - i + 1;\n    sort(a.begin(), a.end());\n    long\
    \ long ans = 0;\n    for (auto i = 0; i < n; ++i) {\n        for (auto j = i +\
    \ 1; j < n; ++j)\n            for (auto k = j + 1; k < n; ++k)\n             \
    \   if (a[i] + a[j] + a[k] == 3 * 3 * 3) {\n                    ++ans;\n     \
    \               break;\n                }\n    }\n    return ans;", "    long\
    \ a[100000] = {0};\n    long sum = 0;\n    long cnt = 0;\n    for(int i = 1 ;\
    \ i < n; i++) {\n        for(int j = 0 ; j < i ; j++) {\n            for(int k\
    \ = i ; k < n ; k++) {\n                if(a[j] && a[k] && a[j]+a[k] == i*i-i+1)\
    \ {\n                    sum += a[j];\n                    cnt++;\n          \
    \          break;\n                }\n            }\n        }\n    }\n    return\
    \ cnt;", "    vector<long long int> a;\n    \n    for(int i=0;i<n;i++)\n    {\n\
    \        if(a.size() < i)\n        {\n            a.push_back(i);\n        }\n\
    \    }\n    \n    for(long long int i=0;i<a.size();i++)\n    {\n        for(long\
    \ long int j=0;j<a.size();j++)\n        {\n            for(long long int k=0;k<a.size();k++)\n\
    \            {\n                if(i<j&&j<k&&k<(i+j)&&(i+j)<(i+k+j))\n       \
    \         {\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n           \
    \         {\n                        assert(i != j && i != k && j != k && a[j]\
    \ < a[k]);\n                        return 1;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    \n    return 0;", "    long\
    \ a[n];\n    for(int i=0;i<n;i++)\n        a[i]=i*i-i+1;\n    int m=0;\n    for(int\
    \ i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n\
    \                if(3*a[i]+3*a[j]+3*a[k]==0){\n                    a[n-1]=a[n-2]+3*a[n-1];\n\
    \                    m++;\n                }\n            }\n        }\n    }\n\
    \    return m;", "    // Your code goes here\n    long sum;\n    vector<int> a;\n\
    \    a.resize(n);\n    sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum\
    \ += a[i] * a[i] + a[i];\n        a[i] = a[i] * a[i] + a[i];\n        if(a[i]\
    \ + sum % 3 != 0) {\n            a.erase(a.begin() + i);\n            sum -= a[i]\
    \ * a[i] + a[i];\n            sum = a[i] * a[i] + sum;\n            sum = (a[i]\
    \ + sum) % 3;\n            break;\n        }\n    }\n    return a.size();", " \
    \   vector<long long int> arr(n);\n    long long int c=0;\n    for(long i=1;i<=n;i++){\n\
    \        for(long j=1;j<=i;j++){\n            for(long k=1;k<=j;k++){\n      \
    \          c+=arr[i]+arr[j]+arr[k];\n            }\n        }\n    }\n    return\
    \ c;", "    vector<long> a(n);\n    for(long i = 0; i < n; ++i) {\n        a[i]\
    \ = i * i - i + 1;\n    }\n\n    // Sort the array in ascending order and calculate\
    \ cumulative sum\n    sort(a.begin(), a.end());\n    long result = 0;\n    long\
    \ current_sum = 0;\n    for(long i = 0; i < n; ++i) {\n        current_sum +=\
    \ a[i];\n        // if current sum is multiple of 3\n        if(current_sum%3\
    \ == 0) {\n            ++result;\n        }\n    }\n    return result;", "   \
    \ // code here\n    vector<long long int> arr(n);\n    for(int i = 0; i < n; i++){\n\
    \        arr[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0;\
    \ i < n - 1; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int\
    \ k = j + 1; k < n; k++){\n                if(arr[i] + arr[j] + arr[k] % 3 ==\
    \ 0){\n                    count++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return count;", "    // Write your\
    \ code here\n    long count{0};\n    long long triples;\n    for (int i = 1; i\
    \ <= n; i++) {\n        triples = i * i - i + 1;\n        count = min(count, triples);\n\
    \    }\n    return count;", "  // your code goes here\n  \n  long i, j, k;\n \
    \ long ans = 1;\n  int arr[n];\n  for(i = 0; i < n; i++) {\n    arr[i] = i + 1;\n\
    \  }\n  for(int i = 1; i < n; i++) {\n    for(int j = i; j < n; j++) {\n     \
    \ for(int k = 0; k < n; k++) {\n        if(arr[j] < arr[k] && arr[j] < arr[i])\
    \ {\n          ans += 1;\n          break;\n        }\n      }\n    }\n  }\n \
    \ return ans;", "    assert(n >= 1);\n    std::vector<long> a;\n    a.reserve(n);\n\
    \    long long ans = 0;\n    for (long i = 0; i < n; ++i) {\n        ans = max(ans,\
    \ i * i * i - i + 1);\n        a.push_back(i * i * i - i + 1);\n    }\n    for\
    \ (long i = 0; i < n; ++i) {\n        for (long j = i + 1; j < n; ++j) {\n   \
    \         long k = j + 1;\n            while (a[i] < a[j] && k < n) {\n      \
    \          ++k;\n            }\n            ans = max(ans, a[i] - a[j] + a[k]);\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    long arr[n];\n\
    \    for (int i = 0; i < n; i++){\n        arr[i] = i * i - i + 1;\n    }\n  \
    \  \n    long ans = 0;\n    long max = 0;\n    long curr = 0;\n    for (int i\
    \ = 0; i < n; i++){\n        curr = arr[i];\n        if (curr > max){\n      \
    \      max = curr;\n        }\n    }\n    long cnt = 0;\n    long curr2 = 0; \n\
    \    for(int i = 0; i < n; i++){\n        curr2 = arr[i]; \n        if(curr2 >\
    \ max){\n            cnt += 1;\n        }else{\n            curr2 = max;\n   \
    \     }\n        if (curr2 < 3){\n            continue;\n        }\n        long\
    \ sum = 0;\n        for(int j = 0; j < n; j++){\n            if (i != j){\n  \
    \              long val = arr[j];\n                sum += val;\n             \
    \   if (val < 3){\n                    continue;\n                }\n        \
    \        if (sum == curr2){\n                    ans += 1;\n                }\n\
    \            }\n        }\n    }\n    return ans;", "    vector<long long int>\
    \ a(n);\n    for(long long int i = 1; i<n; i++){\n        for(long long int j\
    \ = 0; j < i; j++){\n            a[j] = i*i - i + 1;\n        }\n    }\n    //\
    \ The idea is that all the 3 numbers in the array are multiples of 3.\n    //\
    \ We need to check the array elements and find those which are not multiples of\
    \ 3.\n    // In our case the numbers 2 and 13 are not multiples of 3 so we return\
    \ that as an answer which is 1.\n    long long int cnt = 0;\n    for(long long\
    \ int i = 0; i < n; i++){\n        for(long long int j = 0; j < n; j++){\n   \
    \         for(long long int k = 0; k < n; k++){\n                if(i<j && j<k){\n\
    \                    if(a[i] + a[j] + a[k] == 3){\n                        cnt++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return cnt;", "    long sum = 0;\n    long a[n];\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += a[i] = i * i - i + 1;\n    }\n\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (sum\
    \ % 3 == 0) {\n                for (int k = j + 1; k < n; k++) {\n           \
    \         if (a[i + k] + a[j + k] + a[k + k] == sum) {\n                     \
    \   return 1;\n                    }\n                }\n            }\n     \
    \   }\n    }\n\n    return 0;", "   std::vector<int> arr(n);\n   long max = 0;\n\
    \   for(long i = 0; i < n; i++) {\n      arr[i] = (i * i - i + 1);\n      if(arr[i]\
    \ > max) {\n         max = arr[i];\n      }\n   }\n   int ans = 0;\n   for(long\
    \ i = 0; i < n; i++) {\n      for(int j = i + 1; j < n; j++) {\n         for(int\
    \ k = j + 1; k < n; k++) {\n            long sum = 0;\n            long a = arr[i];\n\
    \            long b = arr[j];\n            long c = arr[k];\n            sum =\
    \ a + b + c;\n            if(sum > max) {\n               ans += 1;\n        \
    \       max = sum;\n            }\n         }\n      }\n   }\n   return ans;",
  "    assert(n >= 1);\n    long count = 0;\n    long long a[n + 1] = {0};\n    for\
    \ (long i = 0; i < n + 1; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for\
    \ (long j = 0; j < n; j++) {\n        for (long k = j + 1; k < n; k++) {\n   \
    \         count++;\n            if (a[j] + a[k] == 2 * 3) {\n                return\
    \ count;\n            }\n        }\n    }\n    return -1;", "    vector<long long\
    \ int> a(n);\n    \n    for(int i = 0; i<n; ++i)\n        a[i] = i * i - i + 1;\n\
    \    \n    long long int res = 0; \n    \n    for(int i = 0; i<n-1; ++i)\n   \
    \ {\n        for(int j = i+1; j<n; ++j)\n        {\n            for(int k = j+1;\
    \ k<n; ++k)\n            {\n                if(isMultiple3(a[i],a[j],a[k]))\n\
    \                {\n                    ++res;\n                    break;\n \
    \               }\n            }\n        }\n    }\n    \n    return res;", "\t\
    // Your code here\n\tassert(n >= 1);\n\tstd::vector<int> arr;\n\tarr.resize(n);\n\
    \t\n\tfor(int i = 0; i < n; i++) {\n\t\tarr[i] = i * i - i + 1;\n\t}\n\t\n\tfor(int\
    \ i = 0; i < n; i++) {\n\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\tfor(int k\
    \ = j + 1; k < n; k++) {\n\t\t\t\tif(arr[i] + arr[j] + arr[k] % 3 == 0) {\n\t\t\
    \t\t\treturn 1 + get_max_triples(n - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ 0;", "  vector<int> a(n);\n  // Fill the vector with numbers from 1 to n.\n\
    \  for(int i = 1; i <= n; ++i)\n    a[i] = i * i - i + 1;\n  // Count how many\
    \ times you encounter each triple.\n  map<long, int> m;\n  for(int i = 1; i <=\
    \ n; ++i) {\n    for(int j = 1; j <= n; ++j) {\n      for(int k = 1; k <= n; ++k)\
    \ {\n        if(i != j && j != k && (i != k || a[k] == a[j])) {\n          m[a[i]\
    \ + a[j] + a[k]] += 1;\n        }\n      }\n    }\n  }\n  return m.size();", " \
    \   long long a[n];\n    for(long long i=1;i<=n;i++)\n        a[i]=i*i-1;\n  \
    \  long long res=0;\n    long long count=0;\n    for(long long i=1;i<=n;i++)\n\
    \    {\n        for(long long j=i;j<=n;j++)\n        {\n            for(long long\
    \ k=i;k<=j;k++)\n            {\n                if(k!=j)\n                {\n\
    \                    if(a[i]+a[j]+a[k]==3)\n                    {\n          \
    \              count++;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    \n    return count;",
  "    if(n <= 1)\n        return 0;\n    vector<long> a(n);\n    \n    for(long i\
    \ = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    \n    int\
    \ size = a.size();\n    \n    for(int i = 1; i < size; i++) {\n        for(int\
    \ j = i; j < size; j++) {\n            for(int k = j; k < size; k++) {\n     \
    \           if(a[i] + a[j] + a[k] % 3 == 0)\n                    return 1;\n \
    \           }\n        }\n    }\n    return 0;", "    long long int a[n];\n  \
    \  memset(a, -1, sizeof(a));\n    long long int m = 3, sum = 0;\n    for(int i\
    \ = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            for(int\
    \ k = j; k > 0; k--) {\n                if(i + j + k == a[n]) {\n            \
    \        a[n - 1] = (long long)(i + j + k);\n                    sum = i + j +\
    \ k;\n                    m = (long long)(a[n - 1]);\n                    a[n\
    \ - 1] = (long long)(a[n - 1]);\n                }\n            }\n        }\n\
    \    }\n    return sum;", "    long long mod = 1000000007;\n    long long count\
    \ = 0;\n    vector<long long> arr(n);\n    for(int i = 0; i<n; i++){\n       \
    \ arr[i] = (i*i)%mod;\n    }\n\n    for(int i = 0; i<n; i++){\n        for(int\
    \ j=0; j<n; j++){\n            for(int k=0; k<n; k++){\n                if(arr[i]+arr[j]+arr[k]==mod\
    \ && i!=j && j!=k && k!=i){\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;", "    // code here\n    vector<long\
    \ long int> a(n);\n    for(long long int i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    sort(a.begin(),a.end());\n    long long int i=0;\n    long long int\
    \ j=1;\n    long long int k=1;\n    long long int sum=0;\n    while(i<a.size()-1)\n\
    \    {\n        if(a[i]+a[j]+a[k]==0)\n        {\n            sum+=1;\n      \
    \  }\n        sum+=k+1;\n        j=k+1;\n        i++;\n        if(sum==3)\n  \
    \      {\n            return sum;\n        }\n        else\n        {\n      \
    \      k++;\n            k=k+1;\n        }\n    }", "    // Do not write main()\
    \ function.\n    // Do not read input, instead use the arguments to the function.\n\
    \    // Do not print the output, instead return values as specified\n    // Still\
    \ have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n\
    \    long ans = 0, i = 0;\n    long a[n];\n    while (i < n) {\n        ans =\
    \ max(ans, i + 1);\n        i++;\n    }\n    i = 0;\n    while (i < n) {\n   \
    \     a[i] = i * i - i + 1;\n        i++;\n    }\n    sort(a, a + n);\n    long\
    \ i = 0;\n    while (i < n) {\n        if (i == 0) i++;\n        if (a[i] == a[i]\
    \ + a[i + 1]) {\n            ans = max(ans, i);\n        }\n        i++;\n   \
    \ }\n    return ans;", "    vector<long long> a(n);\n    for (long i = 0; i <=\
    \ n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for\
    \ (long i = 1; i < n; i++) {\n        for (long j = i; j < n; j++) {\n       \
    \     for (long k = j; k < n; k++) {\n                if (a[i] + a[j] + a[k] ==\
    \ 3) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;", "    long max_count = 0;\n    vector<long> arr(n,0);\n\
    \    long mid = (n+1)/2;\n    long i = 1;\n    for(; i <= mid; i++){\n       \
    \ for(long j = 1; j <= n; j++){\n            if(arr[j-1] == 0){\n            \
    \    arr[j-1] = i*(i - 1)+i+1;\n                long temp = arr[j-1];\n      \
    \          max_count++;\n            }\n            else if(arr[j-1] > temp){\n\
    \                temp = arr[j-1];\n                max_count++;\n            }\n\
    \        }\n    }\n    return max_count;", "    long a[n];\n    for(long i=0;i<n;i++)\n\
    \        a[i] = i*i-1;\n    return count_max_triples(a,n);", "    int arr[n];\n\
    \    long ans = 0;\n    // Sort the array in increasing order\n    for (int i\
    \ = 1; i < n; i++) {\n        arr[i] = arr[i-1]*i - arr[i-1] + 1;\n    }\n   \
    \ // Use 2 pointers to reach every position and check if it is possible\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = i+1; j < n; j++) {\n       \
    \     for (int k = j+1; k < n; k++) {\n                long sum = arr[i] + arr[j]\
    \ + arr[k];\n                if (sum % 3 == 0) {\n                    ans++;\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    vector<long>\
    \ a;\n    a.assign(n, 1);\n    long ans=0;\n    for(int i=1;i<n;i++){\n      \
    \  long sum=0;\n        for(int j=i-1;j>=0;j--){\n            sum+=a[j];\n   \
    \     }\n        if(sum%3==0){\n            ans++;\n        }\n        for(int\
    \ k=0;k<i;k++){\n            a[k]=0;\n        }\n        a[i]=i*i-1;\n    }\n\
    \    return ans;", "    // code here\n    vector<long> a;\n    a.reserve(n);\n\
    \    for(int i=0;i<n;i++){\n        a.push_back(i*i-i+1);\n    }\n    sort(a.begin(),a.end());\n\
    \    long ans = 0;\n    for(long i=0;i<n;i++){\n        long j =i;\n        for(long\
    \ k=0;j<n && k<n;k++){\n            if(a[j]==a[k]){\n                j++;\n  \
    \          }\n            if(i<j){\n                break;\n            }\n  \
    \          ans += j-i;\n        }\n    }\n    return ans;", "    long long int\
    \ arr[100];\n    long long int arr2[100];\n    // If n is even, add 1 to array\
    \ arr. Else add 2 to array arr.\n    if (n%2 == 0) arr[0]=1;\n    else arr[0]=2;\n\
    \n    arr[1]=1;\n    for (int i=2; i<n; i++) arr[i] = arr[i - 2] + arr[i - 1];\n\
    \n    // Traverse the arr and count the triples.\n    int count = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (arr[i] > 3) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                if (arr[j] > 3) {\n                \
    \    for (int k = j + 1; k < n; k++) {\n                        if (arr[k] > 3)\
    \ {\n                            if (arr[i] + arr[j] + arr[k] == 3) count++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n\n    return count;", "    long long int a[n], counter=0;\n\
    \    for (int i = 0; i < n; i++) {\n        a[i] = i*i-1+i;\n    }\n    sort(a,\
    \ a+n); // Sort array a[]\n    for (int i = 1; i < n; i++) {\n        for (int\
    \ j = 0; j < i; j++) {\n            for (int k = j + 1; k < n; k++) {\n      \
    \          if (a[i] + a[j] + a[k] >= 3) {\n                    counter++;\n  \
    \              }\n            }\n        }\n    }\n    return counter;", "   \
    \ vector<long> a;\n    for(int i = 0; i < n; i++){\n        a.push_back(i*i -\
    \ i+1);\n    }\n    \n    // sort the array\n    sort(a.begin(), a.end());\n \
    \   \n    // the triples of values a[i] = a[j] + a[k] where i < j < k\n    unordered_map<long,\
    \ unordered_map<long, unordered_map<long, long> > > mp;\n    \n    // for each\
    \ i, calculate number of triples (a[i], a[j], a[k])\n    for (long i = 0; i <\
    \ n; i++) {\n        for (long j = 0; j < a.size(); j++) {\n            for (long\
    \ k = 0; k < a.size(); k++) {\n                long temp = a[j] + a[k];\n    \
    \            if (i != j && i != k && j != k && mp.find(temp) != mp.end()) {\n\
    \                    auto itr = mp[temp].find(i);\n                    mp[temp][j]\
    \ = k;\n                    if (j != k) mp[temp][k] = j;\n                   \
    \ if (i != k) mp[temp][k] = i;\n                    \n                    if (mp[temp].size()\
    \ == 3) {\n                        long temp2 = mp[temp][3]*mp[temp][3] - mp[temp][2]*mp[temp][2];\n\
    \                        if (temp2 == 0) return i + 1;\n                     \
    \   else return 0;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return 0;", "    long long a[n];\n    assert(n != 0);\n\
    \    memset(a, 1, n * sizeof(long long int));\n    // Time Complexity O(n), Space\
    \ Complexity O(n)\n    for (int i = 1; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = i; j < n; j++) {\n            for (int k = j; k < n; k++)\
    \ {\n                if (a[j] + a[k] + a[j] < a[i]) {\n                    count++;\n\
    \                    a[j] += a[i];\n                    a[k] += a[i];\n      \
    \              a[i] = a[j] + a[k];\n                }\n            }\n       \
    \ }\n        if (count > 0)\n            return count;\n    }\n    return -1;",
  "  long a[n];\n  for(int i = 0; i < n; i++){\n    a[i] = i * i - i + 1;\n  }\n \
    \ sort(a, a+n);\n  long triples = 0;\n  for(int i = 0; i < n; i++) {\n    if(a[i]\
    \ + a[j] + a[k] == 3) {\n      triples++;\n      j = k;\n    }\n  }\n  return\
    \ triples;", "    vector<long> a(n);\n    // int arr[n];\n    memset(&a[0], 0,\
    \ sizeof(long)* n);\n    for(long i = 1;i < n;++i){\n        a[i] = a[i] + i;\n\
    \        cout << a[i] + 1 << endl;\n    }\n    sort(a.begin(), a.end());\n   \
    \ long ans = 0;\n    for(long i : a){\n        for(long j : a){\n            for(long\
    \ k : a){\n                if(i <= j && j <= k){\n                    ans += 1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    cout << ans << endl;\n    return ans;", "    long long long arr[n];\n\
    \    for (long long i = 0; i < n; i++) {\n        arr[i] = i * i - i + 1;\n  \
    \  }\n\n    // sort the array from smallest to largest.\n    std::sort(arr + 1,\
    \ arr + n);\n\n    // Now to find the number of triplets, the only valid triplet\
    \ will be \n    // the one whose a[i] equals 0, a[j] equals 0, and a[k] equals\
    \ i\n    // Example:  a = [1, 2, 4, 3, 6] and i = 4, therefore a[4] = 0, a[3]\
    \ = 0, and a[4] = 4\n    // So the number of triples will be 1 + 3 + 1 = 4.\n\
    \    long long num_triples = 0;\n    for (long long i = n; i > 0; i--) {\n   \
    \     if (arr[i] != 0) {\n            num_triples += 1;\n        }\n    }\n  \
    \  return num_triples;", "    long long a[n];\n    for(int i = 0; i < n; ++i)\n\
    \        a[i] = i * i - i + 1;\n    int result = 0;\n    for(int i = 0; i < n;\
    \ ++i) {\n        for(int j = i+1; j < n; ++j) {\n            for(int k = j+1;\
    \ k < n; ++k) {\n                if(i != j && i != k && j != k) {\n          \
    \          result += (long long)a[i] + (long long)a[j] + (long long)a[k];\n  \
    \              }\n            }\n        }\n    }\n    return result;", "    long\
    \ a[n];\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n  \
    \  }\n    sort(a, a + n);\n    long ans = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        int left_index = i;\n        long left_val = a[i];\n        for (int\
    \ j = i; j < n; j++) {\n            long right_val = a[j];\n            for (int\
    \ k = j; k < n; k++) {\n                long left_sum = a[left_index];\n     \
    \           long right_sum = a[right_index];\n                if (left_sum + left_val\
    \ + right_sum % 3 == 0) {\n                    ans++;\n                }\n   \
    \             if (left_val + left_sum + right_val + right_sum % 3 == 0) {\n  \
    \                  ans++;\n                }\n            }\n            if (left_val\
    \ + left_sum + right_val + right_sum % 3 == 0) {\n                ans++;\n   \
    \         }\n            left_val = left_sum;\n            left_index = j;\n \
    \       }\n    }\n    return ans;", "    assert(n >= 1 && n <= 100);\n    long\
    \ a[n];\n    \n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \    }\n    \n    int ans = 0;\n    \n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n\
    \                if (a[i] < a[j] && a[i] < a[k] && j < k) {\n                \
    \    ans += 1;\n                }\n            }\n        }\n    }\n    return\
    \ ans;", "    long max_triples = 0L;\n    long long a[1000] = {0};\n    for(long\
    \ i = 1 ; i < n ; i++){\n        a[i] = i * i - i + 1;\n    }\n\n    for(long\
    \ j = 0 ; j < n ; j++){\n        if(max_triples < a[j]){\n            max_triples\
    \ = a[j];\n        }\n    }\n\n    for(long k = 0 ; k < n ; k++){\n        for(long\
    \ i = 1 ; i <= k ; i++){\n            if(a[i] < max_triples){\n              \
    \  max_triples = max_triples - a[i];\n            }\n        }\n    }\n    return\
    \ max_triples;", "    vector<long int> a(n);\n    // Your code here\n    for(long\
    \ i=0;i<n;i++){\n        a[i]=i*(i-1)+i+1;\n    }\n    // Your code here\n   \
    \ sort(a.begin(), a.end());\n    long long sum = 0;\n    for(long i=0;i<n;i++){\n\
    \        if(a[i]%3==0){\n            sum+=a[i];\n        }\n    }\n    return\
    \ sum;", "  long long res= 0;\n  long long arr[n];\n  for(int i=1; i<n; i++){\n\
    \    arr[i] = i*i - i + 1;\n  }\n  for(int i=0; i<n; i++){\n    for(int j=0; j<n;\
    \ j++){\n      for(int k=0; k<n; k++){\n        if (arr[i]+arr[j]+arr[k] == (arr[i]*arr[j])+arr[k]){\n\
    \          res++;\n        }\n      }\n    }\n  }\n  return res;", "  // Your\
    \ code here\n  long cnt = 0;\n  vector<int> arr(n);\n  for (long i = 0; i < n;\
    \ i++) {\n    arr[i] = i * i - i + 1;\n  }\n\n  for (long i = 0; i < n; i++) {\n\
    \    for (long j = i + 1; j < n; j++) {\n      if (arr[i] + arr[j] == 3)\n   \
    \     cnt++;\n    }\n  }\n  return cnt;", "    if (n<0) return 0;\n    long a[n];\n\
    \    for (int i = 0; i<n; i++){\n        a[i] = i*i-1;\n    }\n    long ans =\
    \ 0, sum = 0, k = 0, sum2 = 0;\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i+1 ; j < n; j++){\n            sum2 = 0;\n            for(int m = i+1;\
    \ m < j; m++){\n                sum2 += a[m];\n            }\n            if((sum\
    \ % 3) == 0){\n                sum -= a[m];\n                sum += sum2;\n  \
    \              ans = max(ans, sum);\n            }\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    long long arr[n - 1];\n    arr[0] = 1;\n    for(int\
    \ i = 1; i < n; i++) {\n        arr[i] = arr[i - 1] + arr[i - 1] - arr[i] - 1;\n\
    \    }\n    for(int i = 0; i < n - 1; i++) {\n        for(int j = i + 1; j < n;\
    \ j++) {\n            for(int k = j + 1; k < n; k++) {\n                long long\
    \ num = arr[i] + arr[j] + arr[k];\n                if(num % 3 == 0) {\n      \
    \              ans += 1;\n                    break;\n                }\n    \
    \        }\n        }\n    }\n    return ans;", "    // code here\n    long long\
    \ sum = 0;\n    for (long i = 0; i < n; i++)\n        sum += i * i - i + 1;\n\
    \    long long curr = sum;\n    long long max = 0;\n    while (curr) {\n     \
    \   for (long j = 0; j < n; j++) {\n            for (long k = 0; k < n; k++) {\n\
    \                long long temp = curr - 2 * j * k + 2 * i * j + k * i;\n    \
    \            if (temp > max) {\n                    max = temp;\n            \
    \    }\n            }\n        }\n        curr = curr % 3;\n    }\n    return\
    \ max;", "    // Write your code here\n    vector<int> a(n);\n    for(int i =\
    \ 0; i <n; i++) {\n        a[i] = i * i - i + 1;\n    }\n\n    sort(a.begin(),a.end());\n\
    \    int ans = 0;\n    for(int i = 2; i < n; i++) {\n        for(int j = i + 1;\
    \ j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n              \
    \  if(a[i] + a[j] + a[k] == 3*(i+j+k)) {\n                    ans++;\n       \
    \         }\n            }\n        }\n    }\n    return ans;", "    int a[n+1];\n\
    \    for(int i=1;i<=n;i++)\n    {\n        a[i]=i*(i-1)+i+1;\n    }\n    long\
    \ cnt=0;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=i+1;j<=n;j++)\n\
    \        {\n            for(int k=j+1;k<=n;k++)\n            {\n             \
    \   if(a[i]+a[j]+a[k]==3*i)\n                    cnt++;\n            }\n     \
    \   }\n    }\n    return cnt;", "    vector<int> a(n);\n    for(int i = 0; i <\
    \ n; ++i)\n        for(int j = 0; j < n; ++j)\n            for(int k = 0; k <\
    \ n; ++k)\n                a[i] = a[i] + a[j] + a[k];\n        \n        sort(a.begin(),\
    \ a.end());\n        \n        long long ans = 0;\n        for(int i = 1; i <\
    \ n; ++i) {\n            if(a[i] % 3 == 0)\n                ans++;\n         \
    \   if(a[i] % 3 == 2) {\n                for(int j = i+1 ; j < n; ++j)\n     \
    \               if(a[j] % 3 == 0)\n                        ans++;\n          \
    \  }\n        }\n        return ans;", "    long long int a[n];\n    memset(a,\
    \ 1, n*sizeof(int));\n    long long int result = 0;\n    for(long long int i =\
    \ 1; i < n; i++) {\n        for(long long int j = 1; j < n; j++){\n          \
    \  for(long long int k = 1; k < n; k++) {\n                if(a[i] + a[j] + a[k]\
    \ == i*i+j*j+k*k) {\n                    result ++;\n                }\n     \
    \       }\n        }\n    }\n    return result;", "    int a[n];\n    memset(a,\
    \ 0, sizeof(a));\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n          \
    \      // cout << i << \" \" << j << \" \" << k << endl;\n                assert(i\
    \ < j && j < k && k < a[n]);\n                a[i] += a[j];\n                a[j]\
    \ += a[k];\n                a[k] += a[i];\n            }\n        }\n    }\n \
    \   // cout << \"a:\" <<endl;\n    for (int i = 0; i < n; i++) {\n        // cout\
    \ << a[i] << endl;\n        if (a[i] % 3 == 0) {\n            return i;\n    \
    \    }\n    }\n    return -1;", "    long long ans = 0;\n    assert(n >= 1);\n\
    \    std::vector<long long> a(n);\n    for (int i = 1; i <= n; i++) {\n      \
    \  a[i] = i * i - i + 1;\n    }\n    for (int i = 1; i <= n; i++) {\n        for\
    \ (int j = i + 1; j <= n; j++) {\n            for (int k = j + 1; k <= n; k++)\
    \ {\n                long long cur = a[i] + a[j] + a[k];\n                long\
    \ long an = cur % 3;\n                if (an == 0) {\n                    ans++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return ans;", "    long long a[n];\n    for(long long i=0; i<n; i++){\n\
    \        a[i]=i*i%n;\n    }\n    int i=0;\n    for(int j=0; j<n; j++){\n     \
    \   if(a[j]<a[j+1] && a[j]<a[j+2]){\n            i++;\n        }\n    }\n    return\
    \ i;", "    // Your code here\n    \n    long count = 0;\n    long a[n];\n   \
    \ for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n        \n    }\n\
    \    for(int i = 0; i < n; i++) {\n        for(int j = i; j < n; j++) {\n    \
    \        for(int k = j; k < n; k++) {\n                if(a[i] + a[j] + a[k] ==\
    \ 0){\n                    count = count + 1;\n                    break;\n  \
    \              }\n            }\n        }\n    }\n    return count;", "    vector<long\
    \ int> a(n);\n    \n    // Loop from 1 to n\n    for(int i=1; i<n; i++) {\n  \
    \      a[i] = i*i-1;\n    }\n    long long num_triples=0;\n    \n    for(int i=1;i<n;i++)\
    \ {\n        for(int j=i;j<n;j++) {\n            for(int k=j;k<n;k++) {\n    \
    \            num_triples=(a[i]+a[j]+a[k])%3;\n                if(num_triples==0)\
    \ \n                    return num_triples;\n            }\n        }\n    }\n\
    \    \n    return 0;", "    // code here\n    long long int a[n];\n    long long\
    \ int sum = 0;\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i +\
    \ 1;\n        sum += a[i];\n    }\n    int cnt = 0;\n    for (int i = 1; i < n;\
    \ i++) {\n        for (int j = i+1; j < n; j++) {\n            for (int k = j+1;\
    \ k < n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && sum % 3 ==\
    \ 0) {\n                    cnt += 3;\n                }\n            }\n    \
    \    }\n    }\n    return cnt;", "    vector<int> v(n);\n    for(int i = 0; i\
    \ < (int)v.size(); i++){\n        v[i] = i * i - i + 1;\n    }\n    sort(v.begin(),\
    \ v.end());\n    long ans = 0;\n    for(int i = 0; i < (int)v.size(); i++){\n\
    \        for(int j = i+1; j < v.size(); j++){\n            for(int k = j+1; k\
    \ < v.size(); k++){\n                if(v[i] + v[j] + v[k] % 3 == 0){\n      \
    \              ans++;\n                }\n            }\n        }\n    }\n  \
    \  return ans;", "    long long int a[n], i = 0, j = 0, k = 0;\n    for ( ; i\
    \ < n ; i++)\n        a[i] = i * i - i + 1;\n    // for (k = 1; k < 3; k++)\n\
    \    //     for (j = k; j < n; j++)\n    //         for (; j < n; j++)\n    //\
    \             if (a[k] + a[j] + a[k] == 3 * k)\n    //                 return\
    \ k;\n    for (k = n; k > 1; k--)\n        for (j = k; j > 1; j--)\n         \
    \   if (a[k] + a[j] + a[k] == 3 * k)\n                return k;\n    return -1;",
  "    // Write your code here\n    \n    std::vector< std::vector<int> > arr(n);\n\
    \    \n    for(int i = 0; i < n; ++i) {\n        arr[i].resize(i + 1);\n     \
    \   arr[i][0] = arr[i][1] = arr[i][2] = i * i - i + 1;\n        for(int j = 1;\
    \ j < i; ++j) {\n            arr[i][j] = arr[i][j - 1] + arr[j - 1][j] + arr[j\
    \ - 1][j - 1];\n        }\n    }\n    \n    for(int i = 0; i < n; ++i) {\n   \
    \     for(int j = 0; j < i; ++j) {\n            for(int k = 0; k < j; ++k) {\n\
    \                if(arr[i][j] > arr[k][j] && arr[i][j] > arr[i][k])\n        \
    \            return arr[i][j] - arr[k][j] - arr[i][k];\n            }\n      \
    \  }\n    }\n    \n    return -1;", "    int a[n];\n    long result = 0;\n   \
    \ for(int i = 1; i < n; i++){\n        a[i] = i;\n    }\n\n    for(int i = 0;\
    \ i < n - 1; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int\
    \ k = j + 1; k < n; k++){\n                result = max(result, a[i] + a[j] +\
    \ a[k]);\n            }\n        }\n    }\n\n    return result;", "    long long\
    \ int a[n];\n    assert(n > 0);\n    for(long long int i = 0; i < n; i++)\n  \
    \      a[i] = i * i - i + 1;\n\n    long long int cnt = 0;\n    for(long long\
    \ int i = 0; i < n; i++)\n        cnt += __builtin_popcount(a[i]);\n\n    return\
    \ cnt;", "    vector<long> a(n+1);\n    for(long i=0;i<n;i++)\n    {\n       \
    \ a[i]=i*i-i+1;\n    }\n    long count=0;\n    for(long i=0;i<n+1;i++)\n    {\n\
    \        for(long j=i;j<n+1;j++)\n        {\n            for(long k=j;k<n+1;k++)\n\
    \            {\n                if(a[i]+a[j]+a[k]==3*(i+j+k))\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;", "    vector<long> arr(n);\n    for(int i=0; i<n;\
    \ i++){\n        arr[i] = i*i-1+i+1;\n    }\n    int num_triplet = 0;\n    long\
    \ sum = 0;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n   \
    \         for(int k=0; k<n; k++){\n                if(arr[i] + arr[j] + arr[k]\
    \ == (arr[i]+arr[j]+arr[k])/3){\n                    num_triplet++;\n        \
    \            sum += arr[i] + arr[j] + arr[k];\n                    break;\n  \
    \              }\n            }\n        }\n    }\n    cout<<\"Number of triplets\
    \ is \"<<num_triplet<<endl;\n    cout<<\"Sum of the triplets is \"<<sum<<endl;\n\
    \    return sum;", "    assert(n >= 1);\n    long long a[n];\n    for (int i =\
    \ 0; i < n; ++i)\n        a[i] = i * i - i + 1;\n    long long cnt = 0;\n    for\
    \ (int i = 1; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n     \
    \       for (int k = j + 1; k < n; ++k) {\n                if (a[i] == a[j] +\
    \ a[k] && i != j && j != k && a[i] == (a[j] + a[k]) % 3) {\n                 \
    \   ++cnt;\n                }\n            }\n        }\n    }\n    return cnt;",
  "    vector<long> a(n);\n    for(long i=0; i<n; i++) {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    sort(a.begin(), a.end());\n    long ans=0;\n    for(long i=0;\
    \ i<n-1; i++) {\n        for(long j=i+1; j<n; j++) {\n            long count=0;\n\
    \            for(long k=0; k<n; k++) {\n                if(i==k) count++;\n  \
    \              else if(i==j && j==k) count++;\n                else if(a[i]==a[j]\
    \ && a[j]==a[k]) count++;\n                else {\n                    if(a[i]+a[j]+a[k]==3)\n\
    \                        count=1;\n                    break;\n              \
    \  }\n            }\n            if(count==3) ans++;\n        }\n    }\n    return\
    \ ans;", "    vector<long long> arr(n);\n    for (int i = 0; i < n; ++i)\n   \
    \     arr[i] = i * i - i + 1;\n    int ans = 0;\n    for (int i = 0; i < n; ++i)\
    \ {\n        for (int j = i + 1; j < n; ++j)\n            for (int k = j + 1;\
    \ k < n; ++k) {\n                if (arr[i] + arr[j] + arr[k] % 3 == 0)\n    \
    \                ++ans;\n            }\n    }\n    return ans;", "  assert(n >\
    \ 0);\n  vector<int> a(n);\n  for (long i = 1; i < n; i++) {\n    a[i] = i * i\
    \ - i + 1;\n  }\n  long count = 0;\n  for (long i = 1; i < n; i++) {\n    for\
    \ (long j = 1; j < i; j++) {\n      for (long k = 1; k < j; k++) {\n        if\
    \ (a[i] + a[j] + a[k] == 2 * i + 3 * j + k) {\n          count++;\n        }\n\
    \      }\n    }\n  }\n  return count;", "     assert(n>=1);\n     std::vector<long\
    \ int> a;\n     a.resize(n);\n     long long int ans=0;\n     for(int i=0;i<n;i++){\n\
    \         a[i] = i*i - i + 1;\n         if(i<n-1){\n             if(a[i]>a[i+1])\n\
    \                 ans = a[i];\n             else if(a[i]<a[i+1])\n           \
    \      ans = ans + a[i] + a[i+1];\n         }\n     }\n     return ans;", "  \
    \  vector<long> a;\n    // Your code goes here\n    int i=0;\n    for(int j=1;j<=n;j++)\n\
    \    {\n        if(i==0)\n        {\n            a.push_back(j);\n        }\n\
    \        else\n        {\n            int l=a.size()-1;\n            while(l>=0\
    \ && l!=i && a[l]<j && j%a[l]==0)\n            {\n                l--;\n     \
    \       }\n            a.push_back(l+1);\n        }\n        i=j;\n    }\n   \
    \ cout<<\"a[\"<<i<<\"]: \";\n    for (int k=0;k<a.size();k++)\n    {\n       \
    \ cout<<a[k]<<\" \";\n    }\n    cout<<endl;\n    return a[i];", "    long ans\
    \ = 0;\n    long a[n];\n    // Initialize all array elements to 0\n    memset(&a,\
    \ 0, sizeof(a));\n    // For each element\n    for (int i = 1; i <= n; i++) {\n\
    \        // For each element j < i\n        for (int j = i; j <= n; j++) {\n \
    \           // For each element k > j\n            for (int k = j; k >= i; k--)\
    \ {\n                // If a[j] + a[k] == i * i - i + 1\n                // Increment\
    \ ans\n                if (a[j] + a[k] == i * i - i + 1)\n                   \
    \ ans++;\n            }\n        }\n    }\n    return ans;", "    vector<long>\
    \ v;\n    long ans = 0;\n    for(long i = 1;i <= n;i++) {\n        v.push_back(i\
    \ * i - i + 1);\n    }\n    for(long i = 0; i < v.size(); i++) {\n        long\
    \ j = 0;\n        for(; j < v.size() && i < j; i++) {\n            if(v[i] > v[j])\
    \ {\n                break;\n            }\n            if(v[i] > v[j] + v[j])\
    \ {\n                ans = max(ans, i - j);\n            }\n            j++;\n\
    \        }\n    }\n    return ans;", "    long long int result = 0;\n    vector<long\
    \ long int> arr(n + 1);\n    long long int tmp;\n    arr[0] = 1;\n    long long\
    \ int ans = arr[0];\n    for(int i = 1; i <= n; i++) {\n        arr[i] = arr[i\
    \ - 1] * i - 1 + 1;\n        if(arr[i] % 3 == 0) {\n            tmp = arr[i];\n\
    \            while(ans > tmp) {\n                ans--;\n            }\n     \
    \   }\n    }\n    return result;", "  assert(n>1);\n  long a[n];\n  for(int i=0;i<n;++i)\n\
    \    a[i]=i*i%n+1;\n  int triples = 0;\n  for(int i=1;i<n;i++)\n    for(int j=i+1;j<n;j++)\n\
    \      for(int k=j+1;k<n;k++) {\n        if(a[i]+a[j]+a[k]%3==0)\n          triples++;\n\
    \      }\n  return triples;", "    // Your code here\n    long cnt = 0;\n    long\
    \ a[n];\n    for(long i = 0; i < n; i++) {\n        a[i] = i*i-1;\n    }\n   \
    \ for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n       \
    \     for(int k = 0; k < n; k++) {\n                if(i + j + k == a[j] + a[k]\
    \ + a[i])\n                    cnt++;\n            }\n        }\n    }\n    return\
    \ cnt;", "    assert(n >= 0);\n    \n    long long ans = 0;\n    long long temp\
    \ = 0;\n    long long a[n];\n    \n    for(int i = 0; i < n; i++) {\n        temp\
    \ = (long long)i * i + (long long)i + 1;\n        a[i] = temp;\n        ans =\
    \ max(ans, a[i]);\n    }\n    \n    for(int i = 1; i < n; i++) {\n        for(int\
    \ j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n   \
    \             if(k <= i || k >= j) continue;\n                ans = max(ans, a[i]\
    \ + a[j] + a[k]);\n            }\n        }\n    }\n    return ans;", "    int\
    \ a[n];\n    int i = 0;\n    for ( ; i < n; i++) {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    long ans = 0, i;\n    for (i = 1 ; i < n; i++) {\n        ans\
    \ = max(ans, (a[i] + a[i] - 3) % 3);\n    }\n    return ans;", "    // code here\n\
    \    vector<long int> a;\n    for(long int i=0;i<n;++i){\n        a.push_back(i*i-*i+1);\n\
    \    }\n    sort(a.begin(),a.end());\n    long long ans=0;\n    for(int i=0;i<n;++i){\n\
    \        long long int s=0;\n        for(int j=i;j<n;++j){\n            for(int\
    \ k=j;k<n;++k){\n                if(a[i]+a[j]+a[k]==3){\n                    if(s==0){\n\
    \                        ans=i;\n                        break;\n            \
    \        }\n                    else{\n                        ans+=2;\n     \
    \                   break;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return ans;", "    vector<long> a(n);\n    for\
    \ (long i = 0; i < (long) n; ++i) {\n        a[i] = i * i - i + 1;\n    }\n\n\
    \    long ans = 0;\n    sort(a.begin(), a.end());\n    for (long i = 1; i < n;\
    \ ++i) {\n        for (long j = i; j < n; ++j) {\n            for (long k = i;\
    \ k < n; ++k) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k])\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n\n    return ans;", "    // code here\n    long arr[n];\n    for(int i\
    \ = 0;i < n;i++)\n    {\n        arr[i] = i;\n    }\n    for(int i = 1; i < n;\
    \ i++)\n    {\n        for(int j = i+1 ; j < n; j++)\n        {\n            for(int\
    \ k = j+1; k < n; k++)\n            {\n                long sum = 0;\n       \
    \         long a = arr[i];\n                sum += a * a;\n                a +=\
    \ arr[j];\n                sum += a * a;\n                a += arr[k];\n     \
    \           sum += a * a;\n                if(sum % 3 == 0)\n                {\n\
    \                    cout << \"Sum of elements of a : \";\n                  \
    \  cout << sum << endl;\n                    cout << \"a[i] * a[j]*a[k] : \";\n\
    \                    cout << arr[i]*arr[j]*arr[k] << endl;\n                 \
    \   return 0;\n                }\n            }\n        }\n    }\n    return\
    \ 0;", "  // write your code here\n  vector<long> a(n);\n  for (long i = 0; i\
    \ < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  sort(a.begin(), a.end());\n \
    \ int count = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = i+1; j <\
    \ n; j++) {\n      for (long k = j+1; k < n; k++) {\n        if ((a[i] + a[j]\
    \ + a[k]) == 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return\
    \ count;", "    int arr[n+1];\n    int ans = 0;\n    for (int i=0; i<n+1; ++i)\
    \ {\n        arr[i] = i*i-i+1;\n        ans += arr[i] * arr[i] * arr[i];\n   \
    \ }\n    arr[n] = 1;\n    ans %= 1000000007;\n    return ans;", "    vector<long>\
    \ v(n);\n    for(long i=1;i<=n;i++){\n        v[i]=i*i-i+1;\n    }\n    // Sort\
    \ the numbers in the array\n    sort(v.begin(),v.end());\n    long result=0;\n\
    \    // Find first occurence of multiples of 3\n    for(long i=0;i<v.size()-2;i++){\n\
    \        if(v[i]+v[i+1]+v[i+2]==3){\n            result++;\n            break;\n\
    \        }\n    }\n    return result;", "    long a[n+1];\n    memset(a, 0, sizeof\
    \ a);\n    for (int i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n   \
    \ }\n\n    int max_triples = 0;\n    for (int i = 1; i <= n; i++) {\n        for\
    \ (int j = i+1; j <= n; j++) {\n            for (int k = j+1; k <= n; k++) {\n\
    \                if (a[i] < a[j] && a[i] < a[k] && j > i) {\n                \
    \    if (a[i] < a[j] && a[j] < a[k]) {\n                        max_triples ++;\n\
    \                    }\n                } else if (a[j] < a[i] && a[j] < a[k]\
    \ && i > j) {\n                    if (a[j] < a[i] && a[i] < a[k]) {\n       \
    \                 max_triples ++;\n                    }\n                } else\
    \ if (a[k] < a[i] && a[k] < a[j] && k < i) {\n                    if (a[k] < a[i]\
    \ && a[i] < a[j]) {\n                        max_triples ++;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return max_triples;",
  "    vector<long> arr(n, 0); \n    assert(n >= 1);\n    long ans = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        arr[i] = 2 * i - 1; \n        for (long j = i\
    \ + 1; j < n; j++) {\n            arr[j] += arr[j - 1];\n            arr[j] +=\
    \ arr[j - 2];\n            ans = max(ans, arr[j]);\n        }\n    }\n    return\
    \ ans;", "    // Your code here\n    long ans = 0;\n    vector<int> a(n);\n  \
    \  for(int i=1; i<n; i++){\n        ans = i;\n        for(int j=0; j<i; j++){\n\
    \            ans = ans*i-i-i-i+i+j+1;\n        }\n        \n        for(int k=0;\
    \ k<i; k++){\n            ans = ans*i-i-i-i+i+k+1;\n        }\n        \n    \
    \    if(ans == 3){\n            ans = 1;\n        }\n        \n        a[i] =\
    \ ans;\n    }\n    long res = 0;\n    for(int i=0; i<n; i++){\n        for(int\
    \ j=0; j<n; j++){\n            for(int k=0; k<n; k++){\n                if(a[i]+a[j]+a[k]\
    \ == 3){\n                    res++;\n                    break;\n           \
    \     }\n            }\n        }\n    }\n    return res;", "  assert(n >= 1);\n\
    \  long long arr[n];\n  for(int i = 0;i < n;i++){\n    arr[i] = i * i - i + 1;\n\
    \  }\n  long long res = 0;\n  // n is odd\n  if(n & 1){\n    return -1;\n  }\n\
    \  // n is even\n  if(n % 2 != 0){\n    return -1;\n  }\n  for(int i = n; i; i--){\n\
    \    for(int j = i; j; --j){\n      for(int k = j; k; --k){\n        res += arr[k]\
    \ * arr[j] * arr[i];\n      }\n    }\n  }\n  return res;", "    int a[n];\n  \
    \  int counter = 0;\n    for (int i = 1; i <= n; i++) {\n        a[i] = i * i\
    \ - i + 1;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < n; j++) {\n            if (i != j) {\n                for (int k = 0; k\
    \ < n; k++) {\n                    if (i != k) {\n                        if (a[i]\
    \ + a[j] + a[k] == 3) {\n                            counter++;\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return counter;", "    long long long a[n];\n    long long\
    \ cnt = 0;\n    for(int i = 1; i <= n; i++){\n        a[i] = i * i - i + 1;\n\
    \    }\n\n    for(int i = 1; i <= n; i++){\n        for(int j = i+1; j <= n; j++){\n\
    \            for(int k = j+1; k <= n; k++){\n                if(a[i] + a[j] +\
    \ a[k] % 3 == 0){\n                    cnt++;\n                }\n           \
    \ }\n        }\n    }\n    return cnt;", "    if(n == 0 || n == 1)\n        return\
    \ 0;\n    long a[n];\n    memset(a, 0, sizeof(a));\n    a[0] = 1;\n    a[1] =\
    \ 1;\n    for(long i = 2; i < n; i++) {\n        a[i] = a[i-2] + a[i-2] + a[i-1];\n\
    \    }\n    for(long i = 3; i <= n; i++) {\n        long low = 0;\n        long\
    \ high = i-1;\n        while(low <= high) {\n            long mid = (low + high)/2;\n\
    \            if(a[mid] < mid) {\n                low = mid + 1;\n            }\n\
    \            else {\n                high = mid - 1;\n            }\n        }\n\
    \        long mid = low;\n        if(a[mid-1] + a[mid] + a[mid] > 3*mid) {\n \
    \           return 1;\n        }\n    }\n    return 0;", "    long long int ans\
    \ = 0;\n    long long int arr[n];\n    for(int i = 0; i < n; i++){\n        arr[i]\
    \ = (i * i) - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n             \
    \   long long int triple = arr[i] + arr[j] + arr[k];\n                ans += (triple\
    \ % 3 == 0);\n            }\n        }\n    }\n    return ans;", "    long long\
    \ a[n];\n    assert(n<100);\n    long long sum = 0;\n    long long count = 0;\n\
    \    for(long long i = 0; i<n; ++i) {\n        a[i] = i*i-1;\n        sum += a[i];\n\
    \    }\n    for(long long i = 0; i<n; ++i) {\n        if(sum % 3 == 0) {\n   \
    \         count += 1;\n        }\n        if(i != n-1) {\n            sum -= a[i];\n\
    \        }\n    }\n    return count;", "    vector<int> a(n);\n    for(int i =\
    \ 0; i < n; ++i){\n        a[i] = i * i - i + 1;\n    }\n    sort(a.begin(), a.end());\n\
    \    long result = 0;\n    for(int i = 0; i < n; ++i){\n        for(int j = i;\
    \ j < n; ++j){\n            for(int k = j; k < n; ++k){\n                result\
    \ += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0;\n            }\n        }\n    }\n\
    \    return result;", "    long ans = 0;\n    // Write your code here\n    long\
    \ a[n + 1];\n    // for(int i = 0; i < n; i++){\n    //   a[i] = i * i - i + 1;\n\
    \    // }\n    for(int i = 1; i <= n; i++){\n        for(int j = 1; j <= n; j++){\n\
    \            for(int k = 1; k <= n; k++){\n                if(i+j+k == n){\n \
    \                   ans += 1;\n                    a[i] = a[i] - a[j] - a[k];\n\
    \                    break;\n                }\n                else if((i+j+k)\
    \ % 3 == 0){\n                    a[i] = a[i] - a[j] - a[k];\n               \
    \     break;\n                }\n            }\n        }\n    }\n    return ans;",
  "    long long int a[n], cnt = 0;\n    // Initialize your array a\n    for (int\
    \ i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    // count the\
    \ triples\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                cnt\
    \ += a[i] + a[j] + a[k];\n                // Only valid triple exists:\n     \
    \           if (cnt % 3 == 0) {\n                    return cnt;\n           \
    \     }\n            }\n        }\n    }\n    return -1;", "    vector<long> a(n);\n\
    \    iota(a.begin(), a.end(), 1);\n    long cnt=0;\n    for (long i=1;i<n;i++)\
    \ {\n        for (long j=i;j<n;j++) {\n            for (long k=j;k<n;k++) {\n\
    \                if (i+j+k == a[i] + a[j] + a[k]) {\n                    cnt++;\n\
    \                }\n            }\n        }\n    }\n    return cnt;", "    long\
    \ a[n];\n    memset(a, 0, sizeof(a));\n    for (int i = 0; i < n; i++) {\n   \
    \     a[i] = i * i - i + 1;\n    }\n    int cnt = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0;\
    \ k < n; k++) {\n                if (i + j < k) {\n                    cnt +=\
    \ a[k] + a[i + j];\n                }\n            }\n        }\n    }\n    return\
    \ cnt;", "    vector<int> a(n);\n    // Write your code here\n    int i, j,k;\n\
    \    long count = 0;\n    for (i = 0; i < (int)a.size(); i++)\n    {\n       \
    \ a[i] = i * i - i + 1;\n    }\n    for (i = 0; i < (int)a.size(); i++)\n    {\n\
    \        for (j = (int)a.size(); j < (int)a.size(); j++)\n        {\n        \
    \    for (k = (int)a.size(); k < (int)a.size(); k++)\n            {\n        \
    \        if (((int)a[i] - (int)a[j] - (int)a[k]) % 3 == 0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;", "    vector<long> arr(n);\n    \n    // Sort the array\n\
    \    sort(arr.begin(), arr.end());\n\n    // Now the array is sorted in increasing\
    \ order and \n    // The first number will be the max possible sum\n    long maxSum\
    \ = arr[0];\n\n    // Now find the max sum\n    long maxCount = 0;\n\n    for(long\
    \ i = 1; i < n; i++){\n        long diff = arr[i] - arr[i - 1];\n        if(diff\
    \ % 3 == 0)\n            maxCount += 1;\n    }\n\n    return maxCount;", "   \
    \ \n    \n    std::vector<int> a;\n    for (int i = 1; i <= n; i++) {\n      \
    \  a.push_back(i * i - i + 1);\n    }\n    std::sort(a.begin(), a.end());\n  \
    \  std::map<int, int> m;\n    for (int i = 0; i < a.size(); i++) {\n        int\
    \ j = i + 1;\n        int k = i + 2;\n        int num = a[i] + a[j] + a[k];\n\
    \        if (m.find(num) != m.end()) {\n            int cur_val = m.at(num);\n\
    \            if (cur_val > num) {\n                m.at(num) = cur_val;\n    \
    \        }\n        } else {\n            \n            m.insert({num, num});\n\
    \        }\n    }\n    long ans = 0;\n    for (auto it1 = m.begin(); it1 != m.end();\
    \ ++it1) {\n        int i = it1->first;\n        int j = it1->second;\n      \
    \  int k = i + 2;\n        if (i >= j && i < k) {\n            ans++;\n      \
    \  } else if (i >= k) {\n            ans++;\n        } else {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    vector<long long int> a;\n    for(int\
    \ i = 1; i <= n; i++){\n        a.push_back(i * i - i + 1);\n    }\n    long long\
    \ int max_so_far = a[0], max_so_far_j = 0, max_so_far_k = 0;\n    long long int\
    \ count = 0;\n    for(const long long int &i : a){\n        max_so_far = std::max(max_so_far,\
    \ i);\n        for(const long long int &j : a){\n            if(j > i && max_so_far_j\
    \ < max_so_far && max_so_far_k<max_so_far){\n                max_so_far_j = max_so_far;\n\
    \                max_so_far_k = max_so_far;\n            }\n            max_so_far_j\
    \ = std::max(max_so_far_j, j);\n            if(max_so_far_j > i && max_so_far_k\
    \ < max_so_far_j){\n                max_so_far_k = max_so_far_j;\n           \
    \ }\n        }\n        if(max_so_far_k > max_so_far){\n            count++;\n\
    \        }\n    }\n    return count;", "    long a[100000] = {0};\n    long triples\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        for (int j = i; j <= n; j++)\
    \ {\n            for (int k = j; k <= n; k++) {\n                if (i != j &&\
    \ i != k && j != k) {\n                    a[i] = a[i] + a[j] + a[k];\n      \
    \              if (a[i] == a[j] * a[k]) triples += 1;\n                }\n   \
    \         }\n        }\n    }\n    return triples;", "    long long int sum =\
    \ 0, a[n];\n    long long int counter = 0;\n    for (int i = 1; i <= n; i++) {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n        if (sum % 3 == 0)\
    \ {\n            counter++;\n        }\n    }\n    return counter;", "    vector<long\
    \ long> a(n);\n    for(long i=0; i<n; i++)\n    {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    for(long i=0; i<n; i++)\n    {\n        for(long j=0; j<n; j++)\n\
    \        {\n            for(long k=0; k<n; k++)\n            {\n             \
    \   if(j!=i && j!=k && k!=i)\n                {\n                    assert(j!=i\
    \ && j!=k && k!=i);\n                    long count = 0;\n                   \
    \ long m = a[i];\n                    long n = a[j];\n                    long\
    \ p = a[k];\n                    \n                    if(a[i] + a[j] + a[k]==3*m)\n\
    \                    {\n                        count++;\n                   \
    \ }\n                    \n                    assert(n<=p && p>=m && a[j] <=\
    \ a[j-1] && a[k] <= a[k-1] && a[i] <= a[i+1]);\n                }\n          \
    \  }\n        }\n    }\n    \n    return a.size()-1;", "    long long int sum\
    \ = 0;\n    long long int a[n] = {0};\n    long long int cnt = 0;\n    for(int\
    \ i=0; i<n; i++){\n        a[i] = i*i+i+1;\n    }\n    for(int i = 1; i < n; i++){\n\
    \        for(int j = 1; j < i; j++){\n            for(int k = 0; k < j; k++){\n\
    \                if(i != j && j != k){\n                    sum += (a[j]*a[k])%3;\n\
    \                    cnt += 1;\n                }\n            }\n        }\n\
    \    }\n    return cnt;", "    vector<long> a(n);\n    for(long i = 0; i < n;\
    \ i++) {\n        a[i] = i * i - i + 1;\n    }\n    sort(a.begin(), a.end());\n\
    \    long s = 0;\n    for(long i = 0; i < n; i++) {\n        long k = i;\n   \
    \     long j = i - 1;\n        long m = a[j];\n        while(k >= 0 && m < 3 &&\
    \ a[k] > m) {\n            k = k - 1;\n            m = a[k];\n        }\n    \
    \    s += m * a[i] * a[j];\n    }\n    return s;", "    vector<int> a(n);\n  \
    \  for(long i=0;i<n;i++){\n        a[i] = i*i-i+1;\n    }\n    sort(a.begin(),\
    \ a.end()); //sorting the array\n    long cnt=0;\n    for(long i=1;i<n;i++){\n\
    \        for(long j=i;j<n;j++){\n            for(long k=j;k<n;k++){\n        \
    \        if(i+j+k == a[i]){\n                    cnt++;\n                }\n \
    \           }\n        }\n    }\n    return cnt;", "    int arr[n];\n    for(int\
    \ i=0;i<n;i++) {\n        arr[i] = i*(i-1)+i+1;\n    }\n    long cnt = 0;\n  \
    \  for(int i=0;i<n;i++) {\n        for(int j=i;j<n;j++) {\n            for(int\
    \ k=j;k<n;k++) {\n                if(arr[i]+arr[j]+arr[k]==6) {\n            \
    \        cnt += 1;\n                    break;\n                }\n          \
    \  }\n        }\n    }\n    return cnt;", "  int a[n];\n  for (int i = 0; i <\
    \ n; ++i) {\n    a[i] = i * i - i + 1;\n  }\n  for (int i = 0; i < n; ++i) {\n\
    \    for (int j = i + 1; j < n; ++j) {\n      for (int k = j + 1; k < n; ++k)\
    \ {\n        if (a[i] + a[j] + a[k] == 3) {\n          return 1;\n        }\n\
    \      }\n    }\n  }\n  return 0;", "    long arr[n+1];\n    arr[0] = 1;\n   \
    \ for (int i = 0; i < n+1; ++i) arr[i] = i*i - i + 1;\n    int ans = 0;\n    for\
    \ (int i = 1; i < n+1; ++i) {\n        for (int j = 0; j < n; ++j) {\n       \
    \     for (int k = 0; k < n; ++k) {\n                if (i+j+k > 0 && i+j+k <=\
    \ n && arr[i+j+k] % 3 == 0) ans++;\n            }\n        }\n    }\n    return\
    \ ans;", "    vector<long> a(n);\n    for (int i = 0; i < n; i++) {\n        long\
    \ x = i * i - i + 1;\n        a[i] = x;\n    }\n    sort(a.begin(), a.end());\n\
    \    int ans = 0;\n    long cur = 0;\n    for (int i = 0; i < n; i++) {\n    \
    \    if (i == 0) {\n            cur = a[i];\n        } else if (a[i] > cur) {\n\
    \            cur = a[i];\n        }\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (i == j) continue;\n            long sum = a[i] + a[j] + cur;\n\
    \            if (sum % 3 != 0) ans++;\n        }\n    }\n    return ans;", " \
    \   vector<int> a(n);\n    long max_trip_sum = 0;\n    for (long i = 0; i < n;\
    \ i++) {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 1; i < n; i++)\
    \ {\n        for (long j = 1; j < n; j++) {\n            if (i > j) {\n      \
    \          break;\n            }\n            long sum = a[i] + a[j] + a[k];\n\
    \            if (sum > max_trip_sum) {\n                max_trip_sum = sum;\n\
    \            }\n        }\n    }\n    return max_trip_sum;", "    // code here\n\
    \    long arr[n];\n    int i;\n    long cnt = 0;\n    \n    for(int i = 0;i <\
    \ n;i++){\n        arr[i] = i;\n    }\n    \n    for(int j = 1;j < n;j++){\n \
    \       for(int k = 0;k < n;k++){\n            if(k > j){\n                continue;\n\
    \            }\n            if(arr[i] < arr[j]){\n                break;\n   \
    \         }\n            if(arr[i] + arr[j] + arr[k] == (arr[i] * arr[i] * arr[i])){\n\
    \                cnt++;\n            }\n        }\n    }\n    return cnt;", " \
    \   long long int a[n];\n    for (long long int i = 0; i <= n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    // Your code here\n    long long int ans = 0;\n    for\
    \ (long long int i = 1; i <= n; i++) {\n        long long int cnt = 0;\n     \
    \   for (long long int j = 1; j <= n; j++) {\n            if (i - j == 0 && i\
    \ == j)\n                cnt++;\n            else if (a[i + j]) {\n          \
    \      if (cnt > ans)\n                    ans = cnt;\n            }\n       \
    \ }\n    }\n    return ans;", "    vector<long> a(n);\n    long max = 1;\n   \
    \ for(int i = 0; i < n; i++) {\n        // initialize all a[i] to 1\n        a[i]\
    \ = 1;\n    }\n    // initialize all a[i] to 1\n    for(int i = 1; i < n; i++)\
    \ {\n        a[i] = a[i-1] + 1;\n        // set a[i] to 0 if a[i] is odd (not\
    \ a multiple of 3)\n        if(a[i] % 2 != 0) {\n            a[i] = 0;\n     \
    \   }\n        // set a[i] to 0 if a[i] is even (not a multiple of 3)\n      \
    \  else {\n            a[i] = 0;\n        }\n    }\n    // print all elements\
    \ of a\n    printf(\"a = {\");\n    for(int i = 0; i < n; i++) {\n        printf(\"\
    %d, \", a[i]);\n    }\n    printf(\"}\\n\");\n    long ans = 0;\n    // set a[i]\
    \ to 0 if a[i] is odd (not a multiple of 3)\n    for(int i = 1; i < n; i++) {\n\
    \        if(a[i] % 2 != 0) {\n            a[i] = 0;\n        }\n        else {\n\
    \            ans += 1;\n        }\n    }\n    return max;", "    vector<long>\
    \ a(n);\n    for (long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n \
    \   }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = 0; j < n; j++) {\n            for (long k = 0; k < n; k++) {\n         \
    \       if (i != j && i != k && j != k) {\n                    int sum = int(a[i])\
    \ + int(a[j]) + int(a[k]);\n                    if (sum == 0 || sum % 3 == 0)\n\
    \                        ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;", "  assert(n >= 1);\n  vector<int> a(n);\n  for (long\
    \ i = 1; i < n; ++i) {\n    a[i] = i * i - i + 1;\n  }\n  sort(a.begin(), a.end());\n\
    \  long ans = 0;\n  for (long i = 0; i < n - 1; ++i) {\n    for (long j = i +\
    \ 1; j < n; ++j) {\n      for (long k = j + 1; k < n; ++k) {\n        if (a[i]\
    \ + a[j] + a[k] == 0) {\n          ans++;\n          break;\n        }\n     \
    \ }\n    }\n  }\n  return ans;", "    // your code goes here\n    long long arr[n];\n\
    \    for(long long i=0;i<n;i++){\n        arr[i]=i*(i-1)+i+1;\n    }\n    long\
    \ long ans = 0;\n    for(long long i=0;i<n-1;i++){\n        for(long long j=0;j<n-1;j++){\n\
    \            if(arr[i]+arr[j]==arr[n-1]){\n                ans++;\n          \
    \  }\n        }\n    }\n    return ans;", "    // Do not print anything for n\
    \ <= 0\n    if (n <= 0) return 0;\n    // A holds the values of a. b is used to\
    \ hold the multiples of 3.\n    vector<long> a(n), b(n);\n    // Fill A with multiples\
    \ of 3.\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        sum +=\
    \ 3;\n        a[sum - i - 1] = a[sum - i - 1] + i - 1;\n        b[sum - i] = sum\
    \ - i;\n    }\n    // For each i, check whether it's valid\n    long ans = 0;\n\
    \    for (long i = 1; i <= n; i++) {\n        long sum = 0;\n        for (long\
    \ j = i - 1; j >= 0; j--) {\n            sum = a[sum + j] - a[j] - 1;\n      \
    \  }\n        if (sum % 3 == 0) {\n            ans += b[sum - i];\n        }\n\
    \    }\n    return ans;", "    vector<int> a(n);\n    long sum = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n\
    \    }\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        for (long\
    \ j = 1; j < n; j++) {\n            for (long k = 1; k < n; k++) {\n         \
    \       long triple = a[i] + a[j] + a[k];\n                if (triple % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;", "    long a[n];\n    for(int i = 0; i < n; ++i) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    long long ans = 0;\n    for(int i =\
    \ 1; i < n; ++i) {\n        for(int j = i; j < n; ++j) {\n            for(int\
    \ k = j; k < n; ++k) {\n                long long res = a[i] + a[j] + a[k];\n\
    \                if(res == 3 * i + (i + 1) + (j + 1)) {\n                    ++ans;\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    long\
    \ long a[n];\n    long long sum = 0;\n    for(int i = 0; i < n; i++) {\n     \
    \   for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++)\
    \ {\n                assert(a[i] < a[j]);\n                assert(a[i] < a[k]);\n\
    \                assert(a[j] < a[k]);\n                sum += (long long)a[i]\
    \ * (long long)a[j] * (long long)a[k];\n            }\n        }\n        a[i]\
    \ = sum;\n        sum = 0;\n    }\n    return a[n-1];", "    long long int a[n];\n\
    \    for(int i = 0; i < n; i++){\n        a[i] = (i * i - i + 1);\n    }\n   \
    \ return find_max_triple(a, a);", "    // code here\n    vector<int> a(n);\n \
    \   long counter = 0;\n    for(int i = 0; i < n; i++){\n        a[i] = i * i -\
    \ i + 1;\n    }\n\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1;\
    \ j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n              \
    \  if(a[i] + a[j] + a[k] == 3) {\n                    counter++;\n           \
    \     }\n            }\n        }\n    }\n    return counter;", "  int a[n];\n\
    \  int cnt = 0;\n  for(int i=0; i<n; i++){\n    a[i] = i*i-1;\n  }\n  for(int\
    \ i=0; i<n; i++){\n    for(int j=0; j<n; j++){\n      for(int k=0; k<n; k++){\n\
    \        if(i<j && i<k && j<k){\n          if(a[i]+a[j]+a[k]==0){\n          \
    \  cnt++;\n          }\n        }\n      }\n    }\n  }\n  return cnt;", "    vector<long>\
    \ a(n,0);\n    long maxtriple=0;\n    long i=0;\n    for(i=0;i<n;i++){\n     \
    \   a[i]=i*i-1;\n    }\n    for(i=0;i<n;i++){\n        for(long j=i;j<n;j++){\n\
    \            for(long k=j;k<n;k++){\n                if (a[j]+a[k]+a[i]==3){\n\
    \                    maxtriple++;\n                    break;\n              \
    \  }\n            }\n        }\n    }\n    cout<<maxtriple;\n    return maxtriple;",
  "    long long a[n + 1];\n    for (long i = 0; i < n; i++)\n        a[i] = i * i\
    \ - i + 1;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n;\
    \ j++) {\n            for (long k = 0; k < n; k++) {\n                if (i !=\
    \ j && i != k && j != k)\n                    if (a[i + j + k] == (a[i] + a[j]\
    \ + a[k])) {\n                        long long x = i + j + k;\n             \
    \           return x < n ? x : 0;\n                    }\n            }\n    \
    \    }\n    }\n    return -1;", "    vector<int> a(n);\n    \n    // fill a[]\n\
    \    for(int i=0; i<n; i++) {\n        a[i]=i*(i+1)*(i+2)/3;\n    }\n    \n  \
    \  // compute a[]\n    int ret = 0;\n    for(int i=0; i<n; i++) {\n        for(int\
    \ j=i+1; j<n; j++) {\n            for(int k=j+1; k<n; k++) {\n               \
    \ if(i != j && i != k && j != k) {\n                    assert(a[i] < a[j] &&\
    \ a[j] < a[k]);\n                    int sum = a[i] + a[j] + a[k];\n         \
    \           if(sum == 3) {\n                        ret += 1;\n              \
    \      }\n                }\n            }\n        }\n    }\n    \n    return\
    \ ret;", "    long a[n] = {0};\n    long long triples = 0;\n    \n    for(int\
    \ i = 1; i <= n; i++){\n        for(int j = i + 1; j <= n; j++){\n           \
    \ for(int k = j + 1; k <= n; k++){\n                if((i+j+k) == (3*(i-1))) triples++;\n\
    \            }\n        }\n    }\n    return triples;", "    vector<long int>\
    \ a;\n    a.resize(n);\n    for(long int i = 0; i < n; ++i)\n        a[i] = i\
    \ * i - i + 1;\n    sort(a.begin(), a.end());\n    long long ans = 0;\n    for(long\
    \ int i = 0; i < n; ++i) {\n        for(long int j = i + 1; j < n; ++j)\n    \
    \        for(long int k = j + 1; k < n; ++k) {\n                if(i + j + k ==\
    \ a[i])\n                    ans += 1;\n            }\n    }\n    return ans;",
  "    vector<long> arr(n);\n    for (int i = 0; i < n; i++) {\n        arr[i] = i\
    \ * i - i + 1;\n    }\n    sort(arr.begin(), arr.end());\n    int cnt = 0;\n \
    \   for (long i = 0; i < n; i++) {\n        if (i == 0 || i == n || arr[i] !=\
    \ arr[i - 1] + arr[i - 2]) {\n            cnt += 1;\n        }\n    }\n    return\
    \ cnt;", "    if(n < 3) return 0;\n    if(n == 3) return 1;\n    long dp[(n+1)*(n+2)/2][n+1]\
    \ = {};\n    for(int i = 1; i < n+1; i++) {\n        for(int j = 0; j < n; j++)\
    \ {\n            if(i == j) dp[i][j] = 0;\n            else dp[i][j] = (dp[i-1][j-1]\
    \ + dp[i-1][j]) % 3;\n        }\n    }\n    long ans = 0;\n    for(int i = 1;\
    \ i < n+1; i++) {\n        for(int j = i; j < n+1; j++) {\n            long sum\
    \ = 0;\n            for(int k = i; k <= j; k++) {\n                sum = (sum\
    \ + dp[i][j]) % 3;\n            }\n            if(sum == 0) ans++;\n        }\n\
    \    }\n    return ans;", "    std::vector<int> a(n);\n    for (int i = 0; i <\
    \ n; i++) {\n        int temp = 0;\n        for (int j = i; j < n; j++) {\n  \
    \          temp += (a[j] - a[i]);\n        }\n        a[i] = temp;\n    }\n  \
    \  int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 == 0) cnt++;\n            }\n        }\n    }\n\
    \    return cnt;", "    vector<long int> a;\n    long triples = 0;\n    \n   \
    \ for(int i = 1; i <= n; i++){\n        a.push_back(i * i - i + 1);\n    }\n \
    \   for(int i = 0; i < a.size(); i++){\n        for(int j = i+1; j < a.size();\
    \ j++){\n            for(int k = 0; k < a.size(); k++){\n                if(a[i]\
    \ + a[j] + a[k] % 3 == 0){\n                    triples++;\n                }\n\
    \            }\n        }\n    }\n    return triples;", "    // code here\n  \
    \  long long int a[n];\n    for(int i=0; i<n; i++){\n        a[i]=i*i-i+1;\n \
    \   }\n    long long int count=0,temp;\n    for(int i=0; i<n; i++){\n        for(int\
    \ j=0; j<n; j++){\n            for(int k=0; k<n; k++){\n                if(a[i]+a[j]+a[k]==3&&(i<j<k)){\n\
    \                    count+=1;\n                }\n            }\n        }\n\
    \    }\n    return count;", "    long long ans = 0;\n    vector<long long> arr(n\
    \ + 1);\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n;\
    \ j++) {\n            for (long k = 1; k <= n; k++) {\n                if (i !=\
    \ j && j != k) {\n                    ans = max(ans, 3 * i + 2 * j + k - 2 * arr[j\
    \ - 1] - arr[k - 1]);\n                }\n            }\n            arr[i] =\
    \ arr[i] + arr[j] - arr[k];\n        }\n    }\n    return ans;", "    long long\
    \ int result = 0;\n    for (int i = 1; i <= n; i++) {\n        result += (long\
    \ long) i * i * i;\n    }\n    return result;", "    vector<long> arr(n);\n  \
    \  // You are given an integer n. You have to create an integer array a of length\
    \ n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i +\
    \ 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j\
    \ < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n\
    \    // Input: n = 5\n    // Output: 1\n    // Explanation: \n    // a = [1, 3,\
    \ 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    for(int i=0;i<n;i++)\
    \ {\n        // You are given the integer n.\n        // The variable i stores\
    \ the index number of each array element.\n        // You have to create the array\
    \ a of length n.\n        // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n        // Store the integer values in an array.\n       \
    \ arr[i] = (i * i - i + 1);\n    }\n\n    // You have to solve the following questions\
    \ using the array :\n    // Find the total number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    // Count\
    \ the number of pairs (a[i], a[j]) of a where i < j < k, and a[i] + a[j] are coprime\
    \ to 3.\n    // Count the number of triples (a[i], a[j], a[k]) of a where i <\
    \ j < k, and a[i] + a[j] + a[k] is greater than or equal to 3.\n    // Count the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] +\
    \ a[k] is less than or equal to 3.\n    // Count the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is equal 3.\n\n   \
    \ long cntTriples=0;\n    for(long i=0;i<n;i++) {\n        // You are given the\
    \ integer n.\n        // The variable i stores the index number of each array\
    \ element.\n        // You have to create the array a of length n.\n        //\
    \ For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n     \
    \   // Store the integer values in an array.\n        if(arr[i] % 3 == 0) {\n\
    \            cntTriples++;\n        }\n    }\n\n    return cntTriples;", "\t//\
    \ write your code here\n\t\n\tlong long sum = 0, triple;\n\tstd::vector<long long>\
    \ arr;\n\tarr.push_back(0);\n\t\n\tfor (long i = 1; i <= n; i++) {\n\t\tfor (int\
    \ j = 1; j <= n; j++)\n\t\t\tfor (int k = 1; k <= n; k++) {\n\t\t\t\ttriple =\
    \ arr[j] + arr[k] + arr[i];\n\t\t\t\tif (triple < 3)\n\t\t\t\t\tcontinue;\n\t\t\
    \t\telse if (triple == 3)\n\t\t\t\t\tsum += triple;\n\t\t\t\telse {\n\t\t\t\t\t\
    arr.push_back(i);\n\t\t\t\t\tarr.push_back(j);\n\t\t\t\t\tarr.push_back(k);\n\t\
    \t\t\t}\n\t\t\t}\n\t}\n\treturn sum;", "    long arr[1000];\n    memset(arr, 0,\
    \ sizeof(arr));\n    long ans = 0;\n    long i = 0, j = 0, k = 0;\n\n    for(int\
    \ x = 0; x < n; x++) {\n        if(arr[x] == 0) {\n            arr[x] = 1;\n \
    \           i = x;\n            while (arr[i] == i) {\n                arr[i]\
    \ += i;\n                i++;\n            }\n            arr[i] = 1;\n      \
    \  }\n        if(arr[x] == 1) {\n            arr[x] = 2;\n            j = x;\n\
    \            while (arr[j] == j) {\n                arr[j] += j;\n           \
    \     j++;\n            }\n            arr[j] = 2;\n        }\n        if(arr[x]\
    \ == 2) {\n            arr[x] = 3;\n            k = x;\n            while (arr[k]\
    \ == k) {\n                arr[k] += k;\n                k++;\n            }\n\
    \            arr[k] = 3;\n        }\n    }\n    for(int x = 0; x < n; x++) {\n\
    \        if(arr[x] == 3) {\n            ans += 1;\n        }\n    }\n    return\
    \ ans;", "    // Your code here\n    vector<long long int> v(n);\n    // fill\
    \ v with all numbers less than n\n    \n    for (long long int i = 0; i<n; i++)\
    \ {\n        long long int d = i*i - i + 1;\n        v.push_back(d);\n    }\n\
    \    \n    long long int result = 0;\n    for (long long int i = 0; i < v.size();\
    \ i++) {\n        for (long long int j = 0; j < v.size(); j++) {\n           \
    \ for (long long int k = 0; k < v.size(); k++) {\n                long long int\
    \ c = v[i] + v[j] + v[k];\n                if (c % 3 == 0) {\n               \
    \     long long int temp = i+j+k;\n                    if (temp > result) {\n\
    \                        result = temp;\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return result;", "    long long int\
    \ arr[n];\n    \n    for(int i = 0; i< n; i++){\n        arr[i] = i * i - i +\
    \ 1;\n    }\n    int max = 0;\n    int count = 0;\n    for(int i = 1; i < n; i++){\n\
    \        for(int j = i; j < n; j++){\n            for(int k = j; k < n; k++){\n\
    \                if(arr[i] + arr[j] + arr[k] % 3 == 0){\n                    count++;\n\
    \                    if(count > max)\n                        max = count;\n \
    \               }\n            }\n        }\n    }\n    return max;", "    int\
    \ a[n];\n    memset(a, 0, sizeof(a));\n    for(int i = 0; i <= n; ++i) {\n   \
    \     a[i] = i * i - i + 1;\n    }\n    \n    int result = 0;\n    for(int i =\
    \ 1; i <= n; ++i) {\n        for(int j = i+1; j <= n; ++j) {\n            for(int\
    \ k = j+1; k <= n; ++k) {\n                if(a[i] + a[j] + a[k] % 3 == 0) {\n\
    \                    result ++;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return result;", "    vector<long long>\
    \ a(n+1, 1);\n    for(int i = 1; i <= n; i++)\n        a[i] = i*i - i + 1;\n\n\
    \    int ans = 0;\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <=\
    \ n; j++)\n            for(int k = 1; k <= n; k++)\n                if(i*i + j*j\
    \ + k*k <= ans)\n                    ans++;\n    \n    return ans;", "  vector<long>\
    \ a(n, 0); \n  long count = 0;\n  for(int i = 0; i < n; i++) {\n    for(int j\
    \ = i + 1; j < n; j++) {\n      for(int k = j + 1; k < n; k++) {\n        if(a[i]\
    \ + a[j] + a[k] >= 3) \n          count += 1;\n      }\n    }\n  }\n  return count;",
  "\tlong long int a[n];\n\tfor(int i = 0; i<n; i++) {\n\t\ta[i] = i * i - i + 1;\n\
    \t}\n\n\tlong long int max_triples = 0, count = 0;\n\tfor(int i = 0; i<n; i++)\
    \ {\n\t\tfor(int j = i+1; j<n; j++) {\n\t\t\tfor(int k = j+1; k<n; k++) {\n\t\t\
    \t\tif(a[i] + a[j] + a[k] == 3*3) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t\tif(count>max_triples) {\n\t\t\tmax_triples = count;\n\t\t}\n\t\tcount\
    \ = 0;\n\t}\n\treturn max_triples;", "    // code here\n    assert(n > 0);\n \
    \   int arr[n];\n    for(int i = 0; i < n; i++){\n        arr[i] = i * i - i +\
    \ 1;\n    }\n    int cnt = 0;\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = 0; j < n; j++){\n            for(int k = 0; k < n; k++){\n             \
    \   if(arr[i + j + k] == arr[i] + arr[j] + arr[k])\n                    cnt++;\n\
    \            }\n        }\n    }\n    return cnt;", "    vector<long> a(n);\n\
    \    long sum = 0;\n    for (int i = 1; i <= n; i++){\n        a[i] = i * i -\
    \ i + 1;\n    }\n    for (int i = 0; i < n; i++){\n        sum += a[i];\n    \
    \    for (int j = i + 1; j < n; j++){\n            for (int k = j + 1; k < n;\
    \ k++){\n                if (a[j] + a[k] == sum && j >= i && k >= i && a[j] >=\
    \ a[k]){\n                    cout << a[i] << \" \" << a[j] << \" \" << a[k] <<\
    \ \" \" << endl;\n                    return 0;\n                }\n         \
    \   }\n        }\n    }\n    return 1;", "    // O(n)\n    std::vector<int> a(n);\n\
    \    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ // O(n^2)\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j\
    \ < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n               \
    \ if(a[i] + a[j] + a[k] % 3 == 0) {\n                    return 1;\n         \
    \       }\n            }\n        }\n    }\n    return 0;", "    // code here\n\
    \    long long ans = 0;\n    vector<long long> a;\n    for(int i = 1;i <= n;i++){\n\
    \        a.push_back(i * i - i + 1);\n    }\n    int l = a.size();\n    for(int\
    \ i = 0;i < l;i++){\n        int j = i+1;\n        while(j < l && a[j] < a[i]){\n\
    \            j++;\n        }\n        int k = j+1;\n        while(k < l && a[k]\
    \ < a[j]){\n            k++;\n        }\n        if(a[i] < a[j] && a[i] < a[k])\n\
    \            ans++;\n    }\n    return ans;", "    vector<long> arr(n);\n    for\
    \ (int i = 0; i < n; i++) {\n        arr[i] = i * i - i + 1;\n    }\n    int count\
    \ = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if\
    \ (arr[i] + arr[j] + arr[k] == 3) {\n                    count++;\n          \
    \      }\n            }\n        }\n    }\n    return count;", "    long long\
    \ int a[n];\n    // Initialize all values of array a as 0\n    for(int i = 0;\
    \ i < n; i++)\n        a[i] = 0;\n    \n    // Initialize a couple of variables\n\
    \    long long int sum = 0;\n    int min_a[n];\n    long long int cur_max = INT_MIN;\n\
    \    for(int i = 0; i < n; i++) {\n        min_a[i] = a[i];\n        sum += a[i];\n\
    \        // if the current value of a[i] is greater than the current value of\
    \ cur_max\n        // then update cur_max as current value of a[i]\n        if(sum\
    \ > cur_max) {\n            cur_max = sum;\n        }\n    }\n    \n    // Initialize\
    \ two variables for tracking minimum and maximum values of a\n    long long int\
    \ min_a_idx = -1;\n    long long int max_a_idx = -1;\n    \n    // Initialize\
    \ a couple of variables\n    long long int cur_max1 = INT_MIN;\n    long long\
    \ int cur_max2 = INT_MIN;\n    \n    for(int i = 0; i < n; i++) {\n        //\
    \ if the current value of a[i] is greater than the current value of cur_max1\n\
    \        if(sum > cur_max1) {\n            cur_max1 = sum;\n            \n   \
    \         // If current value of a[i] is greater than the current value of cur_max2\
    \ then update cur_max2 \n            if(sum > cur_max2) {\n                cur_max2\
    \ = sum;\n            }\n            \n            // Check if current value of\
    \ a[i] is greater than the current value of min_a[cur_max2]\n            // If\
    \ it is greater then update min_a_idx with the current value of cur_max2\n   \
    \         if(sum < a[cur_max2]) {\n                min_a_idx = cur_max2;\n   \
    \         }\n        }\n        \n        // Check if the value of a[i] is greater\
    \ than the current value of min_a[cur_max1]\n        // If it is greater then\
    \ update min_a_idx with the current value of cur_max1\n        if(sum < a[cur_max1])\
    \ {\n            min_a_idx = cur_max1;\n        }\n        \n        // If the\
    \ value of a[i] is greater than the current value of max_a\n        if(sum > cur_max2)\
    \ {\n            max_a_idx = i;\n            cur_max2 = sum;\n        }\n    \
    \    \n        // If the value of a[i] is greater than the current value of max_a\n\
    \        if(sum > cur_max1) {\n            max_a_idx = i;\n            cur_max1\
    \ = sum;\n        }\n    }\n    \n    long long int sum2 = 0;\n    // if the current\
    \ value of cur_max is less than the value of cur_max1\n    // then update cur_max1\
    \ as the current value of cur_max\n    if(cur_max < cur_max1) {\n        cur_max1\
    \ = cur_max;\n    }\n    \n    // if the current value of cur_max is less than\
    \ the value of cur_max2\n    // then update cur_max2 as the current value of cur_max\n\
    \    if(cur_max < cur_max", "    long a[1000];\n    long s = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        a[i] = (i * i - i + 1);\n        if (i == 0) {\n\
    \            a[i] = 3;\n        }\n    }\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < n; j++) {\n            long k = i;\n           \
    \ for (long m = 0; m < n; m++) {\n                k = ((i * m) - k + k) % n;\n\
    \            }\n            long t = a[i];\n            for (long j = 0; j < k;\
    \ j++) {\n                t = ((a[j] * i) - t + t) % n;\n            }\n     \
    \       for (long m = j + 1; m < k; m++) {\n                t = ((a[j] * i) -\
    \ t + t) % n;\n            }\n            if (t == k) {\n                s++;\n\
    \            }\n        }\n    }\n    return s;", "\tlong a[n];\n\t\n\tfor(int\
    \ i = 0; i < n; ++i)\n\t\ta[i] = i*i - i + 1;\n\t\n\tlong count = 0;\n\tfor(int\
    \ i = 1; i < n-1; ++i) {\n\t\tfor(int j = i+1; j < n; ++j) {\n\t\t\tfor(int k\
    \ = j+1; k < n; ++k) {\n\t\t\t\tif(a[i] + a[j] + a[k] == 3) {\n\t\t\t\t\tcount\
    \ += 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", " \
    \   long long long a[n];\n    assert(n >= 1);\n    memset(a, 0, sizeof a);\n \
    \   for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int\
    \ ans = 0, k = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            int m = a[j] - a[i];\n            if (m ==\
    \ 0) {\n                ans = ans + 1;\n                k++;\n            }\n\
    \            else\n                break;\n        }\n    }\n    if (k > 1) {\n\
    \        ans = ans + k - 1;\n    }\n    cout << ans << \"\\n\";\n    return ans;",
  "    long a[n];\n    long long i, j;\n    long long count = 0;\n    for(i=0;i<n;i++)\n\
    \        a[i]=i*i*i-1;\n    for(j=1;j<n;j++) {\n        for(i=0;i<n-j;i++) {\n\
    \            for(long long k=i+j; k<n; k++)\n                if(i != k && a[i]\
    \ + a[j] + a[k] % 3 == 0) count++;\n        }\n    }\n    return count;", "  \
    \  long a[n];\n    long long sum = 0;\n    // create an array of length n\n  \
    \  for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n        sum +=\
    \ a[i];\n    }\n    \n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            long long diff = sum - a[i] + a[j];\n    \
    \        if (diff > 0)\n                return 1;\n        }\n    }\n    return\
    \ 0;", "    // code here\n    vector<long long int> arr(n);\n    for (int i =\
    \ 0; i < n; i++) {\n        arr[i] = i * i - i + 1;\n    }\n    // int arr[n];\n\
    \    // return 0;\n    int res = 0;\n    long long int arr1[n];\n    int size1\
    \ = sizeof(*arr1);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0;\
    \ j < n; j++) {\n            for (int k = 0; k < n; k++) {\n                if\
    \ (arr1[i] > arr1[j] && arr1[j] > arr1[k]) {\n                    arr1[i] += arr1[j]\
    \ + arr1[k];\n                    arr1[j] = arr1[i] - arr1[j];\n             \
    \       arr1[k] = arr1[i] - arr1[k];\n                    arr1[i] = arr1[i] -\
    \ arr1[j];\n                    int res = 0;\n                    for (int h =\
    \ 0; h < n; h++) {\n                        if (arr1[h] > arr1[i]) {\n       \
    \                     arr1[h] = arr1[h] - arr1[i];\n                         \
    \   arr1[i] = arr1[h] - arr1[i];\n                            res = 1;\n     \
    \                       break;\n                        }\n                  \
    \  }\n                    if (res == 1) {\n                        res = 0;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    int size2 = sizeof(*arr);\n    for (int i\
    \ = 0; i < size1; i++) {\n        for (int j = 0; j < size2; j++) {\n        \
    \    if (arr[i] > arr[j]) {\n                arr[i] = arr[j] - arr[i];\n     \
    \       }\n        }\n    }\n    int size = sizeof(*arr);\n    for (int i = 0;\
    \ i < size; i++) {\n        cout << \"arr[\" << i << \"]=\" << arr[i] << endl;\n\
    \    }\n    int size3 = sizeof(*arr1);\n    for (int i = 0; i < size2; i++) {\n\
    \        for (int j = 0; j < size3; j++) {\n            if (arr1[i] > arr1[j])\
    \ {\n                arr1[i] = arr1[j] - arr1[i];\n            }\n        }\n\
    \    }\n    for (int i = 0; i < size2; i++) {\n        cout << \"arr1[\" << i\
    \ << \"]=\" << arr1[i] << endl;\n    }\n    int count1 = 0;\n    for (int i =\
    \ 0; i < size1; i++) {\n        if (arr1[i] % 3 == 0) {\n            count1++;\n\
    \        }\n    }\n    cout << \"count1=\" << count1 << endl;\n    return count1;",
  "    // code here\n    vector<long int> arr(n);\n    for(long i = 0; i<n; i++){\n\
    \        arr[i]=i*(i+1)+1;\n    }\n    long long triples=0;\n    for(long i=0;i<n-1;i++){\n\
    \        for(long j=i+1;j<n;j++){\n            for(long k=j+1;k<n;k++){\n    \
    \            long long int sum = 0;\n                for(long m=i-1;m<j;m++){\n\
    \                    sum+=arr[m];\n                }\n                for(long\
    \ m=j+1;m<k;m++){\n                    sum+=arr[m];\n                }\n     \
    \           if(sum%3==0){\n                    if(arr[i]+arr[j]+arr[k]==0)\n \
    \                       triples++;\n                }\n            }\n       \
    \ }\n    }\n    return triples;", "    vector<long> a(n, 0);\n    for (long i\
    \ = 1; i <= n; i++) {\n        long d = 1;\n        for (long j = 1; j <= i; j++)\n\
    \            d = d + (j * j);\n        if ((d * 3) % 3 == 0)\n            a[i]\
    \ = d;\n    }\n    int ntriplet = 0;\n    for (long i = 1; i < n; i++)\n     \
    \   if (3 * a[i] % 3 == 0)\n            ntriplet++;\n    return ntriplet * 3;",
  "    //write your code here\n    vector<int> a(n);\n    long count = 0;\n    for(int\
    \ i = 0; i < n; i++){\n       for(int j = i+1; j < n; j++){\n           for(int\
    \ k = j+1; k < n; k++){\n               if((a[i] + a[j] + a[k]) % 3 == 0){\n \
    \                  count += 1;\n                   break;\n               }\n\
    \           }\n       }\n    }\n    return count;", "    long a[n]; \n    long\
    \ long count = 0;\n    for(int i = 0 ; i < n ; i++){\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for(int i = 0 ; i < n ; i++){\n        for(int j = 0 ; j <\
    \ n ; j++){\n            for(int k = 0 ; k < n ; k++){\n                if(i<j\
    \ && j<k && a[i]+a[j]+a[k] == a[j] * a[k]){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;", "    long\
    \ a[n];\n    for(int i=0;i<n;i++){\n       a[i] = i*(i+1)-(i+1);\n    }\n    \n\
    \    long long int cnt = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n\
    \            for(int k=0;k<n;k++){\n                if(a[i]+a[j]+a[k] % 3 == 0){\n\
    \                    cnt++;\n                }\n            }\n        }\n   \
    \ }\n    \n    return cnt;", "    vector<long int> a(n);\n    for(int i=0;i<n;i++){\n\
    \        a[i] = i*i-i+1;\n    }\n    vector<long int> b;\n    for(long i=0;i<n-1;i++){\n\
    \        long long int sum = 0;\n        for(long j=0;j<i;j++){\n            sum\
    \ += a[j];\n        }\n        if(a[i]+sum%3 ==0){\n            b.push_back(a[i]);\n\
    \            b.push_back(sum);\n            b.push_back(a[i]+sum%3);\n       \
    \ }\n    }\n    return b.size();", "    long long arr[n];\n    for(int i=0;i<n;i++){\n\
    \        arr[i] = i*(i-1)*i+1;\n    }\n    long long mod = pow(3,n);\n    long\
    \ long ans = 0;\n    long long cnt = 0;\n    for(int i=0;i<n;i++){\n        for(int\
    \ j=i+1;j<n;j++){\n            for(int k=0;k<n;k++){\n                if(arr[i]\
    \ + arr[j] + arr[k] == mod && \n                   arr[i] < arr[j] && arr[i] <\
    \ arr[k]){\n                    cnt ++;\n                    break;\n        \
    \        }\n            }\n        }\n        if(cnt == 3){\n            ans +=\
    \ 1;\n        }\n        cnt = 0;\n    }\n    return ans;", "    long long int\
    \ sum = 0, triple = 0;\n    long long int a[n];\n    for(int i = 1; i <= n; ++i)\
    \ {\n        sum += i*i;\n        a[i] = sum;\n        sum -= (i*i - i + 1);\n\
    \    }\n\n    for(int i = 1; i <= n; ++i) {\n        for(int j = 1; j <= n; ++j)\
    \ {\n            for(int k = 1; k <= n; ++k) {\n                if(i+j+k == 3\
    \ && a[i] + a[j] + a[k] == sum) {\n                    triple += 1;\n        \
    \        }\n            }\n        }\n    }\n    return triple;", "    // Write\
    \ your code here\n    vector<long long> a;\n    for(long i=0;i<n;++i)\n    {\n\
    \        a.push_back(i*i-i+1);\n    }\n    sort(a.begin(),a.end());\n    long\
    \ long ans=0;\n    for(long i=0;i<a.size();++i)\n    {\n        for(long j=i+1;j<a.size();++j)\n\
    \        {\n            for(long k=j+1;k<a.size();++k)\n            {\n      \
    \          if(a[i]+a[j]+a[k]==3)\n                {\n                    ans+=1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return ans;", "    long long int a[100] = {0};\n    long long int max_a\
    \ = 0;\n    long long int max_a_i = 0;\n    for(int i = 0; i <= n; i++){\n   \
    \     max_a = i;\n        max_a_i = i;\n        for(int j = i+1 ; j <= n; j++){\n\
    \            long long int m = j*j - i;\n            if(a[j] < m && a[i] < m){\n\
    \                max_a = j;\n                max_a_i = i;\n            }\n   \
    \     }\n        a[i] = a[i] + (max_a - max_a_i);\n    }\n    int count = 0;\n\
    \    for(int i = 0; i <= n; i++){\n        if(a[i] % 3 == 0){\n            count++;\n\
    \        }\n    }\n    return count;", "    long long arr[n];\n    long long ans\
    \ = 0, cnt = 0;\n    for(int i = 0; i < n; i++) {\n        arr[i] = i * i - i\
    \ + 1;\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = i + 1; j\
    \ < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n                if(arr[i]\
    \ < arr[j] && arr[i] < arr[k] && arr[j] < arr[k]) {\n                    cnt++;\n\
    \                }\n            }\n        }\n    }\n    return cnt;", "  assert((n\
    \ > 0) && (n <= 1000000000));\n  long a[1000000000];\n  long i = 0;\n  long j\
    \ = 0;\n  long k = 0;\n  a[i++] = 1;\n  while (i < n) {\n    k = i;\n    i = i\
    \ + 1;\n    while (j < i && k < n) {\n      k = k + 1;\n      j = j + 1;\n   \
    \ }\n    k = n - 1;\n    a[i++] = a[j] + a[k];\n  }\n  assert(i == n);\n  long\
    \ ans = 0;\n  for (long i = 0; i < n; i++) {\n    long sum = 0;\n    for (long\
    \ j = 0; j < i; j++) {\n      sum += a[j];\n    }\n    if (sum % 3 == 0) {\n \
    \     ans = 1;\n      break;\n    }\n  }\n  return ans;", "    long cnt = 0;\n\
    \    // vector<int> a(n);\n    // for (int i = 0; i < n; ++i) {\n    //     a[i]\
    \ = i * i - i + 1;\n    // }\n    // int cnt = 0;\n    // for (int i = 0; i <\
    \ n; ++i) {\n    //     for (int j = i + 1; j < n; ++j) {\n    //         for\
    \ (int k = j + 1; k < n; ++k) {\n    //             int res = (a[i] + a[j] + a[k])\
    \ % 3;\n    //             if (res == 0) {\n    //                 ++cnt;\n  \
    \  //             }\n    //         }\n    //     }\n    // }\n    \n    int a[n];\n\
    \    for (int i = 0; i < n; ++i) {\n        a[i] = i * i - i + 1;\n    }\n\n \
    \   for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n\
    \            for (int k = j + 1; k < n; ++k) {\n                int res = (a[i]\
    \ + a[j] + a[k]) % 3;\n                if (res == 0) {\n                    ++cnt;\n\
    \                }\n            }\n        }\n    }\n    return cnt;", "    if\
    \ (n == 0) return 0;\n    vector<long> a(n);\n    long a1 = 0;\n    for (long\
    \ i = 0; i < n; i++) a[i] = i * i - i + 1;\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < n; j++)\n            ;\n        for (int k = 0;\
    \ k < n; k++) {\n            if (a[k] < a1 + a[j]) {\n                a1 = a[k];\n\
    \                a[i] = a[j];\n                a[j] = k;\n            }\n    \
    \    }\n    }\n    long ans = 0;\n    for (long i = 0; i < n; i++)\n        ans\
    \ += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0;\n    return ans;", "    // code here\n\
    \    long a[n];\n    memset(a, 0, sizeof(long ) * n);\n    for (long i = 0; i\
    \ < n; i++)\n        a[i] = i * i - i + 1;\n    long ans = 0, count = 0;\n   \
    \ for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n\
    \            for (long k = j + 1; k < n; k++) {\n                ans += (a[i]\
    \ + a[j] + a[k]) % 3;\n            }\n        }\n    }\n    return ans;", "  \
    \  vector<int> a(n);\n    for(int i=0;i<n;++i)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    sort(a.begin(), a.end());\n    for(int i=0;i<n;++i)\n    {\n     \
    \   for(int j=i+1;j<n;++j)\n        {\n            if(a[i]+a[j]+a[i]==3)\n   \
    \         {\n                return i+1;\n            }\n        }\n    }\n  \
    \  return 0;", "    // O(n) time with O(n) space\n    int a[n];\n    for (int\
    \ i = 0; i < n; i++) a[i] = i * i - i + 1;\n    int ans = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if (a[i] < a[j] && a[j] < a[k])\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long ans = 0;\n    long long int a[n];\n    assert(n\
    \ > 0);\n    for(int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n   \
    \ }\n    for(int i = 1; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n\
    \            for(int k = j+1; k < n; k++) {\n                if((a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n                    ans += 1;\n            }\n        }\n \
    \   }\n    return ans;", "\tvector<int> a(n);\n\tfor(long i = 0; i < n; ++i)\n\
    \t\ta[i] = i * i - i + 1;\n\tint ans = 0;\n\tfor(long i = 0; i < n - 1; ++i)\n\
    \t\tfor(long j = i + 1; j < n; ++j)\n\t\t\tfor(long k = j + 1; k < n; ++k)\n\t\
    \t\t\tif(a[i] + a[j] + a[k] == 3*(a[i] + a[j] + a[k])) ++ans;\n\treturn ans;",
  "    // write your code here\n\tvector<long long> a(n);\n\t\n\tfor (int i = 0; i\
    \ < n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\n\tint ans = 0;\n\tfor (int i\
    \ = 0; i < n; i++) {\n\t\tfor (int j = 0; j < n; j++) {\n\t\t\tif (i < j && j\
    \ > i) {\n\t\t\t\tif (a[i] + a[j] + a[k] == 3*3*3) {\n\t\t\t\t\tans += 1;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ans;", "    std::vector<int> a(n);\n  \
    \  long result = 0;\n    long sum = 0;\n    for (int i = 0; i < n; ++i) {\n  \
    \      sum = sum + a[i];\n        a[i] = sum - a[i];\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                if (a[i + k + a[j] + a[k]] ==\
    \ 3*a[i]) {\n                    result += 1;\n                }\n           \
    \ }\n        }\n    }\n    return result;", "    long ans = 0;\n    long a[n];\n\
    \    for(int i = 0; i < n; i++)\n        a[i] = (i * i + i) + 1;\n    sort(a,\
    \ a+n);\n    for(int i = 0; i < n-1; i++) {\n        for(int j = i+1; j < n; j++)\
    \ {\n            for(int k = j+1; k < n; k++) {\n                if (a[k] > a[j]\
    \ + a[i])\n                    ans++;\n            }\n        }\n    }\n    return\
    \ ans;", "    if (n <= 1) {\n        return 0;\n    }\n    vector<long long> v(n);\n\
    \    long long ans = 0;\n    for (int i = 1; i <= n; i++) {\n        v[i] = i\
    \ * i - i + 1;\n    }\n    for (int i = 0; i < n; i++) {\n        long long s\
    \ = 0;\n        for (int j = i + 1; j < n; j++) {\n            s += v[i] + v[j]\
    \ + v[j];\n        }\n        if (s >= 3) {\n            ans += 1;\n        }\n\
    \    }\n    return ans;", "    std::vector<int> v(n);\n    for (int i = 0; i <\
    \ n; ++i) {\n        v[i] = i * i - i + 1;\n    }\n    // Write your code here.\n\
    \    long result = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n              \
    \  if (i < j && j < k && k < i) {\n                    result += v[i] + v[j] +\
    \ v[k];\n                }\n            }\n        }\n    }\n    return result;",
  "    long long a[1000], ans = 0;\n    memset(a, 0, sizeof(long long) * n);\n   \
    \ for(int i = 1; i <= n; i++){\n        ans += a[i] - a[i-1] - a[i-2];\n     \
    \   a[i] = i * (i-2) + i + 1;\n    }\n    return ans % 3;", "    // code here\n\
    \    long long ans = 0;\n    long long a[n];\n    for(int i=0; i<n; i++) {\n \
    \       a[i]=i*(i+1)+1;\n    }\n    for(int i=0; i<n; i++) {\n        for(int\
    \ j=0; j<n; j++) {\n            for(int k=0; k<n; k++) {\n                if(a[i]+a[j]+a[k]\
    \ % 3 == 0) {\n                    ans++;\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return ans;", "  vector<long\
    \ int> a(n);\n  for (long i = 0; i < n; i++)\n    a[i] = i * i - i + 1;\n\n  long\
    \ long cnt = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = i + 1; j\
    \ < n; j++) {\n      for (long k = j + 1; k < n; k++) {\n        if (a[i] + a[j]\
    \ + a[k] % 3 == 0)\n          cnt++;\n      }\n    }\n  }\n  return cnt;", " \
    \   vector<long long> a(n + 1);\n    iota(a.begin(), a.end(), 1);\n    long ans\
    \ = 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n;\
    \ j++) {\n            for (long k = 1; k <= n; k++) {\n                if (j >\
    \ k) {\n                    if (a[j] + a[k] + a[i] % 3 == 0) {\n             \
    \           ans++;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return ans;", "    long long ans=0;\n    long long a[n];\n\
    \    for(int i=0; i<n; i++){\n        a[i]=i*i-i+1;\n    }\n    for(int i=0; i<n;\
    \ i++){\n        for(int j=0; j<n; j++){\n            for(int k=0; k<n; k++){\n\
    \                if(j>k){\n                    if(a[i]+a[j]+a[k]==3*(a[i]-a[j])+2*(a[i]-a[k]))\n\
    \                        ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long long int a[n];\n    long long int n1;\n  \
    \  \n    for(int i=0;i<n;i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n \
    \   \n    sort(a, a+n);\n    n1=0;\n    for(int i=0;i<n;i++)\n    {\n        if(a[i]%3==0)\n\
    \        {\n            n1++;\n        }\n    }\n    \n    return n1;", "    if(n\
    \ == 0) return 0;\n    // vector < long >arr(n);\n    // for( int i = 0; i< n;\
    \ i++){\n    //     arr[i] = i*i-i+1;\n    // }\n    // return max_element(arr.begin(),\
    \ arr.end());\n    \n    \n    vector<long> arr(n);\n    for(long i = 0; i<n;\
    \ i++){\n        arr[i] = i*i-i+1;\n    }\n    long max_val = *max_element(arr.begin(),\
    \ arr.end());\n    return max_val;", "     assert(n > 0);\n     vector<int> a(n);\n\
    \     for (long i = 0; i < n; i++)\n         a[i] = i * i - i + 1;\n     sort(a.begin(),\
    \ a.end());\n     long count = 0;\n     for (long i = 0; i < n; i++)\n       \
    \  for (long j = i; j < n; j++)\n             for (long k = j; k < n; k++)\n \
    \                if (a[k] * a[k] * a[k] == a[i + j + k])\n                   \
    \  count++;\n     return count;", "    long long ans = 0;\n    long long arr[n];\n\
    \    for (long long i = 0; i < n; i++){\n        arr[i] = i * i - i + 1;\n   \
    \ }\n    sort(arr, arr + n);\n    for (long long i = 0; i < n; i++) {\n      \
    \  for (long long j = i + 1; j < n; j++) {\n            for (long long k = j +\
    \ 1; k < n; k++) {\n                long long s = arr[i] + arr[j] + arr[k];\n\
    \                ans = max(s, ans);\n            }\n        }\n    }\n    return\
    \ ans;", "    \n    std::vector<long int> a(n);\n    for(long int i=0; i<n; i++)\n\
    \        a[i] = i*i*(i+1)+1;\n    long long int ans = 0;\n    for(int i=0; i<n;\
    \ i++) {\n        for(int j=i; j<n; j++) {\n            for(int k=j; k<n; k++)\
    \ {\n                if((a[i] + a[j] + a[k]) == 3*(i+j+k)) {\n               \
    \     ans++;\n                }\n            }\n        }\n    }\n    return ans;",
  "    long int a[n];\n    for(int i = 0; i < n; i++) {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    sort(a, a + n);\n    long long count = 1;\n    long long index\
    \ = 0;\n    for(long long i = 0; i < n; i++) {\n        index = lower_bound(a,\
    \ a + n, a[i]) - a;\n        count += (index != i + 1 ? 0 : 1);\n    }\n    return\
    \ count;", "    long a[n];\n    for(long i=0; i<n; i++) {\n        a[i] = i*(i+1)*(i+2)/6;\n\
    \    }\n    long ret = 0;\n    for(long i=0; i<n; i++) {\n        for(long j=0;\
    \ j<i; j++) {\n            for(long k=0; k<j; k++) {\n                if(i*(i+1)*(j+2)/6\
    \ % 3 != 0) {\n                    if(a[i] != a[j] || a[j] != a[k]) ret++;\n \
    \               }\n            }\n        }\n    }\n    return ret;"]
stop_tokens:
- "\n}"
