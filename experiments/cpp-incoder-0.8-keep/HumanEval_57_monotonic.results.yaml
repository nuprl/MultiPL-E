language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if(l.size() == 0)\
    \ return false;\n    long first = l[0];\n    long last = l[l.size()-1];\n    for(long\
    \ i : l) {\n        if(first > i) first=i;\n        if(last < i) last=i;\n   \
    \ }\n    return last > first;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8_yf7don: /tmp/tmp8_yf7don.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int s = l.size();\n\
    \  if (s == 0) {\n    return true;\n  }\n  auto curr = l.back();\n  for (int i\
    \ = 0; i < s - 1; i++) {\n    if (curr < l[i]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9b_iyxv6: /tmp/tmp9b_iyxv6.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int left = 0;\n \
    \   int right = l.size() - 1;\n    int mid = left + (right - left) / 2;\n    while\
    \ (left < right) {\n        if (l[left] < l[mid]) {\n            left = mid +\
    \ 1;\n        } else if (l[right] > l[mid]) {\n            right = mid;\n    \
    \    } else {\n            right = mid - 1;\n            left = mid + 1;\n   \
    \     }\n        mid = left + (right - left) / 2;\n    }\n    return l[left] ==\
    \ l[right];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpderpsjny: /tmp/tmpderpsjny.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tint n = l.size();\n\
    \tassert(n >= 2);\n\tlong mid = n / 2;\n\tlong l1 = l[mid];\n\tlong l2 = l[mid+1];\n\
    \tif (l1 < l2) return true;\n\tif (l1 > l2) return false;\n\tif (l1 == l2) return\
    \ true;\n\treturn monotonic(l.subvector(mid+1));\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp12f19i90.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp12f19i90.cpp:19:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   19 |  return monotonic(l.subvector(mid+1));\n      |                   \
    \  ^~~~~~~~~\n      |                     vector\n"
  stdout: ''
  timestamp: 1660129325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  long long size = l.size();\n\
    \  for (long long i = 0; i < size; i++) {\n    if (l[i] < l[i + 1])\n      return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3kdaz_hb: /tmp/tmp3kdaz_hb.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long maxv =\
    \ l[0];\n    long long minv = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n\
    \        if (l[i] > maxv) {\n            maxv = l[i];\n        }\n        if (l[i]\
    \ < minv) {\n            minv = l[i];\n        }\n    }\n    return (maxv - minv\
    \ > 0);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph5qwtsur: /tmp/tmph5qwtsur.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long a = 0, b = 0,\
    \ c = 0;\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        c\
    \ = a; // a\n        a = b; // b\n        b = c + (l[i] - a); // c\n    }\n  \
    \  if (b < a) return true;\n    if (b > a) return false;\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt_3hti93: /tmp/tmpt_3hti93.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long l1 = l[0];\n\
    \    long l2 = l[1];\n    for (long i = 2; i < l.size(); i++) {\n        if (l[i]\
    \ > l1 + l2) {\n            l1 = l[i];\n        }\n        if (l[i] < l1 - l2)\
    \ {\n            l2 = l[i];\n        }\n    }\n    return l1 == l2;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdwkfthx3: /tmp/tmpdwkfthx3.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if(l.size() < 2)\
    \ return false;\n    auto it = l.begin();\n    int n1 = *it++;\n    long n2 =\
    \ *it++;\n    int cnt = 1;\n    while(it != l.end()) {\n        long n = *it;\n\
    \        if(n <= n1) return false;\n        if(n2 < n) return false;\n       \
    \ if(n > n1) return false;\n        n2 = n;\n        cnt++;\n        ++it;\n \
    \   }\n    return cnt == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6v2zknbi: /tmp/tmp6v2zknbi.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long min = l[0];\n\
    \    long long max = l[0];\n    for (long long i : l) {\n        if (i >= min)\
    \ {\n            if (i <= max) {\n                return false;\n            }\
    \ else {\n                max = i;\n            }\n        } else {\n        \
    \    if (i <= max) {\n                return false;\n            } else {\n  \
    \              min = i;\n            }\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl_z9r906: /tmp/tmpl_z9r906.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long min=0;\n\
    \    long long max=l.back();\n    for(int i=0;i<l.size();i++){\n        if(l[i]<min){min=l[i];}\n\
    \        if(l[i]>max){max=l[i];}\n    }\n    if((max-l.back())<=((max-min)/2)){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpbw8wzn37: /tmp/tmpbw8wzn37.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // The first element\
    \ is always considered increasing or decreasing.\n    long first = l.at(0);\n\n\
    \    // If the list is empty, return False.\n    if (l.size() == 0)\n        return\
    \ false;\n\n    // Find the first element that is less than or equal to the first\
    \ element\n    // in the list. Here we use std::greater to compare the first element\n\
    \    // with the first element in the list but we can also use the comparison\n\
    \    // operator to compare any element in the list.\n    if (std::next(l.begin())\
    \ != l.end() &&\n        first <= *std::next(l.begin()))\n        return true;\n\
    \n    // If the first element in the list is less than the first\n    // element\
    \ in the list, then the first element in the list is\n    // increasing.\n   \
    \ if (std::next(l.begin()) != l.end() &&\n        first < *std::next(l.begin()))\n\
    \        return true;\n\n    // If the first element in the list is greater than\
    \ the first\n    // element in the list, then the first element in the list is\n\
    \    // decreasing.\n    if (std::next(l.begin()) != l.end() &&\n        first\
    \ > *std::next(l.begin()))\n        return true;\n\n    // If all the elements\
    \ in the list are equal then the first element\n    // in the list is increasing\
    \ or decreasing.\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9ayzpo2g: /tmp/tmp9ayzpo2g.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long a=0, b=1,\
    \ c=1;\n    for(long long i = 0; i < l.size(); i++) {\n        if(l[i] > a) {\n\
    \            c = 1;\n        }\n        if(l[i] < b) {\n            c = 0;\n \
    \       }\n        if (c != 0) {\n            if (l[i] - a > b - l[i]) {\n   \
    \             b += 1;\n            } else {\n                a += 1;\n       \
    \     }\n        }\n    }\n    return a == l;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb7_z1p2.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvb7_z1p2.cpp:27:14: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018long long int\u2019 and \u2018std::vector<long int>\u2019\
    )\n   27 |     return a == l;\n      |            ~ ^~ ~\n      |            |\
    \    |\n      |            |    std::vector<long int>\n      |            long\
    \ long int\nIn file included from /usr/include/c++/9/regex:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n           \
    \      from /tmp/tmpvb7_z1p2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \ candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvb7_z1p2.cpp:27:17:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018long long int\u2019\n   27 |     return a == l;\n      |         \
    \        ^\nIn file included from /usr/include/c++/9/regex:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n           \
    \      from /tmp/tmpvb7_z1p2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpvb7_z1p2.cpp:27:17: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018long long int\u2019\n   27 |     return\
    \ a == l;\n      |                 ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /"
  stdout: ''
  timestamp: 1660129325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int N = l.size();\n\
    \    if (N < 2) {\n        return true;\n    }\n    long curr = l[0];\n    for\
    \ (int i = 1; i < N; ++i) {\n        long next = l[i];\n        if (curr < next)\
    \ {\n            return true;\n        }\n        curr = next;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpysr5hkv5: /tmp/tmpysr5hkv5.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long start = 0;\n\
    \    long end = 1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n   \
    \     long i = *it;\n        if (i != 0) {\n            if (*it + 1 != i) {\n\
    \                start = i;\n            }\n        }\n        if (i != 1) {\n\
    \            if (*it - i != 1) {\n                end = i;\n            }\n  \
    \      }\n    }\n    return (start <= end);\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpj_4hzxlr: /tmp/tmpj_4hzxlr.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() >\
    \ 1);\n    long l1 = l[0];\n    long l2 = l[1];\n    long l3 = l[2];\n    long\
    \ l4 = l[3];\n    if (l2 < l1) {\n        if (l3 < l1) {\n            if (l4 <\
    \ l1) {\n                if (l2 < l3) {\n                    if (l2 < l4) {\n\
    \                        return true;\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmp7peoq659: /tmp/tmp7peoq659.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ return false;\n    long prev = l[0], curr = prev;\n    for (long x : l) {\n\
    \        if (curr > x) {\n            curr++;\n        } else {\n            prev++;\n\
    \            curr = prev;\n        }\n    }\n    return curr == prev;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptssbcuh8: /tmp/tmptssbcuh8.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long prev = l[0],\
    \ cur = l[0];\n    for(size_t i = 1; i < l.size(); ++i) {\n        if(l[i] < prev)\
    \ {\n            return false;\n        }\n        if(l[i] > cur) {\n        \
    \    return true;\n        }\n        prev = cur;\n        cur = l[i];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl7bh3kpl: /tmp/tmpl7bh3kpl.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long prev_x = 0;\n\
    \    long prev_y = 0;\n    for (long x : l)\n    {\n        if (x > prev_x)\n\
    \        {\n            return false;\n        }\n        prev_x = x;\n\n    \
    \    if (x != prev_y)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw92f1fy1: /tmp/tmpw92f1fy1.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return false;\n    }\n    // Find the first and last valid number\n\
    \    long first = l[0];\n    long last = l[0];\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > last) {\n            last = l[i];\n        }\n  \
    \      if (l[i] < first) {\n            first = l[i];\n        }\n    }\n    if\
    \ (first >= last) {\n        return false;\n    }\n    // Sort using mergesort\n\
    \    std::vector<long> sorted_l;\n    sorted_l.push_back(first);\n    sorted_l.push_back(last);\n\
    \    for (long i = 2; i < l.size(); i++) {\n        sorted_l.push_back(l[i]);\n\
    \        sorted_l.push_back(sorted_l[i-2]);\n    }\n    std::vector<long> sorted_l_copy\
    \ = sorted_l;\n    std::sort(sorted_l_copy.begin(), sorted_l_copy.end());\n  \
    \  return sorted_l_copy == sorted_l;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzq_ih1km: /tmp/tmpzq_ih1km.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long first = l[0];\n\
    \    long last = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n        if\
    \ (l[i] < last) {\n            return false;\n        }\n        last = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppdjhrw2o: /tmp/tmppdjhrw2o.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long last = l[0];\n\
    \    for (long x: l)\n        if (last > x)\n            return false;\n     \
    \   else\n            last = x;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp0p66jt4t: /tmp/tmp0p66jt4t.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    std::sort(l.begin(), l.end());\n    long long i = (l.back() - l.front());\n\
    \    if(i > 0) {\n        return (i == 1);\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjlkwzb62: /tmp/tmpjlkwzb62.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\treturn std::unique(l.begin(), l.end()) == l.begin();\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4c9sb1ce: /tmp/tmp4c9sb1ce.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if (l[0] == l[1]) {\n        return false; \n    }\n    int gap\
    \ = l.size() - 2;\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i]\
    \ >= l[i + 1])\n            gap = i;\n    }\n    if (gap > 0) {\n        if (l[gap]\
    \ > l[gap + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmlundco2: /tmp/tmpmlundco2.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() >\
    \ 0);\n    long max = l[0];\n    long min = l[0];\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > max) return false;\n        if (l[i] < min) min =\
    \ 0;\n        max = l[i];\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp4gaewb21: /tmp/tmp4gaewb21.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\n\
    \        return false;\n\n    int left = -2;\n    int right = l.size() - 1;\n\
    \    while (left < right) {\n        int mid = (left + right) / 2;\n        if\
    \ (l[mid] < l[right])\n            left = mid + 1;\n        else\n           \
    \ right = mid;\n    }\n    return l[left] >= l[right];\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpvjgvd_m0: /tmp/tmpvjgvd_m0.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  if (l.front() > l.back()) return false;\n  for (long i = 0; i <\
    \ l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1otvat7w: /tmp/tmp1otvat7w.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    return std::adjacent_difference(l.begin(),\
    \ l.end(),\n        l.begin()) == l.end();\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmplalbpnam: /tmp/tmplalbpnam.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long max = std::accumulate(l.begin(),\
    \ l.end(), std::numeric_limits<long>::min());\n    long min = std::accumulate(l.begin(),\
    \ l.end(), std::numeric_limits<long>::max());\n    return min < max;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpek8314sv: /tmp/tmpek8314sv.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::vector<long>\
    \ v(l.size());\n    long i = 0;\n    for (auto e : l) v[i] = e;\n    for (auto\
    \ e = v.begin() + 1; e != v.end(); ++e) if (*e < *(*(e - 1))) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzid46xag.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzid46xag.cpp:14:72: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018long int\u2019)\n   14 |     for (auto e = v.begin()\
    \ + 1; e != v.end(); ++e) if (*e < *(*(e - 1))) return false;\n      |       \
    \                                                                 ^\n"
  stdout: ''
  timestamp: 1660129326
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  long long min;\n  long\
    \ long max;\n  for (auto e : l) {\n    min = std::min(min, e);\n    max = std::max(max,\
    \ e);\n  }\n  return min >= max;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrmo082l.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcrmo082l.cpp:14:26: error: no matching function for call\
    \ to \u2018min(long long int&, long int&)\u2019\n   14 |     min = std::min(min,\
    \ e);\n      |                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcrmo082l.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpcrmo082l.cpp:14:26: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018long int\u2019)\n   14 |     min = std::min(min, e);\n \
    \     |                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcrmo082l.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcrmo082l.cpp:14:26:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018long int\u2019)\n   14 |     min = std::min(min,\
    \ e);\n      |                          ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcrmo082l.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<cla"
  stdout: ''
  timestamp: 1660129325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long first = l[0];\n\
    \    long prev = first;\n    for (long i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] <= prev) {\n            return false;\n        }\n        prev = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp57r6j52: /tmp/tmpp57r6j52.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // Return False otherwise\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpcm15k_fz: /tmp/tmpcm15k_fz.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long last = l.front();\n\
    \    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] <= last) {\n  \
    \          return false;\n        }\n        last = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpctdgsk0n: /tmp/tmpctdgsk0n.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int ln = l.size();\n\
    \  int m = ln - 1;\n  int i = 0;\n  int j = 0;\n  int temp;\n  bool res = true;\n\
    \  while (i < m && j >= 0) {\n    temp = l[i];\n    l[i] = l[j];\n    l[j] = temp;\n\
    \    i++;\n    j--;\n  }\n  i = j + 1;\n  while (i <= m && j < 0) {\n    temp\
    \ = l[i];\n    l[i] = l[j];\n    l[j] = temp;\n    i++;\n    j++;\n  }\n  while\
    \ (i < m) {\n    temp = l[i];\n    l[i] = l[j];\n    l[j] = temp;\n    i++;\n\
    \    j++;\n  }\n  while (j <= 0) {\n    temp = l[i];\n    l[i] = l[j];\n    l[j]\
    \ = temp;\n    i++;\n    j--;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'free(): invalid pointer

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if(l.size() < 3)\
    \ return false; // Don't go too crazy with it\n    // Find the midpoint of the\
    \ list\n    long m1 = l[0];\n    long m2 = l[1];\n    long m3 = l[2];\n    long\
    \ m4 = l[3];\n    long mid = l[0]+(l[1]+l[2])/3;\n    long left = l[0];\n    long\
    \ right = l[1];\n    // Check if the midpoint is increasing or decreasing\n  \
    \  if(m1 < m2 && m2 < m3 && m3 < m4)\n        mid = l[0]+(2*(l[1]+l[2])/3);\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[2]+l[3])/3);\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[3]+2*(l[1]+l[2])/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[1]+l[3]+l[2]/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m3 < m4)\n        mid = l[0]+(2*(l[3]+l[0]+l[1]/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m3 < m4)\n        mid = l[0]+(2*(l[0]+2*(l[1]+l[2])/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m3 < m4)\n        mid = l[0]+(2*(l[0]+l[2]+l[3]/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[3]+l[2]+l[1]/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[3]+l[1]+2*(l[0]+l[2])/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[3]+2*(l[0]+l[2]+l[3])/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[3]+l[0]+l[3]+l[2]/3));\n\
    \    else if(m1 < m2 && m2 < m3 && m4 < m1)\n        mid = l[0]+(2*(l[3]+\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa63epnc_.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa63epnc_.cpp:45:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpa63epnc_.cpp:44:29:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   44 |         mid\
    \ = l[0]+(2*(l[3]+\n      |                       ~     ^\n      |           \
    \                  )\n   45 | }\n      | ~                            \n/tmp/tmpa63epnc_.cpp:44:29:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   44 |         mid\
    \ = l[0]+(2*(l[3]+\n      |                    ~        ^\n      |           \
    \                  )\n   45 | }\n      | ~                            \n/tmp/tmpa63epnc_.cpp:45:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   45 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long a = l[0];\n\
    \    long b = l[0];\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] < b) {\n         \
    \   decreasing = false;\n        } else if (l[i] > b) {\n            increasing\
    \ = false;\n        } else {\n            a = l[i];\n        }\n        b = l[i];\n\
    \    }\n    if (increasing == true && decreasing == false) {\n        return true;\n\
    \    }\n    if (increasing == false && decreasing == true) {\n        return true;\n\
    \    }\n    if (increasing == true && decreasing == true) {\n        return false;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2wlpi3nm: /tmp/tmp2wlpi3nm.cpp:45: int main(): Assertion `candidate((std::vector<long>({9,
    9, 9, 9}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long a = l[0];\n    long b = l[l.size() - 1];\n    for (int i\
    \ = 1; i < l.size(); ++i) {\n        if (l[i] > b) {\n            return false;\n\
    \        }\n        if (l[i] < a) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpugczn_b3: /tmp/tmpugczn_b3.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Initialize to\
    \ false.\n    bool result = false;\n    long current = l.front();\n    for (auto\
    \ it=l.begin()+1; it!=l.end(); ++it) {\n        if (it[0]>current) {\n       \
    \     current = it[0];\n            result = true;\n        } else if (it[0]<current)\
    \ {\n            return false;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpylefij6j: /tmp/tmpylefij6j.cpp:29: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\t// Base case\n\tif\
    \ (l.size() <= 1) {\n\t\treturn true;\n\t}\n\t// Recursion\n\tbool flag = false;\n\
    \tfor (int i = 0; i < l.size() - 1; i++) {\n\t\t// For first element\n\t\tif (l[i]\
    \ > l[i + 1]) {\n\t\t\tflag = true;\n\t\t}\n\t\t// For last element\n\t\tif (l[i]\
    \ < l[i - 1]) {\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd1sggpp6: /tmp/tmpd1sggpp6.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129327
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Use insertion\
    \ sort and keep track of the min and max of list\n    long min = l.front();\n\
    \    long max = l.front();\n    for (long i : l) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    // Return True if the list is monotonically increasing or\
    \ decreasing\n    return !(min <= max);\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpnu3wgjs4: /tmp/tmpnu3wgjs4.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long temp;\n    long\
    \ long sum = 0;\n    long long count = 1;\n\n    for (int i = 0; i < l.size();\
    \ i++) {\n        temp = l[i];\n        sum += temp;\n        if (i == 0) {\n\
    \            count = 1;\n        }\n\n        if (temp != l[i - 1]) {\n      \
    \      count += 1;\n        }\n    }\n\n    if (sum >= 0) {\n        return true;\n\
    \    }\n\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd26gstk4: /tmp/tmpd26gstk4.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() ==\
    \ l.size() + 1);\n    auto it = std::min_element(l.begin(), l.end());\n    auto\
    \ last = std::max_element(l.begin(), l.end());\n    return it == last;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3x3l0dip: /tmp/tmp3x3l0dip.cpp:11: bool monotonic(std::vector<long int>):
    Assertion `l.size() == l.size() + 1'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here.\n    std::sort(l.begin(), l.end());\n    return std::is_sorted(l.begin(),\
    \ l.end()) == l.size() - 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm91ht573: /tmp/tmpm91ht573.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::vector<long>::size_type\
    \ size = l.size();\n    long left = l[0];\n    long right = l[0];\n    for (size_t\
    \ i = 1; i < size; i++) {\n        if (l[i] > right) {\n            right = l[i];\n\
    \        } else if (l[i] < left) {\n            left = l[i];\n        }\n    }\n\
    \    return (left < right);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeodyf1h1: /tmp/tmpeodyf1h1.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129326
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return true;\n    long long int l1 = l[0];\n    long long int l2 = l[1];\n \
    \   for (int i = 2; i < l.size(); i++) {\n        long long int curr = l[i];\n\
    \        if (l1 < curr) return true;\n        if (l2 < curr) return true;\n  \
    \      l1 = l2;\n        l2 = curr;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcmbsqnkq: /tmp/tmpcmbsqnkq.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] <= l[i - 1]) ans\
    \ = 1;\n        else if (l[i] > l[i - 1]) ans = 0;\n        else ans = -1;\n \
    \   }\n    return (ans == -1);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcqgel0ry: /tmp/tmpcqgel0ry.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) {\n        return true;\n    }\n    if (n <= 1) {\n        return\
    \ false;\n    }\n    std::sort(l.begin(), l.end());\n    if (l[0] >= l[n-1]) {\n\
    \        return false;\n    }\n    int m = n/2;\n    std::sort(l.begin(), l.begin()+m,\
    \ std::greater<long>());\n    if (l[0] > l[n-1]) {\n        return true;\n   \
    \ }\n    if (l[m] > l[n-1]) {\n        return false;\n    }\n    if (l[0] >= l[m-1])\
    \ {\n        return true;\n    }\n    return monotonic(l.subvector(0, m));\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_16lubn6.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_16lubn6.cpp:33:24: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   33 |     return monotonic(l.subvector(0, m));\n      |                 \
    \       ^~~~~~~~~\n      |                        vector\n"
  stdout: ''
  timestamp: 1660129328
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Find min. and\
    \ max.\n    long min_val = *std::min_element(l.begin(), l.end());\n    long max_val\
    \ = *std::max_element(l.begin(), l.end());\n    // Check if all numbers are equal.\n\
    \    if (min_val == max_val) {\n        return true;\n    }\n    // Check if numbers\
    \ are decreasing\n    if (max_val > min_val) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5dsncp4t: /tmp/tmp5dsncp4t.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Complete the function,\
    \ return True or False.\n    long temp;\n    for (int i = 0; i < l.size() - 1;\
    \ i++)\n        if (l[i] >= l[i + 1])\n            return false;\n    for (int\
    \ i = 0; i < l.size(); i++)\n        if (l[i] > l[i + 1])\n            temp=l[i];\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkoxm8bzc: /tmp/tmpkoxm8bzc.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return true;\n    }\n    long prev_lv = l[0];\n    for (auto i =\
    \ 1, n = l.size(); i < n; ++i) {\n        if (l[i] < prev_lv) {\n            return\
    \ false;\n        }\n        prev_lv = l[i];\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0knaqb_.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa0knaqb_.cpp:15:10: error: inconsistent deduction for\
    \ \u2018auto\u2019: \u2018int\u2019 and then \u2018long unsigned int\u2019\n \
    \  15 |     for (auto i = 1, n = l.size(); i < n; ++i) {\n      |          ^~~~\n"
  stdout: ''
  timestamp: 1660129328
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    int mn = INT_MIN;\n    for (int i = 1; i < n; i++) {\n        if (l[i-1]\
    \ > l[i])\n            return false;\n        if (l[i-1] < l[i])\n           \
    \ mn = std::min(mn, l[i]);\n    }\n    if (mn > INT_MAX)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpka4i6qx3.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpka4i6qx3.cpp:17:35: error: no matching function for call\
    \ to \u2018min(int&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type&)\u2019\n   17 |             mn = std::min(mn, l[i]);\n   \
    \   |                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpka4i6qx3.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpka4i6qx3.cpp:17:35: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   17 |             mn = std::min(mn, l[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpka4i6qx3.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpka4i6qx3.cpp:17:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   17 |             mn = std::min(mn, l[i]);\n\
    \      |                            "
  stdout: ''
  timestamp: 1660129328
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  long long ans = INT_MAX;\n\
    \  for (long long i = 1; i < l.size(); ++i) {\n    if (l[i] < l[i-1]) ans = i;\n\
    \  }\n  return ans == INT_MAX;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt_2dmkq4: /tmp/tmpt_2dmkq4.cpp:22: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129328
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i] < l[i - 1])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmptar5zdjt: /tmp/tmptar5zdjt.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() ==\
    \ 6);\n    long a = l[0];\n    long b = l[1];\n    long c = l[2];\n    long d\
    \ = l[3];\n    long e = l[4];\n    long f = l[5];\n    long delta = a*e + b*d\
    \ + c*f - c*e;\n    if (delta < 0) {\n        return false;\n    } else if (delta\
    \ > 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpobzcu0mz: /tmp/tmpobzcu0mz.cpp:11: bool monotonic(std::vector<long int>):
    Assertion `l.size() == 6'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n - 1; i++) {\n        if (l[i] < l[i - 1]) return true;\n\
    \        else if (l[i] > l[i - 1]) return false;\n    }\n    return l[0] <= l[n\
    \ - 1];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu14gov5p: /tmp/tmpu14gov5p.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long max = std::numeric_limits<long\
    \ long>::max();\n    long long min = std::numeric_limits<long long>::min();\n\
    \    long long mid = max/2;\n    for (auto i : l) {\n        if (i > mid)\n  \
    \          return false;\n        if (i < mid)\n            return true;\n   \
    \     mid = max/2;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpchrou6fm: /tmp/tmpchrou6fm.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  // Find minimum element.\n\
    \  long long int minElem = 0;\n  long long int minIndex = -1;\n  long long int\
    \ i;\n  for (i = 0; i < l.size(); ++i) {\n    if (l[i] < minElem) {\n      minElem\
    \ = l[i];\n      minIndex = i;\n    }\n  }\n  std::vector<long> r;\n  std::vector<long>\
    \ s;\n  // Find remaining elements.\n  for (i = l.size() - 1; i > 0; --i) {\n\
    \    long long int curElem = l[i];\n    if (i == minIndex) {\n      // curElem\
    \ == minElem\n      r.push_back(curElem);\n    } else {\n      long long int nextElem\
    \ = l[i - 1];\n      if (curElem > nextElem) {\n        // curElem > nextElem\n\
    \        r.push_back(curElem);\n        s.push_back(nextElem);\n      } else {\n\
    \        // curElem < nextElem\n        r.push_back(nextElem);\n        s.push_back(curElem);\n\
    \      }\n    }\n  }\n  // Return True if monotonically increasing.\n  return\
    \ r[r.size() - 1] == minElem;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb2tn2oar: /tmp/tmpb2tn2oar.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long l1 = l[0];\n\
    \    for (long i = 1, j = 0; i <= l.size(); i++) {\n        if (l[i] <= l[j])\
    \ {\n            if (i == l.size() - 1)\n                return true;\n      \
    \      i++;\n            j++;\n        }\n        else if (l[i] >= l[j]) {\n \
    \           if (j == 0)\n                return true;\n            i++;\n    \
    \        j--;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpeltwx7t2: /tmp/tmpeltwx7t2.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n == 0) return true;\n  std::sort(l.begin(), l.end());\n  for (int i =\
    \ 1; i < n; i++) {\n    if (l[i] > l[i - 1]) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo4opkh0: /tmp/tmpmo4opkh0.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  for (int i = 1, j = 0; j < n; i++, j++) {\n    while (j < n && (l[i] < l[j]))\
    \ {\n      j++;\n    }\n    if (j < n) {\n      std::swap(l[i], l[j]);\n     \
    \ i++;\n      j++;\n    }\n  }\n  return n == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpykn28pjm: /tmp/tmpykn28pjm.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() <=\
    \ 10);\n    if (l.size() <= 1) return false;\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] <= l[i - 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_lyl5rcv: /tmp/tmp_lyl5rcv.cpp:23: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Sort in increasing\
    \ order.\n    std::sort(l.begin(), l.end(), [](long x, long y) { return x > y;\
    \ });\n    // Iterate from the middle until we find an item that is not in increasing\
    \ order.\n    for (int middle = l.size() / 2; middle >= 0; middle--) {\n     \
    \   // Move left half to the right until we find an element that is not in increasing\
    \ order.\n        while (l[middle] > l[middle + 1]) {\n            std::swap(l[middle],\
    \ l[middle + 1]);\n        }\n    }\n    // Return true if the list is monotonically\
    \ increasing.\n    // >>> monotonic([0, 2, 4, 5])\n    // True\n    return l[0]\
    \ == l[l[l.size() / 2]];\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcvb35fsk: /tmp/tmpcvb35fsk.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() >=\
    \ 2);\n    long m = l[0];\n    for (long i = 1; i < l.size(); i++) {\n       \
    \ if (l[i] > m)\n            return false;\n        else if (l[i] < m)\n     \
    \       return true;\n        else\n            m = l[i];\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa6n6sj8z: /tmp/tmpa6n6sj8z.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  for (int i = 1; i < n; i++) {\n    if (l[i - 1] <= l[i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkag4djf0: /tmp/tmpkag4djf0.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return false;\n    long first = l.front();\n    long last = l.back();\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] < first || l[i] > last)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpal4mwauv: /tmp/tmpal4mwauv.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long x = l.front();\n\
    \    long y = l.back();\n    int flag = 0;\n    int i = 0;\n    while (i < l.size()\
    \ - 1) {\n        if (x == y) {\n            return true;\n        } else if (x\
    \ < y) {\n            flag = 1;\n        } else if (x > y) {\n            flag\
    \ = -1;\n        } else {\n            flag = 0;\n        }\n        x = y;\n\
    \        y = l[i];\n        if (x >= y) {\n            l[i] = y;\n           \
    \ i++;\n        }\n    }\n    if (flag == 1)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaytl2gxa: /tmp/tmpaytl2gxa.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  long s = 0;\n  int\
    \ c = 0;\n  for (int i = 0; i < l.size(); i++) {\n    s += l[i];\n    if (s >\
    \ c) {\n      c = s;\n    }\n  }\n  return c == l[l.size() - 1];\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe0zio02m: /tmp/tmpe0zio02m.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    return std::is_sorted(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp63l0p2m9: /tmp/tmp63l0p2m9.cpp:18: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long x = l[0];\n\
    \    for (long long i = 1; i < l.size(); i++) {\n        if (l[i] > x) {\n   \
    \         return false;\n        } else if (l[i] < x) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj5xdi4ry: /tmp/tmpj5xdi4ry.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long a = l.front(),\
    \ b = l.back();\n    bool change = a < b;\n    bool increasing = true;\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (change)\n            increasing\
    \ = !increasing;\n        if (increasing)\n            if (b < l[i])\n       \
    \         change = false;\n            else\n                b = l[i];\n     \
    \   else\n            if (a > l[i])\n                change = false;\n       \
    \     else\n                a = l[i];\n    }\n    return change;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp33r6_vqj: /tmp/tmp33r6_vqj.cpp:35: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tif (l.empty())\n\t\t\
    return false;\n\tlong v = l.front();\n\tfor (long i : l)\n\t\tif (i <= v)\n\t\t\
    \treturn false;\n\tfor (long i : l)\n\t\tif (i >= v)\n\t\t\treturn true;\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyg46gt7y: /tmp/tmpyg46gt7y.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long first = 0;\n\
    \    long last = std::numeric_limits<long>::min();\n    long mid = 0;\n    for(long\
    \ i : l){\n        mid = first+((last)-first)/(l.size()-1);\n        if(i <= mid){\n\
    \            first = mid;\n        }else{\n            last = mid;\n        }\n\
    \    }\n    if(first < last){\n        return true;\n    }else{\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbwfbdczw: /tmp/tmpbwfbdczw.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 1;\n\
    \    long long ln = l.size();\n    for (int i = 0; i < ln; i++) {\n        if\
    \ (l[i] < l[i - 1]) ans++;\n        else if (l[i] > l[i - 1]) ans--;\n       \
    \ if (ans == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpk1e_mlxi: /tmp/tmpk1e_mlxi.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 1) return true;\n    int min_val = l[0];\n    int max_val = l[0];\n\
    \    for (int i = 1; i < n; ++i) {\n        int tmp = l[i];\n        if (tmp <\
    \ min_val) min_val = tmp;\n        if (tmp > max_val) max_val = tmp;\n    }\n\
    \    return max_val - min_val > 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphpt1nb2f: /tmp/tmphpt1nb2f.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    long prev = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i - 1]\
    \ >= l[i])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp001_dyfx: /tmp/tmp001_dyfx.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long maxi =\
    \ 0; long long mini = std::numeric_limits<long long int>::max();\n    for (long\
    \ long int x : l) {\n        if (x > maxi) maxi = x;\n        if (x < mini) mini\
    \ = x;\n    }\n    if (maxi > mini) return false;\n    for (long long int x :\
    \ l) {\n        if (x > maxi && x < mini) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpufw4g339: /tmp/tmpufw4g339.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Code Below was\
    \ edited \n    std::vector<long> temp;\n    long n = l.size();\n    int m = (int)n;\n\
    \    long a = l[0];\n    long b = l[1];\n    long c = l[2];\n    int i;\n    if\
    \ (n == 3) {\n        if (a < b && a < c) {\n            return true;\n      \
    \  }\n    } else if (n == 2) {\n        if (a < c) {\n            return true;\n\
    \        }\n    }\n    bool found = false;\n    for (i = 2; i < m; i++) {\n  \
    \      long mid = (long) (l - (long) i / 2);\n        long mid2 = (long) (mid);\n\
    \        long mid3 = mid2;\n        mid2 = (mid2 + mid);\n        mid = (mid +\
    \ mid2);\n        if (mid2 == mid && (a < mid || b < mid)) {\n            return\
    \ true;\n        }\n        if (mid2 < mid && (a < mid || c < mid)) {\n      \
    \      return true;\n        }\n    }\n    if (a > b) {\n        std::swap(a,\
    \ b);\n    }\n    if (b > c) {\n        std::swap(b, c);\n    }\n    if (b > c)\
    \ {\n        std::swap(b, c);\n    }\n    if (a > b) {\n        std::swap(a, b);\n\
    \    }\n    return found;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy26n0yvo.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy26n0yvo.cpp:30:30: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019\
    )\n   30 |         long mid = (long) (l - (long) i / 2);\n      |            \
    \                ~ ^ ~~~~~~~~~~~~\n      |                            |      \
    \      |\n      |                            |            long int\n      |  \
    \                          std::vector<long int>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpy26n0yvo.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpy26n0yvo.cpp:30:43:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   30 |         long mid = (long) (l - (long) i / 2);\n      |             \
    \                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpy26n0yvo.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     operator-(const move"
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n        \n    long long\
    \ smallest = std::numeric_limits<long long>::max();\n    long long largest = -std::numeric_limits<long\
    \ long>::max();\n    long long diff = smallest;\n    for (auto el : l) {\n   \
    \     if (el > largest) {\n            largest = el;\n        } else if (el <\
    \ smallest) {\n            smallest = el;\n        }\n        diff = std::abs(largest\
    \ - smallest);\n    }\n    return (diff >= 1LL);\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpbk06_76x: /tmp/tmpbk06_76x.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i - 1] > l[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg5zxfstc: /tmp/tmpg5zxfstc.cpp:23: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    return std::unique(l.begin(), l.end()) == l.begin();\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc_1hk22d: /tmp/tmpc_1hk22d.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129329
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\n\
    \        return false;\n    int m = l[0];\n    int n = l[1];\n    for (int i =\
    \ 2; i < l.size(); i++) {\n        m = min(m, l[i]);\n        n = max(m, n);\n\
    \    }\n    return m == n;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxj1t9qtg.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxj1t9qtg.cpp:16:13: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   16 |         m = min(m,\
    \ l[i]);\n      |             ^~~\n      |             std::min\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxj1t9qtg.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpxj1t9qtg.cpp:17:13: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   17 |         n = max(m, n);\n      |             ^~~\n      |            \
    \ std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmpxj1t9qtg.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    auto it = l.begin();\n\
    \    auto last = l.back();\n    while (++it != l.end()) {\n        if (*it < last)\
    \ {\n            return false;\n        }\n        last = *it;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdggfjpcr: /tmp/tmpdggfjpcr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() == 0)\n\
    \        return true;\n    int i = 0;\n    int j = l.size() - 1;\n    while (i\
    \ < j) {\n        if (l[i] <= l[j])\n            ++i;\n        else\n        \
    \    --j;\n    }\n    return !(i < j);\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpvgjm8o_o: /tmp/tmpvgjm8o_o.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // If list is empty,\
    \ return False since any list element will be\n    // considered increasing or\
    \ decreasing if its value is >= 0\n    if (l.size() == 0) {\n        return false;\n\
    \    }\n    long largest = l[0];\n    for (long i : l) {\n        if (i < 0) {\n\
    \            return false;\n        }\n        if (i > largest) {\n          \
    \  largest = i;\n        }\n    }\n    return largest > 0;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb10rf8ox: /tmp/tmpb10rf8ox.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long max = l[0];\n\
    \    long long min = l[0];\n    for (size_t i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) return false;\n        else if (l[i] < min) return false;\n\
    \        max = std::max(max, l[i]);\n        min = std::min(min, l[i]);\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qjetv26.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3qjetv26.cpp:16:33: error: no matching function for call\
    \ to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type&)\u2019\n   16 |         max = std::max(max, l[i]);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3qjetv26.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp3qjetv26.cpp:16:33: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   16 |         max = std::max(max,\
    \ l[i]);\n      |                                 ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3qjetv26.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3qjetv26.cpp:16:33:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   16 |         max\
    \ = std::max(max, l[i]);\n      |        "
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long m = std::numeric_limits<long>::max();\n\
    \    long n = std::numeric_limits<long>::min();\n    for (long i : l) {\n    \
    \    if (i > n) {\n            n = i;\n        } else if (i < m) {\n         \
    \   m = i;\n        }\n    }\n    return m >= n;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpchs3_tn4: /tmp/tmpchs3_tn4.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    for (int i = 0; i\
    \ < l.size(); ++i) {\n        if (l[i] < l[i-1]) return false;\n        if (l[i]\
    \ > l[i-1]) return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpolusd9_x: /tmp/tmpolusd9_x.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Sort list by comparing\
    \ first element with second element.\n    std::sort(l.begin(), l.end(), [&l](long\
    \ a, long b) { return a < b; });\n    // Compare adjacent elements of the list.\n\
    \    for (long i = 0; i < l.size() - 1; i++) {\n        // If first element is\
    \ bigger than second element, return false.\n        if (l[i + 1] < l[i]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6wlcu9wv: /tmp/tmp6wlcu9wv.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129330
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if(l.size() == 1)\
    \ return true;\n    if(l.size() <= 3) return true;\n    auto f1 = [](long i, long\
    \ j) { return i > j; };\n    auto f2 = [](long i, long j) { return i < j; };\n\
    \    long x1 = l[0];\n    long x2 = l[1];\n    long x3 = l[2];\n    long x4 =\
    \ l[3];\n\n    long min_f = f1(l[0], l[1]);\n    long max_f = f2(l[0], l[1]);\n\
    \n    if(min_f > max_f)\n        return false;\n\n    for(long i = 2; i < l.size();\
    \ i++) {\n        long xi = l[i];\n\n        if(f1(xi, x1) > min_f) {\n      \
    \      min_f = f1;\n            if(xi > x3) x3 = xi;\n            if(xi < x2)\
    \ x2 = xi;\n        }\n        if(f2(xi, x2) > min_f) {\n            min_f = f2;\n\
    \            if(xi > x4) x4 = xi;\n            if(xi < x3) x3 = xi;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfydvzb4t.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfydvzb4t.cpp:30:21: error: invalid user-defined conversion\
    \ from \u2018monotonic(std::vector<long int>)::<lambda(long int, long int)>\u2019\
    \ to \u2018long int\u2019 [-fpermissive]\n   30 |             min_f = f1;\n  \
    \    |                     ^~\n/tmp/tmpfydvzb4t.cpp:13:15: note: candidate is:\
    \ \u2018constexpr monotonic(std::vector<long int>)::<lambda(long int, long int)>::operator\
    \ bool (*)(long int, long int)() const\u2019 <near match>\n   13 |     auto f1\
    \ = [](long i, long j) { return i > j; };\n      |               ^\n/tmp/tmpfydvzb4t.cpp:13:15:\
    \ note:   no known conversion from \u2018bool (*)(long int, long int)\u2019 to\
    \ \u2018long int\u2019\n/tmp/tmpfydvzb4t.cpp:35:21: error: invalid user-defined\
    \ conversion from \u2018monotonic(std::vector<long int>)::<lambda(long int, long\
    \ int)>\u2019 to \u2018long int\u2019 [-fpermissive]\n   35 |             min_f\
    \ = f2;\n      |                     ^~\n/tmp/tmpfydvzb4t.cpp:14:15: note: candidate\
    \ is: \u2018constexpr monotonic(std::vector<long int>)::<lambda(long int, long\
    \ int)>::operator bool (*)(long int, long int)() const\u2019 <near match>\n  \
    \ 14 |     auto f2 = [](long i, long j) { return i < j; };\n      |          \
    \     ^\n/tmp/tmpfydvzb4t.cpp:14:15: note:   no known conversion from \u2018bool\
    \ (*)(long int, long int)\u2019 to \u2018long int\u2019\n"
  stdout: ''
  timestamp: 1660129330
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int x =\
    \ 0, y = 0, min_x, max_x;\n    // Check if list is empty.\n    if (l.empty())\n\
    \        return false;\n    // Find the min and max values.\n    min_x = max_x\
    \ = l[0];\n    for (const auto &e : l) {\n        if (e < min_x) min_x = e;\n\
    \        if (e > max_x) max_x = e;\n    }\n    // Check if the list if monotonic.\n\
    \    if (min_x == max_x) {\n        return true;\n    }\n    // Calculate the\
    \ middle value of list.\n    int mid = (min_x + max_x) / 2;\n    // If list is\
    \ monotonically decreasing, swap the max and min elements.\n    if (l[mid] < max_x)\
    \ {\n        long long int tmp_mid_val = l[mid];\n        l[mid] = max_x;\n  \
    \      max_x = tmp_mid_val;\n    }\n    // If list is monotonically increasing,\
    \ swap the min and max elements.\n    if (l[mid] > min_x) {\n        long long\
    \ int tmp_mid_val = l[mid];\n        l[mid] = min_x;\n        min_x = tmp_mid_val;\n\
    \    }\n    // Check if the list is monotonically decreasing.\n    return monotonic(l,\
    \ min_x, max_x);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w6rk8il.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8w6rk8il.cpp:40:37: error: too many arguments to function\
    \ \u2018bool monotonic(std::vector<long int>)\u2019\n   40 |     return monotonic(l,\
    \ min_x, max_x);\n      |                                     ^\n/tmp/tmp8w6rk8il.cpp:10:6:\
    \ note: declared here\n   10 | bool monotonic(std::vector<long> l) {\n      |\
    \      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129329
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int sum=0;\n\
    \    for (long long int i = 0; i < l.size(); i++)\n        sum += l[i];\n    return\
    \ (sum == 0);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_bbqtqpa: /tmp/tmp_bbqtqpa.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long first = *l.begin();\n\
    \    long last = first + l[l.size()-1];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        long current = l[i];\n        if (current < first) return false;\n\
    \        if (current > last) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyrwp_48r: /tmp/tmpyrwp_48r.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  if(l.size() <= 1) return\
    \ false;\n  long a = l[0], b = l[0], c = l[1], d = l[1];\n  for(size_t i = 2;\
    \ i < l.size(); ++i) {\n    long tmp = a + b + c + d;\n    a = b; b = c; c = d;\
    \ d = tmp;\n  }\n  return a >= b;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4n9ikxvf: /tmp/tmp4n9ikxvf.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // return true;\n\
    \    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        long l1 = l[i];\n\
    \        for (int j = i + 1; j < n; j++) {\n            long l2 = l[j];\n    \
    \        if (l2 < l1) {\n                return false;\n            }\n      \
    \  }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaf_7q1tb: /tmp/tmpaf_7q1tb.cpp:29: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n < 2) {\n    return false;\n  }\n  for (int i = 1; i < n; ++i) {\n   \
    \ if (l[i - 1] >= l[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp59p35kx0: /tmp/tmp59p35kx0.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long s = l[0];\n\
    \    for(long i = 1; i < l.size(); i++)\n        if(l[i] < s)\n            return\
    \ false;\n        else s = l[i];\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp_5im0sj1: /tmp/tmp_5im0sj1.cpp:23: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long n = l.size();\n\
    \    // Sort and compare adjacent pairs.\n    std::sort(l.begin(), l.end());\n\
    \    for (long i = 0; i < n; i++) {\n        if (l[i] > l[i + 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2njixg45: /tmp/tmp2njixg45.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 3) return false;\n    if (n == 3) return l[0] == l[1] && l[0] ==\
    \ l[2];\n    long m = l[0] - l[1], w = l[2] - l[1];\n    for (int i = 0; i < n\
    \ - 1; i++) {\n        if (m > l[i + 1] - l[i]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3xgjvp3z: /tmp/tmp3xgjvp3z.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long lmin = l[0];\n\
    \    long lmax = l[0];\n    for (long i : l) {\n        if (lmax < i)\n      \
    \      lmax = i;\n        if (lmin > i)\n            lmin = i;\n    }\n    return\
    \ lmin > lmax;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph4mow_1r: /tmp/tmph4mow_1r.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tif (l.size() < 2) return\
    \ false;\n\tlong cur = l.at(0);\n\tfor (int i = 1; i < l.size(); i++) {\n\t\t\
    if (l[i] < cur) return false;\n\t\tcur = l[i];\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1u4d4csz: /tmp/tmp1u4d4csz.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // write your code\
    \ here\n    if(l.size() < 2) return false;\n    long first = l[0];\n    long second\
    \ = l[1];\n    int change = second - first;\n    for(long i = 3; i < l.size();\
    \ i++) {\n        long current = l[i];\n        if(current < first) {\n      \
    \      first = current;\n            change = second - first;\n        }\n   \
    \     if(current > first) {\n            second = current;\n            change\
    \ = first - second;\n        }\n    }\n    return (change < 0);\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp38rxx4o0: /tmp/tmp38rxx4o0.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] <= l[j]) {\n      \
    \      if (l[i] <= l[j + 1]) {\n                i++;\n                j--;\n \
    \           } else {\n                i++;\n            }\n        } else {\n\
    \            if (l[j] <= l[j + 1]) {\n                j--;\n            } else\
    \ {\n                j--;\n            }\n        }\n    }\n    if (i > j) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp315ohs1e: /tmp/tmp315ohs1e.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0,\
    \ p = l[0]; \n    for(long long x : l) {\n        if(x>p) return false;\n    \
    \    ans = max(ans,x-p);\n        p = x;\n    }\n    return ans==0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zzcf91g.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8zzcf91g.cpp:14:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   14 |         ans = max(ans,x-p);\n\
    \      |               ^~~\n      |               std::max\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8zzcf91g.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129331
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tsort(l.begin(), l.end());\n\
    \tfor (long i = 1; i < l.size(); ++i) {\n\t\tif (l[i - 1] <= l[i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6_ek79kr: /tmp/tmp6_ek79kr.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  // Find highest element\
    \ in the list.\n  long max = *max_element(l.begin(), l.end());\n  for (long current\
    \ : l)\n    if (current > max)\n      return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmport4ij6u: /tmp/tmport4ij6u.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long prev = std::max_element(l.begin(),\
    \ l.end());\n    long next = std::min_element(l.begin(), l.end());\n\n    if (prev\
    \ <= next) return true;\n\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpda_fnblp.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpda_fnblp.cpp:11:33: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   11 |     long prev = std::max_element(l.begin(), l.end());\n      |      \
    \           ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                    \
    \             |\n      |                                 __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpda_fnblp.cpp:12:33: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   12 |     long next = std::min_element(l.begin(),\
    \ l.end());\n      |                 ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n  \
    \    |                                 |\n      |                            \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  long l1 = l[0];\n  long l2 = l[1];\n  int i = 0;\n  int j = 0;\n\
    \  for (; i < l.size() - 1; ++i) {\n    if (l[i] <= l2) {\n      l2 = l[i+1];\n\
    \      l1 = l[i];\n    } else {\n      l2 = l[j];\n      l1 = l[i];\n    }\n \
    \   j++;\n  }\n  return (l[1] == l[0]);\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp9jno80c_: /tmp/tmp9jno80c_.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    for (int i = 1; i\
    \ < l.size(); i++)\n        if (l[i] > l[i - 1]) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw_uw2bwm: /tmp/tmpw_uw2bwm.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\t// Sort list \n\tstd::sort(l.begin(),\
    \ l.end());\n\tint n = l.size() - 1;\n\tif (n < 0) {\n\t\treturn false;\n\t}\n\
    \tfor (int i = n; i >= 1; i--) {\n\t\tif (l[i] <= l[i - 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjg1jnr5_: /tmp/tmpjg1jnr5_.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0, j = 0,\
    \ k = 0;\n    long s = 0;\n    while (i < l.size() && j < l.size()) {\n      \
    \  if (l[i] < l[j]) {\n            ++i;\n        } else if (l[i] > l[j]) {\n \
    \           ++j;\n        } else {\n            ++k;\n        }\n        s +=\
    \ l[i] - l[j];\n    }\n    if (i == j)\n        return true;\n    else if (k !=\
    \ 0)\n        return false;\n    else {\n        s += (l[i] - l[j]);\n       \
    \ j = i;\n        while (i + 1 < l.size() && j < l.size()) {\n            if (l[i]\
    \ == l[j]) {\n                ++i;\n                ++j;\n            } else if\
    \ (l[i] > l[j]) {\n                ++j;\n            } else {\n              \
    \  ++i;\n            }\n            s += l[i] - l[j];\n        }\n        if (i\
    \ == j)\n            return true;\n        else if (s <= 0)\n            return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long min = l[0];\n\
    \    long long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n      \
    \  long cur = l[i];\n        if (cur < min)\n            min = cur;\n        if\
    \ (cur > max)\n            max = cur;\n    }\n    if (max == min)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp3k63i7l5: /tmp/tmp3k63i7l5.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long start =\
    \ 0;\n    long long end = 0;\n    for(long long i : l) {\n        if(i > end)\
    \ return false;\n        if(i < start) {\n            start = i;\n        }\n\
    \        if(i > end) end = i;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpuzpfmxl9: /tmp/tmpuzpfmxl9.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Check for empty\
    \ list.\n    if (l.size() == 0) return false;\n    if (l.size() == 1) return true;\n\
    \    if (l[0] == l[1]) return false;\n    for (int i = 2; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi6_w83zq: /tmp/tmpi6_w83zq.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = (int) l.size();\n\
    \    int i, k, j, t;\n    bool still_increasing;\n    if (n <= 1) {\n        return\
    \ true;\n    }\n    // Find out how many pairs of indices j need to swap.\n  \
    \  int num_swaps = n - 1;\n    for (i = 1; i < n; i++) {\n        if (l[i - 1]\
    \ < l[i]) {\n            num_swaps++;\n        }\n    }\n\n    // Do the swaps.\n\
    \    long lmax[l];\n    for (int i = 0; i < num_swaps; i++) {\n        // Swap\
    \ l[i] and l[i+1].\n        std::swap(l[i], l[i + 1]);\n        // Find the maximum\
    \ value of l[i].\n        for (k = 0; k < n; k++) {\n            lmax[k] = lmax[k]\
    \ > l[i] ? lmax[k] : l[i];\n        }\n    }\n\n    // Compare the maximums found\
    \ so far.\n    still_increasing = true;\n    for (i = 0; i < n; i++) {\n     \
    \   if (lmax[i] > l[i]) {\n            still_increasing = false;\n           \
    \ break;\n        }\n    }\n    return still_increasing;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5bd8sgnu.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5bd8sgnu.cpp:26:15: error: could not convert \u2018l\u2019\
    \ from \u2018std::vector<long int>\u2019 to \u2018long unsigned int\u2019\n  \
    \ 26 |     long lmax[l];\n      |               ^\n/tmp/tmp5bd8sgnu.cpp:26:15:\
    \ error: size of array \u2018lmax\u2019 has non-integral type \u2018std::vector<long\
    \ int>\u2019\n"
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n < 2)\n    return true;\n  for (int i = 1; i < n; i++) {\n    if (l[i]\
    \ < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppglix7sh: /tmp/tmppglix7sh.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    auto begin = l.begin();\n\
    \    auto end = l.end();\n    auto itr = begin;\n    if (begin == end || (*itr)\
    \ == (std::numeric_limits<long>::min() - 1)) {\n        return false;\n    }\n\
    \    bool increase = true;\n    bool decrease = true;\n    bool change = false;\n\
    \    while (itr != end) {\n        if (*itr < std::numeric_limits<long>::min())\
    \ {\n            decrease = false;\n        } else if (*itr > std::numeric_limits<long>::max())\
    \ {\n            increase = false;\n        }\n        if (increase && *itr <\
    \ *(++itr)) {\n            change = true;\n        }\n        if (decrease &&\
    \ *itr > *(--itr)) {\n            change = true;\n        }\n    }\n    return\
    \ change;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // O(n log n)\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end()); // remove duplicate\n \
    \   long n = l.size();\n    long k = n-1; // current index of monotonically increasing\
    \ list\n    long i = 1;\n    while(i < n) {\n        long diff = l[i] - l[k];\n\
    \        if(diff > 0)\n            k++;\n        else if(diff < 0)\n         \
    \   i++;\n        else\n            return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe4pivobo: /tmp/tmpe4pivobo.cpp:32: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ {\n        return false;\n    }\n    long last = l[0];\n    long min = l[0];\n\
    \    for (size_t i = 1; i < l.size(); i++) {\n        long cur = l[i];\n     \
    \   if (cur < last) {\n            return false;\n        }\n        if (cur >\
    \ last) {\n            min = cur;\n        }\n        last = cur;\n    }\n   \
    \ return (min <= last);\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7z96w9q8: /tmp/tmp7z96w9q8.cpp:33: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int i = 0;\n    int\
    \ j = l.size() - 1;\n    while (i < j) {\n        if (l[i] > l[j]) {\n       \
    \     i++;\n        } else {\n            j--;\n        }\n    }\n    if (i >\
    \ j) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpudltfc83: /tmp/tmpudltfc83.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  // Initialize first\
    \ two elements and last one as last element in the list\n  if (l.size() <= 1)\
    \ {\n    return false;\n  }\n  long first = l[0];\n  long last = l[l[l.size()\
    \ - 1]];\n  long lastPos = l[l[l.size() - 2]];\n\n  // Compare first and last\
    \ element\n  if (last < first) {\n    return false;\n  }\n  if (last == first)\
    \ {\n    return last < lastPos;\n  }\n\n  // Iterate through list\n  for (long\
    \ i = 2; i < l.size(); ++i) {\n    // Compare i-th element with previous element\
    \ if any\n    if (l[i - 1] > l[i]) {\n      return false;\n    }\n  }\n\n  return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptvecziz7: /tmp/tmptvecziz7.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long xmax = l[0],\
    \ xmin = l[0];\n    for(long i : l) {\n        if (xmax < i) xmax = i;\n     \
    \   if (imax < i) xmax = i;\n        if (xmin > i) xmin = i;\n    }\n    return\
    \ xmax < xmin;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6fq6u1j.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb6fq6u1j.cpp:14:13: error: \u2018imax\u2019 was not declared\
    \ in this scope; did you mean \u2018xmax\u2019?\n   14 |         if (imax < i)\
    \ xmax = i;\n      |             ^~~~\n      |             xmax\n"
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long maxValue\
    \ = 0;\n    long long minValue = std::numeric_limits<long long>::min();\n    for\
    \ (auto e : l) {\n        if (e > maxValue) {\n            maxValue = e;\n   \
    \     } else if (e < minValue) {\n            minValue = e;\n        }\n    }\n\
    \    return maxValue >= minValue;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp71jpai5: /tmp/tmpp71jpai5.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // initialize pointer\
    \ to last element of array and size to length of array\n    long* last;\n    long\
    \ size = l.size();\n\n    last  = &l[size-1]; // pointer to last element\n   \
    \ bool result = true;    // initialize result to true\n    for (int i = 0; i <\
    \ size-1; i++) {\n        if (l[i+1] <= last[i]) {    // if next element is not\
    \ increasing\n            result = false;        // then result is false\n   \
    \         break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp8rzd9rnl: /tmp/tmp8rzd9rnl.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tlong temp = 0;\n\t\
    for (auto i : l)\n\t\tif (temp < i)\n\t\t\ttemp = i;\n\treturn (temp > 0 && temp\
    \ == l[0]);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpatebic6m: /tmp/tmpatebic6m.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    sort(l.begin(), l.end());\n\
    \    // Compare two elements at a time starting from the second element towards\
    \ the first.\n    int j = 1;\n    for (int i = 1; i < l.size(); i++) {\n     \
    \   // The difference between current element and next element is greater than\
    \ the difference between the current element and previous element.\n        if\
    \ (l[i] > l[j - 1]) return false;\n        // The difference between current element\
    \ and next element is less than the difference between the current element and\
    \ previous element.\n        if (l[i] < l[j - 1]) return false;\n        // The\
    \ difference between current element and next element is equal to the difference\
    \ between the current element and previous element.\n        if (l[i] == l[j -\
    \ 1]) return false;\n        j++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkfib8dp4: /tmp/tmpkfib8dp4.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Sort the list\
    \ and then compare the sorted list with itself\n    // using std::greater to determine\
    \ whether the list is monotonic increasing or decreasing.\n    bool isSorted =\
    \ std::is_sorted(l.begin(), l.end());\n    if (isSorted) {\n        auto it =\
    \ l.begin();\n        while (it != l.end() && it != l.begin()) ++it;\n       \
    \ if (it == l.begin()) return false;\n        while (it != l.end() && it != l.begin())\
    \ --it;\n        return std::is_sorted(l.begin(), l.end());\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpye4n9nui: /tmp/tmpye4n9nui.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tif (l.size() <= 1)\
    \ return false;\n\tint start = 0, end = l.size() - 1;\n\twhile (start < end) {\n\
    \t\tif (l[start] >= l[end]) end--;\n\t\telse start++;\n\t}\n\treturn l[start]\
    \ >= l[end];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa42oitml: /tmp/tmpa42oitml.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tif (l.empty())\n\t\t\
    return true;\n\tlong first = l.front();\n\tlong last = l.back();\n\tlong mid;\n\
    \tif (first > last) {\n\t\tmid = first;\n\t\tfirst = last;\n\t\tlast = mid;\n\t\
    }\n\tstd::vector<long> temp;\n\tfor (long i = first + 1; i <= last; i++) {\n\t\
    \tif (temp.empty()) {\n\t\t\ttemp.push_back(i);\n\t\t} else if (temp.front() >\
    \ i)\n\t\t\ttemp.push_back(i);\n\t\telse\n\t\t\ttemp.push_front(i);\n\t}\n\tfor\
    \ (int i = 0; i < temp.size(); i++)\n\t\tfor (int j = i + 1; j < temp.size() -\
    \ 1; j++)\n\t\t\tif (temp[j] < temp[j + 1]) {\n\t\t\t\tlong temp = temp[i];\n\t\
    \t\t\ttemp[i] = temp[j];\n\t\t\t\ttemp[j] = temp;\n\t\t\t}\n\treturn (temp.front()\
    \ > first && temp.front() > last);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpna_c41jy.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpna_c41jy.cpp:28:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018push_front\u2019\n   28 |    temp.push_front(i);\n\
    \      |         ^~~~~~~~~~\n/tmp/tmpna_c41jy.cpp:33:23: error: invalid types\
    \ \u2018long int[int]\u2019 for array subscript\n   33 |     long temp = temp[i];\n\
    \      |                       ^\n/tmp/tmpna_c41jy.cpp:34:11: error: invalid types\
    \ \u2018long int[int]\u2019 for array subscript\n   34 |     temp[i] = temp[j];\n\
    \      |           ^\n/tmp/tmpna_c41jy.cpp:34:21: error: invalid types \u2018\
    long int[int]\u2019 for array subscript\n   34 |     temp[i] = temp[j];\n    \
    \  |                     ^\n/tmp/tmpna_c41jy.cpp:35:11: error: invalid types \u2018\
    long int[int]\u2019 for array subscript\n   35 |     temp[j] = temp;\n      |\
    \           ^\n"
  stdout: ''
  timestamp: 1660129332
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Write your code\
    \ here\n    // For now it is easiest to start with the first element.\n    long\
    \ long res = l[0] - l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if\
    \ (res > l[i]-l[i]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp72y3069z: /tmp/tmp72y3069z.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  auto first = l.begin();\n  auto last = l.end();\n  auto cur = l.begin();\n\
    \  if (l.size() < 2)\n    return true;\n  while (true) {\n    if (*cur == *first)\
    \ {\n      if (first == last)\n        return true;\n      first = ++first;\n\
    \      last = cur;\n      cur = l.begin();\n      continue;\n    }\n    if (*cur\
    \ < *first)\n      return false;\n    cur++;\n    if (first == last)\n      return\
    \ true;\n  }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi3izvzx4: /tmp/tmpi3izvzx4.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return false;\n    long s = l[0], e = l[l.size()-1];\n    for (long i = 2; i\
    \ < l.size(); ++i) {\n        if (l[i] < e && l[i-1] > s) {\n            return\
    \ false;\n        }\n        s = l[i];\n        e = l[i-1];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphpjefnd0: /tmp/tmphpjefnd0.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129333
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < l[i - 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp7xx5_r_3: /tmp/tmp7xx5_r_3.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::vector<long>\
    \ sorted_l = l;\n    std::sort(sorted_l.begin(), sorted_l.end());\n    for (long\
    \ i = l.size() - 1; i >= 0; i--) {\n        if (sorted_l[i] < sorted_l[i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuk_4qbef: /tmp/tmpuk_4qbef.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() >\
    \ 0);\n    int i = 0;\n    long cur = l[0];\n    long prev = 0;\n    while (i\
    \ < l.size()) {\n        if (l[i] < cur) {\n            prev = l[i];\n       \
    \     i++;\n        } else {\n            if (cur > prev) {\n                return\
    \ true;\n            }\n            prev = cur;\n            i++;\n          \
    \  cur = l[i];\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp4at_2lz0: /tmp/tmp4at_2lz0.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int len = l.size();\n\
    \    for (int i = 1; i < len; i++) {\n        if (l[i] > l[i - 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpqf4zr3c1: /tmp/tmpqf4zr3c1.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long ans = 0;\n\
    \    long long n = l.size();\n    long long i = 0;\n    while(i < n) {\n     \
    \   ans = ans * 2 + l[i]; //ans += l[i]*l[i];\n        if(ans > n) {\n       \
    \     ans = n;\n            break;\n        }\n        i += 1;\n    }\n    //\
    \ ans = ans * 2 + 1; //ans += 1;\n    ans = (ans > n) ? ans : 0;\n    return ans\
    \ == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo2xfy3qq: /tmp/tmpo2xfy3qq.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return l.size() > 1 &&\n         (l.front() == l.back() || l.front()\
    \ > l.back());\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqi3wmb3l: /tmp/tmpqi3wmb3l.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  long n = l.size();\n\
    \  int m = 0, i = 1, j = 1;\n  int s = 1;\n  while (i < n) {\n    if (l[i] <=\
    \ l[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n      s++;\n    }\n\
    \    m++;\n  }\n  return (s == 0);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaym5k7_b: /tmp/tmpaym5k7_b.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 3)\
    \ return true;\n    sort(l.begin(), l.end());\n    return l.size() == 1 || l.front()\
    \ > l[l.size() - 1];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptf2gm8hl: /tmp/tmptf2gm8hl.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  for (long long i =\
    \ l.size() - 1; i >= 0; --i) {\n    if (l[i] < l[i + 1]) return false;\n    if\
    \ (l[i] > l[i + 1]) return true;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmptpedhba3: /tmp/tmptpedhba3.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long low = l.front();\n\
    \    long high = l.back();\n    for (size_t i = 0; i < l.size(); ++i) {\n    \
    \    long next = l[i];\n        if (next < low) {\n            low = next;\n \
    \       } else if (next > high) {\n            high = next;\n        }\n    }\n\
    \    if (low < high) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbi8htcga: /tmp/tmpbi8htcga.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long start =\
    \ l[0], end = l[l.size()-1];\n    long long startIdx = 0;\n    long long endIdx\
    \ = 0;\n    long long idx = 1;\n    while(idx < l.size()) {\n        if(l[idx]\
    \ > end) {\n            endIdx = idx;\n            break;\n        }\n       \
    \ if(l[idx] < start) {\n            startIdx = idx;\n            break;\n    \
    \    }\n        if(l[idx] == start) {\n            idx++;\n            continue;\n\
    \        }\n        if(l[idx] == end) {\n            idx++;\n            end =\
    \ l[idx];\n            continue;\n        }\n        if(l[idx] > end) {\n    \
    \        end = l[idx];\n        } else {\n            if(l[idx] < start) {\n \
    \               start = l[idx];\n            }\n        }\n        idx++;\n  \
    \  }\n    long long midIdx = ((endIdx - startIdx) > 0) ? endIdx : startIdx;\n\
    \    long long idx2 = midIdx;\n    bool isMonotonic = true;\n    while(idx2 <\
    \ l.size()) {\n        if(l[idx2] < start) {\n            isMonotonic = false;\n\
    \            break;\n        }\n        idx2++;\n    }\n    if(isMonotonic ==\
    \ true) {\n        return monotonic(l);\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 3)\
    \ {\n        return true;\n    }\n    long a = l.front();\n    long b = l.back();\n\
    \    for (int i = 2; i < l.size(); i++) {\n        long c = l[i];\n        if\
    \ (c < a) {\n            if (c < b) {\n                return false;\n       \
    \     }\n        }\n        else if (c > b) {\n            if (c > a) {\n    \
    \            return false;\n            }\n        }\n        else if (c == a)\
    \ {\n            if (c != b) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb4ypxo_x: /tmp/tmpb4ypxo_x.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    int mx = -1;\n    int lmin = 0;\n    int lmax = n;\n    for (int i = 0; i\
    \ < n; ++i) {\n        lmin = std::min(l[i], lmin);\n        lmax = std::max(l[i],\
    \ lmax);\n    }\n    // If there are two elements that are the same, the list\
    \ is monotonic.\n    if (lmin == lmax) {\n        return true;\n    }\n    //\
    \ Check if all the elements are smaller than the maximum element.\n    for (int\
    \ i = 0; i < n; ++i) {\n        if (l[i] > lmax) {\n            return false;\n\
    \        }\n    }\n    // Check all the elements except the minimum\n    for (int\
    \ i = 0; i < n - 1; ++i) {\n        int cmp = l[i+1] - l[i];\n        if (cmp\
    \ < 0 || l[i] != lmin) {\n            return false;\n        }\n        if (cmp\
    \ > 0) {\n            mx = std::max(mx, l[i]);\n        }\n    }\n    // All elements\
    \ are greater, so l[n - 1] must be smallest element.\n    return l[n-1] == mx;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7xunbin.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd7xunbin.cpp:16:35: error: no matching function for call\
    \ to \u2018min(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&,\
    \ int&)\u2019\n   16 |         lmin = std::min(l[i], lmin);\n      |         \
    \                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd7xunbin.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpd7xunbin.cpp:16:35: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n   16 |         lmin = std::min(l[i], lmin);\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd7xunbin.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpd7xunbin.cpp:16:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   16 |         lmin = std::min(l[i], lmin);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd7"
  stdout: ''
  timestamp: 1660129334
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int l = l.size();\n\
    \    for (int i = 0; i < l - 1; i++) {\n        if (l[i] < l[i + 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztf1bcw9.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpztf1bcw9.cpp:11:9: error: declaration of \u2018int l\u2019\
    \ shadows a parameter\n   11 |     int l = l.size();\n      |         ^\n/tmp/tmpztf1bcw9.cpp:11:15:\
    \ error: request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018int\u2019\n   11 |     int l = l.size();\n      |               ^~~~\n\
    /tmp/tmpztf1bcw9.cpp:13:16: error: invalid types \u2018int[int]\u2019 for array\
    \ subscript\n   13 |         if (l[i] < l[i + 1]) return false;\n      |     \
    \           ^\n/tmp/tmpztf1bcw9.cpp:13:27: error: invalid types \u2018int[int]\u2019\
    \ for array subscript\n   13 |         if (l[i] < l[i + 1]) return false;\n  \
    \    |                           ^\n"
  stdout: ''
  timestamp: 1660129334
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n < 2) return false;\n  for (int i = 1; i < n; ++i) {\n    if (l[i] > l[i\
    \ - 1]) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpictwti3m: /tmp/tmpictwti3m.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long curr = 0, max\
    \ = INT_MIN;\n    for (auto const & e : l) {\n        if (curr < e) {\n      \
    \      curr = e;\n        }\n        if (curr > max) {\n            max = curr;\n\
    \        }\n    }\n    return curr <= max;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpagqw5vt4: /tmp/tmpagqw5vt4.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    for (int i = 1; i\
    \ < l.size(); ++i) {\n        if ((l[i] < l[i - 1]) != (l[i] > l[i - 1])) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0zb_nmpp: /tmp/tmp0zb_nmpp.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 1) return false;\n    int i = 0;\n    int j = 0;\n    for (int k\
    \ = 0; k < n; ++k) {\n        if (l[k] > l[j]) {\n            i++;\n        }\
    \ else if (l[k] < l[j]) {\n            j++;\n        } else if (l[k] == l[j])\
    \ {\n            if (i < j) i++;\n            if (i < j) j++;\n        }\n   \
    \ }\n    return i == n;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1e__25b_: /tmp/tmp1e__25b_.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Code here...\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3mmlt72k: /tmp/tmp3mmlt72k.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Return True is\
    \ list elements are monotonically increasing or decreasing.\n    assert(l.size()\
    \ >= 2);\n    if (l[0] < l[1]) {\n        for (auto i = 2; i < l.size(); i++)\
    \ {\n            if (l[i - 1] <= l[i]) {\n                return false;\n    \
    \        }\n        }\n        return true;\n    } else {\n        for (auto i\
    \ = 2; i < l.size(); i++) {\n            if (l[i - 1] >= l[i]) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk_mryq49: /tmp/tmpk_mryq49.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 3)\n\
    \        return false;\n\n    long long a = (l[0] - l[1]), b = (l[1] - l[2]),\
    \ c = (l[2] - l[0]);\n\n    if (a < b) return true;\n    if (a > b) return false;\n\
    \n    return (b < c) ? true : false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0vy76wga: /tmp/tmp0vy76wga.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int start = 0;\n\
    \    int end = l.size() - 1;\n    while (start <= end) {\n        int mid = start\
    \ + (end - start) / 2;\n        if (l[mid] <= l[start]) {\n            end = mid\
    \ - 1;\n        } else if (l[mid] >= l[end]) {\n            start = mid + 1;\n\
    \        } else {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphtd0239i: /tmp/tmphtd0239i.cpp:30: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tlong min = *std::min_element(l.begin(),\
    \ l.end());\n\tlong max = *std::max_element(l.begin(), l.end());\n\treturn min\
    \ < max;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp12zrrfy3: /tmp/tmp12zrrfy3.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long largest = *max_element(l.begin(),\
    \ l.end()); // The max element in the list.\n    long smallest = *min_element(l.begin(),\
    \ l.end()); // The min element in the list.\n    bool increasing = largest > smallest;\n\
    \    return increasing && largest - smallest <= 1; // True iff all the elements\
    \ are increasing or decreasing.\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5hi8tbr2: /tmp/tmp5hi8tbr2.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] > l[i - 1])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp7prt8ivg: /tmp/tmp7prt8ivg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long l = l[0];\n\
    \    long l2 = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        l2 = std::max(l2,\
    \ l[i]);\n    }\n    bool ret = (l == l2);\n    return ret;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8lm7n7zm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8lm7n7zm.cpp:11:10: error: declaration of \u2018long int\
    \ l\u2019 shadows a parameter\n   11 |     long l = l[0];\n      |          ^\n\
    /tmp/tmp8lm7n7zm.cpp:11:17: error: invalid types \u2018long int[int]\u2019 for\
    \ array subscript\n   11 |     long l = l[0];\n      |                 ^\n/tmp/tmp8lm7n7zm.cpp:12:18:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n   12 |\
    \     long l2 = l[0];\n      |                  ^\n/tmp/tmp8lm7n7zm.cpp:13:27:\
    \ error: request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   13 |     for (int i = 1; i < l.size(); i++) {\n\
    \      |                           ^~~~\n/tmp/tmp8lm7n7zm.cpp:14:30: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   14 |         l2 = std::max(l2,\
    \ l[i]);\n      |                              ^\n"
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // If empty list,\
    \ return False.\n    if (l.size() == 0) return false;\n    long max = l[0];\n\
    \    for (long i : l) {\n        if (i > max) return false;\n        max = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1eccrdrs: /tmp/tmp1eccrdrs.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long prev = l[0];\n\
    \    long curr = l[0];\n    for(int i = 1; i < l.size(); ++i) {\n        if(l[i]\
    \ < prev) {\n            return false;\n        }\n        prev = curr;\n    \
    \    curr = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp43sxxthj: /tmp/tmp43sxxthj.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129335
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return false;\n    long a = l[0], b = l[0], c = l[0];\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > b) a = l[i];\n        if (l[i] < c) b\
    \ = l[i];\n        c = l[i];\n    }\n    if (a > b) return true;\n    if (b >\
    \ c) return true;\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp11o6vrhn: /tmp/tmp11o6vrhn.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ {\n        return false;\n    }\n    int lower = 0, upper = l.size() - 1;\n\
    \    int cmp = l[upper] - l[lower];\n    while (lower <= upper - 1) {\n      \
    \  int mid = (lower + upper) / 2;\n        if (l[mid] < l[upper]) {\n        \
    \    lower = mid + 1;\n        } else {\n            upper = mid - 1;\n      \
    \  }\n        cmp = l[upper] - l[lower];\n        if (cmp != 0) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpup_tb6ek: /tmp/tmpup_tb6ek.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int left_index =\
    \ 0;\n    int right_index = l.size() - 1;\n    int left_value = l[left_index];\n\
    \    int right_value = l[right_index];\n    while (left_index != right_index)\
    \ {\n        if (left_value > right_value) {\n            right_index--;\n   \
    \         right_value = l[right_index];\n        } else {\n            left_index++;\n\
    \            left_value = l[left_index];\n        }\n    }\n    return (left_value\
    \ == right_value);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_1ets23t: /tmp/tmp_1ets23t.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int maxValue\
    \ = 0, minValue = 0, middleValue, leftValue, rightValue;\n    for(std::size_t\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > maxValue) {\n            maxValue\
    \ = l[i];\n        }\n        if(l[i] < minValue) {\n            minValue = l[i];\n\
    \        }\n    }\n\n    for(std::size_t i = 0; i < l.size() - 1; i++) {\n   \
    \     middleValue = l[i];\n        leftValue = l[i+1];\n\n        if(leftValue\
    \ >= middleValue) {\n            return false;\n        }\n\n        if(middleValue\
    \ >= leftValue) {\n            return true;\n        }\n\n        if(middleValue\
    \ <= leftValue) {\n            return false;\n        }\n    }\n\n    if(minValue\
    \ < maxValue) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa2t_jqks: /tmp/tmpa2t_jqks.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return std::is_sorted(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpk8887j76: /tmp/tmpk8887j76.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Sort list\n  \
    \  std::sort(l.begin(), l.end(), [](long a, long b) { return a < b; });\n\n  \
    \  // If first value is greater than last, then return true\n    if (l[0] > l[l.size()\
    \ - 1]) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpapcjdjvw: /tmp/tmpapcjdjvw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    for (int i = 1; i\
    \ < l.size(); ++i) {\n        for (int j = i; j > 0; --j) {\n            if (l[j]\
    \ < l[j - 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxjgvpd6c: /tmp/tmpxjgvpd6c.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if(l.size() == 0)\
    \ return false;\n    std::sort(l.begin(), l.end());\n    long curr = *l.begin();\n\
    \    long prev = (curr == 1) ? 0 : *std::prev(l.begin());\n    for(long i=l.size()-1;\
    \ i > 0; i--) {\n        long curr = *l.begin();\n        if(curr < prev) {\n\
    \            l.insert(l.begin(), curr);\n            return true;\n        }\n\
    \        if(curr > prev) {\n            l.insert(l.begin(), curr);\n         \
    \   return true;\n        }\n        prev = curr;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpom16x0jx: /tmp/tmpom16x0jx.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long temp;\n    if\
    \ (l.size() == 0) {\n        return true;\n    }\n    if (l.size() == 1) {\n \
    \       return l.front()==l.back();\n    }\n    bool flag = false;\n    temp =\
    \ l.front();\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l.at(i)\
    \ > temp) {\n            temp = l.at(i);\n        }\n    }\n    if (temp == l.back())\
    \ {\n        return false;\n    }\n    flag = true;\n    temp = l.front();\n \
    \   for (int i = 1; i < l.size() - 1; i++) {\n        if (l.at(i) < temp) {\n\
    \            temp = l.at(i);\n        }\n    }\n    if (temp == l.back()) {\n\
    \        return false;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpk91q9us_: /tmp/tmpk91q9us_.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // If the first element\
    \ is already smaller than the second,\n    // then there is no need to check the\
    \ remaining elements.\n    if (l[0] < l[1]) {\n        return false;\n    }\n\n\
    \    // Sort the elements decreasingly.\n    std::sort(l.begin() + 1, l.end());\n\
    \n    // For every element other than the first,\n    // compare it against the\
    \ first.\n    for (long i = 0; i < l.size() - 1; ++i) {\n        if (l[i] > l[i\
    \ + 1]) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5tqe6udk: /tmp/tmp5tqe6udk.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    assert(l.size() >=\
    \ 2);\n    int l = l[0], r = l[1], m;\n    for (int i = 2; i < l.size(); i++)\
    \ {\n        m = l - r;\n        if (m == 0)\n            return true;\n     \
    \   if (m == l) {\n            l = r + l[i];\n        }\n        else {\n    \
    \        r = r + l[i];\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbx2gscx4.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbx2gscx4.cpp:12:9: error: declaration of \u2018int l\u2019\
    \ shadows a parameter\n   12 |     int l = l[0], r = l[1], m;\n      |       \
    \  ^\n/tmp/tmpbx2gscx4.cpp:12:16: error: invalid types \u2018int[int]\u2019 for\
    \ array subscript\n   12 |     int l = l[0], r = l[1], m;\n      |           \
    \     ^\n/tmp/tmpbx2gscx4.cpp:13:27: error: request for member \u2018size\u2019\
    \ in \u2018l\u2019, which is of non-class type \u2018int\u2019\n   13 |     for\
    \ (int i = 2; i < l.size(); i++) {\n      |                           ^~~~\n/tmp/tmpbx2gscx4.cpp:14:9:\
    \ error: \u2018m\u2019 was not declared in this scope\n   14 |         m = l -\
    \ r;\n      |         ^\n/tmp/tmpbx2gscx4.cpp:14:17: error: \u2018r\u2019 was\
    \ not declared in this scope\n   14 |         m = l - r;\n      |            \
    \     ^\n/tmp/tmpbx2gscx4.cpp:18:24: error: invalid types \u2018int[int]\u2019\
    \ for array subscript\n   18 |             l = r + l[i];\n      |            \
    \            ^\n/tmp/tmpbx2gscx4.cpp:21:24: error: invalid types \u2018int[int]\u2019\
    \ for array subscript\n   21 |             r = r + l[i];\n      |            \
    \            ^\n"
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long arr[] =\
    \ {0LL, 0};\n    for (long long i = 0; i < l.size(); i++) {\n        arr[i] =\
    \ l[i];\n    }\n    long long max_val = arr[0], min_val = arr[0];\n    for (long\
    \ long i = 1; i < sizeof(arr); i++) {\n        if (arr[i] > max_val) {\n     \
    \       max_val = arr[i];\n        } else if (arr[i] < min_val) {\n          \
    \  min_val = arr[i];\n        }\n    }\n    if (max_val >= min_val) {\n      \
    \  return false;\n    } else {\n        return true;\n    }\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: '*** stack smashing detected ***: terminated

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < l[i - 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp96km2hmi: /tmp/tmp96km2hmi.cpp:22: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n == 0) return false;\n  if (n == 1) return l[0] <= l[1];\n  long c = l[0],\
    \ s = l[1];\n  for (int i = 2; i < n; ++i) {\n    if (l[i] < s) {\n      c = s;\n\
    \      s = l[i];\n    } else if (l[i] > s) {\n      return false;\n    }\n  }\n\
    \  return l[0] == c;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa8a93t8a: /tmp/tmpa8a93t8a.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // Find first and\
    \ last element in array.\n    long first = std::numeric_limits<long>::max();\n\
    \    long last = std::numeric_limits<long>::min();\n    // Search for first element\
    \ and update range.\n    for (long element : l)\n        if (element < first)\n\
    \            first = element;\n        // Search for last element and update range.\n\
    \        for (long element : l)\n            if (element > last)\n           \
    \     last = element;\n    // Return True if all elements are in the range [first,\
    \ last]\n    return first <= last;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0pqasid9: /tmp/tmp0pqasid9.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ return false;\n    long mid = l[0] + l[l.size() / 2];\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] < mid) return false;\n        if (l[i]\
    \ > mid) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpjkppa73v: /tmp/tmpjkppa73v.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  for (long i = 1; i\
    \ < l.size(); i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    } else\
    \ if (l[i] > l[i - 1]) {\n      return true;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuogac9jh: /tmp/tmpuogac9jh.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    sort(l.begin(), l.end());\n\
    \    return (l.size() < 2) ? false : (l[0] != l[l.size() - 1]);\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprix6wich: /tmp/tmprix6wich.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n < 3) {\n    return false;\n  }\n  long prev = 0;\n  for (int i = 0; i\
    \ < n - 1; ++i) {\n    long curr = l[i];\n    int next = i + 1;\n    if (curr\
    \ > l[next]) {\n      int tmp = next;\n      next = i;\n      i = tmp;\n    }\n\
    \    if (curr < prev) {\n      return false;\n    }\n    prev = curr;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm73btdrg: /tmp/tmpm73btdrg.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return std::is_sorted(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpk8887j76: /tmp/tmpk8887j76.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    int i = 0;\n    for (int j = i; j < n; j++) {\n        if (l[i] > l[j]) {\n\
    \            return false;\n        }\n        i++;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi9t7m8fn: /tmp/tmpi9t7m8fn.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n        long curr = 0;\n\
    \        long prev = 0;\n        for (long i : l) {\n                assert(curr\
    \ < prev);\n                prev = curr;\n                curr = i;\n        }\n\
    \        bool ret = (curr > prev);\n        return ret;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpbss2wixg: /tmp/tmpbss2wixg.cpp:14: bool monotonic(std::vector<long int>):
    Assertion `curr < prev'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long s = *l.begin();\n\
    \    for (int i = 1; i < l.size(); i++)\n        if (*l.begin() < *(l.begin()\
    \ + i)) return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpi192svb4: /tmp/tmpi192svb4.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long prev = l[0];\n\
    \    for (long i : l)\n        if (i < prev)\n            return false;\n    \
    \    prev = i;\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhqi02_9.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplhqi02_9.cpp:15:16: error: \u2018i\u2019 was not declared\
    \ in this scope\n   15 |         prev = i;\n      |                ^\n"
  stdout: ''
  timestamp: 1660129336
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return false;\n    long a = l[0], b = l[1], c, d;\n    for (int i = 2; i < l.size();\
    \ i++) {\n        c = a + l[i];\n        d = b + l[i - 1];\n        if (c == d)\
    \ return true;\n        if (c < d) return false;\n        a = b;\n        b =\
    \ c;\n    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw47e4obd: /tmp/tmpw47e4obd.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    auto it = l.begin();\n\
    \    auto last = l.begin();\n    long c = 0;\n    for (; it != l.end(); it++,\
    \ last = it) {\n        if (it == last)\n            return false;\n        c\
    \ = std::max(c, *it);\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0,\
    \ -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmpdcjtkwbm: /tmp/tmpdcjtkwbm.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    // check input size\
    \ first\n    if (l.size() < 2) {\n        return false;\n    }\n    // check first\
    \ and last element\n    if (l[0] < l[1]) {\n        return false;\n    }\n   \
    \ // reverse list and check if first element is less\n    for (size_t i = l.size()\
    \ - 1; i > 1; i--) {\n        if (l[i] < l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    // if all elements are equal, return true\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7hp1lbrr: /tmp/tmp7hp1lbrr.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long prev_val = std::numeric_limits<long>::max();\n\
    \    long cur_val = l[0];\n    long count = 1;\n    for(int i = 1; i < l.size();\
    \ i++) {\n        if(l[i] < prev_val) {\n            return false;\n        }\
    \ else if(cur_val < l[i]) {\n            count++;\n        } else {\n        \
    \    count--;\n        }\n        prev_val = cur_val;\n        cur_val = l[i];\n\
    \    }\n    if(prev_val < cur_val) {\n        return true;\n    } else {\n   \
    \     return false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpefl7xid4: /tmp/tmpefl7xid4.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    // If there is no element in the list, then return True\n    if (n == 0)\
    \ {\n        return true;\n    }\n    // Find the max element in list\n    long\
    \ maxval = -1LL;\n    for (int i = 0; i < n; i++) {\n        // Find the max element\
    \ in sublist\n        if (maxval < l[i]) {\n            maxval = l[i];\n     \
    \   }\n    }\n    // If the max element of list is not in monotonic order\n  \
    \  if (maxval < 0) return false;\n\n    for (int i = 0; i < n; i++) {\n      \
    \  // If the max element of list is not in monotonic order\n        if (l[i] >\
    \ maxval) return false;\n    }\n    // If the max element of list is in monotonic\
    \ order\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_2uyymzg: /tmp/tmp_2uyymzg.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tlong long size = l.size();\n\
    \tif (size <= 1) return true;\n\tlong long mid = size >> 1;\n\tlong long cur =\
    \ l[0], midval = cur;\n\tfor (long long i = 1, j = mid; i <= size; i++, j++) {\n\
    \t\tif (l[i] > cur) {\n\t\t\tcur = l[i];\n\t\t\tmidval = cur;\n\t\t}\n\t\tif (l[j]\
    \ < midval) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc18cpvft: /tmp/tmpc18cpvft.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long long int arr[l[0].size()];\n\
    \    for (int i = 0; i < l[0].size(); i++) {\n        arr[i] = l[0][i];\n    }\n\
    \    for (int i = 1; i < l.size(); i++) {\n        for (int j = 0; j < l[i].size();\
    \ j++) {\n            if (arr[j] < arr[j - 1]) {\n                return false;\n\
    \            }\n        }\n        for (int j = 0; j < l[i].size(); j++) {\n \
    \           arr[j] = l[i][j];\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksqaf8gx.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpksqaf8gx.cpp:11:28: error: request for member \u2018size\u2019\
    \ in \u2018l.std::vector<long int>::operator[](0)\u2019, which is of non-class\
    \ type \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   11 |     long long int arr[l[0].size()];\n  \
    \    |                            ^~~~\n/tmp/tmpksqaf8gx.cpp:12:30: error: request\
    \ for member \u2018size\u2019 in \u2018l.std::vector<long int>::operator[](0)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   12 |     for\
    \ (int i = 0; i < l[0].size(); i++) {\n      |                              ^~~~\n\
    /tmp/tmpksqaf8gx.cpp:13:9: error: \u2018arr\u2019 was not declared in this scope\n\
    \   13 |         arr[i] = l[0][i];\n      |         ^~~\n/tmp/tmpksqaf8gx.cpp:13:24:\
    \ error: invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type {aka long int}[int]\u2019 for array subscript\n   13 |\
    \         arr[i] = l[0][i];\n      |                        ^\n/tmp/tmpksqaf8gx.cpp:16:34:\
    \ error: request for member \u2018size\u2019 in \u2018l.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   16 |      \
    \   for (int j = 0; j < l[i].size(); j++) {\n      |                         \
    \         ^~~~\n/tmp/tmpksqaf8gx.cpp:17:17: error: \u2018arr\u2019 was not declared\
    \ in this scope\n   17 |             if (arr[j] < arr[j - 1]) {\n      |     \
    \            ^~~\n/tmp/tmpksqaf8gx.cpp:21:34: error: request for member \u2018\
    size\u2019 in \u2018l.std::vector<long int>::operator[](((std::vector<long int>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   21 |      \
    \   for (int j = 0; j < l[i].size(); j++) {\n      |                         \
    \         ^~~~\n/tmp/tmpksqaf8gx.cpp:22:13: err"
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n; ++i) {\n        if (l[i - 1] > l[i] || (i == 1 &&\
    \ l[i - 1] == l[i])) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq2tt9cr7: /tmp/tmpq2tt9cr7.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129338
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n\tlong long ans = -l[0];\n\
    \tfor (size_t i = 0; i < l.size(); i++) {\n\t\tans = max(ans, -l[i]);\n\t}\n\t\
    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnyo2czc.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmnyo2czc.cpp:13:9: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |   ans = max(ans,\
    \ -l[i]);\n      |         ^~~\n      |         std::max\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmnyo2czc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() < 2)\n\
    \        return false;\n    int low = l[0];\n    int high = l[0];\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        int tmp = l[i];\n        if (tmp < low)\n\
    \            low = tmp;\n        if (tmp > high)\n            high = tmp;\n  \
    \  }\n    long mid = (low + high) / 2;\n    return high - mid > mid - low;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph4j__n46: /tmp/tmph4j__n46.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < l[i - 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp96km2hmi: /tmp/tmp96km2hmi.cpp:22: int main(): Assertion `candidate((std::vector<long>({4,
    1, 0, -10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 2)\
    \ return true;\n    auto prev = std::prev(l.begin());\n    auto curr = l.begin()\
    \ + 1;\n    return std::equal(curr, l.end(), prev);\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2, 4, 10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4, 1, 1,\
    \ 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60})))\
    \ == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n\
    }\n"
  status: Exception
  stderr: 'tmp75oe3_8l: /tmp/tmp75oe3_8l.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = l.size() - 1; i >= 0; --i)\n        if (l[i] <\
    \ l[i - 1])\n            return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4, 20})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10}))) == (false));\n\
    \    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 2,\
    \ 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9, 9, 9, 9})))\
    \ == (true));\n}\n"
  status: Exception
  stderr: 'tmpj2sqca_v: /tmp/tmpj2sqca_v.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,
    2, 4, 10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long first = l.front();\n\
    \    long last = l.back();\n\n    if (first > last) return true;\n    if (first\
    \ < last) return false;\n\n    if (l.size() == 2) return false;\n\n    long mid\
    \ = l / 2;\n    return monotonic(l.begin() + mid, l.begin() + mid + 1) && monotonic(l.begin()\
    \ + mid, l.end());\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 4,\
    \ 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4, 10})))\
    \ == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10}))) == (true));\n\
    \    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 5, 60}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 60}))) == (true));\n    assert(candidate((std::vector<long>({9,\
    \ 9, 9, 9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgypeqjvs.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgypeqjvs.cpp:19:18: error: no match for \u2018operator/\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   19 |     long mid = l / 2;\n      |                ~ ^ ~\n      |        \
    \        |   |\n      |                |   int\n      |                std::vector<long\
    \ int>\nIn file included from /usr/include/c++/9/ccomplex:39,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n             \
    \    from /tmp/tmpgypeqjvs.cpp:2:\n/usr/include/c++/9/complex:421:5: note: candidate:\
    \ \u2018template<class _Tp> std::complex<_Tp> std::operator/(const std::complex<_Tp>&,\
    \ const std::complex<_Tp>&)\u2019\n  421 |     operator/(const complex<_Tp>& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:421:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgypeqjvs.cpp:19:20:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   19 |     long mid = l / 2;\n      |                    ^\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgypeqjvs.cpp:2:\n/usr/include/c++/9/complex:430:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  430 |     operator/(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:430:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgypeqjvs.cpp:19:20:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   19 |     long mid = l / 2;\n      |                    ^\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgypeqjvs.cpp:2:\n/usr/include/c++/9/complex:439:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator/(const\
    \ _Tp&, const std::comple"
  stdout: ''
  timestamp: 1660129337
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n\
    // True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0,\
    \ -10])\n// True\nbool monotonic(std::vector<long> l) {\n    long curr = 0;\n\
    \    long prev = 0;\n    int i = 1;\n    bool res = false;\n    for(long &x: l)\n\
    \    {\n        if(x > prev)\n        {\n            res = true;\n           \
    \ break;\n        }\n        prev = curr;\n        curr = i;\n        i *= 2;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 4, 10}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 4, 20}))) == (true));\n    assert(candidate((std::vector<long>({1, 20, 4,\
    \ 10}))) == (false));\n    assert(candidate((std::vector<long>({4, 1, 0, -10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({4, 1, 1, 0}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 2, 5, 60}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 60}))) == (true));\n\
    \    assert(candidate((std::vector<long>({9, 9, 9, 9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqn94u238: /tmp/tmpqn94u238.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    20, 4, 10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129337
