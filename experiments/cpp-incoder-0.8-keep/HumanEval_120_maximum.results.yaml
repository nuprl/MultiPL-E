name: HumanEval_120_maximum
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if(arr.size() <= k) \n        return arr;\n    long i =\
    \ 0, max_idx = 0;\n    std::vector<long> max_arr(k, 0);\n    for(; i < k; i++)\
    \ {\n        max_idx = std::max(arr[i], max_idx);\n        max_arr[i] = max_idx;\n\
    \    }\n    std::vector<long> res(max_idx);\n    for(; i < arr.size(); i++) {\n\
    \        res[max_arr[arr[i]]++] = arr[i];\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpupj4cuu5: /tmp/tmpupj4cuu5.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() >= k);\n    std::vector<long> res;\n \
    \   long max_num = arr[0], max_ind = 0;\n    for (long i = 1; i < k; i++) {\n\
    \        if (arr[i] > max_num) {\n            max_num = arr[i];\n            max_ind\
    \ = i;\n        }\n    }\n    res.push_back(max_num);\n    long curr_ind = max_ind;\n\
    \    for (long i = 1; i < k; i++) {\n        long num = arr[i];\n        long\
    \ max_ind = 0;\n        for (long j = curr_ind; j < k; j++) {\n            if\
    \ (arr[j] > num) {\n                num = arr[j];\n                max_ind = j;\n\
    \            }\n        }\n        res.push_back(num);\n        curr_ind = max_ind;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqz79_86v: /tmp/tmpqz79_86v.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> v;\n    for\
    \ (long i = 0; i < k; ++i) {\n        v.push_back(arr[i]);\n    }\n\n    sort(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzbrajudn: /tmp/tmpzbrajudn.cpp:31: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    std::vector<long> max(n);\n   \
    \ long max = arr[0];\n    long i;\n    long count = 0;\n    \n    for(i = 0; i\
    \ < n; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     count = 1;\n        } else {\n            count++;\n        }\n        if((k\
    \ - count) < 0) {\n            max = arr[i];\n            count = 1;\n       \
    \ }\n    }\n    \n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgd_ze_yt.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpgd_ze_yt.cpp:21:10: error: conflicting declaration\
    \ \u2018long int max\u2019\n   21 |     long max = arr[0];\n      |          ^~~\n\
    /tmp/tmpgd_ze_yt.cpp:20:23: note: previous declaration as \u2018std::vector<long\
    \ int> max\u2019\n   20 |     std::vector<long> max(n);\n      |             \
    \          ^~~\n/tmp/tmpgd_ze_yt.cpp:26:19: error: no match for \u2018operator>\u2019\
    \ (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019} and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         if(arr[i] > max) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgd_ze_yt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1081:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgd_ze_yt.cpp:26:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   26 |         if(arr[i] > max) {\n      |    \
    \                 ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgd_ze_yt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> result;\n    auto\
    \ m = arr.size();\n    if(m > k) {\n        \n        return result;\n    }\n\
    \    auto n = std::min(m, k);\n    \n    result.assign(n - 1, arr[0]);\n    for(auto\
    \ i = 1; i < n; i++) {\n        auto maxi = std::max_element(arr.begin() + i,\
    \ arr.end());\n        for(auto j = i; j > 0; j--) {\n            if(arr[j-1]\
    \ < maxi) {\n                auto temp;\n                temp = arr[j-1];\n  \
    \              arr[j-1] = maxi;\n                maxi = temp;\n            }\n\
    \            arr[j] = maxi;\n        }\n        result.push_back(maxi);\n    }\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyk7zh1h8.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpyk7zh1h8.cpp:26:27: error: no matching function\
    \ for call to \u2018min(long unsigned int&, long int&)\u2019\n   26 |     auto\
    \ n = std::min(m, k);\n      |                           ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyk7zh1h8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyk7zh1h8.cpp:26:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long unsigned int\u2019 and \u2018long int\u2019)\n   26 |     auto n = std::min(m,\
    \ k);\n      |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomple"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::iota(arr.begin(), arr.end(), 0);\n    auto it = std::max_element(arr.begin(),\
    \ arr.end(), [&](const long &l, const long &r){\n        return l > r;\n    });\n\
    \    std::vector<long> result;\n    for (long i = 0; i < k; ++i) {\n        long\
    \ index = it - arr.begin();\n        result.push_back(arr[index]);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5gw9j3th: /tmp/tmp5gw9j3th.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long max_size = 0, min_size = 0, max = 0;\n    for (auto\
    \ i = 0; i < k; i++) {\n        if (max_size == 0) {\n            max_size = arr[i];\n\
    \        } else {\n            if (arr[i] > max) {\n                max_size =\
    \ arr[i];\n                max = arr[i];\n            } else if (arr[i] == max)\
    \ {\n                max_size = max_size + (arr[i] - max);\n            } else\
    \ {\n                max_size = max_size;\n                max = arr[i];\n   \
    \         }\n        }\n    }\n    for (auto i = 0; i < k; i++) {\n        if\
    \ (min_size == 0) {\n            min_size = arr[i];\n        } else {\n      \
    \      if (arr[i] < min) {\n                min_size = arr[i];\n             \
    \   min = arr[i];\n            } else if (arr[i] == min) {\n                min_size\
    \ = min_size + (arr[i] - min);\n            } else {\n                min_size\
    \ = min_size;\n                min = arr[i];\n            }\n        }\n    }\n\
    \    std::vector<long> ans;\n    for (auto i = 0; i < k; i++) {\n        ans.push_back(max);\n\
    \        if (min_size != 0) ans.push_back(min);\n        if (max_size != 0) ans.push_back(max_size);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzhu0zfd.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpdzhu0zfd.cpp:39:26: error: \u2018min\u2019 was\
    \ not declared in this scope; did you mean \u2018std::min\u2019?\n   39 |    \
    \         if (arr[i] < min) {\n      |                          ^~~\n      | \
    \                         std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzhu0zfd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpdzhu0zfd.cpp:53:42: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   53 |         if (min_size != 0) ans.push_back(min);\n      |             \
    \                             ^~~\n      |                                   \
    \       std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdzhu0zfd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    long m = 1;\n    std::vector<long>\
    \ res;\n    while (n-- > 0) {\n        m = std::max(m, arr[n]);\n        res.push_back(m);\n\
    \    }\n    \n    // k should be less than or equal to n \n    assert(k <= n);\n\
    \n    // sort from left to right by rearranging arr into res in ascending order\n\
    \    // while deleting duplicates\n    long pos = 0;\n    long count = 1;\n  \
    \  while (res.size() > k) {\n        long max = 0;\n        long cur = 0;\n  \
    \      while (pos < res.size()) {\n            cur = res[pos];\n            if\
    \ (count < k) {\n                if (max < cur) {\n                    max = cur;\n\
    \                }\n            }\n            ++count;\n            ++pos;\n\
    \        }\n        res.erase(res.begin() + pos);\n        res.insert(res.end(),\
    \ max + 1, res[pos]);\n    }\n    \n    return res;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8gzjmpu1: /tmp/tmp8gzjmpu1.cpp:28: std::vector<long int> maximum(std::vector<long\
    \ int>, long int): Assertion `k <= n' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n\tstd::vector<long> ans;\n\tfor (long i = 0; i < arr.size()\
    \ - k + 1; i++) {\n\t\tlong cur_max = arr[i];\n\t\tfor (long j = i + 1; j < i\
    \ + k; j++)\n\t\t\tif (arr[j] > cur_max)\n\t\t\t\tcur_max = arr[j];\n\t\tans.push_back(cur_max);\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7n50eec2: /tmp/tmp7n50eec2.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> res(arr.size());\n \
    \   long long max = 0;\n    for (long i = 0, j = 0; i < arr.size(); i++, j++)\
    \ {\n        if (j > k && max < arr[i]) {\n            max = arr[i];\n       \
    \ }\n        else if (max < arr[i]) {\n            res[i] = max;\n           \
    \ max = arr[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5icm0s6e: /tmp/tmp5icm0s6e.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if(arr.size() <= k) return arr;\n    long currMax = std::numeric_limits<long\
    \ int>::min();\n    for(long i = 0; i < k; ++i) {\n        if(currMax < arr[i])\
    \ currMax = arr[i];\n    }\n    std::vector<long> ans;\n    for(long i = 0; i\
    \ < k; ++i) {\n        if(currMax < arr[i]) ans.push_back(arr[i]);\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq04_p6g2: /tmp/tmpq04_p6g2.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n   std::vector<long> output(k);\n   long m = INT_MIN;\n   long\
    \ n = 0;\n   for (long i = 0; i < arr.size(); i++)\n   {\n      assert(arr[i]\
    \ < m);\n      if (arr[i] > m)\n      {\n         m = arr[i];\n      }\n   }\n\
    \   if (k == 0)\n   {\n      std::cout << \"Output: \" << m << std::endl;\n  \
    \    return {m};\n   }\n   \n   for (long i = 0; i < arr.size(); i++)\n   {\n\
    \      if (arr[i] == m)\n         output[n] = arr[i];\n      else\n      {\n \
    \        assert(arr[i] < m);\n         assert(m != 0 && output[k-1] <= arr[i]);\n\
    \         m = arr[i];\n         output[n] = arr[i];\n         n++;\n      }\n\
    \   }\n   std::cout << \"Output: \" << output.size() << std::endl;\n   return\
    \ output;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp55z1a75x: /tmp/tmp55z1a75x.cpp:24: std::vector<long int> maximum(std::vector<long\
    \ int>, long int): Assertion `arr[i] < m' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max_arr;\n    std::sort(arr.begin(),\
    \ arr.end());\n    max_arr.insert(max_arr.end(), std::max_element(arr.begin(),\
    \ arr.end()) - arr.begin(), arr.end());\n    return max_arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqwuoo8wc.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpqwuoo8wc.cpp:22:100: error: no matching function\
    \ for call to \u2018std::vector<long int>::insert(std::vector<long int>::iterator,\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::difference_type,\
    \ std::vector<long int>::iterator)\u2019\n   22 |     max_arr.insert(max_arr.end(),\
    \ std::max_element(arr.begin(), arr.end()) - arr.begin(), arr.end());\n      |\
    \                                                                            \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqwuoo8wc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:130:5:\
    \ note:   candidate expects 2 arguments, 3 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // TODO: Write your code here\n    long n=arr.size();\n\
    \    std::vector<long> ans;\n    for(int i=0;i<n;i++){\n        ans.push_back(arr[i]);\n\
    \    }\n    ans.sort(std::greater<int>());\n    long m=ans.size()-k+1;\n    for(int\
    \ i=k;i<n;i++){\n        ans[i]=ans[i-m];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ywefr5w.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp9ywefr5w.cpp:25:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   25 |     ans.sort(std::greater<int>());\n\
    \      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long res = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   res = max(res, arr[i]);\n    }\n    std::vector<long> v(k, res);\n    for\
    \ (long i = 0; i < k; i++) {\n        for (long j = i + 1; j < k; j++) {\n   \
    \         if (v[j] < v[i]) {\n                v[j] = v[i];\n            }\n  \
    \      }\n    }\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprbgwgjjp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmprbgwgjjp.cpp:21:15: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   21 |    \
    \     res = max(res, arr[i]);\n      |               ^~~\n      |            \
    \   std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprbgwgjjp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  assert(arr.size() >= k);\n  std::vector<long> res;\n  res.reserve(arr.size());\n\
    \  long maxi = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] >\
    \ arr[maxi]) {\n      maxi = i;\n    }\n  }\n  for (long i = maxi; i < arr.size();\
    \ i++) {\n    res.push_back(arr[i]);\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyckohius: /tmp/tmpyckohius.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if(arr.size() < k){\n        assert(false);\n        return\
    \ std::vector<long>();\n    }\n    long long sum = 0;\n    std::vector<long> result;\n\
    \    for(auto i:arr){\n        sum += i;\n    }\n    result.push_back(sum);\n\
    \    for(long long i = k; i <= arr.size(); i++){\n        sum = 0;\n        for(auto\
    \ i:arr){\n            sum += i;\n        }\n        if(sum > result[k]){\n  \
    \          assert(false);\n            return std::vector<long>();\n        }\n\
    \        sum += arr[i];\n        result.push_back(sum);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpf7hu0x8p: /tmp/tmpf7hu0x8p.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    assert(arr.size() <= k);\n    std::map<long,long>\
    \ m;\n    for(long i : arr)\n        m[i] = m[i] > i ? m[i] : i;\n\n    std::map<long,long>::iterator\
    \ it;\n    it = m.begin();\n    for(long i = 0; i < k; i++){\n        it = m.upper_bound(it->first);\n\
    \        long tmp = it->second;\n        m.erase(it);\n        m.insert(std::pair<long,long>(\
    \ tmp, std::min(tmp, it->first) ) );\n    }\n\n    std::vector<long> ans;\n  \
    \  for(it = m.begin(); it != m.end(); it++){\n        ans.push_back(it->second);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmptbocrt9q': free(): invalid pointer: 0x00007fffe52b2b18\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2b392141f329]\n\
    /tmp/tmptbocrt9q[0x405134]\n/tmp/tmptbocrt9q[0x404eb5]\n/tmp/tmptbocrt9q[0x40480d]\n\
    /tmp/tmptbocrt9q[0x4039d2]\n/tmp/tmptbocrt9q[0x404176]\n/tmp/tmptbocrt9q[0x403232]\n\
    /tmp/tmptbocrt9q[0x402b05]\n/tmp/tmptbocrt9q[0x400e2d]\n/tmp/tmptbocrt9q[0x40105b]\n\
    /lib64/libc.so.6(__libc_start_main+0xf5)[0x2b39213c0555]\n/tmp/tmptbocrt9q[0x400bd9]\n\
    ======= Memory map: ========\n00400000-00409000 r-xp 00000000 08:02 25261    \
    \                          /tmp/tmptbocrt9q\n00608000-00609000 r--p 00008000 08:02\
    \ 25261                              /tmp/tmptbocrt9q\n00609000-0060a000 rw-p\
    \ 00009000 08:02 25261                              /tmp/tmptbocrt9q\n0179d000-017cf000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2b3920887000-2b39208a9000\
    \ r-xp 00000000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2b39208a9000-2b39208ac000\
    \ rw-p 00000000 00:00 0 \n2b39208c5000-2b39208ca000 rw-p 00000000 00:00 0 \n2b3920aa8000-2b3920aa9000\
    \ r--p 00021000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2b3920aa9000-2b3920aaa000\
    \ rw-p 00022000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2b3920aaa000-2b3920aab000\
    \ rw-p 00000000 00:00 0 \n2b3920aab000-2b3920c74000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2b3920c74000-2b3920e73000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b3920e73000-2b3920e7e000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b3920e7e000-2b3920e81000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b3920e81000-2b3920e84000 rw-p 00000000 00:00 0 \n2b3920e84000-2b3920f85000 r-xp\
    \ 00000000 08:01 50333482                   /usr/lib64/libm-2.17.so\n2b3920f85000-2b3921184000\
    \ ---p 00101000 08:01 50333482                   /usr/lib64/libm-2.17.so\n2b39211840"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long arrMax;\n    long index = 0;\n    std::vector<long>\
    \ res;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > arrMax)\
    \ {\n            arrMax = arr[i];\n            index = i;\n        }\n    }\n\
    \    while(index != k) {\n        res.push_back(arrMax);\n        index--;\n \
    \       for(long i = 0; i < arr.size(); i++) {\n            if(arr[i] > arrMax\
    \ && i != index) {\n                arrMax = arr[i];\n                index =\
    \ i;\n            }\n        }\n    }\n    res.push_back(arrMax);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n\tassert(arr.size() >= k);\n\tstd::vector<long> res(k);\n\t\
    long long res = std::numeric_limits<long long>::max();\n\tfor(auto i : arr)\n\t\
    \tres = std::max(res, i);\n\tstd::vector<long> arr(k);\n\tfor(auto i : arr)\n\t\
    \ti = std::abs(i);\n\tfor(auto i : arr)\n\t{\n\t\tstd::sort(res.begin(), res.end(),\
    \ std::greater<long>());\n\t\tstd::reverse(res.begin(), res.end());\n\t\twhile(i\
    \ < res.size() && res.at(i) <= res - i)\n\t\t\ti++;\n\t\tres.resize(i+1);\n\t\t\
    for(auto i : res)\n\t\t{\n\t\t\tif(i == res)\n\t\t\t\tres.at(i) = std::numeric_limits<long>::max();\n\
    \t\t\telse\n\t\t\t\tres.at(i) = std::max(res.at(i), i);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpag8v4p7v.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpag8v4p7v.cpp:21:12: error: conflicting declaration\
    \ \u2018long long int res\u2019\n   21 |  long long res = std::numeric_limits<long\
    \ long>::max();\n      |            ^~~\n/tmp/tmpag8v4p7v.cpp:20:20: note: previous\
    \ declaration as \u2018std::vector<long int> res\u2019\n   20 |  std::vector<long>\
    \ res(k);\n      |                    ^~~\n/tmp/tmpag8v4p7v.cpp:23:24: error:\
    \ no matching function for call to \u2018max(std::vector<long int>&, long int&)\u2019\
    \n   23 |   res = std::max(res, i);\n      |                        ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpag8v4p7v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpag8v4p7v.cpp:23:24:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    std::vector<long int>\u2019 and \u2018long int\u2019)\n   23 |   res = std::max(res,\
    \ i);\n      |                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /sh"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    assert(k <= arr.size());\n    std::vector<long>\
    \ ans;\n    for(int i=0;i<k;i++)\n    {\n        long maxVal = arr[i];\n     \
    \   for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[j]>maxVal)\n\
    \            {\n                maxVal = arr[j];\n            }\n        }\n \
    \       ans.push_back(maxVal);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3wjjd06y: /tmp/tmp3wjjd06y.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> maxList;\n    int\
    \ l = arr.size();\n    for(int i = 0; i < (k - 1) && i < l; i++){\n        for(int\
    \ j = i + 1; j < l && j < (k - 1); j++){\n            if(arr[i] > arr[j] ){\n\
    \                maxList.push_back(arr[j]);\n            }\n        }\n    }\n\
    \    return maxList;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp8x4jxjc: /tmp/tmpp8x4jxjc.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    auto end = [](const auto& a, const auto& b) { return a >\
    \ b; };\n    std::vector<long> res;\n    std::sort(arr.begin(), arr.end(), end);\n\
    \    for (size_t i = 0; i < k; i++) {\n        res.push_back(arr[i]);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1e58p0q_: /tmp/tmp1e58p0q_.cpp:29: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    std::vector<long> v;\n    v.reserve(n);\n\
    \    // write your code here\n    sort(arr.begin(),arr.end()); \n    int i=1;\n\
    \    long max_k=arr[0];\n    for(long j=0;j<n;j++)\n    {\n        if(arr[j] >\
    \ max_k)\n        {\n            i=0;\n            max_k=arr[j];\n        }\n\
    \        if(i == k-1 )\n        {\n            v.push_back(max_k);\n         \
    \   i=1;\n            max_k=arr[j];\n        }\n        else\n        {\n    \
    \        max_k=arr[j];\n            i++;\n        }\n    }\n    v.push_back(max_k);\n\
    \    \n    return v;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp58m3naht: /tmp/tmp58m3naht.cpp:51: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    // Find max with 2 pointers\n\
    \    for (long i=0; i<arr.size(); i+=2){\n        std::swap(arr[i], arr[i+1])\n\
    \        if(arr[i]>max_arr[k-1]){\n            max_arr[k-1] = arr[i];\n      \
    \  }\n    }\n    // Find max with 1 pointer\n    for (long i=0; i<arr.size();\
    \ i++){\n        if(arr[i]>max_arr[k-1]){\n            max_arr[k-1] = arr[i];\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk8til71f.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpk8til71f.cpp:22:36: error: expected \u2018;\u2019\
    \ before \u2018if\u2019\n   22 |         std::swap(arr[i], arr[i+1])\n      |\
    \                                    ^\n      |                              \
    \      ;\n   23 |         if(arr[i]>max_arr[k-1]){\n      |         ~~       \
    \                   \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> arrSort(arr.size());\n  for (size_t i =\
    \ 0; i <= arr.size() - 1; i++) {\n    arrSort[i] = arr[i];\n  }\n  sort(arrSort.begin(),\
    \ arrSort.end(), std::greater<long>());\n  arrSort.resize(k, 0);\n\n  // To keep\
    \ track of current index in arrSort\n  size_t index = 0;\n  long maxVal = arrSort[0];\n\
    \  std::vector<long> maxList(k, 0);\n\n  // If current element in the array is\
    \ greater than the current maxVal, \n  // then update the maxVal and maxList accordingly.\n\
    \  for (size_t i = 1; i <= arr.size() - 1; i++) {\n    if (arrSort[i] > maxVal)\
    \ {\n      maxVal = arrSort[i];\n      maxList[index] = maxVal;\n      index++;\n\
    \    }\n  }\n  return maxList;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpb4ikz4hw: /tmp/tmpb4ikz4hw.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  long n = arr.size();\n  std::multiset<long> max_number_set(n);\n\
    \  for (size_t i = 0; i < n; ++i) {\n    max_number_set.insert(arr[i]);\n  }\n\
    \  std::vector<long> max;\n  while (max_number_set.size() > k) {\n    max.push_back(max_number_set.begin()->second);\n\
    \    max_number_set.erase(max_number_set.begin());\n  }\n  max.push_back(max_number_set.begin()->second);\n\
    \  return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppw6jadre.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmppw6jadre.cpp:20:39: error: no matching function\
    \ for call to \u2018std::multiset<long int>::multiset(long int&)\u2019\n   20\
    \ |   std::multiset<long> max_number_set(n);\n      |                        \
    \               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmppw6jadre.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_multiset.h:267:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::multiset<_Key, _Compare,\
    \ _Alloc>::multiset(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  267 |  multiset(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_multiset.h:267:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppw6jadre.cpp:20:39:\
    \ note:   candidate expects 3 arguments, 1 provided\n   20 |   std::multiset<long>\
    \ max_number_set(n);\n      |                                       ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmppw6jadre.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_multiset.h:261:7:\
    \ note: candidate: \u2018std::multiset<_Key, _Compare, _Alloc>::multiset(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Key = long int; _Compare = std::less<long int>;\
    \ _Alloc = std::allocator<long int>; std::multiset<_Key, _Compare, _Alloc>::allocator_type\
    \ = std::allocator<long int>]\u2019\n  261 |       multiset(initializer_list<value_type>\
    \ __l, const allocator_type& __a)\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_multiset.h:261:7:\
    \ note:   candidate expects 2 arguments, 1 provided\n/shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end()); // O(n log n)\n    return\
    \ std::vector<long>(arr.begin(), arr.begin() + k); // O(k)\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3p34klqw: /tmp/tmp3p34klqw.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // your code goes here\n    std::vector<long> result;\n\
    \    long temp = 0;\n    long long sum = 0;\n    for( int i =0;i<k; ++i){\n  \
    \      sum+=arr[i];\n    }\n    for( int i =0;i<arr.size(); ++i){\n        if(\
    \ sum>=arr[i] ){\n            sum -= arr[i];\n            temp += arr[i];\n  \
    \          result.push_back(temp);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkd1uzjxs: /tmp/tmpkd1uzjxs.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() > k) {\n \
    \       long max = arr[0];\n        for (long i = 1; i < k; i++) {\n         \
    \   if (arr[i] > max) {\n                max = arr[i];\n            }\n      \
    \  }\n        for (long i = 0; i < k; i++) {\n            if (arr[i] > max) {\n\
    \                result.push_back(max);\n                max = arr[i];\n     \
    \       }\n        }\n        result.push_back(max);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpflgl3k5y: /tmp/tmpflgl3k5y.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long cnt = 0;\n    std::map<long, long> mp;\n    std::vector<long>\
    \ max_arr;\n    for (auto num : arr) {\n        mp[num] ++;\n        if (mp[num]\
    \ > k) {\n            max_arr.clear();\n            mp[num] = k;\n           \
    \ cnt ++;\n        } else if (mp[num] > max_arr.size()) {\n            cnt ++;\n\
    \            max_arr.clear();\n            mp[num] = k;\n        }\n    }\n  \
    \  return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvb4saczj: /tmp/tmpvb4saczj.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    sort(arr.begin(), arr.end());\n    auto\
    \ n = arr.size();\n    std::vector<long> ans;\n    if (k == 0) ans.assign(arr.begin(),\
    \ arr.end());\n    else if (n < k) ans.assign(arr.begin(), arr.begin() + k);\n\
    \    else ans.assign(arr.begin(), arr.begin() + k - 1);\n    long max_value =\
    \ arr[0];\n    int start = 0;\n    for (int i = 1; i < n; ++i) {\n        if (arr[i]\
    \ > max_value) {\n            max_value = arr[i];\n            start = i;\n  \
    \      }\n    }\n    for (int i = start; i < n; ++i) {\n        if (max_value\
    \ >= arr[i]) {\n            ans[i - start] = max_value;\n            max_value\
    \ = arr[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa9pzm_2t: /tmp/tmpa9pzm_2t.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long long max = 1;\n    std::vector<long>\
    \ max_arr;\n    int n = 0;\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   n = arr[i];\n        if (n == max) {\n            max_arr.push_back(n);\n\
    \        }\n        if (arr[i] > max) {\n            max = arr[i];\n         \
    \   max_arr.clear();\n        }\n    }\n    for (int i = 0; i < max_arr.size();\
    \ i++) {\n        if (max_arr[i] == max) {\n            max_arr.push_back(i);\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_hnbgnya: /tmp/tmp_hnbgnya.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    res.reserve(k);\n    for(int\
    \ i=0; i<arr.size(); i++){\n        int j=i;\n        long max=-1000;\n      \
    \  while(j<arr.size() && arr[j]>max){\n            j++;\n        }\n        while(j<arr.size()\
    \ && arr[j]<max){\n            res[res.size()-1]=arr[j];\n            j++;\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_3cyl4a1: /tmp/tmp_3cyl4a1.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    std::vector<long> result(arr.size());\n\
    \    long max = 0;\n    long i = 0;\n    while(i < arr.size()) {\n        if(max\
    \ < arr[i]) {\n            max = arr[i];\n        }\n        i++;\n    }\n   \
    \ for(int j = 0;j < k;j++) {\n        result[j] = max;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpggyjegbl: /tmp/tmpggyjegbl.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n        // code here\n        long start=0, end=arr.size() -\
    \ 1;\n        std::sort(arr.begin(), arr.end(), [&](long a, long b){return (a>b)\
    \ - (a<b);});\n        while(start<end) {\n                long mid = start +\
    \ (end - start) / 2;\n                if(!((k==0) && (arr[mid]<0)))\n        \
    \                k = k - 1;\n                if(k>0) {\n                     \
    \   if(arr[mid] > arr[mid + 1])\n                                end = mid - 1;\n\
    \                        else\n                                start = mid + 1;\n\
    \                } else if(k < 0) {\n                        if(arr[mid] < arr[mid\
    \ + 1])\n                                start = mid + 1;\n                  \
    \      else\n                                end = mid - 1;\n                }\
    \ else {\n                        break;\n                }\n        }\n     \
    \   std::reverse(arr.begin(), arr.end());\n        return arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxcrbnuml: /tmp/tmpxcrbnuml.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    int n = arr.size();\n    \n\
    \    // if k > n\n    if(k > n)\n        return ans;\n    \n    // if k == n\n\
    \    if(k == n)\n        return ans;\n    \n    // if k == 1 and arr is empty\n\
    \    if(k == 1 && arr.empty())\n        return ans;\n    \n    // if k is greater\
    \ than or equal to 1\n    for(int i = 1; i <= k; i++){\n        if(arr[i] > arr[0])\
    \ {\n            long maxi = arr[0];\n            int idx = 0;\n            for(int\
    \ j = 0; j < n; j++) {\n                if(arr[j] > maxi)\n                  \
    \  maxi = arr[j];\n            }\n            ans.push_back(maxi);\n         \
    \   \n            for(int j = 0; j < n; j++) {\n                if(arr[j] == maxi)\n\
    \                    idx++;\n            }\n            \n            // remove\
    \ the max element\n            for(long j = 0; j < idx; j++) {\n             \
    \   arr[n - 1] = 0;\n            }\n            \n            if(n == 1) {\n \
    \               ans.push_back(arr[0]);\n            } else {\n               \
    \ // recursive call\n                ans = maximum(arr, n - 1);\n            }\n\
    \            \n        } else {\n            ans.push_back(arr[0]);\n        \
    \    // recursive call\n            ans = maximum(arr, n - 1);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpssifhk2a: /tmp/tmpssifhk2a.cpp:72: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  assert(arr.size() > 0 && k >= 1 && k <= arr.size());\n  std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> pq(arr.begin(), arr.end());\n  std::vector<long>\
    \ result;\n  result.push_back(pq.top());\n  pq.pop();\n  for (auto i = k; i >\
    \ 0; i--) {\n    result.push_back(pq.top());\n    pq.pop();\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpijsjibjk: /tmp/tmpijsjibjk.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max_val;\n    for(long\
    \ i=0; i<k; i++)\n    {\n        max_val.push_back(arr[i]);\n    }\n    \n   \
    \ return max_val;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpc5rsflke: /tmp/tmpc5rsflke.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long ans = 0;\n    std::vector<long> ans_list;\n  \
    \  // sort the array using merge sort\n    mergeSort(arr.begin(), arr.end());\n\
    \    // find the maximum in arr\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        ans = max(ans, arr[i]);\n        if (ans_list.size() < k) {\n       \
    \     ans_list.push_back(ans);\n        }\n    }\n    return ans_list;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2mpv5_u5.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp2mpv5_u5.cpp:22:5: error: \u2018mergeSort\u2019\
    \ was not declared in this scope\n   22 |     mergeSort(arr.begin(), arr.end());\n\
    \      |     ^~~~~~~~~\n/tmp/tmp2mpv5_u5.cpp:25:15: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     ans = max(ans, arr[i]);\n      |               ^~~\n      |            \
    \   std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2mpv5_u5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long retVal = 0;\n    \n    for (int i = 0; i < k;\
    \ ++i) {\n        long long cur = arr[i];\n        std::pop_heap(arr.begin(),\
    \ arr.end(), \n            [&cur](int a, int b){return (a>b?a:b)<cur;});\n   \
    \     \n        retVal += cur;\n    }\n    \n    // std::pop_heap returns the\
    \ highest element of arr after removing\n    // the top most element. \n    //\
    \ We are going to store a sorted list in retVal.\n    std::pop_heap(arr.begin(),\
    \ arr.end(), \n        [&retVal](int a, int b){return (a>b?a:b)<retVal;});\n \
    \   \n    return std::vector<long>(arr.begin(), arr.begin() + k);\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpadrqokfo: /tmp/tmpadrqokfo.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> num;\n    num.push_back(0);\n    std::vector<long>\
    \ ans;\n    ans.push_back(arr[0]);\n    for(long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] > ans[ans.size()-1]) {\n            ans.push_back(0);\n   \
    \     }\n        if(arr[i] > ans[ans.size()-1]) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        num.push_back(0);\n\
    \    }\n    for(long i = 0; i < ans.size(); i++) {\n        for(long j = i; j\
    \ < ans.size(); j++) {\n            if(ans[j] > ans[i]) {\n                num[ans.size()-i]\
    \ = ans[j];\n            }\n        }\n    }\n    return num;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxpvb5jzj: /tmp/tmpxpvb5jzj.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    auto left = std::begin(arr);\n    auto right = std::end(arr);\n\
    \    std::vector<long> result;\n    // Initialize first k numbers to be maximum\n\
    \    for(long i = 0; i < k; ++i)\n        std::max_element(left, right, [](long\
    \ a, long b) {return std::max(a, b);});\n    result.insert(std::begin(result),\
    \ std::begin(left), std::begin(right));\n    result.insert(std::begin(result),\
    \ std::end(arr), std::end(result));\n    // For remaining numbers, find the maximum.\n\
    \    for(auto it = std::begin(arr); it != std::end(arr); ++it) {\n        auto\
    \ max = std::max_element(left, right, [](long a, long b) {return std::max(a, b);});\n\
    \        if(max == left)\n            std::iter_swap(it++, right);\n        else\
    \ if(max == right)\n            std::iter_swap(left, it++);\n        else\n  \
    \          std::iter_swap(it, right);\n        right = it;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8zffbty.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpj8zffbty.cpp:25:54: error: no matching function\
    \ for call to \u2018begin(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >&)\u2019\n   25 |     result.insert(std::begin(result), std::begin(left),\
    \ std::begin(right));\n      |                                               \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpj8zffbty.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpj8zffbty.cpp:25:54:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n   25 |\
    \     result.insert(std::begin(result), std::begin(left), std::begin(right));\n\
    \      |                                                      ^\nIn file included\
    \ fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    res.reserve(arr.size());\n \
    \   for(long i = 0, j = k - 1; i < k ; i++, j--)\n    {\n        if(arr[i] > arr[j])\n\
    \        {\n            std::swap(arr[i], arr[j]);\n            std::swap(res[i],\
    \ res[j]);\n        }\n    }\n    res.resize(j + 1);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm22qdh64.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm22qdh64.cpp:29:16: error: \u2018j\u2019 was\
    \ not declared in this scope\n   29 |     res.resize(j + 1);\n      |        \
    \        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max(n, 0);\n    for(long i = 0; i < k;\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(arr[j] > max[j])\
    \ {\n                max[j] = arr[j];\n            }\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk6qsorkr.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpk6qsorkr.cpp:19:27: error: \u2018n\u2019 was\
    \ not declared in this scope\n   19 |     std::vector<long> max(n, 0);\n     \
    \ |                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> ans;\n  for (long i = 0; i < k; i++) {\n\
    \    long max_val = -100000000;\n    for (long j = 0; j < arr.size(); j++) {\n\
    \      if (arr[j] > max_val)\n        max_val = arr[j];\n    }\n    ans.push_back(max_val);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxkosxct0: /tmp/tmpxkosxct0.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ max_arr(k);\n    std::fill(max_arr.begin(), max_arr.end(), arr[0]);\n    for\
    \ (long i = 0; i < k - 1; i++) {\n        if (arr[i] > max_arr[i + 1]) {\n   \
    \         max_arr[i + 1] = arr[i];\n        }\n    }\n    return max_arr;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplor8906i: /tmp/tmplor8906i.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long start = 0;\n    long end = arr.size();\n    long mid\
    \ = -1;\n    std::vector<long> ans;\n    // First check if k is greater then array\
    \ length\n    if (k >= arr.size()) return ans;\n    if (k > 0) mid = arr.size()\
    \ / 2;\n    // Find mid number\n    while (start < end) {\n        // If k is\
    \ greater then mid\n        if (arr[start] < mid) {\n            if (k == 1) ans.push_back(arr[start]);\n\
    \            else ans.push_back(arr[start]);\n            ++start;\n        }\
    \ else if (arr[start] >= mid) {\n            if (k == 1) ans.push_back(arr[end]);\n\
    \            else ans.push_back(arr[end]);\n            --end;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpg76xo92p: /tmp/tmpg76xo92p.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long l = 0, r = 0, c = 0;\n    std::vector<long> ans;\n\
    \    while (l+1 < k) {\n        c = arr[++l] >= arr[--r];\n        if (!c) break;\n\
    \        ans.push_back(r-c-1);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwdtzgfbf: /tmp/tmpwdtzgfbf.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Do not write main() function.\n    // Do not read input,\
    \ instead use the arguments to the function.\n    // Do not print the output,\
    \ instead return values as specified\n    // by problem statement.\n    std::vector<long>\
    \ ret;\n    long curr = 0;\n    long max = arr[0];\n    long sum = 0;\n    for\
    \ (int i = 0; i < k; i++) {\n        sum += arr[i];\n        if (curr < sum) {\n\
    \            max = curr - arr[i];\n        } else {\n            curr = sum;\n\
    \        }\n        ret.push_back(max);\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpotsetqqj: /tmp/tmpotsetqqj.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if(k > arr.size()) return {};\n    std::vector<long> arr2(k);\n\
    \    long count = 0;\n    long ans = 0;\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] > arr2[count]){\n            arr2[count] = arr[i];\n      \
    \      count++;\n            if(count == k){\n                ans = arr2;\n  \
    \              return arr2;\n            }\n        }\n    }\n    return {};\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0me2_96w.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0me2_96w.cpp:28:23: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in assignment\n   28 |   \
    \              ans = arr2;\n      |                       ^~~~\n      |      \
    \                 |\n      |                       std::vector<long int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Code here\n    std::vector<long> max(k);\n    long maxVal\
    \ = arr[0];\n    for(size_t i = 0; i < arr.size(); i++){\n        if(arr[i] >\
    \ maxVal){\n            maxVal = arr[i];\n            max = i;\n        }\n  \
    \  }\n    for(size_t i = 0; i < k; i++){\n        arr[max] = arr[i];\n       \
    \ arr[max]++;\n        max++;\n    }\n    return arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzmknlnit.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpzmknlnit.cpp:25:19: error: no match for \u2018\
    operator=\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    size_t\u2019 {aka \u2018long unsigned int\u2019})\n   25 |             max = i;\n\
    \      |                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpzmknlnit.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:199:42: note:\
    \   no known conversion for argument 1 from \u2018size_t\u2019 {aka \u2018long\
    \ unsigned int\u2019} to \u2018const std::vector<long int>&\u2019\n  199 |   \
    \  operator=(const vector<_Tp, _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpzmknlnit.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n\
    \  706 |       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n\
    \      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:706:26:\
    \ note:   no known conversion for argument 1 from \u2018size_t\u2019 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long ans = 0;\n    long long temp = 0;\n    // This\
    \ for loop will loop until we get k number of elements in arr\n    for (long long\
    \ i = 0; i < k; i++) {\n        // This if condition will loop until we get a\
    \ negative or positive number\n        if (arr[i] > arr[i+1]) {\n            temp\
    \ = 0;\n        } else {\n            temp = arr[i+1];\n        }\n        //\
    \ This if condition will loop until we get a negative or positive number\n   \
    \     if (temp > temp) {\n            temp = 0;\n        } else {\n          \
    \  temp = temp;\n        }\n        // This if condition will loop until we get\
    \ a negative or positive number\n        if (arr[i] > arr[i+2]) {\n          \
    \  temp = 0;\n        } else {\n            temp = arr[i+2];\n        }\n    \
    \    // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+3]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+3];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+4]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+4];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+5]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+5];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+6]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+6];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n        // This if condition will loop until we\
    \ get a negative or positive number\n        if (arr[i] > arr[i+7]) {\n      \
    \      temp = 0;\n        } else {\n            temp = arr[i+7];\n        }\n\
    \        // This if condition will loop until we get a negative or positive number\n\
    \        if (temp > temp) {\n            temp = 0;\n        } else {\n       \
    \     temp = temp;\n        }\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzfwrx44c.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpzfwrx44c.cpp:108:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  108 | int main() {\n     \
    \ |            ^\n/tmp/tmpzfwrx44c.cpp:121:1: error: expected \u2018}\u2019 at\
    \ end of input\n  121 | }\n      | ^\n/tmp/tmpzfwrx44c.cpp:18:58: note: to match\
    \ this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmpzfwrx44c.cpp:121:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  121 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> output(k);\n\
    \    long i = 0;\n    long max = arr[0];\n    for (i = 0; i < k; ++i){\n     \
    \   if (max < arr[i]){\n            max = arr[i];\n        }\n    }\n    for (;\
    \ i < k; ++i){\n        max = arr[i] > max ? arr[i] : max;\n    }\n    for (;\
    \ i < k; ++i){\n        output[i - k] = max;\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpe8msrgv_: /tmp/tmpe8msrgv_.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() <= k);\n    auto max = [&]() {\n     \
    \   auto maxElem = -std::numeric_limits<long>::max();\n        auto maxPos = -1;\n\
    \        for (size_t i = 0; i < arr.size(); i++) {\n            if (arr[i] > maxElem)\
    \ {\n                maxElem = arr[i];\n                maxPos = i;\n        \
    \    }\n        }\n        std::vector<long> res(maxPos, arr[maxPos]);\n     \
    \   return res;\n    }();\n    return max;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkt3t0s6p: /tmp/tmpkt3t0s6p.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res(k);\n    for (long i = 0; i < k; i++)\
    \ {\n        std::partial_sort_copy(arr.begin(), arr.end(), arr.begin() + i, res.begin()\
    \ + i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphpg88kk3: /tmp/tmphpg88kk3.cpp:27: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(k <= arr.size());\n    long result = arr[0];\n  \
    \  long max_element = arr[0];\n    for (long i = 1; i < k; i++) {\n        if\
    \ (arr[i] > max_element) {\n            result = max_element;\n        }\n   \
    \     else if (arr[i] < max_element) {\n            max_element = arr[i];\n  \
    \      }\n    }\n    std::vector<long> ret;\n    ret.push_back(result);\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkcv0june: /tmp/tmpkcv0june.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // your code goes here\n    if(arr.size()<k){\n        return\
    \ {};\n    }\n    long min=-100000000000;\n    long max=100000000000;\n    long\
    \ i=0;\n    std::vector<long> res;\n    while(i<k){\n        if(max<=min){\n \
    \           max=min;\n        }\n        if(max>=arr[i]){\n            min=arr[i];\n\
    \        }\n        ++i;\n    }\n    i=0;\n    while(i<arr.size()){\n        if(max<=min){\n\
    \            max=min;\n        }\n        if(arr[i]>max){\n            max=arr[i];\n\
    \        }\n        i++;\n    }\n    i=0;\n    while(i<k){\n        if(arr[i]<min)\n\
    \        {\n            min=arr[i];\n        }\n        i++;\n    }\n    while(i<arr.size()){\n\
    \        long temp=arr[i];\n        arr[i]=min;\n        min=temp;\n        i++;\n\
    \    }\n    i=0;\n    while(i<k){\n        res[i]=arr[i];\n        i++;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() == k);\n    std::vector<long> temp(k);\n\
    \    long currMax = arr[0];\n    for (long i = 0; i < k; i++) {\n        if (arr[i]\
    \ > currMax) {\n            temp[i] = currMax;\n            currMax = arr[i];\n\
    \        }\n    }\n    for (int i = 1; i < k; i++) {\n        if (temp[i] < temp[i\
    \ - 1]) {\n            temp[i] = temp[i - 1];\n        }\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplkp0sdhe: /tmp/tmplkp0sdhe.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long sum = 0;\n    long long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n    }\n    long long k = max;\n    std::vector<long>\
    \ ans(k);\n    for (long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if (sum >= k) {\n            k = sum;\n        }\n        ans[k - sum]\
    \ = arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfqpx594g.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfqpx594g.cpp:27:15: error: declaration of \u2018\
    long long int k\u2019 shadows a parameter\n   27 |     long long k = max;\n  \
    \    |               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result(k);\n    long max_elem = 0;\n \
    \   for (long i = 0; i < k; i++) {\n        max_elem = arr[i];\n        for (long\
    \ j = 0; j < k; j++)\n            if (arr[j] > max_elem) {\n                max_elem\
    \ = arr[j];\n            }\n        result[i] = max_elem;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk4re8rxk: /tmp/tmpk4re8rxk.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0 || k <= 0) return {};\n    auto maximum\
    \ = std::vector<long>(arr.size());\n    for (long i = 0; i < k; i++) {\n     \
    \   maximum[i] = std::numeric_limits<long>::min();\n    }\n    auto it = std::max_element(arr.begin(),\
    \ arr.end()); // O(n * log(k))\n    for (long i = 0; i < k; i++) { // O(k)\n \
    \       maximum[i] = it[i];\n    }\n    return maximum;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9i18qdg4: /tmp/tmp9i18qdg4.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here.\n    sort(arr.begin(), arr.end());\n\
    \    std::vector<long> ans;\n    long l = 0, r = arr.size() - 1;\n    long cur\
    \ = arr[r];\n    for (int i = 0; i < k; i++) {\n        if (cur < arr[l])\n  \
    \          l++;\n        else if (cur > arr[r])\n            r--;\n        else\n\
    \            ans.push_back(cur);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw9065__8: /tmp/tmpw9065__8.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long maxValue = arr[0];\n    std::vector<long> maxList;\n\
    \n    // The first k elements are the maximum elements\n    for (auto cur : arr)\
    \ {\n        // If the current element is not the maximum, set the current element\
    \ to maximum\n        if (cur > maxValue) {\n            maxValue = cur;\n   \
    \     }\n    }\n\n    // Add the remaining elements to the list\n    for (auto\
    \ cur : arr) {\n        // If the current element is greater than maxValue, add\
    \ it to the list\n        if (cur > maxValue) {\n            std::cout << maxValue\
    \ << std::endl;\n            maxList.push_back(maxValue);\n            maxValue\
    \ = cur;\n        } else {\n            // Otherwise, if the current element is\
    \ the same as the maximum, move on\n            if (cur == maxValue) {\n     \
    \           continue;\n            }\n\n            // Otherwise, if the current\
    \ element is not the maximum, set the current element to maximum\n           \
    \ maxValue = cur;\n        }\n    }\n\n    std::cout << maxValue << std::endl;\n\
    \    maxList.push_back(maxValue);\n    return maxList;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: "-4\n5\n"
  stderr: "tmp58cw_qtf: /tmp/tmp58cw_qtf.cpp:54: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n        \n    \n    std::vector<long> ans;\n    \n    // Sort\
    \ the array in descending order using max_element\n    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n    \n    // Find the maximum k elements\
    \ in the array\n    for(int i = 0; i< k; i++){\n        \n        // If current\
    \ element is less than or equal to current maximum, \n        // continue to next\
    \ iteration of the loop.\n        if(arr[i] <= ans[i]) continue;\n        \n \
    \       // If current element > maximum found, add the current element to \n \
    \       // the vector and move onto the next element in the array.\n        if(arr[i]\
    \ > ans[i]){\n            ans.push_back(arr[i]);\n        }\n        \n      \
    \  // If current element < maximum found, add the current element to\n       \
    \ // the vector and move onto the next element in the array. \n        // Since\
    \ we already added the element to vector ans, if element \n        // is less\
    \ than the current element it is already in the vector \n        // and we do\
    \ not need to do anything.\n        else if(arr[i] < ans[i]){\n            continue;\n\
    \        }\n        \n        // If current element == maximum element and we\
    \ reach the end of the\n        // array without finding the maximum element\n\
    \        else {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long ans = 0;\n    long max_pos = 0;\n    long cur_max =\
    \ arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > cur_max)\
    \ {\n            ans += k - max_pos;\n            cur_max = arr[i];\n        \
    \    max_pos = i;\n        }\n    }\n    ans += k - max_pos;\n    ans += k - max_pos\
    \ + 1;\n    ans = std::min(ans, static_cast<long>(arr.size()));\n    std::vector<long>\
    \ ansa;\n    for (int i = 0; i < ans; i++) {\n        ansa.push_back(cur_max);\n\
    \    }\n    return ansa;\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpf4_ko5bg: /tmp/tmpf4_ko5bg.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> max_arr(k);\n  long max_num = arr[0];\n\
    \  for (size_t i = 0; i < k; i++) {\n    if (arr[i] > max_num) {\n      max_num\
    \ = arr[i];\n    }\n  }\n  long rest = max_num;\n  for (size_t i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] == 0) {\n      continue;\n    }\n    if (rest == 0) {\n\
    \      max_arr[i] = arr[i];\n      continue;\n    }\n    if (rest > arr[i]) {\n\
    \      max_arr[i] = rest;\n      rest = 0;\n    } else if (rest < arr[i]) {\n\
    \      max_arr[i] = arr[i];\n      rest = rest;\n    }\n  }\n  return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpspk2nh8n: /tmp/tmpspk2nh8n.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    std::vector<long> result;\n\
    \    long maxElement = arr[0];\n    int i = 0;\n    for (; i < k; i++) {\n   \
    \     if (maxElement > arr[i]) {\n            maxElement = arr[i];\n        }\n\
    \    }\n    while (i < k) {\n        result.push_back(maxElement);\n        maxElement\
    \ = arr[i + 1];\n        i++;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpiwav6w4_: /tmp/tmpiwav6w4_.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> arr1(arr.begin(), arr.end());\n    std::vector<long>\
    \ arr2(arr.begin(), arr.end());\n    // int arr1size = sizeof(arr) / sizeof(arr[0]);\n\
    \    // int arr2size = sizeof(arr2) / sizeof(arr2[0]);\n    long max1 = arr1[0];\n\
    \    long max2 = arr2[0];\n    for (long i = 0; i < k; i++) {\n        if (arr1[i]\
    \ > max1) {\n            max1 = arr1[i];\n        }\n        if (arr2[i] > max2)\
    \ {\n            max2 = arr2[i];\n        }\n    }\n    std::vector<long> result(k);\n\
    \    long i = 0;\n    for (; i < k; i++) {\n        if (arr1[i] > max2) {\n  \
    \          break;\n        }\n        result[i] = max1;\n    }\n    for (; i <\
    \ k; i++) {\n        if (arr2[i] > max2) {\n            break;\n        }\n  \
    \      result[i] = max2;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp75f3ekxy: /tmp/tmp75f3ekxy.cpp:51: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ret(arr, arr + k);\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9hwe4v6.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpv9hwe4v6.cpp:19:36: error: no match for \u2018\
    operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    long int\u2019)\n   19 |     std::vector<long> ret(arr, arr + k);\n      |   \
    \                             ~~~ ^ ~\n      |                               \
    \ |     |\n      |                                |     long int\n      |    \
    \                            std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv9hwe4v6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpv9hwe4v6.cpp:19:38:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   19 |     std::vector<long> ret(arr, arr + k);\n\
    \      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/b"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> result;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        result.push_back(std::max(arr[i], arr[i\
    \ + 1]));\n    }\n    result.push_back(arr[k - 1]);\n    result.push_back(arr[arr.size()\
    \ - 1]);\n    std::sort(result.begin(), result.end());\n    result.erase(std::unique(result.begin(),\
    \ result.end()), result.end());\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppy21qg3n: /tmp/tmppy21qg3n.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code goes here\n    std::vector<long> v;\n    long\
    \ max_so_far = arr[0];\n    long min_so_far = arr[0];\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max_so_far) {\n            max_so_far\
    \ = arr[i];\n        }\n        if (arr[i] < min_so_far) {\n            min_so_far\
    \ = arr[i];\n        }\n    }\n    int len = (int)ceil(arr.size() / (double)k);\n\
    \    for (int i = 0; i < len ; i++) {\n        if (max_so_far < min_so_far) {\n\
    \            v.push_back(max_so_far);\n            max_so_far = arr[(len-1)-i];\n\
    \        }\n        else{\n            v.push_back(max_so_far);\n            max_so_far\
    \ = max_so_far + arr[(len-1)-i];\n        }\n    }\n    v.push_back(max_so_far);\n\
    \    return v;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3i95orqq: /tmp/tmp3i95orqq.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::sort(arr.begin(), arr.end());\n  if (arr.size() <= k)\
    \ {\n    return std::vector<long> arr;\n  }\n  std::vector<long> arrK(arr.begin(),\
    \ arr.begin() + k);\n  std::sort(arrK.begin(), arrK.end());\n  std::vector<long>\
    \ arrKMax(arrK.begin(), arrK.end());\n  std::vector<long> arrMax(k);\n  for (int\
    \ i = 0; i < k; i++) {\n    arrMax[i] = std::max(arrKMax[i], arrK[i]);\n  }\n\
    \  return arrMax;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjmluzet.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbjmluzet.cpp:21:30: error: expected primary-expression\
    \ before \u2018arr\u2019\n   21 |     return std::vector<long> arr;\n      | \
    \                             ^~~\n/tmp/tmpbjmluzet.cpp:21:29: error: expected\
    \ \u2018;\u2019 before \u2018arr\u2019\n   21 |     return std::vector<long> arr;\n\
    \      |                             ^~~~\n      |                           \
    \  ;\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n\tstd::vector<long> v;\n\tfor(int i=0;i<arr.size();i++){\n\t\
    \tv.push_back(arr[i]);\n\t}\n\tsort(v.begin(), v.end());\n\treturn std::partition_copy(v.begin(),\
    \ v.end(), v.begin(), v.begin(), k);\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxw565i48.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxw565i48.cpp:24:28: error: could not convert\
    \ \u2018std::partition_copy<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, long int>(v.std::vector<long int>::begin(), v.std::vector<long\
    \ int>::end(), v.std::vector<long int>::begin(), v.std::vector<long int>::begin(),\
    \ k)\u2019 from \u2018std::pair<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long int> > >\u2019\
    \ to \u2018std::vector<long int>\u2019\n   24 |  return std::partition_copy(v.begin(),\
    \ v.end(), v.begin(), v.begin(), k);\n      |         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                            |\n      |                            std::pair<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxw565i48.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018std::pair<_Tp1, _Tp2> std::partition_copy(_IIter,\
    \ _IIter, _OIter1, _OIter2, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _OIter1 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Predicate = long int]\u2019:\n/tmp/tmpxw565i48.cpp:24:72:   required\
    \ from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:843:12:\
    \ error: \u2018__pred\u2019 cannot be used as a function\n  843 |  if (__pred(*__first))\n\
    \      |      ~~~~~~^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long arr_size = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        arr_size += arr[i];\n    }\n\n    std::vector <long> max_list(arr_size);\n\
    \    long long arr_sum = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n\
    \        arr_sum += arr[i];\n        max_list[i] = arr_sum;\n    }\n\n    long\
    \ long max_count = 0;\n    for (long long i = 0; i < arr_size - k; i++) {\n  \
    \      max_count = max(max_count, max_list[i]);\n    }\n\n    std::vector<long>\
    \ max_list_new;\n    for (long long i = arr_size - k; i < arr_size; i++) {\n \
    \       if (max_count > max_list[i]) {\n            max_count = max_list[i];\n\
    \        }\n        max_list_new.push_back(max_list[i]);\n    }\n    return max_list_new;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplppng2qf.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmplppng2qf.cpp:33:21: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   33 |    \
    \     max_count = max(max_count, max_list[i]);\n      |                     ^~~\n\
    \      |                     std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplppng2qf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() <= 1000);\n    assert(k <= arr.size());\n\
    \    std::vector<long> max_arr(k);\n    for (long i = 0; i < k; ++i) {\n     \
    \   max_arr[i] = arr[0];\n    }\n\n    for (long i = 1; i < arr.size(); ++i) {\n\
    \        long cur_max = max_arr[i - 1];\n        if (cur_max < arr[i]) {\n   \
    \         max_arr[i] = arr[i];\n        }\n    }\n    return max_arr;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnkwd346p: /tmp/tmpnkwd346p.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long count = 0;\n    int i = 0;\n    std::vector<long> num;\n\
    \    \n    while(i < arr.size()) {\n        num.push_back(arr[i]);\n        i\
    \ += 1;\n    }\n    \n    long temp;\n    while(count < k) {\n        count =\
    \ 0;\n        for(int j = 0; j < num.size(); ++j) {\n            if((num[j] >=\
    \ temp) && (num[j] != num[j-1])) {\n                temp = num[j];\n         \
    \       num[j] = num[j-1];\n                num[j-1] = temp;\n               \
    \ count++;\n            }\n        }\n    }\n    \n    return num;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long arr_size = arr.size();\n    assert(arr_size >= 1);\n\
    \    assert(k <= arr_size);\n    std::vector<long> ret;\n    ret.reserve(k);\n\
    \    long max_num = arr[0], max_num2 = arr[0];\n    for (auto elem : arr) {\n\
    \        if (elem > max_num) {\n            max_num = elem;\n        }\n     \
    \   if (elem > max_num2) {\n            max_num2 = elem;\n        }\n    }\n \
    \   ret[0] = max_num;\n    for (auto elem : arr) {\n        if (elem < max_num2)\
    \ {\n            ret.push_back(elem);\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpri4utimv: /tmp/tmpri4utimv.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if(arr.size() == 0 || k == 0) return {};\n    std::vector<long>\
    \ res;\n    if(arr.size() <= k) res.reserve(arr.size());\n    for(long i = 1;\
    \ i < arr.size(); i++) {\n        if(arr[i-1] > arr[i])\n            std::swap(arr[i-1],\
    \ arr[i]);\n        if(res.size() >= k) break;\n    }\n    for(long i = 0; i <\
    \ k; i++) res.push_back(arr[i]);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3gelbdyu: /tmp/tmp3gelbdyu.cpp:33: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    std::vector<long> result;\n\
    \    for(auto &item:arr){\n        if(k==result.size()){\n            result.push_back(item);\n\
    \        }\n        else if(item > result[k-1]){\n            result.push_back(item);\n\
    \        }\n        else if(item < result[k-1]){\n            result.insert(result.begin()+k-1,\
    \ item);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> maximum;\n    long maxArr[1001];\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        maxArr[i] = std::max(arr[i],\
    \ 0);\n    }\n    int size = arr.size();\n    int count = 1;\n    for (int i =\
    \ size; i > 0; i--) {\n        while (count != k) {\n            int pos = -1;\n\
    \            for (int j = 0; j < i; j++) {\n                if (maxArr[j] > maxArr[pos])\
    \ {\n                    pos = j;\n                }\n            }\n        \
    \    maximum.push_back((maxArr[pos] + maxArr[i - 1]) / 2);\n            if (maxArr[pos]\
    \ > maxArr[i - 1]) {\n                count++;\n            } else {\n       \
    \         count--;\n            }\n            maxArr[i] = maxArr[i - 1];\n  \
    \      }\n        maxArr[i] = 0;\n    }\n    return maximum;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppejp74hh.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmppejp74hh.cpp:22:39: error: no matching function\
    \ for call to \u2018max(__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type&, int)\u2019\n   22 |         maxArr[i] = std::max(arr[i],\
    \ 0);\n      |                                       ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppejp74hh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppejp74hh.cpp:22:39:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |         maxArr[i] = std::max(arr[i],\
    \ 0);\n      |                                       ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:4"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnw7zy_dc: /tmp/tmpnw7zy_dc.cpp:23: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    long result = arr[0];\n    std::vector<long>\
    \ maximums(k);\n    long start = 0;\n    long end = n - 1;\n    while(start <\
    \ end) {\n        while(start < end && arr[start] < result) start++;\n       \
    \ while(start < end && arr[end] > result) end--;\n        if(start >= end) {\n\
    \            maximums.push_back(arr[start]);\n            start = start + 1; end\
    \ = end - 1;\n        } else {\n            maximums.push_back(arr[start]);\n\
    \            start = start + 1; end = end - 1;\n        }\n    }\n    return maximums;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpssyeggd5: /tmp/tmpssyeggd5.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    long max_so_far = 0;\n    std::vector<long>\
    \ max_elem;\n    std::vector<long> max_elem2; \n    for(long i=0; i<arr.size();\
    \ i++){\n        max_so_far = std::max(max_so_far,arr[i]);\n        if(max_so_far\
    \ > arr[i]){\n            max_elem.push_back(arr[i]);\n        }\n        if(arr[i]\
    \ > max_so_far){\n            max_elem2.push_back(arr[i]);\n        }\n    }\n\
    \    if(k == max_elem2.size()){\n        return max_elem2;\n    }\n    else if(k\
    \ == max_elem.size()){\n        return max_elem;\n    }\n    return max_elem2;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphi1qkm5_: /tmp/tmphi1qkm5_.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res(k);\n    for(long i = 0; i < k; i++)\
    \ {\n        res[i] = arr[i];\n    }\n    std::sort(res.begin(), res.end(), [&](long\
    \ a, long b){return a>b;});\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvn0kh7dv: /tmp/tmpvn0kh7dv.cpp:28: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    // if k <= 0 || n < k return []\n\
    \    if (k < 0 || n <= k) return {};\n    // if k >n or n>k return []\n    if\
    \ (n > k) return {};\n\n    // sort arr\n    std::sort(arr.begin(), arr.end());\n\
    \n    // initialize max vector to n-1\n    std::vector<long> max(n-1);\n    //\
    \ initialize index start\n    long start = 0;\n    // initialize index end\n \
    \   long end = n-1;\n\n    // initialize k\n    long k = k + 1;\n\n    while (start\
    \ <= end) {\n        if (arr[start] < arr[k]) {\n            // move arr[k]\n\
    \            max = std::move(max);\n            max = std::move(arr[k]);\n   \
    \         k += 1;\n        } else if (arr[start] > arr[k]) {\n            // move\
    \ arr[start]\n            max = std::move(arr[k]);\n            max = std::move(max);\n\
    \            start += 1;\n        } else {\n            // move arr[start] to\
    \ max\n            max = std::move(max);\n            start = start + 1;\n   \
    \     }\n    }\n\n    // return max vector\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgt418piu.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpgt418piu.cpp:36:10: error: declaration of \u2018\
    long int k\u2019 shadows a parameter\n   36 |     long k = k + 1;\n      |   \
    \       ^\n/tmp/tmpgt418piu.cpp:42:35: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::remove_reference<long\
    \ int&>::type\u2019 {aka \u2018long int\u2019})\n   42 |             max = std::move(arr[k]);\n\
    \      |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgt418piu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:199:42: note:\
    \   no known conversion for argument 1 from \u2018std::remove_reference<long int&>::type\u2019\
    \ {aka \u2018long int\u2019} to \u2018const std::vector<long int>&\u2019\n  199\
    \ |     operator=(const vector<_Tp, _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgt418piu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n\
    \  706 |       operator=(vector&"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    auto max_val = *std::max_element(std::begin(arr), std::end(arr));\n\
    \    std::vector<long> res;\n    auto it = std::begin(arr);\n    for (long i =\
    \ 0; i < k; i++) {\n        long cur = *std::max_element(std::begin(it), std::end(it));\n\
    \        res.push_back(cur);\n        it = std::find_if(std::begin(arr), std::end(arr),\
    \ [&](long x) {\n            return x < cur;\n        });\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20e49s72.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp20e49s72.cpp:23:51: error: no matching function\
    \ for call to \u2018begin(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >&)\u2019\n   23 |         long cur = *std::max_element(std::begin(it),\
    \ std::end(it));\n      |                                                   ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp20e49s72.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp20e49s72.cpp:23:51:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n   23 |\
    \         long cur = *std::max_element(std::begin(it), std::end(it));\n      |\
    \                                                   ^\nIn file included from /shared/centos7/gcc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    int n = arr.size();\n    std::vector<long>\
    \ v(n);\n    long max = v[0];\n    for (int i = 0; i < n; i++)\n    {\n      \
    \  v[i] = arr[i];\n        if (max < v[i])\n            max = v[i];\n    }\n \
    \   std::vector<long> ans;\n    for (int i = 0; i < k; i++) {\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5eu4h6yz: /tmp/tmp5eu4h6yz.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n   std::vector<long> largest;\n   largest.resize(k);\n\n   int\
    \ n = arr.size();\n   for (int i = 0; i<n; i++) {\n      int index = i;\n    \
    \  for (int j = i+1; j<n; j++) {\n         if (arr[i] > arr[j]) {\n          \
    \  index = j;\n         }\n      }\n      if (largest[index] == INT_MAX || largest[index]\
    \ < arr[i]) {\n         largest[index] = arr[i];\n      }\n   }\n   return largest;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6ckuaraz: /tmp/tmp6ckuaraz.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_element(arr.begin(), arr.begin() +\
    \ k);\n    std::vector<long> max_elements(max_element.begin(), max_element.begin()\
    \ + k);\n    std::vector<long> new_max_element(max_elements);\n    \n    for (auto\
    \ it = max_element.begin(); it != max_element.end(); ++it) {\n        if (*it\
    \ > max_elements.back()) {\n            std::vector<long> tmp(new_max_element);\n\
    \            tmp.push_back(*it);\n            max_elements = tmp;\n        } else\
    \ {\n            std::vector<long> tmp(new_max_element);\n            tmp.push_back(*it);\n\
    \            tmp.push_back(max_elements.back());\n            max_elements = tmp;\n\
    \        }\n    }\n    return max_elements;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplzj3j87s: /tmp/tmplzj3j87s.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n    std::vector<long> max;\n    long max_value = 0;\n\
    \    long i = 1;\n    long j = 0;\n    for (; j < arr.size() && i - 1 < k; ++j)\
    \ {\n        if (arr[j] > arr[j - 1]) {\n            max_value = arr[j];\n   \
    \         while (j < arr.size() && arr[j - 1] == max_value) {\n              \
    \  ++j;\n            }\n            max.push_back(max_value);\n            i =\
    \ 0;\n        } else {\n            while (j < arr.size() && arr[j] == arr[j -\
    \ 1]) {\n                ++j;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvsqj_j5n: /tmp/tmpvsqj_j5n.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n    // Write your code here\n    std::vector<long> v;\
    \ \n    std::sort(arr.begin(), arr.end()); \n    std::vector<long> ans;\n    long\
    \ n = arr.size();\n    long cnt = 0;\n    for(int i=0;i<k;i++)\n    {\n      \
    \  for(int j=0;j<n-k;j++)\n        {\n            if(arr[j] > arr[j+1])\n    \
    \        {\n                std::swap(arr[j], arr[j+1]);\n            }\n    \
    \    }\n        ans.push_back(arr[j]);\n        cnt++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_n7k33k.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpd_n7k33k.cpp:35:27: error: \u2018j\u2019 was\
    \ not declared in this scope\n   35 |         ans.push_back(arr[j]);\n      |\
    \                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    int N = arr.size();\n    long\
    \ max_arr[N];\n    for (int i = 0; i < N; i++) {\n        max_arr[i] = arr[i];\n\
    \    }\n    max_arr[0] = -100000;\n    int n = k;\n    for (int i = N - 1; i >=\
    \ 0; i--) {\n        if (max_arr[i] > max_arr[i + 1]) {\n            n = i;\n\
    \        }\n    }\n    std::vector<long> ans;\n    ans.resize(n + 1);\n    long\
    \ i = max_arr[0];\n    for (int j = 0; j < n; j++) {\n        ans[j] = max_arr[j];\n\
    \        while(i != max_arr[j]) {\n            ans[j] += 1;\n            i -=\
    \ 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::iota(std::begin(arr), std::end(arr), 0);\n    std::vector<long>\
    \ ans;\n    long max_val = INT_MIN;\n    int pos = -1;\n    for (int i = 0; i\
    \ < arr.size(); ++i) {\n        if (max_val < arr[i]) {\n            max_val =\
    \ arr[i];\n            pos = i;\n        }\n    }\n    ans.push_back(arr[pos]);\n\
    \    pos--;\n    for (int i = 0; i < k - 1 && pos >= 0; ++i) {\n        ans.push_back(arr[pos--]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbqixynj3: /tmp/tmpbqixynj3.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    for(long i=0; i<k; i++) {\n\
    \        std::pop_heap(arr.begin(), arr.end(), std::greater<long>());\n      \
    \  std::pop_heap(arr.begin(), arr.end(), std::greater<long>());\n        ans.push_back(arr[k-1]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmprs87icc4: /tmp/tmprs87icc4.cpp:29: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> result;\n\
    \    std::partial_sort(arr.begin(), arr.begin() + k, arr.end(), [&](long a, long\
    \ b){ return a < b; });\n    for(auto i = k; i-- > 0;)\n    {\n        result.emplace_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpe_93k5q9: /tmp/tmpe_93k5q9.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long ans = 0;\n    for (long i = 0; i < k; i++) {\n    \
    \    if (arr[i] > arr[ans]) ans = i;\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        arr[i] = arr[ans];\n    }\n    for (long i = 0; i < k; i++) {\n \
    \       arr[ans] = arr[i];\n    }\n    return arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8trmqqr9: /tmp/tmp8trmqqr9.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if(arr.size() < k){\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.reserve(k);\n    for(long i=0; i<arr.size(); ++i){\n        res.push_back(arr[i]);\n\
    \    }\n    sort(res.begin(), res.end());\n    for(long i=k; i<res.size(); ++i){\n\
    \        if(arr[i] > res[i - k]){\n            long temp = res[i];\n         \
    \   res[i] = res[i - k];\n            res[i - k] = temp;\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp78beho8m: /tmp/tmp78beho8m.cpp:40: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> ans;\n  std::vector<long> bk;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (i == 0) {\n      ans.push_back(arr[i]);\n\
    \    } else {\n      if (bk[i - 1] > arr[i]) {\n        bk.push_back(bk[i - 1]);\n\
    \      }\n      bk[i - 1] = bk[i - 1] > arr[i] ? bk[i - 1] : arr[i];\n    }\n\
    \  }\n  for (long i = 0; i < k; i++) {\n    ans.push_back(bk[i]);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    std::vector<long> result;\n\
    \    long max_val = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            result.push_back(arr[i]);\n        } else\
    \ {\n            if (result.size() == k) {\n                return result;\n \
    \           }\n        }\n    }\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyvkeqweg: /tmp/tmpyvkeqweg.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> ret;\n  // Create a helper function to sort\
    \ and find the maximun k numbers in arr\n  auto helper = [&arr, &k, &ret]() {\n\
    \    sort(arr.begin(), arr.end());\n    std::partial_sort(arr.begin(), arr.begin()\
    \ + k, arr.end(), std::greater<long>());\n    ret.reserve(k);\n    for (long i\
    \ = 0; i < k; i++) {\n      ret.push_back(arr[i]);\n    }\n  };\n  // Find the\
    \ max k numbers in arr\n  for (int i = 0; i < k; i++) {\n    helper();\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplrs6gqb0: /tmp/tmplrs6gqb0.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (k == 1) {\n        return std::move(arr);\n    }\n \
    \   \n    int lo = 0;\n    int hi = arr.size() - 1;\n    int mid = lo + (hi -\
    \ lo) / 2;\n    \n    while (lo <= hi) {\n        long midVal = arr[mid];\n  \
    \      while (lo <= mid && midVal < arr[lo]) {\n            lo++;\n        }\n\
    \        while (midVal > arr[hi] && hi > mid) {\n            hi--;\n        }\n\
    \        if (lo > mid) {\n            std::swap(arr[mid], arr[hi]);\n        }\
    \ else {\n            if (lo == mid) {\n                mid++;\n            }\n\
    \            midVal = arr[mid];\n            while (lo <= mid && midVal > arr[lo])\
    \ {\n                lo++;\n            }\n            while (midVal < arr[hi]\
    \ && hi > mid) {\n                hi--;\n            }\n        }\n    }\n   \
    \ return std::move(arr);\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptwl09aam: /tmp/tmptwl09aam.cpp:54: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> maxk;\n    maxk.reserve(k);\n    for (long\
    \ i=0;i<arr.size();i++) {\n        bool isMax = true;\n        for (int j=i;j<k;j++)\
    \ {\n            if (arr[j]>arr[j+1]) isMax = false;\n        }\n        if (isMax)\
    \ {\n            std::swap(arr[i], arr[k-1]);\n            maxk.push_back(arr[k-1]);\n\
    \        }\n    }\n    return maxk;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpma81fg_q: /tmp/tmpma81fg_q.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_num;\n    for(long i = 0; i < arr.size();\
    \ ++i){\n        max_num.push_back(std::max(arr[i], arr[i + 1]));\n    }\n   \
    \ return max_num;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1ts3vkxo: /tmp/tmp1ts3vkxo.cpp:27: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() >= k);\n    \n    std::vector<long> result;\n\
    \    \n    result.insert(result.end(), arr.begin(), arr.begin() + k);\n    std::partial_sort(result.begin(),\
    \ result.end(), std::greater<long>());\n    \n    std::reverse(result.begin(),\
    \ result.end());\n    \n    if (k == 1)\n        return result;\n    \n    result.insert(result.end(),\
    \ arr.begin() + k, arr.end());\n    std::partial_sort(result.begin() + k, result.end(),\
    \ std::greater<long>());\n    \n    std::reverse(result.begin() + k, result.end());\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjz68kt_5.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpjz68kt_5.cpp:24:73: error: no matching function\
    \ for call to \u2018partial_sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, std::greater<long int>)\u2019\n   24 |     std::partial_sort(result.begin(),\
    \ result.end(), std::greater<long>());\n      |                              \
    \                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjz68kt_5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4668:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::partial_sort(_RAIter,\
    \ _RAIter, _RAIter)\u2019\n 4668 |     partial_sort(_RandomAccessIterator __first,\n\
    \      |     ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4668:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjz68kt_5.cpp:24:73:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    std::greater<long int>\u2019)\n   24 |     std::partial_sort(result.begin(), result.end(),\
    \ std::greater<long>());\n      |                                            \
    \                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjz68kt_5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4706:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::partial_sort(_RAIter,\
    \ _RAIter, _RAIter, _Compare)\u2019\n 4706 |     partial_sort(_RandomAccessIterator\
    \ __first,\n      |     ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4706:5:\
    \ note:   template argument deduction"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  assert(arr.size() >= k);\n  \n  long lo, hi, mid;\n  lo =\
    \ std::numeric_limits<long>::min();\n  hi = std::numeric_limits<long>::max();\n\
    \  mid = (lo + hi) / 2;\n\n  while (lo <= hi) {\n    if (arr[mid] < mid) {\n \
    \     lo = mid + 1;\n    } else {\n      hi = mid - 1;\n    }\n    mid = (lo +\
    \ hi) / 2;\n  }\n  std::vector<long> result;\n  result.push_back(mid);\n  while\
    \ (lo > mid) {\n    result.push_back(arr[lo - 1]);\n    lo--;\n  }\n  result.push_back(arr[lo]);\n\
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long low = arr[0];\n    long high = arr[k];\n    std::vector<long>\
    \ res;\n    for (long i = k-1; i>= 0; i--) {\n        if(low > arr[i]) {\n   \
    \         high = arr[i];\n        } else {\n            res.push_back(low);\n\
    \            res.push_back(high);\n            low = high;\n            high =\
    \ arr[i];\n        }\n    }\n    res.push_back(low);\n    res.push_back(high);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuykg8lpk: /tmp/tmpuykg8lpk.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        long maxNum = arr[i];\n        long index\
    \ = i;\n        for (long j = i; j < arr.size(); j++) {\n            if (maxNum\
    \ < arr[j]) {\n                maxNum = arr[j];\n                index = j;\n\
    \            }\n        }\n        if (maxNum < arr[index]) {\n            ans.push_back(maxNum);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy7sz3yp6: /tmp/tmpy7sz3yp6.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    sort(arr.begin(), arr.end());\n    std::vector<long> output(k,\
    \ -1000LL);\n    for (long i = 0; i != k; ++i) {\n        if (arr[i] > 0)\n  \
    \          output[i] = arr[i];\n    }\n    return output;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpscqgcfz5: /tmp/tmpscqgcfz5.cpp:29: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    result.reserve(k);\n    \n\
    \    // sort arr in ascending order\n    sort(arr.begin(), arr.end(), [](const\
    \ long a, const long b) { return a < b; });\n    \n    // get the max value\n\
    \    long maxValue = arr[k - 1];\n    \n    // get first k elements to check if\
    \ all elements are greater\n    for (int i = 1; i < k; i++)\n        maxValue\
    \ = max(maxValue, arr[i]);\n    \n    // if max value is greater than or equal\
    \ all elements then add that \n    // element to the result list\n    while (maxValue\
    \ >= arr[0]) {\n        result.push_back(maxValue);\n        \n        // get\
    \ the max value\n        maxValue = max(maxValue, arr[0]);\n        \n       \
    \ // get the next max value\n        maxValue = max(maxValue, arr[1]);\n    }\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi0njy31_.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpi0njy31_.cpp:30:20: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   30 |    \
    \     maxValue = max(maxValue, arr[i]);\n      |                    ^~~\n    \
    \  |                    std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi0njy31_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpi0njy31_.cpp:38:20: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   38 |         maxValue = max(maxValue, arr[0]);\n      |                  \
    \  ^~~\n      |                    std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi0njy31_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n   long n = arr.size();\n   assert(k <= n);\n   std::vector<long>\
    \ ans;\n   for (long i = 0; i < n; ++i) {\n     if (i != 0 && arr[i-1] > arr[i])\n\
    \         ans.push_back(-arr[i-1]);\n     ans.push_back(arr[i]);\n   }\n   return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpghfp4b2e: /tmp/tmpghfp4b2e.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  assert(arr.size() >= 1);\n  assert(k <= arr.size());\n  std::vector<long>\
    \ result;\n  std::set<long> sorted_set(arr.begin(), arr.end());\n  long maxk =\
    \ std::numeric_limits<long>::max();\n  result.push_back(sorted_set.begin()->first);\n\
    \  for (long i = 1; i < k; i++) {\n    if (sorted_set.begin()->first > maxk) {\n\
    \      maxk = sorted_set.begin()->first;\n      result.push_back(maxk);\n    }\n\
    \    sorted_set.erase(sorted_set.begin());\n    if (sorted_set.size() == 0) {\n\
    \      break;\n    }\n    sorted_set.insert(sorted_set.begin()->first);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg1u6vu6x.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpg1u6vu6x.cpp:24:40: error: request for member\
    \ \u2018first\u2019 in \u2018* sorted_set.std::set<long int>::begin().std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   24 |   result.push_back(sorted_set.begin()->first);\n      |            \
    \                            ^~~~~\n/tmp/tmpg1u6vu6x.cpp:26:29: error: request\
    \ for member \u2018first\u2019 in \u2018* sorted_set.std::set<long int>::begin().std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   26 |     if (sorted_set.begin()->first > maxk) {\n      |               \
    \              ^~~~~\n/tmp/tmpg1u6vu6x.cpp:27:34: error: request for member \u2018\
    first\u2019 in \u2018* sorted_set.std::set<long int>::begin().std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   27 |       maxk = sorted_set.begin()->first;\n      |                   \
    \               ^~~~~\n/tmp/tmpg1u6vu6x.cpp:34:43: error: request for member \u2018\
    first\u2019 in \u2018* sorted_set.std::set<long int>::begin().std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   34 |     sorted_set.insert(sorted_set.begin()->first);\n      |         \
    \                                  ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() <= 1000 && arr.size() > 0 && k <= arr.size());\n\
    \    std::vector<long> ans;\n    ans.reserve(arr.size());\n    long max_val =\
    \ arr[0];\n    \n    // Traversing the array one by one\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.clear();\n\
    \            ans.resize(1);\n            ans[0] = max_val;\n            max_val\
    \ = arr[i];\n        } else if (arr[i] == max_val) {\n            ans.push_back(max_val);\n\
    \            ans.resize(ans.size() + 1);\n            max_val = arr[i];\n    \
    \    } else {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n  \
    \  // The last element of the returned vector\n    ans.push_back(max_val);\n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoikdn06d: /tmp/tmpoikdn06d.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    auto first = arr.begin()\
    \ + k;\n    auto last = first + k;\n    std::sort(first, last);\n    return std::vector<long>(first,\
    \ last);\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv8cqf8zo: /tmp/tmpv8cqf8zo.cpp:27: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    for(int i\
    \ = 0;i<k;i++){\n        for(int j=0;j<arr.size();j++){\n            if(arr[j]>arr[i]){\n\
    \                max[i] = max(max[i], arr[j]);\n            }\n        }\n   \
    \ }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5re3i4m.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm5re3i4m.cpp:24:44: error: no match for call\
    \ to \u2018(std::vector<long int>) (__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   24 |                 max[i] = max(max[i],\
    \ arr[j]);\n      |                                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n    long n = arr.size();\n    \n    std::vector<long>\
    \ max_arr;\n    \n    for(long i=0;i<n;++i){\n        long current = arr[i];\n\
    \        for(long j=i;j<n;j++){\n            long next_element = arr[j];\n   \
    \         \n            if(current>next_element){\n                current = next_element;\n\
    \            }\n        }\n        \n        max_arr.push_back(current);\n   \
    \ }\n    \n    std::partial_sort(max_arr.begin(), max_arr.begin()+k, max_arr.end());\n\
    \    \n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_noymgmu: /tmp/tmp_noymgmu.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    long ans = 0;\n    sort(arr.begin(),\
    \ arr.end());\n    if (k == 0){\n        return arr;\n    }\n    else if (k >\
    \ arr.size() ){\n        ans = arr.size(); \n    }\n    else{\n        for (long\
    \ i = 0; i < arr.size(); i++){\n            if(arr[i] > arr[i + 1])\n        \
    \    {\n                ans = max(ans, arr.size() - i - 1);\n                break;\n\
    \            }\n        }\n    }\n    std::vector<long> res;\n    res.resize(ans);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6aharmb2.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp6aharmb2.cpp:32:23: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   32 |    \
    \             ans = max(ans, arr.size() - i - 1);\n      |                   \
    \    ^~~\n      |                       std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6aharmb2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here.\n    std::sort(arr.begin(), arr.end());\n\
    \    std::vector<long> ans(k);\n    for (long i = 0; i != k; ++i) {\n        ans[i]\
    \ = arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6wl4p7k4: /tmp/tmp6wl4p7k4.cpp:30: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_vec;\n    max_vec.reserve(k);\n  \
    \  long max_val = arr[0];\n    for (int i = 0; i < k; i++) {\n        // check\
    \ if the current element is greater than max_val\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    max_vec.push_back(max_val);\n\
    \    // For every element in the array check if it is greater than max_val and\
    \ append it to the max_vec\n    for (int i = 1; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_vec.push_back(arr[i]);\n        }\n\
    \    }\n    return max_vec;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmy0j0ylx: /tmp/tmpmy0j0ylx.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() >= 1 && arr.size() <= 1000 && k >= 0 &&\
    \ k <= arr.size());\n    std::vector<long> ans;\n    long large = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > large) {\n       \
    \     ans.clear();\n            ans.push_back(i);\n            large = arr[i];\n\
    \        } else if (arr[i] == large) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    if (ans.size() <= k) {\n        return ans;\n    }\n    ans.erase(std::find(ans.begin(),\
    \ ans.end(), k), ans.end());\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7s_l2qfs: /tmp/tmp7s_l2qfs.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> num(k);\n    for (auto i = 0; i < k; i++)\
    \ {\n        num[i] = arr[i];\n    }\n    std::sort(num.begin(), num.end());\n\
    \    return num;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpaoi74g4o: /tmp/tmpaoi74g4o.cpp:29: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    std::vector<long> result;\n   \
    \ // Write your code here\n    for(long i=0;i<n;i++){\n        for(long j=i;j<n;j++){\n\
    \            if(arr[i]>arr[j]){\n                long temp=arr[i];\n         \
    \       arr[i]=arr[j];\n                arr[j]=temp;\n            }\n        }\n\
    \    }\n    long maxIndex=0;\n    for(long i=0;i<k;i++){\n        if(arr[i]>arr[maxIndex]){\n\
    \            maxIndex=i;\n        }\n    }\n    for(long i=maxIndex;i<n;i++){\n\
    \        result.push_back(arr[i]);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpe4mroym6: /tmp/tmpe4mroym6.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    vector<long> vec;\n    long maxVal = -1000;\n\
    \    for (int i = 0; i < k; i++) {\n        long currentMax = maxVal;\n      \
    \  long currentVal = 0;\n        for (int j = 0; j < arr.size(); j++) {\n    \
    \        currentVal = currentVal + arr[j];\n            if (currentVal > currentMax)\
    \ {\n                currentMax = currentVal;\n            }\n        }\n    \
    \    vec.push_back(currentMax);\n    }\n    return vec;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpod53_awq.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpod53_awq.cpp:20:5: error: \u2018vector\u2019\
    \ was not declared in this scope; did you mean \u2018std::vector\u2019?\n   20\
    \ |     vector<long> vec;\n      |     ^~~~~~\n      |     std::vector\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpod53_awq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpod53_awq.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ vec;\n      |            ^~~~\n/tmp/tmpod53_awq.cpp:31:9: error: \u2018vec\u2019\
    \ was not declared in this scope\n   31 |         vec.push_back(currentMax);\n\
    \      |         ^~~\n/tmp/tmpod53_awq.cpp:33:12: error: \u2018vec\u2019 was not\
    \ declared in this scope\n   33 |     return vec;\n      |            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long l = 0;\n    long r = arr.size()-1;\n\
    \    long m = std::numeric_limits<long>::max();\n    while (r - l > 1){\n    \
    \    long mid = l + (r - l) / 2;\n        if(m[mid]>arr[mid]){\n            l\
    \ = mid + 1;\n        }\n        else if(m[mid]<arr[mid]){\n            r = mid\
    \ - 1;\n        }\n        else{\n            res.push_back(m[mid]);\n       \
    \     l = mid + 1;\n            r = mid - 1;\n        }\n    }\n    while(l<=r){\n\
    \        if(arr[l]>arr[r]){\n            long temp = arr[l];\n            arr[l]\
    \ = arr[r];\n            arr[r] = temp;\n            res.push_back(arr[mid]);\n\
    \            l++;\n            r--;\n        }\n        else if(arr[l]<arr[r]){\n\
    \            r--;\n        }\n        else{\n            l++;\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2f34mujt.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp2f34mujt.cpp:25:17: error: invalid types \u2018\
    long int[long int]\u2019 for array subscript\n   25 |         if(m[mid]>arr[mid]){\n\
    \      |                 ^\n/tmp/tmp2f34mujt.cpp:28:22: error: invalid types \u2018\
    long int[long int]\u2019 for array subscript\n   28 |         else if(m[mid]<arr[mid]){\n\
    \      |                      ^\n/tmp/tmp2f34mujt.cpp:32:32: error: invalid types\
    \ \u2018long int[long int]\u2019 for array subscript\n   32 |             res.push_back(m[mid]);\n\
    \      |                                ^\n/tmp/tmp2f34mujt.cpp:42:31: error:\
    \ \u2018mid\u2019 was not declared in this scope\n   42 |             res.push_back(arr[mid]);\n\
    \      |                               ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long max_sum = 0;\n    std::vector<long> max_element;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long cur = arr[i];\n   \
    \     max_sum = std::max(max_sum, cur);\n        if (max_sum == cur) {\n     \
    \       max_element.push_back(cur);\n        }\n    }\n    // sort arr\n    std::vector<long>\
    \ tmp;\n    for (long i = 0; i < max_element.size(); i++) {\n        tmp.push_back(max_element[i]);\n\
    \    }\n    std::sort(tmp.begin(), tmp.end());\n    // return max_element\n  \
    \  return tmp;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo75tu2ka: /tmp/tmpo75tu2ka.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    res.reserve(arr.size());\n \
    \   for (long i = 0; i < k; i++) {\n        long max = -1000;\n        for (auto\
    \ j : arr) {\n            if (j > max) {\n                max = j;\n         \
    \   }\n        }\n        res.push_back(max);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpl8e0gk7d: /tmp/tmpl8e0gk7d.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::map<long, std::vector<long> > arrMap;\n    // Create\
    \ a map of element in the given array and sort them in ascending order\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        std::vector<long> arrInts;\n  \
    \      arrInts.push_back(arr[i]);\n        arrMap.insert(std::pair<long, std::vector<long>\
    \ >(arr[i], arrInts));\n    }\n\n    for (auto itr = arrMap.begin(); itr != arrMap.end();\
    \ itr++) {\n        std::sort(itr->second.begin(), itr->second.end());\n    }\n\
    \n    // Get the maximum k elements from the map.\n    std::vector<long> ans;\n\
    \    for (auto itr = arrMap.begin(); itr != arrMap.end(); itr++) {\n        ans.push_back(itr->first);\n\
    \        if (itr->second.size() > k) break;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpm2qivfqa: /tmp/tmpm2qivfqa.cpp:42: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    long n = arr.size();\n    std::vector<long>\
    \ result;\n    long largest = 0;\n    for (long i = 0; i < n; i++) {\n       \
    \ if(largest < arr[i])\n            largest = arr[i];\n    }\n    long index =\
    \ n - 1;\n    while(index >= 0 && arr[index] < largest)\n    {\n        \n   \
    \     for(long i = index + 1; i < n; i++)\n        {\n            if(arr[i] >\
    \ largest)\n            {\n                largest = arr[i];\n               \
    \ \n            }\n        }\n        \n        if(largest == arr[index])\n  \
    \      {\n            break;\n        }\n        \n        if(largest > arr[index])\n\
    \        {\n            result.resize(k);\n            for(long i = index; i >\
    \ index - 1; i--)\n            {\n                result[i] = result[i-1];\n \
    \           }\n            result[index] = largest;\n            index--;\n  \
    \          \n            while(index >= 0 && arr[index] > largest)\n         \
    \   {\n                \n                for(long i = index + 1; i < n; i++)\n\
    \                {\n                    if(arr[i] > largest)\n               \
    \     {\n                        largest = arr[i];\n                        \n\
    \                    }\n                }\n                \n                if(largest\
    \ == arr[index])\n                {\n                    break;\n            \
    \    }\n                \n                if(largest > arr[index])\n         \
    \       {\n                    result.resize(k);\n                    for(long\
    \ i = index; i > index - 1; i--)\n                    {\n                    \
    \    result[i] = result[i-1];\n                    }\n                    result[index]\
    \ = largest;\n                    index--;\n                    \n           \
    \     }\n            }\n        }\n    }\n    result.erase(result.end() - k);\n\
    \    \n    for(int i = 0; i < k; i++)\n    {\n        cout << result[i] << \"\
    \ \";\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7iv1frb.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpi7iv1frb.cpp:90:9: error: \u2018cout\u2019 was\
    \ not declared in this scope; did you mean \u2018std::cout\u2019?\n   90 |   \
    \      cout << result[i] << \" \";\n      |         ^~~~\n      |         std::cout\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpi7iv1frb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < arr.size();\
    \ i++)\n    {\n        long max = arr[i];\n        if (max>0)\n        {\n   \
    \         max = max(max,arr[i+1]);\n            max = max(max,arr[i+2]);\n   \
    \         max = max(max,arr[i+3]);\n            max = max(max,arr[i+4]);\n   \
    \         max = max(max,arr[i+5]);\n            result.push_back(max);\n     \
    \   }\n    }\n\n    std::vector<long>::iterator it;\n    for (it=result.begin();it!=result.end();it++)\n\
    \    {\n        std::cout << *it << \" \";\n    }\n    std::cout << std::endl;\n\
    \    \n    \n    return std::max_element(result.begin(),result.end());\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6370ioot.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp6370ioot.cpp:25:35: error: \u2018max\u2019 cannot\
    \ be used as a function\n   25 |             max = max(max,arr[i+1]);\n      |\
    \                                   ^\n/tmp/tmp6370ioot.cpp:26:35: error: \u2018\
    max\u2019 cannot be used as a function\n   26 |             max = max(max,arr[i+2]);\n\
    \      |                                   ^\n/tmp/tmp6370ioot.cpp:27:35: error:\
    \ \u2018max\u2019 cannot be used as a function\n   27 |             max = max(max,arr[i+3]);\n\
    \      |                                   ^\n/tmp/tmp6370ioot.cpp:28:35: error:\
    \ \u2018max\u2019 cannot be used as a function\n   28 |             max = max(max,arr[i+4]);\n\
    \      |                                   ^\n/tmp/tmp6370ioot.cpp:29:35: error:\
    \ \u2018max\u2019 cannot be used as a function\n   29 |             max = max(max,arr[i+5]);\n\
    \      |                                   ^\n/tmp/tmp6370ioot.cpp:42:28: error:\
    \ could not convert \u2018std::max_element<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(result.std::vector<long int>::begin(), result.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n   42 |     return std::max_element(result.begin(),result.end());\n\
    \      |            ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |   \
    \                         |\n      |                            __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code goes here\n    std::vector<long> vec(k);\n\
    \    std::partial_sum(arr.begin(), arr.end(), vec.begin());\n    std::partial_sum(vec.begin(),\
    \ vec.begin()+k, vec.begin());\n    std::vector<long> result;\n    std::set_difference(vec.begin(),\
    \ vec.begin()+k, arr.begin(), arr.end(), back_inserter(result));\n    std::sort(result.begin(),\
    \ result.end(), [](long a, long b){return a<b;});\n    return result;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp735no2im: /tmp/tmp735no2im.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n\tstd::vector<long> maxList;\n\t\
    std::sort(arr.begin(),arr.end());\n\tstd::set<long> maxSet;\n\tfor (int i=0;i<arr.size();i++)\n\
    \t{\n\t\tif(maxSet.find(arr[i])!=maxSet.end())\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\
    \t\telse\n\t\t{\n\t\t\tmaxSet.insert(arr[i]);\n\t\t\tmaxList.push_back(arr[i]);\n\
    \t\t}\n\t\tif(maxList.size()>k)\n\t\t\tmaxList.pop_back();\n\t}\n\treturn maxList;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmputv7dsxq: /tmp/tmputv7dsxq.cpp:42: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    std::partial_sort(arr.begin(),\
    \ arr.begin() + k, arr.end());\n    std::vector<long> ret;\n    ret.reserve(k);\n\
    \    for (long i = 0; i < k; i++) {\n        ret.push_back(arr[i]);\n    }\n \
    \   return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpaursc_mu: /tmp/tmpaursc_mu.cpp:31: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    if(arr.size() < k) return {};\n\
    \    auto max_val_it = std::max_element(arr.begin(), arr.begin() + k);\n    std::vector<long>\
    \ max_val(max_val_it - arr.begin(), max_val_it);\n    return max_val;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiv6xscuo.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpiv6xscuo.cpp:22:67: error: no matching function\
    \ for call to \u2018std::vector<long int>::vector(__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&)\u2019\n   22 |     std::vector<long> max_val(max_val_it\
    \ - arr.begin(), max_val_it);\n      |                                       \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpiv6xscuo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpiv6xscuo.cpp:22:67:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   22 |     std::vector<long> max_val(max_val_it - arr.begin(),\
    \ max_val_it);\n      |                                                      \
    \             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpiv6xscuo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> output(k, std::numeric_limits<long>::max());\n\
    \    for (auto val : arr) {\n        for (long i = 0; i < k; ++i) {\n        \
    \    if (output[i] < val)\n                output[i] = val;\n        }\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuvipmefz: /tmp/tmpuvipmefz.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long sum = 0;\n    std::vector<long> result;\n    for(int\
    \ i=0;i<arr.size();i++) {\n        if(sum >= arr[i]) {\n            sum += arr[i];\n\
    \            result.push_back(arr[i]);\n            if(sum >= k) {\n         \
    \       result.push_back(sum-(k+1));\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps29gkwk1: /tmp/tmps29gkwk1.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n\t// Your code goes here\n\tauto new_arr = {std::numeric_limits<int>::max(),\
    \ 0};\n\tauto it = arr.begin();\n\tint cnt = 1;\n\tfor (; cnt < k; ++cnt, ++it)\
    \ {\n\t\tif (*it > new_arr[0]) {\n\t\t\tnew_arr[0] = *it;\n\t\t}\n\t\tif (*it\
    \ == new_arr[0]) {\n\t\t\tnew_arr[1]++;\n\t\t}\n\t}\n\n\tstd::vector<long> ret;\n\
    \tret.reserve(new_arr[1]);\n\tit = arr.begin();\n\tint cnt = 0;\n\tfor (; cnt\
    \ < k; ++cnt, ++it) {\n\t\tif (*it == new_arr[0]) {\n\t\t\tret[cnt] = *it;\n\t\
    \t\t++cnt;\n\t\t}\n\t}\n\n\treturn ret;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepxwbjbu.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpepxwbjbu.cpp:24:20: error: no match for \u2018\
    operator[]\u2019 (operand types are \u2018std::initializer_list<int>\u2019 and\
    \ \u2018int\u2019)\n   24 |   if (*it > new_arr[0]) {\n      |               \
    \     ^\n/tmp/tmpepxwbjbu.cpp:25:11: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::initializer_list<int>\u2019 and \u2018int\u2019\
    )\n   25 |    new_arr[0] = *it;\n      |           ^\n/tmp/tmpepxwbjbu.cpp:27:21:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::initializer_list<int>\u2019\
    \ and \u2018int\u2019)\n   27 |   if (*it == new_arr[0]) {\n      |          \
    \           ^\n/tmp/tmpepxwbjbu.cpp:28:11: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::initializer_list<int>\u2019 and \u2018int\u2019\
    )\n   28 |    new_arr[1]++;\n      |           ^\n/tmp/tmpepxwbjbu.cpp:33:21:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::initializer_list<int>\u2019\
    \ and \u2018int\u2019)\n   33 |  ret.reserve(new_arr[1]);\n      |           \
    \          ^\n/tmp/tmpepxwbjbu.cpp:35:6: error: redeclaration of \u2018int cnt\u2019\
    \n   35 |  int cnt = 0;\n      |      ^~~\n/tmp/tmpepxwbjbu.cpp:22:6: note: \u2018\
    int cnt\u2019 previously declared here\n   22 |  int cnt = 1;\n      |      ^~~\n\
    /tmp/tmpepxwbjbu.cpp:37:21: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::initializer_list<int>\u2019 and \u2018int\u2019)\n   37\
    \ |   if (*it == new_arr[0]) {\n      |                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    for(int i=0;i<arr.size();i++)\n\
    \    {\n        max_arr.push_back(arr[i]);\n    }\n    sort(max_arr.begin(), max_arr.end());\n\
    \    \n    std::vector<long> max_arr1(max_arr.size());\n    \n    int c=0;\n \
    \   for(int i=0;i<max_arr.size();i++)\n    {\n        while(max_arr1[c]==max_arr[i])\n\
    \        {\n            c++;\n        }\n        max_arr1[c]=max_arr[i];\n   \
    \ }\n    \n    for(int i=0;i<k;i++)\n    {\n        max_arr.push_back(max_arr1.at(i));\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps7a_9kq9: /tmp/tmps7a_9kq9.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> arr1(arr.begin(), arr.end());\n    long\
    \ maximum = arr1[0];\n    long maximumIndex = 0;\n    for (long index = 1; index\
    \ < arr.size(); index++) {\n        if (maximum < arr1[index]) {\n           \
    \ maximum = arr1[index];\n            maximumIndex = index;\n        }\n    }\n\
    \n    if (maximumIndex == k) {\n        return arr;\n    } else {\n        return\
    \ arr;\n    }\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpu0cvw20c: /tmp/tmpu0cvw20c.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n\tstd::vector<long> maximum(k + 1, 0);\n\tfor (long i = 0; i\
    \ < arr.size(); i++) {\n\t\tmaximum[i] = std::max(maximum[i], arr[i]);\n\t}\n\t\
    std::vector<long> res;\n\tlong size = maximum.size();\n\tfor (long i = 1; i <\
    \ size; i++) {\n\t\tres.push_back(maximum[i]);\n\t}\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3wsp85a3: /tmp/tmp3wsp85a3.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long result=0;\n    long maxCount=1;\n    for(long i:arr)\n\
    \    {\n       result=max(result,i);\n       maxCount=max(maxCount,i);\n    }\n\
    \    long tempCount=maxCount;\n    for(long i:arr)\n    {\n       if(tempCount==maxCount)\n\
    \       {\n          if(result<i)\n             result=i;\n       }\n       else\n\
    \       {\n          tempCount=maxCount;\n          result=i;\n       }\n    }\n\
    \    std::vector<long> answer;\n    for(long i=0;i<k;i++)\n    {\n      answer.push_back(arr[result-tempCount]);\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6jts_53o.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp6jts_53o.cpp:23:15: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |    \
    \    result=max(result,i);\n      |               ^~~\n      |               std::max\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6jts_53o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n=arr.size();\n    long arr2[k];\n    for(long i=0;i<k;i++){\n\
    \        arr2[i]=arr[i];\n    }\n    long max=0;\n    long cur=0;\n    for(long\
    \ i=0;i<n;i++){\n        if(max<arr2[i]){\n            max=arr2[i];\n        \
    \    cur=i;\n        }\n    }\n    std::reverse(arr2+cur,arr2+n-1);\n    std::vector<long>\
    \ res(cur,0);\n    for(long i=0;i<k;i++){\n        if(max>arr2[i]){\n        \
    \    res.insert(res.begin()+i,arr2[i]);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_h5wgo43: /tmp/tmp_h5wgo43.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    \n    for (int i = 0; i < k;\
    \ i++) {\n        ans.push_back(0);\n    }\n    \n    for (int i = 0; i < arr.size();\
    \ i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] < arr[j])\
    \ {\n                long temp = ans[j];\n                ans[j] = arr[i];\n \
    \               arr[i] = temp;\n                break;\n            }\n      \
    \  }\n    }\n    \n    for (int i = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n\
    \    }\n    \n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps_4g4jkf: /tmp/tmps_4g4jkf.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(k <= arr.size());\n    std::sort(arr.begin(), arr.end());\n\
    \    std::vector<long> ret;\n    ret.reserve(k);\n    for (auto it = arr.begin();\
    \ it != arr.end(); it++)\n        if (it != arr.begin())\n            ret.pop_back();\n\
    \        ret.push_back(std::max(*it, *it));\n    return ret;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0u_vwai.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpy0u_vwai.cpp:26:33: error: \u2018it\u2019 was\
    \ not declared in this scope; did you mean \u2018int\u2019?\n   26 |         ret.push_back(std::max(*it,\
    \ *it));\n      |                                 ^~\n      |                \
    \                 int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long max = 0;\n    std::vector<long> v;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        long val = arr[i];\n        if (val >\
    \ max) {\n            max = val;\n        }\n    }\n    long long max2 = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long val = arr[i];\n   \
    \     if (val >= max)\n            v.push_back(val);\n        if (val > max2)\
    \ {\n            max2 = val;\n        }\n    }\n    if (k > v.size()) {\n    \
    \    std::cout << \"k is greater than the size of array.\" << std::endl;\n   \
    \     return v;\n    }\n    for (long i = 0; i < v.size(); i++) {\n        if\
    \ (k == v.size()) {\n            break;\n        }\n        if (k == 1) {\n  \
    \          v.push_back(v[0]);\n            break;\n        }\n        if (k ==\
    \ v.size() - 1) {\n            v.push_back(max2);\n            break;\n      \
    \  }\n        if (k > 1) {\n            if (v[i] >= v[k - 1] && v[i] >= v[k -\
    \ 2]) {\n                v.push_back(v[i]);\n            } else {\n          \
    \      if (v[k - 1] >= v[k - 2] && v[k - 1] >= v[k - 3]) {\n                 \
    \   v.push_back(v[k - 1]);\n                } else {\n                    if (v[k\
    \ - 2] >= v[k - 3]) {\n                        v.push_back(v[k - 2]);\n      \
    \              } else {\n                        if (v[k - 3] >= v[k - 2]) {\n\
    \                            v.push_back(v[k - 3]);\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return v;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: "k is greater than the size of array.\n"
  stderr: "tmp1gbyycem: /tmp/tmp1gbyycem.cpp:74: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_ele = arr[0];\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_ele) {\n       \
    \     max_ele = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n\
    \        if (arr[i] == max_ele) {\n            result.push_back(arr[i]);\n   \
    \     } else if (arr[i] != max_ele) {\n            result.push_back(-arr[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppdvp5lyt: /tmp/tmppdvp5lyt.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (k > arr.size()) {\n        throw std::invalid_argument(\"\
    k > arr.size()\");\n    }\n    std::vector<long> res(arr.size());\n    long maxVal\
    \ = -1000000000;\n    long start = 0;\n    long end = 0;\n    for (int i = 0;\
    \ i < k; i++) {\n        end = arr.size();\n        while (end > start) {\n  \
    \          res[end] = max(arr[start], arr[end]);\n            end--;\n       \
    \ }\n        start++;\n        maxVal = max(maxVal, res[end]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bmyvzr4.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp2bmyvzr4.cpp:29:24: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   29 |    \
    \         res[end] = max(arr[start], arr[end]);\n      |                     \
    \   ^~~\n      |                        std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bmyvzr4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp2bmyvzr4.cpp:33:18: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   33 |         maxVal = max(maxVal, res[end]);\n      |                  ^~~\n\
    \      |                  std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bmyvzr4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    max_arr.resize(k);\n   \
    \ for (int i = 0; i < k; i++) {\n        max_arr[i] = arr[i];\n    }\n    long\
    \ max_idx = k;\n    for (int i = 0; i < arr.size(); i++) {\n        if (max_idx\
    \ > arr.size() || max_arr[i] > arr[i]) {\n            long cur_idx = i;\n    \
    \        for (int j = i; j < k; j++) {\n                if (max_arr[j] > max_arr[cur_idx])\
    \ {\n                    cur_idx = j;\n                }\n            }\n    \
    \        max_arr[cur_idx] = max_arr[i];\n            max_idx = cur_idx;\n    \
    \    }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphcnxtjb1: /tmp/tmphcnxtjb1.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long index = 1;\n    while (index\
    \ <= k) {\n        if (index > arr.size()) {\n            break;\n        }\n\
    \        if (arr[index] > arr[index - 1]) {\n            std::swap(arr[index -\
    \ 1], arr[index]);\n        }\n        index++;\n    }\n    ans.swap(arr);\n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmprrqs6qlb': realloc(): invalid next size: 0x0000000001b56cd0\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x7f474)[0x2ae81c949474]\n\
    /lib64/libc.so.6(+0x84861)[0x2ae81c94e861]\n/lib64/libc.so.6(+0x86ce2)[0x2ae81c950ce2]\n\
    /lib64/libc.so.6(vasprintf+0xdb)[0x2ae81c941eab]\n/lib64/libc.so.6(asprintf+0x87)[0x2ae81c91d6a7]\n\
    /lib64/libc.so.6(+0x2f102)[0x2ae81c8f9102]\n/lib64/libc.so.6(+0x2f252)[0x2ae81c8f9252]\n\
    /tmp/tmprrqs6qlb[0x400b8d]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2ae81c8ec555]\n\
    /tmp/tmprrqs6qlb[0x4008a9]\n======= Memory map: ========\n00400000-00405000 r-xp\
    \ 00000000 08:02 28696                              /tmp/tmprrqs6qlb\n00604000-00605000\
    \ r--p 00004000 08:02 28696                              /tmp/tmprrqs6qlb\n00605000-00606000\
    \ rw-p 00005000 08:02 28696                              /tmp/tmprrqs6qlb\n01b45000-01b77000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2ae81bdb3000-2ae81bdd5000\
    \ r-xp 00000000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2ae81bdd5000-2ae81bdd8000\
    \ rw-p 00000000 00:00 0 \n2ae81bdf1000-2ae81bdf6000 rw-p 00000000 00:00 0 \n2ae81bfd4000-2ae81bfd5000\
    \ r--p 00021000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2ae81bfd5000-2ae81bfd6000\
    \ rw-p 00022000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2ae81bfd6000-2ae81bfd7000\
    \ rw-p 00000000 00:00 0 \n2ae81bfd7000-2ae81c1a0000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2ae81c1a0000-2ae81c39f000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ae81c39f000-2ae81c3aa000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ae81c3aa000-2ae81c3ad000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ae81c3ad000-2ae81c3b0000 rw-p 00000000 00:00 0 \n2ae81c3b0000-2ae81c4b1000 r-xp\
    \ 00000000 08:01 50333482                   /usr/lib64/libm-2.17.so\n2ae81c4b1000-2ae81c6b0000\
    \ ---p 00101000 08:01 503"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n        // Write your code here\n        \n        \n      \
    \  return {};\n    }\n    \n// }\nint main(){\n    ios_base::sync_with_stdio(0);\n\
    \    cin.tie(0); cout.tie(0);\n    \n    \n    \n    std::vector<long> arr = {-3,\
    \ 2, 1, 2, -1, -2, 1};\n    long k = 3;\n    \n    \n    std::vector<long> result\
    \ = maximum(arr, k);\n    for(auto i : result){\n        cout << i << \" \";\n\
    \    }\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpny_u_4oa.cpp: In function \u2018int main()\u2019:\n/tmp/tmpny_u_4oa.cpp:27:5:\
    \ error: \u2018ios_base\u2019 has not been declared\n   27 |     ios_base::sync_with_stdio(0);\n\
    \      |     ^~~~~~~~\n/tmp/tmpny_u_4oa.cpp:28:5: error: \u2018cin\u2019 was not\
    \ declared in this scope; did you mean \u2018std::cin\u2019?\n   28 |     cin.tie(0);\
    \ cout.tie(0);\n      |     ^~~\n      |     std::cin\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpny_u_4oa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n/tmp/tmpny_u_4oa.cpp:28:17:\
    \ error: \u2018cout\u2019 was not declared in this scope; did you mean \u2018\
    std::cout\u2019?\n   28 |     cin.tie(0); cout.tie(0);\n      |              \
    \   ^~~~\n      |                 std::cout\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpny_u_4oa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpny_u_4oa.cpp:\
    \ At global scope:\n/tmp/tmpny_u_4oa.cpp:41:5: error: redefinition of \u2018int\
    \ main()\u2019\n   41 | int main() {\n      |     ^~~~\n/tmp/tmpny_u_4oa.cpp:26:5:\
    \ note: \u2018int main()\u2019 previously defined here\n   26 | int main(){\n\
    \      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long largest = arr[0], counter = 1;\n    std::vector<long>\
    \ res;\n    for(long i = 2; i < arr.size(); i++){\n        if(arr[i] > largest){\n\
    \            largest = arr[i];\n            counter = 1;\n        }\n        else\
    \ if(arr[i] == largest){\n            counter++;\n        }\n        else{\n \
    \           counter = 1;\n            largest = arr[i];\n        }\n        if(counter\
    \ == k){\n            res.push_back(largest);\n            counter = 1;\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6bfm5acn: /tmp/tmp6bfm5acn.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long max_so_far = 0, curr_max = arr[0];\n\
    \    long i = 0;\n    for (; i < k; i++) {\n        if (arr[i] > curr_max) {\n\
    \            max_so_far = curr_max;\n            curr_max = arr[i];\n        }\
    \ else {\n            if (curr_max == arr[i]) {\n                max_so_far =\
    \ curr_max;\n                curr_max = arr[i];\n            }\n        }\n  \
    \  }\n    max_so_far = curr_max;\n    std::vector<long> ans;\n    for (int i =\
    \ 0; i < k; i++) {\n        if (arr[i] == max_so_far) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpug0td865: /tmp/tmpug0td865.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // Write your code here\n  long max=0;\n  for(int i=0;i<k;i++){\n\
    \    if(arr[i]>max)\n    max=arr[i];\n  }\n  std::vector<long> arr2(k,max);\n\
    \  std::sort(arr.begin(),arr.end());\n  for(long i=0;i<k;i++){\n    if(arr[i]>arr2[i]){\n\
    \      arr2[i]=arr[i];\n    }\n  }\n  return arr2;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpowmrya88: /tmp/tmpowmrya88.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long i = 0;\n    std::vector<long> result;\n\n    result.push_back(arr[0]);\n\
    \    for(size_t j = 1; j < arr.size(); j++) {\n        if(arr[j] > result[k -\
    \ 1]) {\n            k = j;\n        }\n    }\n    for(; i < k; i++) {\n     \
    \   result.push_back(arr[i]);\n    }\n    \n    result.push_back(arr[k]);\n  \
    \  \n    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwh4p35xl: /tmp/tmpwh4p35xl.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> res;\n    for\
    \ (long i = 0; i < k; i++) {\n        long max = arr[0];\n        for (long j\
    \ = 0; j < n; j++) {\n            if (max < arr[j]) {\n                max = arr[j];\n\
    \            }\n        }\n        res.push_back(max);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp26l1qe13: /tmp/tmp26l1qe13.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  assert(arr.size() >= k);\n  std::set<long> m;\n  long maximum\
    \ = arr[k - 1];\n  for (long i = 0; i < arr.size(); i++) {\n    if (m.size() <\
    \ k) {\n      m.insert(arr[i]);\n      if (arr[i] > maximum) maximum = arr[i];\n\
    \    } else {\n      long m = m.begin()->first;\n      long n = arr[i];\n    \
    \  m.insert(n);\n      if (n > maximum) maximum = n;\n      if (m.size() == k)\
    \ break;\n    }\n  }\n  m.insert(maximum);\n  std::vector<long> ans(k);\n  for\
    \ (long i = 0; i < k; i++)\n    ans[i] = m.find(ans[i]) - m.begin();\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvg9_diy9.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpvg9_diy9.cpp:27:18: error: request for member\
    \ \u2018begin\u2019 in \u2018m\u2019, which is of non-class type \u2018long int\u2019\
    \n   27 |       long m = m.begin()->first;\n      |                  ^~~~~\n/tmp/tmpvg9_diy9.cpp:29:9:\
    \ error: request for member \u2018insert\u2019 in \u2018m\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   29 |       m.insert(n);\n      |         ^~~~~~\n\
    /tmp/tmpvg9_diy9.cpp:31:13: error: request for member \u2018size\u2019 in \u2018\
    m\u2019, which is of non-class type \u2018long int\u2019\n   31 |       if (m.size()\
    \ == k) break;\n      |             ^~~~\n/tmp/tmpvg9_diy9.cpp:37:29: error: no\
    \ match for \u2018operator-\u2019 (operand types are \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} and \u2018std::set<long\
    \ int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019\
    })\n   37 |     ans[i] = m.find(ans[i]) - m.begin();\n      |              ~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~\n      |                    |                 |\n      |       \
    \             |                 _Rb_tree_const_iterator<[...]>\n      |      \
    \              _Rb_tree_const_iterator<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvg9_diy9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n        \n        long max = 0;\n        for(int i=0;i<k;i++){\n\
    \            \n            if(arr[i] > max){\n                max = arr[i];\n\
    \            }\n            \n        }\n        \n        \n        std::vector<long>\
    \ ans(k);\n        ans[0] = max;\n        long tmp = 0;\n        for(int i=1;i<k;i++){\n\
    \            tmp = max;\n            if(arr[i] > max){\n                max =\
    \ arr[i];\n            }\n            \n            \n            if(arr[i] >\
    \ tmp){\n                ans[i] = tmp;\n            }\n        }\n        return\
    \ ans;\n        \n        \n        \n        \n        \n    }\n    \n    \n\n\
    //  Testcases\nvoid test1() {\n    std::cout << \"Testcase1 : \" << std::endl;\n\
    \    int arr[] = {4, -4, 4};\n    int k = 3;\n    std::vector<int> ans = maximum(arr,\
    \ k);\n    for (int i = 0; i < k; i++) {\n        std::cout << ans[i] << \" \"\
    ;\n    }\n    std::cout << std::endl;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2hdx7a8v.cpp: In function \u2018void test1()\u2019:\n/tmp/tmp2hdx7a8v.cpp:60:36:\
    \ error: could not convert \u2018(int*)(& arr)\u2019 from \u2018int*\u2019 to\
    \ \u2018std::vector<long int>\u2019\n   60 |     std::vector<int> ans = maximum(arr,\
    \ k);\n      |                                    ^~~\n      |               \
    \                     |\n      |                                    int*\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> res(k, 0);\n    for\
    \ (long i : arr) {\n        res[i] += 1;\n        if (res[i] > k) res[i] = k;\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqs9gwoyi: /tmp/tmpqs9gwoyi.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    \n    return arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7bedfag2: /tmp/tmp7bedfag2.cpp:25: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::iota(arr.begin(), arr.end(), 0);\n    \n    if (arr.size()\
    \ <= k || k <= 0) {\n        return arr;\n    }\n    \n    std::vector<long> maxVec(arr.size()-k\
    \ + 1, 0);\n    \n    for (long i=0; i<arr.size()-k && i<maxVec.size(); i++) {\n\
    \        maxVec[i] = maxVec[i] > arr[i] ? maxVec[i] : arr[i];\n    }\n    \n \
    \   for (long i=0; i<maxVec.size() && i<k; i++) {\n        maxVec[i] = maxVec[i]\
    \ > maxVec[i-1] ? maxVec[i] : maxVec[i-1];\n    }\n    \n    return maxVec;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_efaspg5: /tmp/tmp_efaspg5.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    std::vector<long> result;\n\
    \    long maxnum = arr[0];\n    long currnum = arr[0];\n    int count = 0;\n \
    \   \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > maxnum)\
    \ {\n            maxnum = arr[i];\n            currnum = maxnum;\n        }\n\
    \        if (currnum < arr[i]) {\n            currnum = arr[i];\n        }\n \
    \       \n        if (count == k) {\n            result.push_back(maxnum);\n \
    \       }\n        \n        count++;\n    }\n\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpj6pl3_ph: /tmp/tmpj6pl3_ph.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ret(k);\n    for\
    \ (int i = 0; i < k; ++i) {\n        ret[i] = -arr[0];\n        for (int j = 0;\
    \ j < arr.size() - 1; ++j) {\n            if (arr[j] > arr[j + 1]) {\n       \
    \         ret[i] = max(ret[i], arr[j]);\n            }\n        }\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxbyjw2wm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxbyjw2wm.cpp:25:26: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \             ret[i] = max(ret[i], arr[j]);\n      |                         \
    \ ^~~\n      |                          std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxbyjw2wm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    if (k >= n)\n        return arr;\n\
    \    long max_k = std::min(k, n);\n    long max_val = 0;\n    for (long i = 0;\
    \ i < n; i++) {\n        max_val = (max_val < arr[i]) ? arr[i] : max_val;\n  \
    \  }\n    std::vector<long> max_arr;\n    for (long i = 0; i < max_k; i++)\n \
    \       max_arr.push_back(max_val);\n    return max_arr;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4l_r91vs: /tmp/tmp4l_r91vs.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> vec;\n    if (arr.empty())\n        return\
    \ vec;\n    auto max = std::numeric_limits<long>::max();\n    for (int i = 0;\
    \ i < k; i++) {\n        max = std::max(max, arr[i]);\n    }\n    vec.push_back(max);\n\
    \    for (auto i : arr) {\n        if (std::abs(i) < max)\n            vec.push_back(i);\n\
    \    }\n    return vec;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp854eixwr: /tmp/tmp854eixwr.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9prb0kp_: /tmp/tmp9prb0kp_.cpp:23: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    long n = (arr.size()\
    \ == k ? arr.size() : k);\n    std::vector<long> ans;\n    for (long i = 0; i\
    \ < n; ++i) {\n        ans.push_back(arr[i]);\n        if (i == n - 1) {\n   \
    \         break;\n        }\n        long j = i + 1;\n        while (j < n &&\
    \ arr[j] >= arr[j + 1]) {\n            ++j;\n        }\n        ans.push_back(arr[j]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmparwvgkvd: /tmp/tmparwvgkvd.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    assert(k<=arr.size() && k>0\
    \ && k<=INT_MAX);\n    long long ans=INT_MAX;\n    std::vector<long> maxv;\n \
    \   for(long i=0;i<arr.size();i++){\n        if(arr[i]>ans){\n            ans=arr[i];\n\
    \            maxv.resize(k);\n        }\n        if(arr[i]>ans && i<k){\n    \
    \        maxv[i]=arr[i];\n        }\n    }\n    return maxv;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfy298_zo: /tmp/tmpfy298_zo.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    int n = arr.size();\n  \
    \  long cur = arr[0];\n    long max_val = cur;\n\n    for (int i = 1; i < n; i++)\
    \ {\n        if (arr[i] > cur) {\n            max_val = cur;\n        }\n    \
    \    cur = arr[i];\n    }\n    max_arr.push_back(cur);\n    for (int i = 0; i\
    \ < n; i++) {\n        cur = arr[i];\n        if (cur > max_val) {\n         \
    \   max_val = cur;\n        }\n        if (max_val == cur) {\n            max_arr.push_back(cur);\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpeqhp9yx7: /tmp/tmpeqhp9yx7.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long len = arr.size();\n    std::vector<long> v;\n    for(long\
    \ i = 0; i < k; i++) {\n        long max = -arr[0];\n        for(long j = 1; j\
    \ < len; j++) {\n            if(max < arr[j]) {\n                max = arr[j];\n\
    \            }\n        }\n        v.push_back(max);\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_dh45smy: /tmp/tmp_dh45smy.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    \n    std::vector<long>\
    \ max_arr(k);\n    \n    int i = 0;\n    for (long j : arr) {\n        if (i >=\
    \ k) {\n            break;\n        }\n        max_arr[i] = std::max(j, max_arr[i]);\n\
    \        i++;\n    }\n\n    return max_arr;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbspfsctf: /tmp/tmpbspfsctf.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> ans;\n  long largest = arr[0];\n  long count\
    \ = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > largest) {\n\
    \      ans.push_back(arr[i]);\n      largest = arr[i];\n    }\n  }\n  while (k\
    \ >= count) {\n    ans.push_back(largest);\n    largest++;\n    count++;\n  }\n\
    \  for (int i = count - 1; i >= k; i--) {\n    ans.push_back(arr[i]);\n  }\n \
    \ return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp24ojrfgx: /tmp/tmp24ojrfgx.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Write your code here\n    if (arr.size() < k) {\n   \
    \     return {};\n    }\n    long min_element = arr[0];\n    long index = 0;\n\
    \    std::vector<long> ans;\n    for (auto&& x : arr) {\n        if (x > min_element)\
    \ {\n            ans.push_back(min_element);\n            index++;\n        }\n\
    \        min_element = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp177pyvfs: /tmp/tmp177pyvfs.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    if (k <= 0 || k > arr.size()) {\n    \
    \    std::cout << \"Invalid input!\" << std::endl;\n        return {};\n    }\n\
    \    std::vector<long> res;\n    std::partial_sort(arr.begin(), arr.begin() +\
    \ k, std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9e3zgorm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp9e3zgorm.cpp:25:76: error: no matching function\
    \ for call to \u2018partial_sort(std::vector<long int>::iterator, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, std::back_insert_iterator<std::vector<long int>\
    \ >)\u2019\n   25 |     std::partial_sort(arr.begin(), arr.begin() + k, std::back_inserter(res));\n\
    \      |                                                                     \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9e3zgorm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4668:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::partial_sort(_RAIter,\
    \ _RAIter, _RAIter)\u2019\n 4668 |     partial_sort(_RandomAccessIterator __first,\n\
    \      |     ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4668:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9e3zgorm.cpp:25:76:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    std::back_insert_iterator<std::vector<long int> >\u2019)\n   25 |     std::partial_sort(arr.begin(),\
    \ arr.begin() + k, std::back_inserter(res));\n      |                        \
    \                                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9e3zgorm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4706:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::partial_sort(_RAIter,\
    \ _RAIter, _RAIter, _Compare)\u2019\n 4706 |     partial_sort(_RandomAccessIterator\
    \ __first,\n      |     ^~~~~~~~~~~~\n/shared/cento"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (k <= 0 || arr.size() == 0) return {};\n    std::partial_sort_copy(arr.begin(),\
    \ arr.begin() + k, arr.end(), arr.begin());\n    if (arr.size() == k) return arr;\n\
    \    if (arr.size() > k) k++;\n    return maximum(arr, k);\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmpe3h6_kh0': realloc(): invalid next size: 0x0000000001e67cd0\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x7f474)[0x2b7f1cfa8474]\n\
    /lib64/libc.so.6(+0x84861)[0x2b7f1cfad861]\n/lib64/libc.so.6(+0x86ce2)[0x2b7f1cfafce2]\n\
    /lib64/libc.so.6(vasprintf+0xdb)[0x2b7f1cfa0eab]\n/lib64/libc.so.6(asprintf+0x87)[0x2b7f1cf7c6a7]\n\
    /lib64/libc.so.6(+0x2f102)[0x2b7f1cf58102]\n/lib64/libc.so.6(+0x2f252)[0x2b7f1cf58252]\n\
    /tmp/tmpe3h6_kh0[0x400c1b]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2b7f1cf4b555]\n\
    /tmp/tmpe3h6_kh0[0x4008a9]\n======= Memory map: ========\n00400000-00406000 r-xp\
    \ 00000000 08:02 25225                              /tmp/tmpe3h6_kh0\n00605000-00606000\
    \ r--p 00005000 08:02 25225                              /tmp/tmpe3h6_kh0\n00606000-00607000\
    \ rw-p 00006000 08:02 25225                              /tmp/tmpe3h6_kh0\n01e56000-01e88000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2b7f1c412000-2b7f1c434000\
    \ r-xp 00000000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2b7f1c434000-2b7f1c437000\
    \ rw-p 00000000 00:00 0 \n2b7f1c450000-2b7f1c455000 rw-p 00000000 00:00 0 \n2b7f1c633000-2b7f1c634000\
    \ r--p 00021000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2b7f1c634000-2b7f1c635000\
    \ rw-p 00022000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2b7f1c635000-2b7f1c636000\
    \ rw-p 00000000 00:00 0 \n2b7f1c636000-2b7f1c7ff000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2b7f1c7ff000-2b7f1c9fe000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b7f1c9fe000-2b7f1ca09000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b7f1ca09000-2b7f1ca0c000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b7f1ca0c000-2b7f1ca0f000 rw-p 00000000 00:00 0 \n2b7f1ca0f000-2b7f1cb10000 r-xp\
    \ 00000000 08:01 50333482                   /usr/lib64/libm-2.17.so\n2b7f1cb10000-2b7f1cd0f000\
    \ ---p 00101000 08:01 503"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long start = 0, end = 0, res = 0;\n    while (start < arr.size()\
    \ && end < arr.size()) {\n        if (end - start <= k) {\n            for (long\
    \ i = start; i < end; i++) {\n                res = std::max(res, arr[i]);\n \
    \           }\n            start = end;\n        } else {\n            for (long\
    \ i = start; i < arr.size(); i++) {\n                if (arr[i] > arr[i + k])\
    \ {\n                    end = i + 1;\n                } else {\n            \
    \        start = i;\n                    break;\n                }\n         \
    \   }\n        }\n    }\n    std::vector<long> resVec;\n    for (long i = start;\
    \ i < arr.size(); i++) {\n        resVec.push_back(arr[i]);\n    }\n    return\
    \ resVec;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(0 <= k && k <= arr.size());\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n \
    \   }\n    ans.push_back(k);\n    std::vector<long> ret(ans.begin(), ans.end());\n\
    \    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpalm8185m: /tmp/tmpalm8185m.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long max = arr[0], max_index = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    std::vector<long> ans(k);\n\
    \    ans[max_index] = max;\n    int cnt = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > ans[max_index]) {\n            ans[cnt++] = arr[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpcxaa1htx: /tmp/tmpcxaa1htx.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n\tassert(arr.size() <= 1000 && \"Array size should be in range\"\
    );\n\tassert(k <= arr.size() && \"Value k should be less than array size\");\n\
    \tstd::sort(arr.begin(), arr.end());\n\tstd::partial_sort_copy(arr.begin(), arr.begin()\
    \ + k, arr.end(), arr.begin());\n\tstd::partial_sort_copy(arr.begin() + k, arr.end(),\
    \ arr.end(), arr.begin() + k);\n\treturn std::vector(arr);\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyt_wtc19.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpyt_wtc19.cpp:24:20: error: missing template\
    \ arguments before \u2018(\u2019 token\n   24 |  return std::vector(arr);\n  \
    \    |                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long long max_num = 0,\
    \ max_index = -1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ >= 0 && arr[i] > max_num){\n            max_num = arr[i];\n            max_index\
    \ = i;\n        }\n    }\n    for(int i = max_index; i< max_arr.size(); i++){\n\
    \        max_arr[i] = max_num;\n    }\n    \n    std::sort(max_arr.begin(), max_arr.end());\n\
    \    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp2gx3zao: /tmp/tmpp2gx3zao.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long ans = 0;\n    for (long i = 0; i < k; i++) {\n\
    \        std::nth_element(arr.begin(), arr.begin() + i, arr.end());\n        ans\
    \ = std::max(ans, arr[i]);\n    }\n    return std::vector<long>(arr.begin() +\
    \ k, arr.begin() + ans);\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvx86mfbp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpvx86mfbp.cpp:22:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   22 |         ans = std::max(ans, arr[i]);\n\
    \      |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvx86mfbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpvx86mfbp.cpp:22:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         ans\
    \ = std::max(ans, arr[i]);\n      |                                   ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // your code goes here\n    std::vector<long> maximumVector;\n\
    \    for(long i = 0; i < k; i++)\n    {\n        long maxElement = arr[0];\n \
    \       for(long j = 0; j < arr.size(); j++)\n        {\n            if(arr[j]\
    \ > maxElement)\n            {\n                maxElement = arr[j];\n       \
    \     }\n        }\n        maximumVector.push_back(maxElement);\n    }\n    return\
    \ maximumVector;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6o4w3sbl: /tmp/tmp6o4w3sbl.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n        long n = arr.size();\n        if (k > n) k = n;\n  \
    \      std::vector<long> maxKArr(k);\n        long currMax = arr[0], startPos\
    \ = 0;\n        long cnt = 0;\n        for(long i = 0; i < n; i++){\n        \
    \    long val = arr[i];\n            long pos = 0;\n            long prevPos =\
    \ 0;\n            while (pos < k && (currMax < val || pos == 0)) {\n         \
    \       pos += 1;\n                val = arr[pos + 1];\n                pos =\
    \ 0;\n            }\n            maxKArr[cnt] = val;\n            cnt += 1;\n\
    \            currMax = maxKArr[cnt - 1];\n            startPos = i;\n        }\n\
    \        for(long i = 0; i < k; i++){\n            assert(startPos >= 0 && startPos\
    \ < n);\n            assert(maxKArr[i] <= arr[startPos + 1]);\n            assert(maxKArr[i]\
    \ <= arr[startPos]);\n        }\n        return maxKArr;\n    }\n\n    int main(){\n\
    \        std::ios::sync_with_stdio(false);\n        cin.tie(nullptr);\n      \
    \  cout.tie(nullptr);\n        // int testCases;\n        std::cin >> testCases;\n\
    \        while(testCases--){\n            std::vector<long> arr;\n           \
    \ std::vector<long> res = maximum( arr, testCases);\n            for(long i =\
    \ 0; i < res.size(); i++){\n                std::cout << res[i] << \" \";\n  \
    \          }\n            std::cout << std::endl;\n        }\n        return 0;\n\
    \    }\n\n    // #include<bits/stdc++.h>\n    // Given an array arr of integers\
    \ and a positive integer k, return a sorted list \n    // of length k with the\
    \ minimum k numbers in arr.\n    // Example 1:\n    // Input: arr = [3, -4, -5,\
    \ 2, 5], k = 2\n    // Output: [-5, -4, 2, 3]\n    // Example 2:\n    // Input:\
    \ arr = [5, 3, -4, -2, 0, 2], k = 1\n    // Output: [-2, 0, 3]\n    // Note:\n\
    \    // 1. The length of the array will be in the range of [1, 1000].\n    //\
    \ 2. The elements in the array will be in the range of [-1000, 1000].\n    //\
    \ 3. 0 <= k <= len(arr)\n    std::vector<long> minimum(std::vector<long> arr,\
    \ long k) {\n        long n = arr.size();\n        if (k > n) k = n;\n       \
    \ std::vector<long> minKArr(k);\n        long currMin = arr[0], startPos = 0;\n\
    \        long cnt = 0;\n        for(long i = 0; i < n; i++){\n            long\
    \ val = arr[i];\n            long pos = 0;\n            long prevPos = 0;\n  \
    \          while (pos < k && (currMin > val || pos == 0)) {\n                \n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5sanya3m.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5sanya3m.cpp:48:9:\
    \ error: \u2018cin\u2019 was not declared in this scope; did you mean \u2018std::cin\u2019\
    ?\n   48 |         cin.tie(nullptr);\n      |         ^~~\n      |         std::cin\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp5sanya3m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n/tmp/tmp5sanya3m.cpp:49:9:\
    \ error: \u2018cout\u2019 was not declared in this scope; did you mean \u2018\
    std::cout\u2019?\n   49 |         cout.tie(nullptr);\n      |         ^~~~\n \
    \     |         std::cout\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp5sanya3m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp5sanya3m.cpp:51:21:\
    \ error: \u2018testCases\u2019 was not declared in this scope\n   51 |       \
    \  std::cin >> testCases;\n      |                     ^~~~~~~~~\n/tmp/tmp5sanya3m.cpp:\
    \ In function \u2018std::vector<long int> minimum(std::vector<long int>, long\
    \ int)\u2019:\n/tmp/tmp5sanya3m.cpp:89:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   89 | int main() {\n      |     \
    \       ^\n/tmp/tmp5sanya3m.cpp:102:1: error: expected \u2018}\u2019 at end of\
    \ input\n  102 | }\n      | ^\n/tmp/tmp5sanya3m.cpp:82:36: note: to match this\
    \ \u2018{\u2019\n   82 |         for(long i = 0; i < n; i++){\n      |       \
    \                             ^\n/tmp/tmp5sanya3m.cpp:102:1: error: expected \u2018\
    }\u2019 at end of input\n  102 | }\n      | ^\n/tmp/tmp5sanya3m.cpp:76:62: note:\
    \ to match this \u2018{\u2019\n   76 |     std::vector<long> minimum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \          ^\n/tmp/tmp5sanya3m.cpp:102:1: warning: no return state"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n     std::vector<long> res;\n    \n    \n    long max_size\
    \ = arr.size();\n    if(max_size < k){\n        return res;\n    }\n    // Create\
    \ a vector with k zeros, where each element denotes the maximum number of elements\
    \ from arr we have\n    std::vector<long> temp(max_size,0);\n    // Now the problem\
    \ is to solve the max subarray problem.\n    long cur_size = 0;\n    long max_idx\
    \ = 0;\n    while(cur_size < k){\n        if(temp[cur_size] > max_idx){\n    \
    \        max_idx = temp[cur_size];\n        }\n        cur_size ++;\n        //\
    \ If we have selected an element which is greater than max element in the array\n\
    \        // then we will update max_size to k and set temp[max_size] to max_idx\n\
    \        // This would help us get the max k elements after sorting the array\n\
    \        if(temp[max_size] > max_idx){\n            max_size = k;\n          \
    \  temp[max_size] = max_idx;\n        }\n    }\n    res.push_back(arr[max_idx]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmp45a6z46v': free(): invalid next size (fast): 0x0000000000addc60\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2ab949b0e329]\n\
    /tmp/tmp45a6z46v[0x4032ec]\n/tmp/tmp45a6z46v[0x402e2c]\n/tmp/tmp45a6z46v[0x40277e]\n\
    /tmp/tmp45a6z46v[0x402456]\n/tmp/tmp45a6z46v[0x4024a7]\n/tmp/tmp45a6z46v[0x400be1]\n\
    /tmp/tmp45a6z46v[0x400d34]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2ab949aaf555]\n\
    /tmp/tmp45a6z46v[0x4009e9]\n======= Memory map: ========\n00400000-00406000 r-xp\
    \ 00000000 08:02 25237                              /tmp/tmp45a6z46v\n00605000-00606000\
    \ r--p 00005000 08:02 25237                              /tmp/tmp45a6z46v\n00606000-00607000\
    \ rw-p 00006000 08:02 25237                              /tmp/tmp45a6z46v\n00acc000-00b1f000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2ab948f76000-2ab948f98000\
    \ r-xp 00000000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2ab948f98000-2ab948f9b000\
    \ rw-p 00000000 00:00 0 \n2ab948fb4000-2ab948fb9000 rw-p 00000000 00:00 0 \n2ab949197000-2ab949198000\
    \ r--p 00021000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2ab949198000-2ab949199000\
    \ rw-p 00022000 08:01 50332369                   /usr/lib64/ld-2.17.so\n2ab949199000-2ab94919a000\
    \ rw-p 00000000 00:00 0 \n2ab94919a000-2ab949363000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2ab949363000-2ab949562000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ab949562000-2ab94956d000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ab94956d000-2ab949570000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ab949570000-2ab949573000 rw-p 00000000 00:00 0 \n2ab949573000-2ab949674000 r-xp\
    \ 00000000 08:01 50333482                   /usr/lib64/libm-2.17.so\n2ab949674000-2ab949873000\
    \ ---p 00101000 08:01 50333482                   /usr/lib64/libm-2.17.so\n2ab949873000-2ab949874000\
    \ r--p 00100000 08:01 50333482 "
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n    // Your code here\n    std::vector<long> ans;\n  \
    \  std::vector<long> tmp;\n    for (long i=0; i<arr.size();i++) {\n        if\
    \ (i>0) {\n            if (arr[i]>arr[i-1]) {\n                tmp.push_back(arr[i-1]);\n\
    \                ans.push_back(tmp.back());\n                tmp.pop_back();\n\
    \            }\n        }\n        tmp.push_back(arr[i]);\n        ans.push_back(tmp.back());\n\
    \        tmp.pop_back();\n    }\n    return ans;\n    \n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphwfnsz10: /tmp/tmphwfnsz10.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> arr1;\n    if (arr.size() <= k) {\n  \
    \      return arr;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  long pos = i;\n        for (int j = i; j < arr.size(); j++) {\n           \
    \ if (arr[j] < arr[pos]) {\n                pos = j;\n            }\n        }\n\
    \        arr1.push_back(arr[pos]);\n    }\n    return arr1;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplsswk4kc: /tmp/tmplsswk4kc.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // TODO\n    // 1. Write your code here\n    \n    std::sort(arr.begin(),\
    \ arr.end());\n    return arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzrzeucwu: /tmp/tmpzrzeucwu.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> maximum;\n  if (arr.size() == 0)\n    return\
    \ maximum;\n  if (arr.size() == 1)\n    return arr;\n  if (arr.size() >= k) {\n\
    \    std::vector<long> res = maximum(arr, k);\n    maximum.reserve(res.size());\n\
    \    for (long i = 0; i < res.size(); i++)\n      maximum.push_back(std::max(arr[i],\
    \ res[i]));\n    return maximum;\n  }\n  for (long i = 0; i < arr.size() - k;\
    \ i++) {\n    std::vector<long> res = maximum(arr, k);\n    maximum.reserve(res.size());\n\
    \    for (long j = 0; j < res.size(); j++)\n      maximum.push_back(std::max(arr[i\
    \ + j], res[j]));\n  }\n  long max = 0;\n  long maxIndex = 0;\n  for (long i =\
    \ 0; i < maximum.size(); i++) {\n    if (maximum[i] > max) {\n      max = maximum[i];\n\
    \      maxIndex = i;\n    }\n  }\n  std::nth_element(maximum.begin(), maximum.begin()\
    \ + maxIndex, maximum.end());\n  return maximum;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4yb7znh5.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp4yb7znh5.cpp:25:43: error: no match for call\
    \ to \u2018(std::vector<long int>) (std::vector<long int>&, long int&)\u2019\n\
    \   25 |     std::vector<long> res = maximum(arr, k);\n      |               \
    \                            ^\n/tmp/tmp4yb7znh5.cpp:32:43: error: no match for\
    \ call to \u2018(std::vector<long int>) (std::vector<long int>&, long int&)\u2019\
    \n   32 |     std::vector<long> res = maximum(arr, k);\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    sort(arr.begin(), arr.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < k; i++) {\n        if (i == 0) {\n            result.push_back(arr[i]);\n\
    \        } else if (arr[i] > result[result.size() - 1]) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    result.push_back(arr[result.size() - 1]);\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9zdpl50y: /tmp/tmp9zdpl50y.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    \n    // Your code here\n    \n    long n = (arr.size()\
    \ * (arr.size() - 1)) / 2;\n    std::vector<long> arr1(n);\n    std::partial_sort_copy(arr.begin(),\
    \ arr.begin() + k, arr1.begin(), arr1.end());\n    return arr1;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqt8j46zr: /tmp/tmpqt8j46zr.cpp:30: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long max_so_far = arr[0];\n    std::vector<long> max_ending_here(arr.size());\n\
    \    std::vector<long> final_max_ending_here;\n\n    for (int i = 0; i < k; i++)\
    \ {\n        long curr_max = max_so_far;\n        for (auto it = max_ending_here.begin();\
    \ it != max_ending_here.end(); ++it) {\n            if (arr[i] > curr_max) {\n\
    \                curr_max = *it;\n            }\n        }\n        max_ending_here.push_back(curr_max);\n\
    \    }\n\n    for (auto it = max_ending_here.begin(); it != max_ending_here.end();\
    \ ++it) {\n        final_max_ending_here.push_back(*it);\n    }\n\n    return\
    \ final_max_ending_here;\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplzg3k5ly: /tmp/tmplzg3k5ly.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> v;\n  for (int i = 0; i < k; i++) {\n  \
    \  v.resize(0);\n    for (int j = 0; j < arr.size(); j++) {\n      if (arr[j]\
    \ > arr[j + i]) {\n        v.resize(v.size() + 1, arr[j]);\n      } else if (arr[j]\
    \ >= v[v.size() - 1]) {\n        v.resize(v.size() + 1, arr[j]);\n      }\n  \
    \  }\n  }\n  return v;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n        long n = arr.size();\n        long cur = 0;\n      \
    \  std::vector<long> ans;\n        while (cur < n) {\n                if (cur\
    \ + k <= n && arr[cur + k] > arr[cur]) {\n                        cur += k;\n\
    \                        ans.push_back(arr[cur]);\n                        while\
    \ (cur < n && arr[cur] > arr[cur + 1])\n                                cur++;\n\
    \                } else {\n                        ans.push_back(arr[cur]);\n\
    \                        while (cur < n && arr[cur] < arr[cur + 1])\n        \
    \                        cur++;\n                }\n        }\n        return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphr5xi8nh: /tmp/tmphr5xi8nh.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    int l = arr.size();\n    long maxElem\
    \ = arr[0], count = 1;\n    std::vector<long> maxList(l);\n    for(int i = 1;\
    \ i < l; i++){\n        if(arr[i] > maxElem){\n            maxElem = arr[i];\n\
    \            count = 1;\n        }\n        else if(arr[i] == maxElem)\n     \
    \       count++;\n        if(count == k)\n            maxList.push_back(maxElem);\n\
    \    }\n    return maxList;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpndd1ao9z: /tmp/tmpndd1ao9z.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ret;\n    std::stack<long> st;\n    for(long\
    \ i = 0; i < arr.size(); ++i) {\n        if(st.empty() || st.top() < arr[i]) {\n\
    \            st.push(arr[i]);\n        }\n        else if(st.top() > arr[i]) {\n\
    \            ret.push_back(st.top());\n            st.pop();\n        }\n    \
    \    else if(st.top() == arr[i]) {\n            st.pop();\n        }\n    }\n\
    \    while(!st.empty()) {\n        ret.push_back(st.top());\n        st.pop();\n\
    \    }\n    std::reverse(ret.begin(), ret.end());\n    \n    ret.insert(ret.end(),\
    \ std::make_move_iterator(ret.begin()), std::make_move_iterator(ret.begin() +\
    \ k));\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8juuy88y: /tmp/tmp8juuy88y.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> nums;\n    for(long\
    \ i=0;i<arr.size();++i)\n    {\n        if(nums.size()==0)\n            nums.push_back(arr[i]);\n\
    \        else if(nums.size()<=k)\n            nums.push_back(arr[i]);\n      \
    \  else\n        {\n            long curMax=nums.back();\n            for(long\
    \ j=0;j<k;j++)\n                if(curMax<arr[j])\n                    curMax=arr[j];\n\
    \            nums.push_back(curMax);\n        }\n    }\n    for(long i=0;i<nums.size();++i)\n\
    \    {\n        for(long j=i+1;j<nums.size();j++)\n        {\n            if(nums[i]>nums[j])\n\
    \            {\n                long tmp=nums[i];\n                nums[i]=nums[j];\n\
    \                nums[j]=tmp;\n            }\n        }\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuzu2pzer: /tmp/tmpuzu2pzer.cpp:53: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max(k);\n    for(long\
    \ i = 0; i < arr.size(); ++i){\n        if(max[max[0]] < arr[i]){\n          \
    \  max[0] = i;\n            max[1] = arr[i];\n        }\n        else if(max[0]\
    \ < arr[i]){\n            max[0] = i;\n        }\n        else if(max[1] > arr[i]){\n\
    \            max[1] = arr[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_b5kny0k: /tmp/tmp_b5kny0k.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::sort(arr.begin(), arr.end());\n  std::vector<long> ret;\n\
    \  for (long i = 0; i < arr.size() - k + 1; i++) {\n    ret.resize(i + 1);\n \
    \   long l = arr[i];\n    for (int j = 0; j < i; j++) {\n      if (arr[j] > l)\
    \ {\n        l = arr[j];\n      }\n    }\n    ret[i] = l;\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpb0pwn2jz: /tmp/tmpb0pwn2jz.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(arr.size() != 0);\n    assert(k != 0);\n    \n  \
    \  long maximumValue = arr[0];\n    std::vector<long> subarray(arr.begin(), arr.end());\n\
    \    subarray.pop_back();\n    \n    for(int i = 0; i <= k - subarray.size();\
    \ ++i) {\n        subarray.push_back(0);\n    }\n    \n    std::vector<long> ans;\n\
    \    for(long i = 0; i < subarray.size(); ++i) {\n        if(subarray[i] > maximumValue)\
    \ {\n            maximumValue = subarray[i];\n            ans.clear();\n     \
    \       for(long j = 0; j < i; ++j) {\n                ans.push_back(subarray[j]);\n\
    \            }\n        }\n        ans.push_back(maximumValue);\n    }\n    \n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1sfdrxk7: /tmp/tmp1sfdrxk7.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max;\n    std::vector<long> arrSorted\
    \ = sort(arr);\n    long curMax = arrSorted[k - 1];\n    long max = arrSorted[0];\n\
    \    for (long i = 1; i < k; i++) {\n        curMax = arrSorted[i];\n        if\
    \ (curMax < max) {\n            max = curMax;\n        }\n    }\n    max.push_back(max);\n\
    \    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzgoa5d_l.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpzgoa5d_l.cpp:20:43: error: no matching function\
    \ for call to \u2018sort(std::vector<long int>&)\u2019\n   20 |     std::vector<long>\
    \ arrSorted = sort(arr);\n      |                                           ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgoa5d_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4818:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::sort(_RAIter, _RAIter)\u2019\
    \n 4818 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n\
    \      |     ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4818:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzgoa5d_l.cpp:20:43:\
    \ note:   candidate expects 2 arguments, 1 provided\n   20 |     std::vector<long>\
    \ arrSorted = sort(arr);\n      |                                           ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzgoa5d_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::sort(_RAIter,\
    \ _RAIter, _Compare)\u2019\n 4848 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last,\n      |     ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzgoa5d_l.cpp:20:43:\
    \ note:   candidate expects 3 arguments, 1 provided\n   20 |     std::vector<long>\
    \ arrSorted = sort(arr);\n      |                                           ^\n\
    /tmp/tmpzgoa5d_l.cpp:22:10: error: conflicting declaration \u2018long int max\u2019\
    \n   22 |     long max = arr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long max_element = arr[0];\n    std::vector<long> max_list(arr.size());\n\
    \    for (int i = 0; i < k; i++) {\n        max_element = max(max_element, arr[i]);\n\
    \        max_list.push_back(max_element);\n    }\n    return max_list;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohdsk7b2.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpohdsk7b2.cpp:22:23: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_element = max(max_element, arr[i]);\n      |                       ^~~\n\
    \      |                       std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpohdsk7b2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::map<long, long> mymap;\n\
    \    long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (mymap.find(arr[i])\
    \ != mymap.end()) {\n            mymap[arr[i]]++;\n            if (mymap[arr[i]]\
    \ > max) {\n                max = mymap[arr[i]];\n            }\n        } else\
    \ {\n            mymap[arr[i]] = 1;\n        }\n    }\n    std::vector<long> ans;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (mymap.find(arr[i]) !=\
    \ mymap.end()) {\n            if (mymap[arr[i]] == max) {\n                ans.push_back(arr[i]);\n\
    \            }\n        }\n    }\n    ans.push_back(-1);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphfedse2h: /tmp/tmphfedse2h.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
