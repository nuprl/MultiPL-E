name: HumanEval_121_solution
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list of\
  \ integers, return the sum of all of the odd elements that are in even positions.\n\
  // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
  \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({5,\
  \ 8, 7, 1}))) == (12));\n    assert(candidate((std::vector<long>({3, 3, 3, 3, 3})))\
  \ == (9));\n    assert(candidate((std::vector<long>({30, 13, 24, 321}))) == (0));\n\
  \    assert(candidate((std::vector<long>({5, 9}))) == (5));\n    assert(candidate((std::vector<long>({2,\
  \ 4, 8}))) == (0));\n    assert(candidate((std::vector<long>({30, 13, 23, 32})))\
  \ == (23));\n    assert(candidate((std::vector<long>({3, 13, 2, 9}))) == (3));\n\
  }\n"
completions: ["        long sum = 0;\n        for(std::size_t i = 0; i < lst.size();\
    \ i++)\n        {\n            sum += lst[i];\n            if(lst[(i+1)%lst.size()]%2\
    \ != 0)\n            {\n                sum -= lst[(i+1)%lst.size()];\n      \
    \      }\n        }\n        return sum;", "    // code here\n    std::sort(lst.begin(),\
    \ lst.end());\n    long result = 0;\n    auto itr = lst.begin();\n    while(itr\
    \ != lst.end()){\n        if( (*itr) % 2 == 0 ){\n            result += *itr;\n\
    \            itr++;\n        }\n        else{\n            itr++;\n        }\n\
    \    }\n    return result;", "    // write your code in C++14 (g++ -std=c++14\
    \ <filename>)\n    std::vector<int> even;\n    for(auto i = 0; i<lst.size(); ++i){\n\
    \        if(lst[i]%2==0){\n            even.push_back(lst[i]);\n        }\n  \
    \  }\n    long long ans = 0;\n    int size = even.size();\n    for(auto i = 0;\
    \ i<size; ++i){\n        ans+=even[i];\n    }\n    return ans;", "    if(lst.size()\
    \ == 0)\n        return 0;\n    std::vector<long> even;\n    for(auto x : lst)\n\
    \    {\n        if(x % 2 == 0)\n            even.push_back(x);\n    }\n    long\
    \ ans = even[0]; // The first element is even, so start with the first element\n\
    \    for(long i : even) // Loop through all elements of even list\n    {\n   \
    \     if(i % 2 == 0) // If i is even\n            ans += i; // Add the current\
    \ element to the sum\n    }\n    return ans;", "    if (lst.size() <= 0)\n   \
    \     return 0;\n    long oddSum = 0;\n    int evenPos = 0;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        if (i % 2 != 0) {\n            oddSum +=\
    \ lst[i];\n            if (i == 0) {\n                evenPos = i;\n         \
    \   }\n        }\n    }\n    if (evenPos == 0) {\n        return 0;\n    }\n \
    \   return oddSum + lst[evenPos];", "    long sum = 0;\n    for(long i = 0; i\
    \ < lst.size(); i++){\n        if(lst[i] % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "  // Write your code here.\n  long sum=0;\n\
    \  for (int i=0;i<lst.size();i++){\n    if(lst[i]%2==0)\n      sum+=lst[i];\n\
    \  }\n  return sum;", '    return std::accumulate(lst.begin(),lst.end(), 0);',
  "    // Your code goes here\n    long ans = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        \n        if(lst[i]%2==0){\n            ans += lst[i];\n    \
    \    }\n    }\n    return ans;", "    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); ++i) {\n        if(lst[i] % 2 != 0) ans += lst[i];\n    }\n    return\
    \ ans;", "    long even=0;\n    long odd=0;\n    for (long i=0;i<lst.size();i++)\
    \ {\n        odd+=lst[i];\n        if (i%2==0)\n            even+=lst[i];\n  \
    \  }\n    return even+odd;", "    //  Your code here\n    long sum=0;\n    long\
    \ k=0;\n    for(auto it:lst){\n        if(it%2==0){\n            sum+=it;\n  \
    \          k++;\n        }\n    }\n    return sum;", "    int sum = 0;\n    for\
    \ (size_t i = 0; i < lst.size(); i++) {\n        int even = (lst[i] % 2 == 0);\n\
    \        int odd  = (lst[i] % 2 != 0);\n        int both = even && odd;\n    \
    \    sum += both;\n    }\n    return sum;", "    long evenSum = 0;\n    long oddSum\
    \ = 0;\n    for(std::size_t i = 0; i < lst.size(); ++i)\n    {\n        if(lst[i]\
    \ % 2 == 0)\n            evenSum += lst[i];\n        else\n            oddSum\
    \ += lst[i];\n    }\n    return oddSum - evenSum;", "    std::vector<int> vec(lst.size(),\
    \ 0);\n    for (auto &v : lst)\n        vec[v >> 1] += (v & 1L);\n    return std::accumulate(vec.begin(),\
    \ vec.end(), 0L);", "    long evenSum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] % 2 == 1){\n            evenSum += lst[i];\n      \
    \  }\n    }\n    return evenSum;", "    // code here\n    if (lst.size() == 0\
    \ || lst.size() >= 2)\n        return 0;\n    std::set<long> evens;\n    for (long\
    \ &i : lst) {\n        if (i % 2 == 0) {\n            evens.insert(i);\n     \
    \   }\n    }\n    long odd = lst.front();\n    long sum = odd;\n    for (long\
    \ &i : lst) {\n        if (i % 2 == 1) {\n            sum += evens.count(i);\n\
    \        }\n    }\n    return sum;", "    // write your code here\n    long ans\
    \ = 0, pos = 0;\n    \n    for (int i = 0; i < lst.size(); ++i){\n        if (lst[i]\
    \ % 2 != 0){\n            ans += lst[i];\n        } else {\n            pos ++;\n\
    \        }\n    }\n    return ans;", "    // code here\n    if(lst.size()<2)\n\
    \        return 0;\n    if(lst.front()%2==1 && lst.back()%2==0)\n        return\
    \ lst[0] + lst[1];\n    if(lst.front()%2==0 && lst.back()%2==1)\n        return\
    \ lst[0] + lst[1];\n    long long result=0;\n    for(auto x:lst)\n    {\n    \
    \    if(x%2!=0)\n            result += x;\n    }\n    return result;", "    int\
    \ sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2!=0){\n     \
    \       sum+=lst[i];\n        }\n    }\n    return sum;", "    long ans = 0;\n\
    \    long t = lst[0] + lst[1];\n    for (int i = 2; i < lst.size(); i++)\n   \
    \ {\n        t = t + lst[i];\n        if ((lst[i] & 1) == 0)\n            ans\
    \ = ans + t;\n    }\n    return ans;", "    long res = 0;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        if ((lst[i] & 1) != 0) {\n            res +=\
    \ lst[i];\n        }\n    }\n    return res;", "    long evenSum = 0;\n    long\
    \ odd_sum = 0;\n    for (long &x : lst)\n        if (x % 2 == 0)\n           \
    \ evenSum += x;\n        else\n            odd_sum += x;\n    return odd_sum -\
    \ evenSum;", "    assert(lst.size() != 0);\n    long sum = 0;\n    long odd =\
    \ lst[0]/2;\n    for(long i=1;i<lst.size();i++) {\n        if(lst[i]%2==0) {\n\
    \            sum += lst[i];\n        } else {\n            sum += odd;\n     \
    \       odd = lst[i];\n        }\n    }\n    return sum;", "    // code here\n\
    \    long ans = 0;\n    long evenSum = 0;\n    for(auto i : lst){\n        if(i%2\
    \ ==0){\n            evenSum += i;\n        }\n    }\n    ans = evenSum;\n   \
    \ return ans;", "    // Write your code here.\n    long sum = 0;\n    for(long\
    \ i:lst){\n        if(i % 2 == 0){\n            sum += i;\n        }\n    }\n\
    \    return sum;", "    int sum = 0;\n    int n = lst.size();\n    for (int i\
    \ = 0; i < n; i++) {\n        if (lst[i] % 2 == 1)\n            sum += lst[i];\n\
    \    }\n    return sum;", "    // code here\n    std::stack<long> stk;\n    long\
    \ sum = 0;\n    for(auto el : lst) {\n        if(el % 2 == 0) {\n            stk.push(el);\n\
    \            while(!stk.empty()) {\n                sum += stk.top();\n      \
    \          stk.pop();\n            }\n        } else {\n            while(!stk.empty()\
    \ && stk.top() == el) {\n                sum -= stk.top();\n                stk.pop();\n\
    \            }\n        }\n    }\n    return sum;", "    int sum = 0;\n    for(int\
    \ i=0;i<lst.size();++i)\n    {\n        if(lst[i]%2==0) sum += lst[i];\n    }\n\
    \    return sum;", "    if (lst.size() == 0 || lst.size() == 1)\n        return\
    \ 0;\n    long long ans = 0;\n    long long temp;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            temp = lst[i];\n            while\
    \ (i < (lst.size() - 1) && lst[i] % 2 != 0) {\n                i += 1;\n     \
    \       }\n            if (lst[i] % 2 != 0) {\n                ans += temp;\n\
    \            }\n            temp = temp * 2;\n        }\n    }\n    return ans;",
  "\tassert(lst.size() >= 1);\n\tstd::sort(lst.begin(), lst.end());\n\tlong sum =\
    \ 0;\n\tfor (long i: lst) sum += (i & 1) ? 1 : 0;\n\treturn sum;", "    int sum\
    \ = 0;\n    bool flag = false;\n    for (auto it = lst.begin(); it != lst.end();\
    \ it++) {\n        if (!flag && it&1) {\n            flag = true;\n          \
    \  sum += *it;\n        } else {\n            flag = false;\n        }\n    }\n\
    \    return sum;", "    // write your code in C/C++11/C++14/Java\n    int sum\
    \ = 0;\n    int i = 0;\n    while (i < lst.size()) {\n        if (i % 2 == 0)\n\
    \            sum += lst[i];\n        i++;\n    }\n    return sum;", "    // Write\
    \ your code here\n    int sum = 0;\n    int n = lst.size();\n    for (int i =\
    \ 0; i < n; i++) {\n        if (i%2 == 1) {\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;", "  std::sort(lst.begin(), lst.end());\n  long\
    \ ans = 0, len = lst.size();\n  for (long i = 0, sum = 0; i < len; i++) \n   \
    \ if (i % 2 == 0)\n      sum += lst[i];\n      else \n        ans += sum;\n  return\
    \ ans;", "    // Write your code here\n    int sum = 0;\n    for (size_t i = 0;\
    \ i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            if (lst[i] ==\
    \ lst[(i+1)/2-1]) {\n                sum += lst[i];\n            }\n        }\n\
    \    }\n    return sum;", "// Write your code here\nstd::sort(lst.begin(),lst.end());\n\
    int sum=0;\nfor(std::size_t i=0;i<lst.size();i+=2)\n{\n    sum+=lst[i];", "  \
    \  // code here\n    int count = 0;\n    for (int i = 0; i < lst.size(); ++i)\n\
    \        if (lst[i] % 2 == 1)\n            count += lst[i];\n    return count;",
  "    long sum = 0;\n    for (int i = 0; i< lst.size(); i++) {\n        if (i%2==1)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;", "    if(lst.empty())\n\
    \        return 0;\n    auto begin = lst.begin();\n    long ans = 0;\n    while(begin\
    \ != lst.end()) {\n        if(*begin %2 == 0)\n            ans += *begin;\n  \
    \      begin++;\n    }\n    return ans;", "    long sum = 0;\n    int pos = 0;\n\
    \    for(auto i : lst) {\n        pos = i;\n        sum = sum + lst[pos];\n  \
    \  }\n\n    return sum;", "    if (lst.size() == 0) {\n        return 0;\n   \
    \ }\n    std::map<long, bool> map_even;\n    for (long i : lst) {\n        map_even[i]\
    \ = true;\n    }\n    for (long i : lst) {\n        if (map_even[i]) {\n     \
    \       map_even[i] = false;\n            i = i + 1;\n        }\n    }\n    return\
    \ map_even.at(1L) + map_even.at(2L);", "    // code here\n    std::vector<bool>\
    \ isEven(lst.length());\n    long ans = 0;\n    for (long i = 0, j = 1; i < lst.length();\
    \ ++i) {\n        isEven[i] = j % 2 != 0;\n        ans += isEven[i] ? lst[i] :\
    \ 0;\n        ++j;\n    }\n    return ans;", "    int sum = 0;\n    int j = 0;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (j < lst[i] / 2) {\n \
    \           sum += lst[j];\n            ++j;\n        }\n    }\n    return sum;",
  "    // code here\n    assert(lst.size() >= 1);\n    auto it = lst.begin();\n  \
    \  auto pos = it - lst.begin() + 1;\n    long sum = 0;\n    while ((pos - 2) %\
    \ 2 == 0) {\n        sum += *it;\n        ++it;\n        ++pos;\n    }\n    return\
    \ sum;", "    // Write your code here\n    assert(lst.size() != 0);\n    \n  \
    \  long sum = 0;\n    for(long &num : lst)\n    {\n        if(num%2==0 && num!=0)\
    \ \n        {\n            sum += num;\n        }\n    }\n    return sum;", " \
    \   long long ans = 0;\n    for(long long i = 0; i < lst.size(); ++i)\n    {\n\
    \        if(lst[i]%2 != 0)\n        {\n            ans += lst[i];\n        }\n\
    \    }\n    return ans;", "    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;", "    long even = 0;\n    for (std::size_t i = 0; i <\
    \ lst.size(); ++i) {\n        if (lst[i] % 2 == 0) even+= lst[i];\n    }\n   \
    \ return even;", "    long sum = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] % 2 == 1)\n            sum += lst[i];\n    }\n    return\
    \ sum;", "  assert(lst.size()>0);\n  int size=lst.size();\n  // int evencount=0;\n\
    \  // for (int i=0; i<size; i++) {\n  //   if(lst[i]%2==0){\n  //     evencount++;\n\
    \  //   }\n  // }\n  long total=0;\n  long oddcount=0;\n  // int evencount=0;\n\
    \  for (int i=0; i<size; i++) {\n    if(lst[i]%2==0){\n      oddcount++;\n   \
    \ }\n  }\n  for(int i=0;i<size;i++)\n  {\n    if(lst[i]%2==0)\n    {\n      total+=lst[i];\n\
    \      lst[i]=0;\n    }\n  }\n  assert(total>=0);\n  return total+oddcount;",
  "    long sum = 0;\n    std::vector<long> even;\n    std::vector<long> odd;\n\n\
    \    for (long element : lst) {\n        if (element % 2 == 0) {\n           \
    \ even.push_back(element);\n        } else {\n            odd.push_back(element);\n\
    \        }\n    }\n\n    for (auto el : even) {\n        if (el < odd.at(odd.size()\
    \ - 1)) {\n            sum += el;\n        }\n    }\n    return sum;", "    //\
    \ Write your code here\n    long sum = 0;\n    for(auto it = lst.begin(); it !=\
    \ lst.end(); ++it){\n        if(*it % 2 ==0 && it != lst.begin()){\n         \
    \   sum += *it;\n        }\n    }\n    return sum;", "  // code here\n  if(lst.size()\
    \ == 0) return 0;\n  int sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(lst[i]%2==1){\n\
    \      if(sum+lst[i]<lst[i]) sum += lst[i];\n      else break;\n    }\n  }\n \
    \ return sum;", "    std::stack<long> s;\n    long sum = 0;\n    for(const auto\
    \ &item : lst)\n    {\n        if(s.empty() || (s.top() % 2 == 0))\n        {\n\
    \            s.push(item);\n            sum += item;\n        }\n        else\n\
    \        {\n            if(item % 2 != 0)\n            {\n                sum\
    \ += s.top();\n                s.push(item);\n            }\n            else\n\
    \            {\n                s.pop();\n                sum += s.top();\n  \
    \              s.push(item);\n            }\n        }\n    }\n    return sum;",
  "    if (lst.size() == 0) {\n        return 0;\n    }\n    // Scan the vector from\
    \ left to right to find all the numbers in odd positions\n    for (int i = 1;\
    \ i < lst.size(); i++) {\n        // Check if the element at i is even\n     \
    \   if (lst[i] % 2 == 0) {\n            long k = i;\n            // Scan the vector\
    \ from left to right\n            for (int j = i; j < lst.size(); j++) {\n   \
    \             // Check if the element at j is even\n                if (lst[j]\
    \ % 2 == 1) {\n                    // Remove the value at j and increment k\n\
    \                    lst[k] = lst[j];\n                    k++;\n            \
    \    }\n            }\n        }\n    }\n    // Add the remaining values\n   \
    \ for (; lst.size() >= 2; lst.erase(lst.begin() + 1))\n    {\n        long sum\
    \ = 0;\n        std::for_each(lst.begin(), lst.end(), [&sum](long &i) { sum +=\
    \ i; });\n        return sum;\n    }\n    return 0;", "    long result = 0;\n\
    \    for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if ((*it &\
    \ 1LL) != 0LL)\n            result += *it;\n    }\n    return result;", "    //\
    \ write your code here\n    long s = 0;\n    int n = lst.size();\n    for(int\
    \ i=0;i<n;i++){\n        if(lst[i] % 2 != 0){\n            s += lst[i];\n    \
    \    }\n    }\n    return s;", "  // code here\n  std::set<int> s;\n  int cnt\
    \ = 0;\n  for (auto i : lst) {\n    if (s.find(i) != s.end()) {\n      s.erase(i);\n\
    \      cnt++;\n    } else {\n      s.insert(i);\n    }\n  }\n\n  return cnt ==\
    \ 0 ? (std::abs(lst[0] - lst[1]) + std::abs(lst[2] - lst[3])) :\n            \
    \              (std::abs(lst[0] - lst[1]) + std::abs(lst[2] -\n              \
    \                                                    lst[3]) + std::abs(lst[4]\
    \ - lst[5])) -\n                                 (std::abs(lst[0] - lst[1]) +\
    \ std::abs(lst[2] -\n                                                        \
    \              lst[3]) + std::abs(lst[4] - lst[5]));", "  std::sort(lst.begin(),\
    \ lst.end());\n  \n  long ans = 0;\n  \n  int i = 0;\n  long sum = 0;\n  \n  while\
    \ (i < lst.size()) {\n    if (lst[i] % 2 == 0) {\n      sum = sum + lst[i];\n\
    \      i++;\n    }\n    else {\n      ans = ans + sum;\n      sum = 0;\n     \
    \ i++;\n    }\n  }\n  ans = ans + sum;\n  return ans;", "    std::sort(lst.begin(),\
    \ lst.end());\n    long ans = 0;\n    int j = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n            j\
    \ = i;\n        }\n    }\n    ans += lst[j];\n    return ans;", "    assert(lst.size()\
    \ > 0);\n    long res = 0;\n    for (long i = 0; i < lst.size(); i++) {\n    \
    \    long temp = lst[i];\n        long count = 0;\n        while (temp > 0) {\n\
    \            temp = temp / 2;\n            count++;\n        }\n        if (count\
    \ == 1) {\n            res += lst[i];\n        }\n    }\n    return res;", " \
    \   // code here\n    std::vector<long> ans;\n    long oddSum = 0, evenSum = 0,\
    \ evenSum , evenSum2, evenSum3, evenSum4, evenSum5, evenSum6, evenSum7;\n    for\
    \ (auto i : lst) {\n        if (i % 2 == 0)\n            evenSum += i;\n     \
    \   else\n            oddSum += i;\n    }\n    for (auto i : lst) {\n        if\
    \ (i % 2 == 0)\n            evenSum2 = evenSum + i;\n        else\n          \
    \  oddSum2 = oddSum + i;\n    }\n    for (auto i : lst) {\n        if (i % 2 ==\
    \ 0)\n            evenSum3 = evenSum2 + i;\n        else\n            oddSum3\
    \ = oddSum2 + i;\n    }\n    for (auto i : lst) {\n        if (i % 2 == 0)\n \
    \           evenSum4 = evenSum3 + i;\n        else\n            oddSum4 = oddSum3\
    \ + i;\n    }\n    for (auto i : lst) {\n        if (i % 2 == 0)\n           \
    \ evenSum5 = evenSum4 + i;\n        else\n            oddSum5 = oddSum4 + i;\n\
    \    }\n    for (auto i : lst) {\n        if (i % 2 == 0)\n            evenSum6\
    \ = evenSum5 + i;\n        else\n            oddSum6 = oddSum5 + i;\n    }\n \
    \   for (auto i : lst) {\n        if (i % 2 == 0)\n            evenSum7 = evenSum6\
    \ + i;\n        else\n            oddSum7 = oddSum6 + i;\n    }\n    ans.push_back(evenSum);\n\
    \    ans.push_back(evenSum2);\n    ans.push_back(evenSum3);\n    ans.push_back(evenSum4);\n\
    \    ans.push_back(evenSum5);\n    ans.push_back(evenSum6);\n    ans.push_back(evenSum7);\n\
    \    ans.push_back(oddSum);\n    ans.push_back(oddSum2);\n    ans.push_back(oddSum3);\n\
    \    ans.push_back(oddSum4);\n    ans.push_back(oddSum5);\n    ans.push_back(oddSum6);\n\
    \    ans.push_back(oddSum7);\n    long ans = ans[0];\n    for (auto i : ans)\n\
    \        ans = ans + i;\n    return ans;", "    // Write your code in C++17\n\
    \    long long sum = 0;\n    auto it = lst.begin();\n    auto end = lst.end();\n\
    \    while (it != end){\n        if((it+1)%2 == 0){\n            sum = sum + it;\n\
    \        }\n        ++it;\n    }\n    return sum;", "    std::vector<long> v;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0) {\n     \
    \       v.push_back(lst.at(i));\n        }\n    }\n    long result = 0;\n    for\
    \ (size_t i = 0; i < v.size(); i++) {\n        if (v[i] % 2 != 0) {\n        \
    \    result += v[i];\n        }\n    }\n    return result;", "  std::cout << std::accumulate(lst.begin(),lst.end(),0ll,[](auto\
    \ & x,auto y){return x+y%2;});\n  return std::accumulate(lst.begin(),lst.end(),0ll,[](auto\
    \ & x,auto y){return x+y;});", "    long sum = 0;\n    for (auto &elem : lst)\
    \ {\n        if (elem & 1)\n            sum += elem;\n    }\n    return sum;",
  "    long ans = 0;\n    for(long &i:lst)\n        ans += (i & 1L);\n    return ans;",
  "    std::ios_base::sync_with_stdio(false);\n    // Your code goes here\n    long\
    \ ans = 0;\n    for (long &i : lst)\n        if (i % 2 == 0)\n            ans\
    \ += i;\n    return ans;", "    if(lst.empty()){\n        return 0;\n    }\n \
    \   long ans = 0;\n    long lower = lst[0];\n    long upper = lst[0];\n    int\
    \ flag = 0;\n    for(long &val:lst){\n        if(val<lower && val>upper){\n  \
    \          ans += flag;\n            flag = 0;\n        }\n        if(val>lower){\n\
    \            flag++;\n            upper = val;\n        }\n        if(val<upper){\n\
    \            flag--;\n            lower = val;\n        }\n    }\n    return ans;",
  "    // Write your code here.\n    long sum = 0;\n    for (auto x : lst) {\n   \
    \     if ((x & 1) == 0) {\n            sum += x;\n        }\n    }\n    return\
    \ sum;", "    if(lst.size() < 1)\n        return 0;\n    long sum = 0;\n    long\
    \ temp = 0;\n    for(auto i : lst) {\n        if((i & 1) == 1)\n            temp\
    \ = temp + i;\n        sum = sum + temp;\n    }\n    return sum;", "    std::sort(lst.begin(),\
    \ lst.end());\n    for (long i = 0; i < lst.size() - 1; i++)\n        if (lst[i]\
    \ % 2 == 0) lst.erase(std::remove(lst.begin(), lst.end(), lst[i]), lst.end());\n\
    \    return *std::max_element(lst.begin(), lst.end()) + std::accumulate(lst.begin(),\
    \ lst.end(), 0);", "    // Write your code here.\n    int size = lst.size();\n\
    \    long sum = 0;\n    int i = 0;\n    for (i = 0; i < size; ++i) {\n       \
    \ if (lst[i] % 2 == 0 && lst[i] % 2 != (i + 1) % 2)\n            sum += lst[i];\n\
    \    }\n    return sum;", "    // code here\n    if(lst.size() == 0 || lst.size()\
    \ > 500)\n        return -1;\n    long sum = 0;\n    for(long i = 0; i < lst.size();\
    \ i++)\n    {\n        if(i%2==0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;", "    assert(lst.size() != 0);\n    long ans\
    \ = 0;\n    for (long n : lst) {\n        if (n % 2 == 0) {\n            ans +=\
    \ n;\n        }\n    }\n    return ans;", "    // Write your code here.\n    long\
    \ sum=0;\n    long n=lst.size();\n    for(int i=0;i<n;i++){\n        if(lst[i]%2==1){\n\
    \            sum+=lst[i];\n        }\n    }\n    return sum;", "    // Write your\
    \ code here\n    long sum=0;\n    for( int i=0; i<lst.size();i++){\n        if(lst[i]%2!=0){\n\
    \            sum+=lst[i];\n        }\n    }\n    return sum;", "  int sum = 0;\n\
    \  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] % 2 == 1 && lst[i\
    \ + 1] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "    assert(lst.size()\
    \ >= 1);\n    long sum = 0;\n    long long index = 1;\n    for(long long i = 0;\
    \ i < lst.size(); i++){\n        sum = sum + (lst.at(i) % 2 == 0 && index%2 ==\
    \ 0) ? lst.at(i) : 0;\n        index = index + 1;\n    }\n    return sum;", " \
    \       long sum = 0;\n        std::pair<long, long> maxpos = std::make_pair(lst[0],\
    \ 0);\n        std::pair<long, long> minpos = std::make_pair(lst[0], 0);\n   \
    \     for (long i : lst) {\n            maxpos = std::max(maxpos, std::make_pair(i,\
    \ i));\n            minpos = std::min(minpos, std::make_pair(i, i));\n       \
    \ }\n\n        for (long i = minpos.first; i <= maxpos.first; i++) {\n       \
    \     if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n\
    \        return sum;", "\tlong sum = 0;\n\t// Write your code in Start\n\tfor(int\
    \ i=0;i<lst.size();i++){\n\t\tif(i%2!=0)\n\t\t\tsum+=lst[i];\n\t}\n\treturn sum;\n\
    \t// Write your code in End", "    std::sort(lst.begin(), lst.end());\n    long\
    \ ans = 0;\n    for (auto i : lst) {\n        if (i % 2 == 0) {\n            ans\
    \ += i;\n        }\n    }\n    return ans;", "    long sum = 0, ans = 0, i = 0;\n\
    \    while (i < lst.size()) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \            ans++;\n        }\n        i++;\n    }\n    return ans;", "\tlong\
    \ sum=0;\n\tif(lst.size()==0)\n\t\treturn 0;\n\tstd::sort(lst.begin(),lst.end());\n\
    \tlst.erase(std::remove(lst.begin(),lst.end(),0),lst.end());\n\tfor(auto x:lst)\n\
    \t{\n\t\tif(x%2==0)\n\t\t{\n\t\t\tsum+=x;\n\t\t\tcontinue;\n\t\t}\n\t\tsum+=x-1;\n\
    \t}\n\treturn sum;", "    // Write your code here\n    if(lst.size() <= 1) return\
    \ 0;\n    long sum = 0;\n    int pos = 0;\n    for(auto& num : lst) {\n      \
    \  if((pos % 2) == 0)\n            sum += num;\n        pos++;\n    }\n    return\
    \ sum;", "  // Your code here\n  int sum = 0;\n  for (int i = 0; i<lst.size();i++){\n\
    \    if (lst[i] % 2 == 1){\n      sum += lst[i];\n    }\n  }\n  return sum;",
  "    // Write your code in here.\n    return 0;", "    long sum = 0;\n    assert(lst.size()\
    \ > 0);\n    for (long i : lst) {\n        if ((i%2) == 1)\n            sum +=\
    \ i;\n    }\n    return sum;", "  long ans=0;\n  // write your code in here\n\
    \  for (auto i:lst) {\n    if (i%2==1) {\n      ans+=i;\n    }\n  }\n  return\
    \ ans;", "    // Write your code here\n    long sum = 0;\n    long odd_sum = lst[1];\n\
    \    for(size_t i=2;i<lst.size();++i){\n        if(lst[i] % 2 == 0){\n       \
    \     sum += odd_sum;\n            odd_sum = lst[i];\n        }\n    }\n    return\
    \ sum;", "    // write your code here\n    return 0;", "    std::sort(lst.begin(),\
    \ lst.end());\n    for (std::size_t i = 0; i < lst.size(); ++i) {\n        if\
    \ (i % 2 == 0 && lst.at(i) % 2 == 1)\n            return lst.at(i) + lst.at(std::next(lst.begin(),\
    \ std::next(lst.begin(), i)));\n    }\n    return 0;", "    long long sum = 0;\n\
    \    std::vector<bool> is_odd(lst.size());\n    // is_odd[0]=true, is_odd[1]=true,\
    \ ..., is_odd[l]=true\n    is_odd[0] = is_odd[1] = is_odd[2] = is_odd[3] = 0;\n\
    \    // is_odd[0 ... l-1]=false\n    for (size_t i = 0; i < (int) lst.size();\
    \ ++i) {\n        is_odd[(size_t) lst[i]] = true;\n    }\n    for (size_t i =\
    \ 1; i < is_odd.size(); ++i) {\n        is_odd[i] ^= is_odd[i - 1];\n    }\n \
    \   for (size_t i = 0; i < is_odd.size(); ++i) {\n        if (is_odd[i]) {\n \
    \           sum += i;\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    long index = 0;\n    for(auto i = lst.begin(); i != lst.end(); i++) {\n \
    \       sum += *i & (*i + 1);\n        index += *i;\n    }\n    return sum + lst.back();",
  "    int res = 0;\n    int i = 0;\n    for (i = 0; i < lst.size(); ++i) {\n    \
    \    if (lst[i] % 2 == 0) {\n            res = res + lst[i];\n        }\n    }\n\
    \    return res;", "    long sum = 0;\n    long prev;\n    for (long &item : lst)\
    \ {\n        if (prev % 2 != 0)\n            sum += item;\n        prev = item;\n\
    \    }\n    return sum;", "    long sum = 0;\n    // iterating through the list\n\
    \    for (long i : lst)\n        // checking if the i is even\n        if (i %\
    \ 2 == 0)\n            // adding it to the sum\n            sum += i;\n    //\
    \ return it\n    return sum;", "    long ans=0;\n    for(int i=0;i<lst.size();i++)\n\
    \    {\n        if(i%2==0)\n        {\n            ans+=lst[i];\n        }\n \
    \   }\n    return ans;", "    long ans = lst[0];\n    // loop through list and\
    \ find indexes of all even numbers in list\n    for (std::size_t i = 1; i < lst.size();\
    \ ++i) {\n        if (lst[i] % 2 == 0) {\n            ans += lst[i];\n       \
    \ }\n    }\n    return ans;", "  long ans=0;\n  long even=0;\n  for (int i=0;\
    \ i<lst.size(); i++)\n  {\n    if(lst[i]%2==0){\n      ans = ans + lst[i];\n \
    \     even=even+lst[i];\n    }\n  }\n  return ans;", "    return std::accumulate(lst.begin(),\
    \ lst.end(), 0, [](int acc, long x) {\n        return acc + (x % 2 != 0);\n  \
    \  });", "    int count = 0;\n    long res = 0;\n    for (auto it1 = lst.begin();\
    \ it1 != lst.end(); ++it1) {\n        auto it2 = std::find(it1, lst.end(), (*it1)\
    \ % 2);\n        if (it2 != lst.end()) {\n            res += *it1;\n         \
    \   count += 1;\n            if (count % 2 == 1)\n                res = (res *\
    \ (*it1)) / 2 + res;\n        }\n    }\n    return res;", "    // write your code\
    \ here\n    std::set<int> even;\n    for (const auto &i : lst) \n    {\n     \
    \   if ((i % 2) == 0) even.insert(i);\n    }\n    long ans = 0;\n    for (auto\
    \ i : even) \n    {\n        ans += i;\n    }\n    return ans;", "    // code\
    \ here\n    long sum = 0;\n    for(long &i : lst){\n        i = i ^ (i >> 1);\n\
    \        sum += i;\n    }\n    return sum;", "   assert(lst.size() > 0);\n   long\
    \ sum = 0;\n   long count = 0;\n   for(long i=0;i<lst.size();i++){\n       if(i\
    \ % 2 == 0){\n           sum+=lst[i];\n           count++;\n       }\n       else\
    \ {\n           if(sum > lst[i]){\n               sum-=lst[i];\n             \
    \  count--;\n           }\n       }\n   }\n   if(count==0 && sum>0)\n      sum\
    \ = 0;\n   return sum;", "    long ans = 0, pos = 0;\n    for(auto val : lst)\
    \ {\n        if(val%2 != 0 && pos > 1) {\n            ans += pos - 1;\n      \
    \  }\n        pos++;\n    }\n    return ans;", "    // Your code goes here\n \
    \   long long sum=0;\n    for(long long i=0;i<lst.size();i++){\n        if(lst[i]%2==0)\n\
    \            sum+=lst[i];\n    }\n    return sum;", "    long result = 0;\n  \
    \  for (auto i : lst) {\n        if ((i % 2) == 0) {\n            result += i;\n\
    \        }\n    }\n    return result;", "    // code here\n    if(lst.size() ==\
    \ 0)\n        return 0;\n    long sum = 0;\n    for(auto &val : lst)\n    {\n\
    \        if(val%2==0)\n            sum += val;\n    }\n    return sum;", "   \
    \ int ans = 0;\n    for(auto it=lst.begin();it!=lst.end();it++) {\n        ans\
    \ += (*it) & (*it+1);\n    }\n    return ans;", "    long long sum = 0;\n    for(auto\
    \ it=lst.begin(); it!=lst.end(); it++)\n    {\n        if((*it % 2)==0)\n    \
    \        sum += *it;\n    }\n    return sum;", "  std::vector<long> arr(lst);\n\
    \  long sum = 0;\n  for (int i = 0; i < (int) arr.size(); i++) {\n    if (i %\
    \ 2 == 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;", "    long oddSum\
    \ = lst[0];\n    for (long i: lst) {\n        if (i % 2 == 0)\n            oddSum\
    \ += i;\n        else\n            oddSum += oddSum - i;\n    }\n    return oddSum;",
  "        long long sum = 0;\n        long long cnt = 0;\n        for(int i=0; i<lst.size();\
    \ i++){\n                if(lst[i]%2==0){\n                        sum += lst[i];\n\
    \                        cnt ++;\n                }\n        }\n        \n   \
    \     return sum%cnt;", "    long long ans = 0;\n    long long a = lst[0];\n \
    \   long long b = lst[1];\n    long long c = lst[2];\n    long long d = lst[3];\n\
    \    long long a = a-b;\n    long long c = c-d;\n    long long d = a-c;\n    long\
    \ long ans = a+c+d;\n    ans = ans/2;\n    return ans;", "    long ret = 0;\n\
    \    for(auto it = lst.begin(); it != lst.end(); ++it) {\n        if(it%2 == 1)\
    \ {\n            for(long i = 1; i < it; i+=2)\n                ret += i;\n  \
    \      }\n    }\n    return ret;", "    long sum = 0;\n    int n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        // odd index is even\n        if (i\
    \ % 2 != 0) {\n            // sum=sum+lst[i];\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;", "    if(lst.empty()) return 0;\n    long res\
    \ = lst[0];\n    for(long i:lst){\n        if(i % 2 != 0 && i % 3 != 0)\n    \
    \    res += i;\n    }\n    return res;", "  // Write your code here.\n  long sum\
    \ = 0;\n  for (int i = 1; i < lst.size(); i++)\n  {\n    if (lst[i] % 2 != 0)\n\
    \    {\n      sum += lst[i];\n    }\n  }\n  return sum;", "    // write your code\
    \ in C++14\n    long ans=0;\n    auto it = lst.begin();\n    while(it!=lst.end()){\n\
    \        if(*it%2==1)\n            ans+=*it;\n        it++;\n    }\n    return\
    \ ans;", "    std::set<long> evens;\n    long sum = 0;\n    for (long e : lst)\
    \ {\n        evens.insert(e);\n    }\n    for (long e : lst) {\n        if (evens.find(e)\
    \ != evens.end()) {\n            sum += e;\n        }\n    }\n    return sum;",
  "    long long sum=0;\n    for(long i=0;i<lst.size();i+=2){\n        sum+=lst[i];\n\
    \    }\n    return sum;", "    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;", "    int count = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if ((i & 1) == 1) {\n            count += lst[i];\n        }\n\
    \    }\n    return count;", "    long evens = 0;\n    long odds = lst[0];\n  \
    \  for (auto val : lst) {\n        if (val % 2 == 0) {\n            evens += val;\n\
    \        } else {\n            odds += val;\n        }\n    }\n    return (odds\
    \ / 2);", "    std::sort(lst.begin(), lst.end());\n    // O(nlogn) solution\n\
    \    std::vector<long> odd;\n    std::size_t i = 0;\n    for (std::size_t j =\
    \ 0; j < lst.size(); ++j) {\n        if (j % 2 != 0) {\n            odd.push_back(lst.at(i));\n\
    \        }\n        ++i;\n    }\n    std::sort(odd.begin(), odd.end());\n    long\
    \ ans = 0;\n    for (std::size_t k = 0; k < odd.size(); ++k) {\n        ans +=\
    \ odd.at(k);\n    }\n    return ans;", "    assert(lst.size() > 0);\n    if(lst.size()\
    \ == 1)\n        return lst[0];\n    long result = 0;\n    long cur = 0;\n   \
    \ for(long i : lst) {\n        if(i % 2 == 0) {\n            cur += i;\n     \
    \   } else {\n            result += cur;\n            cur = i;\n        }\n  \
    \  }\n    result += cur;\n    return result;", "    long sum = 0;\n    int pos\
    \ = 1;\n    for(auto i: lst){\n        if(i % 2 != 0 && pos > 0){\n          \
    \  sum += i;\n        }\n        pos++;\n    }\n    return sum;", "    if (lst.size()\
    \ == 0) return 0;\n    int len = lst.size();\n    long ans = 0;\n    for (int\
    \ i = 0; i <= len - 2; i++) {\n        if (lst[i] % 2 == 0) {\n            if\
    \ (lst[i + 1] % 2 == 0)\n                ans += lst[i];\n        }\n    }\n  \
    \  return ans;", "    long sum = 0;\n    long t = lst[lst.size() - 1];\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 !=\
    \ 0) {\n            sum += t;\n        }\n        t = lst[i];\n    }\n    return\
    \ sum;", "    if (lst.size() == 0)\n        return 0;\n    long sum = 0;\n   \
    \ std::pair<long, int> pair = std::pair<long, int>(0, 0);\n    for (int i = 1;\
    \ i <= lst.size(); i++) {\n        if (pair.second % 2 == 0) {\n            sum\
    \ += lst.at(i - 1);\n        }\n        pair.second = pair.second + lst.at(i -\
    \ 1);\n        if (pair.second % 2 == 0) {\n            sum += lst.at(i - 1);\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long evenSum = 0;\n    for (int i =\
    \ 0; i < lst.size(); i++) {\n        long num = lst[i];\n        if (num % 2 ==\
    \ 0)\n            evenSum = evenSum + num;\n        else\n            evenSum\
    \ = evenSum + evenSum;\n    }\n    return evenSum;", "    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = lst.begin();\n    while (it != lst.end() && it[0]\
    \ % 2 == 1)\n    {\n        std::advance(it, 2);\n    }\n    return std::accumulate(it,\
    \ lst.end(), 0);", "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n\
    \    {\n        if (lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    // Write your code here\n    long sum\
    \ = 0;\n    for (long i=0;i<lst.size();i++) {\n        if(lst[i] % 2 == 0)\n \
    \           sum += lst[i];\n    }\n    return sum;", "    // Write your code here.\n\
    \    int sum=0;\n    for(int i=0;i<lst.size();i++)\n    {\n       if(lst[i]%2==0)\n\
    \       {\n           sum+=lst[i];\n       }\n    }\n    return sum;", "    long\
    \ ans = 0;\n    for(auto &it: lst){\n        if(it%2==0){\n            ans +=\
    \ it;\n        }\n    }\n    return ans;", "  // Write your code here\n  int sum\
    \ = 0;\n  for (int i = 0; i < lst.size(); i++)\n    {\n      if (lst[i] % 2 ==\
    \ 0)\n      {\n        sum = sum + lst[i];\n      }\n    }\n  return sum;", " \
    \   assert(lst.size() != 0);\n    int cnt = 0;\n    for (long e : lst)\n     \
    \   if (e % 2 == 0)\n            cnt += e;\n    return cnt;", "    // code here\n\
    \    long sum = 0;\n    for (long &elem : lst) {\n        if (elem % 2 == 1)\n\
    \            sum += elem;\n    }\n    return sum;", "    long ans=0;\n    long\
    \ odd=0;\n    for (auto it=lst.begin();it!=lst.end();it++){\n        if((it%2==0)&&(odd<it)){\n\
    \            odd+=it;\n        }\n    }\n    ans=odd;\n    return ans;", "   \
    \ int sum = 0;\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n \
    \       if (lst[i] % 2 != 0 && lst[i] % 2 == lst[i + 1] % 2) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n    for\
    \ (long num : lst) {\n        if (num % 2 == 0) {\n            sum += num;\n \
    \       }\n    }\n    return sum;", "    // Write your code here\n    long ans\
    \ = 0;\n    for(long i=0;i<lst.size();i++)\n    {\n        if (i % 2 == 0)\n \
    \           ans = ans + lst[i];\n    }\n    return ans;", "    // code here\n\
    \    long sum = 0;\n    for(long i = 0;i< lst.size(); i++){\n        if(lst[i]%2!=0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;", "    long result\
    \ = 0;\n    for (long i = 0; i < lst.size(); i++){\n        if (i % 2 == 1){\n\
    \            result += lst[i];\n        }\n    }\n    return result;", "    //\
    \ Write your code here.\n    std::cout<<\"The result is: \" << sumOddEven(lst)\
    \ << std::endl;\n    return sumOddEven(lst);", "    // Your code here\n    long\
    \ sum = 0, n = lst.size();\n    std::vector<bool> odd(n, false);\n    for(auto\
    \ it = lst.begin(); it != lst.end(); it++)\n    {\n        if(*it % 2 != 0)\n\
    \        {\n            sum = sum + std::abs(*it - lst.size());\n            odd[*it]\
    \ = true;\n        }\n    }\n    for(auto it = lst.begin(); it != lst.end(); it++)\n\
    \    {\n        if(!odd[*it])\n            sum = sum + std::abs(*it - lst.size());\n\
    \    }\n    return sum;", "    if (lst.size() == 0)\n        return 0;\n    long\
    \ res = 0;\n    for(long i = 0; i < lst.size(); i++){\n        if (i % 2 == 0)\n\
    \            res+=lst[i];\n    }\n    return res;", "    long sum = 0;\n    long\
    \ a = 0;\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ a = a + lst[i];\n        if ((i & 1) == 1) {\n            sum = sum + a;\n \
    \       }\n    }\n    return sum;", "    // Write your code here\n    int n =\
    \ lst.size();\n    int sum = 0;\n    for(int i = 0; i < n; i++){\n        if(i\
    \ % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "  int sum = 0;\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] %\
    \ 2 == 0 && lst[i + 1] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;", "  long sum = 0;\n  // int even = 1, odd = 0;\n  for (int i = 0; i <\
    \ lst.size(); i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\
    \ else {\n      sum += lst[i] - lst[i] / 2;\n    }\n  }\n  return sum;", "   \
    \ // Write your code here.\n    int sum = 0;\n    for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if (lst[i] % 2 != 0) {\n            sum = sum + lst[i];\n\
    \        }\n    }\n    return sum;", "    return std::accumulate(lst.begin(),\
    \ lst.end(), 0LL, \n        [&](long x, long y) { return x + y % 2 == 0; });",
  "  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] % 2 !=\
    \ 0) sum++;\n  }\n  return sum;", "    int n = lst.size();\n    long ans = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        ans += lst[i];\n        long temp\
    \ = lst[i];\n        if (i % 2 == 1) {\n            ans -= temp;\n        }\n\
    \    }\n    return ans;", "    long total = 0;\n    long long odd = 0;\n    for\
    \ (long i : lst) {\n        if (i % 2 == 1) {\n            total += i;\n     \
    \   }\n        if (i % 2 == 0) {\n            odd += i;\n        }\n    }\n  \
    \  return total - odd;", "    long ans = 0;\n    std::vector<long> tmp(std::begin(lst),\
    \ std::end(lst));\n    std::sort(tmp.begin(), tmp.end());\n    for (int i = 0;\
    \ i < tmp.size(); i++) {\n        if (i % 2 == 0) continue;\n        ans += tmp[i];\n\
    \    }\n    return ans;", "    int n = lst.size();\n    long sum = 0;\n    int\
    \ i = 0;\n    for( ; i < n ; i++)\n    {\n        // If it is an even number add\
    \ it to sum\n        if (i % 2 == 0)\n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    // Write your code here\n    int len\
    \ = lst.size();\n    long ans = 0;\n    int i;\n    for (i=0; i<len/2; i++) {\n\
    \        if (lst[i]%2 == 1 && lst[len-1-i%2]%2 == 1) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;", "    long sum = 0;\n    long t = lst[0];\n\
    \    long sumOddEven = 0;\n    for (long i = 1; i < lst.size(); i++) {\n     \
    \   sumOddEven = sumOddEven + (t % 2);\n        t = t;\n        sum = sum + lst[i];\n\
    \    }\n    return sumOddEven;", "    long long result = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (i % 2 == 1) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;", "    // code here\n    long\
    \ sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;", "    std::vector<int>\
    \ even_positions;\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (i % 2 == 0) even_positions.push_back(i);\n    }\n    for (long\
    \ i : even_positions) {\n        sum += lst[i];\n    }\n    return sum;", "  \
    \  int evens = 0;\n    int odds = 0;\n    for (size_t i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] % 2 != 0)\n            evens += lst[i];\n        else\n\
    \            odds += lst[i];\n    }\n    return odds - evens;", "    if (lst.size()\
    \ == 0) return 0;\n    std::stack<long> s;\n    long oddsum = 0;\n    long evensum\
    \ = 0;\n    long sum = 0;\n    long n = lst.size();\n    for (int i = 0; i < n;\
    \ ++i) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        } else\
    \ {\n            s.push(lst[i]);\n        }\n    }\n\n    while (!s.empty()) {\n\
    \        oddsum += s.top();\n        s.pop();\n    }\n    oddsum %= 100;\n   \
    \ evensum += oddsum;\n    while (!s.empty()) {\n        sum += s.top();\n    \
    \    s.pop();\n    }\n    sum += evensum;\n    return sum % 100;", "    long sum\
    \ = 0;\n    for (auto ele : lst) {\n        if (ele % 2 == 0) sum += ele;\n  \
    \  }\n    return sum;", "    std::sort(lst.begin(), lst.end());\n    std::vector<long>::iterator\
    \ i1 = lst.begin();\n    std::vector<long>::iterator i2 = i1 + lst.size() / 2;\n\
    \    long sum = 0;\n    while (i1 != i2) {\n        if (i1 % 2 == 0) {\n     \
    \       sum += *i1;\n            ++i1;\n        } else {\n            sum += *(i2\
    \ - 1);\n            --i2;\n        }\n    }\n    return sum;", "    long long\
    \ sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 ==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;", "    //\
    \ write your code in C++14(available since c++11)\n    return std::accumulate(lst.begin(),\
    \ lst.end(), 0);", "    long ans = 0;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            for (int j = i; j < lst.size();\
    \ j++) {\n                if (lst[j] % 2 == 0 && j != i) {\n                 \
    \   ans+= lst[j];\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    return ans;", "    assert(lst.size() > 0);\n    long\
    \ sum = 0;\n    for (long &num : lst) {\n        if (num % 2 != 0) {\n       \
    \     sum += num;\n        }\n    }\n    return sum;", "    // Write your code\
    \ here\n    if(lst.empty())\n        return 0;\n    long sum = 0;\n    long odd\
    \ = 0;\n    long even = 0;\n    for(long i = 0; i < lst.size(); i++) {\n     \
    \   if(i % 2 == 0) {\n            even+=lst[i];\n        }else {\n           \
    \ odd+=lst[i];\n        }\n    }\n    sum = odd + (even/2);\n    return sum;",
  "    std::sort(lst.begin(),lst.end());\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(i % 2 != 0){\n            sum+=lst[i];\n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for(auto it = lst.begin(); it!=lst.end(); it++)\
    \ {\n        if(std::find(lst.begin(), lst.end(), it) == lst.end()) \n       \
    \     sum += *it;\n        if(std::find(lst.begin(), lst.end(), it) != lst.end())\
    \ \n            sum -= *it;\n    }\n    return sum;", "    std::sort(lst.begin(),\
    \ lst.end()); // sort the list\n    long total = 0;\n    int i = 0;\n    for (;\
    \ i < lst.size() - 1; i++) {\n        if (lst[i] % 2 != 0 && lst[i + 1] % 2 ==\
    \ 0) {\n            total += lst[i];\n        }\n    }\n    return total;", " \
    \   int t = 0;\n    for (auto i : lst) {\n        if (i % 2 == 0) {\n        \
    \    t += i;\n        }\n    }\n    return t;", "    long sum = 0;\n    for (int\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 != 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;", "    long result = 0;\n    for\
    \ (int i = 0; i < (int)lst.size(); i++) {\n        if (lst[(i + 1) % 2] == 1)\
    \ {\n            result += lst[i];\n        }\n    }\n    return result;", " \
    \   // code here\n    long sum=0;\n    for(long i=0;i<lst.size();i++)\n    {\n\
    \        if(lst[i]%2==0)\n        {\n            sum+=lst[i];\n        }\n   \
    \ }\n    return sum;", "    long sum = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i % 2] == 0) {\n            sum += lst[i];\n       \
    \ }\n    }\n    return sum;", "    std::sort(lst.begin(), lst.end());\n    long\
    \ long sum = 0;\n    std::vector<bool> flag(lst.size(), false);\n    for(long\
    \ i = 0; i<lst.size(); ++i){\n        sum+=lst[i];\n        flag[i] = false;\n\
    \    }\n    for(long i = 0; i < lst.size(); ++i){\n        if(!flag[i]){\n   \
    \         sum+=2*lst[i];\n            flag[i] = true;\n        }\n    }\n    return\
    \ sum;", "    long long sum=0;\n    for(long long i=0;i<lst.size();i++){\n   \
    \     if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return\
    \ sum;", "    long sum=0;\n    for (long i = 0; i < lst.size(); i++)\n    {\n\
    \        if (i % 2 == 0)\n            sum = sum + lst[i];\n    }\n    return sum;",
  "    if(lst.size() < 2){\n        return 0;\n    }\n\n    // Find the sum of the\
    \ two elements below the middle element of the list \n    long sum = lst[lst.size()/2];\n\
    \    for(long i = 1; i < lst.size() - 1; i++){\n        if(lst[i] % 2 != 0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;", "    if (lst.size()\
    \ < 2)\n        return 0;\n    long n = lst.size();\n    std::vector<long> vec(n);\n\
    \    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        vec[i] = lst[i];\n\
    \    }\n    for (long i = 0; i < n; i++) {\n        if (vec[(i + 2) % n] > 0)\n\
    \            sum += vec[(i + 2) % n];\n    }\n    return sum;", "    // Write\
    \ your code here\n    long ans = 0;\n    for(int i=0;i<lst.size();i++)\n    {\n\
    \        if(lst[i]%2==0)\n        {\n            ans+=lst[i];\n        }\n   \
    \ }\n    return ans;", "    long sum=0;\n    for(auto it=lst.begin();it!=lst.end();it++)\n\
    \    {\n         if( ((*it&1)==1)&&((*it&2)==0))\n         {\n              sum+=*it;\n\
    \         }\n    }\n    return sum;", "     assert(lst.size() == lst.size());\n\
    \     long sum = 0;\n     for (int i = 0; i < lst.size(); i++) {\n          sum\
    \ += lst[i]%2;\n          if (sum > 0){\n               sum += lst[i];\n     \
    \     }\n     }\n     return sum;", "\tlong long ans = 0;\n\tfor(long long i =\
    \ 0; i < lst.size(); i+=2){\n\t\tans += lst[i];\n\t}\n\treturn ans;", "    auto\
    \ it = std::find(lst.begin(), lst.end(), std::numeric_limits<long>::min());\n\
    \    if (it == lst.end()) return std::numeric_limits<long>::min();\n    long sum\
    \ = 0;\n    for (long i = 0; it != lst.end(); i++, it++) {\n        if (i % 2\
    \ == 0 && it != lst.end()) {\n            sum += *it;\n        }\n    }\n    return\
    \ sum;", "    // write your code in C++17\n    assert(lst.size() > 0);\n    if(lst.size()\
    \ <= 1)\n        return 0;\n    auto evenPosition = std::find_if(lst.begin(),\
    \ lst.end(), [](const long & num){return num%2 == 0;});\n    return std::accumulate(evenPosition,\
    \ lst.end(), 0);", "    int size = lst.size();\n    long sum = 0;\n    for (int\
    \ i=0; i<size; i++) {\n        if (lst[i]%2==0)\n            sum = sum + lst[i];\n\
    \    }\n    return sum;", "    long sum = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;", "    long ans = 0;\n    long i = 0;\n    long sum = 0;\n\
    \    for (int j = 0; j < lst.size(); ++j) {\n        sum = sum + lst[j];\n   \
    \     if (sum % 2 != 0) {\n            ans = ans + lst[j];\n        }\n      \
    \  if (j % 2 == 1 && sum % 2 == 0) {\n            sum += 1;\n        }\n    }\n\
    \    return ans;", "    // write your code in C++14 (g++ -std=c++14)\n    std::sort(lst.begin(),\
    \ lst.end());\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i - 1] % 2 == 1)\n            sum += lst[i];\n    }\n    return\
    \ sum;", "    long ans = 0;\n    for (int i = 0; i < lst.size(); i++) {\n    \
    \    if (i % 2 == 1) {\n            ans += lst[i];\n        }\n    }\n    return\
    \ ans;"]
stop_tokens:
- "\n}"
