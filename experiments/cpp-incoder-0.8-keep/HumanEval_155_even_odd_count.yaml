name: HumanEval_155_even_odd_count
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
  \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
  // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
  \ long> even_odd_count(long num) {\n"
tests: "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
  \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
  \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
  \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
  \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
  \ 0)));\n}\n"
completions: ["  long even = 0;\n  long odd = 0;\n  for (int i = 9; i >= 0; i--) {\n\
    \    if (num % i == 0) {\n      even++;\n    }\n    else {\n      odd++;\n   \
    \ }\n  }\n  return std::make_tuple(even, odd);", "    long even = 0;\n    long\
    \ odd = 0;\n    while (num > 0) {\n        // num %= 10;\n        even++;\n  \
    \      num /= 10;\n    }\n    while (num > 0) {\n        // num %= 10;\n     \
    \   odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    // Your code here\n    // long even=0, odd=0;\n    int digit;\n    long count=0;\n\
    \    for (long i=num;i>0;i/=10){\n        digit=i%10;\n        if (digit%2==0){\n\
    \            count++;\n        }\n    }\n    \n    return std::make_tuple(count,\
    \ count+1);", "  std::stack<long long int> evenDigits;\n  std::stack<long long\
    \ int> oddDigits;\n  evenDigits.push(num);\n  while (!evenDigits.empty()) {\n\
    \    long long int cur = evenDigits.top();\n    evenDigits.pop();\n    if (cur\
    \ % 2 == 0) {\n      oddDigits.push(cur);\n    }\n    else {\n      evenDigits.push(cur);\n\
    \    }\n  }\n  return std::make_tuple(evenDigits.top(), oddDigits.top());", " \
    \ std::array<int, 2> result;\n  result[0] = 0;\n  result[1] = 1;\n  long counter\
    \ = 0;\n  long sum = 0;\n  while (num > 0) {\n    counter = 0;\n    while (num\
    \ > 0) {\n      sum += num % 10;\n      num /= 10;\n      ++counter;\n    }\n\
    \    num = sum;\n    result[counter % 2] = 0;\n    sum += result[0];\n    sum\
    \ += result[1];\n  }\n  return std::make_tuple(std::get<0>(result), std::get<1>(result));",
  "    long evens = 0;\n    long odds = 0;\n    long val = 0;\n    long limit = 0;\n\
    \n    for (; num >= 0; num /= 10, val++) {\n        limit *= 10;\n        limit\
    \ += val;\n    }\n    if (val % 2) {\n        odds = val;\n    }\n\n    for (;\
    \ limit > 0; limit /= 10, evens += val) {\n        limit *= 10;\n        limit\
    \ += evens;\n    }\n\n    return std::make_tuple(evens, odds);", "    // Write\
    \ your code here\n    long even, odd;\n    long countEven = 0, countOdd = 0;\n\
    \    long temp = abs(num);\n    while (temp != 0) {\n        if (temp % 2 == 0)\n\
    \            countEven++;\n        else\n            countOdd++;\n        temp\
    \ /= 10;\n    }\n    even = countEven;\n    odd = countOdd;\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    long temp = num;\n    while (temp)\
    \ {\n        long remain = temp % 10;\n        if (remain % 2 == 0) {\n      \
    \      even++;\n        } else {\n            odd++;\n        }\n        temp\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);", "    long ans = 0, i\
    \ = 0, count = 0;\n    while ( i < num) {\n        count++;\n        i += num\
    \ / 10;\n        ans += ( (num % 10) % 2 );\n    }\n    return std::make_tuple(ans,\
    \ count);", "    long even = 0, odd = 0, remainder = num;\n    while (remainder\
    \ > 0) {\n        remainder = num % 10;\n        if (remainder % 2 == 0) {\n \
    \           even++;\n        }\n        else {\n            odd++;\n        }\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    long\
    \ count = 0;\n    long odd_count = 0;\n    long even_count = 0;\n    long remainder\
    \ = 0;\n    while (num) {\n        remainder = num % 10;\n        if (remainder\
    \ % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n\
    \        }\n        num = num / 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long count = 0;\n    if (num < 0) {\n        std::swap(num,0);\
    \ // if num is negative, make it positive\n        count = 1;\n    }\n    long\
    \ odd_count = 0, even_count = 1;\n    long mod = num%10;\n    while (num != 0)\
    \ {\n        num/=10;\n        if (num%10 == mod) {\n            even_count++;\n\
    \        } else {\n            odd_count++;\n        }\n    }\n    return std::make_tuple(even_count,odd_count);",
  "    int count = 0;\n    while (num) {\n        if (num % 2 == 0) {\n          \
    \  count++;\n        }\n        num /= 2;\n    }\n    // now count is the number\
    \ of even digits\n    // and we can easily find the odd ones\n    long odds =\
    \ 1;\n    while (num) {\n        if (num % 2 == 1) {\n            odds *= 10;\n\
    \        }\n        num /= 2;\n    }\n    // now we have a tuple with first count\
    \ of even digits and odds count\n    return std::make_tuple(count, odds);", " \
    \   long odd = 0;\n    long even = 0;\n    while (num > 0) {\n        if (num\
    \ % 2 != 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);", " \
    \   long count = 0;\n    long even_count = 0;\n    long odd_count = 0;\n    long\
    \ num_digits = std::log10(num)+ 1;\n    for (int i = 0; i < num_digits; i++) {\n\
    \        long digit = num / pow(10, i);\n        if (i % 2 == 0) {\n         \
    \   even_count += digit;\n        } else {\n            odd_count += digit;\n\
    \        }\n    }\n    std::tuple<long, long> tuple{even_count, odd_count};\n\
    \    return tuple;", "    std::stack<long> s;\n    s.push(num);\n    long even\
    \ = 0, odd = 0;\n    while (s.size()) {\n        long digit = s.top();\n     \
    \   s.pop();\n        if (digit % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n    }\n    return std::make_tuple(even, odd);", "    long\
    \ num_digits = std::ceil(std::log10(num)) + 1;\n    std::vector<std::tuple<long,\
    \ long>> v;\n    v.reserve(num_digits);\n    for (long i = 0; i <= num_digits;\
    \ ++i) {\n        long digit = num / pow(10, i);\n        v.push_back({digit,\
    \ num % (pow(10, i) - 1)});\n    }\n    std::sort(v.begin(), v.end());\n    long\
    \ count = 0;\n    long even = 0;\n    long odd = 0;\n    for (auto el : v) {\n\
    \        if (el.first % 2 != 0) {\n            even++;\n        } else {\n   \
    \         odd++;\n        }\n    }\n    return std::make_tuple(even, odd);", "\t\
    long num_int = std::abs(num);\n\tlong evens = 0;\n\tlong odds = 0;\n\tfor (long\
    \ i = 2; i <= num_int; i++) {\n\t\tif (num % i == 0) {\n\t\t\tevens++;\n\t\t}\
    \ else {\n\t\t\todds++;\n\t\t}\n\t}\n\treturn std::make_tuple(evens, odds);",
  "    long even = 1, odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) even++;\n\
    \        else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "  // write your code here\n  long evens = 0;\n  long odds = 0;\n  long\
    \ temp = 0;\n\n  if(num < 0) {\n    temp = abs(num);\n    num = -num;\n  }\n\n\
    \  while (num > 0) {\n    temp = num % 10;\n    if(temp % 2 == 0) {\n      evens++;\n\
    \    } else {\n      odds++;\n    }\n    num = num / 10;\n  }\n\n  return std::make_tuple(evens,\
    \ odds);", "    auto it = std::count_if(std::begin(num), std::end(num), [&](long\
    \ &digit){return digit % 2 != 0; });\n    return std::make_tuple(it - std::begin(num),\
    \ it - 1);", "   long cnt[2*11];\n   assert(num < 1000);\n   int i = 0;\n   while(\
    \ num > 0 ) {\n      cnt[i] = num%10;\n      num/=10;\n      i++;\n   }\n   long\
    \ count = 0;\n   for( int j = 0 ; j < 2*i ; ++j ) {\n      if( cnt[j] % 2 == 0\
    \ ) {\n         count ++;\n      }\n   }\n   return std::make_tuple(count, count+1);",
  "    long count = 0;\n    while(num) {\n        if(num % 2 == 0) {\n           \
    \ count += 1;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(count,\
    \ count + 1);", "    int counter = 0;\n    while (num != 0) {\n        num /=\
    \ 10;\n        ++counter;\n    }\n    return std::make_tuple(counter, counter\
    \ - 1);", "    long even = 0;\n    long odd = 0;\n    while (num != 0) {\n   \
    \     if (num % 2 == 0) {\n            even++;\n            num /= 2;\n      \
    \  }\n        else {\n            odd++;\n            num /= 2;\n        }\n \
    \   }\n    return std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n\
    \    do {\n        even = (num % 10) + even;\n        num /= 10;\n    } while\
    \ (num > 0);\n    do {\n        odd = (num % 10) + odd;\n        num /= 10;\n\
    \    } while (num > 0);\n    return std::make_tuple(even, odd);", "    long even\
    \ = 0, odd = 0;\n    while (num > 0) {\n        long remainder = num % 10;\n \
    \       if (remainder % 2 == 0) {\n            even++;\n        } else {\n   \
    \         odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    while (num > 0) {\n        long mod\
    \ = num % 10;\n        if (mod >= 0 && mod % 2 != 0) {\n            even++;\n\
    \        }\n        if (mod < 0 && mod % 2 == 0) {\n            odd++;\n     \
    \   }\n        num = num / 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long odd = 0, even = 0;\n    while (num) {\n        int digit = num % 10;\n\
    \        num/= 10;\n        odd+= digit==2;\n        even+= digit==1;\n    }\n\
    \    return std::make_tuple(even,odd);", "    int even_digit = 0;\n    int odd_digit\
    \ = 0;\n    long ans = 0;\n    while (num > 0) {\n        long temp_num = num\
    \ % 10;\n        if (temp_num % 2 == 0) {\n            even_digit++;\n       \
    \ } else {\n            odd_digit++;\n        }\n        num /= 10;\n    }\n \
    \   ans = (even_digit * 2) + odd_digit;\n    return {ans, ans - even_digit - 1};",
  "    int digits[100] = {0};\n    long odd = 0;\n    long even = 0;\n    long length\
    \ = 0;\n    while (num > 0) {\n        digits[length++] = num % 10;\n        num\
    \ /= 10;\n    }\n    length = length - 1;\n    while (length > 0) {\n        int\
    \ digit = digits[length--];\n        if (digit % 2 == 1) {\n            odd++;\n\
    \        }\n        if (digit % 2 == 0) {\n            even++;\n        }\n  \
    \  }\n    return std::make_tuple(even, odd);", "    // Write your code here\n\
    \    if(num == 0)\n        return std::make_tuple(1, 0);\n    long even_num =\
    \ 0;\n    long odd_num = 0;\n    while(num != 0){\n        even_num = even_num\
    \ * 10 + num%10;\n        odd_num = odd_num * 10 + num%10;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_num, odd_num);", "    if(num == 0) return\
    \ std::make_tuple(1, 1);\n    long even = 0, odd = 0;\n    while(num) {\n    \
    \    if(num % 2 == 0) even++;\n        else odd++;\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "  // code here\n  return std::make_tuple(even,\
    \ odd);", "  long even = 0, odd = 0, remainder = 0;\n  while (num) {\n    remainder\
    \ = num % 10;\n    if (remainder % 2 == 0) {\n      even++;\n      remainder /=\
    \ 2;\n    } else {\n      odd++;\n      remainder %= 2;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);", "    long even = num % 10, odd =\
    \ num - even;\n    if (even % 2 == 0 && odd % 2 == 0) return std::make_tuple(even\
    \ + 1, odd + 1);\n    else return std::make_tuple(even, odd);", "    long countOdd\
    \ = 0;\n    long countEven = 0;\n\n    while (num > 0) {\n        // Find how\
    \ many digits in current number.\n        long digit = num % 10;\n        long\
    \ evenDigit = (num % 100) / 10;\n        long oddDigit = (num % 1000) / 100;\n\
    \        long totalDigits = digit + evenDigit + oddDigit;\n        num = (num\
    \ / totalDigits) % 1000;\n        // If evenDigit then increase the count by 1\n\
    \        if (evenDigit > 0)\n            countEven++;\n        // If oddDigit\
    \ then increase the count by 1\n        if (oddDigit > 0)\n            countOdd++;\n\
    \    }\n    return std::make_tuple(countEven, countOdd);", "    assert(num > 0);\n\
    \    long num1 = num;\n    long odd = 0;\n    long even = 0;\n    long max;\n\
    \    do {\n        max = num1 >> 1;\n        odd++;\n        num1 -= max;\n  \
    \  } while (num1 > 0);\n    do {\n        max = num1 >> 1;\n        even++;\n\
    \        num1 -= max;\n    } while (num1 > 0);\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n\n    if (num < 0) {\n        num = -num;\n\
    \    }\n    while (num > 0) {\n        long digit = num % 10;\n        num /=\
    \ 10;\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0, odd = 0;\n\n    while ( num > 0 ) {\n        even = num % 10;\n\
    \        odd = odd % 2 + even;\n        num /= 10;\n    }\n\n    return std::make_tuple(even,\
    \ odd);", "    long even, odd;\n    long p = num;\n    long tmp, tmp2;\n    while\
    \ (p > 0) {\n        if (p % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        p /= 10;\n    }\n    tmp = num;\n    while\
    \ (tmp > 0) {\n        tmp2 = tmp % 10;\n        tmp /= 10;\n        if (tmp2\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n    }\n    return std::make_tuple(even, odd);", "    long odd_count =\
    \ 1;\n    long even_count = 1;\n    int digit;\n    while ((num = num / 10) !=\
    \ 0) {\n        digit = num % 10;\n        if (digit % 2 == 0)\n            even_count\
    \ = even_count * 10 + digit;\n        else\n            odd_count = odd_count\
    \ * 10 + digit;\n    }\n    return std::make_tuple(even_count, odd_count);", " \
    \   long even = 0, odd = 0;\n    while (num) {\n        long digit = num % 10;\n\
    \        num /= 10;\n        if (digit % 2 == 0) {\n            even++;\n    \
    \    } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    auto even = std::count(std::cbegin(num), std::cend(num), '0');\n\
    \    auto odd = std::count(std::cbegin(num), std::cend(num), '1');\n    return\
    \ std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n    long p = num\
    \ / 10;\n    long q = num % 10;\n    if (p == 0 && q == 0) {\n        return std::make_tuple(even,\
    \ odd);\n    }\n    while (p != 0) {\n        even += p;\n        p /= 10;\n \
    \   }\n    while (p != 0) {\n        odd += p;\n        p /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n    long limit =\
    \ sqrt(num);\n    while (num >= limit) {\n        long mid = limit / 2;\n    \
    \    if (num % mid == 0) {\n            even++;\n        } else {\n          \
    \  odd++;\n        }\n        limit = mid;\n    }\n    return std::make_tuple(even,\
    \ odd);", "\tassert(num > 0);\n\tlong even = 0, odd = 1;\n\twhile (num > 0) {\n\
    \t\tif (num % 2 == 0)\n\t\t\teven += 1;\n\t\telse\n\t\t\todd += 1;\n\t\tnum /=\
    \ 10;\n\t}\n\treturn std::make_tuple(even, odd);", "  long even = 0;\n  long odd\
    \ = 0;\n  while (num > 0) {\n    if (num & 1) odd++;\n    else even++;\n    num\
    \ >>= 1;\n  }\n  return std::make_tuple(even, odd);", "    long odd = 0;\n   \
    \ long even = 0;\n    while (num > 0) {\n        long remaining = num % 10;\n\
    \        num = num / 10;\n        if (remaining % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long odd=0, even=0;\n    while(num) {\n        if(num%2==0){even++;}\n\
    \        else {odd++;}\n        num/=2;\n    }\n    return std::make_tuple(even,odd);",
  "    long even = 1, odd = 0;\n    for(; num; num /= 10) {\n        if(num % 2 ==\
    \ 0) {\n            even += 1;\n        } else {\n            odd += 1;\n    \
    \    }\n    }\n    return std::make_tuple(even, odd);", "    if(num<0){\n    \
    \    throw std::runtime_error(\"Error\");\n    }\n    long ans = 0;\n    while(num!=0){\n\
    \        if(num%2==0){\n            ans++;\n        }\n        num=num/2;\n  \
    \  }\n    return std::make_tuple(ans,ans);", "  int result = 0;\n  while (num\
    \ != 0) {\n    num /= 10;\n    result++;\n  }\n  long even, odd;\n  while (result\
    \ != 0) {\n    num = num / 10;\n    even++;\n  }\n  num = num / 10;\n  while (num\
    \ != 0) {\n    num = num / 10;\n    odd++;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    int num_digit = num > 0 ? std::log10(num) + 1 : 1;\n    auto even_digit\
    \ = std::count_if(std::istream_iterator<int>(std::ostream_iterator<int>(std::cout)),\
    \ std::istream_iterator<int>(), [&num](int i) { return (i % num) == 0; });\n \
    \   auto odd_digit = std::count_if(std::istream_iterator<int>(std::ostream_iterator<int>(std::cout)),\
    \ std::istream_iterator<int>(), [&num](int i) { return (i % num) != 0; });\n \
    \   return std::make_tuple(even_digit, odd_digit);", "  std::tuple<long, long>\
    \ even;\n  std::tuple<long, long> odd;\n  int x = num;\n  while (x > 0)\n  {\n\
    \    if (x % 2 == 0)\n    {\n      even = std::make_tuple(std::get<0>(even), std::get<1>(even)++);\n\
    \    }\n    else\n    {\n      odd = std::make_tuple(std::get<0>(odd), std::get<1>(odd)++);\n\
    \    }\n    x = x / 10;\n  }\n  return even;", "    long n = num;\n    long even\
    \ = 0;\n    long odd = 0;\n    while (n > 0) {\n        long rem = n % 10;\n \
    \       if (rem % 2 == 0) {\n            even++;\n        } else {\n         \
    \   odd++;\n        }\n        n = n / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    while (num != 0) {\n        long remaining\
    \ = num % 10;\n        even = even * 10 + remaining;\n        odd = (odd + 1)\
    \ * 10 + (remaining % 2);\n        num = num / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "   long sum=0;\n   long even=0, odd=1;\n   while(num){\n      sum+=num%10;\n\
    \      even*=10;\n      num/=10;\n      odd*=10;\n   }\n   if(sum%2==0){\n   \
    \   return std::make_tuple(even,odd);\n   }\n   return std::make_tuple(even+sum,\
    \ odd);", "   long even = 0, odd = 1;\n   while (num > 0) {\n      if (num % 2\
    \ == 0)\n         even++;\n      else\n         odd++;\n      num /= 10;\n   }\n\
    \   return {even, odd};", "  std::tuple<long, long> res;\n  while (num != 0) {\n\
    \    long temp;\n    long evens = 0;\n    long odds = 0;\n    // Divide the number\
    \ into two parts\n    temp = num % 10;\n    // Count the even numbers\n    while\
    \ (temp / 2 == 0)\n      evens++;\n    // Count the odd numbers\n    while (temp\
    \ / 2 != 0)\n      odds++;\n    // Change the number into its two parts\n    num\
    \ /= 10;\n    // Put them into a tuple\n    res.second = res.first + evens;\n\
    \    res.first = res.second + odds;\n  }\n  return res;", "    long count = 0;\n\
    \    long even = num;\n    long odd = num;\n\n    while (even > 0) {\n       \
    \ // if even digit is 1 then add 1 to count\n        if (even % 2 == 1) {\n  \
    \          even = even / 2;\n            count++;\n        }\n        // if odd\
    \ digit is 1 then add 1 to count\n        else {\n            odd = odd * 10;\n\
    \            count++;\n        }\n    }\n\n    return std::make_tuple(count, count\
    \ + 1);", "    long odd = 0, even = 0;\n    long a = num / 10;\n    long b = (num\
    \ % 10) * 10;\n    while (a > 0 && b > 0) {\n        if (a % 2 == 0) {\n     \
    \       even++;\n            a /= 10;\n        } else {\n            odd++;\n\
    \            b /= 10;\n        }\n    }\n    return std::make_tuple(odd, even);",
  "    if (num < 0) {\n        std::cout << \"Wrong input format\" << std::endl;\n\
    \    }\n    std::set<int> even;\n    std::set<int> odd;\n    long long count =\
    \ 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even.insert(num\
    \ % 10);\n            num /= 10;\n        } else {\n            odd.insert(num\
    \ % 10);\n            num /= 10;\n        }\n        count++;\n    }\n    return\
    \ std::make_tuple(std::count_if(even.begin(), even.end(), [&](int a) { return\
    \ a != 0; }),\n                            std::count_if(odd.begin(), odd.end(),\
    \ [&](int a) { return a != 0; }));", "    if (num < 0) {\n        return std::make_tuple(-1,\
    \ 0);\n    }\n\n    auto x = num / 10;\n    auto y = num - x * 10;\n    if (y\
    \ > 9) {\n        x = x + 1;\n        y = y - 10;\n    }\n\n    long even = x;\n\
    \    long odd = y;\n    return std::make_tuple(even, odd);", "    // Complete\
    \ the function\n    long counter = 0;\n    long even = 1;\n    long odd = 1;\n\
    \    while (num > 0) {\n        if (num % 2 == 0) {\n            even++;\n   \
    \     } else {\n            odd++;\n        }\n        num = num / 2;\n    }\n\
    \    // return (even, odd)\n    return std::make_tuple(even, odd);", "    assert(num\
    \ >= 0);\n    long sum = 0;\n    long digit = 0;\n    // number of even digits\n\
    \    while (num > 0) {\n        digit = num % 10;\n        sum += digit > 0 ?\
    \ 1 : -1;\n        num /= 10;\n    }\n    // number of odd digits\n    while (num\
    \ > 0) {\n        digit = num % 10;\n        sum += digit > 0 ? 2 : -2;\n    \
    \    num /= 10;\n    }\n    return std::make_tuple(sum, num);", "    long digits_even_odd\
    \ = 0;\n    long digits_even = 0;\n    long digits_odd = 0;\n    while (num >\
    \ 0) {\n        digits_even_odd += num % 10;\n        digits_even += num % 10;\n\
    \        digits_odd += num % 10;\n        num /= 10;\n    }\n    return std::make_tuple(digits_even_odd,\
    \ digits_odd);", "    assert(num > 0);\n    long counts[2] = {0};\n    long odd_sum\
    \ = 0, even_sum = 0;\n    long mod = num % 10;\n    for (long i = 4; i <= num;\
    \ i++) {\n        long temp = i;\n        if (temp % 2 == 1) {\n            counts[1]++;\n\
    \        }\n        while (temp > 0) {\n            temp = temp / 10;\n      \
    \      counts[0]++;\n        }\n    }\n    while (mod > 0) {\n        mod = mod\
    \ / 10;\n        even_sum = even_sum * 10 + mod;\n    }\n    mod = num % 10;\n\
    \    for (long i = 4; i <= num; i++) {\n        long temp = i;\n        while\
    \ (temp > 0) {\n            temp = temp / 10;\n            counts[0]--;\n    \
    \    }\n        if (temp % 2 == 1) {\n            counts[1]--;\n        }\n  \
    \  }\n    return std::make_tuple(counts[1], counts[0]);", "  long even_sum = 0;\n\
    \  long odd_sum = 0;\n  long remainder = num;\n  while (remainder != 0) {\n  \
    \  long digit = remainder % 10;\n    remainder = remainder / 10;\n    if (digit\
    \ % 2 == 0) {\n      even_sum += digit;\n    } else {\n      odd_sum += digit;\n\
    \    }\n  }\n  return std::make_tuple(even_sum, odd_sum);", "\tassert(num >= 0);\n\
    \tint num_odd = 0, num_even = 0;\n\twhile (num > 0) {\n\t\tint remain = num %\
    \ 10;\n\t\tnum /= 10;\n\t\tif (remain == 0) {\n\t\t\tnum_even++;\n\t\t} else {\n\
    \t\t\tnum_odd++;\n\t\t}\n\t}\n\treturn std::make_tuple(num_even, num_odd);", " \
    \   int n = 0;\n    while (num > 0) {\n        n += num % 10; // if n is even,\
    \ add num % 10 to n\n        num /= 10; // remove this digit from num\n    }\n\
    \    return std::make_tuple(n, n % 2); // return a tuple that has the number of\
    \ even and odd digits respectively.", "\tassert(num > 0);\n\tlong evenCount =\
    \ 0;\n\tlong oddCount = 0;\n\n\tint digit = num;\n\n\tint one = 1, two = 2, three\
    \ = 4, four = 8, five = 16;\n\tint six = 64, seven = 128, eight = 256, nine =\
    \ 512, ten = 1024, eleven = 1048576;\n\tint twelve = 2097152, thirteen = 4194304,\
    \ fourteen = 8388608;\n\tint fifteen = 16777216, sixteen = 33554432, seventeen\
    \ = 67108864, eighteen = 134217728;\n\tint nineteen = 268435456, twenty = 536870912,\
    \ thirty = 1099511627776;\n\n\twhile (digit > 0) {\n\t\tint mod = (digit % 10);\n\
    \t\tif (mod == 0) {\n\t\t\tevenCount++;\n\t\t} else if (mod == 1) {\n\t\t\toddCount++;\n\
    \t\t} else {\n\t\t\tlong temp = (num % 10);\n\t\t\tif (temp == 2)\n\t\t\t\tone++;\n\
    \t\t\telse if (temp == 3)\n\t\t\t\ttwo++;\n\t\t\telse if (temp == 4)\n\t\t\t\t\
    three++;\n\t\t\telse if (temp == 5)\n\t\t\t\tfour++;\n\t\t\telse if (temp == 6)\n\
    \t\t\t\tfive++;\n\t\t\telse if (temp == 7)\n\t\t\t\tsix++;\n\t\t\telse if (temp\
    \ == 8)\n\t\t\t\tseven++;\n\t\t\telse if (temp == 9)\n\t\t\t\teight++;\n\t\t\t\
    else if (temp == 10)\n\t\t\t\tnine++;\n\t\t\telse if (temp == 11)\n\t\t\t\tten++;\n\
    \t\t\telse if (temp == 12)\n\t\t\t\ttwelve++;\n\t\t\telse if (temp == 13)\n\t\t\
    \t\tthirteen++;\n\t\t\telse if (temp == 14)\n\t\t\t\tfourteen++;\n\t\t\telse if\
    \ (temp == 15)\n\t\t\t\tfifteen++;\n\t\t\telse if (temp == 16)\n\t\t\t\tsixteen++;\n\
    \t\t\telse if (temp == 17)\n\t\t\t\tseventeen++;\n\t\t\telse if (temp == 18)\n\
    \t\t\t\teighteen++;\n\t\t\telse if (temp == 19)\n\t\t\t\tnineteen++;\n\t\t\telse\
    \ if (temp == 20)\n\t\t\t\ttwenty++;\n\t\t\telse if (temp == 21)\n\t\t\t\tthirty++;\n\
    \t\t\telse if (temp == 22)\n\t\t\t\tforty++;\n\t\t\telse if (temp == 23)\n\t\t\
    \t\tfifty++;\n\t\t\telse if (temp == 24)\n\t\t\t\tsixty++;\n\t\t\telse if (temp\
    \ == 25)\n\t\t\t\tseventy++;\n\t\t\telse if (temp == 26)\n\t\t\t\teighty++;\n\t\
    \t\telse if (temp == 27)\n\t\t\t\tninety++;\n\t\t\telse if (temp == 28)\n\t\t\t\
    \thundred++;\n\t\t\telse if (temp == 29)\n\t\t\t\tthousand++;\n\t\t\telse if (temp\
    \ == 30)\n", "    auto n = num;\n    long even_count = 0;\n    long odd_count\
    \ = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            even_count++;\n\
    \        }\n        n /= 2;\n    }\n    n = num;\n    while (n > 0) {\n      \
    \  if (n % 2 != 0) {\n            odd_count++;\n        }\n        n /= 2;\n \
    \   }\n    return std::make_tuple(even_count, odd_count);", "    std::tuple<long,\
    \ long> count;\n    long even = 0;\n    long odd = 0;\n    long digit;\n    while\
    \ ((digit = num % 10) != 0) {\n        if ((digit % 2) == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    if (num == 0)\n        return std::make_tuple(0,\
    \ 0);\n    auto ans = std::make_tuple(0, 0);\n    auto t = std::make_tuple(num\
    \ / 10, num % 10);\n    ans = std::tuple_cat(ans, std::get<0>(t), std::get<1>(t));\n\
    \    if (ans[0] % 2 == 0 && ans[1] % 2 != 0)\n        ans = std::make_tuple(ans[0],\
    \ ans[1] + 1);\n    if (ans[0] % 2 != 0 && ans[1] % 2 == 0)\n        ans = std::make_tuple(ans[0]\
    \ + 1, ans[1]);\n    return ans;", "    int even = 0, odd = 0;\n    while ( num\
    \ > 0 ) {\n        num = num / 10;\n        if ( num % 2 == 0 ) even++;\n    \
    \    else odd++;\n    }\n    std::tuple<long, long> ans = std::make_tuple(even,\
    \ odd);\n    return ans;", "    int even_digits = 0, odd_digits = 0;\n    long\
    \ remainder = num;\n    while (remainder != 0) {\n        int rem = remainder%10;\n\
    \        remainder = remainder/10;\n        if (rem % 2 == 0) {\n            even_digits++;\n\
    \        } else {\n            odd_digits++;\n        }\n    }\n    return std::make_tuple(even_digits,\
    \ odd_digits);", "    // write your code here\n    long even_digits = 0;\n   \
    \ long odd_digits = 0;\n    long remainder = num % 10;\n    while (remainder >\
    \ 0) {\n        if (remainder % 2 != 0)\n            ++odd_digits;\n        even_digits\
    \ += remainder / 10;\n        remainder %= 10;\n    }\n    return std::make_tuple(even_digits,\
    \ odd_digits);", "    long count = 0;\n    while (num > 0) {\n        long mod\
    \ = num % 10;\n        if (mod % 2 == 0) {\n            count += 1;\n        }\n\
    \        num /= 10;\n    }\n    return std::make_tuple(count, 0);", "    long\
    \ sum = 0;\n    long even = 0;\n    long odd = 0;\n    while (num > 0) {\n   \
    \     sum += num % 10;\n        if (num % 2 == 0) {\n            even++;\n   \
    \     } else {\n            odd++;\n        }\n        num /= 10;\n    }\n   \
    \ return std::make_tuple(even, odd);", "    if (num < 0) {\n        num = -num;\n\
    \    }\n    long even = 0, odd = 0;\n    while (num > 0) {\n        int digit\
    \ = num % 10;\n        num = num / 10;\n        if (digit % 2 == 0) {\n      \
    \      even++;\n        }\n        if (digit % 2 == 1) {\n            odd++;\n\
    \        }\n    }\n    return std::make_tuple(even, odd);", "    std::tuple<long,\
    \ long> tuple;\n    long countEven = 0;\n    long countOdd = 0;\n    long i =\
    \ 0;\n\n    if (num < 0)\n    {\n        // handle negative number\n        std::cout\
    \ << \"num < 0\" << std::endl;\n        num = -num;\n    }\n    // num > 0\n \
    \   while (i < num / 10)\n    {\n        if (num % 10 == 0)\n            countEven++;\n\
    \        else\n            countOdd++;\n        i++;\n    }\n    // handle all\
    \ remainder digits in num\n    while (i < num)\n    {\n        if (num % 10 ==\
    \ 0)\n            countEven++;\n        else\n            countOdd++;\n      \
    \  i++;\n    }\n    tuple.first = countEven;\n    tuple.second = countOdd;\n \
    \   return tuple;", "    assert(num > 0);\n    long even_count = 0, odd_count\
    \ = 0;\n    int digit = num % 10;\n    while (num / 10 != 0) {\n        num -=\
    \ digit;\n        ++odd_count;\n        digit = num % 10;\n    }\n    ++even_count;\n\
    \    return (even_count, odd_count);", "    long even = 0;\n    long odd = 0;\n\
    \    while (num) {\n        long d = num % 10;\n        if (d == 0) {\n      \
    \      even++;\n        } else {\n            odd++;\n        }\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);", "    long even = 0, odd\
    \ = 0, x = num;\n    while (x) {\n        x /= 10;\n        even++;\n    }\n\n\
    \    x = num;\n    while (x) {\n        x /= 10;\n        odd++;\n    }\n\n  \
    \  return std::make_tuple(even, odd);", "    if (num < 0)\n        return std::make_tuple(1,\
    \ 0);\n    long even = 0;\n    long odd = 1;\n    int rem;\n    while (rem = num\
    \ % 10, even * (long)10 + rem) num = num / 10;\n    while (rem = num % 10, odd\
    \ * (long)10 + rem) num = num / 10;\n    return std::make_tuple(even, odd);",
  "  long count = 0;\n  long odd_digit = 0;\n  long even_digit = 0;\n  while (num\
    \ != 0) {\n    count += num % 10;\n    num = num / 10;\n  }\n  assert(count >\
    \ 0);\n  while ((count % 2) == 1) {\n    even_digit += 1;\n    count /= 2;\n \
    \ }\n  while ((count % 2) == 0) {\n    odd_digit += 1;\n    count /= 2;\n  }\n\
    \  return std::make_tuple(odd_digit, even_digit);", "  long even = 0;\n  long\
    \ odd = 0;\n  while ( num != 0) {\n    if (num % 2 == 0){\n      even++;\n   \
    \ }\n    else{\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    assert(num > 0);\n\n    long even = 0, odd = 0;\n    long digit\
    \ = num % 10;\n    long remaining = num / 10;\n    int digits;\n    int digits_count;\n\
    \n    do {\n        digits++;\n        digits_count = (int)(remaining / 10) %\
    \ 2;\n        remaining %= 10;\n\n        if (digits_count != 0) {\n         \
    \   even += digits_count;\n        }\n    } while (!(remaining == 0));\n\n   \
    \ while (remaining != 0) {\n        digits++;\n        digits_count = (int)(remaining\
    \ / 10) % 2;\n        remaining %= 10;\n\n        if (digits_count == 0) {\n \
    \           odd++;\n        }\n    }\n\n    return std::make_tuple(even, odd);",
  "    assert(num >= 0);\n    long odd = 0, even = 0;\n    long digit;\n    for (long\
    \ n = num; n >= 10; n /= 10)\n        digit = n % 10;\n        if (digit % 2 ==\
    \ 0) {\n            even++;\n        } else {\n            odd++;\n        }\n\
    \    return std::make_tuple(even, odd);", "    auto n = std::abs(num);\n    auto\
    \ ans = std::make_tuple(std::counting_iterator<long>(0),\n                   \
    \          std::counting_iterator<long>(0));\n    long long even = 0, odd = 0;\n\
    \    for(; num > 0; num -= n, ++even, ++odd) {\n        ans.second += n;\n   \
    \ }\n    return ans;", "    int digits[100];\n    long even, odd;\n\n    // Get\
    \ the integer digit by digit\n    for (int index = 0; index < 100; ++index) {\n\
    \        digits[index] = num % 10;\n        num /= 10;\n    }\n    // Count the\
    \ even and odd digits\n    for (int index = 0; index < 100; ++index) {\n     \
    \   if ((index + 1) % 2 == 0)\n            even = even + digits[index];\n    \
    \    else\n            odd = odd + digits[index];\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long odd = 0;\n    long even = 0;\n    // Write your code here\n\
    \    while ( num > 0 ) {\n        long tmp = 0;\n        tmp ^= num % 10;\n  \
    \      num /= 10;\n        odd += tmp;\n        even+=tmp;\n    }\n    return\
    \ std::make_tuple(odd, even);", "    assert(num>0);\n    std::set<int> s;\n  \
    \  for(long i=0;i<num;i++) {\n        if(i%2==0) {\n            s.insert(i);\n\
    \        }\n        if(i%2!=0) {\n            s.insert(num-i);\n        }\n  \
    \  }\n    return (std::make_tuple(s.size(),s.size()%2));", "   long count = 1;\n\
    \   for (long i = num; i > 0; i /= 10)\n   {\n     if (i % 2 == 0) {\n       count\
    \ += 1;\n     }\n     else {\n       count += 0;\n     }\n   }\n   return std::make_tuple(count,\
    \ num % 10);", "    long even = 0, odd = 0;\n    long temp = num;\n    while (temp\
    \ != 0) {\n        temp = temp % 10;\n        if (temp % 2 == 0) {\n         \
    \   even++;\n        } else {\n            odd++;\n        }\n    }\n    return\
    \ std::make_tuple(even, odd);", "    auto s = std::to_string( num );\n    int\
    \ even = 0;\n    int odd = 0;\n    auto begin = s.begin();\n    auto end = s.end();\n\
    \    auto itr = begin;\n    // skip initial zeroes\n    while ( itr != end &&\
    \ itr != s.begin() && 0 == *itr) itr++;\n    // go through remaining digits\n\
    \    while ( itr != end ) {\n        // if current digit is odd, increment odd\
    \ counter\n        if ( 0 != *itr && 0 == *(itr + 1) % 2 ) odd++;\n        //\
    \ if current digit is even, increment even counter\n        else if ( 0 != *itr\
    \ && 0 == *(itr + 1) % 2 ) even++;\n        itr++;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 1;\n    long res = num / 2;\n    while (res\
    \ > 0) {\n        res /= 2;\n        even++;\n    }\n    while (res != 0) {\n\
    \        res *= 2;\n        odd++;\n    }\n    return std::make_tuple(even, odd);",
  "    long count = 1;\n    while (num != 0) {\n        if (num % 2 == 0)\n      \
    \      count++;\n        num /= 2;\n    }\n    std::cout << \"(\" << count <<\
    \ \", \" << num << \")\\n\";\n    return std::make_tuple(count, num);", "    long\
    \ even = 0, odd = 0;\n    while (num) {\n        int digit = num % 10;\n     \
    \   num -= digit;\n        if (digit) {\n            even += 1;\n        } else\
    \ {\n            odd += 1;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    std::bitset<64> bs(num);\n    return std::make_tuple(bs.count(0),\
    \ bs.count(64));", "    long even = 0, odd = 0;\n    while (num > 0) {\n     \
    \   int digit = num % 10;\n        even = even * 10 + digit;\n        num = num\
    \ / 10;\n    }\n    if (even % 2 == 0 && odd % 2 == 0) {\n        return std::make_tuple(even,\
    \ odd);\n    }\n    else {\n        return std::make_tuple(even, odd);\n    }",
  "    long count_even = 0, count_odd = 0;\n    while (num != 0) {\n        long rem\
    \ = num % 10;\n        num = num / 10;\n        if (rem % 2 == 0) count_even++;\n\
    \        if (rem % 2 != 0) count_odd++;\n    }\n    return std::make_tuple(count_even,\
    \ count_odd);", "    int evenCount = 0;\n    int oddCount = 0;\n\n    if (num\
    \ < 0) {\n        evenCount = oddCount = -num;\n    } else {\n        while (num\
    \ != 0) {\n            long remainder = num % 10;\n            num -= remainder;\n\
    \            if (remainder % 2 == 0) {\n                evenCount++;\n       \
    \     } else {\n                oddCount++;\n            }\n        }\n    }\n\
    \n    return std::make_tuple(evenCount, oddCount);", '  // Write your code here',
  "    long even, odd;\n    long temp = num;\n    while (temp != 0) {\n        if\
    \ (temp % 2 == 0)\n            even++;\n        else\n            odd++;\n   \
    \     temp = temp / 2;\n    }\n    return std::make_tuple(even, odd);", "    assert(num\
    \ > 0);\n    long even = 0, odd = 0;\n    while (num) {\n        long last_digit\
    \ = num % 10;\n        num /= 10;\n        if (last_digit % 2 == 0) {\n      \
    \      even += last_digit;\n        }\n        else {\n            odd += last_digit;\n\
    \        }\n    }\n    return std::make_tuple(even, odd);", "    // write your\
    \ code in C++14\n    auto odd = 1;\n    auto even = 0;\n    while (num > 0) {\n\
    \        long temp = num % 10;\n        even = even * 10 + temp;\n        num\
    \ /= 10;\n    }\n    long num_odd = num;\n    while (num_odd > 0) {\n        long\
    \ temp = num_odd % 10;\n        num_odd /= 10;\n        odd = odd + temp;\n  \
    \  }\n    return std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n\
    \    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n  \
    \      } else {\n            odd++;\n        }\n        num /= 10;\n    }\n  \
    \  return std::make_tuple(even, odd);", "    int count = 0;\n    int temp = num;\n\
    \    while (temp != 0) {\n        int temp = temp / 10;\n        count++;\n  \
    \  }\n    return std::make_tuple(count, count % 2);", "    long count = (num >=\
    \ 0) ? 0 : 1;\n    long even = num % 10;\n    long odd = num / 10;\n    while\
    \ (even % 2 == 0 && odd % 2 == 0) {\n        even++;\n        odd++;\n    }\n\
    \    return std::make_tuple(count, even);", "    // Your code here\n    long cnt\
    \ = 0;\n    long odd = 0, even = 0;\n    long remainder = num % 10;\n    if (remainder\
    \ < 10) {\n        odd = 1 + remainder;\n    } else {\n        even = 1 + remainder;\n\
    \    }\n    while (num > 0) {\n        remainder = num % 10;\n        if (remainder\
    \ < 10) {\n            odd = (even > odd) ? even : odd;\n            even = (even\
    \ > odd) ? even : odd;\n            odd = (even > odd) ? even : odd;\n       \
    \     even = (even > odd) ? even : odd;\n            odd = (even > odd) ? even\
    \ : odd;\n            even = (even > odd) ? even : odd;\n            odd = (even\
    \ > odd) ? even : odd;\n            even = (even > odd) ? even : odd;\n      \
    \      odd = (even > odd) ? even : odd;\n            even = (even > odd) ? even\
    \ : odd;\n            odd = (even > odd) ? even : odd;\n            even = (even\
    \ > odd) ? even : odd;\n            odd = (even > odd) ? even : odd;\n       \
    \     even = (even > odd) ? even : odd;\n            odd = (even > odd) ? even\
    \ : odd;\n            even = (even > odd) ? even : odd;\n            odd = (even\
    \ > odd) ? even : odd;\n            even = (even > odd) ? even : odd;\n      \
    \      odd = (even > odd) ? even : odd;\n            even = (even > odd) ? even\
    \ : odd;\n            odd = (even > odd) ? even : odd;\n            even = (even\
    \ > odd) ? even : odd;\n            odd = (even > odd) ? even : odd;\n       \
    \     even = (even > odd) ? even : odd;\n            odd = (even > odd) ? even\
    \ : odd;\n            even = (even > odd) ? even : odd;\n            odd = (even\
    \ > odd) ? even : odd;\n            even = (even > odd) ? even : odd;\n      \
    \      odd = (even > odd) ? even : odd;\n            even = (even > odd) ? even\
    \ : odd;\n            odd = (even > odd) ? even : odd;\n            even = (even\
    \ > odd) ? even : odd;\n            odd = (even > odd) ? even : odd;\n       \
    \     even = (even > odd) ? even : odd;\n            odd = (even > odd) ? even\
    \ : odd;\n            even", "    long even = 0, odd = 0;\n    long d = num;\n\
    \    int x = 0;\n    while (d != 0) {\n        x = x % 10;\n        even = even\
    \ + x;\n        d = d / 10;\n    }\n    d = num;\n    x = 0;\n    while (d !=\
    \ 0) {\n        x = x % 10;\n        odd = odd + x;\n        d = d / 10;\n   \
    \ }\n    // Now we have two variables in which we keep track of number of even\
    \ and odd digits.\n    return std::make_tuple(even, odd);", "  std::tuple<long,\
    \ long> even = std::make_tuple(0, 0);\n  std::tuple<long, long> odd = std::make_tuple(0,\
    \ 0);\n  while (num) {\n    int remainder = (num % 10);\n    even = std::tuple_cat(even,\
    \ std::make_tuple(remainder % 2, 0));\n    odd = std::tuple_cat(odd, std::make_tuple(remainder\
    \ % 2, 1));\n    num /= 10;\n  }\n  return even;", "    long even = 0, odd = 0;\n\
    \    while ((num *= 10) > 0) {\n        if ((num % 10) % 2 == 0) even++;\n   \
    \     else odd++;\n    }\n    return std::make_tuple(even, odd);", "    long sum\
    \ = 0, count = 0;\n    while (num) {\n        sum += num % 10;\n        num =\
    \ (num - sum) / 10;\n        count++;\n    }\n    return std::make_tuple(sum,\
    \ count);", "  long counter = 0;\n  long odd_digit = 0;\n  long even_digit = 0;\n\
    \  int ndigits = num < 0 ? -num : num;\n  if (ndigits < 0) {\n    ndigits = -ndigits;\n\
    \  }\n\n  for (int i = 0; i < ndigits; i += 2) {\n    even_digit = num / 10;\n\
    \    num = num - (even_digit * 10);\n    counter++;\n  }\n  while (num) {\n  \
    \  odd_digit = num / 10;\n    num = num - (odd_digit * 10);\n    counter++;\n\
    \  }\n\n  return std::make_tuple(counter, odd_digit);", "    long number_of_even\
    \ = 0;\n    long number_of_odd = 0;\n\n    // count the number of even and odd\
    \ digits\n    while (num) {\n        if (num % 2 == 0) {\n            number_of_even\
    \ += 1;\n        } else {\n            number_of_odd += 1;\n        }\n      \
    \  num/= 10;\n    }\n    return std::make_tuple(number_of_even, number_of_odd);",
  "    long odd_digits = 0;\n    long even_digits = 0;\n    long temp = num;\n   \
    \ while (temp != 0) {\n        long last_digit = temp % 10;\n        temp = temp\
    \ / 10;\n        even_digits++;\n        if (last_digit % 2 == 0) {\n        \
    \    even_digits++;\n        }\n    }\n    temp = num;\n    while (temp != 0)\
    \ {\n        long last_digit = temp % 10;\n        temp = temp / 10;\n       \
    \ odd_digits++;\n        if (last_digit % 2 != 0) {\n            odd_digits++;\n\
    \        }\n    }\n    return std::make_tuple(even_digits, odd_digits);", "  \
    \  long even = num/10;\n    long odd = num - (even*10);\n    return std::make_tuple(even,\
    \ odd);", "    long even, odd = 0, temp = 0;\n    temp = num;\n    while (temp)\
    \ {\n        temp = temp / 10;\n        if (temp % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long num_even = 0;\n    long num_odd = 0;\n    while ((num != 0)\
    \ && (num % 2 != 0)) {\n        num_even++;\n        num /= 2;\n    }\n    while\
    \ ((num != 0) && (num % 2 == 0)) {\n        num_odd++;\n        num /= 2;\n  \
    \  }\n    return std::make_tuple(num_even, num_odd);", "    long even = 0, odd\
    \ = 1;\n    while(num > 0) {\n        long last_digit = num % 10;\n        num\
    \ = num / 10;\n        long temp_even = last_digit % 2;\n        long temp_odd\
    \ = last_digit % 2 - 1;\n        even = even + temp_even;\n        odd = odd +\
    \ temp_odd;\n    }\n    return std::make_tuple(even, odd);", "  std::stack<int>\
    \ even;\n  std::stack<int> odd;\n  long count = 0;\n\n  while (num) {\n    int\
    \ digit = num % 10;\n    num /= 10;\n    if (digit % 2 == 0 && digit) {\n    \
    \  even.push(digit);\n    } else {\n      odd.push(digit);\n    }\n  }\n\n  while\
    \ (!even.empty()) {\n    count++;\n    even.pop();\n  }\n\n  while (!odd.empty())\
    \ {\n    count++;\n    odd.pop();\n  }\n\n  return std::make_tuple(count, count\
    \ % 2 == 0 ? 1 : 0);", "  long count1{0}, count2{0};\n  while ((num >= 0) && (num\
    \ != 0)) {\n    long curr = (num % 10);\n    if (curr % 2 == 0) {\n      count1++;\n\
    \    } else {\n      count2++;\n    }\n    num = num / 10;\n  }\n  return std::make_tuple(count1,\
    \ count2);", "    long even, odd, temp;\n    // if number is negative, make it\
    \ positive.\n    if(num < 0) {\n        temp = num + 4294967296;\n    } else {\n\
    \        temp = num;\n    }\n    \n    // store digits in temp array\n    long\
    \ digits[10] = { 0 };\n    \n    // Store the digits in digits array\n    while(temp\
    \ != 0) {\n        digits[temp % 10]++;\n        temp /= 10;\n    }\n    \n  \
    \  // find the even digit\n    for(long i = 0; i < 10; i++) {\n        if(digits[i]\
    \ != 0) {\n            even = i;\n            break;\n        }\n    }\n    \n\
    \    // find the odd digit\n    for(long i = 10; i < 20; i++) {\n        if(digits[i]\
    \ != 0) {\n            odd = i - 10;\n            break;\n        }\n    }\n \
    \   \n    return std::make_tuple(even, odd);", "    long even = 1;\n    long odd\
    \ = 1;\n    long div = 2;\n    while (div <= num / div) {\n        if (num % div\
    \ == 0) {\n            even++;\n        }\n        else {\n            odd++;\n\
    \        }\n        div *= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    int sum = 0, count = 0;\n    while (num > 0) {\n        int digit = num % 10;\n\
    \        if (digit % 2 == 0) {\n            sum += digit;\n            count++;\n\
    \        }\n        num = num / 10;\n    }\n    return std::make_tuple(count,\
    \ sum);", "    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n            num /= 2;\n        } else {\n\
    \            odd++;\n            num /= 2;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    assert(num > 0);\n    long digits[10];\n    long even = 0;\n  \
    \  long odd = 0;\n    long length = 0;\n    long digit = 0;\n    long count =\
    \ 0;\n    while (num > 0) {\n        digit = num % 10;\n        digits[length]\
    \ = digit;\n        num /= 10;\n        length++;\n    }\n    for(long i = length;\
    \ i > 0; i--) {\n        if(digits[i] != 0) {\n            if(digits[i] > digit)\
    \ {\n                even++;\n            } else {\n                odd++;\n \
    \           }\n        }\n    }\n    return std::make_tuple(even, odd);", "  \
    \  long evenDigit = 0, oddDigit = 0;\n\n    for (; num > 0; num -= 10) {\n   \
    \     if (num % 2 != 0) {\n            evenDigit += 1;\n        } else {\n   \
    \         oddDigit += 1;\n        }\n    }\n\n    return std::make_tuple(evenDigit,\
    \ oddDigit);", "    if(num == 0){\n        return std::make_tuple(1, 1);\n   \
    \ }\n    if(num < 0){\n        throw std::runtime_error(\"Input is negative number\"\
    );\n    }\n    long even = 0, odd = 0;\n    while(num){\n        int digit = num\
    \ % 10;\n        if(digit % 2 == 0){\n            even += 1;\n        } else {\n\
    \            odd += 1;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    long sum = 1;\n    while (num > 0)\
    \ {\n        long rem = num % 10;\n        num = (num - rem) / 10;\n        sum\
    \ += rem;\n        if (rem % 2 == 0) even++;\n        else odd++;\n    }\n   \
    \ return std::make_tuple(even, odd);", "    long even = 0;\n    long odd = 0;\n\
    \    while (num > 0) {\n        // find even digit.\n        if (num % 2 == 0)\
    \ {\n            even++;\n        }\n        // find odd digit.\n        if (num\
    \ % 2 != 0) {\n            odd++;\n        }\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    if (num == 0)\n        return std::tuple<long,\
    \ long>(0,0);\n    long n = num, sum = 0, max_even_count = 1;\n    while (n) {\n\
    \        sum += n % 10;\n        n /= 10;\n    }\n    max_even_count = (sum +\
    \ max_even_count) % 2;\n    sum = 0;\n    while (num) {\n        sum += num %\
    \ 10;\n        num /= 10;\n    }\n    return std::tuple<long, long>(max_even_count,\
    \ sum);", "    int count = 0;\n    long odd = 0;\n    long even = 0;\n    while\
    \ (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n           \
    \ count++;\n        }\n        else {\n            odd++;\n            count++;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even_count = 0;\n    long odd_count = 0;\n    \n    // Iterate through\
    \ the integer digits and add up the even and odd digits.\n    for(; num != 0;\
    \ num = num / 10) {\n        if(num % 2 == 0) {\n            even_count++;\n \
    \       } else {\n            odd_count++;\n        }\n    }\n    \n    // Return\
    \ a tuple that has the number of even and odd digits.\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long even = 0;\n    long odd = 0;\n\n    while (num > 0)\
    \ {\n        if (num % 2 == 0)\n            even++;\n        else\n          \
    \  odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    assert(num > 0);\n    long even = 0;\n    long odd = 0;\n    while (num) {\n\
    \        if (num % 2 == 0)\n            even += 2;\n        else\n           \
    \ odd += 2;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "  long num_arr[10] = {0};\n  long count = 0;\n  int i = 0;\n  while (num) {\n \
    \   num_arr[i++] = num % 10;\n    num /= 10;\n  }\n\n  for (int j = i - 1; j >=\
    \ 0; j--) {\n    count += (j % 2 == 0) ? 1 : 0;\n  }\n  return std::make_tuple(count,\
    \ num_arr[i - 1])", "    assert(num > 0);\n    auto ret1 = 0, ret2 = 0;\n    long\
    \ remain = num;\n    while (!(remain % 2))\n    {\n        ret1++;\n        remain\
    \ /= 2;\n    }\n    while (!(remain % 3))\n    {\n        ret2++;\n        remain\
    \ /= 3;\n    }\n    return std::make_tuple(ret1, ret2);", "  long even = 0, odd\
    \ = 0;\n  while (num) {\n    long tmp = num % 10;\n    if (tmp % 2 == 0) {\n \
    \     even++;\n    }\n    else {\n      odd++;\n    }\n    num /= 10;\n  }\n \
    \ return std::make_tuple(even, odd);", "    // code here\n    // auto [even, odd]\
    \ = even_odd_count(num);\n    // return std::make_tuple(even, odd);", "    assert(num\
    \ != 0);\n    long even = 0, odd = 0;\n    while (num > 0) {\n        long d =\
    \ num % 10;\n        num /= 10;\n        if (d % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    // Your code goes here\n    return std::make_tuple(0, 0);", " \
    \   long even = 0, odd = 1, digit = num;\n    long temp = num;\n    while (temp\
    \ > 0) {\n        if (temp % 2 == 0) {\n            even++;\n        }\n     \
    \   else {\n            odd++;\n        }\n        temp /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    auto l = num % 10;\n    num /= 10;\n    auto\
    \ n = num % 10;\n    num /= 10;\n    auto m = num % 10;\n    num /= 10;\n    auto\
    \ o = num % 10;\n    num /= 10;\n    return std::make_tuple(l, n, m, o);", " \
    \   long long count[11] = {0,0,0,0,0,0,0,0,0,0};\n    int i = 0;\n    while(num\
    \ != 0) {\n        count[num%10] +=1;\n        num /= 10;\n    }\n    long long\
    \ sum = 0;\n    for(i = 0; i < 11; ++i) {\n        if(count[i] % 2 == 1) sum +=\
    \ i;\n    }\n    return std::make_tuple(sum, sum - 11);", "  // write your code\
    \ here\n  long even = num / 100000000000LL;\n  long odd = (num - (even * 100000000000LL))\
    \ / 100000LL;\n  return std::make_tuple(even, odd);", "    int n = abs(num);\n\
    \    long even_count = 0;\n    long odd_count = 0;\n    if (n < 10) return std::make_tuple(1,\
    \ 1);\n    if (n < 100) {\n        long a = n;\n        while (a != 0) {\n   \
    \         if (a % 2 == 0) even_count++;\n            else odd_count++;\n     \
    \       a = a / 2;\n        }\n        return std::make_tuple(even_count, odd_count);\n\
    \    } else if (n < 1000) {\n        long a = n / 100;\n        long b = n / 10;\n\
    \        while (b != 0) {\n            even_count += (b % 2 == 0);\n         \
    \   odd_count += (b / 2 != 0);\n            b = b / 10;\n        }\n        return\
    \ std::make_tuple(even_count, odd_count);\n    }\n    long a = n / 1000;\n   \
    \ long b = n / 10000;\n    while (b != 0) {\n        even_count += (b % 2 == 0);\n\
    \        odd_count += (b / 2 != 0);\n        b = b / 10000;\n    }\n    return\
    \ std::make_tuple(even_count, odd_count);", "    int digit = num % 10;\n    //\
    \ even\n    int even = 0;\n    while (digit % 2 == 0 && digit != 0) {\n      \
    \  digit = num / 10;\n        even++;\n    }\n    // odd\n    int odd = 0;\n \
    \   while (digit % 2 != 0 && digit != 0) {\n        digit = num / 10;\n      \
    \  odd++;\n    }\n    // return tuple\n    return std::make_tuple(even, odd);",
  "    long even, odd;\n    long temp = 0;\n    long n = 1;\n    // If the number\
    \ is odd, then we add 1 to the even.\n    // If the number is even, then we add\
    \ 2 to the even.\n    // But we stop doing this when we are at 12.\n    while\
    \ (num > (12)) {\n        temp = num % 10;\n        even = even + temp * n;\n\
    \        temp = num / 10;\n        odd = odd + temp * n;\n        n = n + 1;\n\
    \        num = num / 10;\n    }\n    return std::make_tuple(even, odd);", "  \
    \  int even=0, odd=0;\n    long long ans=0;\n    while(num != 0) {\n        if\
    \ (num % 2 == 0)\n            even++;\n        else\n            odd++;\n    \
    \    num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    long count\
    \ = 0, even = 0, odd = 0;\n\n    while (num) {\n        if (num % 2 == 0) {\n\
    \            even++;\n        } else {\n            odd++;\n        }\n      \
    \  num = num / 2;\n    }\n\n    return std::make_tuple(even, odd);", "    long\
    \ even = 0;\n    long odd = 0;\n    while (num != 0) {\n        long digit = num\
    \ % 10;\n        num -= digit;\n        if (digit % 2 == 0) {\n            even++;\n\
    \        }\n        else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    int count = 0;\n    while (num !=\
    \ 0) {\n        long last_digit = num % 10;\n        num /= 10;\n        if (last_digit\
    \ % 2 == 0) {\n            even++;\n            count++;\n        } else {\n \
    \           odd++;\n            count++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    //count the even digits\n    std::unordered_map<char, long> digit_counts;\n\
    \    long n_even = 0;\n    long n_odd = 0;\n    char n_digit = 0;\n    for (int\
    \ i = 9; i >= 0; i--) {\n        digit_counts[num % 10] += 1;\n        num /=\
    \ 10;\n    }\n    for (auto it : digit_counts) {\n        if (it.second == 2)\
    \ {\n            n_even += it.second;\n        }\n        if (it.second == 1)\
    \ {\n            n_odd += it.second;\n        }\n    }\n    std::tuple<long, long>\
    \ n_even_odd = std::make_tuple(n_even, n_odd);\n    return n_even_odd;", "   \
    \ long count = 2;\n    long max_digit = 0;\n    long min_digit = 1;\n    long\
    \ odd = 0;\n    long even = 1;\n    while (num > 0) {\n        long digit = num\
    \ % 10;\n        max_digit = digit;\n        min_digit = min_digit * 10;\n   \
    \     if (digit % 2 == 0 && digit <= max_digit) {\n            even++;\n     \
    \   }\n        if (digit % 2 != 0 && digit >= max_digit) {\n            odd++;\n\
    \        }\n        num = num / 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0, odd = 1;\n    while (num) {\n        if (num % 2 == 0) {\n \
    \           even++;\n        } else {\n            odd++;\n        }\n       \
    \ num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    std::tuple<long,\
    \ long> ret;\n    if (num < 0) {\n        ret.second = std::make_tuple(std::numeric_limits<long>::min(),\
    \ std::numeric_limits<long>::min());\n        return ret;\n    }\n    if (num\
    \ % 2 == 0) {\n        ret.first++;\n    }\n    if (num % 2 != 0) {\n        ret.second++;\n\
    \    }\n    return ret;", "    long count = 0;\n    while (num) {\n        int\
    \ digit = num % 10;\n        if (digit % 2 == 0) {\n            count++;\n   \
    \     } else {\n            count--;\n        }\n        num /= 10;\n    }\n \
    \   return std::make_tuple(count, count + 1);", "    long even = 0;\n    long\
    \ odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    long num_str = to_string(num);\n\
    \    std::vector<char> even_digits(num_str.length(), 0);\n    std::vector<char>\
    \ odd_digits(num_str.length(), 0);\n    for (size_t i = 0; i < num_str.length();\
    \ i++) {\n        char c = num_str[i];\n        if (c == '-') {\n            even_digits[i]\
    \ = -1;\n            odd_digits[i] = -1;\n        } else {\n            if (c\
    \ % 2 == 0) {\n                even_digits[i] = c;\n            } else {\n   \
    \             odd_digits[i] = c;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(even_digits.size(), odd_digits.size());", "    // write your\
    \ code\n    long long count = 0;\n    while (num > 0) {\n        num = num / 10;\n\
    \        ++count;\n    }\n    return std::make_tuple(count, count % 2);", "  \
    \  // Write your code here.\n    long even=0, odd=0;\n    long long remainder=num;\n\
    \    while (remainder>0){\n        remainder=remainder%10;\n        if(remainder%2==0)\n\
    \            even++;\n        else\n            odd++;\n    }\n    return std::make_tuple(even,odd);",
  "    long odd_cnt = 0;\n    long even_cnt = 0;\n    long temp = num;\n    while\
    \ (temp != 0) {\n        odd_cnt += temp % 10 == 0 ? 1 : 0; //if the remainder\
    \ of temp / 10 is zero then it is a even digit\n        even_cnt += temp % 10\
    \ == 0 ? 0 : 1;\n        temp /= 10;\n    }\n    return std::make_tuple(even_cnt,\
    \ odd_cnt);", "    // code here\n    // std::tuple<long, long> t = even_odd_count(num);\n\
    \    return t;", "    long even = 0;\n    long odd = 0;\n    long limit = num;\n\
    \    while (limit) {\n        long current = limit % 10;\n        if (current\
    \ % 2 == 0) {\n            even += 1;\n            limit /= 10;\n        }\n \
    \       else {\n            odd += 1;\n            limit /= 10;\n        }\n \
    \   }\n    return std::make_tuple(even, odd);", "  long even = 0;\n  long odd\
    \ = 0;\n  while (num > 0) {\n    int digit = num % 10;\n    even += digit == 0\
    \ ? 1 : 0;\n    odd += digit != 0 ? 1 : 0;\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long odd = 0, even = 0;\n    while (num) {\n        long temp =\
    \ num % 10;\n        even = (even * 10) + temp;\n        num = (num / 10) - temp;\n\
    \    }\n    // If odd is greater than 0, then we have an odd digit.\n    if (odd\
    \ > 0) {\n        odd = 1;\n    }\n    return std::make_tuple(even, odd);", " \
    \   long even = 0, odd = 0, i;\n    for (i = 0; i < num; i++) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n    }\n    return std::make_tuple(even, odd);", "    // code here\n \
    \   int even_count = 0;\n    int odd_count = 0;\n    if (num <= 0) {\n       \
    \ std::tuple<long, long> ans = std::make_tuple(0, 0);\n        return ans;\n \
    \   }\n    while (num > 0) {\n        long temp = num % 10;\n        num = (num\
    \ - temp) / 10;\n        if (temp % 2 == 0) {\n            even_count++;\n   \
    \     }\n        else {\n            odd_count++;\n        }\n    }\n    std::tuple<long,\
    \ long> ans = std::make_tuple(even_count, odd_count);\n    return ans;", "   \
    \ int odd_count = 0;\n    int even_count = 0;\n    while (num > 0) {\n       \
    \ int remain = num % 10;\n        if (remain % 2 == 0) {\n            even_count++;\n\
    \        }\n        else {\n            odd_count++;\n        }\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(odd_count, even_count);", "    assert(num\
    \ > 0);\n    std::stack<long> digits;\n    long curr_digit;\n\n    digits.push(num);\n\
    \    while ( !digits.empty() ) {\n        curr_digit = digits.top();\n       \
    \ digits.pop();\n        long digit;\n        // If it is even digit.\n      \
    \  if ( curr_digit % 2 == 0 ) {\n            digit = curr_digit / 2;\n       \
    \ }\n        // If it is odd digit.\n        else {\n            digit = curr_digit\
    \ / 2 + 1;\n        }\n        // Push it to stack.\n        digits.push(digit);\n\
    \    }\n\n    // Return tuple of the form (even, odd).\n    return std::make_tuple(digits.size(),\
    \ digits.size() % 2);", "    int even = 0;\n    int odd = 0;\n    int i = 0;\n\
    \    while (num != 0) {\n        i += 1;\n        num = num / 10;\n    }\n\n \
    \   for (i;i <= i-1;i++) {\n        if (num % 2 == 0) {\n            even += 1;\n\
    \        } else {\n            odd += 1;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "  int countEven = 0, countOdd = 0;\n  long temp = num;\n  while (temp\
    \ != 0) {\n    temp = temp / 10;\n    countEven++;\n  }\n  while (temp != 0) {\n\
    \    temp = temp % 10;\n    countOdd++;\n  }\n  return std::make_tuple(countEven,\
    \ countOdd);", "    long odd_count = 0;\n    long even_count = 0;\n    long digits\
    \ = num % 10;\n    while (digits > 0) {\n        digits = digits % 10;\n     \
    \   if (digits % 2 == 0) {\n            even_count++;\n        } else {\n    \
    \        odd_count++;\n        }\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "  long even = 0;\n  long odd = 0;\n  while (num > 0) {\n    if\
    \ (num % 2 != 0) {\n      odd++;\n    } else {\n      even++;\n    }\n    num\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);", "    long even = 0, odd\
    \ = 0;\n    long next_odd = num;\n    while(next_odd > 0) {\n        odd += next_odd\
    \ % 10;\n        next_odd = next_odd / 10;\n    }\n    next_odd = num;\n    while(next_odd\
    \ > 0) {\n        even += next_odd % 10;\n        next_odd = next_odd / 10;\n\
    \    }\n    return (even, odd);", "    long even = 0, odd = 0;\n    while (num)\
    \ {\n        long temp = num % 10;\n        even += temp / 2;\n        odd +=\
    \ temp % 2;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    int n = 0, odd = 0, even = 0;\n    while (num > 0) {\n        n = num % 10;\n\
    \        num /= 10;\n        odd += n & 1;\n        even += n & 1;\n    }\n  \
    \  return std::make_tuple(odd, even);", "  long even = 0, odd = 0;\n  while (num\
    \ > 0) {\n    // Find the least significant digit\n    while (num % 10 == 0) {\n\
    \      even++;\n      num /= 10;\n    }\n    // Find the most significant digit\n\
    \    while (num % 10 != 0) {\n      odd++;\n      num /= 10;\n    }\n  }\n  return\
    \ std::make_tuple(even, odd);", "\tassert(num >= 0);\n\tlong even = 0;\n\tlong\
    \ odd = 0;\n\twhile (num > 0) {\n\t\tlong rem = num % 10;\n\t\teven = even + (rem\
    \ % 2 == 0 ? 1 : 0);\n\t\todd = odd + rem % 2;\n\t\tnum = num / 10;\n\t}\n\treturn\
    \ std::make_tuple(even, odd);", "    if (num < 0) {\n        throw std::runtime_error(\"\
    num can't be negative\");\n    }\n    long even = 0, odd = 0;\n    while (num\
    \ > 0) {\n        int digit = num % 10;\n        num = num / 10;\n        if (digit\
    \ % 2 == 0) {\n            even += digit;\n        } else {\n            odd +=\
    \ digit;\n        }\n    }\n    return std::make_tuple(even, odd);", "    // Complete\
    \ this function\n    return std::make_tuple(num, num);", "    int rem = num %\
    \ 10;\n    int odd = num / 10 % 10;\n    int even = num / 100;\n    return std::make_tuple(rem,\
    \ odd, even);", "    assert(num > 0);\n    long even = 0, odd = 1;\n    while\
    \ (num) {\n        long curr_odd = num % 10;\n        num /= 10;\n        long\
    \ curr_even = num % 10;\n        num /= 10;\n        even *= (curr_odd != 0);\n\
    \        odd *= (curr_even != 0);\n    }\n    return std::make_tuple(even, odd);",
  "    int n = num;\n    long count = 1;\n    while (n > 0){\n        n = n/10;\n\
    \        count++;\n    }\n    return (count, count+1);", "    long even = 0, odd\
    \ = 0;\n    while (num) {\n        long digit = num % 10;\n        num /= 10;\n\
    \        if (digit % 2 == 0) {\n            even++;\n        } else {\n      \
    \      odd++;\n        }\n    }\n    return std::make_tuple(even, odd);", "  std::bitset<sizeof(long)\
    \ * 8> bits(num);\n  long cnt = 0;\n  for (int i = 0; i < 64; i++) {\n    if (bits[i])\
    \ {\n      cnt += 1;\n    }\n  }\n  return std::make_tuple(cnt, cnt & 1);", " \
    \   if (num <= 0) return {0, 0};\n    long odd_count = 1;\n    long even_count\
    \ = 0;\n    while ((num % 10) % 2 == 0) {\n        even_count++;\n        num\
    \ /= 10;\n    }\n    while (num != 0) {\n        odd_count++;\n        num /=\
    \ 10;\n    }\n    return {even_count, odd_count};", "  std::tuple<long, long>\
    \ even = 0, odd = 0;\n  long digit = num;\n  while (digit) {\n    even += digit\
    \ % 2 == 0;\n    digit /= 2;\n  }\n  digit = num;\n  while (digit) {\n    odd\
    \ += digit % 2 == 1;\n    digit /= 2;\n  }\n  return std::make_tuple(even, odd);",
  "  long even = 0;\n  long odd = 0;\n  while (num != 0) {\n    int rem = num % 10;\n\
    \    even = (even * 10) + rem;\n    num/=10;\n  }\n  while ((num % 2) == 0) {\n\
    \    odd += 1;\n    num/=2;\n  }\n  std::tie(even, odd) = std::tuple<long, long>(even,\
    \ odd);\n  return std::make_tuple(even, odd);", "  long count = 1;\n  for (int\
    \ i = 0; i < num; i++) {\n    int d = num % 10;\n    if (d % 2 == 0) {\n     \
    \ count++;\n    } else {\n      count--;\n    }\n    num /= 10;\n  }\n  std::tuple<long,\
    \ long> ans = {count, count + 1};\n  return ans;", "    long even = 0, odd = 0;\n\
    \    while (num > 0) {\n        long last_digit = num % 10;\n        num /= 10;\n\
    \        if (last_digit % 2 == 0) {\n            even++;\n        }\n        if\
    \ (last_digit % 2 != 0) {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    std::tuple<long, long> even, odd;\n    while (num != 0) {\n   \
    \     if (num % 2 == 0) {\n            even = std::make_tuple(std::get<0>(even),\
    \ num / 2);\n        } else {\n            odd = std::make_tuple(std::get<0>(odd),\
    \ num / 2 + 1);\n        }\n        num /= 2;\n    }\n    return even;", "   \
    \ std::tuple<long, long> count_tuple;\n    long count = 1;\n    long odd_digits\
    \ = 0;\n    long even_digits = 0;\n    int abs_val = abs(num);\n    while (abs_val\
    \ != 0) {\n        if (abs_val & 1) {\n            odd_digits++;\n        }\n\
    \        abs_val /= 10;\n        even_digits++;\n    }\n    count_tuple = std::make_tuple(even_digits,\
    \ odd_digits);\n    return count_tuple;", "\tint rem = num % 10;\n\tint odd =\
    \ 0;\n\tint even = 0;\n\twhile (num != 0) {\n\t\tnum = num / 10;\n\t\teven++;\n\
    \t}\n\twhile (num != 0) {\n\t\tnum = num / 10;\n\t\todd++;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "    assert(num > 0);\n    long counts[2];\n    long i = 0;\n    long\
    \ n = num;\n    while (n > 0) {\n        counts[i++ % 2] = n % 2;\n        n /=\
    \ 2;\n    }\n    return std::make_tuple(counts[0], counts[1]);", "    long odd\
    \ = 0, even = 0;\n    while (num != 0) {\n        long last_digit = num % 10;\n\
    \        num /= 10;\n        odd += last_digit % 2 == 1;\n        even += last_digit\
    \ % 2 == 0;\n    }\n    return std::make_tuple(even, odd);"]
stop_tokens:
- "\n}"
