language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day = std::stoi(date.substr(0, 2));\n\
    \    int month = std::stoi(date.substr(2, 2));\n    int year = std::stoi(date.substr(4,\
    \ 4));\n    \n    if ((month == 2 && day > 29) || (month == 4 && day > 30) ||\
    \ (month == 6 && day > 30) || (month == 9 && day > 30) || (month == 11 && day\
    \ > 30) || (month == 1 && day > 31) || (month == 3 && day > 31) || (month == 5\
    \ && day > 31) || (month == 7 && day > 31) || (month == 8 && day > 31) || (month\
    \ == 10 && day > 31) || (month == 12 && day > 31)) {\n        return false;\n\
    \    }\n    \n    if (month == 2 && day > 29) {\n        return false;\n    }\n\
    \    \n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 31) {\n        return false;\n    }\n    \n    if (month == 2 && day > 29)\
    \ {\n        return false;\n    }\n    \n    if ((month == 1 || month == 3 ||\
    \ month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day\
    \ > 30) {\n        return false;\n    }\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6jaxsedo: /tmp/tmp6jaxsedo.cpp:46: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int month,\
    \ day;\n    std::string days[] = {\n        \"31\",\n        \"30\",\n       \
    \ \"29\",\n    };\n    int months[] = {\n        0,\n        1,\n        3,\n\
    \        5,\n        7,\n        8,\n        10,\n        12\n    };\n    int\
    \ year;\n    std::istringstream ss(date);\n    ss >> month >> day >> year;\n \
    \   if (month < 1 || month > 12 || day < 1 || day > days[month - 2] || year <\
    \ 2000 || year > 2020) {\n        return false;\n    }\n    return months[month\
    \ - 1] <= day && day <= days[month - 2]\n            && year == std::stoi(date.substr(3,\
    \ 4));\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphuebtht5.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphuebtht5.cpp:37:51: error: no match for \u2018operator>\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   37 |     if (month < 1 || month > 12 || day < 1 || day > days[month - 2]\
    \ || year < 2000 || year > 2020) {\n      |                                  \
    \             ~~~ ^ ~~~~~~~~~~~~~~~\n      |                                 \
    \              |                   |\n      |                                \
    \               int                 std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmphuebtht5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmphuebtht5.cpp:37:67:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   37 |     if (month < 1 || month > 12 || day < 1 || day\
    \ > days[month - 2] || year < 2000 || year > 2020) {\n      |                \
    \                                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmphuebtht5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include"
  stdout: ''
  timestamp: 1660133576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2d78wppe: /tmp/tmp2d78wppe.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here.\n    std::istringstream\
    \ ss(date);\n    int day, month, year;\n    char delimiter = '-';\n    ss >> month\
    \ >> delimiter >> day >> delimiter >> year;\n    \n    if ( month < 1 || month\
    \ > 12 ) return false;\n    if ( day < 1 || day > 31 ) return false;\n    if (\
    \ month == 2 && day > 29 ) return false;\n    if ( month == 4 && day > 30 ) return\
    \ false;\n    if ( month == 6 && day > 31 ) return false;\n    if ( month == 9\
    \ && day > 30 ) return false;\n    if ( month == 11 && day > 31 ) return false;\n\
    \    if ( month == 1 ) {\n        if ( day > 31 ) return false;\n    }\n    if\
    \ ( day > 30 ) return false;\n    if ( month == 12 ) {\n        if ( day > 31\
    \ ) return false;\n    }\n    \n    if ( month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (\
    \ day < 1 ) return false;\n    }\n    \n    if ( month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if ( day < 1 ) return false;\n    }\n    \n\
    \    if ( month == 2 && day > 29 ) {\n        return false;\n    }\n    \n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    struct tm t;\n    time_t current_time =\
    \ time(NULL);\n    memset(&t, 0, sizeof(t));\n    strptime(date.c_str(), \"%d-%m-%Y\"\
    , &t);\n    return !(t.tm_mon > 12 || t.tm_mon < 1 || t.tm_mday > 31);\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpggroilgq: /tmp/tmpggroilgq.cpp:29: int main(): Assertion `candidate(("01-01-2007"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::bitset<12> day(date[2], date[1], date[0]);\n\
    \    if (day.test(0) && (day & std::bitset<12>(1,3,5,7,8,10,12)))\n    {\n   \
    \     if (day.test((date[2] > 1 && date[2] < 31)) && (day & std::bitset<12>(4,6,9,11)))\n\
    \        {\n            if (day.test((date[1] > 1 && date[1] < 30)) == (date[1]\
    \ < 2))\n            {\n                if (day.test((date[0] > 1 && date[0] <\
    \ 29)))\n                {\n                    return true;\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp74p05rx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpp74p05rx.cpp:17:50: error: no matching function for call to \u2018\
    std::bitset<12>::bitset(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   17 |     std::bitset<12> day(date[2], date[1],\
    \ date[0]);\n      |                                                  ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n      \
    \           from /tmp/tmpp74p05rx.cpp:2:\n/usr/include/c++/9/bitset:946:9: note:\
    \ candidate: \u2018template<class _CharT> std::bitset<_Nb>::bitset(const _CharT*,\
    \ typename std::__cxx11::basic_string<_CharT>::size_type, _CharT, _CharT)\u2019\
    \n  946 |         bitset(const _CharT* __str,\n      |         ^~~~~~\n/usr/include/c++/9/bitset:946:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp74p05rx.cpp:17:50:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018char\u2019\n  \
    \ 17 |     std::bitset<12> day(date[2], date[1], date[0]);\n      |          \
    \                                        ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n\
    \                 from /tmp/tmpp74p05rx.cpp:2:\n/usr/include/c++/9/bitset:925:2:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::bitset<_Nb>::bitset(const\
    \ std::__cxx11::basic_string<_CharT2, _Traits2, _Alloc>&, std::size_t, std::size_t,\
    \ _CharT, _CharT)\u2019\n  925 |  bitset(const std::basic_string<_CharT, _Traits,\
    \ _Alloc>& __s,\n      |  ^~~~~~\n/usr/include/c++/9/bitset:925:2: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpp74p05rx.cpp:17:50: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   17 |     std::bitset<12> day(date[2], date[1], date[0]);\n\
    \      |                                                  ^\nIn file inc"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    return date\
    \ != \"\";\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2tb3yd4y: /tmp/tmp2tb3yd4y.cpp:23: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string month,day,year;\n    int num_days,year_index,month_index;\n\
    \    std::istringstream iss(date);\n    iss >> month >> day >> year;\n    if(!iss.fail())\
    \ {\n        year_index=month_index= day_index= 0;\n        for(int i=0;i<month.size();i++){\n\
    \            month_index=i;\n            if(month[i]=='/')\n                month_index=i+1;\n\
    \            year_index=month_index;\n            if(year[year_index+1]=='-' &&\
    \ month[month_index+1]=='-' && day[day_index+1]==',') {\n                num_days=(year_index-year_index-4)*12+month_index-(12*(month_index-1));\n\
    \                if(num_days>=1 && num_days<=31) {\n                    day_index=day_index+1;\n\
    \                } else if(num_days>=30 && num_days<=59) {\n                 \
    \   day_index=day_index+2;\n                } else if(num_days>=29 && num_days<=60)\
    \ {\n                    day_index=day_index+3;\n                } else {\n  \
    \                  year_index=year_index+1;\n                    month_index=month_index+1;\n\
    \                    day_index=day_index+1;\n                }\n            }\n\
    \        }\n    }\n    if((day_index<1 || day_index>31) && (month_index<1 || month_index>12)\
    \ && (year_index<1 || year_index>4)) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbsmcdd_k.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpbsmcdd_k.cpp:22:33: error: \u2018day_index\u2019 was not declared in\
    \ this scope; did you mean \u2018year_index\u2019?\n   22 |         year_index=month_index=\
    \ day_index= 0;\n      |                                 ^~~~~~~~~\n      |  \
    \                               year_index\n/tmp/tmpbsmcdd_k.cpp:44:9: error:\
    \ \u2018day_index\u2019 was not declared in this scope; did you mean \u2018year_index\u2019\
    ?\n   44 |     if((day_index<1 || day_index>31) && (month_index<1 || month_index>12)\
    \ && (year_index<1 || year_index>4)) {\n      |         ^~~~~~~~~\n      |   \
    \      year_index\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // code here\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8jw3l3eu: /tmp/tmp8jw3l3eu.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Your implementation\
    \ goes here.\n    // You need to use isdigit() from <cctype> and atoi() from <cstdlib>\
    \ to implement this function.\n    valid &= !date.empty();\n    int days[12] =\
    \ {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if (date.size() == 10)\
    \ {\n        valid = false;\n    }\n    if (!(date.at(0) == '0' || date.at(0)\
    \ == '1')) {\n        valid = false;\n    }\n    for (int i = 0; i < date.size();\
    \ i++) {\n        int j = atoi(date.c_str());\n        valid = false;\n      \
    \  if (i > 2 && i <= 2) {\n            valid &= (days[j] == 1);\n        }\n \
    \       if (i > 5 && i <= 5) {\n            valid &= (days[j] == 2);\n       \
    \ }\n        if (i > 9 && i <= 9) {\n            valid &= (days[j] == 3);\n  \
    \      }\n        if (i > 11 && i <= 11) {\n            valid &= (days[j] == 4);\n\
    \        }\n        if (i > 13 && i <= 13) {\n            valid &= (days[j] ==\
    \ 5);\n        }\n        if (i > 15 && i <= 15) {\n            valid &= (days[j]\
    \ == 6);\n        }\n        if (i > 16 && i <= 16) {\n            valid &= (days[j]\
    \ == 7);\n        }\n        if (i > 18 && i <= 18) {\n            valid &= (days[j]\
    \ == 8);\n        }\n        if (i > 20 && i <= 20) {\n            valid &= (days[j]\
    \ == 9);\n        }\n        if (i > 21 && i <= 21) {\n            valid &= (days[j]\
    \ == 10);\n        }\n        if (i > 22 && i <= 22) {\n            valid &= (days[j]\
    \ == 11);\n        }\n        if (i > 23 && i <= 23) {\n            valid &= (days[j]\
    \ == 12);\n        }\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpo7mtl2x_: /tmp/tmpo7mtl2x_.cpp:72: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Write your code here\n  bool flag = true;\n\
    \  if(date.empty() == false && date.size() > 0){\n    std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    int\
    \ days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int month1\
    \ = stoi(date.substr(0, 2));\n    int day1 = stoi(date.substr(3, 2));\n    int\
    \ year = stoi(date.substr(6, 4));\n    int month2 = stoi(date.substr(10, 2));\n\
    \    int day2 = stoi(date.substr(12, 2));\n    for(int i = 0; i < 12; i++) {\n\
    \      if(month1 > 0 && month1 <= 12 && day1 > 1 && day1 <= 31 && (month1 == month2\
    \ && day1 == day2) || month2 > 0 && month2 <= 12 && day2 > 1 && day2 <= 30 &&\
    \ (month2 == month1 && day2 == day1)) {\n        flag = true;\n      } else {\n\
    \        flag = false;\n      }\n    }\n  }\n  return flag;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Check whether the string is not empty\n\
    \  if (date.empty())\n    return false;\n  // Check the number of days\n  std::stringstream\
    \ ss;\n  int days = 0;\n  int month = -1;\n  int year = -1;\n  ss.str(date);\n\
    \  ss >> month;\n  ss >> days;\n  if (month < 1 || month > 12)\n    return false;\n\
    \  if (days > 31 || days < 1)\n    return false;\n  if (month == 2 && days > 29)\n\
    \    return false;\n  \n  // Check the year\n  if (year < 1950 || year > 2020)\n\
    \    return false;\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp15rtu38j: /tmp/tmp15rtu38j.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your code here\n    // use\
    \ strtol or stoi functions to convert the date string into integer variables\n\
    \    // use if, else if, else if, else if to check if all 3 criteria are satisfied\n\
    \    // return true if the date satisfies the criteria\n    std::istringstream\
    \ iss(date);\n    long date1 = std::stoi(strtok(date, \" \"));\n    long date2\
    \ = std::stoi(strtok(NULL, \" \"));\n    long date3 = std::stoi(strtok(NULL, \"\
    \ \"));\n    \n    if(date1<1 || date1<31 || (date1==31 && date2<1) || (date2==31\
    \ && date3<1) || (date3==31 && (date1==1 || date2==1 || date3==1))){\n       \
    \ return false;\n    }\n    \n    else if(date1<4 || date1<6 || (date1==4 && date2<1)\
    \ || (date2==4 && date3<1) || (date3==4 && (date1==1 || date2==1 || date3==1))){\n\
    \        return false;\n    }\n    else if(date1<2 || date1<9 || (date1==2 &&\
    \ date2<1) || (date2==2 && date3<1) || (date3==2 && (date1==1 || date2==1 || date3==1))){\n\
    \        return false;\n    }\n    \n    else if(date2<1 || date2<11 || (date2==1\
    \ && date3<1) || (date3==1 && (date1==4 || date2==4 || date3==4))){\n        return\
    \ false;\n    }\n    \n    else if(date3<1 || date3<2 || (date3==2 && date1<1)\
    \ || (date1==2 && date2<1)){\n        return false;\n    }\n    \n    else{\n\
    \        return true;\n    }\n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtdfh632.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgtdfh632.cpp:23:35: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char*\u2019\n   23 |\
    \     long date1 = std::stoi(strtok(date, \" \"));\n      |                  \
    \                 ^~~~\n      |                                   |\n      | \
    \                                  std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpgtdfh632.cpp:2:\n/usr/include/string.h:336:39:\
    \ note:   initializing argument 1 of \u2018char* strtok(char*, const char*)\u2019\
    \n  336 | extern char *strtok (char *__restrict __s, const char *__restrict __delim)\n\
    \      |                      ~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Complete this function\n    \n    bool\
    \ flag=false;\n    int day1, day2, month1, month2;\n    std::stringstream ss1(date);\n\
    \    \n    ss1 >> month1 >> day1 >> year1;\n    \n    if (month1==12&&year1%400==0)\n\
    \    {\n        month1=1;\n        year1=year1%400;\n    }\n    if (month1==12&&year1%100==0)\n\
    \    {\n        month1=1;\n        year1=year1%100;\n    }\n    if (month1==12&&year1%4==0)\n\
    \    {\n        month1=1;\n        year1=year1%4;\n    }\n    \n    ss1 >> month2\
    \ >> day2 >> year2;\n    if (month2==12&&year2%400==0)\n    {\n        month2=1;\n\
    \        year2=year2%400;\n    }\n    if (month2==12&&year2%100==0)\n    {\n \
    \       month2=1;\n        year2=year2%100;\n    }\n    if (month2==12&&year2%4==0)\n\
    \    {\n        month2=1;\n        year2=year2%4;\n    }\n    \n    \n    \n \
    \   if (month1<1 || month1>12||month2<1||month2>12||day1<1||day1>31||day2<1||day2>30)\n\
    \    {\n        flag=false;\n    }\n    else if (month1==month2&&day1==day2)\n\
    \    {\n        flag=true;\n    }\n    else if (month1==month2&&day2==day1)\n\
    \    {\n        flag=true;\n    }\n    else if((month1==month2)&&(day1==day2)&&(year1==year2))\n\
    \    {\n        flag=true;\n    }\n    else\n    {\n        flag=false;\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5lsxhkmy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5lsxhkmy.cpp:23:30: error: \u2018year1\u2019 was not declared in this\
    \ scope\n   23 |     ss1 >> month1 >> day1 >> year1;\n      |                \
    \              ^~~~~\n/tmp/tmp5lsxhkmy.cpp:41:30: error: \u2018year2\u2019 was\
    \ not declared in this scope\n   41 |     ss1 >> month2 >> day2 >> year2;\n  \
    \    |                              ^~~~~\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    size_t datelength = date.length();\n   \
    \ bool isValidDate = true;\n    if (datelength == 0 || datelength != 13) {\n \
    \       isValidDate = false;\n    }\n\n    int month = 1;\n    int day = 1;\n\
    \    int year = 2000;\n    int i = 0;\n    int j = 0;\n    while (i < datelength)\
    \ {\n        if (date[i] >= '0' && date[i] <= '9') {\n            day = day *\
    \ 10 + (date[i] - '0');\n            i++;\n        } else if (date[i] >= '0' &&\
    \ date[i] <= '9') {\n            month = month * 10 + (date[i] - '0');\n     \
    \       i++;\n        } else if (date[i] == '-') {\n            i++;\n       \
    \ } else if (date[i] == '/') {\n            i++;\n            month = 1;\n   \
    \         day = 1;\n            year = 2000;\n            j = 0;\n        } else\
    \ if (date[i] == '/') {\n            i++;\n            month = 1;\n          \
    \  day = 1;\n            year = 2000;\n            j = 0;\n        } else {\n\
    \            isValidDate = false;\n        }\n\n        if (j == 2) {\n      \
    \      if (month > 12) {\n                isValidDate = false;\n            }\n\
    \        }\n        j++;\n    }\n\n    if (isValidDate) {\n        if (day > 31\
    \ && month > 12) {\n            isValidDate = false;\n        } else if (day >\
    \ 30 && month > 2) {\n            isValidDate = false;\n        }\n    }\n\n \
    \   return isValidDate;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpau3fksbi: /tmp/tmpau3fksbi.cpp:73: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ // Convert the date string to an unsigned integer for the day\n    int day_number\
    \ = std::stoi(date);\n    \n    // Check that date is not empty\n    if (day_number\
    \ <= 0){\n        return false;\n    }\n    \n    // Make sure that the day is\
    \ not less than or equal to 31\n    if (day_number > 31){\n        return false;\n\
    \    }\n    \n    // Make sure that the day is not less than or equal to 30\n\
    \    if (day_number > 30){\n        return false;\n    }\n    \n    // Make sure\
    \ that the day is not less than or equal to 29\n    if (day_number > 29){\n  \
    \      return false;\n    }\n    \n    // Get the month as a string and convert\
    \ to an unsigned int\n    std::string month = date.substr(0,2);\n    unsigned\
    \ month_number = std::stoi(month);\n    \n    // Check that month is not less\
    \ than or equal to 12\n    if (month_number > 12){\n        return false;\n  \
    \  }\n    \n    // Convert the month to an unsigned int\n    unsigned year = date.substr(2,4);\n\
    \    \n    // Check that the year is in the range of 1900 to 2000\n    if (year\
    \ > 1900 && year < 2000){\n        return true;\n    }\n    \n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytd9zu_l.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpytd9zu_l.cpp:53:32: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019 in initialization\n   53 |     unsigned year = date.substr(2,4);\n\
    \      |                     ~~~~~~~~~~~^~~~~\n      |                       \
    \         |\n      |                                std::__cxx11::basic_string<char>\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write your code here\n    std::istringstream\
    \ date_stream(date);\n    int day;\n    int month;\n    int year;\n    date_stream\
    \ >> day >> month >> year;\n    \n    char months[12] = {'01','03','05','07','08','10','12'};\n\
    \    char days[31] = {'01','03','05','07','08','10','12','13','14','16','18','20','22','24','26','28','30','31'};\n\
    \    char years[5] = {'2000','2004','2008','2012','2016','2020'};\n    \n    bool\
    \ valid = true;\n    if(date_stream.peek() == EOF)\n        valid = false;\n \
    \   else {\n        if(day < 1 || day > 31) valid = false;\n        if(month <\
    \ 1 || month > 12) valid = false;\n        if(year < '0' || year > '9') valid\
    \ = false;\n    }\n    if(month == 0 && day == 0 && year == '0') valid = false;\n\
    \    \n    for(int i = 0; i <= 12; i++) {\n        if((months[i] == month) &&\
    \ (days[i] == day) && (years[i] == year)) valid = false;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmub5qpp.cpp:24:24: warning: multi-character character constant\
    \ [-Wmultichar]\n   24 |     char months[12] = {'01','03','05','07','08','10','12'};\n\
    \      |                        ^~~~\n/tmp/tmpvmub5qpp.cpp:24:29: warning: multi-character\
    \ character constant [-Wmultichar]\n   24 |     char months[12] = {'01','03','05','07','08','10','12'};\n\
    \      |                             ^~~~\n/tmp/tmpvmub5qpp.cpp:24:34: warning:\
    \ multi-character character constant [-Wmultichar]\n   24 |     char months[12]\
    \ = {'01','03','05','07','08','10','12'};\n      |                           \
    \       ^~~~\n/tmp/tmpvmub5qpp.cpp:24:39: warning: multi-character character constant\
    \ [-Wmultichar]\n   24 |     char months[12] = {'01','03','05','07','08','10','12'};\n\
    \      |                                       ^~~~\n/tmp/tmpvmub5qpp.cpp:24:44:\
    \ warning: multi-character character constant [-Wmultichar]\n   24 |     char\
    \ months[12] = {'01','03','05','07','08','10','12'};\n      |                \
    \                            ^~~~\n/tmp/tmpvmub5qpp.cpp:24:49: warning: multi-character\
    \ character constant [-Wmultichar]\n   24 |     char months[12] = {'01','03','05','07','08','10','12'};\n\
    \      |                                                 ^~~~\n/tmp/tmpvmub5qpp.cpp:24:54:\
    \ warning: multi-character character constant [-Wmultichar]\n   24 |     char\
    \ months[12] = {'01','03','05','07','08','10','12'};\n      |                \
    \                                      ^~~~\n/tmp/tmpvmub5qpp.cpp:25:22: warning:\
    \ multi-character character constant [-Wmultichar]\n   25 |     char days[31]\
    \ = {'01','03','05','07','08','10','12','13','14','16','18','20','22','24','26','28','30','31'};\n\
    \      |                      ^~~~\n/tmp/tmpvmub5qpp.cpp:25:27: warning: multi-character\
    \ character constant [-Wmultichar]\n   25 |     char days[31] = {'01','03','05','07','08','10','12','13','14','16','18','20','22','24','26','28','30','31'};\n\
    \      |                           ^~~~\n/tmp/tmpvmub5qpp.cpp:25:32: warning:\
    \ multi-character character constant [-Wmultichar]\n   25 |     char days[31]\
    \ = {'01','03','"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    auto s = date;\n    auto pos = s.find(std::to_string(1));\n\
    \    if (pos == std::string::npos) {\n        return false;\n    }\n    auto d\
    \ = std::stoi(s.substr(0, pos));\n    pos = s.find(std::to_string(4));\n    if\
    \ (pos == std::string::npos) {\n        return false;\n    }\n    s = s.substr(pos\
    \ + 1);\n    pos = s.find(std::to_string(5));\n    if (pos == std::string::npos)\
    \ {\n        return false;\n    }\n    s = s.substr(pos + 1);\n    pos = s.find(std::to_string(6));\n\
    \    if (pos == std::string::npos) {\n        return false;\n    }\n    s = s.substr(pos\
    \ + 1);\n    pos = s.find(std::to_string(9));\n    if (pos == std::string::npos)\
    \ {\n        return false;\n    }\n    s = s.substr(pos + 1);\n    pos = s.find(std::to_string(10));\n\
    \    if (pos == std::string::npos) {\n        return false;\n    }\n    s = s.substr(pos\
    \ + 1);\n    pos = s.find(std::to_string(12));\n    if (pos == std::string::npos)\
    \ {\n        return false;\n    }\n    s = s.substr(pos + 1);\n    return std::stoi(s)\
    \  > 0 && std::stoi(s)  < 31;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp2kazr8di: /tmp/tmp2kazr8di.cpp:57: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool check\
    \ = false;\n    \n    int d, m, y;\n    std::cin >> d >> m >> y;\n    \n    //\
    \ check whether user input is empty or not in correct format\n    if (date ==\
    \ \"\") {\n        std::cout << \"Invalid Input\" << std::endl;\n        return\
    \ false;\n    }\n    \n    // check whether the entered date is in correct format\n\
    \    if (date.size() != 10) {\n        std::cout << \"Invalid Input\" << std::endl;\n\
    \        return false;\n    }\n    \n    // Check whether month should be in correct\
    \ range 1-12\n    if (m > 12) {\n        std::cout << \"Invalid Input\" << std::endl;\n\
    \        return false;\n    }\n    \n    // Check whether day should be in correct\
    \ range 1-31\n    if (d > 31) {\n        std::cout << \"Invalid Input\" << std::endl;\n\
    \        return false;\n    }\n    \n    // Check whether month should be in correct\
    \ range 1-12\n    if (m > 12) {\n        std::cout << \"Invalid Input\" << std::endl;\n\
    \        return false;\n    }\n    \n    // Check whether day should be in correct\
    \ range 1-31\n    if (d > 31) {\n        std::cout << \"Invalid Input\" << std::endl;\n\
    \        return false;\n    }\n    \n    check = m == 2 && d == 29 && y % 400\
    \ == 0 && (y % 4 == 0 || (y % 100 > 0 && y % 400 == 0));\n    \n    return check;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day1, day2, month1, month2, year1, year2;\n\
    \    month1 = get_month_day(date, &day1, &month1, &year1);\n    if(month1 < 1\
    \ || month1 > 12) return false;\n    month2 = get_month_day(date, &day2, &month2,\
    \ &year2);\n    if(month2 < 1 || month2 > 12) return false;\n    if (day1 < 1\
    \ || day1 > 31) return false;\n    if (day2 < 1 || day2 > 30) return false;\n\
    \    if (month1 == month2) { //if two dates have same month, they must be same\
    \ year\n        if (day1 < day2) return false;\n        if (year1 == year2) {\n\
    \            if (day1 > day2) return false;\n        }\n    }\n    else {\n  \
    \      if (year1 != year2) return false;\n        if (month1 < month2) return\
    \ false;\n        if (day1 > day2) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdaccdi1.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqdaccdi1.cpp:18:14: error: \u2018get_month_day\u2019 was not declared\
    \ in this scope\n   18 |     month1 = get_month_day(date, &day1, &month1, &year1);\n\
    \      |              ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid_date = true;\n    std::size_t\
    \ n = date.length();\n    std::string day = date.substr(0, 2);\n    std::string\
    \ month = date.substr(2, 2);\n    std::string year = date.substr(4, 4);\n    int\
    \ d = stoi(day);\n    int m = stoi(month);\n    int y = stoi(year);\n    if(n\
    \ == 0){\n        valid_date = false;\n    }\n    if((d < 1 || d > 31) || (m <\
    \ 1 || m > 12) || (m == 2 && (d > 29 || d < 1))) {\n        valid_date = false;\n\
    \    }\n    if((m != 2 && m < 1) || (m == 2 && (d > 29 || d < 1))) {\n       \
    \ valid_date = false;\n    }\n    if((m == 2 && m > 12) || (m == 2 && m > 11)\
    \ || (m == 2 && m > 10)) {\n        valid_date = false;\n    }\n    if((d < 1\
    \ || d > 30) && (m == 2 && m > 12)) {\n        valid_date = false;\n    }\n  \
    \  if((d < 1 || d > 30) && (m == 1 && m > 11)) {\n        valid_date = false;\n\
    \    }\n    if((m == 1 && m > 10) || (m == 1 && m > 9)) {\n        valid_date\
    \ = false;\n    }\n    if((y != 4 && y != 6 && y != 9 && y != 11 && y != 0)) {\n\
    \        valid_date = false;\n    }\n    return valid_date;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp66ch433n: /tmp/tmp66ch433n.cpp:53: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int month[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    int day[31] = {0,31,30,31};\n    int year[100] = {2000,1,2000};\n    for(int\
    \ i=0;i<date.length();i++) {\n        if(date[i]>='0' && date[i]<='9')\n     \
    \       year[date[i]-'0']++;\n        else if(date[i]>='a' && date[i]<='z')\n\
    \            month[date[i]-'a']++;\n        else if(date[i]>='A' && date[i]<='Z')\n\
    \            month[date[i]-'A']++;\n        else if(date[i]=='.')\n          \
    \  continue;\n        else\n            return false;\n    }\n\n    for(int i=1;i<=12;i++)\n\
    \        if(month[i]<1) return false;\n\n    for(int i=1;i<=31;i++)\n        if(day[i]<1\
    \ || day[i]>31) return false;\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxuiq3p9w.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpxuiq3p9w.cpp:17:59: error: too many initializers for \u2018int [12]\u2019\
    \n   17 |     int month[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n     \
    \ |                                                           ^\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp235y8qci: /tmp/tmp235y8qci.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your code here\n    int days[12]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12] = {12,\
    \ 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n    int day, month, year;\n\
    \    std::stringstream ss(date);\n    ss >> month >> day >> year;\n\n    if (month\
    \ < 1 || month > 12 || day < 1 || day > days[month - 1] || year < 1900 || year\
    \ > 2100) {\n        return false;\n    }\n\n    if (month == 2 && day > 29) {\n\
    \        return false;\n    }\n\n    if (month == 2 && day == 29) {\n        if\
    \ (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n            return\
    \ true;\n        }\n    }\n\n    if (month == 2 && day > 28) {\n        return\
    \ false;\n    }\n\n    if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphf_7f86i: /tmp/tmphf_7f86i.cpp:59: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    if (date.empty())\n\
    \        return false;\n    if (date.length() < 3 || date.length() > 10)\n   \
    \     return false;\n    if (date.length() == 3 && date[2] != '-' || date.length()\
    \ == 6 && date[2] != '-' && date[3] != '-' || date.length() == 10 && date[2] !=\
    \ '-' && date[3] != '-' && date[4] != '-' && date[5] != '-' && date[6] != '-'\
    \ && date[7] != '-' && date[8] != '-' && date[9] != '-' && date[10] != '-' &&\
    \ date[11] != '-' && date[12] != '-' && date[13] != '-' && date[14] != '-' &&\
    \ date[15] != '-' && date[16] != '-' && date[17] != '-' && date[18] != '-' &&\
    \ date[19] != '-' && date[20] != '-' && date[21] != '-' && date[22] != '-' &&\
    \ date[23] != '-' && date[24] != '-' && date[25] != '-' && date[26] != '-' &&\
    \ date[27] != '-' && date[28] != '-' && date[29] != '-' && date[30] != '-' &&\
    \ date[31] != '-')\n        return false;\n    if (date.length() == 3 && date[2]\
    \ != '-') {\n        std::string month = date.substr(0, 2);\n        if (month\
    \ == \"01\")\n            return true;\n        else if (month == \"02\")\n  \
    \          return true;\n        else if (month == \"03\")\n            return\
    \ true;\n        else if (month == \"04\")\n            return true;\n       \
    \ else if (month == \"05\")\n            return true;\n        else if (month\
    \ == \"06\")\n            return true;\n        else if (month == \"07\")\n  \
    \          return true;\n        else if (month == \"08\")\n            return\
    \ true;\n        else if (month == \"09\")\n            return true;\n       \
    \ else if (month == \"10\")\n            return true;\n        else if (month\
    \ == \"11\")\n            return true;\n        else if (month == \"12\")\n  \
    \          return true;\n    }\n    if (date.length() == 6 && date[2] != '-' &&\
    \ date[3] != '-') {\n        std::string month = date.substr(0, 2);\n        if\
    \ (month == \"04\")\n            return true;\n        else if (month == \"06\"\
    )\n            return true;\n        else if (month == \"09\")\n            return\
    \ true;\n        else if (month == \"11\")\n            return true;\n    }\n\
    \    if (date.length() == 10 && date[2] != '-' && date[3] != '-' && date[4] !=\
    \ '-' && date[5] != '-') {\n        std::string month = date.substr(0, 2);\n \
    \       if (month == \"04\")\n            return true;\n        else if (month\
    \ == \"06\")\n            return true;\n        else if (month == \"09\")\n  \
    \          return true;\n        else if (month\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpohw9819y.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpohw9819y.cpp:70:23: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   70 |         else if (month\n      |                 ~     ^\n   \
    \   |                       )\n   71 | }\n      | ~                      \n/tmp/tmpohw9819y.cpp:70:18:\
    \ error: could not convert \u2018month\u2019 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n   70 | \
    \        else if (month\n      |                  ^~~~~\n      |             \
    \     |\n      |                  std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpohw9819y.cpp:71:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   71 | }\n      | ^\n/tmp/tmpohw9819y.cpp:72:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   72 | int main() {\n     \
    \ |            ^\n/tmp/tmpohw9819y.cpp:90:1: error: expected \u2018}\u2019 at\
    \ end of input\n   90 | }\n      | ^\n/tmp/tmpohw9819y.cpp:16:35: note: to match\
    \ this \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmpohw9819y.cpp:90:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   90 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.empty())\n        return false;\n\
    \    int day;\n    std::string month;\n    std::string year;\n    std::istringstream\
    \ ss(date);\n    if (!(ss >> month)) {\n        return false;\n    }\n    if (!(ss\
    \ >> day)) {\n        return false;\n    }\n    if (!(ss >> year)) {\n       \
    \ return false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n\
    \    }\n    if (month.size() < 1 || month.size() > 12) {\n        return false;\n\
    \    }\n    if (month != \"01\" && month != \"03\" && month != \"05\" && month\
    \ != \"07\"\n        && month != \"08\" && month != \"10\" && month != \"12\"\
    ) {\n        return false;\n    }\n    if (year != \"2000\" && year != \"2012\"\
    \ && year != \"2040\" && year != \"2020\") {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptd7n20ak: /tmp/tmptd7n20ak.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  if(date.empty()) {\n    return false;\n  }\n\
    \  \n  int days[12];\n  \n  std::istringstream iss(date);\n  char month[12];\n\
    \  char day[3];\n  \n  if(!(iss >> month >> day >> days[0])) {\n    return false;\n\
    \  }\n  \n  if(days[0] > 31 || days[0] < 1) {\n    return false;\n  }\n  \n  if(days[1]\
    \ > 30 || days[1] < 1) {\n    return false;\n  }\n  \n  if(days[2] > 29 || days[2]\
    \ < 1) {\n    return false;\n  }\n  \n  if(month[0] > 12 || month[0] < 1) {\n\
    \    return false;\n  }\n  \n  int month1 = month[0] - 1;\n  \n  for(int i = 1;\
    \ i < 12; i++) {\n    if(days[i] > 31 && days[i] < 30) {\n      days[i] = 0;\n\
    \    }\n    if(days[i] > 30 && days[i] < 31) {\n      days[i] = 0;\n    }\n  \
    \  if(days[i] > 29 && days[i] < 31) {\n      days[i] = 0;\n    }\n    if(month1\
    \ > 11 && month1 > month[i]) {\n      days[i] = 0;\n      month1 = month1 - 1;\n\
    \    }\n  }\n  \n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcozbi90j: /tmp/tmpcozbi90j.cpp:69: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write your code here\n    int y\
    \ = 0;\n    int m = 0;\n    int d = 0;\n    std::string dateStr(date);\n    std::istringstream\
    \ stream(dateStr);\n    std::string s;\n    int days_diff = 0;\n    while (std::getline(stream,\
    \ s, '-')) {\n        if (s.length() == 1) continue;\n        y = stoi(s);\n \
    \       if (m > 12) {\n            return false;\n        }\n        if (s.length()\
    \ >= 2) {\n            m = stoi(s.substr(0, 2));\n            if (m < 1 || m >\
    \ 12) {\n                return false;\n            }\n        } else {\n    \
    \        m = stoi(s);\n        }\n        std::getline(stream, s);\n        std::getline(stream,\
    \ s);\n        d = stoi(s);\n        days_diff = std::abs((days_diff + d - 1)\
    \ % 7) - 1;\n    }\n    if (m > 12) {\n        return false;\n    }\n    if (days_diff\
    \ > 28 || days_diff < 1) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplua2tbjz: /tmp/tmplua2tbjz.cpp:58: int main(): Assertion `candidate(("01-01-2007"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    struct tm tm;\n    time_t time_val = strtotime(date.c_str());\n\
    \    memset(&tm, 0, sizeof(struct tm));\n    if (strptime(date.c_str(), \"%m-%d-%Y\"\
    , &tm) == 0) {\n        return false;\n    }\n    int tm_mon = tm.tm_mon;\n  \
    \  int tm_mday = tm.tm_mday;\n    int tm_year = tm.tm_year + 1900;\n    if (tm_mon\
    \ < 1 || tm_mon > 12 || tm_mday < 1 || tm_mday > 31 ||\n        tm_year < 0 ||\
    \ tm_year > 2020) {\n        return false;\n    }\n    int tm_hour = tm.tm_hour;\n\
    \    int tm_min  = tm.tm_min;\n    int tm_sec  = tm.tm_sec;\n    if (tm_hour <\
    \ 0 || tm_min < 0 || tm_sec < 0 || tm_hour > 23 || tm_min > 59 || tm_sec > 59)\
    \ {\n        return false;\n    }\n    if (tm_year == 0 && tm_mon == 12 && tm_mday\
    \ == 31) {\n        return false;\n    }\n    if (tm_year == 0 && tm_mon > 12\
    \ && tm_mday > 29) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrxkizy0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpdrxkizy0.cpp:18:23: error: \u2018strtotime\u2019 was not declared in\
    \ this scope; did you mean \u2018strptime\u2019?\n   18 |     time_t time_val\
    \ = strtotime(date.c_str());\n      |                       ^~~~~~~~~\n      |\
    \                       strptime\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n        std::size_t d = 0;\n        std::size_t\
    \ m = 0;\n        std::size_t y = 2000;\n        std::size_t h = 0;\n        std::size_t\
    \ ms = 0;\n        std::size_t s = 0;\n        std::size_t a = 0;\n        //\
    \ Get the day number from date string.\n        d = std::stoi(date.substr(0, 2));\n\
    \        // Get the month number from date string.\n        m = std::stoi(date.substr(3,\
    \ 2));\n        // Get the year\n        y = std::stoi(date.substr(6, 4));\n \
    \       // Get the hour\n        h = std::stoi(date.substr(9, 2));\n        //\
    \ Get the minute\n        ms = std::stoi(date.substr(11, 2));\n        // Get\
    \ the second\n        s = std::stoi(date.substr(13, 2));\n        // Get the AM/PM\
    \ indicator\n        a = std::stoi(date.substr(16, 1));\n        // Check date\
    \ string is valid.\n        if (d >= 1 && d <= 31) {\n                if (m <=\
    \ 12) {\n                        if (y <= 9999) {\n                          \
    \      if (h < 12 && h > 0) {\n                                        if (ms\
    \ < 59 && ms > 0) {\n                                                if (s <=\
    \ 59 && s > 0) {\n                                                        if (a==1)\
    \ {\n                                                                if (d > 0\
    \ && m < 3 && m > 0 && y > 0 && h > 0 && ms >= 0 && ms <= 59 && s >= 0 && s <=\
    \ 59) {\n                                                                    \
    \    return true;\n                                                          \
    \      }\n                                                        }\n        \
    \                                        }\n                                 \
    \       }\n                                }\n                        }\n    \
    \            }\n        }\n        // Return false if the date is not valid.\n\
    \        return false;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 11) > this->size() (which is 10)\n"
  stdout: ''
  timestamp: 1660133576
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    unsigned int day = 0, month = 0, year =\
    \ 0;\n    std::string::size_type end1 = 0, end2 = 0;\n    std::string::size_type\
    \ pos;\n    bool valid = true;\n\n    pos = date.find(\"-\");\n    if (pos ==\
    \ std::string::npos) {\n        valid = false;\n    } else {\n        end1 = date.find(\"\
    :\", pos);\n        end2 = date.find(\",\", pos);\n        if (end1 == std::string::npos\
    \ && end2 == std::string::npos) {\n            valid = false;\n        } else\
    \ {\n            day = stoi(date.substr(pos + 1, end1 - pos - 1));\n         \
    \   pos = end2;\n            end1 = date.find(\":\", pos);\n            if (end1\
    \ == std::string::npos) {\n                valid = false;\n            } else\
    \ {\n                month = stoi(date.substr(pos + 1, end1 - pos - 1));\n   \
    \             pos = end1;\n                end1 = date.find(\",\", pos);\n   \
    \             if (end1 == std::string::npos) {\n                    valid = false;\n\
    \                } else {\n                    year = stoi(date.substr(pos + 1,\
    \ end1 - pos - 1));\n                }\n            }\n        }\n    }\n    \n\
    \    if (valid) {\n        bool check_month[12] = {0, 31, 59, 90, 120, 151, 181,\
    \ 212, 243, 273, 304, 334};\n        if (month < 1 || month > 12) {\n        \
    \    valid = false;\n        } else {\n            month--;\n            if (day\
    \ < 1 || day > check_month[month]) {\n                valid = false;\n       \
    \     } else {\n                valid = true;\n            }\n        }\n    }\n\
    \    \n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpubahz2if.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion of \u201831\u2019 from\
    \ \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n   50 |         bool check_month[12]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n      |        \
    \                                                                            \
    \  ^\n/tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion of \u201859\u2019\
    \ from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmpubahz2if.cpp:50:86:\
    \ error: narrowing conversion of \u201890\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion\
    \ of \u2018120\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n\
    /tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion of \u2018151\u2019 from\
    \ \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmpubahz2if.cpp:50:86:\
    \ error: narrowing conversion of \u2018181\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion\
    \ of \u2018212\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n\
    /tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion of \u2018243\u2019 from\
    \ \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmpubahz2if.cpp:50:86:\
    \ error: narrowing conversion of \u2018273\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion\
    \ of \u2018304\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n\
    /tmp/tmpubahz2if.cpp:50:86: error: narrowing conversion of \u2018334\u2019 from\
    \ \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool validDate = true;\n\n    if (date ==\
    \ \"\") {\n        validDate = false;\n    } else if (date.size() < 2) {\n   \
    \     validDate = false;\n    } else if (date.size() > 10) {\n        validDate\
    \ = false;\n    } else if (date[2] == '-' && date[4] == '-' && date[6] == '-')\
    \ {\n        validDate = true;\n    }\n\n    return validDate;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuk0p1v31: /tmp/tmpuk0p1v31.cpp:34: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaw7z_6np: /tmp/tmpaw7z_6np.cpp:22: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    assert(date.size() > 0);\n    int month\
    \ = stoi(date.substr(0, 2)) % 12;\n    int day = stoi(date.substr(3, 2));\n  \
    \  int year = stoi(date.substr(6, 4));\n    \n    assert(month >= 1 && month <=\
    \ 12);\n    assert(day >= 1 && day <= 30);\n    assert(month != 0 || day != 0);\n\
    \    \n    if (month == 2) {\n        assert(day >= 1 && day <= 29);\n    }\n\
    \    \n    if (day > 29) {\n        return false;\n    }\n    \n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        assert(day >= 1\
    \ && day <= 30);\n    }\n    \n    if (month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) {\n        assert(day\
    \ >= 1 && day <= 31);\n    }\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw5wntht9: /tmp/tmpw5wntht9.cpp:47: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write code here.\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeasdc740: /tmp/tmpeasdc740.cpp:23: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[12]={0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    int months[12]={0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years[12]={2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int i,m,y,temp;\n    int day=stoi(date.substr(0,2));\n    int month=stoi(date.substr(2,2));\n\
    \    int year=stoi(date.substr(4,4));\n    // Validate the string\n    if(date.empty()==true)\n\
    \        return false;\n    // If the day is not valid then return false.\n  \
    \  if(days[month-1]<1)\n        return false;\n    // If the month is not valid\
    \ then return false.\n    if(month<1 || month>12)\n        return false;\n   \
    \ // If the year is not valid then return false.\n    if(year<2000 || year>2020)\n\
    \        return false;\n    // If the day is less than 1 then return false.\n\
    \    if(day<1)\n        return false;\n    // If the day is more than 31 then\
    \ return false.\n    if(day>31)\n        return false;\n    // If the month is\
    \ less than 1 or higher than 12 then return false.\n    if(month<1 || month>12)\n\
    \        return false;\n    // If the month is greater than 12 then return false.\n\
    \    if(month>12)\n        return false;\n    // If the year day is less than\
    \ 1 then return false.\n    if(day<1)\n        return false;\n    // If the year\
    \ day is more than 31 then return false.\n    if(day>31)\n        return false;\n\
    \    // If the month day is less than 1 then return false.\n    if(month<1)\n\
    \        return false;\n    // If the month day is more than 31 then return false.\n\
    \    if(month>31)\n        return false;\n    // If the year month is less than\
    \ 1 then return false.\n    if(month<1)\n        return false;\n    // If the\
    \ year month is more than 12 then return false.\n    if(month>12)\n        return\
    \ false;\n    // If the date string is correct then return true.\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmg2u3rj7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpmg2u3rj7.cpp:17:56: error: too many initializers for \u2018int [12]\u2019\
    \n   17 |     int days[12]={0,31,28,31,30,31,30,31,31,30,31,30,31};\n      | \
    \                                                       ^\n/tmp/tmpmg2u3rj7.cpp:18:49:\
    \ error: too many initializers for \u2018int [12]\u2019\n   18 |     int months[12]={0,1,2,3,4,5,6,7,8,9,10,11,12};\n\
    \      |                                                 ^\n/tmp/tmpmg2u3rj7.cpp:19:84:\
    \ error: too many initializers for \u2018int [12]\u2019\n   19 |     int years[12]={2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \      |                                                                     \
    \               ^\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.empty()) return false;\n    if(date.size()\
    \ == 7) return false;\n    std::string date_str = date;\n    std::string date_format\
    \ = \"%d\";\n    std::transform(date_str.begin(), date_str.end(), date_str.begin(),\
    \ ::tolower);\n    int d_int = std::stoi(date_str);\n    int m = d_int % 12;\n\
    \    int y = d_int / 12;\n    if(m < 1 || m > 12) return false;\n    if(y < 0)\
    \ return false;\n    if((m == 2 && (y % 4 == 0 && y % 100 != 0 || (y % 400 ==\
    \ 0))) || \n    (m == 1 && y % 400 == 0) || m == 3 && y % 4 == 0) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsiq04x1s: /tmp/tmpsiq04x1s.cpp:33: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Return True if date is not empty\
    \ and the number of days is not less \n    // than 1 or higher than 31 days for\
    \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n    if (!date.empty() && (date.length()\
    \ < 10) && (date.length() > 5) && (date.length() < 13) && (date.length() < 19))\
    \ {\n        \n        // Split the date string on hyphens.\n        std::vector<std::string>\
    \ split_date;\n        std::string month;\n        std::string day;\n        std::string\
    \ year;\n\n        // Split the date string on hyphens and store into split_date.\n\
    \        std::string delimiter(\"-\");\n        std::istringstream ss(date);\n\
    \        std::getline(ss, split_date, delimiter);\n\n        // Extract the month\
    \ and day from the split_date string.\n        month = split_date[0];\n      \
    \  day = split_date[1];\n        year = split_date[2];\n\n        // Convert the\
    \ month string to integer if necessary.\n        int month_int_val = 0;\n    \
    \    if(month.length() > 2) {\n            month_int_val = (int) month[0] - '0';\n\
    \        }\n        if(month.length() > 3) {\n            month_int_val += (int)\
    \ month[1] - '0';\n        }\n        if(month.length() > 5) {\n            month_int_val\
    \ += (int) month[2] - '0';\n        }\n        if(month.length() > 7) {\n    \
    \        month_int_val += (int) month[3] - '0';\n        }\n        if(month.length()\
    \ > 8) {\n            month_int_val += (int) month[4] - '0';\n        }\n    \
    \    if(month.length() > 10) {\n            month_int_val += (int) month[5] -\
    \ '0';\n        }\n        if(month.length() > 12) {\n            month_int_val\
    \ += (int) month[6] - '0';\n        }\n\n        // Convert the day string to\
    \ integer if necessary.\n        int day_int_val = 0;\n        if(day.length()\
    \ > 2) {\n            day_int_val = (int) day[0] - '0';\n        }\n        if(day.length()\
    \ > 3) {\n            day_int_val += (int) day[1] - '0';\n        }\n        if(day.length()\
    \ > 5) {\n            day_int_val += (int) day[2] - '0';\n        }\n        if(day.length()\
    \ > 7) {\n            day_int_val += (int) day[3] - '0';\n        }\n        if(day.length()\
    \ > 8) {\n            day_int_val += (int) day[4] - '0';\n        }\n        if(day.length()\
    \ > 10) {\n            day_int_val += (int) day[5] - '0';\n        }\n       \
    \ if(\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tmif7dn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8tmif7dn.cpp:31:47: error: no matching function for call to \u2018\
    getline(std::istringstream&, std::vector<std::__cxx11::basic_string<char> >&,\
    \ std::string&)\u2019\n   31 |         std::getline(ss, split_date, delimiter);\n\
    \      |                                               ^\nIn file included from\
    \ /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8tmif7dn.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1538:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Allocator>&, _CharT)\u2019\n 1538 |     getline(basic_istream<_CharT,\
    \ _Traits>& __in,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8tmif7dn.cpp:31:47:\
    \ note:   \u2018std::vector<std::__cxx11::basic_string<char> >\u2019 is not derived\
    \ from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Allocator>\u2019\n \
    \  31 |         std::getline(ss, split_date, delimiter);\n      |            \
    \                                   ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n "
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n   // Write your code here\n   // validate the\
    \ date string here\n   // check if the date string is empty\n   // validate for\
    \ number of days not less than 1 \n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30 \n   // validate\
    \ for number of days not less than 29\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n   // validate for number of days not\
    \ less than 30\n   // validate for number of days not less than 31 \n   // validate\
    \ for number of days not less than 30\n   // validate for number of days not less\
    \ than 31 \n   // validate for number of days not less than 30\n   // validate\
    \ for number of days not less than 31 \n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6f58mx69: /tmp/tmp6f58mx69.cpp:78: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.empty() == false)\n    {\n    \
    \    std::smatch sm;\n        if (std::regex_match(date, sm, std::regex(\"^\\\\\
    d{1,2}-\\\\d{1,2}-\\\\d{4}$\")))\n        {\n            int days = std::stoi(sm.str());\n\
    \            if (days > 0 && days < 32 && days > 29 && days >= 1 && days <= 31)\n\
    \            {\n                int last_day = days;\n                for (int\
    \ i = 1; i < 12; i++)\n                {\n                    bool flag = false;\n\
    \                    if (i <= 2 && last_day > 29)\n                    {\n   \
    \                     last_day = last_day - 29;\n                        flag\
    \ = true;\n                    }\n                    else if (i <= 3 && last_day\
    \ > 30)\n                    {\n                        last_day = last_day -\
    \ 30;\n                        flag = true;\n                    }\n         \
    \           else if (i <= 5 && last_day > 31)\n                    {\n       \
    \                 last_day = last_day - 31;\n                        flag = true;\n\
    \                    }\n                    else if (i <= 7 && last_day > 31)\n\
    \                    {\n                        last_day = last_day - 30;\n  \
    \                      flag = true;\n                    }\n                 \
    \   else if (i <= 8 && last_day > 31)\n                    {\n               \
    \         last_day = last_day - 30;\n                        flag = true;\n  \
    \                  }\n                    else if (i <= 10 && last_day > 30)\n\
    \                    {\n                        last_day = last_day - 30;\n  \
    \                      flag = true;\n                    }\n                 \
    \   else if (i <= 12 && last_day > 31)\n                    {\n              \
    \          last_day = last_day - 31;\n                        flag = true;\n \
    \                   }\n                    else\n                    {\n     \
    \                   flag = true;\n                    }\n                    if\
    \ (flag == true)\n                    {\n                        break;\n    \
    \                }\n                }\n                if (flag == true)\n   \
    \             {\n                    return true;\n                }\n       \
    \         else\n                {\n                    return false;\n       \
    \         }\n            }\n            else\n            {\n                return\
    \ false;\n            }\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrzt_f50.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgrzt_f50.cpp:73:21: error: \u2018flag\u2019 was not declared in this\
    \ scope\n   73 |                 if (flag == true)\n      |                  \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here.\n    if(date.empty())\
    \ {\n        return false;\n    }\n    std::istringstream sdate(date);\n    short\
    \ day, month, year;\n    char sep = '/';\n    if(sdate >> month >> sep >> day\
    \ >> sep >> year) {\n        int num_days_in_month[] = {31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31};\n        return ((month >= 1 && month <= 12) && ((num_days_in_month[month-1]\
    \ <= day) || day == 29) && (year >= 1900 && year <= 2100));\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmj93oq_0: /tmp/tmpmj93oq_0.cpp:32: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    struct tm time;\n    bool isvalid = false;\n\
    \    // Check the length of the string is greater than 0\n    if (date.size()\
    \ > 0) {\n        // Check the length of the string is correct (9 characters and\
    \ 1 hyphen)\n        if (date.size() != 9 || date[6] != '-' || date[5] != '-'\
    \ || date[4] != '-') {\n            return false;\n        }\n        // Convert\
    \ the date string to time\n        strptime(date.c_str(), \"%d-%m-%Y\", &time);\n\
    \        isvalid = true;\n    }\n    // Check day\n    if (isvalid && time.tm_mday\
    \ < 1 || time.tm_mday > 31) {\n        return false;\n    }\n    // Check month\n\
    \    if (isvalid && time.tm_mon < 1 || time.tm_mon > 12) {\n        return false;\n\
    \    }\n    // Check year\n    if (isvalid && time.tm_year < 1000 || time.tm_year\
    \ > 3000) {\n        return false;\n    }\n    return isvalid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd36po0an: /tmp/tmpd36po0an.cpp:45: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code goes here\n    return date.size()\
    \ > 0 && date.find(\"01-\") == -1 && date.find(\"02-\") == -1 && date.find(\"\
    03-\") == -1 && date.find(\"04-\") == -1 && date.find(\"05-\") == -1 && date.find(\"\
    06-\") == -1 && date.find(\"07-\") == -1 && date.find(\"08-\") == -1 && date.find(\"\
    09-\") == -1 && date.find(\"10-\") == -1 && date.find(\"11-\") == -1 && date.find(\"\
    12-\") == -1 && date.find(\"01-31\") == -1 && date.find(\"03-31\") == -1 && date.find(\"\
    05-31\") == -1 && date.find(\"07-31\") == -1 && date.find(\"08-31\") == -1 &&\
    \ date.find(\"10-31\") == -1 && date.find(\"12-31\") == -1 && date.find(\"01-31\"\
    ) == -1 && date.find(\"02-29\") == -1 && date.find(\"03-29\") == -1 && date.find(\"\
    05-29\") == -1 && date.find(\"07-29\") == -1 && date.find(\"08-29\") == -1 &&\
    \ date.find(\"10-29\") == -1 && date.find(\"12-29\") == -1 && date.find(\"01-29\"\
    ) == -1 && date.find(\"02-28\") == -1 && date.find(\"03-28\") == -1 && date.find(\"\
    05-28\") == -1 && date.find(\"07-28\") == -1 && date.find(\"08-28\") == -1 &&\
    \ date.find(\"10-28\") == -1 && date.find(\"12-28\") == -1 && date.find(\"01-28\"\
    ) == -1 && date.find(\"02-27\") == -1 && date.find(\"03-27\") == -1 && date.find(\"\
    05-27\") == -1 && date.find(\"07-27\") == -1 && date.find(\"08-27\") == -1 &&\
    \ date.find(\"10-27\") == -1 && date.find(\"12-27\") == -1 && date.find(\"01-27\"\
    ) == -1 && date.find(\"02-26\") == -1 && date.find(\"03-26\") == -1 && date.find(\"\
    05-26\") == -1 && date.find(\"07-26\") == -1 && date.find(\"08-26\") == -1 &&\
    \ date.find(\"10-26\") == -1 && date.find(\"12-26\") == -1 && date.find(\"01-26\"\
    ) == -1 && date.find(\"02-25\") == -1 && date.find(\"03-25\") == -1 && date.find(\"\
    05-25\") == -1 && date.find(\"07-25\") == -1 && date.find(\"08-25\") == -1 &&\
    \ date.find(\"10-25\") == -1 && date.find(\"12-25\") == -1 && date.find(\"01-25\"\
    ) == -1 && date.find(\"02-24\") == -1 && date.find(\"03-24\") == -1 && date.find(\"\
    05-24\") == -1 && date.find(\"07-24\") == -1 && date.find(\"08-24\") == -1 &&\
    \ \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0j5iz3na.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0j5iz3na.cpp:19:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   19 | }\n      | ^\n/tmp/tmp0j5iz3na.cpp:18:1826: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   18 |     return date.size() > 0\
    \ && date.find(\"01-\") == -1 && date.find(\"02-\") == -1 && date.find(\"03-\"\
    ) == -1 && date.find(\"04-\") == -1 && date.find(\"05-\") == -1 && date.find(\"\
    06-\") == -1 && date.find(\"07-\") == -1 && date.find(\"08-\") == -1 && date.find(\"\
    09-\") == -1 && date.find(\"10-\") == -1 && date.find(\"11-\") == -1 && date.find(\"\
    12-\") == -1 && date.find(\"01-31\") == -1 && date.find(\"03-31\") == -1 && date.find(\"\
    05-31\") == -1 && date.find(\"07-31\") == -1 && date.find(\"08-31\") == -1 &&\
    \ date.find(\"10-31\") == -1 && date.find(\"12-31\") == -1 && date.find(\"01-31\"\
    ) == -1 && date.find(\"02-29\") == -1 && date.find(\"03-29\") == -1 && date.find(\"\
    05-29\") == -1 && date.find(\"07-29\") == -1 && date.find(\"08-29\") == -1 &&\
    \ date.find(\"10-29\") == -1 && date.find(\"12-29\") == -1 && date.find(\"01-29\"\
    ) == -1 && date.find(\"02-28\") == -1 && date.find(\"03-28\") == -1 && date.find(\"\
    05-28\") == -1 && date.find(\"07-28\") == -1 && date.find(\"08-28\") == -1 &&\
    \ date.find(\"10-28\") == -1 && date.find(\"12-28\") == -1 && date.find(\"01-28\"\
    ) == -1 && date.find(\"02-27\") == -1 && date.find(\"03-27\") == -1 && date.find(\"\
    05-27\") == -1 && date.find(\"07-27\") == -1 && date.find(\"08-27\") == -1 &&\
    \ date.find(\"10-27\") == -1 && date.find(\"12-27\") == -1 && date.find(\"01-27\"\
    ) == -1 && date.find(\"02-26\") == -1 && date.find(\"03-26\") == -1 && date.find(\"\
    05-26\") == -1 && date.find(\"07-26\") == -1 && date.find(\"08-26\") == -1 &&\
    \ date.find(\"10-26\") == -1 && date.find(\"12-26\") == -1 && date.find(\"01-26\"\
    ) == -1 && date.find(\"02-25\") == -1 && date.find(\"03-25\") == -1 && date.find(\"\
    05-25\") == -1 && date.find(\"07-25\") == -1 && date.find(\"08-25\") == -1 &&\
    \ date.find(\"10-25\") == -1 && date.find(\"12-25\") == -1 && date.find(\"01-25\"\
    ) == -1 && date.find(\"02-24\") == -1 && date.find(\"03-24\") == -1 && date.find(\"\
    05-24\") == -1 && date.find(\"07-24\") == "
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(!date.empty()){\n        std::istringstream\
    \ iss(date);\n        int day, month, year;\n        iss >> month >> day >> year;\n\
    \        if(month < 1 || month > 12){\n            return false;\n        }\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    \
    \    if(year < 1980 || year > 2020){\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5k2i9ecd: /tmp/tmp5k2i9ecd.cpp:35: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int m[2][12] = {\n        {0, 31, 59, 90,\
    \ 120, 151, 181, 212, 243, 273, 304, 334},\n        {0, 31, 60, 91, 121, 152,\
    \ 182, 213, 244, 274, 305, 335}\n    };\n    int y = 0;\n    int m = date.size()/2;\n\
    \    for(int i = 0; i<m; i++) {\n        if (i < 2) {\n            y += m[i];\n\
    \        } else {\n            y += m[i] + 30;\n        }\n        if(date[i]\
    \ > '0' && date[i] <= '9') {\n            y += m[i] - '0';\n        }\n    }\n\
    \    for(int i = 0; i<m; i++) {\n        if (m[i] < 1 || m[i] > 12) {\n      \
    \      return false;\n        }\n    }\n    if(m == 12) {\n        if(date !=\
    \ date.substr(0, date.length()-2)){\n            return false;\n        }\n  \
    \  }\n    for(int i = 0; i<m; i++) {\n        if (m[i] > m[i-1]) {\n         \
    \   return false;\n        }\n    }\n    if(m == 2) {\n        if(date != date.substr(0,\
    \ date.length()-2)) {\n            return false;\n        }\n    }\n    for(int\
    \ i = 0; i<m; i++) {\n        if(m[i] > 31) {\n            return false;\n   \
    \     }\n    }\n    if(m == 1) {\n        if(date != date.substr(0, date.length()-2))\
    \ {\n            return false;\n        }\n    }\n    if(date != date.substr(0,\
    \ date.length()-2)) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpau0zfo_u.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpau0zfo_u.cpp:22:9: error: conflicting declaration \u2018int m\u2019\
    \n   22 |     int m = date.size()/2;\n      |         ^\n/tmp/tmpau0zfo_u.cpp:17:9:\
    \ note: previous declaration as \u2018int m [2][12]\u2019\n   17 |     int m[2][12]\
    \ = {\n      |         ^\n/tmp/tmpau0zfo_u.cpp:23:22: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   23 |     for(int i = 0; i<m;\
    \ i++) {\n      |                      ^\n/tmp/tmpau0zfo_u.cpp:25:15: error: invalid\
    \ conversion from \u2018int*\u2019 to \u2018int\u2019 [-fpermissive]\n   25 |\
    \             y += m[i];\n      |             ~~^~~~~~~\n      |             \
    \  |\n      |               int*\n/tmp/tmpau0zfo_u.cpp:27:15: error: invalid conversion\
    \ from \u2018int*\u2019 to \u2018int\u2019 [-fpermissive]\n   27 |           \
    \  y += m[i] + 30;\n      |             ~~^~~~~~~~~~~~\n      |              \
    \ |\n      |               int*\n/tmp/tmpau0zfo_u.cpp:30:15: error: invalid conversion\
    \ from \u2018int*\u2019 to \u2018int\u2019 [-fpermissive]\n   30 |           \
    \  y += m[i] - '0';\n      |             ~~^~~~~~~~~~~~~\n      |            \
    \   |\n      |               int*\n/tmp/tmpau0zfo_u.cpp:33:22: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   33 |     for(int\
    \ i = 0; i<m; i++) {\n      |                      ^\n/tmp/tmpau0zfo_u.cpp:34:20:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   34 |         if (m[i] < 1 || m[i] > 12) {\n      |                    ^\n\
    /tmp/tmpau0zfo_u.cpp:34:32: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   34 |         if (m[i] < 1 || m[i] > 12) {\n \
    \     |                                ^~\n/tmp/tmpau0zfo_u.cpp:38:13: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   38\
    \ |     if(m == 12) {\n      |             ^~\n/tmp/tmpau0zfo_u.cpp:43:22: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   43\
    \ |     for(int i = 0; i<m; i++) {\n      |                      ^\n/tmp/tmpau0zfo_u.cpp:48:13:\
    \ e"
  stdout: ''
  timestamp: 1660133577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    // Write your\
    \ code here\n    // Write your code here\n    // Write your code here\n    //\
    \ Write your code here\n    // Write your code here\n    // Write your code here\n\
    \    // Write your code here\n    // Write your code here\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3ec4fw6h: /tmp/tmp3ec4fw6h.cpp:31: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133577
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[12][31] = {\n        {31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31},\n        {31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31},\n        {31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n  \
    \      {31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n        {31, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31},\n        {31, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31},\n        {31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n        {31, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31},\n        {31, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31},\n        {31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n      \
    \  {31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    };\n    int months[12][12]\
    \ = {\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 365, 396,\
    \ 422, 458, 496, 546},\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274,\
    \ 305, 335, 365, 396, 422, 458, 496, 546},\n        {0, 31, 60, 91, 121, 152,\
    \ 182, 213, 244, 274, 305, 335, 365, 396, 422, 458, 496, 546},\n        {0, 31,\
    \ 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 365, 396, 422, 458, 496, 546},\n\
    \        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 365, 396, 422,\
    \ 458, 496, 546},\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305,\
    \ 335, 365, 396, 422, 458, 496, 546},\n        {0, 31, 60, 91, 121, 152, 182,\
    \ 213, 244, 274, 305, 335, 365, 396, 422, 458, 496, 546},\n        {0, 31, 60,\
    \ 91, 121, 152, 182, 213, 244, 274, 305, 335, 365, 396, 422, 458, 496, 546},\n\
    \        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 365, 396, 422,\
    \ 458, 496, 546},\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305,\
    \ 335, 365, 396, 422, 458, 496, 546},\n        {0, 31, 60, 91, 121, 152, 182,\
    \ 213, 244, 274, 305, \n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ybnhlno.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1ybnhlno.cpp:43:1: error: expected \u2018}\u2019 before \u2018int\u2019\
    \n   43 | int main() {\n      | ^~~\n/tmp/tmp1ybnhlno.cpp:30:26: note: to match\
    \ this \u2018{\u2019\n   30 |     int months[12][12] = {\n      |            \
    \              ^\n/tmp/tmp1ybnhlno.cpp:43:1: error: too many initializers for\
    \ \u2018int [12]\u2019\n   43 | int main() {\n      | ^~~\n/tmp/tmp1ybnhlno.cpp:61:1:\
    \ error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp1ybnhlno.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmp1ybnhlno.cpp:61:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   61 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days,months,years;\n    int months[12]\
    \ = { 0 };\n    char date_string[25];\n    char *tmp;\n    tmp = (char*)date.c_str();\n\
    \    memset(date_string, 0, 25);\n    strcpy(date_string, tmp);\n\n    char *pch;\n\
    \    pch = strtok (date_string, \"-\");\n    while(NULL != pch){\n        months[atoi(pch)]++;\n\
    \        pch = strtok (NULL, \"-\");\n    }\n\n    days = 0;\n    for(int i =\
    \ 1; i <= 12; i++){\n        if(months[i] > 0)\n            days = days + 30 *\
    \ months[i];\n        if(months[i] == 0)\n            days = days + 29;\n    }\n\
    \    \n    months = months - 1;\n    \n    years = atoi(pch);\n\n    if((years\
    \ > 0 && years < 65) || (years == 0))\n        return false;\n    if((months <\
    \ 1) || (months > 12))\n        return false;\n    if((days < 1) || (days > 31))\n\
    \        return false;\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphn0h7xcg.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphn0h7xcg.cpp:18:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   18 |     int months[12] = { 0 };\n      |         ^~~~~~\n/tmp/tmphn0h7xcg.cpp:17:14:\
    \ note: previous declaration as \u2018int months\u2019\n   17 |     int days,months,years;\n\
    \      |              ^~~~~~\n/tmp/tmphn0h7xcg.cpp:28:25: error: invalid types\
    \ \u2018int[int]\u2019 for array subscript\n   28 |         months[atoi(pch)]++;\n\
    \      |                         ^\n/tmp/tmphn0h7xcg.cpp:34:20: error: invalid\
    \ types \u2018int[int]\u2019 for array subscript\n   34 |         if(months[i]\
    \ > 0)\n      |                    ^\n/tmp/tmphn0h7xcg.cpp:35:40: error: invalid\
    \ types \u2018int[int]\u2019 for array subscript\n   35 |             days = days\
    \ + 30 * months[i];\n      |                                        ^\n/tmp/tmphn0h7xcg.cpp:36:20:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   36 |     \
    \    if(months[i] == 0)\n      |                    ^\n"
  stdout: ''
  timestamp: 1660133579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day = atoi(date.c_str() + 1);\n    int\
    \ month = atoi(date.c_str() + 2);\n    int year = atoi(date.c_str() + 4);\n  \
    \  if (day > 31 && day < 33 && month < 12 && month > 0) {\n        return true;\n\
    \    }\n    else if (day > 30 && day < 31 && month < 11 && month > 1) {\n    \
    \    return true;\n    }\n    else if (day > 29 && month > 2) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n  \
    \  auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq8viz8ea: /tmp/tmpq8viz8ea.cpp:35: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your logic here\n    int m1, m2,\
    \ y1, y2;\n    std::string arr[2];\n    std::istringstream ss(date);\n    ss >>\
    \ arr[0] >> arr[1];\n    m1 = stoi(arr[0], 0, 10);\n    m2 = stoi(arr[1], 0, 10);\n\
    \    y1 = m1;\n    y2 = m2;\n    if (m1 > 12 || m2 > 12) {\n        return false;\n\
    \    }\n    if (m1 > 2 && m2 > 2) {\n        return false;\n    }\n    if (y1\
    \ <= 0 || y1 > 31)\n        return false;\n    if (y2 <= 0 || y2 > 30)\n     \
    \   return false;\n    \n    if (m1 == m2 && y1 == y2) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    std::string date_split[30];\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    for (i = date.length()-1; i>=0; i--) {\n    \
    \    if(date[i] == '-') {\n            date_split[j++] = date[i];\n        }\n\
    \        if(j==3) {\n            date_split[j] = 0;\n            std::istringstream\
    \ is(std::string(date_split));\n            std::cout<<date_split<<std::endl;\n\
    \            j = 0;\n        }\n    }\n    \n    // Now we have the year which\
    \ we must check\n    if(std::stoi(date_split[0], 0, 10)<1 || std::stoi(date_split[0],\
    \ 0, 10)>12) {\n        return false;\n    }\n    // Now we have the month which\
    \ we must check\n    if(std::stoi(date_split[1], 0, 10)<1 || std::stoi(date_split[1],\
    \ 0, 10)>12) {\n        return false;\n    }\n    // Now we have the day which\
    \ we must check\n    if(std::stoi(date_split[2], 0, 10)<1 || std::stoi(date_split[2],\
    \ 0, 10)>31) {\n        return false;\n    }\n    // All checks passed\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkcfgfha.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwkcfgfha.cpp:26:29: error: ambiguous overload for \u2018operator=\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   26 |             date_split[j] = 0;\n      |      \
    \                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwkcfgfha.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:669:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n  669 |       operator=(const basic_string& __str)\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:708:7: note: candidate:\
    \ \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n  708 |       operator=(const _CharT*\
    \ __s)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:719:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(_CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n  719 |       operator=(_CharT __c)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:736:7:\
    \ note: candidate: \u2018std::"
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool is_valid_date = false;\n    if(!date.empty()){\n\
    \        int day = 1;\n        int month = 1;\n        for(int i=0; i < date.size();\
    \ i++){\n            if(date[i] >= '0' && date[i] <= '9'){\n                day\
    \ *= 10;\n                day += date[i] - '0';\n            }\n            else\
    \ if(date[i] == '-'){\n                month *= 10;\n                month +=\
    \ date[i + 1] - '0';\n            }\n            else{\n                break;\n\
    \            }\n        }\n        if(day > 0 && day <= 31 && month > 0 && month\
    \ <= 12){\n            is_valid_date = true;\n        }\n    }\n    return is_valid_date;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsbvfabfa: /tmp/tmpsbvfabfa.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream iss(date);\n    char\
    \ date[11];\n    iss >> date >> date[1] >> date[2] >> date[3] >> date[4] >> date[5]\
    \ >> date[6] >> date[7] >> date[8] >> date[9] >> date[10] >> date[11];\n    \n\
    \    if(date[0] != '0' && date[0] != '1' && (date[0] != '2' || (date[1] != '0'\
    \ && date[1] != '1' && (date[1] != '2' || (date[2] != '0' && date[2] != '1' &&\
    \ (date[2] != '2' || (date[3] != '0' && date[3] != '1' && (date[3] != '2' || (date[4]\
    \ != '0' && date[4] != '1' && (date[4] != '2' || (date[5] != '0' && date[5] !=\
    \ '1' && (date[5] != '2' || (date[6] != '0' && date[6] != '1' && (date[6] != '2'\
    \ || (date[7] != '0' && date[7] != '1' && (date[7] != '2' || (date[8] != '0' &&\
    \ date[8] != '1' && (date[8] != '2' || (date[9] != '0' && date[9] != '1' && (date[9]\
    \ != '2' || (date[10] != '0' && date[10] != '1' && (date[10] != '2' || (date[11]\
    \ != '0' && date[11] != '1' && (date[11] != '2'))))))))))))))))) ){\n        return\
    \ false;\n    }\n    \n    for(int i = 1; i <= 12; i++){\n        if((date[0]\
    \ != i) && (date[2] != i) && (date[4] != i) && (date[6] != i) && (date[8] != i)\
    \ && (date[10] != i) && (date[12] != i) && (date[1] != i) && (date[3] != i) &&\
    \ (date[5] != i) && (date[7] != i) && (date[9] != i) && (date[11] != i) && (date[1]\
    \ != i) && (date[3] != i) && (date[5] != i) && (date[7] != i) && (date[9] != i)\
    \ && (date[11] != i) && (date[1] != i) && (date[3] != i) && (date[5] != i) &&\
    \ (date[7] != i) && (date[9] != i) && (date[11] != i) && (date[1] != i) && (date[3]\
    \ != i) && (date[5] != i) && (date[7] != i) && (date[9] != i) && (date[11] !=\
    \ i) && (date[1] != i) && (date[3] != i) && (date[5] != i) && (date[7] != i) &&\
    \ (date[9] != i) && (date[11] != i) && (date[1] != i) && (date[3] != i) && (date[5]\
    \ != i) && (date\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpplw69kti.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpplw69kti.cpp:18:17: error: declaration of \u2018char date [11]\u2019\
    \ shadows a parameter\n   18 |     char date[11];\n      |                 ^\n\
    /tmp/tmpplw69kti.cpp:21:700: error: expected \u2018)\u2019 before \u2018{\u2019\
    \ token\n   21 |     if(date[0] != '0' && date[0] != '1' && (date[0] != '2' ||\
    \ (date[1] != '0' && date[1] != '1' && (date[1] != '2' || (date[2] != '0' && date[2]\
    \ != '1' && (date[2] != '2' || (date[3] != '0' && date[3] != '1' && (date[3] !=\
    \ '2' || (date[4] != '0' && date[4] != '1' && (date[4] != '2' || (date[5] != '0'\
    \ && date[5] != '1' && (date[5] != '2' || (date[6] != '0' && date[6] != '1' &&\
    \ (date[6] != '2' || (date[7] != '0' && date[7] != '1' && (date[7] != '2' || (date[8]\
    \ != '0' && date[8] != '1' && (date[8] != '2' || (date[9] != '0' && date[9] !=\
    \ '1' && (date[9] != '2' || (date[10] != '0' && date[10] != '1' && (date[10] !=\
    \ '2' || (date[11] != '0' && date[11] != '1' && (date[11] != '2')))))))))))))))))\
    \ ){\n      |                                                                \
    \                                                                            \
    \                ~                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            ^\n      |                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                     "
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Check that the given date is not empty\n\
    \    if (date.empty()) {\n        return false;\n    }\n\n    // Split the date\
    \ into three parts using space as a delimiter\n    std::vector<std::string> date_parts\
    \ = date.split(\" \");\n\n    // The first part of the date should be in the format\
    \ mm-dd-yyyy\n    if (date_parts.size() != 3) {\n        return false;\n    }\n\
    \n    // The second part should be less than 31 days\n    if (std::stoi(date_parts[1])\
    \ > 31) {\n        return false;\n    }\n\n    // The third part should be less\
    \ than 30 days\n    if (std::stoi(date_parts[2]) > 30) {\n        return false;\n\
    \    }\n\n    // The first part of the date should be in the format mm-dd-yyyy\n\
    \    if (std::stoi(date_parts[0]) < 1 || std::stoi(date_parts[0]) > 12) {\n  \
    \      return false;\n    }\n\n    // The month of the second part of the date\
    \ should be less than or equal 12\n    if (std::stoi(date_parts[1]) < 1 || std::stoi(date_parts[1])\
    \ > 12) {\n        return false;\n    }\n\n    // The year of the third part of\
    \ the date should be in the range 1900 to 2100\n    if (std::stoi(date_parts[2])\
    \ < 1900 || std::stoi(date_parts[2]) > 2100) {\n        return false;\n    }\n\
    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnbs8b20v.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpnbs8b20v.cpp:23:48: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   23 |     std::vector<std::string> date_parts = date.split(\" \");\n     \
    \ |                                                ^~~~~\n"
  stdout: ''
  timestamp: 1660133579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    // return date.isEmpty()\
    \ || /* */\n\n    string dates[12] = { \"01-01-2000\", \"01-03-2000\", \"01-05-2000\"\
    , \"01-07-2000\", \"01-09-2000\", \"01-11-2000\", \"01-05-2012\", \"01-07-2012\"\
    , \"01-09-2012\", \"01-11-2012\", \"04-02-2040\", \"06-04-2020\", \"06/04/2020\"\
    , \"03-11-2000\" };\n    for (int i = 0; i < 12; i++) {\n        if (dates[i]\
    \ != date) {\n            return false;\n        }\n    }\n    bool valid = false;\n\
    \    int days[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int\
    \ months[12] = { 12, 1, 4, 6, 9, 11 };\n\n    int years = date.length() - 4;\n\
    \    for (int i = 0; i < years; i++) {\n        int dates = dates[i] - '0';\n\
    \        int month = dates / 10;\n        int day = dates % 10;\n\n        if\
    \ (month < 1 || month > 12 || day < 1 || day > days[month - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsm2cx9zy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpsm2cx9zy.cpp:20:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   20 |     string dates[12] = { \"01-01-2000\", \"01-03-2000\", \"01-05-2000\"\
    , \"01-07-2000\", \"01-09-2000\", \"01-11-2000\", \"01-05-2012\", \"01-07-2012\"\
    , \"01-09-2012\", \"01-11-2012\", \"04-02-2040\", \"06-04-2020\", \"06/04/2020\"\
    , \"03-11-2000\" };\n      |     ^~~~~~\n/tmp/tmpsm2cx9zy.cpp:20:5: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsm2cx9zy.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsm2cx9zy.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpsm2cx9zy.cpp:22:13: error: \u2018dates\u2019 was not declared in this\
    \ scope; did you mean \u2018date\u2019?\n   22 |         if (dates[i] != date)\
    \ {\n      |             ^~~~~\n      |             date\n/tmp/tmpsm2cx9zy.cpp:32:28:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   32 |     \
    \    int dates = dates[i] - '0';\n      |            "
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n\
    \    }\n\n    int dateArray[13] = {0, 0, 0, 0, 0, 0, 0};\n\n    if (date.length()\
    \ != 10) {\n        return false;\n    }\n\n    int year = stoi(date.substr(0,\
    \ 2));\n    int month = stoi(date.substr(2, 2));\n    int day = stoi(date.substr(4,\
    \ 2));\n\n    if (year < 1 || year > 9999) {\n        return false;\n    }\n\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n\n    if (month == 1) {\n\
    \        if (day > 28) {\n            return false;\n        }\n\n        dateArray[0]++;\n\
    \    } else if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n\n        dateArray[1]++;\n    } else if (month == 3) {\n        if\
    \ (day > 31) {\n            return false;\n        }\n\n        dateArray[2]++;\n\
    \    } else if (month == 4) {\n        if (day > 30) {\n            return false;\n\
    \        }\n\n        dateArray[3]++;\n    } else if (month == 5) {\n        if\
    \ (day > 31) {\n            return false;\n        }\n\n        dateArray[4]++;\n\
    \    } else if (month == 6) {\n        if (day > 31) {\n            return false;\n\
    \        }\n\n        dateArray[5]++;\n    } else if (month == 7) {\n        if\
    \ (day > 31) {\n            return false;\n        }\n\n        dateArray[6]++;\n\
    \    } else if (month == 8) {\n        if (day > 31) {\n            return false;\n\
    \        }\n\n        dateArray[7]++;\n    } else if (month == 9) {\n        if\
    \ (day > 31) {\n            return false;\n        }\n\n        dateArray[8]++;\n\
    \    } else if (month == 10) {\n        if (day > 31) {\n            return false;\n\
    \        }\n\n        dateArray[9]++;\n    } else if (month == 11) {\n       \
    \ if (day > 30) {\n            return false;\n        }\n\n        dateArray[10]++;\n\
    \    } else {\n        if (day > 31) {\n            return false;\n        }\n\
    \n        dateArray[11]++;\n    }\n\n    // The date is valid if all of the following\
    \ rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The\
    \ number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n\
    \    // 4. The date should be in the format: mm-dd-yyyy\n    // for example: \n\
    \    // valid_date('03-11-2000') => True\n    // valid_date('15-01-2012') => False\n\
    \    // valid_date('04-0-2040') => False\n    // valid_date('06\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgq6qj791: /tmp/tmpgq6qj791.cpp:130: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream ss(date);\n    int m,d,y;\n\
    \    std::string month, day;\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(ss, month, '-')) {\n        // If\
    \ this condition is met, then the while loop will break and\n        // return\
    \ false. If there was an error reading the character in\n        // month, then\
    \ that error would be stored in the variable \"ss\".\n        // To check the\
    \ format of the date, you can use the following code:\n        // if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        \
    \    return false;\n    }\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(ss, day, '-')) {\n        if(day.length()<1\
    \ || day.at(0) == '-' || day.at(1) == '-' || day.length()>31)\n            return\
    \ false;\n    }\n    // This loop checks that there are no more charactors left\
    \ in the stream.\n    while(std::getline(ss, month, '-')) {\n        if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        \
    \    return false;\n    }\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(ss, month, '-')) {\n        if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        \
    \    return false;\n    }\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(ss, month, '-')) {\n        if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        \
    \    return false;\n    }\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(ss, month, '-')) {\n        if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        \
    \    return false;\n    }\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(ss, month, '-')) {\n        if(month.length()<1\
    \ || month.at(0) == '-' || month.at(1) == '-' || month.length()>12)\n        \
    \    return false;\n    }\n    // This loop checks that there are no more charactors\
    \ left in the stream.\n    while(std::getline(s\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ys_8xq1.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0ys_8xq1.cpp:61:24: error: \u2018s\u2019 was not declared in this scope\n\
    \   61 |     while(std::getline(s\n      |                        ^\n/tmp/tmp0ys_8xq1.cpp:61:25:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   61 |     while(std::getline(s\n\
    \      |          ~              ^\n      |                         )\n   62 |\
    \ }\n      | ~                        \n/tmp/tmp0ys_8xq1.cpp:62:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmp0ys_8xq1.cpp:62:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   62 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n// Write code here.\n  std::chrono::system_clock::time_point\
    \ tp;\n  std::stringstream date_stream(date);\n  date_stream >> tp;\n  auto ltime\
    \ = tp;\n  std::string date_as_string(std::ctime(ltime.time_since_epoch().count()));\n\
    \  vector<int> days = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n  vector<int>\
    \ months = {1,2,3,4,5,6,7,8,9,10,11,12};\n  for(auto month:months) {\n    if(date_as_string.substr(6,1)\
    \ == \"-\") {\n      date_as_string = date_as_string.substr(0,6)+\"01\"+date_as_string.substr(7);\n\
    \      continue;\n    }\n    if(date_as_string.substr(3,1) == \"-\") {\n     \
    \ date_as_string = date_as_string.substr(0,3)+\"01\"+date_as_string.substr(4);\n\
    \      continue;\n    }\n    break;\n  }\n  for(auto day:days) {\n    if(date_as_string.substr(0,2)\
    \ == std::to_string((day-1))) {\n      date_as_string = date_as_string.substr(2,2);\n\
    \      continue;\n    }\n    break;\n  }\n  for(auto day:days) {\n    if(date_as_string.substr(2,2)\
    \ == std::to_string((day-1))) {\n      date_as_string = date_as_string.substr(0,2);\n\
    \      continue;\n    }\n    break;\n  }\n  if(date_as_string.substr(5,2) != \"\
    -\") {\n    if(date_as_string.substr(4,1) != \"-\") {\n      date_as_string =\
    \ \"01-\"+date_as_string.substr(4,2);\n    } else {\n      date_as_string = \"\
    01-\"+date_as_string.substr(4,1);\n    }\n  } else {\n    if(date_as_string.substr(3,1)\
    \ != \"-\") {\n      date_as_string = \"01-\"+date_as_string.substr(3,2);\n  \
    \  } else {\n      date_as_string = \"01-\"+date_as_string.substr(3,1);\n    }\n\
    \  }\n  if(date_as_string.substr(6,2) != \"-\") {\n    if(date_as_string.substr(5,1)\
    \ != \"-\") {\n      date_as_string = \"01-\"+date_as_string.substr(5,2);\n  \
    \  } else {\n      date_as_string = \"01-\"+date_as_string.substr(5,1);\n    }\n\
    \  } else {\n    if(date_as_string.substr(4,1) != \"-\") {\n      date_as_string\
    \ = \"01-\"+date_as_string.substr(4,2);\n    } else {\n      date_as_string =\
    \ \"01-\"+date_as_string.substr(4,1);\n    }\n  }\n  if(date_as_string.substr(0,2)\
    \ < \"01\") {\n    date_as_string = \"20\"+date_as_string;\n  }\n  if(date_as_string.substr(0,2)\
    \ >= \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoauf6gnp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpoauf6gnp.cpp:20:15: error: no match for \u2018operator>>\u2019 (operand\
    \ types are \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    } and \u2018std::chrono::_V2::system_clock::time_point\u2019 {aka \u2018std::chrono::time_point<std::chrono::_V2::system_clock,\
    \ std::chrono::duration<long int, std::ratio<1, 1000000000> > >\u2019})\n   20\
    \ |   date_stream >> tp;\n      |   ~~~~~~~~~~~ ^~ ~~\n      |   |           \
    \   |\n      |   |              std::chrono::_V2::system_clock::time_point {aka\
    \ std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long\
    \ int, std::ratio<1, 1000000000> > >}\n      |   std::stringstream {aka std::__cxx11::basic_stringstream<char>}\n\
    In file included from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpoauf6gnp.cpp:2:\n/usr/include/c++/9/istream:120:7: note: candidate:\
    \ \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT,\
    \ _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT,\
    \ _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\
    \n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |\
    \       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion\
    \ for argument 1 from \u2018std::chrono::_V2::system_clock::time_point\u2019 {aka\
    \ \u2018std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long\
    \ int, std::ratio<1, 1000000000> > >\u2019} to \u2018std::basic_istream<char>::__istream_type&\
    \ (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>&\
    \ (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type&\
    \ (*__pf)(__istream_type&))\n      |      "
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    int day = stoi(date.substr(6,\
    \ 2));\n    int month = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(0,\
    \ 4));\n    if (day < 1 || month < 1 || year < 1 || month > 12 ||\n        day\
    \ > 31 || month > 31 || day > 30)\n        return false;\n    // return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnddd2_si: /tmp/tmpnddd2_si.cpp:28: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Implement this function\n    int\
    \ day = stoi(string::npos);\n    int month = stoi(string::npos);\n    int year\
    \ = stoi(string::npos);\n    \n    bool valid = false;\n    \n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vfoa86l.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4vfoa86l.cpp:18:20: error: \u2018string\u2019 has not been declared\n\
    \   18 |     int day = stoi(string::npos);\n      |                    ^~~~~~\n\
    /tmp/tmp4vfoa86l.cpp:18:15: error: \u2018stoi\u2019 was not declared in this scope;\
    \ did you mean \u2018std::__cxx11::stoi\u2019?\n   18 |     int day = stoi(string::npos);\n\
    \      |               ^~~~\n      |               std::__cxx11::stoi\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4vfoa86l.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/tmp/tmp4vfoa86l.cpp:19:22:\
    \ error: \u2018string\u2019 has not been declared\n   19 |     int month = stoi(string::npos);\n\
    \      |                      ^~~~~~\n/tmp/tmp4vfoa86l.cpp:20:21: error: \u2018\
    string\u2019 has not been declared\n   20 |     int year = stoi(string::npos);\n\
    \      |                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    //your code goes here\n    bool ans = false;\n\
    \    auto d = std::stoi(date, nullptr, 10);\n    int month = d % 100;\n    int\
    \ day = d / 100;\n    int year = d / 100 - 2000;\n    std::cerr << \"year: \"\
    \ << year << \" month: \" << month << \" day: \" << day << \", date: \"<<date<<\"\
    , ans: \"<<ans<<std::endl;\n    if (std::string(date).length()==0 ) {\n      \
    \  ans=false;\n    }\n    else if (month<1 || month>12) {\n        ans=false;\n\
    \    }\n    else if (day < 1 || day > 30) {\n        ans=false;\n    }\n    else\
    \ if (month == 2 && day > 29) {\n        ans=false;\n    }\n    else if (month==1\
    \ && day > 31) {\n        ans=false;\n    }\n    else if (month==3 && day > 31)\
    \ {\n        ans=false;\n    }\n    else if (month==4 && day > 30) {\n       \
    \ ans=false;\n    }\n    else if (month==5 && day > 31) {\n        ans=false;\n\
    \    }\n    else if (month==6 && day > 30) {\n        ans=false;\n    }\n    else\
    \ if (month==7 && day > 31) {\n        ans=false;\n    }\n    else if (month==8\
    \ && day > 31) {\n        ans=false;\n    }\n    else if (month==9 && day > 30)\
    \ {\n        ans=false;\n    }\n    else if (month==10 && day > 31) {\n      \
    \  ans=false;\n    }\n    else if (month==11 && day > 30) {\n        ans=false;\n\
    \    }\n    else if (month==12 && day > 31) {\n        ans=false;\n    }\n   \
    \ else if (year < 2000 || year > 2050) {\n        ans=false;\n    }\n    else\
    \ if (month==4 && day==31 && year==2000)\n    {\n        ans=false;\n    }\n \
    \   else if (month==4 && day==31 && (year==2005 || year==2004))\n    {\n     \
    \   ans=true;\n    }\n    else if (month==6 && day==31 && year==2000)\n    {\n\
    \        ans=false;\n    }\n    else if (month==6 && day==31 && (year==2005 ||\
    \ year==2004))\n    {\n        ans=true;\n    }\n    else if (month==9 && day==31\
    \ && year==2000)\n    {\n        ans=false;\n    }\n    else if (month==9 && day==31\
    \ && (year==2005 || year==2004))\n    {\n        ans=true;\n    }\n    else if\
    \ (month==11 && day==31 && year==2000)\n    {\n        \n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg8vk482w.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpg8vk482w.cpp:100:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  100 | int main() {\n      |            ^\n/tmp/tmpg8vk482w.cpp:118:1:\
    \ error: expected \u2018}\u2019 at end of input\n  118 | }\n      | ^\n/tmp/tmpg8vk482w.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpg8vk482w.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  118 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[12];\n    memset(days,0,12*sizeof(int));\n\
    \    int months[12];\n    memset(months,0,12*sizeof(int));\n    int year[11];\n\
    \    memset(year,0,11*sizeof(int));\n    std::istringstream ss(date);\n    \n\
    \    ss >> std::noskipws;\n    if(!(ss.peek() == '/') && ss.peek() == '-') {\n\
    \        char date;\n        ss >> date;\n        std::sscanf(date.c_str(), \"\
    %d-%d-%d\", &days[0], &months[0], &year[0]);\n    } else if(!(ss.peek() == '/'))\
    \ {\n        char date;\n        ss >> date;\n        std::sscanf(date.c_str(),\
    \ \"%d\", &days[0]);\n    } else {\n        char date;\n        ss >> date;\n\
    \        std::sscanf(date.c_str(), \"%d-%d\", &months[0], &year[0]);\n    }\n\
    \    \n    for (int i=0;i<12;i++) {\n        if(months[i] != 0 && !(months[i]<1\
    \ || months[i]>12)) {\n            return false;\n        }\n    }\n    for (int\
    \ i=0;i<11;i++) {\n        if(days[i] != 0 && !(days[i]<1 || days[i]>31)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m1afqce.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1m1afqce.cpp:29:26: error: request for member \u2018c_str\u2019 in\
    \ \u2018date\u2019, which is of non-class type \u2018char\u2019\n   29 |     \
    \    std::sscanf(date.c_str(), \"%d-%d-%d\", &days[0], &months[0], &year[0]);\n\
    \      |                          ^~~~~\n/tmp/tmp1m1afqce.cpp:33:26: error: request\
    \ for member \u2018c_str\u2019 in \u2018date\u2019, which is of non-class type\
    \ \u2018char\u2019\n   33 |         std::sscanf(date.c_str(), \"%d\", &days[0]);\n\
    \      |                          ^~~~~\n/tmp/tmp1m1afqce.cpp:37:26: error: request\
    \ for member \u2018c_str\u2019 in \u2018date\u2019, which is of non-class type\
    \ \u2018char\u2019\n   37 |         std::sscanf(date.c_str(), \"%d-%d\", &months[0],\
    \ &year[0]);\n      |                          ^~~~~\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day;\n    bool leap;\n    int month;\n\
    \    std::string date_format = \"dd-mm-yyyy\";\n    sscanf(date.c_str(), date_format.c_str(),\
    \ &day, &month, &year);\n    assert(day >= 1 && day <= 31);\n    assert(month\
    \ >= 1 && month <= 12);\n    leap = is_leap_year(year);\n    return is_leap_year(year)\
    \ && day == 31 && month == 1 && leap == false && is_leap_year(month);\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo3o4w9f5.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo3o4w9f5.cpp:21:62: error: \u2018year\u2019 was not declared in this\
    \ scope\n   21 |     sscanf(date.c_str(), date_format.c_str(), &day, &month, &year);\n\
    \      |                                                              ^~~~\n/tmp/tmpo3o4w9f5.cpp:24:12:\
    \ error: \u2018is_leap_year\u2019 was not declared in this scope\n   24 |    \
    \ leap = is_leap_year(year);\n      |            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(!date.empty() && date.size()==10&&date[0]>='0'&&date[0]<='9'&&date[3]>='0'&&date[3]<='9'&&date[6]>='0'&&date[6]<='9'&&date[1]>='0'&&date[1]<='9'&&date[2]>='0'&&date[2]<='9'){\n\
    \        int month = stoi(date.substr(1,2));\n        int day = stoi(date.substr(4,2));\n\
    \        int year = stoi(date.substr(7,4));\n        if(month<1||month>12||day<1||day>31||month>2||day>29){\n\
    \            return false;\n        }\n        else if(month==2){\n          \
    \  if(day>28){\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp2lt0efye: /tmp/tmp2lt0efye.cpp:35: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Code here\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0edniew0: /tmp/tmp0edniew0.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    char\
    \ day[5];\n    char month[4];\n    char year[4];\n    \n    day[sizeof(\"31\"\
    )] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"\
    28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"\
    29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"\
    30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"\
    31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"\
    28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"\
    29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"\
    30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"\
    31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"\
    28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"\
    29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"\
    30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"\
    31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"\
    28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"30\")] = 1;\n    day[sizeof(\"\
    29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"31\")] = 1;\n    day[sizeof(\"\
    30\")] = 1;\n    day[sizeof(\"29\")] = 1;\n    day[sizeof(\"28\")] = 1;\n    day[sizeof(\"\
    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x_mwurv.cpp:71:16: warning: missing terminating \" character\n\
    \   71 |     day[sizeof(\"\n      |                ^\n/tmp/tmp0x_mwurv.cpp:71:16:\
    \ error: missing terminating \" character\n/tmp/tmp0x_mwurv.cpp: In function \u2018\
    bool valid_date(std::string)\u2019:\n/tmp/tmp0x_mwurv.cpp:72:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmp0x_mwurv.cpp:71:16:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   71 |     day[sizeof(\"\
    \n      |               ~^\n      |                )\n   72 | }\n      | ~   \
    \            \n/tmp/tmp0x_mwurv.cpp:71:16: error: expected \u2018]\u2019 before\
    \ \u2018}\u2019 token\n   71 |     day[sizeof(\"\n      |                ^\n \
    \     |                ]\n   72 | }\n      | ~               \n/tmp/tmp0x_mwurv.cpp:72:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   72 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  std::stringstream stream(date);\n  char ch;\n\
    \  unsigned int days = 0;\n  unsigned int months = 0;\n  unsigned int years =\
    \ 0;\n  while (std::cin >> ch) {\n    switch (ch) {\n      case '0':\n      case\
    \ '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n \
    \     case '6':\n      case '7':\n      case '8':\n      case '9':\n      case\
    \ '-':\n      case '/':\n        months++;\n        break;\n      case '1':\n\
    \      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case\
    \ '6':\n      case '7':\n      case '8':\n      case '9':\n      case '-':\n \
    \       days++;\n        break;\n      case '2':\n      case '3':\n      case\
    \ '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n \
    \     case '9':\n      case '-':\n        years++;\n        break;\n      default:\n\
    \        break;\n    }\n  }\n  if (months > 12) {\n    return false;\n  }\n  if\
    \ (days > 31) {\n    return false;\n  }\n  if (days > 30) {\n    return false;\n\
    \  }\n  if (months > 12) {\n    return false;\n  }\n  if (years > 12) {\n    return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp22voloh3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp22voloh3.cpp:38:7: error: duplicate case value\n   38 |       case\
    \ '1':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:25:7: note: previously used here\n\
    \   25 |       case '1':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:39:7: error:\
    \ duplicate case value\n   39 |       case '2':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:26:7:\
    \ note: previously used here\n   26 |       case '2':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:40:7:\
    \ error: duplicate case value\n   40 |       case '3':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:27:7:\
    \ note: previously used here\n   27 |       case '3':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:41:7:\
    \ error: duplicate case value\n   41 |       case '4':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:28:7:\
    \ note: previously used here\n   28 |       case '4':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:42:7:\
    \ error: duplicate case value\n   42 |       case '5':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:29:7:\
    \ note: previously used here\n   29 |       case '5':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:43:7:\
    \ error: duplicate case value\n   43 |       case '6':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:30:7:\
    \ note: previously used here\n   30 |       case '6':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:44:7:\
    \ error: duplicate case value\n   44 |       case '7':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:31:7:\
    \ note: previously used here\n   31 |       case '7':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:45:7:\
    \ error: duplicate case value\n   45 |       case '8':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:32:7:\
    \ note: previously used here\n   32 |       case '8':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:46:7:\
    \ error: duplicate case value\n   46 |       case '9':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:33:7:\
    \ note: previously used here\n   33 |       case '9':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:47:7:\
    \ error: duplicate case value\n   47 |       case '-':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:34:7:\
    \ note: previously used here\n   34 |       case '-':\n      |       ^~~~\n/tmp/tmp22voloh3.cpp:50:7:\
    \ e"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool status = true;\n    \n    // Write\
    \ your code here\n    if(!date.empty()){\n        if(date.size() >= 3 && date.size()\
    \ <= 10){\n            if(date.size()==3){\n                for(int i=0; i<12;\
    \ i++){\n                    if(date.at(0)<i && date.at(1)>i && date.at(2)<i){\n\
    \                        status = false;\n                        break;\n   \
    \                 }\n                }\n            }\n            else if(date.size()==10){\n\
    \                for(int i=0; i<31; i++){\n                    if(date.at(0)<i\
    \ && date.at(1)>i && date.at(2)<i && date.at(3)<i && date.at(4)<i && date.at(5)<i\
    \ && date.at(6)<i && date.at(7)<i && date.at(8)<i && date.at(9)<i && date.at(10)<i){\n\
    \                        status = false;\n                        break;\n   \
    \                 }\n                }\n            }\n            else if(date.size()==12){\n\
    \                for(int i=0; i<30; i++){\n                    if(date.at(0)<i\
    \ && date.at(1)>i && date.at(2)<i && date.at(3)<i && date.at(4)<i && date.at(5)<i\
    \ && date.at(6)<i && date.at(7)<i && date.at(8)<i && date.at(9)<i && date.at(10)<i\
    \ && date.at(11)<i){\n                        status = false;\n              \
    \          break;\n                    }\n                }\n            }\n \
    \       }\n        else if(date.size()>10 && date.size()<=17){\n            if(date.size()==12){\n\
    \                for(int i=0; i<31; i++){\n                    if(date.at(0)<i\
    \ && date.at(1)>i && date.at(2)<i && date.at(3)<i && date.at(4)<i && date.at(5)<i\
    \ && date.at(6)<i && date.at(7)<i && date.at(8)<i && date.at(9)<i && date.at(10)<i\
    \ && date.at(11)<i && date.at(12)<i){\n                        status = false;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            else if(date.size()==17){\n                for(int i=0;\
    \ i<31; i++){\n                    if(date.at(0)<i && date.at(1)>i && date.at(2)<i\
    \ && date.at(3)<i && date.at(4)<i && date.at(5)<i && date.at(6)<i && date.at(7)<i\
    \ && date.at(8)<i && date.at(9)<i && date.at(10)<i && date.at(11)<i && date.at(12)<i\
    \ && date.at(13)<i && date.at(14)<i && date.\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwrarzd9s.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwrarzd9s.cpp:59:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   59 | }\n      | ^\n/tmp/tmpwrarzd9s.cpp:58:274: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   58 |                     if(date.at(0)<i\
    \ && date.at(1)>i && date.at(2)<i && date.at(3)<i && date.at(4)<i && date.at(5)<i\
    \ && date.at(6)<i && date.at(7)<i && date.at(8)<i && date.at(9)<i && date.at(10)<i\
    \ && date.at(11)<i && date.at(12)<i && date.at(13)<i && date.at(14)<i && date.\n\
    \      |                       ~                                             \
    \                                                                            \
    \                                                                            \
    \                                                     ^\n      |             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 )\n   59 | }\n      | ~                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         \n/tmp/tmpwrarzd9s.cpp:59:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpwrarzd9s.cpp:60:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   60 | int main() {\n      |            ^\n/tmp/tmpwrarzd9s.cpp:78:1: error:\
    \ expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwrarzd9s.cpp:56:37:\
    \ note: to match this \u2018{\u2019\n   56 |             else if(date.size()==17){\n\
    \      |                                     ^\n/tmp/tmpwrarzd9s.cpp:78:1: error:\
    \ expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpwrarzd9s.cpp:47:51:\
    \ note: to match this \u2018{\u2019\n   47 |         else if(date.size()>10 &&\
    \ d"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write your code here\n    // Write\
    \ your code here\n    std::cout<<\"date: \"<<date<<std::endl;\n    //std::cin>>date;\n\
    \    bool valid=true;\n    if(!date.empty()){\n        bool valid_month=true;\n\
    \        for(int i=0;i<12;i++){\n            if(date.at(i)>='0' && date.at(i)<='9'){\n\
    \                date.at(i)-='0';\n            }\n        }\n        for(int i=0;i<=2;i++){\n\
    \            if(date.at(i)>='0' && date.at(i)<='9'){\n                date.at(i)-='0';\n\
    \            }\n        }\n        int day1=date.at(2);\n        int day3=date.at(4);\n\
    \        int day5=date.at(6);\n        int day7=date.at(8);\n        int day9=date.at(10);\n\
    \        int day11=date.at(12);\n        int month1=date.at(1);\n        int month3=date.at(3);\n\
    \        int month5=date.at(5);\n        int month7=date.at(7);\n        int month8=date.at(8);\n\
    \        int month10=date.at(10);\n        int month12=date.at(12);\n        if(day1>=1\
    \ || day1<=31&&!valid_month){\n            valid=false;\n        }\n        if(day3>=1\
    \ || day3<=30&&!valid_month){\n            valid=false;\n        }\n        if(day5>=1\
    \ || day5<=29&&!valid_month){\n            valid=false;\n        }\n        if(day7>=1\
    \ || day7<=28&&!valid_month){\n            valid=false;\n        }\n        if(day9>=1\
    \ || day9<=31&&!valid_month){\n            valid=false;\n        }\n        if(day11>=1\
    \ || day11<=30&&!valid_month){\n            valid=false;\n        }\n        if(month1>=1\
    \ || month1<=12&&!valid_month){\n            valid=false;\n        }\n       \
    \ if(month3>=1 || month3<=12&&!valid_month){\n            valid=false;\n     \
    \   }\n        if(month5>=1 || month5<=12&&!valid_month){\n            valid=false;\n\
    \        }\n        if(month7>=1 || month7<=12&&!valid_month){\n            valid=false;\n\
    \        }\n        if(month8>=1 || month8<=12&&!valid_month){\n            valid=false;\n\
    \        }\n        if(month10>=1 || month10<=12&&!valid_month){\n           \
    \ valid=false;\n        }\n        if(month12>=1 || month12<=12&&!valid_month){\n\
    \            valid=false;\n        }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnltga5wl.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpnltga5wl.cpp:87:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   87 | int main() {\n      |            ^\n/tmp/tmpnltga5wl.cpp:105:1:\
    \ error: expected \u2018}\u2019 at end of input\n  105 | }\n      | ^\n/tmp/tmpnltga5wl.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpnltga5wl.cpp:105:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  105 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv3hgg2b2: /tmp/tmpv3hgg2b2.cpp:23: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    if(date.length()==0){\n\
    \        return false;\n    }\n    auto first=date.substr(0,2);\n    auto last=date.substr(2,2);\n\
    \    for(int i=1;i<12;i++){\n        if(first==to_string(1+i) && last==to_string(i)){\n\
    \            return true;\n        }\n    }\n    for(int i=1;i<4;i++){\n     \
    \   if(first==to_string(1+i) && last==to_string(i)){\n            return true;\n\
    \        }\n    }\n    for(int i=1;i<6;i++){\n        if(first==to_string(1+i)\
    \ && last==to_string(i)){\n            return true;\n        }\n    }\n    for(int\
    \ i=1;i<9;i++){\n        if(first==to_string(1+i) && last==to_string(i)){\n  \
    \          return true;\n        }\n    }\n    for(int i=1;i<11;i++){\n      \
    \  if(first==to_string(1+i) && last==to_string(i)){\n            return true;\n\
    \        }\n    }\n    for(int i=1;i<12;i++){\n        if(first==to_string(1+i)\
    \ && last==to_string(i)){\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwngra90y.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwngra90y.cpp:24:19: error: \u2018to_string\u2019 was not declared in\
    \ this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   24 |     \
    \    if(first==to_string(1+i) && last==to_string(i)){\n      |               \
    \    ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwngra90y.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpwngra90y.cpp:29:19: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |         if(first==to_string(1+i) && last==to_string(i)){\n      | \
    \                  ^~~~~~~~~\n      |                   std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwngra90y.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n  "
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Implement your code here!\n    std::istringstream\
    \ iss(date);\n    std::string month;\n    int day = 0;\n    int year = 0;\n  \
    \  iss >> month >> day >> year;\n    int month = std::stoi(month);\n    int day\
    \ = std::stoi(day);\n    int year = std::stoi(year);\n    if (month < 1 || month\
    \ > 12 || day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n\
    \        if (day > 29)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuh3l0xo9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpuh3l0xo9.cpp:23:9: error: conflicting declaration \u2018int month\u2019\
    \n   23 |     int month = std::stoi(month);\n      |         ^~~~~\n/tmp/tmpuh3l0xo9.cpp:19:17:\
    \ note: previous declaration as \u2018std::string month\u2019\n   19 |     std::string\
    \ month;\n      |                 ^~~~~\n/tmp/tmpuh3l0xo9.cpp:24:9: error: redeclaration\
    \ of \u2018int day\u2019\n   24 |     int day = std::stoi(day);\n      |     \
    \    ^~~\n/tmp/tmpuh3l0xo9.cpp:20:9: note: \u2018int day\u2019 previously declared\
    \ here\n   20 |     int day = 0;\n      |         ^~~\n/tmp/tmpuh3l0xo9.cpp:24:28:\
    \ error: no matching function for call to \u2018stoi(int&)\u2019\n   24 |    \
    \ int day = std::stoi(day);\n      |                            ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpuh3l0xo9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6506:3: note:\
    \ candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\
    \n 6506 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n  \
    \    |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6506:22: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const string&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6506 |   stoi(const\
    \ string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6612:3: note: candidate: \u2018int std::__cxx11::stoi(const\
    \ wstring&, std::size_t*, int)\u2019\n 6612 |   stoi(const wstring& __str, size_t*\
    \ __idx = 0, int __base = 10)\n      |   ^~~~\n/usr/include/c+"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    size_t pos = 0;\n    int month;\n    int\
    \ day;\n    int year;\n\n    pos = date.find_first_not_of(\"-\");\n    if(pos\
    \ == string::npos) return false;\n\n    month = stoi(date.substr(0,pos).c_str());\n\
    \    day = stoi(date.substr(pos+1,2).c_str());\n    year = stoi(date.substr(pos+3,4).c_str());\n\
    \n    if(month<1 || month>12) return false;\n    if(day<1 || day>30) return false;\n\
    \    if(year<1000 || year>3000) return false;\n\n    while(month==2 || month==4\
    \ || month==6 || month==9 || month==11 || month==12 || month==0) {\n        month++;\n\
    \    }\n    \n    if(month<1 || month>12) return false;\n    if(day<1 || day>29)\
    \ return false;\n    if(year<1000 || year>3000) return false;\n\n    while(day==1\
    \ || day==3 || day==5 || day==7 || day==8 || day==10 || day==12) {\n        day++;\n\
    \    }\n    \n    if(day<1 || day>29) return false;\n    if(year<1000 || year>3000)\
    \ return false;\n\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xmhwsah.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp9xmhwsah.cpp:23:15: error: \u2018string\u2019 has not been declared\n\
    \   23 |     if(pos == string::npos) return false;\n      |               ^~~~~~\n\
    /tmp/tmp9xmhwsah.cpp:25:13: error: \u2018stoi\u2019 was not declared in this scope;\
    \ did you mean \u2018std::__cxx11::stoi\u2019?\n   25 |     month = stoi(date.substr(0,pos).c_str());\n\
    \      |             ^~~~\n      |             std::__cxx11::stoi\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9xmhwsah.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool status = true;\n    std::istringstream\
    \ ss(date);\n    std::string month;\n    std::string day;\n    std::string year;\n\
    \    int m, d, y;\n    char delimiter = '-';\n\n    ss >> m;\n    ss >> day >>\
    \ delimiter >> y;\n    ss >> month;\n    ss >> delimiter >> d;\n    ss >> year;\n\
    \n    if (m > 12 || m < 0) {\n        status = false;\n    }\n\n    if (d > 29\
    \ || d < 0) {\n        status = false;\n    }\n\n    if (y > 9999 || y < 0) {\n\
    \        status = false;\n    }\n\n    if (month.length() > 2 || month.length()\
    \ < 1) {\n        status = false;\n    }\n\n    if (status == true) {\n      \
    \  bool status = true;\n        if (month == '01' || month == '03' || month ==\
    \ '05' || month == '07' || month == '08' || month == '10' || month == '12') {\n\
    \            if (day > 31 || day < 0) {\n                status = false;\n   \
    \         }\n        }\n\n        if (month == '04' || month == '06' || month\
    \ == '09' || month == '11') {\n            if (day > 30 || day < 0) {\n      \
    \          status = false;\n            }\n        }\n\n        if (month == '02')\
    \ {\n            if (day > 29 || day < 0) {\n                status = false;\n\
    \            }\n        }\n    }\n    return status;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fjkl275.cpp:49:22: warning: multi-character character constant\
    \ [-Wmultichar]\n   49 |         if (month == '01' || month == '03' || month ==\
    \ '05' || month == '07' || month == '08' || month == '10' || month == '12') {\n\
    \      |                      ^~~~\n/tmp/tmp5fjkl275.cpp:49:39: warning: multi-character\
    \ character constant [-Wmultichar]\n   49 |         if (month == '01' || month\
    \ == '03' || month == '05' || month == '07' || month == '08' || month == '10'\
    \ || month == '12') {\n      |                                       ^~~~\n/tmp/tmp5fjkl275.cpp:49:56:\
    \ warning: multi-character character constant [-Wmultichar]\n   49 |         if\
    \ (month == '01' || month == '03' || month == '05' || month == '07' || month ==\
    \ '08' || month == '10' || month == '12') {\n      |                         \
    \                               ^~~~\n/tmp/tmp5fjkl275.cpp:49:73: warning: multi-character\
    \ character constant [-Wmultichar]\n   49 |         if (month == '01' || month\
    \ == '03' || month == '05' || month == '07' || month == '08' || month == '10'\
    \ || month == '12') {\n      |                                               \
    \                          ^~~~\n/tmp/tmp5fjkl275.cpp:49:90: warning: multi-character\
    \ character constant [-Wmultichar]\n   49 |         if (month == '01' || month\
    \ == '03' || month == '05' || month == '07' || month == '08' || month == '10'\
    \ || month == '12') {\n      |                                               \
    \                                           ^~~~\n/tmp/tmp5fjkl275.cpp:49:107:\
    \ warning: multi-character character constant [-Wmultichar]\n   49 |         if\
    \ (month == '01' || month == '03' || month == '05' || month == '07' || month ==\
    \ '08' || month == '10' || month == '12') {\n      |                         \
    \                                                                            \
    \      ^~~~\n/tmp/tmp5fjkl275.cpp:49:124: warning: multi-character character constant\
    \ [-Wmultichar]\n   49 |         if (month == '01' || month == '03' || month ==\
    \ '05' || month == '07' || month == '08' || month == '10' || month == '12') {\n\
    \      |     "
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream ss(date);\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    char c;\n    char\
    \ current_char;\n    do {\n        c = ss.peek();\n        current_char = (char)\
    \ c;\n        if (ss.fail()) {\n            break;\n        }\n        switch\
    \ (current_char) {\n            case '-':\n            case '/':\n           \
    \ case ' ':\n            case '\\n':\n            case '\\t':\n            case\
    \ '\\r':\n                ss.ignore();\n                break;\n            case\
    \ '0':\n            case '1':\n            case '2':\n            case '3':\n\
    \            case '4':\n            case '5':\n            case '6':\n       \
    \     case '7':\n            case '8':\n            case '9':\n            case\
    \ '-':\n            case '/':\n            case ' ':\n            case '\\t':\n\
    \            case '\\n':\n            case '\\r':\n                ss.ignore();\n\
    \                break;\n            case '0':\n            case '1':\n      \
    \      case '2':\n            case '3':\n            case '4':\n            case\
    \ '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                ss.ignore();\n                break;\n\
    \            case '.':\n                ss.ignore();\n                valid =\
    \ true;\n                break;\n            case '/':\n            case '-':\n\
    \            case '\\\\':\n                ss.ignore();\n                break;\n\
    \            default:\n                valid = false;\n                std::cout\
    \ << \"Invalid date string: \" << date << std::endl;\n                break;\n\
    \        }\n    } while (!valid);\n    \n    ss.get(c);\n    do {\n        c =\
    \ ss.peek();\n        current_char = (char) c;\n        if (ss.fail()) {\n   \
    \         break;\n        }\n        switch (current_char) {\n            case\
    \ ' ':\n            case '\\n':\n            case '\\t':\n            case '\\\
    r':\n                ss.ignore();\n                break;\n            case '.':\n\
    \                ss.ignore();\n                valid = true;\n               \
    \ break;\n            case '/':\n            case '-':\n            case '\\\\\
    ':\n                ss.ignore();\n                break;\n            default:\n\
    \                valid = false;\n                std::cout << \"Invalid date string:\
    \ \" << date << std::endl;\n                break;\n        }\n    } while (!valid);\n\
    \    \n    ss.ignore(1);\n    if (ss.peek() != EOF) {\n        std::cout << \"\
    Invalid date string: \" << date << std::endl;\n        return false;\n    }\n\
    \    \n    // read the day and month\n    while (!ss.eof()) {\n        c = ss.peek();\n\
    \        current_char = (char) c;\n        if (ss.fail()) {\n            break;\n\
    \        }\n        switch (current_char) {\n            case ' ':\n         \
    \   case '\\n':\n            case '\\t':\n            case '\\r':\n          \
    \      ss.ignore();\n                break;\n            case '.':\n         \
    \       ss.ignore();\n                valid = true;\n                break;\n\
    \            case '/':\n            case '-':\n            case '\\\\':\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmput8yyjts.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmput8yyjts.cpp:49:13: error: duplicate case value\n   49 |          \
    \   case '-':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:31:13: note: previously\
    \ used here\n   31 |             case '-':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:50:13:\
    \ error: duplicate case value\n   50 |             case '/':\n      |        \
    \     ^~~~\n/tmp/tmput8yyjts.cpp:32:13: note: previously used here\n   32 |  \
    \           case '/':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:51:13: error:\
    \ duplicate case value\n   51 |             case ' ':\n      |             ^~~~\n\
    /tmp/tmput8yyjts.cpp:33:13: note: previously used here\n   33 |             case\
    \ ' ':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:52:13: error: duplicate\
    \ case value\n   52 |             case '\\t':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:35:13:\
    \ note: previously used here\n   35 |             case '\\t':\n      |       \
    \      ^~~~\n/tmp/tmput8yyjts.cpp:53:13: error: duplicate case value\n   53 |\
    \             case '\\n':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:34:13:\
    \ note: previously used here\n   34 |             case '\\n':\n      |       \
    \      ^~~~\n/tmp/tmput8yyjts.cpp:54:13: error: duplicate case value\n   54 |\
    \             case '\\r':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:36:13:\
    \ note: previously used here\n   36 |             case '\\r':\n      |       \
    \      ^~~~\n/tmp/tmput8yyjts.cpp:57:13: error: duplicate case value\n   57 |\
    \             case '0':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:39:13:\
    \ note: previously used here\n   39 |             case '0':\n      |         \
    \    ^~~~\n/tmp/tmput8yyjts.cpp:58:13: error: duplicate case value\n   58 |  \
    \           case '1':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:40:13: note:\
    \ previously used here\n   40 |             case '1':\n      |             ^~~~\n\
    /tmp/tmput8yyjts.cpp:59:13: error: duplicate case value\n   59 |             case\
    \ '2':\n      |             ^~~~\n/tmp/tmput8yyjts.cpp:41:13: note: previously\
    \ used here\n   41 |             case '2':\n      | "
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n// Your code here\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpahind9zj: /tmp/tmpahind9zj.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[13];\n    memset(days,0,sizeof(days));\n\
    \n    // Step 1: Remove spaces\n    for (int i = 0; i < date.length(); i++) {\n\
    \        if (date[i] == ' ') {\n            date.erase(i,1);\n        }\n    }\n\
    \n    // Step 2: Validate day and month.\n    std::string month;\n    int day,\
    \ year;\n    std::sscanf(date.c_str(),\"%2d-%2d-%4d\",&day,&month,&year);\n  \
    \  if (!std::cin || day < 1 || day > 31 || (month[0] == '0' && month[1] == '4')\
    \ || (month[0] == '0' && month[1] == '6') || (month[0] == '0' && month[1] == '9')\
    \ || (month[0] == '1' && month[1] == '3') || (month[0] == '1' && month[1] == '5')\
    \ || (month[0] == '1' && month[1] == '7') || (month[0] == '1' && month[1] == '8')\
    \ || (month[0] == '1' && month[1] == '10') || (month[0] == '1' && month[1] ==\
    \ '12')) {\n        return false;\n    }\n\n    // Step 3: Validate year\n   \
    \ if (year < 1950 || year > 2020) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    return\
    \ 0;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0rybpj9z: /tmp/tmp0rybpj9z.cpp:23: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    struct tm date;\n    std::string date_string\
    \ = date;\n    char *pch;\n    bool ret = false;\n    int num_days = 0;\n    int\
    \ num_months = 0;\n    char month_str[6];\n\n    // TODO: Complete the code here!\n\
    \n    return ret;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphzfn4syz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphzfn4syz.cpp:17:15: error: declaration of \u2018tm date\u2019 shadows\
    \ a parameter\n   17 |     struct tm date;\n      |               ^~~~\n/tmp/tmphzfn4syz.cpp:18:31:\
    \ error: conversion from \u2018tm\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   18 |     std::string\
    \ date_string = date;\n      |                               ^~~~\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool flag =\
    \ false;\n    if (date.empty())\n        return false;\n    int day = std::stoi(date.substr(0,\
    \ 2));\n    int month = std::stoi(date.substr(2, 2));\n    int year = std::stoi(date.substr(4));\n\
    \    int total_days = year * 365 + month * 30 + day;\n    if (total_days > 29)\n\
    \        return false;\n    if (total_days > 31)\n        return false;\n    if\
    \ (month == 0 || month == 1)\n        return false;\n    if (month == 2 && day\
    \ >= 30)\n        return false;\n    if (month == 3 && day >= 31)\n        return\
    \ false;\n    if (month == 4 || month == 6 || month == 9 || month == 11)\n   \
    \     return false;\n    flag = true;\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfkytv8im: /tmp/tmpfkytv8im.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    auto p = std::sscanf(date.c_str(), \"%d-%d-%d\"\
    , &month, &day, &year);\n    if (p == 3){\n        if (month < 1 || month > 12){\n\
    \            return false;\n        }\n        if (day < 1 || day > 31){\n   \
    \         return false;\n        }\n        if (day < 1 || day > 30){\n      \
    \      return false;\n        }\n        if (month == 2 && day > 29){\n      \
    \      return false;\n        }\n        return true;\n    }\n    if (p == 2){\n\
    \        if (month < 1 || month > 12){\n            return false;\n        }\n\
    \        if (day < 1 || day > 30){\n            return false;\n        }\n   \
    \     if (month == 2 && day > 29){\n            return false;\n        }\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvnnu7o1.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcvnnu7o1.cpp:17:53: error: \u2018month\u2019 was not declared in this\
    \ scope\n   17 |     auto p = std::sscanf(date.c_str(), \"%d-%d-%d\", &month,\
    \ &day, &year);\n      |                                                     ^~~~~\n\
    /tmp/tmpcvnnu7o1.cpp:17:61: error: \u2018day\u2019 was not declared in this scope\n\
    \   17 |     auto p = std::sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n\
    \      |                                                             ^~~\n/tmp/tmpcvnnu7o1.cpp:17:67:\
    \ error: \u2018year\u2019 was not declared in this scope\n   17 |     auto p =\
    \ std::sscanf(date.c_str(), \"%d-%d-%d\", &month, &day, &year);\n      |     \
    \                                                              ^~~~\n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if(date.size() <= 0)\n        return false;\n\
    \    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n\
    \    int year = stoi(date.substr(6, 4));\n    if(month < 1 || month > 12)\n  \
    \      return false;\n    if(day < 1 || day > 31)\n        return false;\n   \
    \ if(year < 2000 || year > 2049)\n        return false;\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[12] = { 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31 };\n    int months[12] = { 0, 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31 };\n    int valid_days = days[months[date.substr(0, 2)]];\n\
    \    int valid_months = months[date.substr(2, 2)];\n    int valid_year = date.substr(4,\
    \ 4) - '0';\n    int d = stoi(date.substr(6, 2));\n    int m = stoi(date.substr(0,\
    \ 2));\n    return valid_days == d && valid_months == m && valid_year == date.substr(4,\
    \ 4) - '0';\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmne9oca.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmprmne9oca.cpp:18:74: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int months[12] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31 };\n      |                                                             \
    \             ^\n/tmp/tmprmne9oca.cpp:19:33: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   19 |     int valid_days = days[months[date.substr(0, 2)]];\n      |    \
    \                             ^\n/tmp/tmprmne9oca.cpp:20:30: error: no match for\
    \ \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   20 |     int valid_months = months[date.substr(2, 2)];\n      |        \
    \                      ^\n/tmp/tmprmne9oca.cpp:21:40: error: no match for \u2018\
    operator-\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   21 |     int valid_year = date.substr(4, 4) - '0';\n\
    \      |                      ~~~~~~~~~~~~~~~~~ ^ ~~~\n      |               \
    \                  |        |\n      |                                 |     \
    \   char\n      |                                 std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprmne9oca.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprmne9oca.cpp:21:42:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is n"
  stdout: ''
  timestamp: 1660133580
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::pair<int, int> date_split = date.substr(6,\
    \ 2).split('-');\n    int date_year = 0;\n    int date_month = 0;\n    int date_day\
    \ = 0;\n    if (date_split.first != 0)\n        date_year = std::stoi(date_split.first);\n\
    \    if (date_split.second != 0)\n        date_month = std::stoi(date_split.second);\n\
    \    if (date_split.third != 0)\n        date_day = std::stoi(date_split.third);\n\
    \    bool condition = false;\n    if (date_year != 0 && date_month != 0 && date_day\
    \ != 0) {\n        if (date_month > 0 && date_month < 13 && date_day > 0 && date_day\
    \ < 32) {\n            if (date_year < 1000 || date_year > 2020) {\n         \
    \       if (date_month == 0 && date_day == 0) {\n                    condition\
    \ = true;\n                } else {\n                    condition = false;\n\
    \                }\n            } else {\n                condition = true;\n\
    \            }\n        } else {\n            condition = false;\n        }\n\
    \    } else {\n        condition = false;\n    }\n    return condition;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovsu791s.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpovsu791s.cpp:17:56: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   17 |     std::pair<int, int> date_split\
    \ = date.substr(6, 2).split('-');\n      |                                   \
    \                     ^~~~~\n/tmp/tmpovsu791s.cpp:22:47: error: no matching function\
    \ for call to \u2018stoi(int&)\u2019\n   22 |         date_year = std::stoi(date_split.first);\n\
    \      |                                               ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpovsu791s.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6506:3: note:\
    \ candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\
    \n 6506 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n  \
    \    |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6506:22: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const string&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6506 |   stoi(const\
    \ string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6612:3: note: candidate: \u2018int std::__cxx11::stoi(const\
    \ wstring&, std::size_t*, int)\u2019\n 6612 |   stoi(const wstring& __str, size_t*\
    \ __idx = 0, int __base = 10)\n      |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6612:23:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ wstring&\u2019 {aka \u2018const std::__cxx11::basic_string<wchar_t>&\u2019}\n\
    \ 6612 |   stoi(const wstring& __str, size_t* __idx = 0, i"
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    int dd;\n    int\
    \ mm;\n    int yyyy;\n    int yy;\n\n    // Part 1: Validating date string\n \
    \   if (date == \"\") {\n        std::cout << \"Empty date string!\\n\";\n   \
    \ }\n\n    // Part 2: Validating date length\n    std::string::size_type p = date.size();\n\
    \    std::string s = date;\n    std::string sub;\n\n    if (p < 13) {\n      \
    \  std::cout << \"Date string too small!\\n\";\n    }\n\n    if (p > 19) {\n \
    \       std::cout << \"Date string too large!\\n\";\n    }\n\n    // Part 3: Validating\
    \ date format\n    // The format is mm-dd-yyyy where mm is month number and dd\
    \ is date number in year.\n    p = s.find(\"-\");\n    if (p < 1 || p > 3) {\n\
    \        std::cout << \"Invalid format!\\n\";\n    }\n\n    char ddc = s[0];\n\
    \    char mmc = s[1];\n\n    // Part 4: Validating month number\n    if (std::tolower(mmc)\
    \ < 'a' || std::tolower(mmc) > 'm' || std::tolower(mmc) > 'n' || std::tolower(mmc)\
    \ > 'z') {\n        std::cout << \"Invalid month number!\\n\";\n    }\n\n    mm\
    \ = std::tolower(mmc) - 'a' + 1;\n\n    if (mm < 1 || mm > 12) {\n        std::cout\
    \ << \"Invalid month number!\\n\";\n    }\n\n    // Part 5: Validating date number\n\
    \    yyyy = 0;\n    p = s.find(\"-\");\n    if (p != std::string::npos) {\n  \
    \      yy = std::stoi(s.substr(0, p));\n        if (yy < 1 || yy > 12) {\n   \
    \         std::cout << \"Invalid year number!\\n\";\n        }\n        yyyy =\
    \ yy;\n        p = s.find_first_of(\"-\", p + 1);\n        if (p != std::string::npos)\
    \ {\n            dd = std::stoi(s.substr(p + 1));\n            if (dd < 1 || dd\
    \ > 31) {\n                std::cout << \"Invalid date number!\\n\";\n       \
    \     }\n        }\n    }\n\n    // Part 6: Validating leap year\n    if (yyyy\
    \ + 100 > 2020) {\n        std::cout << \"Invalid leap year!\\n\";\n    }\n\n\
    \    valid = true;\n\n    return valid;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6x2pjky3: /tmp/tmp6x2pjky3.cpp:92: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Write your code here\n  std::cout << date\
    \ << std::endl;\n  std::string date_format(date.substr(0,2));\n  \n  if(date_format.substr(0,1)\
    \ != '-') return false;\n  if(date_format.size() != 4) date_format += '-';\n \
    \ if(date.size() != 8 ) return false;\n  if(date.at(3) != '-' || date.at(4) !=\
    \ '-' || date.at(5) != '-') return false;\n  if(date_format.at(1)+1 != date_format.at(3)\
    \ || date_format.at(5) != date_format.at(7)) return false;\n  if(date_format.at(0)\
    \ < '0' || date_format.at(0) > '3') return false;\n  if(date_format.at(2) < '1'\
    \ || date_format.at(2) > '12') return false;\n  if(date_format.at(4) < '1' ||\
    \ date_format.at(4) > '12') return false;\n  if(date_format.at(6) < '1' || date_format.at(6)\
    \ > '12') return false;\n  if(date_format.at(9) < '1' || date_format.at(9) > '2')\
    \ return false;\n  if(date_format.at(11) < '1' || date_format.at(11) > '2') return\
    \ false;\n  if(date_format.at(13) < '1' || date_format.at(13) > '2') return false;\n\
    \  if(date_format.at(14) < '1' || date_format.at(14) > '2') return false;\n  if(date_format.at(16)\
    \ < '1' || date_format.at(16) > '2') return false;\n  if(date_format.at(17) <\
    \ '1' || date_format.at(17) > '2') return false;\n  if(date_format.at(19) < '1'\
    \ || date_format.at(19) > '2') return false;\n  if(date_format.at(21) < '1' ||\
    \ date_format.at(21) > '2') return false;\n  if(date_format.at(23) < '1' || date_format.at(23)\
    \ > '2') return false;\n  if(date_format.at(25) < '1' || date_format.at(25) >\
    \ '2') return false;\n  if(date_format.at(27) < '1' || date_format.at(27) > '2')\
    \ return false;\n  if(date_format.at(29) < '1' || date_format.at(29) > '2') return\
    \ false;\n  if(date_format.at(31) < '1' || date_format.at(31) > '3') return false;\n\
    \  if(date_format.at(33) < '1' || date_format.at(33) > '2') return false;\n  if(date_format.at(35)\
    \ < '1' || date_format.at(35) > '2') return false;\n  if(date_format.at(37\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8olbmx2o.cpp:27:53: warning: multi-character character constant\
    \ [-Wmultichar]\n   27 |   if(date_format.at(2) < '1' || date_format.at(2) > '12')\
    \ return false;\n      |                                                     ^~~~\n\
    /tmp/tmp8olbmx2o.cpp:28:53: warning: multi-character character constant [-Wmultichar]\n\
    \   28 |   if(date_format.at(4) < '1' || date_format.at(4) > '12') return false;\n\
    \      |                                                     ^~~~\n/tmp/tmp8olbmx2o.cpp:29:53:\
    \ warning: multi-character character constant [-Wmultichar]\n   29 |   if(date_format.at(6)\
    \ < '1' || date_format.at(6) > '12') return false;\n      |                  \
    \                                   ^~~~\n/tmp/tmp8olbmx2o.cpp: In function \u2018\
    bool valid_date(std::string)\u2019:\n/tmp/tmp8olbmx2o.cpp:21:30: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   21 |   if(date_format.substr(0,1) != '-') return false;\n\
    \      |      ~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~\n      |                        |\
    \        |\n      |                        |        char\n      |            \
    \            std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8olbmx2o.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8olbmx2o.cpp:21:33:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   21 |   if(date_format.substr(0,1)\
    \ != '-') return false;\n      |                                 ^~~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 f"
  stdout: ''
  timestamp: 1660133580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream iss(date);\n    char\
    \ buf[64];\n    std::string year;\n    std::string month;\n    std::string day;\n\
    \n    iss >> month >> day >> year;\n\n    if (month.length() > 1 && month[0] ==\
    \ '0' || month.length() > 2 && month[0] == '1' && month[1] == '0' && month[2]\
    \ == '0')\n        month = month.substr(1, 2);\n\n    if (day.length() > 1 &&\
    \ day[0] == '0' || day.length() > 2 && day[0] == '1' && day[1] == '0' && day[2]\
    \ == '0')\n        day = day.substr(1, 2);\n\n    if (day.length() > 2 && day[0]\
    \ == '0' && day[1] == '1' && day[2] == '0')\n        day = day.substr(2, 2);\n\
    \n    if (month.length() > 2 && month[0] == '0' && month[1] == '3' && month[2]\
    \ == '0')\n        month = month.substr(2, 2);\n\n    if (year.length() > 4)\n\
    \        year = year.substr(0, 4);\n\n    std::istringstream iss2(year);\n   \
    \ std::string year2;\n    std::getline(iss2, year2, '-');\n    \n    if (iss >>\
    \ month >> day >> year)\n        return true;\n    else if (iss >> month >> day\
    \ >> year2 >> year) {\n        if (iss >> month >> day >> year)\n            return\
    \ true;\n        else\n            return false;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphbalc1vt: /tmp/tmphbalc1vt.cpp:56: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr9y9fuib: /tmp/tmpr9y9fuib.cpp:23: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpadlc86dk: /tmp/tmpadlc86dk.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Implement the logic here \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy0jw8b00: /tmp/tmpy0jw8b00.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  \n    // Write your code here\n    char month_day[][3]\
    \ = {\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\
    \ \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n    };\n    int num_days[12] =\
    \ {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int\
    \ valid_date = 0;\n    std::string day;\n    \n    int num_days_month = strtol(date.c_str(),\
    \ nullptr, 10);\n    \n    if (num_days_month > 31 || num_days_month < 1) {\n\
    \        valid_date = 1;\n    }\n    \n    int pos = 0;\n    std::string date_str[3];\n\
    \    for (int i = 1;i < 3;i++) {\n        date_str[i] = date.substr(pos);\n  \
    \      pos += date_str[i].size() + 1;\n    }\n    \n    for (int i = 0;i < 3;i++)\
    \ {\n        if (date_str[i].length() != 3 || month_day[i - 1][0] != '\\0') {\n\
    \            valid_date = 1;\n            break;\n        }\n    }\n    \n   \
    \ std::vector<std::string> days;\n    for (int i = 0;i < 12;i++) {\n        days.push_back(std::to_string(num_days[i]));\n\
    \    }\n    std::string month = date_str[1];\n    std::string day = date_str[2];\n\
    \    std::string year = date_str[0];\n    std::string days_str = days[1];\n  \
    \  \n    int day_pos = 0;\n    for (int i = 1;i < 3;i++) {\n        day_pos +=\
    \ days[i].size() + 1;\n    }\n    \n    int month_pos = 0;\n    for (int i = 1;i\
    \ < 3;i++) {\n        month_pos += month_day[i - 1].size() + 1;\n    }\n    \n\
    \    int year_pos = 0;\n    for (int i = 0;i < 3;i++) {\n        year_pos += (date_str[i].size()\
    \ + 1);\n    }\n    \n    if (num_days_month < 1 || num_days_month > 31) {\n \
    \       valid_date = 1;\n    }\n    \n    if (num_days_month == 1 || num_days_month\
    \ == 2) {\n        if (days_str.length() != 2 || days_str[0] != '0' || days_str[1]\
    \ != '1') {\n            valid_date = 1;\n        }\n    }\n    \n    if (num_days_month\
    \ == 3 || num_days_month == 4) {\n        if (days_str.length() != 2 || days_str[0]\
    \ != '0' || days_str[1] != '1') {\n            valid_date = 1;\n        }\n  \
    \  }\n    \n    if (num_days_month == 5 || num_days_month == 6) {\n        if\
    \ (days_str.length() != 2 || days_str[0] != '0' || days_str[1] != '1') {\n   \
    \         valid_date = 1;\n        }\n    }\n    \n    if (num_days_month == 7\
    \ || num_days_month == 8\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_b09jmz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpt_b09jmz.cpp:20:9: error: initializer-string for array of chars is\
    \ too long [-fpermissive]\n   20 |         \"Jan\", \"Feb\", \"Mar\", \"Apr\"\
    , \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n  \
    \    |         ^~~~~\n/tmp/tmpt_b09jmz.cpp:20:16: error: initializer-string for\
    \ array of chars is too long [-fpermissive]\n   20 |         \"Jan\", \"Feb\"\
    , \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\"\
    , \"Dec\",\n      |                ^~~~~\n/tmp/tmpt_b09jmz.cpp:20:23: error: initializer-string\
    \ for array of chars is too long [-fpermissive]\n   20 |         \"Jan\", \"Feb\"\
    , \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\"\
    , \"Dec\",\n      |                       ^~~~~\n/tmp/tmpt_b09jmz.cpp:20:30: error:\
    \ initializer-string for array of chars is too long [-fpermissive]\n   20 |  \
    \       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\"\
    , \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n      |                              ^~~~~\n\
    /tmp/tmpt_b09jmz.cpp:20:37: error: initializer-string for array of chars is too\
    \ long [-fpermissive]\n   20 |         \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"\
    May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n      |\
    \                                     ^~~~~\n/tmp/tmpt_b09jmz.cpp:20:44: error:\
    \ initializer-string for array of chars is too long [-fpermissive]\n   20 |  \
    \       \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\"\
    , \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n      |                               \
    \             ^~~~~\n/tmp/tmpt_b09jmz.cpp:20:51: error: initializer-string for\
    \ array of chars is too long [-fpermissive]\n   20 |         \"Jan\", \"Feb\"\
    , \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\"\
    , \"Dec\",\n      |                                                   ^~~~~\n\
    /tmp/tmpt_b09jmz.cpp:20:58: error: initializer-string for array of chars is too\
    \ long [-fpermissive]\n   20 |         \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"\
    May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n      |\
    \                                                          ^~~~~\n/tmp/tm"
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    assert(date != \"\");\n    bool valid =\
    \ false;\n    int day, month, year;\n    sscanf(date.c_str(), \"%d-%d-%d\", &day,\
    \ &month, &year);\n    if(day > 0 && month > 0 && month < 13 && day > 0 && day\
    \ < 31) {\n        valid = true;\n    }\n    if(day > 0 && month > 0 && month\
    \ < 13 && day > 0 && day < 30) {\n        valid = true;\n    }\n    if(day > 0\
    \ && month > 0 && month < 13 && day > 0 && day < 29) {\n        valid = true;\n\
    \    }\n    if(day > 0 && month > 0 && month < 13 && day > 0 && day < 28) {\n\
    \        valid = true;\n    }\n    if(day > 0 && month > 0 && month < 13 && day\
    \ > 0 && day < 31) {\n        valid = true;\n    }\n    if(day > 0 && month >\
    \ 0 && month < 13 && day > 0 && day < 30) {\n        valid = true;\n    }\n  \
    \  if(day > 0 && month > 0 && month < 13 && day > 0 && day < 29) {\n        valid\
    \ = true;\n    }\n    if(day > 0 && month > 0 && month < 13 && day > 0 && day\
    \ < 28) {\n        valid = true;\n    }\n    if(day > 0 && month > 0 && month\
    \ < 13 && day > 0 && day < 31) {\n        valid = true;\n    }\n    if(day > 0\
    \ && month > 0 && month < 13 && day > 0 && day < 30) {\n        valid = true;\n\
    \    }\n    if(day > 0 && month > 0 && month < 13 && day > 0 && day < 29) {\n\
    \        valid = true;\n    }\n    if(day > 0 && month > 0 && month < 13 && day\
    \ > 0 && day < 28) {\n        valid = true;\n    }\n    if(day > 0 && month >\
    \ 0 && month < 13 && day > 0 && day < 31) {\n        valid = true;\n    }\n  \
    \  if(day > 0 && month > 0 && month < 13 && day > 0 && day < 30) {\n        valid\
    \ = true;\n    }\n    if(day > 0 && month > 0 && month < 13 && day > 0 && day\
    \ < 29) {\n        valid = true;\n    }\n    if(day > 0 && month > 0 && month\
    \ < 13 && day > 0 && day < 28) {\n        valid = true;\n    }\n    if(day > 0\
    \ && month > 0 && month < 13 && day > 0 && day < 31) {\n        valid = true;\n\
    \    }\n    if(day > 0 && month > 0 && month < 13 && day > 0 && day < 30) {\n\
    \        valid = true;\n    }\n    if(day > 0 && month > 0 && month < 13 && day\
    \ > 0 && day < 29) {\n        valid = true;\n    }\n    if(day \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn83il93j.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpn83il93j.cpp:78:11: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   78 |     if(day\n      |       ~   ^\n      |           )\n   79 |\
    \ }\n      | ~          \n/tmp/tmpn83il93j.cpp:79:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmpn83il93j.cpp:79:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   79 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here.\n    if (date.empty()\
    \ || date.size() != 10) {\n        return false;\n    }\n    int days[12] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    std::string month = date.substr(0,\
    \ 2);\n    std::string year = date.substr(3, 4);\n    if (month.length() != 2\
    \ || month[0] < '0' || month[1] > '2') {\n        return false;\n    }\n    int\
    \ count = 0;\n    for (int i = 0; i < 12; i++) {\n        if (month[i] == '0')\
    \ {\n            count += days[i];\n        } else if (month[i] == '1') {\n  \
    \          count += days[i + 12];\n        } else if (month[i] == '3') {\n   \
    \         count += days[i + 24];\n        } else if (month[i] == '5') {\n    \
    \        count += days[i + 36];\n        } else if (month[i] == '7') {\n     \
    \       count += days[i + 52];\n        } else if (month[i] == '8') {\n      \
    \      count += days[i + 60];\n        } else if (month[i] == '10') {\n      \
    \      count += days[i + 72];\n        } else if (month[i] == '12') {\n      \
    \      count += days[i + 84];\n        }\n    }\n    if (count < 1 || count >\
    \ 31) {\n        return false;\n    }\n    int valid = 0;\n    for (int i = 2;\
    \ i < 13; i++) {\n        if (month[i] == '0') {\n            valid += days[i];\n\
    \        }\n    }\n    if (month[1] == '2') {\n        valid += days[2];\n   \
    \ }\n    if (valid > 29) {\n        return false;\n    }\n    int year = stoi(year);\n\
    \    if (year < 1000 || year > 9999) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxb78lxpl.cpp:41:32: warning: multi-character character constant\
    \ [-Wmultichar]\n   41 |         } else if (month[i] == '10') {\n      |     \
    \                           ^~~~\n/tmp/tmpxb78lxpl.cpp:43:32: warning: multi-character\
    \ character constant [-Wmultichar]\n   43 |         } else if (month[i] == '12')\
    \ {\n      |                                ^~~~\n/tmp/tmpxb78lxpl.cpp: In function\
    \ \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpxb78lxpl.cpp:62:9: error:\
    \ conflicting declaration \u2018int year\u2019\n   62 |     int year = stoi(year);\n\
    \      |         ^~~~\n/tmp/tmpxb78lxpl.cpp:23:17: note: previous declaration\
    \ as \u2018std::string year\u2019\n   23 |     std::string year = date.substr(3,\
    \ 4);\n      |                 ^~~~\n/tmp/tmpxb78lxpl.cpp:63:14: error: no match\
    \ for \u2018operator<\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n   63 |     if (year\
    \ < 1000 || year > 9999) {\n      |         ~~~~ ^ ~~~~\n      |         |   \
    \   |\n      |         |      int\n      |         std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxb78lxpl.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpxb78lxpl.cpp:63:16:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   63\
    \ |     if (year < 1000 || year > 9999) {\n      |                ^~~~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxb78lxp"
  stdout: ''
  timestamp: 1660133581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream ins(date);\n    char\
    \ month = 0;\n    int days = 0;\n    char year = 0;\n    int index = 0;\n    while\
    \ (ins >> month >> days >> year) {\n        switch (month) {\n        case '1':\
    \ case '3': case '5': case '7': case '8': case '10': case '12':\n            if\
    \ (days < 1 || days > 31) return false;\n            break;\n        case '4':\
    \ case '6': case '9': case '11':\n            if (days < 1 || days > 30) return\
    \ false;\n            break;\n        case '2':\n            if (days < 1 || days\
    \ > 29) return false;\n            break;\n        default:\n            break;\n\
    \        }\n        switch (month) {\n        case '01':\n        case '03':\n\
    \        case '05':\n        case '07':\n        case '08':\n        case '10':\n\
    \        case '12':\n            break;\n        case '04':\n        case '06':\n\
    \        case '09':\n        case '11':\n            break;\n        case '02':\n\
    \            break;\n        default:\n            break;\n        }\n    }\n\
    \    if (index < 3 || month < 1 || month > 12) return false;\n    if (index <\
    \ 3 || month == 2 && (year < 1000 || year > 2020)) return false;\n    if (index\
    \ == 2 && year > 2020) return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjlfm9q28: /tmp/tmpjlfm9q28.cpp:63: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream iss(date);\n    std::string\
    \ month;\n    std::string day;\n    std::string year;\n    \n    // Read day,\
    \ month and year\n    iss >> day >> month >> year;\n    \n    // Check all the\
    \ conditions\n    if (day.length() == 1 || day.length() == 2 || day.length() ==\
    \ 3 || day.length() == 4 || day.length() == 5 || day.length() == 6 || day.length()\
    \ == 7 || day.length() == 8 || day.length() == 9 || day.length() == 10 || day.length()\
    \ == 11 || day.length() == 12 || day.length() == 13) {\n        // Check month\n\
    \        if (month.length() == 1 || month.length() == 3 || month.length() == 5\
    \ || month.length() == 7 || month.length() == 8 || month.length() == 10 || month.length()\
    \ == 12) {\n            // Check year\n            if (year.length() == 4 || year.length()\
    \ == 6) {\n                return true;\n            }\n        }\n    }\n   \
    \ \n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa0u8fwap: /tmp/tmpa0u8fwap.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n   string months = {\"01\",\"02\",\"03\",\"\
    04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"}; \n   string days\
    \ = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"\
    11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"\
    22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n   string\
    \ years = date[5:7];\n   int month_days = months.size();\n   int day_days = days.size();\n\
    \   int year_days = years.size();\n   \n   for(int i = 0; i<11; i++)\n   {\n \
    \     if(i<1)\n      {\n         if(days<1)\n         {\n            if(days<2)\n\
    \            {\n               return false;\n            }\n         }\n    \
    \  }\n      else\n      {\n         if(days<1)\n         {\n            if(days<2)\n\
    \            {\n               return false;\n            }\n         }\n    \
    \  }\n   }\n   \n   for(int i = 0; i<11; i++)\n   {\n      if(i<1)\n      {\n\
    \         if(days<1)\n         {\n            if(days<2)\n            {\n    \
    \           return false;\n            }\n         }\n      }\n      else\n  \
    \    {\n         if(days<1)\n         {\n            if(days<2)\n            {\n\
    \               return false;\n            }\n         }\n      }\n   }\n   \n\
    \   for(int i = 0; i<11; i++)\n   {\n      if(i<1)\n      {\n         if(days<1)\n\
    \         {\n            if(days<2)\n            {\n               return false;\n\
    \            }\n         }\n      }\n      else\n      {\n         if(days<1)\n\
    \         {\n            if(days<2)\n            {\n               return false;\n\
    \            }\n         }\n      }\n   }\n   \n   for(int i = 0; i<11; i++)\n\
    \   {\n      if(i<1)\n      {\n         if(days<1)\n         {\n            if(days<2)\n\
    \            {\n               return false;\n            }\n         }\n    \
    \  }\n      else\n      {\n         if(days<1)\n         {\n            if(days<2)\n\
    \            {\n               return false;\n            }\n         }\n    \
    \  }\n   }\n   \n   for(int i = 0; i<11; i++)\n   {\n      if(i<1)\n      {\n\
    \         if(days<1)\n         {\n            if(days<2)\n            {\n    \
    \           return false;\n            }\n         }\n      }\n      else\n  \
    \    {\n         if(days<1)\n         {\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgw5yg23.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpfgw5yg23.cpp:17:4: error: \u2018string\u2019 was not declared in this\
    \ scope\n   17 |    string months = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\"\
    ,\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n      |    ^~~~~~\n/tmp/tmpfgw5yg23.cpp:17:4:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfgw5yg23.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfgw5yg23.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpfgw5yg23.cpp:18:10: error: expected \u2018;\u2019 before \u2018days\u2019\
    \n   18 |    string days = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"\
    08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"\
    19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"\
    30\",\"31\"};\n      |          ^~~~~\n      |          ;\n/tmp/tmpfgw5yg23.cpp:19:10:\
    \ error: expected \u2018;\u2019 before \u2018years\u2019\n   19 |    string years\
    \ = date[5:7];\n      |          ^~~~~~\n      |          ;\n/tmp/tmpfgw5yg23.cpp:20:21:\
    \ error: \u2018"
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    int day,month,year;\n\
    \    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if(month<1\
    \ || month>12){\n        return false;\n    }\n    if(day<1 || day>31){\n    \
    \    return false;\n    }\n    if(year<1 || year>2020){\n        return false;\n\
    \    }\n    if(month==2 && day<31){\n        return false;\n    }\n    if(month==2\
    \ && day>29){\n        return false;\n    }\n    if(month==1 && day>30){\n   \
    \     return false;\n    }\n    if(month==1 && day<1){\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph03qzohc: /tmp/tmph03qzohc.cpp:46: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    if (date.empty()) { return false;\
    \ }\n    \n    int month_check = (date.length() < 2 ? 0 : (date.at(0) - '0'));\
    \ // month - 1 to month_check\n    int day_check = (date.length() < 3 ? 0 : (date.at(2)\
    \ - '0')); // day - 0 to day_check\n    int year_check = (date.length() < 4 ?\
    \ 0 : (date.at(4) - '0')); // year - 0 to year_check\n    \n    if (day_check\
    \ < 1 || day_check > 31) { return false; }\n    \n    // month 1\n    if (month_check\
    \ < 1 || month_check > 12) { return false; }\n    \n    // month 2\n    if (month_check\
    \ == 2 && day_check < 1 || day_check > 29) { return false; }\n    \n    // month\
    \ 3\n    if (month_check == 3 && day_check < 1 || day_check > 31) { return false;\
    \ }\n    \n    // month 4\n    if (month_check == 4 && day_check < 1 || day_check\
    \ > 30) { return false; }\n    \n    // month 5\n    if (month_check == 5 && day_check\
    \ < 1 || day_check > 31) { return false; }\n    \n    // month 6\n    if (month_check\
    \ == 6 && day_check < 1 || day_check > 31) { return false; }\n    \n    // month\
    \ 7\n    if (month_check == 7 && day_check < 1 || day_check > 31) { return false;\
    \ }\n    \n    // month 8\n    if (month_check == 8 && day_check < 1 || day_check\
    \ > 31) { return false; }\n    \n    // month 9\n    if (month_check == 9 && day_check\
    \ < 1 || day_check > 30) { return false; }\n    \n    // month 10\n    if (month_check\
    \ == 10 && day_check < 1 || day_check > 31) { return false; }\n    \n    // month\
    \ 11\n    if (month_check == 11 && day_check < 1 || day_check > 30) { return false;\
    \ }\n    \n    // month 12\n    if (month_check == 12 && day_check < 1 || day_check\
    \ > 31) { return false; }\n    \n    // year 1900 onwards\n    if (year_check\
    \ < 1900 || year_check > 2099) { return false; }\n    \n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjkw3nn8p: /tmp/tmpjkw3nn8p.cpp:69: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  if(date.length() == 0)\n    return false;\n\
    \  int day;\n  int month;\n  int year;\n  bool isLeap = false;\n  std::smatch\
    \ matches;\n  std::regex date_regex(\"(\\\\d{2}-\\\\d{2}-\\\\d{4})\");\n  // Use\
    \ smatch to find the date string in the given string.\n  if(std::regex_search(date,\
    \ matches, date_regex))\n  {\n    day = std::stoi(matches[1].str().substr(1, 2));\n\
    \    month = std::stoi(matches[1].str().substr(3, 2));\n    year = std::stoi(matches[1].str().substr(6,\
    \ 4));\n    if(month < 1 || month > 12)\n      return false;\n    if(day < 1 ||\
    \ day > 31)\n      return false;\n    if(month == 4 || month == 6 || month ==\
    \ 9 || month == 11)\n      isLeap = true;\n    else if(month == 2)\n      isLeap\
    \ = false;\n    else\n      return false;\n  }\n  else\n    return false;\n\n\
    \  if(day < 1)\n    return false;\n  if(day > 31)\n    return false;\n\n  if(isLeap)\n\
    \  {\n    if(day > 29)\n      return false;\n  }\n  else\n  {\n    if(day > 30)\n\
    \      return false;\n  }\n\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfc7nze1c: /tmp/tmpfc7nze1c.cpp:69: int main(): Assertion `candidate(("01-01-2007"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    // Print the\
    \ date in YYYY-MM-DD format\n    std::cout<<date<<std::endl;\n    // Declare a\
    \ struct for date validation logic\n    struct date {\n        int month;\n  \
    \      int day;\n        int year;\n    };\n    // Declare a date validation object\
    \ of struct type\n    date dateVal;\n    // Declare a date validation object of\
    \ struct type\n    date dateVal2;\n    // Read a complete date string from standard\
    \ input as a string\n    // and store the value of it into dateStr\n    std::cin>>dateStr;\n\
    \    // Parse the date string into date\n    dateVal.year = std::stoi(date.substr(0,4));\n\
    \    dateVal.month = std::stoi(date.substr(4,2));\n    dateVal.day = std::stoi(date.substr(6,2));\n\
    \    // Use the below function if your input date string is in YYYY-MM-DD format\n\
    \    // dateVal2.year = std::stoi(date.substr(0,4));\n    // dateVal2.month =\
    \ std::stoi(date.substr(4,2));\n    // dateVal2.day = std::stoi(date.substr(6,2));\n\
    \    // Convert the date string into an integer and store it in num\n    num =\
    \ std::stoi(dateStr);\n    // Declare an array for storing month names\n    std::string\
    \ months[] = {\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"\
    July\",\n\"August\",\"September\",\"October\",\"November\",\"December\"};\n  \
    \  // Check whether the date is valid for month 1 or 3\n    if (dateVal.month\
    \ == 1) {\n        // If the date is valid for month 1, check if it is leap year\
    \ or not\n        if (dateVal.year % 400 == 0)\n            isLeapYear = true;\n\
    \        else\n            isLeapYear = false;\n        // If year is valid for\
    \ month 1, check if number of days is valid or not\n        if (dateVal.day >\
    \ 0 && dateVal.day <= 31 && isLeapYear == true)\n            isValid = true;\n\
    \        else if (dateVal.day > 0 && dateVal.day <= 31 && isLeapYear == false)\n\
    \            isValid = false;\n        // If year is valid for month 1, check\
    \ if number of days is valid or not\n        else if (dateVal.day > 0 && dateVal.day\
    \ <= 29 && isLeapYear == false)\n            isValid = false;\n        // If year\
    \ is not valid for month 1, check if number of days is valid or not\n        else\
    \ if (dateVal.day > 0 && dateVal.day <= 30 && isLeapYear == true)\n          \
    \  isValid = false;\n        // If year is not valid for month 1, check if number\
    \ of days is valid or not\n        else if (dateVal.day > 0 && dateVal.day <=\
    \ 29 && isLeapYear == false)\n            isValid = false;\n        else\n   \
    \         \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0fikcvq.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpz0fikcvq.cpp:21:12: error: declaration of \u2018struct valid_date(std::string)::date\u2019\
    \ shadows a parameter\n   21 |     struct date {\n      |            ^~~~\n/tmp/tmpz0fikcvq.cpp:32:15:\
    \ error: \u2018dateStr\u2019 was not declared in this scope\n   32 |     std::cin>>dateStr;\n\
    \      |               ^~~~~~~\n/tmp/tmpz0fikcvq.cpp:34:34: error: expected primary-expression\
    \ before \u2018.\u2019 token\n   34 |     dateVal.year = std::stoi(date.substr(0,4));\n\
    \      |                                  ^\n/tmp/tmpz0fikcvq.cpp:35:35: error:\
    \ expected primary-expression before \u2018.\u2019 token\n   35 |     dateVal.month\
    \ = std::stoi(date.substr(4,2));\n      |                                   ^\n\
    /tmp/tmpz0fikcvq.cpp:36:33: error: expected primary-expression before \u2018.\u2019\
    \ token\n   36 |     dateVal.day = std::stoi(date.substr(6,2));\n      |     \
    \                            ^\n/tmp/tmpz0fikcvq.cpp:42:5: error: \u2018num\u2019\
    \ was not declared in this scope; did you mean \u2018enum\u2019?\n   42 |    \
    \ num = std::stoi(dateStr);\n      |     ^~~\n      |     enum\n/tmp/tmpz0fikcvq.cpp:50:13:\
    \ error: \u2018isLeapYear\u2019 was not declared in this scope\n   50 |      \
    \       isLeapYear = true;\n      |             ^~~~~~~~~~\n/tmp/tmpz0fikcvq.cpp:52:13:\
    \ error: \u2018isLeapYear\u2019 was not declared in this scope\n   52 |      \
    \       isLeapYear = false;\n      |             ^~~~~~~~~~\n/tmp/tmpz0fikcvq.cpp:54:53:\
    \ error: \u2018isLeapYear\u2019 was not declared in this scope\n   54 |      \
    \   if (dateVal.day > 0 && dateVal.day <= 31 && isLeapYear == true)\n      | \
    \                                                    ^~~~~~~~~~\n/tmp/tmpz0fikcvq.cpp:55:13:\
    \ error: \u2018isValid\u2019 was not declared in this scope\n   55 |         \
    \    isValid = true;\n      |             ^~~~~~~\n/tmp/tmpz0fikcvq.cpp:57:13:\
    \ error: \u2018isValid\u2019 was not declared in this scope\n   57 |         \
    \    isValid = false;\n      |             ^~~~~~~\n/tmp/tmpz0fikcvq.cpp:60:13:\
    \ error: \u2018isValid\u2019 was not declared in this scope\n   60 |         \
    \    isValid = false;\n      "
  stdout: ''
  timestamp: 1660133582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    std::istringstream\
    \ iss(date);\n    char month;\n    int day, year, i;\n    while(iss >> month >>\
    \ day >> year) {\n        i = month - '0';\n        if(i==1 || i==3 || i==5 ||\
    \ i==7 || i==8 || i==10 || i==12)\n            if((day<1 || day>31) && (i==1 ||\
    \ i==3 || i==5 || i==7 || i==8 || i==10 || i==12))\n                if((day<1\
    \ || day>30) && (i==4 || i==6 || i==9 || i==11))\n                    if((day<1\
    \ || day>29))\n                        if((i==2) && (month>0 && month<12))\n \
    \                           return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpnfra1m.cpp:31:5: error: expected unqualified-id before \u2018\
    return\u2019\n   31 |     return false;\n      |     ^~~~~~\n/tmp/tmpvpnfra1m.cpp:32:1:\
    \ error: expected declaration before \u2018}\u2019 token\n   32 | }\n      | ^\n\
    /tmp/tmpvpnfra1m.cpp: In function \u2018bool valid_date(std::string)\u2019:\n\
    /tmp/tmpvpnfra1m.cpp:30:5: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   30 |     }\n      |     ^\n"
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here.\n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc4nm65vq: /tmp/tmpc4nm65vq.cpp:22: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Write your code here\n  std::cout << date\
    \ << std::endl;\n  std::stringstream ss;\n  ss << date;\n  std::string month,\
    \ day, year;\n  ss >> month >> day >> year;\n  int n = 0;\n  int sum = 0;\n  for\
    \ (int i = 0; i < month.length(); i++) {\n    n = (int) month.at(i);\n    if (n\
    \ == 10)\n      sum++;\n    else if (n == 11)\n      sum++;\n    else if (n ==\
    \ 12)\n      sum++;\n    else {\n      sum += n % 10;\n    }\n  }\n  if (sum <\
    \ 1 || sum > 31) return false;\n  if (month.length() < 2 || month.length() > 12)\
    \ return false;\n  if (day < 1 || day > 30) return false;\n  if (day < 1 || day\
    \ > 29) return false;\n  if (month.at(0) == 0 || month.at(2) == 0 || month.at(4)\
    \ == 0) return false;\n  if (month.at(1) == 1\n      || month.at(3) == 1\n   \
    \   || month.at(5) == 1\n      || month.at(7) == 1\n      || month.at(8) == 1\n\
    \      || month.at(10) == 1\n      || month.at(12) == 1) return false;\n  if (month.at(1)\
    \ == 3\n      || month.at(3) == 3\n      || month.at(5) == 3\n      || month.at(7)\
    \ == 3\n      || month.at(8) == 3\n      || month.at(10) == 3\n      || month.at(12)\
    \ == 3) return false;\n  std::stringstream ss1, ss2, ss3, ss4, ss5, ss6;\n  ss1\
    \ << year;\n  ss2 << month << \"-\" << day;\n  ss3 << year;\n  ss4 << month <<\
    \ \"-\" << day - 1;\n  ss5 << year;\n  ss6 << month << \"-\" << day - 30;\n  std::string\
    \ s1, s2, s3, s4, s5, s6;\n  ss1 >> s1;\n  ss2 >> s2;\n  ss3 >> s3;\n  ss4 >>\
    \ s4;\n  ss5 >> s5;\n  ss6 >> s6;\n  int year1 = atoi(s1.c_str());\n  int month1\
    \ = atoi(s2.c_str());\n  int day1 = atoi(s3.c_str());\n  int year2 = atoi(s4.c_str());\n\
    \  int month2 = atoi(s5.c_str());\n  int day2 = atoi(s6.c_str());\n  int year3\
    \ = year1 * 10000 + month1 * 100 + day1;\n  int year4 = year2 * 10000 + month2\
    \ * 100 + day2;\n  if (year3 > year4) std::swap(year1, year3);\n  if (year3 <\
    \ \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dp8wcma.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8dp8wcma.cpp:39:11: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   39 |   if (day < 1 || day > 30) return false;\n   \
    \   |       ~~~ ^ ~\n      |       |     |\n      |       |     int\n      | \
    \      std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8dp8wcma.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8dp8wcma.cpp:39:13:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   39\
    \ |   if (day < 1 || day > 30) return false;\n      |             ^\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8dp8wcma.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8dp8wcma.cpp:39:13: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |   if (day < 1 || day > 30) return false;\n    \
    \  |             "
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO implement\n    return false;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpycnzc_pp: /tmp/tmpycnzc_pp.cpp:22: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write your date validation function\
    \ here\n    if (date == \"\"){\n        return false;\n    }\n    \n    int day_count;\n\
    \    int month;\n    int year;\n    bool flag = true;\n    std::istringstream\
    \ iss(date);\n    char ch;\n    iss.ignore();\n    iss >> month >> ch >> day_count\
    \ >> ch >> year;\n    if (ch != \"/\"){\n        flag = false;\n    }\n    if\
    \ (month > 12 || month < 1) {\n        flag = false;\n    }\n    if (day_count\
    \ > 31 || day_count < 1) {\n        flag = false;\n    }\n    if (day_count >\
    \ 30 || day_count < 1) {\n        flag = false;\n    }\n    if (month > 12 ||\
    \ month < 1) {\n        flag = false;\n    }\n    if (flag == false) {\n     \
    \   std::cout << \"Invalid Date\";\n    }\n    else {\n        return true;\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5efiehf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_5efiehf.cpp:30:15: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   30 |     if (ch != \"/\"){\n      |         \
    \      ^~~\n/tmp/tmp_5efiehf.cpp:51:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   51 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    assert(date\
    \ != \"\");\n    \n    int mLength = date.size();\n    std::string months = {\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days =\
    \ {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"29\", \"30\", \"\
    31\"};\n    std::string months = {\"04\", \"06\", \"09\", \"11\"};\n    \n   \
    \ int day, month = 0;\n    int yYear = stoi(date.substr(6, 2));\n    \n    if((mLength\
    \ > 6) && (mLength < 13)) {\n        day = stoi(date.substr(3, 2));\n        month\
    \ = stoi(date.substr(0, 2));\n    }\n    \n    if((mLength > 12) && (mLength <\
    \ 17)) {\n        day = stoi(date.substr(3, 2));\n        month = stoi(date.substr(0,\
    \ 2));\n    }\n    \n    if((mLength > 17) && (mLength < 21)) {\n        day =\
    \ stoi(date.substr(3, 2));\n        month = stoi(date.substr(0, 2));\n    }\n\
    \    \n    if((mLength > 21) && (mLength < 24)) {\n        day = stoi(date.substr(3,\
    \ 2));\n        month = stoi(date.substr(0, 2));\n    }\n    \n    if((mLength\
    \ > 24) && (mLength < 27)) {\n        day = stoi(date.substr(3, 2));\n       \
    \ month = stoi(date.substr(0, 2));\n    }\n    \n    if((mLength > 27) && (mLength\
    \ < 30)) {\n        day = stoi(date.substr(3, 2));\n        month = stoi(date.substr(0,\
    \ 2));\n    }\n    \n    if((mLength > 30) && (mLength < 33)) {\n        day =\
    \ stoi(date.substr(3, 2));\n        month = stoi(date.substr(0, 2));\n    }\n\
    \    \n    if((mLength > 33) && (mLength < 36)) {\n        day = stoi(date.substr(3,\
    \ 2));\n        month = stoi(date.substr(0, 2));\n    }\n    \n    if((mLength\
    \ > 36) && (mLength < 39)) {\n        day = stoi(date.substr(3, 2));\n       \
    \ month = stoi(date.substr(0, 2));\n    }\n    \n    if((mLength > 39) && (mLength\
    \ < 41)) {\n        day = stoi(date.substr(3, 2));\n        month = stoi(date.substr(0,\
    \ 2));\n    }\n    \n    if((mLength > 41) && (mLength < 44)) {\n        day =\
    \ stoi(date.substr(3, 2));\n        month = stoi(date.substr(0, 2));\n    }\n\
    \    \n    if((mLength > 44) && (mLength < 47)) {\n        day = stoi(date.substr(3,\
    \ 2));\n        month = stoi(date.substr(0, 2));\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pf_kfoi.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_pf_kfoi.cpp:21:67: error: could not convert \u2018{\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\"}\u2019 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   21 |     std::string months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"\
    10\", \"12\"};\n      |                                                      \
    \             ^\n      |                                                     \
    \              |\n      |                                                    \
    \               <brace-enclosed initializer list>\n/tmp/tmp_pf_kfoi.cpp:22:83:\
    \ error: could not convert \u2018{\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"29\", \"30\", \"31\"}\u2019 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   22 |     std::string days = {\"01\", \"03\", \"05\", \"07\", \"08\", \"\
    10\", \"12\", \"29\", \"30\", \"31\"};\n      |                              \
    \                                                     ^\n      |             \
    \                                                                      |\n   \
    \   |                                                                        \
    \           <brace-enclosed initializer list>\n/tmp/tmp_pf_kfoi.cpp:23:17: error:\
    \ redeclaration of \u2018std::string months\u2019\n   23 |     std::string months\
    \ = {\"04\", \"06\", \"09\", \"11\"};\n      |                 ^~~~~~\n/tmp/tmp_pf_kfoi.cpp:21:17:\
    \ note: \u2018std::string months\u2019 previously declared here\n   21 |     std::string\
    \ months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n      |\
    \                 ^~~~~~\n/tmp/tmp_pf_kfoi.cpp:87:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   87 | int main() {\n     \
    \ |            ^\n/tmp/tmp_pf_kfoi.cpp:105:1: error: expected \u2018}\u2019 at\
    \ end of input\n  105 | }\n      | ^\n/tmp/tmp_pf_kfoi.cpp:16:35: note: to match\
    \ this \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmp_pf_kfoi.cpp:105:1: warning: control\
    \ reaches end of non-v"
  stdout: ''
  timestamp: 1660133582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day;\n    int month;\n    bool flag\
    \ = false;\n    std::stringstream ss;\n    ss.str(date);\n    ss >> month;\n \
    \   ss >> day;\n    ss >> year;\n    if (month == 0 || month > 12)\n        flag\
    \ = true;\n    else if (month == 1 && day > 30)\n        flag = true;\n    else\
    \ if (month == 2 && day > 29)\n        flag = true;\n    else if (month == 3 &&\
    \ day > 31)\n        flag = true;\n    else if (month == 4 && day > 30)\n    \
    \    flag = true;\n    else if (month == 5 && day > 31)\n        flag = true;\n\
    \    else if (month == 6 && day > 30)\n        flag = true;\n    else if (month\
    \ == 7 && day > 31)\n        flag = true;\n    else if (month == 8 && day > 30)\n\
    \        flag = true;\n    else if (month == 9 && day > 31)\n        flag = true;\n\
    \    else if (month == 10 && day > 30)\n        flag = true;\n    else if (month\
    \ == 11 && day > 31)\n        flag = true;\n    else\n        flag = false;\n\
    \    return flag;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8s67zfhp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8s67zfhp.cpp:24:11: error: \u2018year\u2019 was not declared in this\
    \ scope\n   24 |     ss >> year;\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    int dd;\n    int\
    \ mm;\n    int yyyy;\n    int check;\n    check=date.size();\n    dd=date[0] -\
    \ '0';\n    mm=date[1] - '0';\n    yyyy=date[2] - '0';\n    if(check<11 || check>19)\n\
    \        return false;\n    if(check<10){\n        mm=mm-1;\n        check=check-1;\n\
    \    }\n    if(check<1 || check>12){\n        mm=mm-1;\n        check=check-1;\n\
    \    }\n    if(mm<1 || mm>12){\n        mm=mm-1;\n        check=check-1;\n   \
    \ }\n    if(dd<1 || dd>31){\n        dd=dd-1;\n        check=check-1;\n    }\n\
    \    if(mm<4 || mm>10){\n        mm=mm-1;\n        check=check-1;\n    }\n   \
    \ if(yyyy<1 || yyyy>30){\n        yyyy=yyyy-1;\n        check=check-1;\n    }\n\
    \    if(mm==4 && dd==1 && yyyy<2020){\n        return false;\n    }\n    if(mm==6\
    \ && dd==1 && yyyy<2020){\n        return false;\n    }\n    if(mm==2 && dd==1\
    \ && yyyy<2020){\n        return false;\n    }\n    if(mm==2 && dd==31 && yyyy<2020){\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjaa077ia: /tmp/tmpjaa077ia.cpp:68: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int nDays = date.size();\n    std::cin>>date;\n\
    \    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n\
    \    int year = stoi(date.substr(6, 4));\n    if (nDays <= 1 || nDays > 31) {\n\
    \        return false;\n    }\n    if (nDays <= 1 || nDays > 30) {\n        return\
    \ false;\n    }\n    if (nDays <= 1 || nDays > 29) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (day < 1 || day > 31) {\n        return false;\n    }\n    if (year < 1900\
    \ || year > 2100) {\n        return false;\n    }\n    if (month == 2) {\n   \
    \     if (day > 28) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133588
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day, month, year;\n    char month_arr[]\
    \ = {'1','3','5','7','8','10','12'};\n    // use atoi to convert string to int\n\
    \    day = atoi(date.substr(0,2).c_str());\n    month = atoi(month_arr[date.size()-1]);\n\
    \    year = atoi(date.substr(2,4).c_str());\n    if(!(date.length()>0))\n    \
    \    return false;\n    if(!(day<1 || day>31))\n        return false;\n    if(!(month<1\
    \ || month>12))\n        return false;\n    if(!(year%4==0 && year%100!=0 || year%400==0))\n\
    \        return false;\n    if(day>=1 && day<=31 && month>=1 && month<=12)\n \
    \       return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pfv7_g9.cpp:18:45: warning: multi-character character constant\
    \ [-Wmultichar]\n   18 |     char month_arr[] = {'1','3','5','7','8','10','12'};\n\
    \      |                                             ^~~~\n/tmp/tmp6pfv7_g9.cpp:18:50:\
    \ warning: multi-character character constant [-Wmultichar]\n   18 |     char\
    \ month_arr[] = {'1','3','5','7','8','10','12'};\n      |                    \
    \                              ^~~~\n/tmp/tmp6pfv7_g9.cpp: In function \u2018\
    bool valid_date(std::string)\u2019:\n/tmp/tmp6pfv7_g9.cpp:18:54: error: narrowing\
    \ conversion of \u201812592\u2019 from \u2018int\u2019 to \u2018char\u2019 [-Wnarrowing]\n\
    \   18 |     char month_arr[] = {'1','3','5','7','8','10','12'};\n      |    \
    \                                                  ^\n/tmp/tmp6pfv7_g9.cpp:18:54:\
    \ error: narrowing conversion of \u201812594\u2019 from \u2018int\u2019 to \u2018\
    char\u2019 [-Wnarrowing]\n/tmp/tmp6pfv7_g9.cpp:21:41: error: invalid conversion\
    \ from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n   21 |   \
    \  month = atoi(month_arr[date.size()-1]);\n      |                  ~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \      |                                         |\n      |                  \
    \                       char\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n\
    \                 from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6pfv7_g9.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day, month, year;\n    std::sscanf(date.c_str(),\
    \ \"%d-%d-%d\", &day, &month, &year);\n\n    bool valid = true;\n    // Check\
    \ the validity of the month\n    if ((month > 2 && month <= 12 && month == day\
    \ && month <= 12) ||\n        (month == 2 && day <= 29 && day == month)) {\n \
    \       // Check the validity of the year\n        if ((year > 0 && year <= 99))\
    \ {\n            if ((month == 2 && (day > 29 && day < 30)) || \n            \
    \    (month == 1 && day > 31)) {\n                valid = true;\n            }\n\
    \        }\n    }\n\n    return valid;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9kxehs38: /tmp/tmp9kxehs38.cpp:38: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    std::cout <<\
    \ date << std::endl;\n    return date != \"\";\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0lnf5btk: /tmp/tmp0lnf5btk.cpp:24: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: '03-11-2000

    15-01-2012

    '
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    auto sday = stoi(sday);\n    auto eday =\
    \ stoi(eday);\n    auto mday = stoi(mday);\n    auto mon = stoi(mon);\n    \n\
    \    \n    if(date.empty())\n        return false;\n    \n    if(mon <1 || mon\
    \ >12)\n        return false;\n    \n    if(mon ==1 &&(eday<31 || eday>30))\n\
    \        return false;\n    \n    if((eday ==31 || eday ==30) && mon ==2)\n  \
    \  {\n        \n        if(mday<1 || mday>30)\n            return false;\n   \
    \     \n        else if(eday ==31 || eday ==30 && mday ==1)\n            return\
    \ false;\n        \n        else if(eday ==30 && mday ==30)\n            return\
    \ false;\n        \n        else if(eday ==31 && mday ==31)\n            return\
    \ false;\n        \n        else if(eday ==31 && mday ==30)\n            return\
    \ false;\n    }\n    else if(eday ==30 || eday ==31 && mon ==2 )\n    {\n    \
    \    if(mday<1 || mday>31)\n            return false;\n        \n        else\
    \ if(eday ==30 && mday ==1)\n            return false;\n        \n        else\
    \ if(eday ==31 && mday ==1)\n            return false;\n        \n        else\
    \ if(eday ==31 && mday ==31)\n            return false;\n        \n        else\
    \ if(eday ==31 && mday ==30)\n            return false;\n        \n        else\
    \ if(eday ==30 && mday ==30)\n            return false;\n    }\n    else if(eday\
    \ ==29 && mon ==2 )\n    {\n        if(mday<1 || mday>31)\n            return\
    \ false;\n        \n        else if(eday ==29 && mday ==1)\n            return\
    \ false;\n        \n        else if(eday ==29 && mday ==30)\n            return\
    \ false;\n        \n        else if(eday ==29 && mday ==31)\n            return\
    \ false;\n        \n        else if(eday ==29 && mday ==31)\n            return\
    \ false;\n        \n        else if(eday ==29 && mday ==30)\n            return\
    \ false;\n    }\n    \n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehge5zjr.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpehge5zjr.cpp:17:22: error: use of \u2018sday\u2019 before deduction\
    \ of \u2018auto\u2019\n   17 |     auto sday = stoi(sday);\n      |          \
    \            ^~~~\n/tmp/tmpehge5zjr.cpp:17:17: error: \u2018stoi\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::stoi\u2019?\n   17\
    \ |     auto sday = stoi(sday);\n      |                 ^~~~\n      |       \
    \          std::__cxx11::stoi\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpehge5zjr.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3:\
    \ note: \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/tmp/tmpehge5zjr.cpp:18:22:\
    \ error: use of \u2018eday\u2019 before deduction of \u2018auto\u2019\n   18 |\
    \     auto eday = stoi(eday);\n      |                      ^~~~\n/tmp/tmpehge5zjr.cpp:19:22:\
    \ error: use of \u2018mday\u2019 before deduction of \u2018auto\u2019\n   19 |\
    \     auto mday = stoi(mday);\n      |                      ^~~~\n/tmp/tmpehge5zjr.cpp:20:21:\
    \ error: use of \u2018mon\u2019 before deduction of \u2018auto\u2019\n   20 |\
    \     auto mon = stoi(mon);\n      |                     ^~~\n/tmp/tmpehge5zjr.cpp:93:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   93 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream ss(date);\n    char m[8];\n\
    \    int d, m, y;\n    ss >> m >> d >> y;\n    // Validate Month\n    if (m <\
    \ 1 || m > 12) return false;\n    // Validate date\n    if (d > 0 && d < 32 &&\
    \ d != 31) return false;\n    // Validate year\n    if (y > 0 && y < 100) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmsx6s7f.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgmsx6s7f.cpp:19:12: error: conflicting declaration \u2018int m\u2019\
    \n   19 |     int d, m, y;\n      |            ^\n/tmp/tmpgmsx6s7f.cpp:18:10:\
    \ note: previous declaration as \u2018char m [8]\u2019\n   18 |     char m[8];\n\
    \      |          ^\n/tmp/tmpgmsx6s7f.cpp:22:13: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   22 |     if (m < 1 || m > 12)\
    \ return false;\n      |             ^\n/tmp/tmpgmsx6s7f.cpp:22:22: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   22 | \
    \    if (m < 1 || m > 12) return false;\n      |                      ^~\n"
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool isValid = true;\n    int day = stoi(date.substr(0,\
    \ 2));\n    int month = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6,\
    \ 4));\n    \n    // validating month not less than 1 or higher than 12\n    if\
    \ (month < 1 || month > 12) {\n        isValid = false;\n    }\n    \n    // validating\
    \ days not less than 1 or higher than 31\n    if (day < 1 || day > 31) {\n   \
    \     isValid = false;\n    }\n    \n    // validating month not less than 1 or\
    \ higher than 12\n    if (month < 1 || month > 12) {\n        isValid = false;\n\
    \    }\n    \n    // validating month not less than 1 or higher than 12\n    if\
    \ (month < 1 || month > 12) {\n        isValid = false;\n    }\n    \n    // validating\
    \ date should be in the format: mm-dd-yyyy\n    if (date.size() != 9) {\n    \
    \    isValid = false;\n    }\n    \n    return isValid;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzxtl3iye: /tmp/tmpzxtl3iye.cpp:51: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Complete this function.\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppllt3iuk: /tmp/tmppllt3iuk.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string::size_type pos1, pos2;\n   \
    \ pos1 = date.find('-');\n    pos2 = date.find('/');\n    if (pos1 != std::string::npos\
    \ && pos2 != std::string::npos && pos1 != pos2 && pos2 != date.length() - 1) {\n\
    \        int day1 = std::stoi(date.substr(0, pos1), 0, 10);\n        int month1\
    \ = std::stoi(date.substr(pos1 + 1, pos1 - pos1), 0, 10);\n        int year1 =\
    \ std::stoi(date.substr(pos1 + 2, pos1 - pos1 - 2), 0, 10);\n        int day2\
    \ = std::stoi(date.substr(pos2 + 1, date.size()), 0, 10);\n        int month2\
    \ = std::stoi(date.substr(pos2 + 2, pos2 - pos2 - 2), 0, 10);\n        int year2\
    \ = std::stoi(date.substr(pos2 + 3, pos2 - pos2 - 3), 0, 10);\n        if (month1\
    \ < 1 || month1 > 12) return false;\n        if (month2 < 1 || month2 > 12) return\
    \ false;\n        if (day1 < 1 || day1 > 31) return false;\n        if (day2 <\
    \ 1 || day2 > 30) return false;\n        if (year1 != year2) return false;\n \
    \       if (month1 != month2) return false;\n        if (day1 != day2) return\
    \ false;\n    }\n    return date != \"\";\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpr71ig_2l: /tmp/tmpr71ig_2l.cpp:40: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n        std::vector<std::string> date_split\
    \ = date.split(\"-\");\n        if (date_split.size() != 3) {\n              \
    \  return false;\n        }\n        unsigned int days_in_month = { 0, 31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }; \n        unsigned int days_in_year\
    \ = 31;\n        unsigned int months_in_year = 12;\n        unsigned int days_in_date\
    \ = 1;\n        int days_in_month1 = days_in_month[date_split[1].at(0) - 1];\n\
    \        int months_in_year1 = months_in_year;\n        int days_in_year1 = days_in_year;\n\
    \        int months_in_date1 = date_split[1].at(0);\n        int days_in_date1\
    \ = days_in_date; \n        while (months_in_year1 > months_in_date) {\n     \
    \       months_in_date1 += 1;\n            months_in_year1 -= 1;\n        }\n\
    \        while (days_in_month1 > days_in_date) {\n            days_in_date1 +=\
    \ 1;\n            days_in_month1 -= 1;\n        }\n        return ((date_split[0].at(2)\
    \ == months_in_date1 && date_split[1].at(2) == days_in_date1) || (date_split[0].at(2)\
    \ == months_in_date1 && date_split[1].at(2) == days_in_date1 && date_split[2].at(2)\
    \ == days_in_date1));\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn4hrkko.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmprn4hrkko.cpp:17:52: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   17 |         std::vector<std::string> date_split = date.split(\"-\");\n \
    \     |                                                    ^~~~~\n/tmp/tmprn4hrkko.cpp:21:22:\
    \ error: scalar object \u2018days_in_month\u2019 requires one element in initializer\n\
    \   21 |         unsigned int days_in_month = { 0, 31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31 };\n      |                      ^~~~~~~~~~~~~\n/tmp/tmprn4hrkko.cpp:30:34:\
    \ error: \u2018months_in_date\u2019 was not declared in this scope; did you mean\
    \ \u2018months_in_date1\u2019?\n   30 |         while (months_in_year1 > months_in_date)\
    \ {\n      |                                  ^~~~~~~~~~~~~~\n      |        \
    \                          months_in_date1\n"
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day = stoi(date.substr(0, 2));\n   \
    \ int month = stoi(date.substr(2, 2));\n    int year = stoi(date.substr(4, 4));\n\
    \    if (date == \"\") return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (year < 1900 || year >\
    \ 2030) return false;\n    if (month == 2 && day > 29) return false;\n    if (month\
    \ == 4 && day > 30) return false;\n    if (month == 6 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 30)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb48wtv74: /tmp/tmpb48wtv74.cpp:34: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::cout<<\"inside validDate\"<<std::endl;\n\
    \    auto date_arr = date.split('-');\n    \n    bool is_valid_date_valid = true;\n\
    \    if(date.empty() || date.length()<9 || date.length()>19 || !(date[2]=='-'\
    \ && date[4]=='-' && date[6]=='-' && date[8]=='-')){\n        std::cout<<\"inside\
    \ validDate \"<<is_valid_date_valid<<std::endl;\n        is_valid_date_valid =\
    \ false;\n    }\n    return is_valid_date_valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ujssl1g.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_ujssl1g.cpp:18:26: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   18 |     auto date_arr = date.split('-');\n      |                      \
    \    ^~~~~\n"
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // your code here\n    if(date.length()\
    \ == 0 || date.length() != 10) return false;\n    if(date.length() == 10) {\n\
    \        std::size_t month = 0;\n        std::size_t day = 0;\n        std::size_t\
    \ year = 0;\n        int days_index = 0;\n        std::size_t days_length = 0;\n\
    \        char c;\n        std::size_t i = 0;\n        while(i < date.length())\
    \ {\n            c = date[i];\n            if(c == '-' || c == '/') {\n      \
    \          days_length++;\n            }\n            else if(c == '/' || c ==\
    \ '-') {\n                days_index++;\n            }\n            i++;\n   \
    \     }\n        if(days_index < 1 || days_index > 31) return false;\n       \
    \ if(days_length < 1 || days_length >= 31) return false;\n        month = std::stoi(date.substr(0,\
    \ 2));\n        day = std::stoi(date.substr(3, 2));\n        year = std::stoi(date.substr(6,\
    \ 4));\n        std::size_t month_length = {'JAN', 'FEB', 'MAR', 'APR', 'MAY',\
    \ 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'};\n        if(month < 1 || month\
    \ > 12) return false;\n        std::size_t month_start = month;\n        std::size_t\
    \ month_end = month;\n        month_end++;\n        if(month_end > 12) {\n   \
    \         month_end = month_end % 12;\n        }\n        std::size_t day = std::stoi(date.substr(2,\
    \ 2));\n        std::size_t year = std::stoi(date.substr(5, 4));\n        std::size_t\
    \ day_length = (month == month_end) ? 31 : 30;\n        if(day < 1 || day > day_length)\
    \ return false;\n        std::size_t month_length = {'JAN', 'FEB', 'MAR', 'APR',\
    \ 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'};\n        if(month ==\
    \ month_end) {\n            if(day < 1 || day > 29) return false;\n        }\n\
    \        else {\n            if((month + 1 < month_start) || (month_start == month_end))\
    \ month_end = month + 1;\n            month_end++;\n            if(month_end >\
    \ 12) {\n                month_end = month_end % 12;\n            }\n        \
    \    if(day < 1 || day > day_length) return false;\n        }\n        if(year\
    \ < 1970 || year > 2050) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyhyguavt.cpp:42:37: warning: multi-character character constant\
    \ [-Wmultichar]\n   42 |         std::size_t month_length = {'JAN', 'FEB', 'MAR',\
    \ 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'};\n      |   \
    \                                  ^~~~~\n/tmp/tmpyhyguavt.cpp:42:44: warning:\
    \ multi-character character constant [-Wmultichar]\n   42 |         std::size_t\
    \ month_length = {'JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP',\
    \ 'OCT', 'NOV', 'DEC'};\n      |                                            ^~~~~\n\
    /tmp/tmpyhyguavt.cpp:42:51: warning: multi-character character constant [-Wmultichar]\n\
    \   42 |         std::size_t month_length = {'JAN', 'FEB', 'MAR', 'APR', 'MAY',\
    \ 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'};\n      |                 \
    \                                  ^~~~~\n/tmp/tmpyhyguavt.cpp:42:58: warning:\
    \ multi-character character constant [-Wmultichar]\n   42 |         std::size_t\
    \ month_length = {'JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP',\
    \ 'OCT', 'NOV', 'DEC'};\n      |                                             \
    \             ^~~~~\n/tmp/tmpyhyguavt.cpp:42:65: warning: multi-character character\
    \ constant [-Wmultichar]\n   42 |         std::size_t month_length = {'JAN', 'FEB',\
    \ 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'};\n   \
    \   |                                                                 ^~~~~\n\
    /tmp/tmpyhyguavt.cpp:42:72: warning: multi-character character constant [-Wmultichar]\n\
    \   42 |         std::size_t month_length = {'JAN', 'FEB', 'MAR', 'APR', 'MAY',\
    \ 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'};\n      |                 \
    \                                                       ^~~~~\n/tmp/tmpyhyguavt.cpp:42:79:\
    \ warning: multi-character character constant [-Wmultichar]\n   42 |         std::size_t\
    \ month_length = {'JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP',\
    \ 'OCT', 'NOV', 'DEC'};\n      |                                             \
    \                                  ^~~~~\n/tmp/tmpyhyguavt.cpp:42:86: warning:\
    \ multi-cha"
  stdout: ''
  timestamp: 1660133582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    size_t length = date.length();\n    if (length\
    \ == 0) {\n        return false;\n    }\n    if (length < 2 || length != 8) {\n\
    \        return false;\n    }\n    std::tm tm;\n    std::istringstream iss(date);\n\
    \    iss >> std::get_time(&tm, \"%m-%d-%Y\");\n    int m = tm.tm_mon;\n    int\
    \ d = tm.tm_mday;\n    int y = tm.tm_year + 1900;\n\n    if (m < 1 || m < 3 ||\
    \ m < 5 || m < 7 || m < 8 || m < 10\n            || m < 12 || m < 4 || m < 6 ||\
    \ m < 9 || m < 11\n            || m < 3 || m < 5 || m < 7 || m < 8 || m < 10)\
    \ {\n        return false;\n    }\n    if (d < 1 || d > 31) {\n        return\
    \ false;\n    }\n    if (m > 12 || m > 2) {\n        return false;\n    }\n  \
    \  if (y > 2020) {\n        return false;\n    }\n    if (y == 1900 && m == 1\
    \ && d >= 1) {\n        return true;\n    }\n    if (y == 1900 && m == 3 && d\
    \ >= 1) {\n        return true;\n    }\n    if (y == 1900 && m == 5 && d >= 1)\
    \ {\n        return true;\n    }\n    if (y == 1900 && m == 7 && d >= 1) {\n \
    \       return true;\n    }\n    if (y == 1900 && m == 8 && d >= 1) {\n      \
    \  return true;\n    }\n    if (y == 1900 && m == 10 && d >= 1) {\n        return\
    \ true;\n    }\n    if (y == 1900 && m == 12 && d >= 1) {\n        return true;\n\
    \    }\n    if (y == 1900 && m == 4 && d >= 1) {\n        return true;\n    }\n\
    \    if (y == 1900 && m == 6 && d >= 1) {\n        return true;\n    }\n    if\
    \ (y == 1900 && m == 9 && d >= 1) {\n        return true;\n    }\n    if (y ==\
    \ 1900 && m == 11 && d >= 1) {\n        return true;\n    }\n    if (y == 1900\
    \ && m == 3 && d >= 1) {\n        return true;\n    }\n    if (y == 1900 && m\
    \ == 5 && d >= 1) {\n        return true;\n    }\n    if (y == 1900 && m == 7\
    \ && d >= 1) {\n        return true;\n    }\n    if (y == 1900 && m == 8 && d\
    \ >= 1) {\n        return true;\n    }\n    if (y == 1900 && m == 10 && d >= 1)\
    \ {\n        return true;\n    }\n    if (y == 1900 && m == 12 && d >= 1) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplx0qhedy: /tmp/tmplx0qhedy.cpp:100: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // write your code here\n    struct tm t{};\n\
    \    strptime(date.c_str(), \"%m-%d-%Y\", &t);\n\n    int month=t.tm_mon;\n  \
    \  int day=t.tm_mday;\n    int year=t.tm_year;\n\n    if(month < 1 || month >\
    \ 12)\n        return false;\n\n    if(day < 1 || day > 31)\n        return false;\n\
    \n    if(year % 4 != 0 || (year % 100 == 0 && year % 400 != 0))\n        return\
    \ false;\n\n    bool valid=true;\n\n    if(month == 1) {\n        if(day <= 31)\n\
    \            valid = true;\n        else\n            valid = false;\n    }\n\
    \    else if(month == 3 || month == 5 || month == 7 || month == 8 || month ==\
    \ 10 || month == 12) {\n        if(day <= 30)\n            valid = true;\n   \
    \     else\n            valid = false;\n    }\n    else if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day <= 29)\n            valid\
    \ = true;\n        else\n            valid = false;\n    }\n\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7p0ovqms: /tmp/tmp7p0ovqms.cpp:59: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    char date_str[60];\n    strptime(date.c_str(),\
    \ \"%d-%m-%Y\", date_str);\n    std::string day = date_str;\n    int year = atoi(date_str\
    \ + 2);\n    int month = atoi(date_str + 4);\n    if (month < 1 || month > 12)\n\
    \        return false;\n    if (day < \"01\" || day > \"31\" || day > \"30\" ||\
    \ day > \"29\")\n        return false;\n    int daysInMonth[31][31] = {\n    {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}, \n    {31, 29, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31}, \n    {31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}};\n\
    \    if (daysInMonth[month-1][day-1] != 0)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcteoekre.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcteoekre.cpp:18:40: error: cannot convert \u2018char*\u2019 to \u2018\
    tm*\u2019\n   18 |     strptime(date.c_str(), \"%d-%m-%Y\", date_str);\n     \
    \ |                                        ^~~~~~~~\n      |                 \
    \                       |\n      |                                        char*\n\
    In file included from /usr/include/c++/9/ctime:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n\
    \                 from /tmp/tmpcteoekre.cpp:2:\n/usr/include/time.h:96:51: note:\
    \   initializing argument 3 of \u2018char* strptime(const char*, const char*,\
    \ tm*)\u2019\n   96 |          const char *__restrict __fmt, struct tm *__tp)\n\
    \      |                                        ~~~~~~~~~~~^~~~\n/tmp/tmpcteoekre.cpp:30:33:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n  \
    \ 30 |     if (daysInMonth[month-1][day-1] != 0)\n      |                    \
    \          ~~~^~\n      |                              |   |\n      |        \
    \                      |   int\n      |                              std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcteoekre.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcteoekre.cpp:30:34:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019"
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    // write your\
    \ code here\n    std::istringstream s(date);\n    std::string day,month,year;\n\
    \    int days,months,daysInMonth[10];\n    s >> month;\n    if(!s) return false;\n\
    \    s >> day;\n    if(!s) return false;\n    s >> year;\n    if(!s) return false;\n\
    \    s >> days;\n    if(!s) return false;\n    months=month%12;\n    daysInMonth[months]=day%30;\n\
    \    for(int i=1;i<13;i++) {\n        if(month==i-1) {\n            days+=daysInMonth[i-1];\n\
    \        }\n        else if(month==i+1 && day<30) {\n            days+=daysInMonth[i-1];\n\
    \        }\n    }\n    if(days<1 || days>31) return false;\n    for(int i=1;i<4;i++)\
    \ {\n        if(month==i-1) {\n            days+=daysInMonth[i-1];\n        }\n\
    \        else if(month==i+1 && day<29) {\n            days+=daysInMonth[i-1];\n\
    \        }\n    }\n    if(days<1 || days>30) return false;\n    if(year>=2000\
    \ || year<=2040) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmputfdiik9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmputfdiik9.cpp:30:17: error: no match for \u2018operator%\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   30 |     months=month%12;\n      |            ~~~~~^~~\n\
    \      |            |     |\n      |            |     int\n      |           \
    \ std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmputfdiik9.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmputfdiik9.cpp:30:18: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   30 |     months=month%12;\n      |   \
    \               ^~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmputfdiik9.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |"
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day;\n    int month;\n    int year;\n\
    \    // Split the input string to obtain day,month,year information\n    int length\
    \ = date.length();\n    std::stringstream ss(date);\n    ss>>day>>month>>year;\n\
    \    // Check for valid month\n    for(int i=0;i<=12;i++) {\n        if(month==i)\
    \ {\n            break;\n        }\n    }\n    // Check for valid day\n    for(int\
    \ i=1;i<=31;i++) {\n        if(day==i) {\n            break;\n        }\n    }\n\
    \    // Check for valid year\n    if(month==2) {\n        if(day>29) {\n     \
    \       return false;\n        }\n    }\n    else if(month==1) {\n        if(day>30)\
    \ {\n            return false;\n        }\n    }\n    // Check for valid month\n\
    \    for(int i=1;i<=12;i++) {\n        if(month==i) {\n            break;\n  \
    \      }\n    }\n    if(month>12) {\n        return false;\n    }\n    // Check\
    \ for valid day\n    for(int i=1;i<=31;i++) {\n        if(day==i) {\n        \
    \    break;\n        }\n    }\n    // Check for valid year\n    if(month==2) {\n\
    \        if(day>29) {\n            return false;\n        }\n    }\n    else if(month==1)\
    \ {\n        if(day>30) {\n            return false;\n        }\n    }\n    //\
    \ Check for valid day\n    for(int i=1;i<=30;i++) {\n        if(day==i) {\n  \
    \          break;\n        }\n    }\n    if(day>31) {\n        return false;\n\
    \    }\n    // Check for valid year\n    if(month==2) {\n        if(day>29) {\n\
    \            return false;\n        }\n    }\n    else if(month==1) {\n      \
    \  if(day>30) {\n            return false;\n        }\n    }\n    // Check for\
    \ valid day\n    for(int i=1;i<=29;i++) {\n        if(day==i) {\n            break;\n\
    \        }\n    }\n    if(day>30) {\n        return false;\n    }\n    // Check\
    \ for valid year\n    if(month==2) {\n        if(day>29) {\n            return\
    \ false;\n        }\n    }\n    else if(month==1) {\n        if(day>30) {\n  \
    \          return false;\n        }\n    }\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiuls0kwr: /tmp/tmpiuls0kwr.cpp:119: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string day, month, year;\n    sscanf(date.c_str(),\
    \ \"%2d-%2d-%4s\", &day, &month, &year);\n    int day, month, year;\n    bool\
    \ flag = false;\n    if (date.empty())\n        flag = false;\n    else {\n  \
    \      std::stringstream ss;\n        ss << month;\n        if (ss.fail()) {\n\
    \            flag = false;\n            return flag;\n        }\n        if (month.at(0)\
    \ == '0')\n            month.erase(0, 1);\n        std::for_each(month.begin(),\
    \ month.end(), [](char &c) { c = '0' + c; });\n        std::for_each(day.begin(),\
    \ day.end(), [](char &c) { c = '0' + c; });\n        std::for_each(year.begin(),\
    \ year.end(), [](char &c) { c = '0' + c; });\n        bool flag1 = std::all_of(month.begin(),\
    \ month.end(), [](char &c) { return (c >= '1' && c <= '3'); });\n        bool\
    \ flag2 = std::all_of(day.begin(), day.end(), [](char &c) { return (c >= '1' &&\
    \ c <= '30'); });\n        bool flag3 = std::all_of(year.begin(), year.end(),\
    \ [](char &c) { return (c >= '1' && c <= '9'); });\n        bool flag4 = std::all_of(month.begin(),\
    \ month.end(), [](char &c) { return (c >= '4' && c <= '6'); });\n        bool\
    \ flag5 = std::all_of(day.begin(), day.end(), [](char &c) { return (c >= '4' &&\
    \ c <= '9'); });\n        bool flag6 = std::all_of(year.begin(), year.end(), [](char\
    \ &c) { return (c >= '4' && c <= '11'); });\n        bool flag7 = std::all_of(month.begin(),\
    \ month.end(), [](char &c) { return (c >= '7' && c <= '9'); });\n        bool\
    \ flag8 = std::all_of(day.begin(), day.end(), [](char &c) { return (c >= '7' &&\
    \ c <= '9'); });\n        bool flag9 = std::all_of(year.begin(), year.end(), [](char\
    \ &c) { return (c >= '7' && c <= '12'); });\n        bool flag10 = std::all_of(month.begin(),\
    \ month.end(), [](char &c) { return (c >= '10' && c <= '12'); });\n        bool\
    \ flag11 = std::all_of(day.begin(), day.end(), [](char &c) { return \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc2f502g.cpp:36:97: warning: multi-character character constant\
    \ [-Wmultichar]\n   36 |         bool flag2 = std::all_of(day.begin(), day.end(),\
    \ [](char &c) { return (c >= '1' && c <= '30'); });\n      |                 \
    \                                                                            \
    \    ^~~~\n/tmp/tmpbc2f502g.cpp:40:99: warning: multi-character character constant\
    \ [-Wmultichar]\n   40 |         bool flag6 = std::all_of(year.begin(), year.end(),\
    \ [](char &c) { return (c >= '4' && c <= '11'); });\n      |                 \
    \                                                                            \
    \      ^~~~\n/tmp/tmpbc2f502g.cpp:43:99: warning: multi-character character constant\
    \ [-Wmultichar]\n   43 |         bool flag9 = std::all_of(year.begin(), year.end(),\
    \ [](char &c) { return (c >= '7' && c <= '12'); });\n      |                 \
    \                                                                            \
    \      ^~~~\n/tmp/tmpbc2f502g.cpp:44:90: warning: multi-character character constant\
    \ [-Wmultichar]\n   44 |         bool flag10 = std::all_of(month.begin(), month.end(),\
    \ [](char &c) { return (c >= '10' && c <= '12'); });\n      |                \
    \                                                                          ^~~~\n\
    /tmp/tmpbc2f502g.cpp:44:103: warning: multi-character character constant [-Wmultichar]\n\
    \   44 |         bool flag10 = std::all_of(month.begin(), month.end(), [](char\
    \ &c) { return (c >= '10' && c <= '12'); });\n      |                        \
    \                                                                            \
    \   ^~~~\n/tmp/tmpbc2f502g.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpbc2f502g.cpp:18:29: warning: format \u2018%d\u2019 expects argument\
    \ of type \u2018int*\u2019, but argument 3 has type \u2018std::string*\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>*\u2019} [-Wformat=]\n   18 |     sscanf(date.c_str(),\
    \ \"%2d-%2d-%4s\", &day, &month, &year);\n      |                           ~~^\
    \           ~~~~\n      |                             |           |\n      | \
    \                            int*    "
  stdout: ''
  timestamp: 1660133583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Write your code here\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnuq80had: /tmp/tmpnuq80had.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n   //Write your code here\n   int days;\n  \
    \ int months;\n   int years;\n   //Write your code here\n   for(int i=0;i<date.length();i++)\
    \ {\n       if(date[i]>='0' && date[i]<='9')\n       {\n           months+=date[i]-'0';\n\
    \       }\n       else if(date[i]>='a' && date[i]<='f')\n       {\n          \
    \ days+=date[i]-'a'+10;\n       }\n       else if(date[i]>='A' && date[i]<='F')\n\
    \       {\n           days+=date[i]-'A'+10;\n       }\n       else if(date[i]=='/'\
    \ && date[i+1]=='/')\n       {\n           months+=1;\n           i++;\n     \
    \  }\n       else if(date[i]=='/' && date[i+1]>'9')\n       {\n           days+=date[i+1]-'0';\n\
    \           i++;\n       }\n       else if(date[i]>'0' && date[i]<'9')\n     \
    \  {\n           months+=date[i]-'0';\n       }\n       else if(date[i]>'a' &&\
    \ date[i]<'f')\n       {\n           days+=date[i]-'a'+10;\n       }\n       else\
    \ if(date[i]>'A' && date[i]<'F')\n       {\n           days+=date[i]-'A'+10;\n\
    \       }\n       else if(date[i]=='-' && date[i+1]>'9')\n       {\n         \
    \  days+=date[i+1]-'0';\n           i++;\n       }\n   }\n   if(days>=1 && day<=31){\n\
    \       return true;\n   }\n   else if(days>=31 && day<=30){\n       return true;\n\
    \   }\n   else if(days>=29){\n       return true;\n   }\n   if(months<1 || months>12){\n\
    \       return false;\n   }\n   if(years<1000 || years>2020){\n       return false;\n\
    \   }\n   return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7mf3unwm.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7mf3unwm.cpp:63:18: error: \u2018day\u2019 was not declared in this\
    \ scope; did you mean \u2018days\u2019?\n   63 |    if(days>=1 && day<=31){\n\
    \      |                  ^~~\n      |                  days\n"
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.empty()){\n        return false;\n\
    \    }\n\n    int days[12] = {0,31,30,29,28,31,30,31,30,31,30,31};\n    int months[12]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11};\n    std::vector<std::string> split_date = date.split('-');\n\
    \    int years = std::stoi(split_date[0]);\n    int months = std::stoi(split_date[1]);\n\
    \    int days = std::stoi(split_date[2]);\n\n    if (days == 0 || days > 31){\n\
    \        return false;\n    }\n    if (months == 0 || months > 12){\n        return\
    \ false;\n    }\n    if (years == 0 || years > 9999){\n        return false;\n\
    \    }\n\n    bool is_leap = false;\n    if (months > 3) {\n        is_leap =\
    \ ((years%4==0 && years%100!=0) || (years%400==0)) ? 1 : 0;\n    }\n\n    if (months\
    \ == 2 && days > 29 && is_leap == 0){\n        return false;\n    }\n\n    if\
    \ (months == 2 && days > 28 && is_leap == 1){\n        return false;\n    }\n\n\
    \    if (months == 2 && days > 29 && is_leap == 0){\n        return false;\n \
    \   }\n\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprdzarh2n.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmprdzarh2n.cpp:23:48: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   23 |     std::vector<std::string> split_date = date.split('-');\n      |\
    \                                                ^~~~~\n/tmp/tmprdzarh2n.cpp:25:9:\
    \ error: conflicting declaration \u2018int months\u2019\n   25 |     int months\
    \ = std::stoi(split_date[1]);\n      |         ^~~~~~\n/tmp/tmprdzarh2n.cpp:22:9:\
    \ note: previous declaration as \u2018int months [12]\u2019\n   22 |     int months[12]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11};\n      |         ^~~~~~\n/tmp/tmprdzarh2n.cpp:26:9:\
    \ error: conflicting declaration \u2018int days\u2019\n   26 |     int days =\
    \ std::stoi(split_date[2]);\n      |         ^~~~\n/tmp/tmprdzarh2n.cpp:21:9:\
    \ note: previous declaration as \u2018int days [12]\u2019\n   21 |     int days[12]\
    \ = {0,31,30,29,28,31,30,31,30,31,30,31};\n      |         ^~~~\n/tmp/tmprdzarh2n.cpp:28:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   28 |     if (days == 0 || days > 31){\n      |                           \
    \  ^~\n/tmp/tmprdzarh2n.cpp:31:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   31 |     if (months == 0 || months > 12){\n \
    \     |                                 ^~\n/tmp/tmprdzarh2n.cpp:39:18: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   39\
    \ |     if (months > 3) {\n      |                  ^\n/tmp/tmprdzarh2n.cpp:43:19:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   43 |     if (months == 2 && days > 29 && is_leap == 0){\n      |         \
    \          ^\n/tmp/tmprdzarh2n.cpp:43:31: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   43 |     if (months == 2 && days > 29\
    \ && is_leap == 0){\n      |                               ^~\n/tmp/tmprdzarh2n.cpp:47:19:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   47 |     if (months == 2 && days > 28 && is_leap == 1)"
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[31], months[12];\n    int num_days;\n\
    \    int month;\n    bool valid = false;\n    // Convert string to integer and\
    \ then get the year and the month\n    // from the string and store in the arrays\
    \ defined above.\n    sscanf(date.c_str(), \"%d-%d-%d\", &days[0], &days[1], &days[2]);\n\
    \    // Get the number of days from the above array.\n    num_days = days[2]-days[1]+days[0]%7;\n\
    \    // Get the month.\n    month = days[1]+((days[0]%7>3)?7:0);\n    // Iterate\
    \ through the array and check for invalid date\n    // conditions.\n    for (int\
    \ i = 0; i < 12; i++) {\n        // Check month\n        if (month>0 && month<=11)\
    \ {\n            months[i-1] = month-1;\n        }\n        // Check days\n  \
    \      if (i>2 && num_days>=1 && num_days<=31) {\n            days[i-2] = days[i-1];\n\
    \        }\n        else if (i>2 && num_days>=31 && num_days<=30) {\n        \
    \    days[i-2] = 29;\n        }\n        // Check year\n        if (i<3) {\n \
    \           if (year%4==0 && year%100!=0 || year%400==0) {\n                valid\
    \ = true;\n            }\n        }\n        else {\n            valid = true;\n\
    \        }\n    }\n    // If the date is valid then return true.\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzoz35774.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpzoz35774.cpp:44:17: error: \u2018year\u2019 was not declared in this\
    \ scope\n   44 |             if (year%4==0 && year%100!=0 || year%400==0) {\n\
    \      |                 ^~~~\n"
  stdout: ''
  timestamp: 1660133583
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Complete the function\n    \n    // Write\
    \ code here\n    std::chrono::system_clock clock;\n    \n    bool valid=true;\n\
    \    int month;\n    int day;\n    int year;\n    \n    int date_len = date.length();\n\
    \    \n    if (date_len==0) {\n        valid=false;\n    }\n    \n    if (date_len<4\
    \ || date_len>8) {\n        valid=false;\n    }\n    \n    std::stringstream sstream(date);\n\
    \    \n    bool days_in_month[12]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n    \n    bool is_leap_year(year);\n    \n    for (int i=0; i<12; i++)\
    \ {\n        if (is_leap_year) {\n            if (month==i) {\n              \
    \  if (day<=days_in_month[i]) {\n                    valid=false;\n          \
    \      }\n            } else {\n                if (month==i+1 && day<=days_in_month[i])\
    \ {\n                    valid=false;\n                }\n            }\n    \
    \    } else {\n            if (month==i && day<=days_in_month[i]) {\n        \
    \        valid=false;\n            }\n        }\n    }\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzgdw74c.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptzgdw74c.cpp:39:75: error: narrowing conversion of \u201831\u2019 from\
    \ \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n   39 |     bool days_in_month[12]={31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n      |                      \
    \                                                     ^\n/tmp/tmptzgdw74c.cpp:39:75:\
    \ error: narrowing conversion of \u201828\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75: error: narrowing conversion\
    \ of \u201831\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75:\
    \ error: narrowing conversion of \u201830\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75: error: narrowing conversion\
    \ of \u201831\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75:\
    \ error: narrowing conversion of \u201830\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75: error: narrowing conversion\
    \ of \u201831\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75:\
    \ error: narrowing conversion of \u201831\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75: error: narrowing conversion\
    \ of \u201830\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75:\
    \ error: narrowing conversion of \u201831\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75: error: narrowing conversion\
    \ of \u201830\u2019 from \u2018int\u2019 to \u2018bool\u2019 [-Wnarrowing]\n/tmp/tmptzgdw74c.cpp:39:75:\
    \ error: narrowing conversion of \u201831\u2019 from \u2018int\u2019 to \u2018\
    bool\u2019 [-Wnarrowing]\n"
  stdout: ''
  timestamp: 1660133584
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  std::istringstream iss(date);\n  int day;\n\
    \  int month;\n  int year;\n  std::cin >> day >> month >> year;\n  if (iss.fail())\n\
    \    return false;\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if\
    \ (month < 1 || month > 12) {\n    return false;\n  }\n  if (year < 2000 || year\
    \ > 2040) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660133589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Return True if date is valid otherwise\
    \ return False.\n    std::chrono::system_clock::time_point time_begin = std::chrono::system_clock::now();\n\
    \    std::chrono::system_clock::duration time_diff = time_begin - std::chrono::system_clock::now();\n\
    \    auto duration = std::chrono::duration_cast<std::chrono::system_clock::duration>(time_diff);\n\
    \    auto days = duration.count();\n    if (days > 0 && days <= 29) {\n      \
    \  if (days <= 31) {\n            if (days <= 31) {\n                if (days\
    \ <= 31) {\n                    if (days <= 31) {\n                        if\
    \ (days <= 31) {\n                            if (days == 31) {\n            \
    \                    return true;\n                            } else {\n    \
    \                            return false;\n                            }\n  \
    \                      } else {\n                            return false;\n \
    \                       }\n                    } else {\n                    \
    \    return false;\n                    }\n                } else {\n        \
    \            return false;\n                }\n            } else {\n        \
    \        return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzrdsv6e3: /tmp/tmpzrdsv6e3.cpp:54: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    struct tm t;\n\
    \    char date1[30];\n    char date2[30];\n    char date3[30];\n    char date4[30];\n\
    \    std::string date;\n    std::string date;\n    std::string date;\n    std::string\
    \ date;\n    std::string date;\n    int year, month, day;\n    bool dateValid\
    \ = true;\n    int year1, month1, day1;\n    int year2, month2, day2;\n    int\
    \ year3, month3, day3;\n    int year4, month4, day4;\n    int daysInMonth[12]\
    \ = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int daysBeforeFirstDate;\n\
    \    int yearFirstDate, monthFirstDate, dayFirstDate;\n    int daysBeforeLastDate;\n\
    \    int yearLastDate, monthLastDate, dayLastDate;\n    int dayDifference;\n \
    \   bool dateLength = false;\n\n    //Part 1\n    if (date.size() <= 0) {\n  \
    \      dateValid = false;\n    }\n\n    //Part 2\n    int index = 0;\n    while\
    \ (index < date.size()) {\n        if (date[index] == '-') {\n            date[index\
    \ + 1] = '\\0';\n            year1 = stoi(date1, nullptr, 10);\n            index++;\n\
    \            index++;\n            date[index] = '\\0';\n            month1 =\
    \ stoi(date1, nullptr, 10);\n            index++;\n            index++;\n    \
    \        date[index] = '\\0';\n            day1 = stoi(date1, nullptr, 10);\n\
    \            index++;\n        } else if (date[index] == '/') {\n            date[index\
    \ + 1] = '\\0';\n            year2 = stoi(date2, nullptr, 10);\n            index++;\n\
    \            index++;\n            date[index] = '\\0';\n            month2 =\
    \ stoi(date2, nullptr, 10);\n            index++;\n            index++;\n    \
    \        date[index] = '\\0';\n            day2 = stoi(date2, nullptr, 10);\n\
    \            index++;\n        } else if (date[index] == '/') {\n            date[index\
    \ + 1] = '\\0';\n            year3 = stoi(date3, nullptr, 10);\n            index++;\n\
    \            index++;\n            date[index] = '\\0';\n            month3 =\
    \ stoi(date3, nullptr, 10);\n            index++;\n            index++;\n    \
    \        date[index] = '\\0';\n            day3 = stoi(date3, nullptr, 10);\n\
    \            index++;\n        } else if (date[index] == '/') {\n            date[index\
    \ + 1] = '\\0';\n            year4 = stoi(date4, nullptr, 10);\n            index++;\n\
    \            index++;\n            date[index] = '\\0';\n            month4 =\
    \ stoi(date4, nullptr, 10);\n            index++;\n            index++;\n    \
    \        date[index] = '\\0';\n            day4 = stoi(date4, \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphnrovx8f.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphnrovx8f.cpp:23:17: error: declaration of \u2018std::string date\u2019\
    \ shadows a parameter\n   23 |     std::string date;\n      |                \
    \ ^~~~\n/tmp/tmphnrovx8f.cpp:24:17: error: redeclaration of \u2018std::string\
    \ date\u2019\n   24 |     std::string date;\n      |                 ^~~~\n/tmp/tmphnrovx8f.cpp:23:17:\
    \ note: \u2018std::string date\u2019 previously declared here\n   23 |     std::string\
    \ date;\n      |                 ^~~~\n/tmp/tmphnrovx8f.cpp:25:17: error: redeclaration\
    \ of \u2018std::string date\u2019\n   25 |     std::string date;\n      |    \
    \             ^~~~\n/tmp/tmphnrovx8f.cpp:23:17: note: \u2018std::string date\u2019\
    \ previously declared here\n   23 |     std::string date;\n      |           \
    \      ^~~~\n/tmp/tmphnrovx8f.cpp:26:17: error: redeclaration of \u2018std::string\
    \ date\u2019\n   26 |     std::string date;\n      |                 ^~~~\n/tmp/tmphnrovx8f.cpp:23:17:\
    \ note: \u2018std::string date\u2019 previously declared here\n   23 |     std::string\
    \ date;\n      |                 ^~~~\n/tmp/tmphnrovx8f.cpp:27:17: error: redeclaration\
    \ of \u2018std::string date\u2019\n   27 |     std::string date;\n      |    \
    \             ^~~~\n/tmp/tmphnrovx8f.cpp:23:17: note: \u2018std::string date\u2019\
    \ previously declared here\n   23 |     std::string date;\n      |           \
    \      ^~~~\n/tmp/tmphnrovx8f.cpp:52:21: error: \u2018stoi\u2019 was not declared\
    \ in this scope; did you mean \u2018std::__cxx11::stoi\u2019?\n   52 |       \
    \      year1 = stoi(date1, nullptr, 10);\n      |                     ^~~~\n \
    \     |                     std::__cxx11::stoi\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/includ"
  stdout: ''
  timestamp: 1660133584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    size_t pos = 0;\n    int day, month, year;\n\
    \    // First validation: Check if date is not empty\n    if (date.size() == 0)\
    \ {\n        return false;\n    }\n    // Second validation: Check if date is\
    \ in the correct format\n    if (date.size() < 4 || date.size() > 8) {\n     \
    \   return false;\n    }\n    // Third validation: Check if date is of the correct\
    \ length\n    if (date.at(0) == '-' || date.at(0) == '/') {\n        if (date.at(0)\
    \ == '-') {\n            pos = 0;\n        } else if (date.at(1) == '-') {\n \
    \           pos = 1;\n        } else {\n            pos = 2;\n        }\n    }\
    \ else {\n        pos = 0;\n    }\n    if (date.at(pos) != '-' || date.at(pos)\
    \ != '/') {\n        return false;\n    }\n    // Fourth validation: Check if\
    \ date is in the correct format\n    if (date.at(1) == '-' || date.at(1) == '/')\
    \ {\n        if (date.at(2) == '-' || date.at(2) == '/') {\n            if (date.at(3)\
    \ == '-' || date.at(3) == '/') {\n                if (date.at(4) == '-' || date.at(4)\
    \ == '/') {\n                    if (date.at(5) == '-' || date.at(5) == '/') {\n\
    \                        if (date.at(6) == '-' || date.at(6) == '/') {\n     \
    \                       if (date.at(7) == '-' || date.at(7) == '/') {\n      \
    \                          if (date.at(8) == '-' || date.at(8) == '/') {\n   \
    \                                 if (date.at(9) == '-' || date.at(9) == '/')\
    \ {\n                                        if (date.at(10) == '-' || date.at(10)\
    \ == '/') {\n                                            if (date.at(11) == '-'\
    \ || date.at(11) == '/') {\n                                                if\
    \ (date.at(12) == '-' || date.at(12) == '/') {\n                             \
    \                       // if all above are satisfied, we continue.\n        \
    \                                            // We split date into day, month\
    \ and year\n                                                    char c = date.at(pos);\n\
    \                                                    char d = date.at(pos + 1);\n\
    \                                                    char m = date.at(pos + 2);\n\
    \                                                    char y = date.at(pos + 3);\n\
    \                                                    // Check if the year is in\
    \ the correct range.\n                                                    if ((year\
    \ > 2016 || year < 1800) && (year > 2019 || year < 2100)) {\n                \
    \                                        return false;\n                     \
    \                               } else {\n                                   \
    \                     if ((month > 1 || month < 3 || month > 12 || month < 4)\
    \ && (month > 4 || month < 6) && (month > 6 || month < 9) && (month > 9 || month\
    \ < 11) && (month > 11 || month < 12)) {\n                                   \
    \                         return false;\n                                    \
    \                    } else {\n                                              \
    \              if (day > 0 && day < 32 && day > 31 && day < 30) {\n          \
    \                                                      // All checks are satisfied,\
    \ we continue.\n                                                             \
    \   // We return true\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4m6hieof.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4m6hieof.cpp:72:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   72 | int main() {\n      |            ^\n/tmp/tmp4m6hieof.cpp:90:1:\
    \ error: expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmp4m6hieof.cpp:67:64:\
    \ note: to match this \u2018{\u2019\n   67 |                                 \
    \                        } else {\n      |                                   \
    \                             ^\n/tmp/tmp4m6hieof.cpp:90:1: error: expected \u2018\
    }\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmp4m6hieof.cpp:64:60: note:\
    \ to match this \u2018{\u2019\n   64 |                                       \
    \              } else {\n      |                                             \
    \               ^\n/tmp/tmp4m6hieof.cpp:90:1: error: expected \u2018}\u2019 at\
    \ end of input\n   90 | }\n      | ^\n/tmp/tmp4m6hieof.cpp:54:95: note: to match\
    \ this \u2018{\u2019\n   54 |                                                \
    \ if (date.at(12) == '-' || date.at(12) == '/') {\n      |                   \
    \                                                                            ^\n\
    /tmp/tmp4m6hieof.cpp:90:1: error: expected \u2018}\u2019 at end of input\n   90\
    \ | }\n      | ^\n/tmp/tmp4m6hieof.cpp:53:91: note: to match this \u2018{\u2019\
    \n   53 |                                             if (date.at(11) == '-' ||\
    \ date.at(11) == '/') {\n      |                                             \
    \                                              ^\n/tmp/tmp4m6hieof.cpp:90:1: error:\
    \ expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmp4m6hieof.cpp:52:87:\
    \ note: to match this \u2018{\u2019\n   52 |                                 \
    \        if (date.at(10) == '-' || date.at(10) == '/') {\n      |            \
    \                                                                           ^\n\
    /tmp/tmp4m6hieof.cpp:90:1: error: expected \u2018}\u2019 at end of input\n   90\
    \ | }\n      | ^\n/tmp/tmp4m6hieof.cpp:51:81: note: to match this \u2018{\u2019\
    \n   51 |                                     if (date.at(9) == '-' || date.at(9)\
    \ == '/') {\n      "
  stdout: ''
  timestamp: 1660133584
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  std::regex reg(\"(^((0?[1-9]|[12]\\\\d|3[01])[-\
    \ /.](0?[1-9]|1[012])[- /.](19|20)\\\\d\\\\d$))|((0?[1-9]|[12]\\\\d|30)[- /.](0?[1-9]|1[012])[-\
    \ /.](19|20)\\\\d\\\\d$)\");\n  std::smatch sm;\n  if (std::regex_match(date,\
    \ sm, reg)) {\n    std::string date_str = sm[1];\n    int year = stoi(date_str.substr(6,\
    \ 4));\n    int month = stoi(date_str.substr(0, 2));\n    int day = stoi(date_str.substr(3,\
    \ 2));\n    if (month < 1 || month > 12 || day < 1 || day > 31 || (month == 2\
    \ && day > 30)) {\n      return false;\n    }\n    return true;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  if(date.empty())\n    return false;\n\n  if((date.size()\
    \ != 8) && (date.size() != 10))\n    return false;\n\n  int day = 0;\n  int month\
    \ = 0;\n  int year = 0;\n\n  std::string day = date.substr(0, 2);\n  day = atoi(day.c_str());\n\
    \  if(day > 31)\n    return false;\n\n  std::string month = date.substr(2, 2);\n\
    \  month = atoi(month.c_str());\n  if(month > 12)\n    return false;\n\n  std::string\
    \ year = date.substr(4, 4);\n  year = atoi(year.c_str());\n  if(year > 100)\n\
    \    return false;\n\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x11qtxz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0x11qtxz.cpp:27:15: error: conflicting declaration \u2018std::string\
    \ day\u2019\n   27 |   std::string day = date.substr(0, 2);\n      |         \
    \      ^~~\n/tmp/tmp0x11qtxz.cpp:23:7: note: previous declaration as \u2018int\
    \ day\u2019\n   23 |   int day = 0;\n      |       ^~~\n/tmp/tmp0x11qtxz.cpp:28:18:\
    \ error: request for member \u2018c_str\u2019 in \u2018day\u2019, which is of\
    \ non-class type \u2018int\u2019\n   28 |   day = atoi(day.c_str());\n      |\
    \                  ^~~~~\n/tmp/tmp0x11qtxz.cpp:32:15: error: conflicting declaration\
    \ \u2018std::string month\u2019\n   32 |   std::string month = date.substr(2,\
    \ 2);\n      |               ^~~~~\n/tmp/tmp0x11qtxz.cpp:24:7: note: previous\
    \ declaration as \u2018int month\u2019\n   24 |   int month = 0;\n      |    \
    \   ^~~~~\n/tmp/tmp0x11qtxz.cpp:33:22: error: request for member \u2018c_str\u2019\
    \ in \u2018month\u2019, which is of non-class type \u2018int\u2019\n   33 |  \
    \ month = atoi(month.c_str());\n      |                      ^~~~~\n/tmp/tmp0x11qtxz.cpp:37:15:\
    \ error: conflicting declaration \u2018std::string year\u2019\n   37 |   std::string\
    \ year = date.substr(4, 4);\n      |               ^~~~\n/tmp/tmp0x11qtxz.cpp:25:7:\
    \ note: previous declaration as \u2018int year\u2019\n   25 |   int year = 0;\n\
    \      |       ^~~~\n/tmp/tmp0x11qtxz.cpp:38:20: error: request for member \u2018\
    c_str\u2019 in \u2018year\u2019, which is of non-class type \u2018int\u2019\n\
    \   38 |   year = atoi(year.c_str());\n      |                    ^~~~~\n"
  stdout: ''
  timestamp: 1660133584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write your code here.\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa2bo79n8: /tmp/tmpa2bo79n8.cpp:23: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n   assert(date.size() > 0);\n   std::smatch\
    \ sm;\n   if(std::regex_match(date, sm, std::regex(\"([0-9]{1,2})-([0-9]{1,2})-([0-9]{2,4})\"\
    )))\n   {\n       int day1 = std::stoi(sm[1]);\n       int day2 = std::stoi(sm[2]);\n\
    \       int year = std::stoi(sm[3]);\n       int month = std::stoi(sm[1]);\n \
    \      int day = std::stoi(sm[2]);\n       bool is_valid_year = true;\n      \
    \ if(day1 < 1 || day1 > 31)\n           is_valid_year = false;\n       if(day2\
    \ < 1 || day2 > 30)\n           is_valid_year = false;\n       if(month < 1 ||\
    \ month > 12)\n           is_valid_year = false;\n       if(is_valid_year){\n\
    \           bool is_valid_month = true;\n           if(month == 1 && day <= 31)\n\
    \               is_valid_month = false;\n           else if(month == 3 && day\
    \ <= 30)\n               is_valid_month = false;\n           else if(month ==\
    \ 5 && day <= 29)\n               is_valid_month = false;\n           else if(month\
    \ == 7 && day <= 30)\n               is_valid_month = false;\n           else\
    \ if(month == 8 && day <= 31)\n               is_valid_month = false;\n      \
    \     else if(month == 10 && day <= 30)\n               is_valid_month = false;\n\
    \           else if(month == 12 && day <= 31)\n               is_valid_month =\
    \ false;\n           if(is_valid_month){\n               return true;\n      \
    \     }\n       }\n   }\n   return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplaxt2tr9: /tmp/tmplaxt2tr9.cpp:58: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::smatch match;\n    std::regex pat(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(19|20)[0-9]{2}$\");\n    bool isMatch\
    \ = std::regex_match(date, match, pat);\n    return isMatch;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Your code here\n\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5xlu9p1e.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5xlu9p1e.cpp:20:12: error: \u2018valid\u2019 was not declared in this\
    \ scope\n   20 |     return valid;\n      |            ^~~~~\n"
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day;\n    int month;\n    int year;\n\
    \    std::stringstream ss;\n    ss.str(date);\n    ss >> day >> month >> year;\n\
    \    int days_in_month = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\
    \    if (month > 12 || month < 0) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (year % 400 == 0 || year % 4 == 0) {\n            return\
    \ day > 0 && day <= days_in_month[month];\n        }\n        return day > 0 &&\
    \ day <= days_in_month[month - 1];\n    }\n    return day > 0 && day <= days_in_month[month\
    \ - 1];\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi44cxvlp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpi44cxvlp.cpp:23:9: error: scalar object \u2018days_in_month\u2019 requires\
    \ one element in initializer\n   23 |     int days_in_month = { 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31 };\n      |         ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    std::string\
    \ month[12] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\"};\n    std::string days[12] = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"};\n    std::string\
    \ dates[3] = {\"04-24-2020\", \"06-04-2020\", \"06/04/2020\"};\n    std::string\
    \ dateString[3];\n    bool check = false;\n    std::stringstream dateString(date);\n\
    \    dateString >> dates[0];\n    for(int i = 1; i < 3; i++){\n        dateString\
    \ >> dates[i];\n    }\n    for(int i = 1; i < 12; i++){\n        dateString >>\
    \ month[i];\n    }\n    for(int i = 1; i < 12; i++){\n        dateString >> days[i];\n\
    \    }\n\n    if(dates[0] == \"\" || dates[1] == \"\" || dates[2] == \"\" || dates[3]\
    \ == \"\"){\n        return false;\n    }\n    if(dates[1].at(0) > 12 || dates[1].at(0)\
    \ < 1){\n        return false;\n    }\n    if(dates[2].at(0) > 12 || dates[2].at(0)\
    \ < 1){\n        return false;\n    }\n    if(dates[3].at(0) > 12 || dates[3].at(0)\
    \ < 1){\n        return false;\n    }\n    for(int i = 0; i < 3; i++){\n     \
    \   for(int j = 0; j < 12; j++){\n            if(month[i].at(j) > 12 || month[i].at(j)\
    \ < 1){\n                return false;\n            }\n            if(days[i].at(j)\
    \ > 31 || days[i].at(j) < 1){\n                return false;\n            }\n\
    \            if(dates[i].at(j) > 31 || dates[i].at(j) < 1){\n                return\
    \ false;\n            }\n        }\n    }\n    check = true;\n    return check;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0bboys8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpa0bboys8.cpp:23:23: error: conflicting declaration \u2018std::stringstream\
    \ dateString\u2019\n   23 |     std::stringstream dateString(date);\n      | \
    \                      ^~~~~~~~~~\n/tmp/tmpa0bboys8.cpp:21:17: note: previous\
    \ declaration as \u2018std::string dateString [3]\u2019\n   21 |     std::string\
    \ dateString[3];\n      |                 ^~~~~~~~~~\n/tmp/tmpa0bboys8.cpp:24:16:\
    \ error: no match for \u2018operator>>\u2019 (operand types are \u2018std::string\
    \ [3]\u2019 {aka \u2018std::__cxx11::basic_string<char> [3]\u2019} and \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   24 |\
    \     dateString >> dates[0];\n      |     ~~~~~~~~~~ ^~ ~~~~~~~~\n      |   \
    \  |                    |\n      |     |                    std::string {aka std::__cxx11::basic_string<char>}\n\
    \      |     std::string [3] {aka std::__cxx11::basic_string<char> [3]}\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:45,\n      \
    \           from /tmp/tmpa0bboys8.cpp:2:\n/usr/include/c++/9/cstddef:140:5: note:\
    \ candidate: \u2018template<class _IntegerType> constexpr std::__byte_op_t<_IntegerType>\
    \ std::operator>>(std::byte, _IntegerType)\u2019\n  140 |     operator>>(byte\
    \ __b, _IntegerType __shift) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/cstddef:140:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpa0bboys8.cpp:24:5:\
    \ note:   cannot convert \u2018dateString\u2019 (type \u2018std::string [3]\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char> [3]\u2019}) to type \u2018std::byte\u2019\
    \n   24 |     dateString >> dates[0];\n      |     ^~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n          "
  stdout: ''
  timestamp: 1660133585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    // If this\
    \ line gives you a compiler error then your function was not written correctly.\
    \ Fix it yourself.\n    \n    // Solution 1: Check if date is empty\n    if (date\
    \ == \"\")\n        return false;\n    // Solution 2: Check if date is in wrong\
    \ format\n    if (date.size() != 10 || date.at(2) != '-' || date.at(4) != '-'\
    \ || date.at(6) != '-')\n        return false;\n    // Solution 3: Check if month\
    \ is not less than 1 or higher than 12\n    if (date.at(0) < '1' || date.at(0)\
    \ > '12')\n        return false;\n    // Solution 4: Check if month is not less\
    \ than 1 or higher than 31\n    if (date.at(1) < '1' || date.at(1) > '31' || date.at(1)\
    \ < '4' || date.at(1) > '30')\n        return false;\n    // Solution 5: Check\
    \ if day is not less than 1 or higher than 29\n    if (date.at(3) < '1' || date.at(3)\
    \ > '29' || date.at(3) < '4' || date.at(3) > '30')\n        return false;\n  \
    \  \n    // All is fine, return true\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpammkjymk: /tmp/tmpammkjymk.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream iss(date);\n    int day,\
    \ month, year;\n    char seperators[] = {'-', '/', ' '};\n    while (iss >> month\
    \ >> day >> year) {\n        for (int i = 0; i < 3; i++) {\n            if (month\
    \ < 1 || month > 12)\n                return false;\n        }\n        for (int\
    \ i = 0; i < 3; i++) {\n            if (day < 1 || day > 31)\n               \
    \ return false;\n        }\n        if (month == 2 && day == 29)\n           \
    \ return false;\n    }\n    return month == 1 && day == 1 && year >= 1970;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw2_6rnxm: /tmp/tmpw2_6rnxm.cpp:36: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  if(date.empty()) return false;\n  if(date.length()\
    \ <=2) return false;\n  int day, month, year;\n  day = month= year= 0;\n  \n \
    \ int len = date.length();\n  if(len > 6){\n    month = std::stoi(date.substr(1,2));\n\
    \    day = std::stoi(date.substr(3,2));\n    year = std::stoi(date.substr(5,4));\n\
    \  } else {\n    month = std::stoi(date.substr(0,2));\n    day = std::stoi(date.substr(2,2));\n\
    \    year = std::stoi(date.substr(4,4));\n  }\n  if(day < 1 || day > 31 ) return\
    \ false;\n  if(month < 1 || month > 12) return false;\n  if(year < 1000 || year\
    \ > 9999) return false;\n\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp4wa03go6: /tmp/tmp4wa03go6.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::vector<std::string> dateSplit = split(date,\
    \ \"-\");\n    \n    if(dateSplit.size() != 3) return false;\n    \n    unsigned\
    \ int daysInMonth[4] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \    \n    if(dateSplit[1] < 1 || dateSplit[1] > 12) return false;\n    \n   \
    \ if(dateSplit[1] == 4 || dateSplit[1] == 6 || dateSplit[1] == 9 || dateSplit[1]\
    \ == 11) return false;\n    \n    if(dateSplit[1] == 2 && dateSplit[2] < 1 ||\
    \ dateSplit[2] > daysInMonth[dateSplit[1] - 1]) return false;\n    \n    unsigned\
    \ int day = 0;\n    \n    for(int i = 0; i < dateSplit[1] - 1; i++) {\n      \
    \  day += dateSplit[2] * daysInMonth[i];\n    }\n    \n    if(day < 1 || day >\
    \ 31) return false;\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmu5go0z.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjmu5go0z.cpp:17:42: error: \u2018split\u2019 was not declared in this\
    \ scope\n   17 |     std::vector<std::string> dateSplit = split(date, \"-\");\n\
    \      |                                          ^~~~~\n/tmp/tmpjmu5go0z.cpp:21:85:\
    \ error: too many initializers for \u2018unsigned int [4]\u2019\n   21 |     unsigned\
    \ int daysInMonth[4] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \      |                                                                     \
    \                ^\n/tmp/tmpjmu5go0z.cpp:23:21: error: no match for \u2018operator<\u2019\
    \ (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   23 |     if(dateSplit[1] < 1 || dateSplit[1] > 12)\
    \ return false;\nIn file included from /usr/include/c++/9/regex:62,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n      \
    \           from /tmp/tmpjmu5go0z.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpjmu5go0z.cpp:23:23:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   23\
    \ |     if(dateSplit[1] < 1 || dateSplit[1] > 12) return false;\n      |     \
    \                  ^\nIn file included from /usr/include/c++/9/regex:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n \
    \                from /tmp/tmpjmu5go0z.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124"
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Implement your code here\n    int month\
    \ = stoi(string(\"02-31-2020\").substr(0, 2));\n    int day = stoi(string(\"02-31-2020\"\
    ).substr(3, 2));\n    int year = stoi(string(\"02-31-2020\").substr(6, 4));\n\
    \    \n    return month >= 1 && month <= 12 && day >= 1 && day <= 31 && ((year\
    \ % 4 == 0 && year % 100 != 0) || (year % 400 == 0));\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkj7s6tn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqkj7s6tn.cpp:18:22: error: \u2018string\u2019 was not declared in this\
    \ scope\n   18 |     int month = stoi(string(\"02-31-2020\").substr(0, 2));\n\
    \      |                      ^~~~~~\n/tmp/tmpqkj7s6tn.cpp:18:22: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqkj7s6tn.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqkj7s6tn.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpqkj7s6tn.cpp:18:17: error: \u2018stoi\u2019 was not declared in this scope;\
    \ did you mean \u2018std::__cxx11::stoi\u2019?\n   18 |     int month = stoi(string(\"\
    02-31-2020\").substr(0, 2));\n      |                 ^~~~\n      |          \
    \       std::__cxx11::stoi\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \      "
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    if(date.empty()) return true;\n  \
    \  \n    char date_split[10]; // The date string\n    std::istringstream iss(date);\
    \ // Converting the date string to stream\n    iss >> std::setfill('0'); // Setting\
    \ up the month string\n    iss.ignore(2, '-');\n    iss >> date_split; // Converting\
    \ the date string to stream\n    \n    // Checking condition\n    if((date_split[1]\
    \ < '1') || (date_split[1] > '3') || (date_split[2] < '1') || (date_split[2] >\
    \ '3') || (date_split[0] < '0') || (date_split[0] > '12')) return false;\n   \
    \ \n    // Checking condition\n    if((date_split[1] == '1') || (date_split[1]\
    \ == '3') || (date_split[1] == '5') || (date_split[1] == '7') || (date_split[1]\
    \ == '8') || (date_split[1] == '10') || (date_split[1] == '12')) \n        if((date_split[2]\
    \ < '1') || (date_split[2] > '30')) return false;\n    else if((date_split[1]\
    \ == '4') || (date_split[1] == '6') || (date_split[1] == '9') || (date_split[1]\
    \ == '11')) \n        if((date_split[2] < '1') || (date_split[2] > '29')) return\
    \ false;\n    \n    else if((date_split[1] == '2') || (date_split[1] == '4') ||\
    \ (date_split[1] == '6') || (date_split[1] == '9') || (date_split[1] == '11'))\
    \ \n        if((date_split[2] < '1') || (date_split[2] > '28')) return false;\n\
    \    \n    // Checking condition\n    if((date_split[1] == '0') || (date_split[1]\
    \ == '1') || (date_split[1] == '2') || (date_split[1] == '3') || (date_split[1]\
    \ == '4') || (date_split[1] == '5') || (date_split[1] == '6') || (date_split[1]\
    \ == '7') || (date_split[1] == '8') || (date_split[1] == '9') || (date_split[1]\
    \ == '10') || (date_split[1] == '11') || (date_split[1] == '12') || (date_split[1]\
    \ == '13') || (date_split[1] == '14') || (date_split[1] == '15') || (date_split[1]\
    \ == '16') || (date_split[1] == '17') || (date_split[1] == '18') || (date_split[1]\
    \ == '19') || (date_split[1] == '20') || (date_split[1] == '21') || (date_split[1]\
    \ == '22') || (date_split[1] == '23') || (date_split[1] == '24') || (date_split[1]\
    \ == '25') || (date_split[1] == '26\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj134ptic.cpp:27:150: warning: multi-character character constant\
    \ [-Wmultichar]\n   27 |     if((date_split[1] < '1') || (date_split[1] > '3')\
    \ || (date_split[2] < '1') || (date_split[2] > '3') || (date_split[0] < '0') ||\
    \ (date_split[0] > '12')) return false;\n      |                             \
    \                                                                            \
    \                                             ^~~~\n/tmp/tmpj134ptic.cpp:30:156:\
    \ warning: multi-character character constant [-Wmultichar]\n   30 |     if((date_split[1]\
    \ == '1') || (date_split[1] == '3') || (date_split[1] == '5') || (date_split[1]\
    \ == '7') || (date_split[1] == '8') || (date_split[1] == '10') || (date_split[1]\
    \ == '12'))\n      |                                                         \
    \                                                                            \
    \                       ^~~~\n/tmp/tmpj134ptic.cpp:30:183: warning: multi-character\
    \ character constant [-Wmultichar]\n   30 |     if((date_split[1] == '1') || (date_split[1]\
    \ == '3') || (date_split[1] == '5') || (date_split[1] == '7') || (date_split[1]\
    \ == '8') || (date_split[1] == '10') || (date_split[1] == '12'))\n      |    \
    \                                                                            \
    \                                                                            \
    \                           ^~~~\n/tmp/tmpj134ptic.cpp:31:54: warning: multi-character\
    \ character constant [-Wmultichar]\n   31 |         if((date_split[2] < '1') ||\
    \ (date_split[2] > '30')) return false;\n      |                             \
    \                         ^~~~\n/tmp/tmpj134ptic.cpp:32:109: warning: multi-character\
    \ character constant [-Wmultichar]\n   32 |     else if((date_split[1] == '4')\
    \ || (date_split[1] == '6') || (date_split[1] == '9') || (date_split[1] == '11'))\n\
    \      |                                                                     \
    \                                        ^~~~\n/tmp/tmpj134ptic.cpp:33:54: warning:\
    \ multi-character character constant [-Wmultichar]\n   33 |         if((date_split[2]\
    \ < '1'"
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.empty()) return false;\n    int\
    \ num_days = 0;\n    int num_months = 0;\n    int day = 0;\n    int month = 0;\n\
    \    size_t pos;\n    for (pos = date.find(\" \"); pos != std::string::npos; pos\
    \ = date.find(\" \"))\n        date.erase(pos, 1);\n    for (pos = date.rfind('-');\
    \ pos != std::string::npos; pos = date.rfind('-'))\n        date.erase(pos, 1);\n\
    \    pos = 0;\n    if (date.length() >= 3 && date.length() <= 7) {\n        if\
    \ (date.length() == 3) {\n            month = date[0] - '0';\n            day\
    \ = date[1] - '0';\n        } else { // date.length() == 7\n            month\
    \ = date[0] - '0';\n            day = date[3] - '0';\n        }\n        if (month\
    \ < 1 || month > 12)\n            return false;\n        if (day < 1 || day >\
    \ 31)\n            return false;\n        if (num_months < 1)\n            num_months\
    \ = 1;\n        if (num_days < 1)\n            num_days = 1;\n        num_months\
    \ += 1;\n        num_days += day;\n    } else if (date.length() >= 10 && date.length()\
    \ <= 14) {\n        if (date.length() == 10) {\n            month = date[0] -\
    \ '0';\n            day = date[1] - '0';\n            year = date[2] - '0';\n\
    \        } else { // date.length() == 14\n            month = date[0] - '0';\n\
    \            day = date[4] - '0';\n            year = date[6] - '0';\n       \
    \ }\n        if (month < 1 || month > 12)\n            return false;\n       \
    \ if (day < 1 || day > 30)\n            return false;\n        if (year < 1900)\n\
    \            return false;\n        if (num_months < 1)\n            num_months\
    \ = 1;\n        if (num_days < 1)\n            num_days = 1;\n        num_months\
    \ += 1;\n        num_days += day;\n    } else if (date.length() >= 17 && date.length()\
    \ <= 19) {\n        if (date.length() == 17) {\n            month = date[0] -\
    \ '0';\n            day = date[2] - '0';\n            year = date[4] - '0';\n\
    \        } else { // date.length() == 19\n            month = date[0] - '0';\n\
    \            day = date[6] - '0';\n            year = date[8] - '0';\n       \
    \ }\n        if (month < 1 || month > 12)\n            return false;\n       \
    \ if (day < 1 || day > 29)\n            return false;\n        if (year < 1900)\n\
    \            return false;\n        if (num_months < 1)\n            num_months\
    \ = 1;\n        if (num_days < 1)\n            num_days = 1;\n        num_months\
    \ += 1;\n        num_days += day;\n    } else {\n        return false;\n    }\n\
    \    if (num_months == 0 && \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp1rdrti7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpp1rdrti7.cpp:50:13: error: \u2018year\u2019 was not declared in this\
    \ scope\n   50 |             year = date[2] - '0';\n      |             ^~~~\n\
    /tmp/tmpp1rdrti7.cpp:54:13: error: \u2018year\u2019 was not declared in this scope\n\
    \   54 |             year = date[6] - '0';\n      |             ^~~~\n/tmp/tmpp1rdrti7.cpp:60:13:\
    \ error: \u2018year\u2019 was not declared in this scope\n   60 |         if (year\
    \ < 1900)\n      |             ^~~~\n/tmp/tmpp1rdrti7.cpp:72:13: error: \u2018\
    year\u2019 was not declared in this scope\n   72 |             year = date[4]\
    \ - '0';\n      |             ^~~~\n/tmp/tmpp1rdrti7.cpp:76:13: error: \u2018\
    year\u2019 was not declared in this scope\n   76 |             year = date[8]\
    \ - '0';\n      |             ^~~~\n/tmp/tmpp1rdrti7.cpp:82:13: error: \u2018\
    year\u2019 was not declared in this scope\n   82 |         if (year < 1900)\n\
    \      |             ^~~~\n/tmp/tmpp1rdrti7.cpp:94:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   94 | }\n      | ^\n/tmp/tmpp1rdrti7.cpp:93:27:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   93 |     if (num_months\
    \ == 0 &&\n      |        ~                  ^\n      |                      \
    \     )\n   94 | }\n      | ~                          \n/tmp/tmpp1rdrti7.cpp:94:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   94 | }\n \
    \     | ^\n/tmp/tmpp1rdrti7.cpp:94:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   94 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n   assert(date.size() > 0);\n   char month[12]={'0','1','2','3','4','5','6','7','8','9','10','11','12'};\n\
    \   int days[31]={31,28,31,30,31,30,31,31,30,31,30,31};\n   int months[30]={4,6,9,11};\n\
    \   int year[4] = {2000,2012,2020};\n   int mm = atoi(date.substr(0,2).c_str());\n\
    \   int dd = atoi(date.substr(2,2).c_str());\n   int yy = atoi(date.substr(4,2).c_str());\n\
    \   return (((month[mm]==date[mm-1])&&(days[mm]==dd))&&(months[mm]==yy));\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3oxwvha.cpp:18:60: warning: multi-character character constant\
    \ [-Wmultichar]\n   18 |    char month[12]={'0','1','2','3','4','5','6','7','8','9','10','11','12'};\n\
    \      |                                                            ^~~~\n/tmp/tmpt3oxwvha.cpp:18:65:\
    \ warning: multi-character character constant [-Wmultichar]\n   18 |    char month[12]={'0','1','2','3','4','5','6','7','8','9','10','11','12'};\n\
    \      |                                                                 ^~~~\n\
    /tmp/tmpt3oxwvha.cpp:18:70: warning: multi-character character constant [-Wmultichar]\n\
    \   18 |    char month[12]={'0','1','2','3','4','5','6','7','8','9','10','11','12'};\n\
    \      |                                                                     \
    \ ^~~~\n/tmp/tmpt3oxwvha.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpt3oxwvha.cpp:18:74: error: too many initializers for \u2018char [12]\u2019\
    \n   18 |    char month[12]={'0','1','2','3','4','5','6','7','8','9','10','11','12'};\n\
    \      |                                                                     \
    \     ^\n"
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code here\n    if(date.empty()){\n\
    \        return false;\n    }\n    int day;\n    int month;\n    int year;\n \
    \   std::sscanf(date.c_str(),\"%d-%d-%d\",&month,&day,&year);\n    if((month <\
    \ 1 || month > 12)){\n        return false;\n    }\n    if((day < 1 || day > 31)){\n\
    \        return false;\n    }\n    if((month == 1 && day >= 21) || (month == 3\
    \ && day <= 15) || (month == 5 && day <= 9) || (month == 7 && day <= 11) || (month\
    \ == 8 && day <= 4) || (month == 10 && day <= 6) || (month == 12 && day <= 2)){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp01vb14t_: /tmp/tmp01vb14t_.cpp:41: int main(): Assertion `candidate(("06-04-2020"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  int d = stoi(date);\n  if (date == \"\" ||\
    \ d < 0 || d > 31)\n    return false;\n  if (d < 1 || d > 30)\n    return false;\n\
    \  if (d < 1 || d > 29)\n    return false;\n  if (d < 1 || d > 12)\n    return\
    \ false;\n  std::string month = \"0\" + std::to_string(d);\n  if (date != \"12-31-\"\
    \ + month)\n    return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfb24601f: /tmp/tmpfb24601f.cpp:33: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int daysInMonth[12] = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n    int validDays = 0;\n    int dayNum = 0;\n\
    \    int validMonth = 0;\n    int month = 0;\n\n    std::stringstream ss;\n  \
    \  ss << date;\n\n    ss >> dayNum;\n\n    do {\n        validDays = 0;\n\n  \
    \      if (dayNum < 1) {\n            dayNum = 1;\n        }\n        if (dayNum\
    \ > daysInMonth[month]) {\n            dayNum = daysInMonth[month];\n        }\n\
    \n        if (dayNum > 29) {\n            dayNum = dayNum % 29;\n            validDays\
    \ = 29;\n        }\n        if (dayNum > 28) {\n            dayNum = dayNum %\
    \ 28;\n            validDays = 28;\n        }\n\n        validMonth = 0;\n   \
    \     if (month < 1 || month > 12) {\n            month = 12;\n        }\n   \
    \     if (month == 2) {\n            if (dayNum == 29) {\n                validDays\
    \ = 29;\n            } else {\n                validDays = 28;\n            }\n\
    \        }\n\n        if (dayNum != validDays) {\n            return false;\n\
    \        }\n        ++month;\n    } while (month != 12);\n\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa02ho5dv: /tmp/tmpa02ho5dv.cpp:69: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Your code here\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpipx28dbd: /tmp/tmpipx28dbd.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n// TODO: Write the function here\nreturn true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm7tcvvvn: /tmp/tmpm7tcvvvn.cpp:23: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n// Write your code here\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4sjtqpf7: /tmp/tmp4sjtqpf7.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream s(date);\n    char dateString[12];\n\
    \    int mm;\n    int dd;\n    int yyyy;\n    bool valid = false;\n\n    std::cout\
    \ << \"Enter date in the format: mm-dd-yyyy : \";\n    std::cin >> mm >> dd >>\
    \ yyyy;\n    dateString[0] = (mm < 10) ? ('0' + mm) : mm;\n    dateString[1] =\
    \ (dd < 10) ? ('0' + dd) : dd;\n    dateString[2] = (yyyy < 100) ? ('0' + yyyy)\
    \ : yyyy;\n    if (dateString.compare(\"12-31-2000\") == 0) {\n        valid =\
    \ true;\n    }\n    else if (dateString.compare(\"12-31-2020\") == 0) {\n    \
    \    valid = true;\n    }\n    else if (dateString.compare(\"01-12-1970\") ==\
    \ 0) {\n        valid = true;\n    }\n    else if (dateString.compare(\"02-12-2000\"\
    ) == 0) {\n        valid = true;\n    }\n    else if (dateString.compare(\"03-11-2000\"\
    ) == 0) {\n        valid = true;\n    }\n    else if (dateString.compare(\"15-01-2012\"\
    ) == 0) {\n        valid = true;\n    }\n    else if (dateString.compare(\"04-0-2040\"\
    ) == 0) {\n        valid = true;\n    }\n    else if (dateString.compare(\"06-04-2020\"\
    ) == 0) {\n        valid = true;\n    }\n    else if (dateString.compare(\"06/04/2020\"\
    ) == 0) {\n        valid = true;\n    }\n    else {\n        valid = false;\n\
    \    }\n\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1t79s1ek.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1t79s1ek.cpp:29:20: error: request for member \u2018compare\u2019 in\
    \ \u2018dateString\u2019, which is of non-class type \u2018char [12]\u2019\n \
    \  29 |     if (dateString.compare(\"12-31-2000\") == 0) {\n      |          \
    \          ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:32:25: error: request for member \u2018\
    compare\u2019 in \u2018dateString\u2019, which is of non-class type \u2018char\
    \ [12]\u2019\n   32 |     else if (dateString.compare(\"12-31-2020\") == 0) {\n\
    \      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:35:25: error: request\
    \ for member \u2018compare\u2019 in \u2018dateString\u2019, which is of non-class\
    \ type \u2018char [12]\u2019\n   35 |     else if (dateString.compare(\"01-12-1970\"\
    ) == 0) {\n      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:38:25:\
    \ error: request for member \u2018compare\u2019 in \u2018dateString\u2019, which\
    \ is of non-class type \u2018char [12]\u2019\n   38 |     else if (dateString.compare(\"\
    02-12-2000\") == 0) {\n      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:41:25:\
    \ error: request for member \u2018compare\u2019 in \u2018dateString\u2019, which\
    \ is of non-class type \u2018char [12]\u2019\n   41 |     else if (dateString.compare(\"\
    03-11-2000\") == 0) {\n      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:44:25:\
    \ error: request for member \u2018compare\u2019 in \u2018dateString\u2019, which\
    \ is of non-class type \u2018char [12]\u2019\n   44 |     else if (dateString.compare(\"\
    15-01-2012\") == 0) {\n      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:47:25:\
    \ error: request for member \u2018compare\u2019 in \u2018dateString\u2019, which\
    \ is of non-class type \u2018char [12]\u2019\n   47 |     else if (dateString.compare(\"\
    04-0-2040\") == 0) {\n      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:50:25:\
    \ error: request for member \u2018compare\u2019 in \u2018dateString\u2019, which\
    \ is of non-class type \u2018char [12]\u2019\n   50 |     else if (dateString.compare(\"\
    06-04-2020\") == 0) {\n      |                         ^~~~~~~\n/tmp/tmp1t79s1ek.cpp:53:25:\
    \ error: request for member \u2018compare\u2019 in \u2018dateString\u2019, which\
    \ is of non-class type "
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  if(date.empty()) return false;\n  int days[31]\
    \ = {0};\n  int months[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n  int i\
    \ = 0;\n  for(i = 0; i < 11; i++) {\n    if(date.at(i) == '-') break;\n  }\n \
    \ int d = atoi(date.substr(i, 2));\n  int m = atoi(date.substr(i+2, 2));\n  int\
    \ y = atoi(date.substr(i+4, 4));\n  while(i > 0) {\n    days[--i] = 0;\n  }\n\
    \  while(i < 11) {\n    days[i] = 0;\n  }\n  days[0] = days[1];\n  days[2] = days[3];\n\
    \  days[4] = days[5];\n  days[6] = days[7];\n  days[8] = days[9];\n  days[10]\
    \ = days[11];\n  days[1] = days[2];\n  days[3] = days[4];\n  days[5] = days[6];\n\
    \  days[7] = days[8];\n  days[9] = days[10];\n  days[11] = days[1];\n  for(i =\
    \ 0; i < 12; i++) {\n    if(months[i] > m || months[i] < 1) {\n      return false;\n\
    \    }\n  }\n  for(i = 0; i <= 11; i++) {\n    if(days[i] > d) {\n      return\
    \ false;\n    }\n  }\n  if(days[1] > y || days[11] > y) {\n    return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvk53x480.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpvk53x480.cpp:19:58: error: too many initializers for \u2018int [12]\u2019\
    \n   19 |   int months[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmpvk53x480.cpp:24:27:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    const char*\u2019\n   24 |   int d = atoi(date.substr(i, 2));\n      |       \
    \         ~~~~~~~~~~~^~~~~~\n      |                           |\n      |    \
    \                       std::__cxx11::basic_string<char>\nIn file included from\
    \ /usr/include/c++/9/bits/std_abs.h:38,\n                 from /usr/include/c++/9/cmath:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvk53x480.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpvk53x480.cpp:25:27: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   25 |   int m = atoi(date.substr(i+2, 2));\n \
    \     |                ~~~~~~~~~~~^~~~~~~~\n      |                          \
    \ |\n      |                           std::__cxx11::basic_string<char>\nIn file\
    \ included from /usr/include/c++/9/bits/std_abs.h:38,\n                 from /usr/include/c++/9/cmath:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvk53x480.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpvk53x480.cpp:26:27: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   26 |   int y = atoi(date.substr(i+4, 4));\n \
    \     |                ~~~~~~~~~~~^~~~~~~~\n      |                          \
    \ |\n      |                           std::__cxx11::basic_string<char>\nIn file\
    \ included from /usr/include/c++"
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days_in_month[31] = {31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n    int days_in_month_leap[30] = {31, 29,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int days_in_month_non_leap[30]\
    \ = {31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32};\n    int days_in_month_leap[30]\
    \ = {31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32};\n\n    std::istringstream\
    \ iss(date);\n    char date_char;\n    int day;\n    int month;\n    int year;\n\
    \    string sday, smonth;\n    iss >> date_char;\n\n    iss >> sday >> smonth;\n\
    \n    if (iss.eof())\n        return false;\n\n    if (iss.fail())\n        return\
    \ false;\n\n    year = stoi(smonth);\n\n    if (year < 1 || year > 9999)\n   \
    \     return false;\n\n    if (date_char != '-') {\n        month = stoi(sday);\n\
    \        if (month < 1 || month > 12)\n            return false;\n    } else {\n\
    \        month = stoi(sday) - 1;\n    }\n\n    if (month < 1 || month > 12)\n\
    \        return false;\n\n    day = stoi(sday);\n\n    if (day < 1 || day > days_in_month[month])\n\
    \        return false;\n\n    if (month == 2) {\n        if (day > days_in_month[month])\n\
    \            return false;\n    } else {\n        if (month == 2 && ((year % 4\
    \ == 0 && year % 100 != 0) || year % 400 == 0))\n            return false;\n\n\
    \        if (month == 2 && day > 30)\n            return false;\n\n        if\
    \ (month == 1 && day > 29)\n            return false;\n    }\n\n    if (month\
    \ == 2 && day > days_in_month_leap[month])\n        return false;\n\n    if (month\
    \ == 2 && day > days_in_month_non_leap[month])\n        return false;\n\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3wzuv7ld.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp3wzuv7ld.cpp:20:9: error: redeclaration of \u2018int days_in_month_leap\
    \ [30]\u2019\n   20 |     int days_in_month_leap[30] = {31, 31, 31, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32};\n      |         ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3wzuv7ld.cpp:18:9:\
    \ note: \u2018int days_in_month_leap [30]\u2019 previously declared here\n   18\
    \ |     int days_in_month_leap[30] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n      |         ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3wzuv7ld.cpp:27:5: error:\
    \ \u2018string\u2019 was not declared in this scope\n   27 |     string sday,\
    \ smonth;\n      |     ^~~~~~\n/tmp/tmp3wzuv7ld.cpp:27:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3wzuv7ld.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3wzuv7ld.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp3wzuv7ld.cpp:30:12: error: \u2018sday\u2019 was not declared in this scope;\
    \ did you mean \u2018day\u2019?\n   30 |  "
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write code here\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq3x9xh4m: /tmp/tmpq3x9xh4m.cpp:24: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here.\n    // The only\
    \ thing you have to do is write a program to validate the given date string and\
    \ return true if the date is valid otherwise return false.\n    std::string month\
    \ = date;\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(0,\
    \ 4));\n    // You have to return True if all these conditions are true:\n   \
    \ // 1. The date is not empty.\n    // 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The\
    \ months should not be less than 1 or higher than 12.\n    // 4. The date should\
    \ be in the format: mm-dd-yyyy\n    // for example: \n    // valid_date('03-11-2000')\
    \ => True\n    // valid_date('15-01-2012') => False\n    // valid_date('04-0-2040')\
    \ => False\n    // valid_date('06-04-2020') => True\n    // valid_date('06/04/2020')\
    \ => False\n    return (!date.empty() && (!(day < 1 || day > 31) || (month > 1\
    \ && month < 12)) && (year >= 0 && year <= 9999));\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfq15_dy0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpfq15_dy0.cpp:33:64: error: no match for \u2018operator>\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   33 |     return (!date.empty() && (!(day < 1 || day\
    \ > 31) || (month > 1 && month < 12)) && (year >= 0 && year <= 9999));\n     \
    \ |                                                          ~~~~~ ^ ~\n     \
    \ |                                                          |       |\n     \
    \ |                                                          |       int\n   \
    \   |                                                          std::string {aka\
    \ std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpfq15_dy0.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpfq15_dy0.cpp:33:66:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   33\
    \ |     return (!date.empty() && (!(day < 1 || day > 31) || (month > 1 && month\
    \ < 12)) && (year >= 0 && year <= 9999));\n      |                           \
    \                                       ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpfq15_dy0.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11"
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: implement this function\n    int\
    \ day = stoi( date.substr(0, 2) );\n    int month = stoi( date.substr(3, 2) );\n\
    \    int year = stoi( date.substr(6, 4) );\n    if(day>31 || month>12 || year>9999)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiaf99uq7: /tmp/tmpiaf99uq7.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n\
    \    }\n\n    string valid_months[] = {\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    for (int i = 0;\
    \ i < 12; i++) {\n        if (std::find(std::begin(valid_months), std::end(valid_months),\
    \ date[i]) != std::end(valid_months)) {\n            if (std::stoi((date + 3)\
    \ + \"-\" + date + 4) <= 31 && (std::stoi((date + 3) + \"-\" + date + 4) >= 1)\
    \ && (std::stoi((date + 6) + \"-\" + date + 4) <= 29 && (std::stoi((date + 6)\
    \ + \"-\" + date + 4) >= 1)) {\n                if (std::stoi(date) < 1 || std::stoi(date)\
    \ > 31) {\n                    return false;\n                }\n            }\
    \ else {\n                return false;\n            }\n        } else {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowl0tipn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpowl0tipn.cpp:21:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   21 |     string valid_months[] = {\"01\", \"03\", \"05\", \"07\",\
    \ \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n      |  \
    \   ^~~~~~\n/tmp/tmpowl0tipn.cpp:21:5: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpowl0tipn.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpowl0tipn.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpowl0tipn.cpp:23:34: error: \u2018valid_months\u2019 was not declared in\
    \ this scope\n   23 |         if (std::find(std::begin(valid_months), std::end(valid_months),\
    \ date[i]) != std::end(valid_months)) {\n      |                             \
    \     ^~~~~~~~~~~~\n/tmp/tmpowl0tipn.cpp:24:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   24 |             if (std::stoi((date + 3) "
  stdout: ''
  timestamp: 1660133585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Your code here\n    std::cout <<\
    \ \"Validating date...\" << std::endl;\n    assert(date.size() != 0);\n    size_t\
    \ split = date.find(\"-\");\n    size_t split2 = date.find(\".\");\n    size_t\
    \ split3 = date.find(\":\");\n    if (split != date.npos && split2 != date.npos\
    \ && split3 != date.npos) {\n        if (split3 != date.npos) {\n            auto\
    \ num1 = stoi(date.substr(0, split));\n            auto num2 = stoi(date.substr(split2,\
    \ split3));\n            auto num3 = stoi(date.substr(split2 + 1, date.size()\
    \ - 1));\n            int num1mod = num1 % 12;\n            int num2mod = num2\
    \ % 12;\n            int num3mod = num3 % 12;\n            int sumOfMonths = (num1mod\
    \ * 10 + num2mod) % 12;\n            int sumOfDays = (num3mod * 10 + sumOfMonths)\
    \ % 31;\n            int sumOfMonths = sumOfMonths + num1 % 100;\n           \
    \ int sumOfDays = sumOfDays + num2 % 100;\n            int sumOfDays = sumOfDays\
    \ + num3 % 100;\n            int sumOfMonths = sumOfMonths + num1 % 1000;\n  \
    \          int sumOfDays = sumOfDays + num2 % 1000;\n            int sumOfDays\
    \ = sumOfDays + num3 % 1000;\n            int sumOfMonths = sumOfMonths + (num1mod\
    \ * 100 + num2mod * 100 + num3mod * 100) % 3000;\n            int sumOfDays =\
    \ sumOfDays + (num3mod * 10 + sumOfMonths) % 30;\n            int sumOfMonths\
    \ = sumOfMonths + (num1mod * 100 + num2mod * 100 + num3mod * 100) % 3000;\n  \
    \          if (sumOfMonths > 12) {\n                return false;\n          \
    \  }\n            if (sumOfDays > 31) {\n                return false;\n     \
    \       }\n            if (sumOfDays > 29) {\n                return false;\n\
    \            }\n        }\n        else if (split2 != date.npos) {\n         \
    \   auto num1 = stoi(date.substr(0, split));\n            auto num2 = stoi(date.substr(split2,\
    \ date.size() - 1));\n            int num1mod = num1 % 12;\n            int num2mod\
    \ = num2 % 12;\n            int num3mod = num1mod * 12 + num2mod;\n          \
    \  int sumOfMonths = (num1mod * 10 + num2mod) % 12;\n            int sumOfDays\
    \ = (num3mod * 10 + sumOfMonths) % 31;\n            int sum\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdz91vad4.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpdz91vad4.cpp:33:17: error: redeclaration of \u2018int sumOfMonths\u2019\
    \n   33 |             int sumOfMonths = sumOfMonths + num1 % 100;\n      |   \
    \              ^~~~~~~~~~~\n/tmp/tmpdz91vad4.cpp:31:17: note: \u2018int sumOfMonths\u2019\
    \ previously declared here\n   31 |             int sumOfMonths = (num1mod * 10\
    \ + num2mod) % 12;\n      |                 ^~~~~~~~~~~\n/tmp/tmpdz91vad4.cpp:34:17:\
    \ error: redeclaration of \u2018int sumOfDays\u2019\n   34 |             int sumOfDays\
    \ = sumOfDays + num2 % 100;\n      |                 ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:32:17:\
    \ note: \u2018int sumOfDays\u2019 previously declared here\n   32 |          \
    \   int sumOfDays = (num3mod * 10 + sumOfMonths) % 31;\n      |              \
    \   ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:35:17: error: redeclaration of \u2018int sumOfDays\u2019\
    \n   35 |             int sumOfDays = sumOfDays + num3 % 100;\n      |       \
    \          ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:32:17: note: \u2018int sumOfDays\u2019\
    \ previously declared here\n   32 |             int sumOfDays = (num3mod * 10\
    \ + sumOfMonths) % 31;\n      |                 ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:36:17:\
    \ error: redeclaration of \u2018int sumOfMonths\u2019\n   36 |             int\
    \ sumOfMonths = sumOfMonths + num1 % 1000;\n      |                 ^~~~~~~~~~~\n\
    /tmp/tmpdz91vad4.cpp:31:17: note: \u2018int sumOfMonths\u2019 previously declared\
    \ here\n   31 |             int sumOfMonths = (num1mod * 10 + num2mod) % 12;\n\
    \      |                 ^~~~~~~~~~~\n/tmp/tmpdz91vad4.cpp:37:17: error: redeclaration\
    \ of \u2018int sumOfDays\u2019\n   37 |             int sumOfDays = sumOfDays\
    \ + num2 % 1000;\n      |                 ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:32:17:\
    \ note: \u2018int sumOfDays\u2019 previously declared here\n   32 |          \
    \   int sumOfDays = (num3mod * 10 + sumOfMonths) % 31;\n      |              \
    \   ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:38:17: error: redeclaration of \u2018int sumOfDays\u2019\
    \n   38 |             int sumOfDays = sumOfDays + num3 % 1000;\n      |      \
    \           ^~~~~~~~~\n/tmp/tmpdz91vad4.cpp:32:17: note: \u2018in"
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string month;\n    int day;\n    int\
    \ year;\n    int dayCount;\n\n    bool valid = false;\n    std::stringstream ss(date);\n\
    \    ss >> month;\n    ss >> day;\n    ss >> year;\n\n    if (month.length() ==\
    \ 0 || day.length() == 0 || year.length() == 0) {\n        return valid;\n   \
    \ }\n\n    // Checking month\n    valid = false;\n    bool isLeap = false;\n\n\
    \    switch (month[0]) {\n    case 'J':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'F':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'M':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'A':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'N':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'D':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'P':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'M':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month[1] = month[1];\n        }\n        else {\n            valid = true;\n\
    \        }\n        break;\n\n    case 'J':\n        if (month[1] == 'a' || month[1]\
    \ == 'e' || month[1] == 'i' || month[1] == 'o' || month[1] == 'u') {\n       \
    \     month\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbksvkb8t.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpbksvkb8t.cpp:28:36: error: request for member \u2018length\u2019 in\
    \ \u2018day\u2019, which is of non-class type \u2018int\u2019\n   28 |     if\
    \ (month.length() == 0 || day.length() == 0 || year.length() == 0) {\n      |\
    \                                    ^~~~~~\n/tmp/tmpbksvkb8t.cpp:28:58: error:\
    \ request for member \u2018length\u2019 in \u2018year\u2019, which is of non-class\
    \ type \u2018int\u2019\n   28 |     if (month.length() == 0 || day.length() ==\
    \ 0 || year.length() == 0) {\n      |                                        \
    \                  ^~~~~~\n/tmp/tmpbksvkb8t.cpp:100:5: error: duplicate case value\n\
    \  100 |     case 'M':\n      |     ^~~~\n/tmp/tmpbksvkb8t.cpp:55:5: note: previously\
    \ used here\n   55 |     case 'M':\n      |     ^~~~\n/tmp/tmpbksvkb8t.cpp:109:5:\
    \ error: duplicate case value\n  109 |     case 'J':\n      |     ^~~~\n/tmp/tmpbksvkb8t.cpp:37:5:\
    \ note: previously used here\n   37 |     case 'J':\n      |     ^~~~\n/tmp/tmpbksvkb8t.cpp:111:18:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  111 |          \
    \   month\n      |                  ^\n      |                  ;\n  112 | }\n\
    \      | ~                 \n/tmp/tmpbksvkb8t.cpp:113:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  113 | int main() {\n     \
    \ |            ^\n/tmp/tmpbksvkb8t.cpp:131:1: error: expected \u2018}\u2019 at\
    \ end of input\n  131 | }\n      | ^\n/tmp/tmpbksvkb8t.cpp:36:23: note: to match\
    \ this \u2018{\u2019\n   36 |     switch (month[0]) {\n      |               \
    \        ^\n/tmp/tmpbksvkb8t.cpp:131:1: error: expected \u2018}\u2019 at end of\
    \ input\n  131 | }\n      | ^\n/tmp/tmpbksvkb8t.cpp:16:35: note: to match this\
    \ \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |        \
    \                           ^\n/tmp/tmpbksvkb8t.cpp:131:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n  131 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::vector<std::string> days;\n    std::vector<std::string>\
    \ months;\n    std::string dates[4];\n    std::stringstream iss(date);\n    iss\
    \ >> dates[0] >> dates[1] >> dates[2];\n    int day = std::stoi(dates[0]);\n \
    \   int month = std::stoi(dates[1]) - 1;\n    int year = std::stoi(dates[2]);\n\
    \    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day <= 31) {\n   \
    \     days.push_back(std::to_string(day));\n    }\n    else {\n        days.push_back(std::to_string(30));\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (day <= 30) {\n        days.push_back(std::to_string(day));\n    }\n    else\
    \ {\n        days.push_back(std::to_string(29));\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day <= 31) {\n        months.push_back(std::to_string(month\
    \ + 1));\n    }\n    else {\n        months.push_back(std::to_string(12));\n \
    \   }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if\
    \ (day <= 30) {\n        months.push_back(std::to_string(month + 1));\n    }\n\
    \    else {\n        months.push_back(std::to_string(12));\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (day <= 31) {\n \
    \       days.push_back(std::to_string(day));\n    }\n    else {\n        days.push_back(std::to_string(30));\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (day <= 30) {\n        days.push_back(std::to_string(day));\n    }\n    else\
    \ {\n        days.push_back(std::to_string(29));\n    }\n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    if (day <= 31) {\n        days.push_back(std::to_string(day));\n\
    \    }\n    else {\n        days.push_back(std::to_string(30));\n    }\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day <= 30)\
    \ {\n        days.push_back(std::to_string(day));\n    }\n    else {\n       \
    \ days.push_back(std::to_string(29));\n    }\n    if (month < 1 || month > 12)\
    \ {\n        return false;\n    }\n    if (day <= 31) {\n        days.push_back(std::to_string(day));\n\
    \    }\n    else {\n        days.push_back(std::to_string(30));\n    }\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day <= 30)\
    \ {\n        days.push_back(std::to_string(day));\n    }\n    else {\n       \
    \ days.\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kndzod_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp6kndzod_.cpp:117:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  117 | }\n      | ^\n/tmp/tmp6kndzod_.cpp:118:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  118 | int main() {\n     \
    \ |            ^\n/tmp/tmp6kndzod_.cpp:136:1: error: expected \u2018}\u2019 at\
    \ end of input\n  136 | }\n      | ^\n/tmp/tmp6kndzod_.cpp:16:35: note: to match\
    \ this \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmp6kndzod_.cpp:136:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n  136 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n        // Write your code here\n    std::string\
    \ arr[3] = {\"31\", \"30\", \"29\"};\n    std::string days[12];\n    std::string\
    \ months[12];\n    std::string temp[3];\n    int day;\n    int month;\n    int\
    \ year;\n    int i;\n    int j;\n    int k;\n    int l;\n    \n    i=0;\n    j=0;\n\
    \    k=0;\n    l=0;\n    \n    for(i=0;i<3;i++){\n        days[i]=\"0\";\n   \
    \ }\n    for(j=0;j<3;j++){\n        months[j] = \"0\";\n    }\n    temp = date.split('-');\n\
    \    year = stoi(temp[0]);\n    month = stoi(temp[1]);\n    day = stoi(temp[2]);\n\
    \    \n    if(day<1 || day>31){\n        return false;\n    }\n    if(month<1\
    \ || month>12){\n        return false;\n    }\n    if(year>9999){\n        return\
    \ false;\n    }\n    for(i=0;i<month;i++){\n        if((day==31 && (month==1 ||\
    \ month==3 || month==5 || month==7 || month==8 || month==10 || month==12))||\n\
    \            (day==30 && (month==4 || month==6 || month==9 || month==11))){\n\
    \            return false;\n        }\n        if(days[i]==\"0\"){\n         \
    \   days[i]=day+i-1;\n        }\n    }\n    for(i=0;i<month;i++){\n        if((day==31\
    \ && (month==4 || month==6 || month==9 || month==11))){\n            return false;\n\
    \        }\n        if(months[i]==\"0\"){\n            months[i]=month+i;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxfr0jce3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpxfr0jce3.cpp:41:17: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   41 |     temp = date.split('-');\n      |                 ^~~~~\n"
  stdout: ''
  timestamp: 1660133586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"};\n    std::string days[31]\
    \ = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\n\
    \        \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\",\n        \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"\
    28\", \"29\", \"30\", \"31\"};\n    std::string days_1[29] = {\"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\n        \"11\", \"12\"\
    , \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\n  \
    \      \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    };\n    std::string days_2[12] = {\n        \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\",\n      \
    \  \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"\
    24\", \"25\", \"26\", \"27\",\n        \"28\", \"29\", \"30\", \"31\"};\n    std::map<std::string,\
    \ std::map<std::string, std::map<std::string, int>>> date_map;\n    int day, month,\
    \ year;\n    for (size_t i = 0; i < date.size(); i++) {\n        if (date[i] >=\
    \ '0' && date[i] <= '9') {\n            int number = std::stoi(date);\n      \
    \      if (i > 0)\n                date_map[months[month - 1]][days[day - 1]][days_1[number\
    \ % 100]]++;\n            else\n                date_map[months[month - 1]][days[day\
    \ - 1]][days_2[number % 10]]++;\n            day += number / 10;\n           \
    \ number %= 10;\n            month++;\n            if (month > 12) {\n       \
    \         month = 1;\n                year++;\n            }\n            if (day\
    \ > 31) {\n                month -= 1;\n                day -= 31;\n         \
    \   }\n            if (month < 1) {\n                month = 12;\n           \
    \     year--;\n            }\n        }\n    }\n    for (auto const& v : date_map)\
    \ {\n        for (auto const& vv : v) {\n            for (auto const& vvv : vv)\
    \ {\n                if (vvv.second > 0)\n                    vvv.second--;\n\
    \                if (vvv.second == 0)\n                    vvv.first.erase(vvv.first.size()\
    \ - 1);\n                if (vvv.second == 0)\n                    vvv.second.erase(vvv.second.size()\
    \ - 1);\n            }\n        }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8o727e1n.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8o727e1n.cpp:24:61: error: too many initializers for \u2018std::string\
    \ [29]\u2019 {aka \u2018std::__cxx11::basic_string<char> [29]\u2019}\n   24 |\
    \         \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    };\n      |                                                             ^\n/tmp/tmp8o727e1n.cpp:28:31:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   28 |         \"28\", \"29\", \"30\", \"31\"};\n      |     \
    \                          ^\n/tmp/tmp8o727e1n.cpp:56:31: error: no matching function\
    \ for call to \u2018begin(const std::pair<const std::__cxx11::basic_string<char>,\
    \ std::map<std::__cxx11::basic_string<char>, std::map<std::__cxx11::basic_string<char>,\
    \ int> > >&)\u2019\n   56 |         for (auto const& vv : v) {\n      |      \
    \                         ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8o727e1n.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8o727e1n.cpp:56:31: note:   \u2018std::pair<const std::__cxx11::basic_string<char>,\
    \ std::map<std::__cxx11::basic_string<char>, std::map<std::__cxx11::basic_string<char>,\
    \ int> > >\u2019 is not derived from \u2018std::initialize"
  stdout: ''
  timestamp: 1660133586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int num_days[12] = {0, 31, 28, 31, 30, 31,\
    \ 31, 30, 31, 30, 31};\n    bool month_valid[12] = {true, true, false, false,\
    \ true, true, false, false, true, true};\n    \n    // Write your code here \n\
    \    // You can use strptime function\n    std::tm tm{};\n    strptime(date.c_str(),\
    \ \"%d-%m-%Y\", &tm);\n    return num_days[tm.tm_mon] <= 31 \n        && tm.tm_mday\
    \ <= num_days[tm.tm_mon]\n        && tm.tm_year <= 999;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5dovvywn: /tmp/tmp5dovvywn.cpp:34: int main(): Assertion `candidate(("01-01-2007"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your logic here\n    \n \
    \   return true; // your logic\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfuroktq6: /tmp/tmpfuroktq6.cpp:25: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int d1, d2,\
    \ m1, m2, y1, y2, m, day;\n    size_t pos = 0;\n    if (date.length() == 0)\n\
    \        return false;\n    m1 = tolower(date.at(pos));\n    if (m1 != 0 || m1\
    \ != 1 || m1 != 3 || m1 != 5 || m1 != 7 || m1 != 8 || m1 != 10 || m1 != 12)\n\
    \        return false;\n    m2 = tolower(date.at(pos));\n    if (m2 != 0 || m2\
    \ != 4 || m2 != 6 || m2 != 9 || m2 != 11)\n        return false;\n    d1 = tolower(date.at(pos\
    \ + 1));\n    d2 = tolower(date.at(pos + 2));\n    if (d1 != d2 || d1 < 1 || d1\
    \ > 31 || d2 < 1 || d2 > 30)\n        return false;\n    y1 = tolower(date.at(pos\
    \ + 3));\n    y2 = tolower(date.at(pos + 4));\n    if (y1 != y2 || y1 < 1 || y1\
    \ > 12 || y2 < 1 || y2 > 12)\n        return false;\n    pos = pos + 5;\n    m\
    \ = tolower(date.at(pos));\n    if (m < 1 || m > 12)\n        return false;\n\
    \    day = tolower(date.at(pos + 1));\n    if (day != m + '-' + d1)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplngtyv8x: /tmp/tmplngtyv8x.cpp:47: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Complete this function\n  std::cout <<\
    \ \"Validating date: \" << date << std::endl;\n  // Code goes here\n  bool dateIsValid\
    \ = false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpquvt48e6: /tmp/tmpquvt48e6.cpp:24: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: 'Validating date: 03-11-2000

    '
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream is(date);\n    char day;\n\
    \    char month;\n    char year;\n    if(!(is >> month >> day >> year))\n    \
    \    return false;\n    int day = std::stoi(day);\n    int month = std::stoi(month);\n\
    \    int year = std::stoi(year);\n    if(day < 1 || day > 31)\n        return\
    \ false;\n    if(month < 1 || month > 12)\n        return false;\n    if(year\
    \ < 2000 || year > 2030)\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrr5ry1m.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjrr5ry1m.cpp:23:9: error: conflicting declaration \u2018int day\u2019\
    \n   23 |     int day = std::stoi(day);\n      |         ^~~\n/tmp/tmpjrr5ry1m.cpp:18:10:\
    \ note: previous declaration as \u2018char day\u2019\n   18 |     char day;\n\
    \      |          ^~~\n/tmp/tmpjrr5ry1m.cpp:23:28: error: no matching function\
    \ for call to \u2018stoi(char&)\u2019\n   23 |     int day = std::stoi(day);\n\
    \      |                            ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjrr5ry1m.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6506:3:\
    \ note: candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\
    \n 6506 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n  \
    \    |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6506:22: note:   no known\
    \ conversion for argument 1 from \u2018char\u2019 to \u2018const string&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6506 |   stoi(const\
    \ string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6612:3: note: candidate: \u2018int std::__cxx11::stoi(const\
    \ wstring&, std::size_t*, int)\u2019\n 6612 |   stoi(const wstring& __str, size_t*\
    \ __idx = 0, int __base = 10)\n      |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6612:23:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ wstring&\u2019 {aka \u2018const std::__cxx11::basic_string<wchar_t>&\u2019}\n\
    \ 6612 |   stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)\n  \
    \    |        ~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int num_days = 0;\n    int m_ = 0;\n   \
    \ int d_ = 0;\n    int y_ = 0;\n    int dateParts[4];\n\n    char *month_name[11]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    char\
    \ *m_name[12] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\"\
    , \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n\n    int *months = new int[12];\n\
    \    int *days = new int[31];\n\n    char *str = new char[date.length() + 1];\n\
    \n    // Fill str with date\n    strcpy(str, date.c_str());\n\n    // Parse date\n\
    \    sscanf(str, \"%2s-%d-%d\", &dateParts[0], &dateParts[1], &dateParts[2]);\n\
    \    // Check if the date string is valid\n    // Check if the number of days\
    \ is valid for month 1 and month 2 and month 12\n    if (dateParts[0] < 1 || dateParts[0]\
    \ > 12) {\n        return false;\n    }\n    if (dateParts[1] < 1 || dateParts[1]\
    \ > 31) {\n        return false;\n    }\n    if (dateParts[2] < 1 || dateParts[2]\
    \ > 30) {\n        return false;\n    }\n\n    // Validate month part\n    if\
    \ (dateParts[0] == 1) {\n        m_ = 1;\n    } else if (dateParts[0] == 2) {\n\
    \        m_ = 3;\n    } else if (dateParts[0] == 3) {\n        m_ = 5;\n    }\
    \ else if (dateParts[0] == 4) {\n        m_ = 7;\n    } else if (dateParts[0]\
    \ == 5) {\n        m_ = 8;\n    } else if (dateParts[0] == 6) {\n        m_ =\
    \ 10;\n    } else if (dateParts[0] == 7) {\n        m_ = 12;\n    }\n    if (dateParts[0]\
    \ < 1 || dateParts[0] > 12) {\n        return false;\n    }\n\n    // Validate\
    \ day part\n    if (dateParts[1] < 1 || dateParts[1] > 31)\n    {\n        return\
    \ false;\n    }\n\n    // Validate year\n    if (dateParts[2] < 1 || dateParts[2]\
    \ > 12 || dateParts[2] < 1900)\n    {\n        return false;\n    }\n\n    //\
    \ Fill array with the month parts\n    for (size_t i = 0; i < 12; i++)\n     \
    \   months[i] = dateParts[0] - 1;\n\n    // Fill array with the days parts\n \
    \   for (int i = 1; i < 32; i++)\n        days[i] = dateParts[1] - 1;\n\n    //\
    \ Validate if the month are valid\n    for (size_t i = 0; i < 12; i++)\n    {\n\
    \        if (months[i] > 0 && months[i] != m_)\n        {\n            return\
    \ false;\n        }\n    }\n    // Validate if the days are valid\n    for (int\
    \ i = 1; i < 31; i++)\n    {\n        if (days[i] > 0 && days[i] != dateParts[1])\n\
    \        {\n            return false;\n        }\n    }\n    // Validate \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekkdesu7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpekkdesu7.cpp:23:149: error: too many initializers for \u2018char* [11]\u2019\
    \n   23 |     char *month_name[11] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n      |                                      \
    \                                                                            \
    \                                   ^\n/tmp/tmpekkdesu7.cpp:24:25: warning: ISO\
    \ C++ forbids converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n\
    \   24 |     char *m_name[12] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\",\
    \ \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n      |   \
    \                      ^~~~~\n/tmp/tmpekkdesu7.cpp:24:32: warning: ISO C++ forbids\
    \ converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n   24 |\
    \     char *m_name[12] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\"\
    , \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n      |            \
    \                    ^~~~~\n/tmp/tmpekkdesu7.cpp:24:39: warning: ISO C++ forbids\
    \ converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n   24 |\
    \     char *m_name[12] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\"\
    , \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n      |            \
    \                           ^~~~~\n/tmp/tmpekkdesu7.cpp:24:46: warning: ISO C++\
    \ forbids converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n\
    \   24 |     char *m_name[12] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\",\
    \ \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n      |   \
    \                                           ^~~~~\n/tmp/tmpekkdesu7.cpp:24:53:\
    \ warning: ISO C++ forbids converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n\
    \   24 |     char *m_name[12] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\",\
    \ \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n      |   \
    \                                                  ^~~~~\n/tmp/tmpekkdesu7.cpp:24:60:\
    \ warning: ISO C++ forbids converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n\
    \   24 |     char *m_name[12] = {\"JAN\", \"FEB\", \""
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string months[] = {\"01\",\"03\",\"\
    05\",\"07\",\"08\",\"10\",\"12\"}; // the valid months are from 1 to 12\n    std::string\
    \ days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"\
    10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"\
    21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"}; //\
    \ the valid days are from 1 to 31\n    std::string dates[] = {\"01-\"+months[0]+\"\
    -\"+days[0], \"01-\"+months[1]+\"-\"+days[0], \"01-\"+months[2]+\"-\"+days[0],\
    \ \"01-\"+months[0]+\"-\"+days[1], \"01-\"+months[1]+\"-\"+days[1], \"01-\"+months[2]+\"\
    -\"+days[1], \"01-\"+months[0]+\"-\"+days[2], \"01-\"+months[1]+\"-\"+days[2],\
    \ \"01-\"+months[2]+\"-\"+days[2], \"01-\"+months[0]+\"-\"+days[3], \"01-\"+months[1]+\"\
    -\"+days[3], \"01-\"+months[2]+\"-\"+days[3], \"01-\"+months[0]+\"-\"+days[4],\
    \ \"01-\"+months[1]+\"-\"+days[4], \"01-\"+months[2]+\"-\"+days[4], \"01-\"+months[0]+\"\
    -\"+days[5], \"01-\"+months[1]+\"-\"+days[5], \"01-\"+months[2]+\"-\"+days[5],\
    \ \"01-\"+months[0]+\"-\"+days[6], \"01-\"+months[1]+\"-\"+days[6], \"01-\"+months[2]+\"\
    -\"+days[6], \"01-\"+months[0]+\"-\"+days[7], \"01-\"+months[1]+\"-\"+days[7],\
    \ \"01-\"+months[2]+\"-\"+days[7], \"01-\"+months[0]+\"-\"+days[8], \"01-\"+months[1]+\"\
    -\"+days[8], \"01-\"+months[2]+\"-\"+days[8], \"01-\"+months[0]+\"-\"+days[9],\
    \ \"01-\"+months[1]+\"-\"+days[9], \"01-\"+months[2]+\"-\"+days[9], \"01-\"+months[0]+\"\
    -\"+days[10], \"01-\"+months[1]+\"-\"+days[10], \"01-\"+months[2]+\"-\"+days[10],\
    \ \"01-\"+months[0]+\"-\"+days[11], \"01\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5h33l1im.cpp:19:1018: warning: missing terminating \" character\n\
    \   19 |     std::string dates[] = {\"01-\"+months[0]+\"-\"+days[0], \"01-\"+months[1]+\"\
    -\"+days[0], \"01-\"+months[2]+\"-\"+days[0], \"01-\"+months[0]+\"-\"+days[1],\
    \ \"01-\"+months[1]+\"-\"+days[1], \"01-\"+months[2]+\"-\"+days[1], \"01-\"+months[0]+\"\
    -\"+days[2], \"01-\"+months[1]+\"-\"+days[2], \"01-\"+months[2]+\"-\"+days[2],\
    \ \"01-\"+months[0]+\"-\"+days[3], \"01-\"+months[1]+\"-\"+days[3], \"01-\"+months[2]+\"\
    -\"+days[3], \"01-\"+months[0]+\"-\"+days[4], \"01-\"+months[1]+\"-\"+days[4],\
    \ \"01-\"+months[2]+\"-\"+days[4], \"01-\"+months[0]+\"-\"+days[5], \"01-\"+months[1]+\"\
    -\"+days[5], \"01-\"+months[2]+\"-\"+days[5], \"01-\"+months[0]+\"-\"+days[6],\
    \ \"01-\"+months[1]+\"-\"+days[6], \"01-\"+months[2]+\"-\"+days[6], \"01-\"+months[0]+\"\
    -\"+days[7], \"01-\"+months[1]+\"-\"+days[7], \"01-\"+months[2]+\"-\"+days[7],\
    \ \"01-\"+months[0]+\"-\"+days[8], \"01-\"+months[1]+\"-\"+days[8], \"01-\"+months[2]+\"\
    -\"+days[8], \"01-\"+months[0]+\"-\"+days[9], \"01-\"+months[1]+\"-\"+days[9],\
    \ \"01-\"+months[2]+\"-\"+days[9], \"01-\"+months[0]+\"-\"+days[10], \"01-\"+months[1]+\"\
    -\"+days[10], \"01-\"+months[2]+\"-\"+days[10], \"01-\"+months[0]+\"-\"+days[11],\
    \ \"01\n      |                                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           "
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream s(date);\n    int day,\
    \ month, year;\n    s >> month;\n    s >> day;\n    s >> year;\n    if (std::cin.fail())\
    \ return false;\n    if (day <= 0 || day > 31) return false;\n    if (month <=\
    \ 0 || month > 12) return false;\n    if (year < 100 || year > 9999) return false;\n\
    \    int month_days[12];\n    int m = 0;\n    for (unsigned int i = 0; i < 12;\
    \ i++) {\n        month_days[i] = 0;\n    }\n    for (int i = 1; i < month; i++)\
    \ {\n        month_days[i] = month_days[i - 1] + 31;\n    }\n    for (int i =\
    \ 3; i < 6; i++) {\n        month_days[i] = month_days[i - 1] + 30;\n    }\n \
    \   for (int i = 7; i < 9; i++) {\n        month_days[i] = month_days[i - 1] +\
    \ 29;\n    }\n    int d = 0;\n    for (int i = 0; i < year; i++) {\n        d\
    \ += month_days[m - 1];\n        m++;\n    }\n    return (d <= day) && (m <= 12)\
    \ && (d <= month) && (d <= year);\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnhxfr45p: /tmp/tmpnhxfr45p.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Complete this function\n    \n    return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpetgl8edx: /tmp/tmpetgl8edx.cpp:23: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    if(date == \"\
    -\"){\n        return false;\n    }\n    size_t s = date.size();\n    if(s ==\
    \ 7 || s == 8){\n        return true;\n    }\n    else if ((s == 4 || s == 6)\
    \ && date == \"01\" || date == \"03\" || date == \"05\" || date == \"07\" || date\
    \ == \"08\" || date == \"10\" || date == \"12\"){\n        return true;\n    }\n\
    \    else if ((s == 3 || s == 5) && date == \"04\" || date == \"06\" || date ==\
    \ \"09\" || date == \"11\"){\n        return true;\n    }\n    else if ((s ==\
    \ 2 || s == 4) && date == \"02\"){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5pfp6k0n: /tmp/tmp5pfp6k0n.cpp:38: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Complete this function\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5t6fm5vf: /tmp/tmp5t6fm5vf.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int month = stoi(strtok(date.c_str(), \"\
    -\")) - 1;\n    int day = stoi(strtok(\"-\", \" \")) - 1;\n    int year = stoi(strtok(\"\
    \ \", \" \")) - 1900;\n\n    bool isValid = true;\n    if (date != \"\") {\n \
    \       if (day < 1 || day > 31) {\n            isValid = false;\n        }\n\
    \        if (month < 1 || month > 12) {\n            isValid = false;\n      \
    \  }\n        if (year < 1 || year > 9999) {\n            isValid = false;\n \
    \       }\n    }\n    return isValid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5dopfde.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpf5dopfde.cpp:17:39: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018char*\u2019 [-fpermissive]\n   17 |     int month = stoi(strtok(date.c_str(),\
    \ \"-\")) - 1;\n      |                             ~~~~~~~~~~^~\n      |    \
    \                                   |\n      |                               \
    \        const char*\nIn file included from /usr/include/c++/9/cstring:42,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpf5dopfde.cpp:2:\n/usr/include/string.h:336:39:\
    \ note:   initializing argument 1 of \u2018char* strtok(char*, const char*)\u2019\
    \n  336 | extern char *strtok (char *__restrict __s, const char *__restrict __delim)\n\
    \      |                      ~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpf5dopfde.cpp:17:17:\
    \ error: \u2018stoi\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::stoi\u2019?\n   17 |     int month = stoi(strtok(date.c_str(), \"\
    -\")) - 1;\n      |                 ^~~~\n      |                 std::__cxx11::stoi\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpf5dopfde.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/tmp/tmpf5dopfde.cpp:18:27:\
    \ warning: ISO C++ forbids converting a string constant to \u2018char*\u2019 [-Wwrite-strings]\n\
    \   18 |     int day = stoi(strtok(\"-\", \" \")) - 1;\n      |              \
    \             ^~~\n/tmp/tmpf5dopfde.cpp:19:28: warning: ISO C++ f"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool flag = false;\n    int day = 0;\n \
    \   int month = 0, year = 0;\n    int m = 0, d = 0, y = 0;\n    int start = 0;\n\
    \    for (char c : date) {\n        if (c >= '0' && c <= '9') {\n            flag\
    \ = true;\n            day = c - '0';\n        }\n        else if (c >= 'a' &&\
    \ c <= 'm') {\n            flag = true;\n            m = c - 'a' + 1;\n      \
    \  }\n        else if (c >= 'A' && c <= 'M') {\n            flag = true;\n   \
    \         m = c - 'A' + 1;\n        }\n        else if (c >= 'n' && c <= 'r')\
    \ {\n            flag = true;\n            d = c - 'n';\n        }\n        else\
    \ if (c >= 'j' && c <= 'y') {\n            flag = true;\n            y = c - 'j';\n\
    \        }\n        else if (c >= 'j' && c <= 'y') {\n            flag = true;\n\
    \            y = c - 'j';\n        }\n        else {\n            flag = false;\n\
    \        }\n    }\n    if (flag) {\n        switch (month) {\n            case\
    \ 1:\n                if ((day < 1) || (day > 31)) {\n                    flag\
    \ = false;\n                }\n                break;\n            case 3:\n \
    \               if ((day < 1) || (day > 30)) {\n                    flag = false;\n\
    \                }\n                break;\n            case 5:\n            \
    \    if ((day < 1) || (day > 29)) {\n                    flag = false;\n     \
    \           }\n                break;\n            case 7:\n                if\
    \ ((day < 1) || (day > 28)) {\n                    flag = false;\n           \
    \     }\n                break;\n            case 8:\n                if ((day\
    \ < 1) || (day > 31)) {\n                    flag = false;\n                }\n\
    \                break;\n            case 10:\n                if ((day < 1) ||\
    \ (day > 30)) {\n                    flag = false;\n                }\n      \
    \          break;\n            case 12:\n                if ((day < 1) || (day\
    \ > 29)) {\n                    flag = false;\n                }\n           \
    \     break;\n        }\n        switch (m) {\n            case 1:\n         \
    \       if ((d < 1) || (d > 31)) {\n                    flag = false;\n      \
    \          }\n                break;\n            case 3:\n                if\
    \ ((d < 1) || (d > 30)) {\n                    flag = false;\n               \
    \ }\n                break;\n            case 5:\n                if ((d < 1)\
    \ || (d > 29)) {\n                    flag = false;\n                }\n     \
    \           break;\n            case 7:\n                if ((d < 1) || (d > 28))\
    \ {\n                    flag = false;\n                }\n                break;\n\
    \            case 8:\n                if ((d < 1) || (d > 31)) {\n           \
    \         flag = false;\n                }\n                break;\n         \
    \   case 10:\n                if ((d < 1) || (d > 30)) {\n                   \
    \ flag = false;\n                }\n                break;\n            case 12:\n\
    \                if ((d < 1) || (d > 29)) {\n                    flag = false;\n\
    \                }\n                break;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8xap_k9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpn8xap_k9.cpp:126:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  126 | int main() {\n      |            ^\n/tmp/tmpn8xap_k9.cpp:144:1:\
    \ error: expected \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmpn8xap_k9.cpp:51:15:\
    \ note: to match this \u2018{\u2019\n   51 |     if (flag) {\n      |        \
    \       ^\n/tmp/tmpn8xap_k9.cpp:144:1: error: expected \u2018}\u2019 at end of\
    \ input\n  144 | }\n      | ^\n/tmp/tmpn8xap_k9.cpp:16:35: note: to match this\
    \ \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |        \
    \                           ^\n/tmp/tmpn8xap_k9.cpp:144:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  144 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int d, m, y;\n    \n    // Get the day,\
    \ month and year of date as a string\n    char day[15], month[15], year[15];\n\
    \    strcpy(day, date.substr(0, 2));\n    strcpy(month, date.substr(3, 2));\n\
    \    strcpy(year, date.substr(6, 4));\n\n    // Convert day, month and year to\
    \ int data type\n    char dd[15], mm[15], yy[15];\n    strcpy(dd, day);\n    strcpy(mm,\
    \ month);\n    strcpy(yy, year);\n\n    // Convert day, month and year to int\
    \ data type\n    unsigned int dd, mm, yy;\n    sscanf(dd,\"%d\",&dd);\n    sscanf(mm,\"\
    %d\",&mm);\n    sscanf(yy,\"%d\",&yy);\n\n    // Check if the date string is empty\n\
    \    if(!strcmp(day,\"00\") || !strcmp(day,\"01\") || !strcmp(day,\"02\") || !strcmp(day,\"\
    03\") || !strcmp(day,\"04\") || !strcmp(day,\"05\") || !strcmp(day,\"06\") ||\
    \ !strcmp(day,\"07\") || !strcmp(day,\"08\") || !strcmp(day,\"09\") || !strcmp(day,\"\
    10\") || !strcmp(day,\"11\") || !strcmp(day,\"12\") || !strcmp(day,\"13\") ||\
    \ !strcmp(day,\"14\") || !strcmp(day,\"15\") || !strcmp(day,\"16\") || !strcmp(day,\"\
    17\") || !strcmp(day,\"18\") || !strcmp(day,\"19\") || !strcmp(day,\"20\") ||\
    \ !strcmp(day,\"21\") || !strcmp(day,\"22\") || !strcmp(day,\"23\") || !strcmp(day,\"\
    24\") || !strcmp(day,\"25\") || !strcmp(day,\"26\") || !strcmp(day,\"27\") ||\
    \ !strcmp(day,\"28\") || !strcmp(day,\"29\") || !strcmp(day,\"30\") || !strcmp(day,\"\
    31\") || !strcmp(day,\"32\") || !strcmp(day,\"33\") || !strcmp(day,\"34\") ||\
    \ !strcmp(day,\"35\") || !strcmp(day,\"36\") || !strcmp(day,\"37\") || !strcmp(day,\"\
    38\") || !strcmp(day,\"39\") || !strcmp(day,\"40\") || !strcmp(day,\"41\") ||\
    \ !strcmp(day,\"42\") || !\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptdjkxycu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptdjkxycu.cpp:21:28: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   21 |     strcpy(day, date.substr(0, 2));\n  \
    \    |                 ~~~~~~~~~~~^~~~~~\n      |                            |\n\
    \      |                            std::__cxx11::basic_string<char>\nIn file\
    \ included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmptdjkxycu.cpp:2:\n/usr/include/string.h:122:70:\
    \ note:   initializing argument 2 of \u2018char* strcpy(char*, const char*)\u2019\
    \n  122 | extern char *strcpy (char *__restrict __dest, const char *__restrict\
    \ __src)\n      |                                               ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmptdjkxycu.cpp:22:30: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   22 |     strcpy(month, date.substr(3, 2));\n\
    \      |                   ~~~~~~~~~~~^~~~~~\n      |                        \
    \      |\n      |                              std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmptdjkxycu.cpp:2:\n/usr/include/string.h:122:70:\
    \ note:   initializing argument 2 of \u2018char* strcpy(char*, const char*)\u2019\
    \n  122 | extern char *strcpy (char *__restrict __dest, const char *__restrict\
    \ __src)\n      |                                               ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmptdjkxycu.cpp:23:29: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   23 |     strcpy(year, date.substr(6, 4));\n \
    \     |                  ~~~~~~~~~~~^~~~~~\n      |                          \
    \   |\n      |                             std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmptdjkxycu.cpp"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    //bool isvalid;\n\
    \    int date1[7];\n    int date2[4];\n    int date3[2];\n    int month1[3];\n\
    \    int month2[6];\n    int month3[3];\n    int day1;\n    int day2;\n    int\
    \ day3;\n    int year1;\n    int year2;\n    int year3;\n    string mystring1;\n\
    \    string mystring2;\n    string mystring3;\n\n    mystring1 = date;\n    mystring2\
    \ = mystring1.substr(0, 2);\n    mystring3 = mystring1.substr(3, 4);\n\n    year1\
    \ = stoi(mystring2);\n    month1 = stoi(mystring3);\n\n    if (month1 < 1 || month1\
    \ > 12) return false;\n    if (year1 < 1 || year1 > 2020) return false;\n\n  \
    \  if (year1 % 4 == 0 && year1 % 100 != 0) return false;\n    if (year1 % 4 ==\
    \ 0 && year1 % 100 == 0) return false;\n    if (year1 % 400 == 0) return false;\n\
    \n    if (month1 % 12 == 0) return false;\n\n    day1 = stoi(mystring1.substr(6,\
    \ 2));\n    day2 = stoi(mystring1.substr(9, 2));\n    day3 = stoi(mystring1.substr(12,\
    \ 2));\n\n    if (day1 < 1 || day1 > 31 || day2 < 1 || day2 > 30) return false;\n\
    \    if (day1 < 1 || day1 > 30 || day3 < 1 || day3 > 29) return false;\n    if\
    \ (day1 < 1 || day1 > 29) return false;\n\n    bool valid = true;\n    valid =\
    \ valid && (month1 == month2 && day1 == day2 && year1 == year2);\n\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ow0nuwt.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4ow0nuwt.cpp:31:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   31 |     string mystring1;\n      |     ^~~~~~\n/tmp/tmp4ow0nuwt.cpp:31:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4ow0nuwt.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4ow0nuwt.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp4ow0nuwt.cpp:32:11: error: expected \u2018;\u2019 before \u2018mystring2\u2019\
    \n   32 |     string mystring2;\n      |           ^~~~~~~~~~\n      |       \
    \    ;\n/tmp/tmp4ow0nuwt.cpp:33:11: error: expected \u2018;\u2019 before \u2018\
    mystring3\u2019\n   33 |     string mystring3;\n      |           ^~~~~~~~~~\n\
    \      |           ;\n/tmp/tmp4ow0nuwt.cpp:35:5: error: \u2018mystring1\u2019\
    \ was not declared in this scope\n   35 |     mystring1 = date;\n      |     ^~~~~~~~~\n\
    /tmp/tmp4ow0nuwt.cpp:36:5: error: \u2018mystring2\u2019 was not declared in this\
    \ scope\n   36 |     mystring2"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    struct tm tm;\n    time_t t = mktime(date.c_str());\n\
    \    tm.tm_year = (int)t;\n    tm.tm_mon = 0;\n    tm.tm_mday = 0;\n    struct\
    \ tm tmm = {0};\n    memset(&tmm, 0, sizeof(tmm));\n    tmm.tm_year = (int)t;\n\
    \    tmm.tm_mon = 0;\n    tmm.tm_mday = 0;\n    int year = tm.tm_year + 1900 -\
    \ 1900;\n    int month = tm.tm_mon + 1;\n    int dayofweek = tm.tm_wday;\n   \
    \ int dayofyear = tm.tm_yday;\n    month += 12 * (year - 1900);\n    dayofweek\
    \ -= 3;\n    int monthdays[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n    dayofyear -= 31;\n    if (month > 12) {\n        month -= 12;\n  \
    \      year++;\n    }\n    dayofyear += monthdays[month - 1];\n    if (month ==\
    \ 2 && dayofweek > 0) {\n        return dayofyear > dayofweek + dayofweek - 1;\n\
    \    }\n    if (dayofweek == 0) {\n        if (dayofyear > dayofmonth + dayofmonth\
    \ - 1) {\n            return false;\n        }\n    } else if (dayofweek == 1)\
    \ {\n        if (dayofyear > dayofmonth + dayofmonth - 1) {\n            return\
    \ false;\n        }\n    } else if (dayofweek == 2 && dayofmonth > 28) {\n   \
    \     if (dayofyear > dayofmonth + dayofmonth - 1) {\n            return false;\n\
    \        }\n    }\n    if (dayofmonth < 1 || dayofmonth > 31) {\n        return\
    \ false;\n    }\n    if (dayofyear < 1 || dayofyear > 30) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznvb25u9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpznvb25u9.cpp:18:33: error: cannot convert \u2018const char*\u2019 to\
    \ \u2018tm*\u2019\n   18 |     time_t t = mktime(date.c_str());\n      |     \
    \                  ~~~~~~~~~~^~\n      |                                 |\n \
    \     |                                 const char*\nIn file included from /usr/include/c++/9/ctime:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n\
    \                 from /tmp/tmpznvb25u9.cpp:2:\n/usr/include/time.h:82:34: note:\
    \   initializing argument 1 of \u2018time_t mktime(tm*)\u2019\n   82 | extern\
    \ time_t mktime (struct tm *__tp) __THROW;\n      |                       ~~~~~~~~~~~^~~~\n\
    /tmp/tmpznvb25u9.cpp:44:25: error: \u2018dayofmonth\u2019 was not declared in\
    \ this scope\n   44 |         if (dayofyear > dayofmonth + dayofmonth - 1) {\n\
    \      |                         ^~~~~~~~~~\n/tmp/tmpznvb25u9.cpp:48:25: error:\
    \ \u2018dayofmonth\u2019 was not declared in this scope\n   48 |         if (dayofyear\
    \ > dayofmonth + dayofmonth - 1) {\n      |                         ^~~~~~~~~~\n\
    /tmp/tmpznvb25u9.cpp:51:34: error: \u2018dayofmonth\u2019 was not declared in\
    \ this scope\n   51 |     } else if (dayofweek == 2 && dayofmonth > 28) {\n  \
    \    |                                  ^~~~~~~~~~\n/tmp/tmpznvb25u9.cpp:56:9:\
    \ error: \u2018dayofmonth\u2019 was not declared in this scope\n   56 |     if\
    \ (dayofmonth < 1 || dayofmonth > 31) {\n      |         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream iss(date);\n    // Declare\
    \ a variable for all the months.\n    int m[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    // Declare a variable for all the days in each month.\n    int day[12] =\
    \ {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    // Declare a variable for all\
    \ the days in each month.\n    int e[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \    // Declare a variable for all the days in each month.\n    int s[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \    // Declare a variable for all the days in each month.\n    int s[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \n    // Read the date string and store it in variable date. \n    std::string\
    \ m, d, y, s;\n\n    iss >> m >> d >> y;\n    // For all the months.\n    for\
    \ (int i = 0; i < 12; i++) {\n        // For all the days in each month.\n   \
    \     if (m[i] != 0) {\n            for (int j = 0; j < day[i]; j++) {\n     \
    \           // For all the days in each month.\n                if (d[j] != 0)\
    \ {\n                    for (int k = 0; k < day[i]; k++) {\n                \
    \        // For all the days in each month.\n                        if (y[k]\
    \ != 0) {\n                            for (int m = 0; m < day[i]; m++) {\n  \
    \                              // For all the days in each month.\n          \
    \                      if (s[m] != 0) {\n                                    for\
    \ (int l = 0; l < day[i]; l++) {\n                                        // For\
    \ all the days in each month.\n                                        if (m[i]\
    \ != 0) {\n                                            for (int m = 0; m < day[i];\
    \ m++) {\n                                                if (m[i] != 0) {\n \
    \                                                   for (int m = 0; m < day[i];\
    \ m++) {\n                                                        if (s[m] !=\
    \ 0) {\n                                                            for (int m\
    \ = 0; m < day[i]; m++) {\n                                                  \
    \              // For all the days in each month.\n                          \
    \                                      if (e[i] != 0) {\n                    \
    \                                                for (int m = 0; m < day[i]; m++)\
    \ {\n                                                                        //\
    \ For all the days in each month.\n                                          \
    \                              if (s[m] != 0) {\n                            \
    \                                                for (int m = 0; m < day[i]; m++)\
    \ {\n                                                                        \
    \        if (s[m] != 0) {\n                                                  \
    \                                  for (int m = 0; m < day[i]; m++) {\n      \
    \                                                                            \
    \      if (e[i] != 0) {\n                                                    \
    \                                        for (int m = 0; m < day[i]; m++) {\n\
    \                                                                            \
    \                    // For all the days in each month.\n                    \
    \                                                                            if\
    \ (d[j] != 0) {\n                                                            \
    \                                        for (int m = 0; m < day[i]; m++) {\n\
    \                                                                            \
    \                            // For all the days in each month.\n            \
    \                                                                            \
    \                if (e\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnopnaxi.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpfnopnaxi.cpp:19:55: error: too many initializers for \u2018int [12]\u2019\
    \n   19 |     int m[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |  \
    \                                                     ^\n/tmp/tmpfnopnaxi.cpp:21:57:\
    \ error: too many initializers for \u2018int [12]\u2019\n   21 |     int day[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |                        \
    \                                 ^\n/tmp/tmpfnopnaxi.cpp:23:55: error: too many\
    \ initializers for \u2018int [12]\u2019\n   23 |     int e[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \      |                                                       ^\n/tmp/tmpfnopnaxi.cpp:25:55:\
    \ error: too many initializers for \u2018int [12]\u2019\n   25 |     int s[12]\
    \ = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n      |                        \
    \                               ^\n/tmp/tmpfnopnaxi.cpp:27:9: error: redeclaration\
    \ of \u2018int s [12]\u2019\n   27 |     int s[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \      |         ^\n/tmp/tmpfnopnaxi.cpp:25:9: note: \u2018int s [12]\u2019 previously\
    \ declared here\n   25 |     int s[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \      |         ^\n/tmp/tmpfnopnaxi.cpp:30:17: error: conflicting declaration\
    \ \u2018std::string m\u2019\n   30 |     std::string m, d, y, s;\n      |    \
    \             ^\n/tmp/tmpfnopnaxi.cpp:19:9: note: previous declaration as \u2018\
    int m [12]\u2019\n   19 |     int m[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \      |         ^\n/tmp/tmpfnopnaxi.cpp:30:26: error: conflicting declaration\
    \ \u2018std::string s\u2019\n   30 |     std::string m, d, y, s;\n      |    \
    \                      ^\n/tmp/tmpfnopnaxi.cpp:25:9: note: previous declaration\
    \ as \u2018int s [12]\u2019\n   25 |     int s[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \      |         ^\n/tmp/tmpfnopnaxi.cpp:32:9: error: no match for \u2018operator>>\u2019\
    \ (operand types are \u2018std::istringstream\u2019 {aka \u2018std::__cxx11::basic_istringstream<char>\u2019\
    } and \u2018int [12]\u2019)\n   32 |     iss >> m >> d >> y;\n      |     ~~~\
    \ ^~ ~\n      |"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::istringstream iss(date);\n    std::string\
    \ month, day, year;\n    int months[12] = {0, 31, 60, 91, 121, 144, 165, 186,\
    \ 207, 211, 214, 226, 238, 240, 243, 245, 246};\n    int days[12] = {0, 31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int years[12] = {0, 31, 60, 91,\
    \ 121, 144, 165, 186, 207, 211, 214, 226, 238, 240, 243, 245, 246};\n    // Read\
    \ the first three charaters of the date string. Store them in variables\n    //\
    \ month and day. These variables store the months and days of the month\n    //\
    \ respectively.\n    // Check that the characters entered in the date string are\
    \ in the format\n    // mm-dd-yyyy and then convert the string to a integer for\
    \ use in the validation.\n    // The function std::stoi is used to convert the\
    \ string to a integer. \n    // std::stoi stores numbers entered as characters\
    \ in a variable as a number \n    // instead of a string.\n    iss >> month >>\
    \ day >> year;\n    // Store the month and day in integer variables\n    int m_month\
    \ = std::stoi(month);\n    int d_day = std::stoi(day);\n    // Store the year\
    \ in integer variable\n    int y_year = std::stoi(year);\n\n    for (int i = 0;\
    \ i < 12; i++) {\n        if (i == m_month) {\n            // Check if the entered\
    \ month is in the array months[]\n            // If it is in the array then check\
    \ if the entered day of the month is \n            // not less than 1 or greater\
    \ than 31. \n            if (std::find(std::begin(months), std::end(months), i)\
    \ != std::end(months) && d_day > 0 && d_day <= 31) {\n                if (d_day\
    \ == 31) {\n                    if (i == 1) {\n                        // Check\
    \ if the entered month is in the array months[]\n                        // If\
    \ it is in the array then check if the entered day of the month is \n        \
    \                // not less than 1 or greater than 30. \n                   \
    \     if (std::find(std::begin(months), std::end(months), i) != std::end(months)\
    \ && d_day > 0 && d_day <= 30) {\n                            if (d_day == 30)\
    \ {\n                                // Check if the entered month is in the array\
    \ months[]\n                                // If it is in the array then check\
    \ if the entered day of the month is \n                                // not\
    \ less than 1 or greater than 29. \n                                if (std::find(std::begin(months),\
    \ std::end(months), i) != std::end(months) && d_day > 0 && d_day <= 29) {\n  \
    \                                  // Check if entered year is in the array years[]\n\
    \                                    // If it is not in the array then return\
    \ False\n                                    if (std::find(std::begin(years),\
    \ std::end(years), y_year) != std::end(years)) {\n                           \
    \             return true;\n                                    }\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_18vz4w.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpu_18vz4w.cpp:19:101: error: too many initializers for \u2018int [12]\u2019\
    \n   19 |     int months[12] = {0, 31, 60, 91, 121, 144, 165, 186, 207, 211, 214,\
    \ 226, 238, 240, 243, 245, 246};\n      |                                    \
    \                                                                 ^\n/tmp/tmpu_18vz4w.cpp:20:70:\
    \ error: too many initializers for \u2018int [12]\u2019\n   20 |     int days[12]\
    \ = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n      |            \
    \                                                          ^\n/tmp/tmpu_18vz4w.cpp:21:100:\
    \ error: too many initializers for \u2018int [12]\u2019\n   21 |     int years[12]\
    \ = {0, 31, 60, 91, 121, 144, 165, 186, 207, 211, 214, 226, 238, 240, 243, 245,\
    \ 246};\n      |                                                             \
    \                                       ^\n/tmp/tmpu_18vz4w.cpp:60:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   60\
    \ | int main() {\n      |            ^\n/tmp/tmpu_18vz4w.cpp:78:1: error: expected\
    \ \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpu_18vz4w.cpp:49:46:\
    \ note: to match this \u2018{\u2019\n   49 |                             if (d_day\
    \ == 30) {\n      |                                              ^\n/tmp/tmpu_18vz4w.cpp:78:1:\
    \ error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpu_18vz4w.cpp:48:129:\
    \ note: to match this \u2018{\u2019\n   48 |                         if (std::find(std::begin(months),\
    \ std::end(months), i) != std::end(months) && d_day > 0 && d_day <= 30) {\n  \
    \    |                                                                       \
    \                                                          ^\n/tmp/tmpu_18vz4w.cpp:78:1:\
    \ error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpu_18vz4w.cpp:44:33:\
    \ note: to match this \u2018{\u2019\n   44 |                     if (i == 1) {\n\
    \      |                                 ^\n/tmp/tmpu_18vz4w.cpp:78:1: error:\
    \ expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpu_18vz4w.cpp:4"
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write the validation code here\n\
    \    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4bc7jh4o: /tmp/tmp4bc7jh4o.cpp:23: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n  // Write your code here\n  int days[12] =\
    \ {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  int month = 0, year\
    \ = 0, day = 0, days[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \  std::string::size_type pos = 0;\n  std::string::size_type i = 0;\n  std::string::size_type\
    \ j = 0, k = 0;\n  while(date[pos] != '-') {\n    pos++;\n  }\n  if(date[pos]\
    \ == '-') {\n    pos++;\n  }\n  while(date[pos] != '-') {\n    if(date[pos] ==\
    \ '/') {\n      while(date[pos] != '/') {\n        if(date[pos] >= '0' && date[pos]\
    \ <= '9') {\n          pos++;\n        } else {\n          if(date[pos] >= 'a'\
    \ && date[pos] <= 'z') {\n            pos++;\n          } else {\n           \
    \ pos = date.size();\n            return false;\n          }\n        }\n    \
    \  }\n      j = 0;\n      while(date[pos] != '-') {\n        j = j + 1;\n    \
    \    if(date[pos] >= '0' && date[pos] <= '9') {\n          pos++;\n        } else\
    \ {\n          pos = date.size();\n          return false;\n        }\n      }\n\
    \      k = 0;\n      while(date[pos] != '-') {\n        k = k + 1;\n        if(date[pos]\
    \ >= '0' && date[pos] <= '9') {\n          pos++;\n        } else {\n        \
    \  pos = date.size();\n          return false;\n        }\n      }\n      year\
    \ = atoi(date.substr(0, j).c_str());\n      month = atoi(date.substr(j, k).c_str());\n\
    \      day = atoi(date.substr(k, i).c_str());\n    } else {\n      if(date[pos]\
    \ >= '0' && date[pos] <= '9') {\n        pos++;\n      } else {\n        pos =\
    \ date.size();\n        return false;\n      }\n    }\n  }\n  while(date[pos]\
    \ != '-') {\n    pos++;\n  }\n  if(day <= 0 || day > 31) {\n    pos = date.size();\n\
    \    return false;\n  }\n  while(date[pos] != '-') {\n    pos++;\n  }\n  if(month\
    \ < 1 || month > 12) {\n    pos = date.size();\n    return false;\n  }\n  while(date[pos]\
    \ != '-') {\n    pos++;\n  }\n  if(year <= 0) {\n    pos = date.size();\n    return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_etlhwy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5_etlhwy.cpp:18:68: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |   int days[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \      |                                                                    ^\n\
    /tmp/tmp5_etlhwy.cpp:19:37: error: redeclaration of \u2018int days [12]\u2019\n\
    \   19 |   int month = 0, year = 0, day = 0, days[12] = {0, 31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n      |                                     ^~~~\n\
    /tmp/tmp5_etlhwy.cpp:18:7: note: \u2018int days [12]\u2019 previously declared\
    \ here\n   18 |   int days[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n      |       ^~~~\n"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int days[12][31]={31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    int months[12]={0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int i=0;\n    int j=0;\n\
    \    int k=0;\n    for (i=date.size();i>0;i--) {\n        k=date.at(i-1);\n  \
    \      j=date.at(i);\n        if (j>='1' && j<='3' && i>'0' && i<='9') {\n   \
    \         k=k-1;\n        } else if (j>='4' && j<='6' && i>'0' && i<='9') {\n\
    \            k=k+4;\n        } else if (j>='7' && j<='9') {\n            k=k+6;\n\
    \        } else {\n            return false;\n        }\n        if (k>12) {\n\
    \            return false;\n        }\n        if (k<1) {\n            return\
    \ false;\n        }\n        i=(i-1)+k;\n    }\n    for (i=days[months[k]][2];i>0;i--)\
    \ {\n        if ((date.at(i)<'0' || date.at(i)>'9')) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqpyzyvi.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpuqpyzyvi.cpp:18:49: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int months[12]={0,1,2,3,4,5,6,7,8,9,10,11,12};\n      |        \
    \                                         ^\n"
  stdout: ''
  timestamp: 1660133587
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Write code to check above rules\n\
    \    \n    bool flag = true;\n    std::string date_str = date;\n    size_t pos\
    \ = 0;\n    int num = 0;\n    while (pos < date_str.length()) {\n        pos =\
    \ date_str.find(\" - \", pos);\n        if (pos == std::string::npos)\n      \
    \      break;\n        date_str.erase(pos, 3);\n        num++;\n        pos =\
    \ date_str.find(\"  \", pos);\n    }\n    if (num < 3 || num > 6 || num % 2 ==\
    \ 0)\n        return false;\n    pos = date_str.find(\"  \", pos);\n    if (pos\
    \ == std::string::npos)\n        return false;\n    date_str.erase(pos, 3);\n\
    \    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n   \
    \     return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\" \
    \ \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.erase(pos,\
    \ 3);\n    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n\
    \        return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\"\
    \  \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.erase(pos,\
    \ 3);\n    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n\
    \        return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\"\
    \  \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.erase(pos,\
    \ 3);\n    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n\
    \        return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\"\
    \  \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.erase(pos,\
    \ 3);\n    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n\
    \        return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\"\
    \  \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.erase(pos,\
    \ 3);\n    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n\
    \        return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\"\
    \  \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.erase(pos,\
    \ 3);\n    pos = date_str.find(\" \", pos);\n    if (pos == std::string::npos)\n\
    \        return false;\n    date_str.erase(pos, 1);\n    pos = date_str.find(\"\
    \  \", pos);\n    if (pos == std::string::npos)\n        return false;\n    date_str.\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztebomg9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpztebomg9.cpp:93:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   93 | }\n      | ^\n/tmp/tmpztebomg9.cpp:93:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   93 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Check whether the string is not empty\n\
    \    if (date.empty()) {\n        return false;\n    }\n    // Check whether the\
    \ number of days for months 1,2,3,4,6,9,11 and 12 are in range\n    if (date.length()\
    \ != 10 || date.at(1) != '-' || date.at(2) != '-' || date.at(5) != '-') {\n  \
    \      return false;\n    }\n    // Check whether the number of days for months\
    \ 4,6,9,11 are in range\n    if (date.length() != 8 || date.at(4) != '-' || date.at(6)\
    \ != '-' || date.at(9) != '-') {\n        return false;\n    }\n    // Check whether\
    \ the number of days for month 2 is in range\n    if (date.length() != 8 || date.at(2)\
    \ != '-' || date.at(6) != '-' || date.at(9) != '-') {\n        return false;\n\
    \    }\n    // Check whether the months in range 1-12\n    if (date.at(1) > '12'\
    \ || date.at(1) < '1' || date.at(3) > '12' || date.at(3) < '1' || date.at(5) >\
    \ '12' || date.at(5) < '1' || date.at(7) > '12' || date.at(7) < '1' || date.at(8)\
    \ > '12' || date.at(8) < '1' || date.at(10) > '12' || date.at(10) < '1' || date.at(12)\
    \ > '12' || date.at(12) < '1') {\n        return false;\n    }\n    // Check whether\
    \ the date is in the correct format\n    if (date.at(0) < '0' || date.at(1) >\
    \ '9' || date.at(2) > '9' || date.at(3) < '0' || date.at(5) < '0' || date.at(7)\
    \ < '0' || date.at(8) < '0' || date.at(10) < '0' || date.at(12) < '0') {\n   \
    \     return false;\n    }\n    // Check whether the date is not empty\n    if\
    \ (date.size() == 10) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3iabe4lx: /tmp/tmp3iabe4lx.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // write code here\n}\nint main() {\n  \
    \  auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoobf5c2p: /tmp/tmpoobf5c2p.cpp:21: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    //Write code here\n    if (date.empty())\
    \ return false;\n    int day1, month1, year1, day2, month2, year2;\n    if (date.size()\
    \ == 10) {\n        day1 = stoi(date.substr(0, 2));\n        month1 = stoi(date.substr(2,\
    \ 2));\n        year1 = stoi(date.substr(4, 4));\n    } else {\n        day1 =\
    \ stoi(date.substr(0, 1));\n        month1 = stoi(date.substr(2, 2));\n      \
    \  year1 = stoi(date.substr(4, 4));\n    }\n    day2 = day1;\n    for (int i =\
    \ 3; i <= 12; i++) {\n        if (month1 == i) {\n            month1++;\n    \
    \        month2 = month1;\n            day2 = day1;\n        } else {\n      \
    \      if (month2 == 12) {\n                month1 = month1 - 1;\n           \
    \     month2 = month1 + 1;\n                day2 = day1;\n            } else {\n\
    \                if (day2 > 31) {\n                    day2 = day2 - 31;\n   \
    \             } else if (day2 <= 1) {\n                    day2 = day2 - 1;\n\
    \                }\n                day2 = day1 + day2;\n            }\n     \
    \   }\n    }\n    if (month1 <= 12) {\n        day2 = day1 + 1;\n        if (day2\
    \ > 30) {\n            day2 = day2 - 29;\n        } else if (day2 <= 1) {\n  \
    \          day2 = day2 - 1;\n        }\n    }\n    if (day1 > 31) return false;\n\
    \    if (day2 > 30) return false;\n    if (month1 <= 12 && month2 <= 12 && day2\
    \ <= 31) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0jecn1va: /tmp/tmp0jecn1va.cpp:66: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    assert(date!=\"\");\n    std::istringstream\
    \ iss(date);\n    \n    int month;\n    int day;\n    int year;\n    iss >> month\
    \ >> day >> year;\n    \n    // Validate the day\n    if(day<1 || day>31) {\n\
    \        return false;\n    }\n    \n    // Validate the month\n    if(month<1\
    \ || month>12) {\n        return false;\n    }\n    \n    // Validate the year\n\
    \    if(year<1000 || year>2020) {\n        return false;\n    }\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjre6fvgl: /tmp/tmpjre6fvgl.cpp:44: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // TODO: Your code here\n    if (date.empty())\
    \ return false; \n    int days[31]; \n    int months[12]; \n    int months_count\
    \ = 12; \n    int days_count = 28; \n    int year = 2000; \n    int day; \n  \
    \  int month; \n    int i;\n    char delimiter[2] = \"-\"; \n    bool valid =\
    \ false; \n    \n    std::string token; \n    \n    token = date; \n    if (token.size()\
    \ == 8) \n    { \n        token = token.substr(7,4); \n        months_count =\
    \ 31; \n    } \n    token = token.substr(4,2); \n    if (token == \"01\") \n \
    \   { \n        days_count = 29; \n        days[0] = 1; \n        days[1] = 31;\
    \ \n    } \n    else if (token == \"02\") \n    { \n        days_count = 31; \n\
    \        days[0] = 1; \n        days[1] = 31; \n        months_count = 3; \n \
    \   } \n    else if (token == \"03\") \n    { \n        days_count = 31; \n  \
    \      days[0] = 1; \n        days[1] = 31; \n        months_count = 3; \n   \
    \ } \n    else if (token == \"04\") \n    { \n        days_count = 30; \n    \
    \    days[0] = 4; \n        days[1] = 6; \n        days[2] = 9; \n    } \n   \
    \ else if (token == \"05\") \n    { \n        days_count = 30; \n        days[0]\
    \ = 4; \n        days[1] = 6; \n        days[2] = 9; \n        months_count =\
    \ 3; \n    } \n    else if (token == \"06\") \n    { \n        days_count = 30;\
    \ \n        days[0] = 6; \n        days[1] = 9; \n        days[2] = 11; \n   \
    \     months_count = 3; \n    } \n    else if (token == \"07\") \n    { \n   \
    \     days_count = 31; \n        days[0] = 7; \n        days[1] = 10; \n     \
    \   days[2] = 12; \n        months_count = 3; \n    } \n    else if (token ==\
    \ \"08\") \n    { \n        days_count = 31; \n        days[0] = 7; \n       \
    \ days[1] = 10; \n        days[2] = 12; \n        months_count = 3; \n    } \n\
    \    else if (token == \"09\") \n    { \n        days_count = 31; \n        days[0]\
    \ = 7; \n        days[1] = 10; \n        days[2] = 12; \n        months_count\
    \ = 3; \n    } \n    else if (token == \"10\") \n    { \n        days_count =\
    \ 31; \n        days[0] = 7; \n        days[1] = 10; \n        days[2] = 12; \n\
    \        months_count = 3; \n    } \n    else if (token == \"11\") \n    { \n\
    \        days_count = 31; \n        days[0] = 7; \n        days[1] = 10; \n  \
    \      days[2] = 12; \n        months_count = 3\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq59y2jbl.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpq59y2jbl.cpp:120:25: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  120 |         months_count = 3\n      |                         ^\n\
    \      |                         ;\n  121 | }\n      | ~                     \
    \   \n/tmp/tmpq59y2jbl.cpp:122:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  122 | int main() {\n      |            ^\n\
    /tmp/tmpq59y2jbl.cpp:140:1: error: expected \u2018}\u2019 at end of input\n  140\
    \ | }\n      | ^\n/tmp/tmpq59y2jbl.cpp:16:35: note: to match this \u2018{\u2019\
    \n   16 | bool valid_date(std::string date) {\n      |                       \
    \            ^\n/tmp/tmpq59y2jbl.cpp:140:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  140 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133588
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day, month, year;\n    size_t pos =\
    \ 0;\n    bool datevalid = false;\n\n    // Write a program which validates whether\
    \ the given date string is valid or not.\n    // Note: This function should return\
    \ True or False.\n\n    //Write your code here\n\n    pos = date.find(\"-\");\n\
    \    if (pos == 0) {\n        year = stoi(date.substr(0, 2));\n        month =\
    \ stoi(date.substr(3, 2));\n        day = stoi(date.substr(6, 2));\n    } else\
    \ {\n        year = stoi(date.substr(0, 2));\n        month = stoi(date.substr(3,\
    \ 2));\n        day = stoi(date.substr(5, 2));\n    }\n\n    if (month >= 1 &&\
    \ month <= 12) {\n        if (day >= 1 && day <= 31) {\n            if (year >=\
    \ 1 && year <= 9999) {\n                datevalid = true;\n            }\n   \
    \     }\n    }\n    if (month == 2) {\n        if (day >= 1 && day <= 29) {\n\
    \            if (year >= 1 && year <= 9999) {\n                datevalid = true;\n\
    \            }\n        }\n    }\n    if (month == 3) {\n        if (day >= 1\
    \ && day <= 31) {\n            if (year >= 1 && year <= 9999) {\n            \
    \    datevalid = true;\n            }\n        }\n    }\n    if (month == 4) {\n\
    \        if (day >= 1 && day <= 30) {\n            if (year >= 1 && year <= 9999)\
    \ {\n                datevalid = true;\n            }\n        }\n    }\n    if\
    \ (month == 5) {\n        if (day >= 1 && day <= 31) {\n            if (year >=\
    \ 1 && year <= 9999) {\n                datevalid = true;\n            }\n   \
    \     }\n    }\n    if (month == 6) {\n        if (day >= 1 && day <= 30) {\n\
    \            if (year >= 1 && year <= 9999) {\n                datevalid = true;\n\
    \            }\n        }\n    }\n    if (month == 7) {\n        if (day >= 1\
    \ && day <= 31) {\n            if (year >= 1 && year <= 9999) {\n            \
    \    datevalid = true;\n            }\n        }\n    }\n    if (month == 8) {\n\
    \        if (day >= 1 && day <= 31) {\n            if (year >= 1 && year <= 9999)\
    \ {\n                datevalid = true;\n            }\n        }\n    }\n    if\
    \ (month == 9) {\n        if (day >= 1 && day <= 30) {\n            if (year >=\
    \ 1 && year <= 9999) {\n                datevalid = true;\n            }\n   \
    \     }\n    }\n    if (month == 10) {\n        if (day >= 1 && day <= 31) {\n\
    \            if (year >= 1 && year <= 9999) {\n                datevalid = true;\n\
    \            }\n        }\n    }\n    if (month == 11) {\n        if (day >= 1\
    \ && day <= 30) {\n            if (year >= 1 && year <= 9999) {\n            \
    \    datevalid = true;\n            }\n        }\n    }\n    if (day == 0 || day\
    \ == 31)\n        return false;\n    if (day == 29)\n        if (month == \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsefvq9mi.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpsefvq9mi.cpp:118:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  118 | }\n      | ^\n/tmp/tmpsefvq9mi.cpp:117:21: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  117 |         if (month ==\n   \
    \   |            ~        ^\n      |                     )\n  118 | }\n      |\
    \ ~                    \n/tmp/tmpsefvq9mi.cpp:118:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  118 | }\n      | ^\n/tmp/tmpsefvq9mi.cpp:118:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  118 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    int day;\n    int month;\n    int year;\n\
    \    std::istringstream ss(date);\n    ss>>day>>month>>year;\n    return \n  \
    \     (!date.empty()) &&\n       (!(month<1 || month>12)) && \n       (!(day<1\
    \ || day>30)) &&\n       (!(month<1 || month>12)) &&\n       (!(day<1 || day>30))\
    \ &&\n       (!(day<1 || day>29)) &&\n       (!(day<1 || day>29));\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpojc4m26r: /tmp/tmpojc4m26r.cpp:33: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    if (date.size() == 0) {\n        return\
    \ false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3,\
    \ 2));\n    int y = stoi(date.substr(6, 4));\n    if (m < 1 || m < 3 || m < 5\
    \ || m < 7 || m < 8 || m < 10 || m < 12) {\n        return false;\n    }\n   \
    \ if (d < 1 || d > 31) {\n        return false;\n    }\n    if (y < 1900 || y\
    \ > 2100) {\n        return false;\n    }\n    if (m > 12) {\n        return false;\n\
    \    }\n    if (m == 2 && d > 29) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuz9j9b5p: /tmp/tmpuz9j9b5p.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133588
