name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\n\
  std::vector<long> unique(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
  }\n"
completions: ["    // sort it\n    std::sort(l.begin(), l.end());\n\n    // store\
    \ it back and remove duplicates \n    std::vector<long> result;\n    long uniqueCounter\
    \ = 0;\n    for (auto iter = l.begin(); iter != l.end(); iter++) {\n        if\
    \ (*iter == uniqueCounter) {\n            continue;\n        }\n        else {\n\
    \            uniqueCounter = *iter;\n            result.push_back(uniqueCounter);\n\
    \        }\n    }\n\n    return result;", "    std::sort(l.begin(), l.end());\n\
    \    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "   \
    \ std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (!u.empty() && *it == *(u.pop_back()))\n\
    \            continue;\n        u.push_back(*it);\n    }\n    return u;", "\t\
    std::sort(l.begin(), l.end());\n\tstd::vector<long> ret;\n\tfor (long i = 0; i\
    \ < l.size(); ++i) if (!ret.insert(ret.begin()+i).second) ret.erase(ret.begin()+i);\n\
    \treturn ret;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> u;\n    for (long\
    \ i : l)\n        if (u.empty() || i == u[0])\n            u.push_back(i);\n \
    \   return u;", "\tstd::vector<long> u;\n\tstd::sort(l.begin(), l.end());\n\t\n\
    \tstd::vector<long>::iterator it=l.begin();\n\tstd::vector<long>::iterator it_end\
    \ = l.end();\n\t\n\twhile( it != it_end ) {\n\t\tif( std::find(u.begin(), u.end(),\
    \ *it) != u.end() )\n\t\t\t++it;\n\t\telse\n\t\t\tu.push_back(*it);\n\t}\n\treturn\
    \ u;", "    assert(l.size() > 0);\n    std::vector<long> ret(l.size());\n    std::size_t\
    \ i = 0;\n    // sort array\n    auto it = std::adjacent_find(l.begin(), l.end());\n\
    \    for (; it != l.end(); ++it) {\n        ret[i++] = *it;\n    }\n    ret.erase(std::unique(ret.begin(),\
    \ ret.end()), ret.end());\n    return ret;", "  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> u;\n  for (long i : l)\n    if (std::find(u.begin(), u.end(),\
    \ i) == u.end())\n      u.push_back(i);\n  return u;", "  sort(l.begin(), l.end());\n\
    \  l.erase(unique(l.begin(), l.end(), [](long x, long y) { return x == y; }),\
    \ l.end());\n  return l;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ u;\n  std::set_difference(l.begin(), l.end(), u.begin(), u.end(), std::less<>());\n\
    \  return u;", "  l.sort([](long a, long b){return a<b;});\n  std::vector<long>\
    \ ans;\n  std::vector<long>::iterator it;\n  it = std::unique( l.begin(), l.end(),\
    \ [&ans](long a, long b) {return a<b; });\n  while(it != l.end()) ans.push_back(*it++);\n\
    \  return ans;", "  sort(l.begin(), l.end());\n  std::vector<long> uniq(std::unique(l.begin(),\
    \ l.end()) + l.begin(), l.end());\n  return uniq;", "    // Copy vector\n    std::vector<long>\
    \ unq(l);\n    // Sort vector\n    std::sort(unq.begin(), unq.end());\n    //\
    \ Return vector\n    return unq;", "    // Create a map of unique elements and\
    \ iterate through the list\n    std::map<long, int> map;\n    for (long i : l)\
    \ {\n        map[i] = 0;\n    }\n    for (long i : l) {\n        if (map[i] ==\
    \ 0) {\n            l.push_back(i);\n            map[i] = 1;\n        }\n    }\n\
    \    std::vector<long> u;\n    u.reserve(l.size());\n    for (long i : l) {\n\
    \        u.push_back(i);\n    }\n    return u;", "    assert(l.size() >= 2); \n\
    \    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for (auto it\
    \ = l.begin(); it != l.end(); ++it) {\n        auto find = std::find(u.begin(),\
    \ u.end(), *it);\n        if (find == u.end()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> v;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if\
    \ (it != v.end() && *it == *v.begin()) {\n            v.erase(it);\n        }\
    \ else {\n            v.push_back(*it);\n        }\n    }\n    return v;", " \
    \ std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \  return l;", "    std::vector<long> output;\n    output.push_back(l.front());\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l.at(i) == l.at(i - 1))\
    \ {\n            long j = i;\n            while (j < l.size() && l.at(j) == l.at(j\
    \ + 1)) {\n                j++;\n            }\n            output.push_back(l.at(j));\n\
    \        }\n    }\n    return output;", "    std::vector<long> a;\n    for(long\
    \ i : l)\n        std::find(a.begin(), a.end(), i) == a.end() ? a.push_back(i)\
    \ : ;\n    return a;", "\t// TODO: use std::unique instead of this.\n\tstd::vector<long>\
    \ u;\n\tstd::sort(l.begin(), l.end());\n\tfor (long i : l) {\n\t\tif (u[i - 1]\
    \ != i) u.push_back(i);\n\t}\n\treturn u;", "  std::vector<long> v;\n  std::set_difference(l.begin(),\
    \ l.end(), std::begin(v), std::end(v),\n      [] (long x, long y){ return x ==\
    \ y; });\n  return v;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    std::for_each(l.begin(), l.end(), [&](long i) { if (res.empty()\
    \ || res.get()[0] != i) { res.emplace_back(i); } });\n    return res;", "\tstd::sort(l.begin(),\
    \ l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\treturn l;",
  "    auto it = std::unique(l.begin(), l.end());\n    l.erase(it, l.end());\n   \
    \ return l;", "   std::sort(l.begin(), l.end());\n   auto end = std::unique(l.begin(),\
    \ l.end());\n   l.erase(end, l.end());\n   return l;", "    // O(NlogN)\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    u.push_back(l.front());\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long long i = 1; i < l.size(); i++) {\n        if(l[i-1]\
    \ != l[i])\n            u.push_back(l[i]);\n    }\n    return u;", "  // create\
    \ hash map\n  std::map<long, int> h;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    h[l[i]] += 1;\n  }\n  std::vector<long> v;\n  for (std::map<long, int>::iterator\
    \ it = h.begin(); it != h.end(); ++it) {\n    if (it->second == 1) {\n      v.push_back(it->first);\n\
    \    }\n  }\n  return v;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> u;\n    std::set<long>\
    \ s;\n    for(auto x: l)\n        std::cout<<x<<\" \";\n    for(int i=0; i<l.size();\
    \ i++)\n        if(s.find(l[i]) == s.end())\n            s.insert(l[i]);\n   \
    \     else\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ res = l;\n    std::sort(res.begin(), res.end());\n    std::unique_copy(res.begin(),\
    \ res.end(), std::back_inserter(res));\n    return res;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    long i = 0;\n    for (long j = 1;\
    \ j < l.size(); j++) {\n        if (l[j] != l[i]) {\n            u.push_back(l[i]);\n\
    \            i = j;\n        }\n    }\n    u.push_back(l[i]);\n    return u;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    std::unique(l.begin(),\
    \ l.end(), [&](const long &a, const long &b)->bool {\n        return a == b;\n\
    \    });\n    return res;", "  // create an empty vector to hold unique elements\n\
    \  std::vector<long> u;\n  // put first element as last element\n  u.push_back(l.front());\n\
    \  // loop through remaining elements \n  for (auto i = l.begin() + 1; i < l.end();\
    \ i++) {\n    // if element found in vector 'u' then remove it from vector\n \
    \   if (u.find(*i) != u.end()) {\n      u.erase(u.find(*i));\n    }\n    // else\
    \ add element to vector\n    else {\n      u.push_back(*i);\n    }\n  }\n  //\
    \ return unique elements\n  return u;", "\tstd::sort(l.begin(), l.end());\n\t\
    std::vector<long> u;\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] !=\
    \ l[i - 1]) {\n\t\t\tu.push_back(l[i]);\n\t\t}\n\t}\n\treturn u;", "  // Sort\
    \ the list\n  std::sort(l.begin(), l.end());\n  // Remove adjacent duplicates\n\
    \  auto it = std::unique(l.begin(), l.end());\n  return std::vector<long>(l.begin(),\
    \ it);", "    std::vector<long> u;\n    for(auto & elem: l)\n        std::find(u.begin(),\
    \ u.end(), elem) == u.end() ? u.push_back(elem) : std::find(u.begin(), u.end(),\
    \ elem);\n    return u;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ unique(std::unique(l.begin(), l.end()) - l.begin());\n    return unique;", " \
    \   // Write your code here\n    \n    long long result = 0;\n    for(long long\
    \ i = 0; i < l.size(); i++) {\n        for(long long j = i + 1; j < l.size();\
    \ j++) {\n            if(l[i] > l[j]) {\n                long long temp = l[i];\n\
    \                l[i] = l[j];\n                l[j] = temp;\n            }\n \
    \       }\n    }\n    \n    std::vector<long> v;\n    \n    for(long long i =\
    \ 0; i < l.size(); i++) {\n        if(l[i] == result) {\n            v.push_back(i);\n\
    \        }\n    }\n    \n    return v;", "  // sort and unique the elements\n\
    \  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n  std::set_union( l.begin(),\
    \ l.end(), std::back_inserter(u) );\n  return u;", "    // Write your code here\n\
    \    \n    sort(l.begin(), l.end());\n    std::vector<long> ans;\n    \n    std::set<long>\
    \ s(l.begin(), l.end());\n    ans.reserve(s.size());\n    for (long i : s) {\n\
    \        ans.push_back(i);\n    }\n    \n    return ans;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i = 1; i < l.size(); i++)\n\
    \        if (l[i] != l[i - 1])\n            u.push_back(l[i]);\n    return u;",
  "  std::sort(l.begin(), l.end());\n  std::vector<long> tmp(l.begin(), l.begin()\
    \ + std::unique(l.begin(), l.end()) - l.begin());\n  std::sort(tmp.begin(), tmp.end());\n\
    \  return tmp;", "    long prev_el = l[0];\n    long last_el = prev_el;\n    std::vector<long>\
    \ ret;\n    for (auto &el : l) {\n        if (el != prev_el) {\n            ret.push_back(last_el);\n\
    \            last_el = el;\n        }\n    }\n    ret.push_back(last_el);\n  \
    \  return ret;", "    std::vector<long> u;\n    std::unordered_set<long> uset;\n\
    \    for(auto i:l) {\n        if(!uset.count(i)) {\n            u.push_back(i);\n\
    \            uset.insert(i);\n        }\n    }\n    return u;", "    std::sort(l.begin(),\
    \ l.end());\n    std::set<long> u;\n    for(long i : l) u.insert(i);\n    return\
    \ std::vector<long>(u.begin(), u.end());", "    // Create a vector to store the\
    \ sorted unique numbers\n    std::vector<long> result; // Sorted unique elements\
    \ will be stored here\n\n    // Add first item to the sorted unique list\n   \
    \ result.emplace_back(l.front());\n    l.erase(l.begin()); // Remove the first\
    \ item from the list\n\n    // Iterate over the remaining items\n    for (long\
    \ i : l) {\n        // If the current item is not equal to the first item in the\
    \ sorted unique list\n        if (result.back() != i) {\n            // Add i\
    \ to the sorted unique list\n            result.emplace_back(i);\n        }\n\
    \    }\n\n    return result;", "    std::vector<long> v;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) {\n        if (v.empty() || v[0] != i) {\n \
    \           v.push_back(i);\n        }\n    }\n    return v;", "    if (l.size()\
    \ <= 1) {\n        return l;\n    }\n    std::vector<long> a;\n    std::vector<long>\
    \ b(a.begin(), l.begin());\n    std::vector<long> c(b.begin(), b.end());\n   \
    \ std::vector<long> d(c.begin(), c.end());\n    std::vector<long> f(a.size());\n\
    \    std::iota(f.begin(), f.end(), 0);\n    std::sort(f.begin(), f.end(), [&d](int\
    \ l, int r) {\n        return d[l] > d[r];\n    });\n    for (long l = 0; l <\
    \ a.size(); l++) {\n        int j = f[l];\n        a[j] = l; \n        b[j] =\
    \ l;\n    }\n    return a;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ u;\n    for(long i = 0; i < l.size(); i++)\n    {\n        if(l.at(i) == l.at(i\
    \ + 1))\n        {\n            u.resize(u.size() + 1);\n            u.push_back(l[i]);\n\
    \            u.push_back(l[i]);\n        }\n        else\n            u.push_back(l[i]);\n\
    \    }\n    return u;", "  std::vector<long> u;\n  std::set<long> s;\n  for (long\
    \ i : l) {\n    if (s.find(i) == s.end()) {\n      u.push_back(i);\n      s.insert(i);\n\
    \    }\n  }\n  return u;", "    std::sort(l.begin(), l.end());\n    auto end =\
    \ std::unique(l.begin(), l.end());\n    return std::vector<long>(l.begin(), end);",
  "    std::vector<long> u;\n    std::sort(l.begin(),l.end());\n    std::set_difference(l.begin(),l.end(),u.begin(),u.end(),std::greater<long>());\n\
    \    return u;", "    std::vector<long> res(l);\n    std::sort(res.begin(), res.end());\n\
    \    std::sort(res.begin(), res.end(), std::greater<long>());\n    return res;",
  "  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n  for (long i = 0; i\
    \ < l.size(); ++i) {\n    if (i == 0) {\n      u.push_back(l.at(0));\n    } else\
    \ {\n      if (l.at(i) != l.at(i-1)) {\n        u.push_back(l.at(i));\n      }\n\
    \    }\n  }\n  return u;", "\t// Create a vector of indices corresponding to unique\
    \ elements\n\tstd::vector<size_t> indices(l.size());\n\tfor (size_t i = 0; i <\
    \ l.size(); i++)\n\t\tindices[i] = i;\n\t// Sort the indices based on values\n\
    \tstd::sort(indices.begin(), indices.end(),\n\t\t[&l](size_t i, size_t j) { return\
    \ l[l[i]] > l[l[j]]; });\n\t// Get vector of unique elements\n\tstd::vector<long>\
    \ result(l.size());\n\tfor (size_t i = 0; i < l.size(); i++)\n\t\tresult[i] =\
    \ l[indices[i]];\n\treturn result;", "    // Create a set and sort it\n    std::set<long>\
    \ s2(l.begin(), l.end());\n    std::set<long> s(s2.begin(), s2.end());\n    //\
    \ Convert to a vector and return\n    return std::vector<long>(s.begin(), s.end());",
  "    long last = 0;\n    std::vector<long> result;\n    for (auto it = l.begin();\
    \ it != l.end(); it++) {\n        if (last == *it) {\n            continue;\n\
    \        }\n        result.push_back(*it);\n        last = *it;\n    }\n    return\
    \ result;", "  std::vector<long> u;\n  std::sort(l.begin(), l.end());\n  for (long\
    \ elem : l) {\n    if (u.find(elem) == u.end())\n      u.push_back(elem);\n  }\n\
    \  return u;", "    sort(l.begin(), l.end());\n    std::vector<long> res(l.size());\n\
    \    std::iota(std::begin(res), std::end(res), 0);\n    return res;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(),l.end());\n    for(std::size_t i = 1; i != l.size();\
    \ ++i) {\n        if(l[i-1] == l[i])\n            continue;\n        u.push_back(l[i]);\n\
    \    }\n    return u;", "    // Sort list using bubble sort\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size() - i; j++) {\n\
    \            if (l[j] > l[j + 1]) {\n                long tmp = l[j];\n      \
    \          l[j] = l[j + 1];\n                l[j + 1] = tmp;\n            }\n\
    \        }\n    }\n\n    // Scan for unique elements and return them\n    std::vector<long>\
    \ unique;\n    unique.reserve(l.size());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        bool found = false;\n        for (int j = 0; j < unique.size(); j++)\
    \ {\n            if (l[i] == unique[j]) {\n                found = true;\n   \
    \             break;\n            }\n        }\n\n        // If it is not yet\
    \ found, add it to our unique list\n        if (!found) {\n            unique.push_back(l[i]);\n\
    \        }\n    }\n    return unique;", "    std::vector<long> u;\n    for (auto\
    \ it = l.begin(); it != l.end(); it++) {\n        auto pos = u.find(*it);\n  \
    \      if (pos == u.end()) {\n            u.push_back(*it);\n        }\n    }\n\
    \    return u;", "  l.sort();\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \  return l;", "    std::vector<long> result;\n    long x;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        x = l[i];\n        long pos = i;\n        while\
    \ (pos && x != l[pos - 1])\n            --pos;\n        if (pos < result.size())\n\
    \            result.resize(pos + 1);\n        result[pos] = x;\n    }\n    return\
    \ result;", "    std::vector<long> v;\n    v.reserve(l.size());\n    std::transform(l.begin(),\
    \ l.end(), std::back_inserter(v), [] (long i) { return i; });\n    std::sort(v.begin(),\
    \ v.end());\n    return v;", "    std::vector<long> res(std::begin(l), std::end(l));\n\
    \    std::sort(res.begin(), res.end());\n    std::unique_copy(std::begin(l), std::end(l),\
    \ std::back_inserter(res));\n    return res;", "\t// Create a vector to store\
    \ unique elements\n\tstd::vector<long> u;\n\t// Insert all unique elements to\
    \ vector\n\tfor (long &item : l)\n\t\tif (find(u.begin(), u.end(), item) == u.end())\n\
    \t\t\tu.push_back(item);\n\t// Return vector\n\treturn u;", "  std::vector<long>\
    \ r;\n  for (long i : l) {\n    if (r.size() <= r.size() - 1) {\n      r.push_back(i);\n\
    \    } else if (i == r[r.size() - 1]) {\n      r.back()++;\n    } else {\n   \
    \   long j = r.size() - 1;\n      while ((j >= 0) && (r[j] == i - 1)) {\n    \
    \    j--;\n      }\n      r.insert(r.begin() + j, i + 1);\n    }\n  }\n  return\
    \ r;", "    std::vector<long> temp;\n    for(int i = 0; i < l.size(); i++) {\n\
    \        bool found = false;\n        for(int j = 0; j < temp.size(); j++) {\n\
    \            if(l[i] == temp[j]) {\n                found = true;\n          \
    \      break;\n            }\n        }\n        if(!found) {\n            temp.push_back(l[i]);\n\
    \        }\n    }\n    return temp;", "    // return std::unique(l.begin(), l.end());\
    \ // C++\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it = l.begin();\n    for (; it != l.end(); ++it) {\n        if (it != l.begin()\
    \ && *(it-1) == *it)\n            l.erase(it);\n    }\n    return l;", "    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long> u;\n    for (long i\
    \ : l) {\n        bool exist = false;\n        for (long j : u) {\n          \
    \  if (i == j) {\n                exist = true;\n            }\n        }\n  \
    \      if (!exist) {\n            u.push_back(i);\n        }\n    }\n    return\
    \ u;", "    std::sort(l.begin(), l.end());\n    std::vector<long> v;\n    for\
    \ (auto it = l.begin(); it != l.end(); it++) {\n        v.push_back(*it);\n  \
    \  }\n    return v;", "    std::vector<long> u;\n    for( auto i : l) {\n    \
    \    std::find(u.begin(), u.end(), i) == u.end() ? u.push_back(i) : \"\";\n  \
    \  }\n    return u;", "    std::sort(l.begin(), l.end());\n    std::set<long>\
    \ s;\n    std::vector<long> ret;\n    for (long i : l) {\n        if (s.find(i)\
    \ == s.end()) {\n            ret.push_back(i);\n            s.insert(i);\n   \
    \     }\n    }\n    return ret;", "  std::sort(l.begin(), l.end());\n  auto it\
    \ = std::unique(l.begin(), l.end());\n  return std::vector<long>(l.begin(), it);",
  "    std::vector<long> ret;\n    long s = 0;\n    long n = l.size();\n    for(long\
    \ i = 0; i < n; i++){\n        long c = l[i];\n        if(c != s){\n         \
    \   ret.push_back(c);\n            s = c;\n        }\n    }\n    return ret;",
  "    std::sort(l.begin(), l.end());\n    std::vector<long> u(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return u;", "    std::sort(l.begin(), l.end());\n \
    \   std::vector<long> u;\n    std::unordered_set<long> s(l.begin(), l.end());\n\
    \    for(long x : l)\n        u.push_back(x);\n    std::sort(u.begin(), u.end());\n\
    \    return u;", "    std::vector<long> v;\n    std::sort(l.begin(), l.end());\n\
    \    std::sort(v.begin(), v.end());\n    for (auto it = v.begin(); it != v.end();\
    \ ++it) {\n        auto pos = std::find(l.begin(), l.end(), *it);\n        if\
    \ (pos == l.end()) {\n            v.push_back(*it);\n        }\n    }\n    return\
    \ v;", "    std::vector<long> v;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ i = l.begin(); i != l.end(); ++i) {\n        bool exists = false;\n        for(auto\
    \ j = v.begin(); j != v.end(); ++j) {\n            if((*i) == (*j)) {\n      \
    \          exists = true;\n                break;\n            }\n        }\n\
    \        if(!exists) {\n            v.push_back(*i);\n        }\n    }\n    return\
    \ v;", "    std::sort(l.begin(), l.end());\n    std::vector<long> uniquel;\n \
    \   std::vector<bool> isUnique;\n    std::size_t uniqueCount = 0;\n    for(std::size_t\
    \ i = 0; i != l.size(); i++) {\n        if(!isUnique[i]) {\n            uniquel.push_back(l[i]);\n\
    \            ++uniqueCount;\n            isUnique[i] = true;\n        }\n    }\n\
    \    return uniquel;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ u;\n  std::adjacent_find(l.begin(), l.end(),\n                     [&u](long\
    \ i1, long i2){ return i1 == i2; });\n  std::copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \  return u;", "  std::sort(l.begin(), l.end());\n  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> u;\n  for (long x : l) {\n    u.push_back(x);\n  }\n  return\
    \ u;", "    // We will store the unique elements\n    std::vector<long> u;\n \
    \   bool visited[1 << 31] = {};\n    // Mark all the elements as unvisited\n \
    \   for (long i : l)\n        visited[i >> 5] |= 1 << (i & 0x1F);\n    // Now\
    \ mark the visited elements as visited\n    for (long i : l)\n        visited[i\
    \ >> 5] &= ~(1 << (i & 0x1F));\n    // Now repeatedly pick an element\n    for\
    \ (long i : l) {\n        long next = i ^ (visited[i >> 5] & (1 << (i & 0x1F)));\n\
    \        u.push_back(next);\n        visited[next] = 1;\n    }\n    return u;",
  "    // Create a set and add all elements to it\n    std::set<long> s;\n    for\
    \ (auto x : l) s.insert(x);\n    std::vector<long> ans;\n    ans.reserve(s.size());\n\
    \    for (auto x : s) {\n        ans.push_back(x);\n    }\n    return ans;", " \
    \   std::vector<long> res(l.size());\n    std::unordered_set<long> s;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i : l)\n    {\n        if(s.find(i) == s.end()) {\n\
    \            s.insert(i);\n            res.push_back(i);\n        }\n    }\n \
    \   return res;", "    // Use set for unique element\n    std::set<long> uniques;\n\
    \    for (auto& el : l)\n        uniques.insert(el);\n    // Copy back the unique\
    \ elements\n    std::vector<long> v (uniques.size());\n    for (auto& el : uniques)\n\
    \        v.push_back(el);\n    return v;", "    // copy into a vector with unique\
    \ elements\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n   \
    \ for(auto it = l.begin(); it != l.end(); ++it){\n        if(std::find(u.begin(),\
    \ u.end(), *it) == u.end()){\n            u.push_back(*it);\n        }\n    }\n\
    \    return u;", "  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n \
    \ u.assign(l.begin(), l.end() - 1);\n  return u;", "    std::vector<long> v;\n\
    \    v.reserve(l.size());\n    for(long i = 0; i < l.size(); ++i) {\n        for(long\
    \ j = i+1; j < l.size(); ++j) {\n            if(l[i] == l[j]) {\n            \
    \    v.push_back(l[i]);\n                break;\n            }\n        }\n  \
    \  }\n    std::sort(v.begin(), v.end());\n    return v;", "    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> uni;\n    uni.reserve(l.size());\n    for(long\
    \ i = 1; i < l.size(); i++){\n        if(l[i-1] != l[i])\n            uni.push_back(l[i]);\n\
    \    }\n    return uni;", "    std::vector<long> u;\n    for (long i : l) {\n\
    \        std::find(u.begin(), u.end(), i) == u.end() ? u.push_back(i) : std::find(u.begin(),\
    \ u.end(), i) == u.begin() ? u.erase(std::find(u.begin(), u.end(), i)) + 1 : ;\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto i : l) {\n        u.push_back(i);\n    }\n    return u;", "    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    u.push_back(l.at(0));\n    for(size_t\
    \ i = 1; i < l.size(); i++) {\n        if(l.at(i) != l.at(i-1)) {\n          \
    \  u.push_back(l.at(i));\n        }\n    }\n    return u;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> unique_list;\n    std::set<long> set;\n    for (long\
    \ i : l) {\n        set.insert(i);\n    }\n\n    for (long i : set) {\n      \
    \  unique_list.push_back(i);\n    }\n\n    return unique_list;", "\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::unique_copy(l.begin(), l.end(), std::back_inserter(l));\n\t\
    l.erase(std::unique(l.begin(), l.end()), l.end());\n\treturn l;", "    std::sort(l.begin(),\
    \ l.end());\n    std::set<long> s;\n    for (auto i : l)\n        s.insert(i);\n\
    \    return std::vector<long>(s.begin(), s.end());", "   std::sort(l.begin(),l.end());\n\
    \   std::vector<long> ret;\n   ret.push_back(l.at(0));\n   for(auto i=1;i<l.size();i++){\n\
    \        if(l.at(i)==l.at(i - 1))\n           continue;\n        ret.push_back(l.at(i));\n\
    \   }\n   return ret;", "    std::vector<long> v;\n    for(auto i=l.begin();i!=l.end();++i)\n\
    \        for(auto j=v.begin();j!=v.end();++j)\n            if((*i) == (*j)) v.erase(j);\n\
    \            else\n                if((*i) < (*j)) std::swap(*i,*j);\n       \
    \         v.push_back(*i);\n    return v;", "    std::sort(l.begin(), l.end());\n\
    \    std::vector<long> result(l);\n    std::sort(result.begin(), result.end());\n\
    \    return std::unique(result);", "    std::vector<long> v;\n    for (auto x\
    \ : l) {\n        auto it = std::find(v.begin(), v.end(), x); \n        if (it\
    \ == v.end()) v.push_back(x);\n    }\n    return v;", "    std::vector<long> v;\n\
    \    for(long i = 0; i < l.size(); ++i)\n        v.insert(v.end(), l[i]);\n  \
    \  return v;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n\
    \    ret.push_back(l[0]);\n    for (long i : l) ret.push_back(i);\n    return\
    \ ret;", "    if (l.size() == 0) return std::vector<long>();\n    std::vector<long>\
    \ res = l;\n    std::sort(res.begin(), res.end());\n    std::unique_copy(res.begin(),\
    \ res.end(), std::back_inserter(res));\n    return res;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    u.insert(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return u;", "    if (l.size() == 0) {\n        return\
    \ l;\n    }\n    std::sort(l.begin(), l.end());\n    std::vector<long> r;\n  \
    \  for (std::size_t i = 0; i < l.size() - 1; ++i) {\n        if (l[i] == l[i +\
    \ 1]) {\n            continue;\n        }\n        r.push_back(l[i]);\n    }\n\
    \    r.push_back(l.back());\n    return r;", "  std::sort(l.begin(), l.end());\n\
    \  auto it = std::unique(l.begin(), l.end());\n  auto end = l.end();\n  l.erase(it,\
    \ end);\n  return l;", "    long count[100];\n    std::iota(count, count + 100,\
    \ 0);\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ i : l)\n        if(!find(count, i)) {\n            u.push_back(i);\n       \
    \     count[i]++;\n        }\n    return u;", "    std::vector<long> v; v.insert(v.begin(),\
    \ 0); // inserting 0 as first element of vector\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end()); // erasing duplicates in v\n    return v;", "    int n =\
    \ l.size();\n    std::vector<long> ret(n);\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < n; i++) {\n        long x = l[i];\n        for (int j\
    \ = i; j < n; j++) {\n            if (l[j] == x)\n                break;\n   \
    \         ret[j] = l[j];\n        }\n    }\n    return ret;", "    int n = l.size();\n\
    \    std::vector<long> u(n, 0);\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++)\n            if\
    \ (l[j] != l[i]) {\n                u[l[i]++] = l[j];\n                break;\n\
    \            }\n    }\n    return u;", "    // Write your code here\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    int n = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (l[i] != l[n - i - 1]) u.push_back(l[i]);\n    }\n    return u;", " \
    \ // Use set to remove duplicates\n  std::set<long> s(l.begin(), l.end());\n \
    \ // Copy return vector\n  std::vector<long> r(s.size());\n  std::copy(s.begin(),\
    \ s.end(), r.begin());\n  return r;", "    std::vector<long> tmp;\n    tmp.assign(\
    \ std::begin(l), std::end(l) );\n    std::sort(std::begin(tmp), std::end(tmp));\n\
    \    tmp.erase( std::unique( std::begin(tmp), std::end(tmp)), std::end(tmp) );\n\
    \    return tmp;", "\tstd::vector<long> uni;\n\tstd::sort(l.begin(), l.end());\n\
    \tfor (long & i : l)\n\t\tif (i != i)\n\t\t\tuni.push_back(i);\n\treturn uni;",
  "  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n  for(long i=0; i<l.size();\
    \ ++i)\n    if(l[i] == i)\n      u.push_back(l[i]);\n  return u;", "    std::sort(l.begin(),\
    \ l.end()); // sort first\n    std::vector<long> res;\n    long curr = 0, last\
    \ = l[0]; // set first element as current and the rest as last\n    for (auto\
    \ i : l) {\n        if (i != last) {\n            res.emplace_back(last);\n  \
    \          last = i;\n        }\n    }\n    res.emplace_back(last);\n    return\
    \ res;", "    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;",
  "    auto it = std::unique(l.begin(), l.end());\n    return std::vector<long>(std::next(it),\
    \ l.end());", "    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n\
    \    long s = 0;\n    for (int i = 0; i < l.size(); ++i) {\n        if (l[i] !=\
    \ s) {\n            u.push_back(s);\n            s = l[i];\n        }\n    }\n\
    \    u.push_back(s);\n    return u;", "   sort(l.begin(), l.end());\n   auto current\
    \ = l.begin(), end = l.end();\n   std::set<long> s;\n   while(current != end)\
    \ {\n       s.insert(*current);\n       current++;\n   }\n   l.assign(s.begin(),\
    \ s.end());\n   return l;", "    // Sort array in increasing order \n    std::sort(l.begin(),l.end());\n\
    \    \n    // Remove duplicates from array\n    std::vector<long> temp(l.size());\n\
    \    std::set_difference(l.begin(),l.end(),temp.begin(),temp.end(),std::back_inserter(temp));\n\
    \    \n    // return new vector\n    return temp;", "    // return l;\n    std::vector<long>\
    \ res;\n    std::set<long> seen;\n    // for(long &x: l){\n    for(long x : l){\n\
    \        if(!seen.insert(x).second){\n            res.push_back(x);\n        }\n\
    \    }\n    return res;", "    long a = l[0];\n    std::vector<long> r;\n    for\
    \ (size_t i = 0; i < l.size(); ++i) {\n        if (l[i] == a) {\n            continue;\n\
    \        } else {\n            r.push_back(l[i]);\n        }\n        a = l[i];\n\
    \    }\n    return r;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i=0; i<l.size(); i++)\n        if(l[i] != i)\n            u.push_back(l[i]);\n\
    \    return u;", "    std::set<long> s;\n    for (long l : l)\n        s.insert(l);\n\
    \    return std::vector<long>(s.begin(), s.end());", "    std::vector<long> u;\n\
    \    u.assign(std::begin(l), std::end(l));\n    std::sort(std::begin(u), std::end(u));\n\
    \    return u;", "    // Create auxiliary array to store unique elements\n   \
    \ std::vector<long> uni(std::begin(l), std::end(l));\n    \n    // Sort array\n\
    \    std::sort(uni.begin(), uni.end());\n\n    // Remove duplicates\n    std::set<long>\
    \ u;\n    u.insert(uni.begin(), uni.end());\n    uni.clear();\n\n    // Return\
    \ unique elements\n    return u;", "    std::vector<long> v;\n    std::sort(l.begin(),l.end());\n\
    \    for(long i=0;i<l.size()-1;i++){\n        if(l[i]==l[i+1]){\n            continue;\n\
    \        }\n        else{\n            v.push_back(l[i]);\n        }\n    }\n\
    \    return v;", "    long t;\n    std::vector<long> v;\n    for (auto &e: l)\n\
    \        if (find(v.begin(), v.end(), e)==v.end())\n            v.push_back(e);\n\
    \    t = *std::max_element(v.begin(), v.end());\n    v.erase(std::remove(v.begin(),\
    \ v.end(), t), v.end());\n    return v;", "  std::sort(l.begin(), l.end());\n\
    \  std::vector<long> u;\n  for (long i : l) {\n    if (i == u[u.size() - 1])\n\
    \      continue;\n    else\n      u.push_back(i);\n  }\n  return u;", "    //\
    \ use std::map to sort list\n    // std::map<long, bool> map;\n    std::vector<long>\
    \ u;\n    std::map<long, bool> m;\n    for (long v : l) {\n        // insert if\
    \ not already exists\n        // map.insert({v, true});\n        if (!m.insert({v,\
    \ false}).second)\n            u.push_back(v);\n    }\n    return u;", "    int\
    \ size = 0;\n    for (long i : l) {\n        ++size;\n    }\n    std::vector<long>\
    \ v(size); // Create space for unique elements\n    std::iota(v.begin(), v.end(),\
    \ 0);\n    std::sort(v.begin(), v.end()); // Sort array in increasing order\n\
    \    int j = 0;\n    for (long i : l) {\n        while (!std::binary_search(v.begin(),\
    \ v.end(), i) && j++ != size - 1) {\n            std::iter_swap(v.begin() + j,\
    \ v.begin() + j + 1);\n        }\n        v[j] = i;\n    }\n    return v;", " \
    \   std::vector<long> u;\n    std::set<long> seen;\n    for(long i : l) \n   \
    \     if(!seen.insert(i).second) \n            u.push_back(i);\n    return u;",
  "    // Sort the list\n    std::sort(l.begin(), l.end());\n    // Return unique\
    \ elements from the sorted list\n    std::set<long> s;\n    for(auto &i : l)\n\
    \        if(s.find(i) == s.end())\n            s.insert(i);\n    return std::vector<long>(s.begin(),\
    \ s.end());", "  sort(l.begin(), l.end());\n  std::vector<long> ret;\n  ret.reserve(l.size());\n\
    \  for (int i = 0; i < l.size(); ++i) {\n    while (i != 0 && l[i] == l[i-1])\
    \ {\n      ret.push_back(l[i-1]);\n      --i;\n    }\n    ret.push_back(l[i]);\n\
    \  }\n  return ret;", "    std::vector<long> result;\n    result.reserve(l.size());\n\
    \    std::vector<std::pair<long, long>> tmp;\n    for (auto e : l)\n        if\
    \ (!tmp.empty() &&\n            tmp.back().first == e)\n            tmp.back().second++;\n\
    \        else\n            tmp.push_back(std::make_pair(e, 1));\n    for (auto\
    \ e : tmp)\n        if (e.second > 1)\n            result.push_back(e.first);\n\
    \    return result;", "    std::vector<long> ans;\n    std::vector<long>::iterator\
    \ it;\n    ans.reserve(l.size());\n    for (it = l.begin(); it != l.end(); ++it)\
    \ {\n        bool present = false;\n        for (ans.begin(); ans.end() != ans.end();\
    \ ++ans) {\n            if (*it == *ans) {\n                present = true;\n\
    \                break;\n            }\n        }\n        if (!present) {\n \
    \           ans.push_back(*it);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    std::sort(l.begin(), l.end());\n    std::size_t i = 0;\n    for (std::size_t\
    \ j = (std::size_t)l.size(); j > i; j--) {\n        if (l[j] == l[j-1]) ans.push_back(l[j]);\n\
    \    }\n    return ans;", "    assert(!l.empty());\n    std::vector<long> vec;\n\
    \    long u,d;\n    bool found;\n    vec.push_back(0);\n    for(long i=1;i<l.size();i++)\
    \ {\n        found = false;\n        u = l[i-1];\n        d = l[i];\n        for(long\
    \ j=i+1;j<vec.size();j++) {\n            if(vec[j] == u && abs(d-vec[j]) <= 1)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if(!found) vec.push_back(d);\n    }\n    return vec;", "  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (long i : l) {\n    if (u.empty() ||\
    \ u[u.size()-1] != i) {\n      u.push_back(i);\n    }\n  }\n  return u;", "  \
    \  std::sort(l.begin(), l.end());\n    auto it = std::unique(l.begin(), l.end());\n\
    \    std::vector<long> result(it - l.begin());\n    std::copy(l.begin(), it, result.begin());\n\
    \    return result;", "  std::sort(l.begin(), l.end());\n  std::unique(l.begin(),\
    \ l.end());\n  return l;", "    std::vector<long> uniq_l;\n    uniq_l.reserve(l.size());\n\
    \    for (long i : l) {\n        if (uniq_l.find(i) == uniq_l.end())\n       \
    \     uniq_l.push_back(i);\n    }\n    return uniq_l;", "    sort(l.begin(), l.end());\n\
    \    std::vector<long> u;\n    for(long i : l) {\n        for(long j=i+1;j<l.size();j++)\
    \ {\n            if(l[i]==l[j])\n                break;\n        }\n        if(j-i>1)\n\
    \            u.push_back(l[i]);\n    }\n    return u;", "    std::vector<long>\
    \ temp;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++)\n        if (i != std::find(l.begin(), l.end(), l[i]))\n            temp.push_back(l[i]);\n\
    \    return temp;", "    // sort the array in ascending order\n    sort(l.begin(),\
    \ l.end());\n    // return unique values\n    std::vector<long> u;\n    for(long\
    \ i: l)\n        if(!u.empty() && i == u[u.size() - 1])\n            u.pop_back();\n\
    \        else\n            u.push_back(i);\n    return u;", "    // Use a set\
    \ and sort\n    std::set<long> s(l);\n    return std::vector<long>(s.begin(),\
    \ s.end());", "    long x = 0;\n    std::vector<long> v;\n    for(long &it : l)\n\
    \        v.push_back(it);\n    std::sort(v.begin(), v.end());\n    for(long &it\
    \ : v)\n        if(it != x)\n            x.push_back(it);\n    return v;", " \
    \ std::vector<long> uniques;\n  long i = 0;\n  for (long j : l) {\n    if (i ==\
    \ j) {\n      i++;\n      continue;\n    }\n    uniques.push_back(j);\n  }\n \
    \ return uniques;", "    if (l.size() < 2) return l;\n    std::vector<long> res\
    \ = l;\n    std::sort(res.begin(), res.end());\n    std::sort(res.rbegin(), res.rend());\n\
    \    res.erase(std::unique(res.begin(), res.end()), res.end());\n    return res;",
  "    std::vector<long> result;\n    std::set<long> s;\n    for (long x: l)\n   \
    \     s.insert(x);\n    for (long x: l)\n        if (s.find(x) == s.end())\n \
    \           result.push_back(x);\n    return result;", "    std::vector<long>\
    \ res;\n    std::set<long> set(l.begin(), l.end());\n    std::copy(set.begin(),\
    \ set.end(), std::back_inserter(res));\n    return res;", "    std::vector<long>\
    \ result(l);\n    std::sort(result.begin(), result.end());\n    auto it = std::unique(result.begin(),\
    \ result.end());\n    result.erase(it, result.end());\n    return result;", " \
    \   std::vector<long> new_list;\n    \n    std::sort(l.begin(), l.end());\n  \
    \  \n    for (long i : l) {\n        if (i == l[-1]) new_list.push_back(i);\n\
    \    }\n    \n    return new_list;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ u;\n  for (long x : l)\n    if (u.find(x) == u.end())\n      u.push_back(x);\n\
    \  return u;", "    std::vector<long> u;\n    std::vector<long>::iterator it;\n\
    \    std::sort(l.begin(), l.end());\n    for (it = l.begin(); it != l.end(); it++)\
    \ {\n        if (u.find(*it) == u.end())\n            u.push_back(*it);\n    }\n\
    \    return u;", "    std::set<long> s;\n    for (long i : l) s.insert(i);\n \
    \   return std::vector<long>(s.begin(), s.end());", "  std::sort(l.begin(), l.end());\n\
    \  return std::unique(l.begin(), l.end());", "    sort(l.begin(), l.end());\n\
    \    std::vector<long> v;\n    v.push_back(l.front());\n    for (long i : l)\n\
    \        if (i != l.front() && v.back() != i) {\n            v.push_back(i);\n\
    \        }\n    return v;", "\t// sort the list and then remove the duplicates\n\
    \tstd::sort(l.begin(), l.end());\n\tstd::vector<long> rev(l.size());\n\tstd::iota(rev.begin(),\
    \ rev.end(), 0);\n\tstd::unique_copy(l.begin(), l.end(), std::back_inserter(rev));\n\
    \treturn rev;", "\tstd::sort(l.begin(), l.end()); // Sort ascending\n\tstd::set<long>\
    \ uniqueItems;\n\tfor (long i : l) { uniqueItems.insert(i); }\n\tstd::vector<long>\
    \ res(uniqueItems.begin(), uniqueItems.end());\n\treturn res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i = 0; i < l.size(); ++i) if (u[i] != l[i]) u.push_back(l[i]);\n    return\
    \ u;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(std::vector<long>::iterator it = l.begin(); it != l.end();\
    \ ++it) {\n        if(std::find(u.begin(), u.end(), *it) == u.end()) {\n     \
    \       u.push_back(*it);\n        }\n    }\n    return u;", "    auto result\
    \ = std::set<long>();\n    for (auto& el : l)\n        ++result[el];\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (auto& el : l)\n        if (res.find(el)\
    \ == res.end())\n            res.push_back(el);\n    return res;", "   std::vector<long>\
    \ u;\n   std::sort(l.begin(),l.end());\n   std::set_difference(l.begin(),l.end(),u.begin(),u.end(),std::less<long>());\n\
    \   return u;", "    if (l.size() <= 1) return l;\n    std::vector<long> ret(l.size());\n\
    \    long last = l[0], i = 1;\n    for (; i < l.size(); i++) {\n        if (l[i]\
    \ != last) ret[i - 1]++, last = l[i];\n    }\n    return ret;", "\t// Sort\n\t\
    std::sort(l.begin(), l.end());\n\n\t// Unique values\n\tstd::vector<long> u;\n\
    \tfor (long i: l) {\n\t\tstd::find(u.begin(), u.end(), i) == u.end() ? u.push_back(i)\
    \ : i++;\n\t}\n\treturn u;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ u;\n  for (int i = 0; i < l.size(); ++i) {\n    if (l[i] != l[i - 1]) {\n  \
    \    u.push_back(l[i]);\n    }\n  }\n  return u;", "   std::sort(l.begin(),l.end());\n\
    \   auto iter = l.begin();\n   std::vector<long> v;\n   while(iter != l.end())\
    \ {\n      if (iter == l.begin()) v.push_back(*iter);\n      else if((*iter) ==\
    \ (*(iter-1))) v.push_back(*iter);\n      ++iter;\n   }\n   return v;", "    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    return std::vector<long>(l.begin(),\
    \ it);", "    std::vector<long> v;\n    // Check for empty list\n    if (l.empty())\
    \ std::cout << \"Empty list.\";\n    else {\n        // Remove duplicate elements\n\
    \        std::sort(l.begin(), l.end());\n        std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(v));\n    }\n    return v;", "    std::vector<long> out;\n\
    \    for (long &x: l) {\n        std::unordered_map<long, bool> m;\n        for\
    \ (long &y: l) {\n            if (y == x) {\n                continue;\n     \
    \       }\n            if (m.count(y)) {\n                continue;\n        \
    \    }\n            m[y] = true;\n        }\n        out.push_back(x);\n    }\n\
    \    return out;", "    int n = l.size();\n    std::vector<long> u;\n    std::vector<long>\
    \ v(std::begin(l), std::end(l));\n    std::sort(std::begin(v), std::end(v));\n\
    \    for (long i = 0; i < n; i++) {\n        if (v[i] == v[i - 1]) {\n       \
    \     continue;\n        }\n        u.push_back(v[i]);\n    }\n    return u;",
  "    // Use bitset and set to zero\n    std::vector<long> u;\n    std::bitset<long>\
    \ seen;\n    for (long i : l)\n        if (seen.to_ulong() & 1LL)\n          \
    \  u.push_back(i);\n        seen.to_ulong() |= 1LL;\n    return u;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(),\
    \ l.end(), std::back_inserter(ret), [] (long a, long b) { return a < b; });\n\
    \    return ret;", "    std::sort(l.begin(), l.end());\n    auto it = std::unique(l.begin(),\
    \ l.end());\n    l.erase(it, l.end());\n    return l;", "  assert(l.size() > 0);\n\
    \  std::vector<long> u;\n  std::unordered_set<long> s(l.begin(), l.end());\n \
    \ for (long i : l) {\n    if (s.find(i) == s.end()) {\n      u.push_back(i);\n\
    \    }\n  }\n  return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long e : l) {\n        u.push_back(e);\n    }\n    return\
    \ u;", "  std::sort(l.begin(), l.end());\n  std::vector<long> result(l.size());\n\
    \  std::unique(l.begin(), l.end(), result.begin());\n  return result;", "    std::vector<long>\
    \ u;\n    std::set<long> s;\n    std::transform(l.begin(), l.end(), std::inserter(u,\
    \ u.end()), [&s] (long i) { return s.insert(i); });\n    return u;", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for\
    \ (long i: l) {\n        u.push_back(i);\n    }\n    return u;", "    auto it\
    \ = std::begin(l);\n    auto last = std::end(l);\n    it--;\n    std::vector<long>\
    \ u;\n    while(it != last) {\n        if(*it != *it){\n            u.push_back(*it);\n\
    \            it--;\n        }else{\n            it++;\n        }\n    }\n    return\
    \ u;", "    std::vector<long> v;\n    for(long &i : l) {\n        if(!find(v.begin(),\
    \ v.end(), i))\n            v.push_back(i);\n    }\n    return v;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \    return u;", "    std::vector<long> nums;\n    std::vector<long> out;\n\n\
    \    for (long i : l)\n        nums.push_back(i);\n\n    nums.erase(std::unique(nums.begin(),\
    \ nums.end()), nums.end());\n\n    for (long i : nums)\n        out.push_back(i);\n\
    \n    return out;", "    // Create new vector with unique elements\n    std::vector<long>\
    \ result;\n    std::set_difference(l.begin(), l.end(), std::back_inserter(result),\
    \ [](const long &a, const long &b) -> bool {\n        return a == b || a < b;\n\
    \    });\n    // Sort unique elements\n    std::sort(result.begin(), result.end());\n\
    \    // Return unique elements as return value\n    return result;", "    auto\
    \ it = std::begin(l);\n    auto end = std::end(l);\n    auto last = std::find(it,\
    \ end, 0);\n    std::vector<long> v(std::begin(last), std::end(last));\n    std::sort(v.begin(),\
    \ v.end());\n    return v;", "    std::vector<long> u;\n    std::sort(std::begin(l),\
    \ std::end(l));\n    std::unique_copy(std::begin(l), std::end(l), std::back_inserter(u));\n\
    \    return u;", "    std::vector<long> out;\n    for (long x : l) {\n       \
    \ bool flag = true;\n        for (long i = out.size(); i > 0 && flag; i--) {\n\
    \            if (out[i] == x) {\n                flag = false;\n             \
    \   break;\n            }\n        }\n        if (flag) {\n            out.push_back(x);\n\
    \        }\n    }\n    return out;", "    sort(l.begin(), l.end());\n    std::vector<long>\
    \ results;\n    results = l;\n    std::sort(results.begin(), results.end());\n\
    \    return results;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ res;\n    long k = 0;\n    for (long j=0; j<l.size(); j++)\n        if (j==0\
    \ || l[j-1] != l[j]) {\n            res.push_back(l[k++]);\n        }\n    return\
    \ res;", "  std::vector<long> v;\n  std::sort(l.begin(), l.end());\n  for (size_t\
    \ i = 0; i < l.size(); i++) {\n    if (i == 0 || l[i] != l[i - 1]) {\n      v.push_back(l[i]);\n\
    \    }\n  }\n  return v;"]
stop_tokens:
- "\n}"
