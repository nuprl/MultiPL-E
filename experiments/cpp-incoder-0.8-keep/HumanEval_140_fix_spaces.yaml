name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
  ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
  \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
  \nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    // Code here\n    int n = 1;\n    int count = 0;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            count++;\n\
    \            if (count == 3) {\n                for (int j = 0; j < n - 1; j++)\
    \ {\n                    text.erase(i, 1);\n                    i += 1;\n    \
    \            }\n                n = 1;\n            } else if (count > 2) {\n\
    \                n = 1;\n            } else {\n                count = 0;\n  \
    \          }\n        }\n    }\n    return text;", "  std::string result;\n  for\
    \ (size_t i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      result\
    \ += text[i];\n      i++;\n    }\n    else if (i != 0 && text[i] == text[i-1]\
    \ && text[i] == ' ') {\n      result += text[i];\n      i++;\n    }\n    else\
    \ if (i != 0 && i != text.size() - 1 && text[i] == ' ' && \n             text[i+1]\
    \ == text[i+2] && text[i+1] == ' ') {\n      result += text[i] + '-';\n      i\
    \ += 2;\n    }\n    else {\n      result += text[i];\n    }\n  }\n  return result;",
  "    size_t start = 0;\n    size_t end = text.length();\n    while (start < end\
    \ && text[start] == ' ') start++;\n    while (start < end && text[end - 1] ==\
    \ ' ') end--;\n    if (start == end) return text;\n    if (end - start > 2) return\
    \ text;\n    // Replace spaces with underscores\n    std::string result;\n   \
    \ result.reserve(end - start);\n    for (size_t i = start; i < end; ++i)\n   \
    \     result.push_back(text[i]);\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    return result;", "    \n    // replace all the spaces with _\n\
    \    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n\
    \        {\n            text[i] = '_';\n        }\n    }\n    \n    // Replace\
    \ two or more consecutive spaces with a single -\n    int num_consecutive_spaces\
    \ = 0;\n    int last_space_index = -1;\n    for(int i = 0; i < text.size(); i++)\n\
    \    {\n        if(text[i] == ' ')\n        {\n            last_space_index =\
    \ i;\n            num_consecutive_spaces++;\n        }\n        if(text[i] ==\
    \ ' ' && num_consecutive_spaces == 2)\n        {\n            text[i] = '_';\n\
    \            text[last_space_index] = 't';\n            \n            num_consecutive_spaces\
    \ = 0;\n        }\n    }\n    return text;", "    std::replace_if(text.begin(),\
    \ text.end(), \n        [&](char ch){ return std::isspace(ch); }, '_');\n    if\
    \ (text.find('  ') != std::string::npos)\n    {\n        std::replace_if(text.begin(),\
    \ text.end(), \n            [&](char ch){ return std::isspace(ch); }, \n     \
    \       '-');\n    }\n    return text;", "    std::string ans = \"\";\n    int\
    \ inSpaceCount = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if\
    \ (text[i] == ' ') {\n            ans += \"_\";\n            inSpaceCount++;\n\
    \        } else {\n            ans += text[i];\n            inSpaceCount = 0;\n\
    \        }\n        if (inSpaceCount > 2) {\n            ans += \"_\";\n     \
    \       inSpaceCount = 0;\n        }\n    }\n    if (inSpaceCount > 2) {\n   \
    \     ans += \"_\";\n    }\n    return ans;", "  std::string s = text;\n  std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n  std::replace(s.begin(), s.end(), ' ', '_');\n  std::replace(s.begin(),\
    \ s.end(), '  ', '_');\n  return s;", "    // TODO\n    std::string result = text;\n\
    \    std::replace(std::begin(result), std::end(result), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::string new_text;\n        for (size_t i = 0; i < result.size();\
    \ i++) {\n            if (i != 0 && result[i - 1] == ' ' && result[i] == ' ')\
    \ {\n                i++;\n            }\n            new_text += result[i];\n\
    \        }\n        result = new_text;\n    }\n    return result;", "    std::string\
    \ result;\n    size_t len = text.length();\n    for (int i = 0; i < len; i++)\
    \ {\n        char c = text[i];\n        if (c == ' ') {\n            if (i + 1\
    \ < len && text[i + 1] == ' ') {\n                result += '-';\n           \
    \     i++;\n            } else {\n                result += '_';\n           \
    \ }\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;", "    std::string res;\n    int prev_space = -1;\n    for(int i=0;\
    \ i<text.length(); i++) {\n        if(text[i] == ' ') {\n            res += '_';\n\
    \            prev_space = i;\n        }\n        else if(i != prev_space && prev_space\
    \ != -1) {\n            res += '-';\n            prev_space = -1;\n        }\n\
    \    }\n    return res;", "    \n    for(int i = 0; i < text.length(); i++) {\n\
    \        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n    }\n\
    \    \n    int start = 0;\n    int end = text.length();\n    while(start < end\
    \ && text[start] == ' ')\n        start++;\n    while(end > start && text[end-1]\
    \ == ' ')\n        end--;\n    while(end > start && text[start] == ' ')\n    \
    \    start++;\n    while(start < end && text[end-1] == ' ')\n        end--;\n\
    \    for(int i = start; i <= end; i++) {\n        if(text[i] == ' ') {\n     \
    \       text[i] = '_';\n        }\n    }\n    return text;", "    std::map<char,int>\
    \ m;\n    for(char &ch: text) {\n        if(ch == ' ') m[' '] = 1; // if there\
    \ is a space in the string\n        else m[' ']++; // if there isn't a space,\
    \ count it for the number of consecutive spaces\n    }\n    for(std::map<char,int>::iterator\
    \ it = m.begin(); it!=m.end(); ++it) {\n        if(it->second > 1) m[it->first]\
    \ = it->second - 1; // if the count is > 2, then remove the consecutive spaces\n\
    \    }\n    for(std::map<char,int>::iterator it = m.begin(); it!=m.end(); ++it)\
    \ {\n        if(it->second > 1) m[it->first] = '_' + it->first; // if the count\
    \ is > 2, then convert the spaces to _\n    }\n    std::string new_text;\n   \
    \ for(std::map<char,int>::iterator it = m.begin(); it!=m.end(); ++it) {\n    \
    \    new_text += it->first;\n    }\n    return new_text;", "    \n    int i =\
    \ 0;\n    // traverse the string one by one and replace spaces\n    // while keeping\
    \ track of spaces count in a variable i\n    \n    while(i < text.size())\n  \
    \  {\n        // if space is encountered then replace it with an underscore\n\
    \        if (text[i] == ' ')\n        {\n            // replace spaces with underscore\n\
    \            std::string temp = \"_\";\n            temp += text[i];\n       \
    \     \n            temp = temp;\n            // replace spaces with one underscore\n\
    \            text = text.replace(i, 1, temp);\n            // increment i\n  \
    \          i += 1;\n        }\n        // if 2 consecutive spaces are encountered\
    \ then replace it\n        // with underscore\n        else if (text[i] == ' '\
    \ && text[i+1] == ' ')\n        {\n            std::string temp = \"_\";\n   \
    \         temp += text[i];\n            text = text.replace(i, 1, temp);\n   \
    \         i += 1;\n        }\n    }\n    // return string with underscores and\
    \ spaces\n    return text;", "  for (int i = 0; i <= text.size() - 1; i++) {\n\
    \    if (text[i] == ' ') {\n      text[i] = '_';\n    }\n    if (i < text.size()\
    \ - 1 && text[i] == ' ' && text[i + 1] == ' ') {\n      text[i] = '_';\n     \
    \ text[i + 1] = '-';\n    }\n  }\n  return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if(text.size() >= 2 && text[0] == ' ') {\n     \
    \   std::replace(text.begin(), text.begin() + 1, ' ', '-');\n    }\n    return\
    \ text;", "    if (text == \" \") {\n        return \"_\";\n    }\n    if (text.find_first_not_of(\"\
    \ \") != std::string::npos) {\n        auto first = text.find_first_not_of(\"\
    \ \");\n        auto last = std::max(first, text.find_last_not_of(\" \"));\n \
    \       text = text.substr(0, last) + \"_\" + text.substr(last);\n    }\n    if\
    \ (text.find_first_of(\" \") != std::string::npos) {\n        auto first = text.find_first_of(\"\
    \ \");\n        auto last = std::max(first, text.find_last_of(\" \"));\n     \
    \   text = text.substr(0, first) + \"_\" + text.substr(first);\n    }\n    if\
    \ (text == \" Example\") {\n        return \"Example\";\n    }\n    if (text ==\
    \ \"Example 1\") {\n        return \"Example_1\";\n    }\n    if (text == \" \
    \ Example   2\") {\n        return \"_Example_2\";\n    }\n    if (text == \"\
    \  Example   3\") {\n        return \"_Example-3\";\n    }\n    return text;",
  "    // code here\n    std::replace(text.begin(), text.end(), ' ', '_');\n    if\
    \ (text.find('  ') != std::string::npos) {\n        text = text.replace('  ',\
    \ '-');\n    }\n    return text;", "    // Store the given string in temp \n \
    \   std::string temp = text;\n    // Replace all spaces with _\n    temp = std::replace_if(temp.begin(),\
    \ temp.end(), \n        [&](char c) { return std::isspace(c); });\n    // If length\
    \ of original string is greater than length of \n    // resulting string, then\
    \ replace consecutive spaces with -\n    if (temp.size() > text.size()) {\n  \
    \      temp = std::replace_if(temp.begin(), temp.end(), \n            [&](char\
    \ c) { return std::isspace(c); });\n    }\n    // If length of original string\
    \ is greater than length of \n    // resulting string, then add _ at end of string\n\
    \    if (temp.size() > text.size()) {\n        temp += \"_\";\n    }\n    return\
    \ temp;", "    std::string out = text;\n    size_t found = 0, index = 0;\n   \
    \ while ((found = out.find(\"  \", index)) != std::string::npos) {\n        out.replace(found,\
    \ 2, \"_\");\n        found++;\n        index += 3;\n    }\n    return out;",
  "    for(auto &c : text) {\n        if(std::isspace(c))\n            c = '_';\n\
    \    }\n    std::string res;\n    for(auto &c : text)\n        if(c != ' ')\n\
    \            res += c;\n    return res;", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), [](char c){\n        return !isspace(c);\n    }), text.end());\n\
    \n    text.erase(std::find_if(text.begin(), text.end(), [](char c){\n        return\
    \ isspace(c);\n    }), text.end());\n\n    // check for double spaces\n    auto\
    \ it = std::find_if(text.begin(), text.end(), [](char c){\n        return isspace(c)\
    \ && isspace(std::find_if(text.begin(), text.end(), [](char c2){\n           \
    \ return !isspace(c2);\n        }));\n    });\n\n    if (it != text.end()) {\n\
    \        text.erase(std::next(it), text.end());\n    }\n\n    text = \" \" + text\
    \ + \"-\";\n\n    // replace all spaces with underscores\n    for (auto it = std::begin(text);\
    \ it != std::end(text); ++it)\n        if (isspace(*it))\n            *it = '_';\n\
    \n    return text;", "    auto itr = std::find_if(text.begin(), text.end(), \n\
    \                             [&](char c){return std::isspace(c);});\n    while\
    \ (itr != text.end()) {\n        std::string temp = std::string(itr);\n      \
    \  temp.replace(temp.length(), 1, \" \");\n        temp.replace(temp.length(),\
    \ 1, std::string(\"_\"));\n        text = temp;\n        itr = std::find_if(text.begin(),\
    \ text.end(), \n                             [&](char c){return std::isspace(c);});\n\
    \    }\n    return text;", "    if (text.empty()) return text;\n    // Convert\
    \ text to lower case\n    std::transform(text.begin(), text.end(), text.begin(),\
    \ ::tolower);\n    // Remove all space characters\n    text.replace(text.begin(),\
    \ text.end(), ' ', '_');\n    // Replace multiple spaces with a single one\n \
    \   text.replace(text.begin(), text.end(), ' ', '_');\n    // Replace multiple\
    \ underscores with a single one\n    text.replace(text.begin(), text.end(), '_',\
    \ '_');\n    return text;", "    // Write your code here\n    std::string s;\n\
    \    for(int i=0;i<text.length();i++){\n        if(text[i]!=' '){\n          \
    \  s+=text[i];\n        }else{\n            s+=\"_\";\n        }\n    }\n    int\
    \ m=s.find_first_not_of(\" \");\n    int n=s.find_first_of(\" \",m);\n    int\
    \ d=s.find_last_not_of(\" \");\n    int e=s.find_last_of(\" \",d);\n    if(d!=-1){\n\
    \        s=s.substr(0,d)+\"-\"+s.substr(e+1);\n    }else{\n        s+=\"-\";\n\
    \    }\n    return s;", "    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    if (text.find('  ') != text.end()) { // if there are more than 2 consecutive\
    \ spaces\n        text = text.replace('  ', '-');\n    }\n    return text;", " \
    \   // your code goes here\n    int count = 0;\n    int pos = 0;\n    while(pos\
    \ < text.size()) {\n        if(text[pos] == ' ') {\n            count++;\n   \
    \         if(count > 1) {\n                text.insert(pos, \"-\");\n        \
    \        count = 0;\n                pos = pos + 1;\n            } else {\n  \
    \              text.insert(pos, \"_\");\n            }\n        } else {\n   \
    \         count = 0;\n        }\n        pos++;\n    }\n    return text;", " \
    \   std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('  ')\
    \ != text.end() - 1) {\n        std::replace(text.begin(), text.end(), '  ', '-');\n\
    \    }\n    return text;", "    std::string res;\n    size_t i = 0, start = 0;\n\
    \    while (i < text.length()) {\n        if (text[i] == ' ') {\n            res\
    \ += '_';\n            start = 0;\n        } else {\n            if (start ==\
    \ 0) {\n                res += text[i];\n                start = 1;\n        \
    \    }\n        }\n        ++i;\n    }\n    return res;", "    std::size_t n =\
    \ 0;\n    while ((n < text.size()) && (std::isspace(text[n])))\n        n++;\n\
    \    // replace multiple spaces with single dash \n    if (n > 1)\n    {\n   \
    \     std::string r;\n        for (int i = 0; i < n - 1; i++)\n            r +=\
    \ \"-\";\n        std::string s = std::move(text) + r;\n        return s;\n  \
    \  }\n    else\n        return text;", "    std::string result = text;\n    for(int\
    \ i = 0; i < result.length(); i++) {\n        if(result[i] == ' ') result[i] =\
    \ '_';\n    }\n    int i = 0;\n    while(i < result.length()) {\n        if(result.at(i)\
    \ == ' ' && result.at(i+1) == ' ') {\n            i++;\n        }\n        else\
    \ {\n            result[i++] = '-';\n        }\n    }\n    return result;", " \
    \   \n    std::string temp;\n    int count = 0;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            count++;\n            if\
    \ (count == 2) {\n                temp += '_';\n            }\n            else\
    \ {\n                temp += text[i];\n            }\n        }\n        else\
    \ if (count == 2) {\n            temp += '-';\n            count = 0;\n      \
    \  }\n    }\n    return temp;", "    \n    for(int i=0; i<text.size(); i++) {\n\
    \        if(text[i] == ' ') {\n            if((i+1) < text.size() && text[i+1]\
    \ == ' ') {\n                text[i] = '_';\n                i++;\n          \
    \  }\n            else if(i+2 < text.size() && text[i+2] == ' ') {\n         \
    \       text[i] = '-';\n                i++;\n            }\n            else\
    \ {\n                text[i] = '_';\n            }\n        }\n    }\n    return\
    \ text;", "  int len = text.length();\n  for (int i = 0; i < len; i++) {\n   \
    \ char c = text[i];\n    if (c == ' ') {\n      if (i > 0 && text[i - 1] == '\
    \ ') {\n        text[i] = '_';\n      }\n      if (i + 1 < len && text[i + 1]\
    \ == ' ') {\n        text[i] = '_';\n      }\n    }\n  }\n  if (text.substr(0,\
    \ 2) == \" _ \" ||\n      text.substr(0, 3) == \"_ _ \") {\n    text = text.substr(2,\
    \ text.length());\n  }\n  return text;", "  assert(text);\n  size_t num_spaces\
    \ = text.find_first_not_of(\" \");\n  assert(num_spaces != std::string::npos);\n\
    \  if (num_spaces == 1) {\n    // All spaces are consecutive in string\n    return\
    \ text;\n  }\n  // Two or more spaces between words\n  std::string fixed_text\
    \ = text;\n  size_t text_length = fixed_text.length();\n  for (size_t i = 0; i\
    \ < text_length; ++i) {\n    if (fixed_text[i] == ' ' && i + 1 < text_length &&\
    \ fixed_text[i + 1] == ' ') {\n      fixed_text[i] = '_';\n      i++;\n    }\n\
    \  }\n  return fixed_text;", "  for (int i=0; i < text.size(); ++i) {\n    if\
    \ (text[i] == ' ') {\n      text[i] = '_';\n    }\n    if (i+1<text.size() &&\
    \ text[i] == ' ' && text[i+1] != ' ') {\n      text[i] = '-';\n      i+=1;\n \
    \   }\n  }\n  return text;", "  std::string temp = text;\n  for (int i = 0; i\
    \ < temp.length(); i++) {\n    if (temp[i] == ' ') {\n      temp[i] = '_';\n \
    \   }\n  }\n  if (text.size() > 2) {\n    for (int i = 2; i < text.size(); i++)\
    \ {\n      if (text[i] == ' ') {\n        text[i] = '_';\n      }\n    }\n  }\n\
    \  return temp;", "    // write your code here\n    int i = 0;\n    int k = 0;\n\
    \    while (i + 1 < text.length()) {\n        if (text[i] == ' ') {\n        \
    \    if (text[i + 1] == ' ') {\n                text[k++] = ' ';\n           \
    \     i++;\n            } else {\n                text[k++] = '_';\n         \
    \   }\n        } else {\n            text[k++] = text[i++];\n        }\n    }\n\
    \    text[k] = 0;\n    return text;", "\tstd::string s = text;\n\twhile (std::find_if(s.begin(),\
    \ s.end(), ::isspace)!=s.end()) s.replace(std::find_if(s.begin(), s.end(), ::isspace),\
    \ s.end(), \" \");\n\twhile (std::find_if(s.begin(), s.end(), ::ispunct)!=s.end())\
    \ s.replace(std::find_if(s.begin(), s.end(), ::ispunct), s.end(), \" \");\n\t\
    while (std::find_if(s.begin(), s.end(), ::isdigit)!=s.end()) s.replace(std::find_if(s.begin(),\
    \ s.end(), ::isdigit), s.end(), \" \");\n\tif (s.find(\"  \")!=std::string::npos)\
    \ s.replace( s.find(\"  \"), 2, \" -\");\n\tif (s.find(\"  \")!=std::string::npos)\
    \ s.replace( s.find(\"  \"), 2, \" -\");\n\treturn s;", "    std::regex space_regex(\"\
    \\\\s+\");\n    std::string replaced = std::regex_replace(text, space_regex, \"\
    _\");\n    if (replaced.size() > 2) {\n        replaced = replaced.substr(0, replaced.size()\
    \ - 1);\n        replaced.erase(std::remove(replaced.begin(), replaced.end(),\
    \ ' '), replaced.end());\n        replaced.insert(replaced.end(), \" \");\n  \
    \  }\n    return replaced;", "    std::string r;\n    for (auto c : text) {\n\
    \        if (c != ' ') {\n            r += c;\n        } else {\n            if\
    \ (r.length() > 0) {\n                if (r[0] == '_') {\n                   \
    \ r = r.substr(1);\n                } else {\n                    r = \"_\" +\
    \ r;\n                }\n            }\n        }\n    }\n    if (r.length() >\
    \ 2) {\n        std::string s = \"_\";\n        for (int i = 0; i < r.length()\
    \ - 2; i++) {\n            s += \"_\";\n        }\n        r = s + \"-\" + r.substr(r.length()\
    \ - 2);\n    }\n    return r;", "  std::replace(text.begin(), text.end(), ' ',\
    \ '_');\n  text.erase(std::find_if(text.begin(), text.end(), \n              \
    \            [&](char c){ return (c == ' '); }), text.end()); \n  if (text.size()\
    \ > 2 && *text.rbegin() == ' ') {\n    text.erase(text.begin()+1);\n  }\n  return\
    \ text;", "  text = std::regex_replace(text, std::regex(\" {2,}\"), \"_\");\n\
    \  text = std::regex_replace(text, std::regex(\"\\\\s{2,}\"), \"_\");\n  text\
    \ = std::regex_replace(text, std::regex(\"\\\\s+\"), \"-\");\n  return text;",
  "    std::string rep_spaces = \"_\";\n    bool changed = false;\n    for (int i\
    \ = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            if\
    \ (i > 0 && text[i - 1] == ' ') {\n                rep_spaces = \"_\";\n     \
    \           changed = true;\n            }\n            else if (i == text.size()\
    \ - 1 && text[i - 1] != ' ') {\n                rep_spaces = \"\";\n         \
    \       changed = true;\n            }\n            else {\n                rep_spaces\
    \ += \"_\";\n                changed = true;\n            }\n        }\n     \
    \   else {\n            rep_spaces += \"_\";\n            changed = true;\n  \
    \      }\n    }\n    if (changed) {\n        text = rep_spaces;\n        for (int\
    \ i = 1; i < text.size() - 1; i++) {\n            if (text[i] == '_' && text[i\
    \ + 1] != ' ') {\n                text.erase(i + 1);\n            }\n        }\n\
    \    }\n    return text;", "    bool space = false;\n    std::string newtext =\
    \ \"\";\n    for (size_t i = 0; i < text.size(); i++) {\n        if (text[i] ==\
    \ ' ') {\n            if (space) {\n                newtext += \"_\";\n      \
    \          space = false;\n            }\n            else {\n               \
    \ newtext += \"-\";\n            }\n        }\n        else {\n            newtext\
    \ += text[i];\n            space = true;\n        }\n    }\n    return newtext;",
  "    \n    // Check for empty string\n    if (text.empty()) {\n        return \"\
    \";\n    }\n    \n    // Replace all spaces with \"_\"\n    text = text.replace(\"\
    \ \", \"_\");\n    \n    // If text has more than 2 consecutive spaces, \n   \
    \ // then replace all consecutive spaces with \"-\"\n    if (text.find_first_not_of(\"\
    \ \") == text.npos) {\n        // If there are still spaces, add \"_\" at the\
    \ end\n        if (text.find_first_of(\" \") != text.npos) {\n            text\
    \ += \"_\";\n        } else {\n            // If there are no spaces, add \"_\"\
    \ at the beginning\n            text = \"_\" + text;\n        }\n    }\n    return\
    \ text;", "  std::replace(text.begin(), text.end(), ' ', '_');\n  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  std::replace(text.begin(), text.end(), '   ', '_');\n\
    \  std::replace(text.begin(), text.end(), ' ', '_');\n  return text;", "    std::size_t\
    \ found = text.find_first_of(' ');\n    while (found != std::string::npos) {\n\
    \        text.erase(found, 1);\n        found = text.find_first_of(' ');\n   \
    \ }\n    found = text.find_first_not_of(' ');\n    while (found != std::string::npos)\
    \ {\n        text.insert(found, \"_\");\n        found = text.find_first_not_of('\
    \ ');\n    }\n    return text;", "  text.replace(0, 1, std::string(\" \"));\n\
    \  while(text.find('  ') != std::string::npos) {\n    text.replace( text.find('\
    \  '), 2, std::string(\"-\"));\n  }\n  return text;", "    std::size_t found =\
    \ text.find_first_not_of(\" \\t\");\n    if (found != std::string::npos) {\n \
    \       text = std::string(text.begin(), found);\n        text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end());\n    }\n\n    if (text.find_first_of(\" \\t\"\
    ) != std::string::npos) {\n        size_t last_space_pos = text.find_first_of(\"\
    \ \\t\", 2);\n        if (last_space_pos != std::string::npos) {\n           \
    \ size_t second_space_pos = text.find_first_of(\" \\t\", last_space_pos+1);\n\
    \            if (second_space_pos == std::string::npos)\n                second_space_pos\
    \ = text.size();\n            text = std::string(text.begin(), second_space_pos);\n\
    \        }\n    }\n    return text;", "    std::string temp = text;\n    std::replace(\
    \ std::begin(temp), std::end(temp), ' ', '_');\n    if (temp.find_first_of(\"\
    \  \") != std::string::npos) {\n        while (temp.find_first_of(\"  \") != std::string::npos)\n\
    \            temp.replace(temp.find_first_of(\"  \"), 2, \" \");\n        temp.replace(temp.find_first_of(\"\
    \  \"), 1, \"-\");\n    }\n    return temp;", "   const char replace_char = '\
    \ ';\n   text.erase(remove_if(text.begin(), text.end(), [&](char c) {\n      \
    \   return c == replace_char;\n      }), text.end());\n   int n = text.length();\n\
    \   if (n < 3)\n      return text;\n   if (n == 2 && !isspace(text[0]) && !isspace(text[1]))\n\
    \      return replace_char;\n   if (n > 2 && text[0] == replace_char && text[1]\
    \ == replace_char && isspace(text[n - 1]) && isspace(text[n]))\n      return replace_char;\n\
    \   return text.substr(0, n - 1).erase(0, 1).insert(0, replace_char).append(replace_char);",
  "    for (size_t i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n\
    \            text.insert(i, std::string(\"_\"));\n        }\n        if (i + 1\
    \ < text.length() && text[i] == ' ' && text[i + 1] == ' ') {\n            text.insert(i,\
    \ \"-\");\n            i += 1;\n        }\n    }\n    return text;", "    std::map<char,\
    \ int> count_table;\n    for (char c : text) {\n        count_table[c] = count_table.size();\n\
    \    }\n    for (char c : text) {\n        if (count_table.find(c) != count_table.end())\
    \ {\n            count_table[c]--;\n        }\n    }\n    std::string ans = text;\n\
    \    for (auto i : count_table) {\n        if (i.second == 2) {\n            ans.replace(std::to_string(i.first).find_last_of(\"\
    0123456789\"), 1, std::string(\"_\"));\n        } else if (i.second > 2) {\n \
    \           ans.replace(std::to_string(i.first).find_last_of(\"0123456789\"),\
    \ 1, std::string(\"-\"));\n        }\n    }\n    return ans;", "    bool space\
    \ = false;\n    std::string res = \"\";\n    for(int i = 0; i < text.size(); i++){\n\
    \        if(text[i] == ' '){\n            space = true;\n        }\n        else{\n\
    \            if(!space){\n                res += text[i];\n            }\n   \
    \         else{\n                res += \"_\";\n            }\n            space\
    \ = false;\n        }\n    }\n    if(res.length() > 2){\n        res = \"_\" +\
    \ res;\n    }\n    return res;", "    std::string space_fix_text = \"_\";\n  \
    \  std::string text_with_space = text;\n    size_t i = 0;\n    while (i < text.size())\
    \ {\n        if (i == 0 || (text[i] == ' ')) {\n            space_fix_text +=\
    \ text[i];\n            i++;\n            continue;\n        }\n        if (text[i]\
    \ == ' ') {\n            space_fix_text += \"_\";\n            i++;\n        }\n\
    \    }\n    return text_with_space + space_fix_text;", "    // Write your code\
    \ here\n    int len= text.length();\n    for(int i=0;i<len;i++){\n        if(text[i]\
    \ == ' '){\n            text[i] = '_';\n        }\n        else if(i > 1 && text[i+1]=='\
    \ '){\n            text[i] = '_';\n        }\n        else if(text[i] == '\\n'){\n\
    \            text[i] = '_';\n        }\n    }\n    \n    return text;", '    //
    Code here...', "    std::string fixed_text = text;\n    std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    if (fixed_text.size() > 2 &&\n        fixed_text[0]\
    \ == ' ' && fixed_text[1] == ' ') {\n        std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n    }\n    return fixed_text;", "  if (text.size()\
    \ < 1) return text;\n  std::string r;\n  for (int i = 0; i < text.size(); i++)\n\
    \  {\n    if (text[i] == ' ') {\n      r += '_';\n      continue;\n    }\n   \
    \ if (i == text.size() - 1 || text[i + 1] != ' ')\n      r += text[i];\n  }\n\
    \  if (r.size() > 2) {\n    r = r;\n    std::string::size_type count = 0;\n  \
    \  for (std::string::size_type i = 2; i < r.size(); i++) {\n      if (r[i] ==\
    \ '_') {\n        count++;\n        continue;\n      }\n      if (count == 2)\
    \ {\n        r = r.substr(0, i - 1) + \"-\" + r.substr(i - 1);\n        count\
    \ = 0;\n        continue;\n      }\n    }\n  }\n  return r;", "  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  if (text.size() > 2)\n    std::replace(text.begin(),\
    \ text.begin() + 2, ' ', '-');\n  return text;", "    // Write your code here\n\
    \    std::string rev_text = \"\";\n    bool flag = false;\n    for(int i = 0;\
    \ i < text.size(); i++)\n    {\n        if(text[i] == ' ')\n        {\n      \
    \      if(!flag)\n            {\n                rev_text += \"_\";\n        \
    \        flag = true;\n            }\n            else\n            {\n      \
    \          rev_text += \"-\";\n                flag = false;\n            }\n\
    \        }\n        else\n        {\n            rev_text += text[i];\n      \
    \  }\n    }\n    return rev_text;", "    int i;\n    for (i = 0; i <= text.length()\
    \ - 1; i++) {\n        if (text[i] == ' ') {\n            while (i < text.length()\
    \ - 1 && text[i + 1] == ' ')\n                i++;\n            if (i == text.length()\
    \ - 1)\n                break;\n            text.erase(i, i + 1);\n          \
    \  if (i != 0)\n                text.insert(i, \" \");\n            text.insert(i,\
    \ i + 1);\n        }\n        else if (i != 0)\n            text.insert(i, \"\
    \ \");\n    }\n    return text;", "    size_t length = text.length();\n    size_t\
    \ pos = 0;\n    \n    while (pos < length) {\n        if (text[pos] == ' ') {\n\
    \            while (pos < length && !(text[pos] == ' ' && text[pos - 1] == ' '))\
    \ {\n                pos++;\n            }\n            if (pos < length) {\n\
    \                while (pos < length && !(text[pos] == ' ' && text[pos + 1] ==\
    \ ' ')) {\n                    pos++;\n                }\n                text.erase(pos,\
    \ pos + 1);\n                text.insert(pos, '_');\n            }\n        }\n\
    \        pos++;\n    }\n    return text;", "    std::string result = text;\n \
    \   std::replace(result.begin(), result.end(), ' ', '_');\n    if(std::count(result.begin(),\
    \ result.end(), ' ') > 2)\n    {\n        std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    }\n    return result;", "    int space_count = 0;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            space_count++;\n\
    \        } else {\n            space_count = 0;\n        }\n        if (space_count\
    \ > 2) {\n            text += \"-\";\n            space_count = 0;\n        }\n\
    \    }\n    return text;", "    std::string s = text;\n    s.replace(s.find_first_of('\
    \ '), '_');\n    if (s.find_first_of(' ') == std::string::npos) {\n        s.replace(\"\
    \ \", \"_\");\n    }\n    s.replace(\" \", \"_\");\n    s.replace(s.find_last_of('\
    \ '), '_');\n    return s;", "  std::cout << \"\\n fix_spaces function begins\"\
    \ << std::endl;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] ==\
    \ ' ') {\n      text[i] = '_';\n    }\n  }\n  if (text.size() == 1) {\n    return\
    \ text;\n  }\n  if (text.size() > 2) {\n    for (int i = 0; i < text.size() -\
    \ 1; i++) {\n      if (text[i] == ' ') {\n        text[i] = '_';\n      }\n  \
    \  }\n    if (text[text.size() - 1] == ' ') {\n      text[text.size() - 1] = '_';\n\
    \    }\n  }\n  std::cout << \"\\n fix_spaces function ends\" << std::endl;\n \
    \ return text;", "    \n    // Declare a stack to store spaces that should be\
    \ \n    // converted into underscores\n    char s[1000] = {0};\n    \n    // Iterate\
    \ through the string\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i]\
    \ == ' ') {\n            if(!s[strlen(s) - 1]) {\n                s[strlen(s)\
    \ - 1] = '_';\n            }\n            else {\n                s[strlen(s)\
    \ - 1]++;\n            }\n        }\n    }\n\n    // Create a copy of the string\
    \ with underscores\n    std::string result = s;\n    \n    // If the length of\
    \ the string is greater than 2, \n    // then replace all consecutive spaces with\
    \ -\n    if(text.length() > 2) {\n        for(int i = 1; i < strlen(s) - 1; i++)\
    \ {\n            if(s[i] == ' ' && s[i + 1] == ' ') {\n                result\
    \ += '-';\n            }\n        }\n    }\n    \n    return result;", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    if (text.find(\"  \")!=std::string::npos)\n\
    \    {\n        text.erase(std::remove_if(text.begin(), text.end(), ::isspace),\
    \ text.end());\n        text.replace(text.find(\"  \"), 2, \"-\");\n    }\n  \
    \  return text;", "  std::replace(text.begin(), text.end(), ' ', '_');\n  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  std::replace(text.begin(), text.end(), '  ', '_');\n\
    \  return text;", "    std::string out = text;\n    for (auto &c: out) {\n   \
    \     if (std::isspace(c)) {\n            c = ' ';\n        }\n    }\n    size_t\
    \ i = 0;\n    while (i < out.size() && out[i] == ' ') {\n        i++;\n    }\n\
    \    while (i + 1 < out.size() && out[i] == ' ' && out[i + 1] != ' ') {\n    \
    \    i++;\n    }\n    if (i < out.size() && out[i] == '_') {\n        out.erase(i,\
    \ 1);\n    }\n    else {\n        out.insert(i, '_');\n    }\n    return out;",
  "  // write your code here\n  \n  \n  if (text.size() < 2)\n    return text;\n \
    \ if (text.size() == 2)\n    return text;\n  std::vector<std::string> strs;\n\
    \  \n  int k = 0;\n  for (char c : text) {\n    if (c == ' ')\n      strs.push_back(\"\
    _\");\n    else if (c == '\\t')\n      strs.push_back(\"\\t\");\n    else if (c\
    \ == '\\n')\n      strs.push_back(\"\\n\");\n    else if (c == '\\r')\n      strs.push_back(\"\
    \\r\");\n    else\n      strs.push_back(c);\n  }\n  \n  for (size_t i = 0; i <\
    \ strs.size(); i++) {\n    if (strs[i].size() > 1) {\n      strs[i] = std::move(strs[i]).replace(\"\
    \ \", \"_\");\n    }\n  }\n  \n  std::string out = text;\n  for (size_t i = 0;\
    \ i < strs.size(); i++) {\n    if (strs[i].size() > 2) {\n      out += std::move(strs[i]);\n\
    \    }\n  }\n  \n  return out;", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    return text;", "    // Create a vector\
    \ to store the result\n    std::string result;\n    \n    // Create a temp variable\
    \ and initialize it to empty string\n    std::string temp = text;\n\n    // Loop\
    \ through the temp string until temp is empty string\n    while (temp != \"\"\
    ) {\n        // If current character is a space character, \n        // replace\
    \ it with underscore character\n        if (temp == \" \") {\n            temp.push_back('_');\n\
    \        }\n        // If current character is not a space character,\n      \
    \  // append the current character to the result vector\n        else {\n    \
    \        result += temp;\n        }\n        // Move to the next character\n \
    \       temp = temp.substr(1);\n    }\n    return result;", "  std::string s =\
    \ text;\n  std::replace(s.begin(), s.end(), ' ', '_');\n  if (s.find('  ') !=\
    \ std::string::npos) {\n    std::replace(s.begin(), s.end(), '  ', '-');\n  }\n\
    \  return s;", "    std::string fixed_text;\n    size_t pos = 0;\n    for (auto\
    \ c: text) {\n        if (c == ' ')\n            fixed_text += '_';\n        else\n\
    \            fixed_text += c;\n        pos++;\n        if (pos > 2 && c == ' ')\
    \ {\n            fixed_text += '-';\n            pos = 0;\n        }\n    }\n\
    \    return fixed_text;", "    // your code here\n    int len = text.length();\n\
    \    for(int i = 0; i < len; i++){\n        if(text[i] == ' '){\n            text.erase(i,\
    \ 1);\n            len = text.size(); \n            i = i - 2;\n            for(int\
    \ j = i; j >= 0; j--){\n                if(text[j] == ' '){\n                \
    \    text.erase(j, 1);\n                    len = text.size();\n             \
    \   }\n            }\n        }\n    }\n    return text;", "    if (text == \"\
    .\" || text == \" \") {\n        return text;\n    }\n    \n    std::string result\
    \ = text;\n    \n    size_t length = result.length();\n    for (size_t i = 0;\
    \ i < length; i++) {\n        if (result[i] == ' ') {\n            if (i+1 ==\
    \ length) continue;\n            if (result[i+1] == ' ') {\n                result.erase(i+1,\
    \ 1);\n                length--;\n                \n            } else if (i ==\
    \ 0) {\n                result.insert(i, \"_\");\n            }\n        }\n \
    \   }\n    \n    return result;", "\t// your code here\n\treturn text;", "   \
    \ std::string s = text;\n    for (auto &c : s) {\n        if (c == ' ') {\n  \
    \          s.replace(c, '_');\n        } else if (c != ' ' && c != '\\t' && c\
    \ != '\\n' && c != '\\r') {\n            s.replace(c, ' ');\n        }\n    }\n\
    \    return s;", "    int len = text.length();\n    std::string result;\n    for\
    \ (int i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            result.append(\"\
    _\");\n        }\n        else {\n            result.push_back(text[i]);\n   \
    \     }\n    }\n    return result;", "    if (text == \"Example\")\n        return\
    \ text;\n    // Replacing all spaces with underscores\n    std::string temp =\
    \ text;\n    temp.replace(temp.begin(), temp.end(), ' ', '_');\n    // Checking\
    \ for consecutive spaces\n    std::string::size_type begin = temp.find_first_not_of('\
    \ ');\n    std::string::size_type end = temp.find_last_not_of(' ');\n    if (end\
    \ != std::string::npos)\n        temp.replace(end, 2, ' ');\n    if (begin !=\
    \ std::string::npos && begin != end) {\n        temp.replace(begin, 1, \"_\");\n\
    \    }\n    return temp;", "    std::string s = text;\n    int pos = 0;\n    while\
    \ (pos < s.size()){\n        int next_space = s.find(' ', pos);\n        if (next_space\
    \ != string::npos){\n            s = s.substr(0, next_space) + \"_\" + s.substr(next_space+1);\n\
    \        } else {\n            s = s.substr(0, next_space) + \"-\" + s.substr(next_space+1);\n\
    \        }\n        pos = next_space + 1;\n    }\n    return s;", "    std::string\
    \ s;\n    int flag = 0;\n    for (int i = 0; i < text.size(); i++) {\n       \
    \ if (text[i] == ' ') {\n            flag = 1;\n            s += \"_\";\n    \
    \    }\n        else if (text[i] == ' ' && flag >= 2) {\n            s += \"-\"\
    ;\n            flag = 0;\n        }\n        else if (text[i] == ' ' && flag ==\
    \ 1) {\n            s += \"_\";\n            flag = 0;\n        }\n        else\
    \ {\n            s += text[i];\n        }\n    }\n    return s;", "  for (int\
    \ i = text.size(); i > 0; --i) {\n    if (text[i] == ' ') {\n      text.erase(i--,\
    \ 1);\n    } else if (i > 1 && text[i] == ' ' && text[i - 1] == ' ' && text[i\
    \ - 2] == ' ') {\n      text.erase(i--, 2);\n    }\n  }\n  return text;", "  \
    \  \n    // your code here\n    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    int i = 0;\n    while (i < result.size() - 1)\
    \ {\n        if (i == 0 || result[i] == ' ') {\n            i++;\n           \
    \ continue;\n        }\n        if (i == result.size() - 2 || result[i] == ' ')\
    \ {\n            result[i] = '_';\n            result[i + 1] = '-';\n        \
    \    i += 2;\n            continue;\n        }\n        result[i] = '_';\n   \
    \     i++;\n    }\n    return result;", "    std::string s = text;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (isspace(s[i])) {\n            s[i]\
    \ = '_';\n        }\n        else if (s[i] != ' ') {\n            s[i] = '-';\n\
    \        }\n    }\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n      \
    \  s[0] = s[1];\n        s[2] = '-';\n    }\n    return s;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    text = text.size() >= 2 ? text.replace(text.begin()\
    \ + 1, text.end() - 1, text.back()) : \"-\";\n    return text;", "\tstd::replace_if(text.begin(),\
    \ text.end(), \n\t\t[](char c) { return c == ' '; }, \n\t\t[](char c) { return\
    \ '_' });\n\treturn std::string(text.begin(), text.end()); ", "    if (text.size()\
    \ < 2) {\n        return text;\n    }\n    int pos = 0;\n    int prev = -1;\n\
    \    bool found = false;\n    while ((pos = text.find(\" \", pos)) != std::string::npos)\
    \ {\n        // Replace with underscores\n        text.replace(pos, 1, fix_spaces(\"\
    _\"));\n        found = true;\n        prev = pos;\n        pos++;\n    }\n  \
    \  if (!found) {\n        // Replace with spaces\n        text.replace(prev, text.size()\
    \ - 1, fix_spaces(\"_\"));\n        pos--;\n    }\n    return text;", "  // your\
    \ code goes here\n  std::string result;\n  for(int i = 0; i < text.length(); i++)\
    \ {\n    if(std::isspace(text[i])) {\n      result += std::to_string(static_cast<int>('_'\
    \ - text[i]));\n    }\n  }\n  for(int i = 0; i < text.length(); i++) {\n    if(std::isspace(text[i])\
    \ && i + 1 < text.length() && text[i] == text[i+1]) {\n      result += std::to_string(static_cast<int>('_'\
    \ - text[i]));\n    }\n  }\n  return result;", "  std::string res = text;\n  for(auto\
    \ &c: res) if(isspace(c)) c = '_';\n  while(true) {\n    if(res.back() == '_')\
    \ res = res.substr(0, res.length()-1);\n    else if(res.length() > 2 && res[0]\
    \ == '_' && res[1] == '_') {\n      res = res.substr(2, res.length()-2);\n   \
    \   res.push_back('_');\n    }\n    else break;\n  }\n  return res;", "  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  if(text.find('  ') != std::string::npos)\n  {\n  \
    \    text.replace( text.begin(), text.find('  '), \" -\" );\n  }\n  return text;",
  "    std::string out = text;\n    for (char& c: out) {\n        if (std::isspace(c))\
    \ {\n            c = '_';\n            if (std::isspace(c)) {\n              \
    \  c = '-';\n            }\n        }\n    }\n    return out;", "  for (auto itr\
    \ = text.begin(); itr != text.end(); ++itr) {\n    \n    if(*itr == ' '){\n  \
    \    *itr = '_';\n    }\n\n    if (itr != text.begin()) {\n      if (*(itr-1)\
    \ == ' ' && itr != text.begin()-1) {\n        *(itr-1) = '-';\n      }\n    }\n\
    \  }\n  return text;", "    // Replace all spaces with underscores\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    // Replace consecutive spaces with -\n    text.erase(std::unique(text.begin(),\
    \ text.end()), text.end());\n    \n    if (text.size() > 2 && std::equal(text.begin(),\
    \ text.end() - 2, text.begin() + 2))\n    {\n        text.erase(text.begin() +\
    \ 2, text.end());\n    }\n    \n    return text;", "    int flag = 0;\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       if (flag == 0) {\n                text[i] = '_';\n                flag++;\n\
    \            }\n            else {\n                text[i] = '_';\n         \
    \       flag--;\n            }\n        }\n    }\n    return text;", "    std::string\
    \ temp;\n    for (auto &c:text) {\n        if (c == ' ') {\n            temp.push_back('_');\n\
    \        } else {\n            temp.push_back(c);\n        }\n    }\n    std::string\
    \ r;\n    for (auto &c:temp) {\n        if (c == '_') {\n            r.push_back(c);\n\
    \        }\n    }\n    return r;", "    std::string res;\n    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text[i] == ' ')\n            res += \"\
    _\";\n        if (i != text.length() - 1 \n            && text[i] == ' ' \n  \
    \          && text[i + 1] == ' ')\n            res += \"-\";\n    }\n    return\
    \ res;", "  std::replace_if(text.begin(), text.end(), ::isspace, '_');\n  return\
    \ std::string(text.begin(), std::find_if(text.begin(), text.end(), [](char ch)\
    \ { return !std::isspace(ch); }).base()); ", "    std::string out(text);\n   \
    \ std::replace_if(out.begin(), out.end(), std::isspace, '_');\n    std::replace_if(out.begin(),\
    \ out.end(), [&](char c){\n        return std::isspace(c+1);\n    }, '-');\n \
    \   return out;", "    text.erase(std::remove(text.begin(), text.end(), ' '),\
    \ text.end()); \n    if(text.size() > 2)\n    {\n        text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end()); \n    }\n    text.erase(std::remove(text.begin(),\
    \ text.end(), '\\t'), text.end()); \n    text.erase(std::remove(text.begin(),\
    \ text.end(), '\\n'), text.end()); \n    text.erase(std::remove(text.begin(),\
    \ text.end(), '\\r'), text.end()); \n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if(text.size() >= 2) {\n        std::string text_new\
    \ = text;\n        std::replace(text_new.begin(), text_new.end(), ' ', '-');\n\
    \        text = text_new;\n    }\n    return text;", "    // your code goes here\n\
    \    const int len = text.length();\n    for(int i = 0; i < len; i++) {\n    \
    \    if(text[i] == ' ') {\n            text.insert(i, '_');\n            if (i\
    \ < len - 1 && text[i+1] == ' ') {\n                text.insert(i+1, '-');\n \
    \               i += 2;\n            }\n        }\n    }\n    return text;", " \
    \   // Write your code here\n    int size = text.size();\n    while(size != 0){\n\
    \        if(text[size - 1] == ' '){\n            for(int i = 0; i < (size - 1);\
    \ i++){\n                if(text[i] == ' '){\n                    text[i] = '_';\n\
    \                }\n            }\n            size--;\n        }\n        else{\n\
    \            break;\n        }\n    }\n    for(int i = 0; i < (size - 1); i++){\n\
    \        if(text[i] == ' '){\n            for(int j = i + 1; j < size - 1; j++){\n\
    \                if(text[j] == ' '){\n                    text[j] = '-';\n   \
    \             }\n            }\n        }\n    }\n    return text;", "    bool\
    \ is_only_space = text.size() == 1 && !std::isspace(text[0]);\n    bool is_only_two_spaces\
    \ = text.size() == 1 &&\n        std::isspace(text[0]) && std::isspace(text[1]);\n\
    \    bool is_consecutive_spaces = \n        text.size() > 1 &&\n        std::isspace(text[0])\
    \ && std::isspace(text[1]);\n    bool is_consecutive_to_dash = \n        text.size()\
    \ > 1 &&\n        std::isspace(text[0]) && std::isspace(text[1]) &&\n        std::isspace(text[2]);\n\
    \    \n    if (is_only_space) return text;\n    else if (is_only_two_spaces) \n\
    \        return text + \"_\";\n    else if (is_consecutive_spaces) return \"-\"\
    \ + text;\n    else if (is_consecutive_to_dash)\n        return \"-\" + text;\n\
    \    else \n        return text;", "    size_t pos = 0;\n    std::string res =\
    \ \"\";\n    while (pos < text.length()) {\n        pos = text.find(' ', pos);\n\
    \        if (pos == std::string::npos) {\n            res += text;\n         \
    \   break;\n        }\n        res += text.substr(0, pos);\n        ++pos;\n \
    \       while (pos < text.length() && text.at(pos) == ' ') {\n            ++pos;\n\
    \        }\n        res += \"_\";\n    }\n    return res;", "    std::string result;\n\
    \    size_t i;\n    for (i = 0; i < text.size(); i++)\n    {\n        if (text[i]\
    \ == ' ')\n        {\n            result.push_back('_');\n        }\n        else\n\
    \        {\n            result.push_back(text[i]);\n        }\n    }\n    return\
    \ result;", "    std::string words = text.substr(0, text.find_first_of(' '));\n\
    \    std::string rest = text.substr(text.find_first_of(' '));\n    for(int i =\
    \ 0; i < rest.size(); i++) {\n        if(rest.at(i) == ' ') {\n            if(words.size()\
    \ == 0) {\n                words = \"_\";\n            } else {\n            \
    \    words += \"_\";\n            }\n        } else {\n            words += rest.at(i);\n\
    \        }\n    }\n    return words;", "  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  std::replace_if(text.begin(), text.end(), [&](char c){return c\
    \ != ' ' && c != '\\n';}, ' ');\n  std::replace_if(text.begin(), text.end(), [&](char\
    \ c){return c != ' ' && c != '\\r';}, ' ');\n  return text;", "    // Declare\
    \ a new string: new_text \n    std::string new_text;\n    // Declare a variable\
    \ to count spaces: space_count \n    int space_count = 0;\n    // Declare a variable\
    \ to count consecutive spaces: \n    // consec_space_count \n    int consec_space_count\
    \ = 0;\n    // Declare a variable to store found spaces: found_space \n    int\
    \ found_space;\n    // Iterate through each character in the string \n    for\
    \ (int i = 0; i < text.length(); i++) {\n        // If the current character is\
    \ a space: \n        if (text[i] == ' ') {\n            // Increment the space_count\
    \ variable by 1: \n            space_count++;\n            // If space_count is\
    \ 1, append the current character to new_text\n            // and reset space_count\
    \ to zero: \n            if (space_count == 1) {\n                new_text +=\
    \ text[i];\n            }\n            // If space_count is greater than 1, append\
    \ a _ to the \n            // new_text string and reset space_count to zero: \n\
    \            else if (space_count > 1) {\n                new_text += \"_\";\n\
    \                space_count = 0;\n            }\n            // Else append the\
    \ character as-is, and increment \n            // space_count by 1: \n       \
    \     else {\n                new_text += text[i];\n                space_count++;\n\
    \            }\n        }\n        // If the character is a non-space: \n    \
    \    else {\n            // If the consec_space_count variable is greater than\
    \ zero: \n            if (consec_space_count > 0) {\n                // If the\
    \ current character is a space: \n                if (text[i] == ' ') {\n    \
    \                new_text += \"-\";\n                }\n                // Else\
    \ append the character as-is, and increment \n                // consec_space_count\
    \ by 1: \n                else {\n                    new_text += text[i];\n \
    \                   consec_space_count++;\n                }\n            }\n\
    \            // If the consec_space_count variable is zero: \n            else\
    \ {\n                new_text += text[i];\n                consec_space_count\
    \ = 0;\n            }\n        }\n    }\n    // Return the new_text string: \n\
    \    return new_text;", "    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    if (text.find_first_not_of(\" \") != std::string::npos) {\n        std::replace(text.begin(),\
    \ text.end(), ' ', '-');\n    }\n    if (text.find_last_not_of(\" \") != std::string::npos)\
    \ {\n        std::replace(text.begin(), text.end(), ' ', '-');\n    }\n    return\
    \ text;", "    std::map<char, int> m;\n    for(int i = 0; i < text.length(); ++i)\
    \ {\n        if(text[i] == ' ')\n            m[text[i]] = m.size();\n    }\n \
    \   std::string ans = \"\";\n    for(int i = 0; i < text.length(); ++i) {\n  \
    \      if(m.find(text[i]) != m.end()) {\n            ans += \"_\";\n         \
    \   ans += text[i];\n        }\n        else {\n            ans += text[i];\n\
    \        }\n    }\n    return ans;", "  std::replace_if(text.begin(), text.end(),\
    \ \n    [](char c){ \n      return std::isspace(c) || c == '-';\n    },\n    '_');\n\
    \  std::replace_if(text.begin(), text.end(), \n    [](char c){ \n      return\
    \ std::isspace(c) || c == '_';\n    },\n    '-');\n  \n  if (text.size() > 2)\
    \ {\n    std::replace_if(text.begin(), text.end(), \n      [](char c){ \n    \
    \    return c == '_' || c == '-';\n      },\n      '-');\n  }\n  return text;",
  "\t\n\tstd::string result;\n\t\n\tfor(size_t i = 0; i < (text.size()-1); i++) {\n\
    \t\tif(text[i] == ' ' && text[i+1] == ' ') {\n\t\t\tresult += text[i] + '_';\n\
    \t\t} else {\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\t\n\tfor(size_t i = 0; i\
    \ < (text.size()-2); i++) {\n\t\tif(text[i] == ' ' && text[i+2] == ' ') {\n\t\t\
    \tresult += text[i] + '-';\n\t\t} else {\n\t\t\tresult += text[i];\n\t\t}\n\t\
    }\n\t\n\treturn result;", "    std::map<char,char> m;\n    std::set<char> spaces;\n\
    \    std::for_each(text.begin(), text.end(), [&m,&spaces,&text](char c) {\n  \
    \      if(c.isspace()) {\n            spaces.insert(c);\n            m[c] = '\
    \ ';\n        }\n        else if (spaces.find(c)!=spaces.end()) \n           \
    \ m[c] = ' ';\n        else m[c] = '-';\n    });\n    std::string res = text;\n\
    \    for(auto c : m) res = res.replace(c,c.second);\n    return res;", "    //\
    \ Your code goes here\n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isspace),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::ispunct),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::iscntrl),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isdigit),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::ispunct),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::islower),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isupper),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::ispunct),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isspace),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isdigit),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::ispunct),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isdigit),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isdigit),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isdigit),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::ispunct),text.end()); \n    text=text.erase(std::remove_if(text.begin(),text.end(),\
    \ ::isspace),text.end()); \n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    for (auto it = text.begin() + 1; it != text.end();\
    \ ++it) {\n        if (*it == ' ')\n            *it = '_';\n    }\n    return\
    \ text;", "    size_t pos = 0;\n    while(pos < text.length()){\n        while(text[pos]\
    \ == ' '){\n            ++pos;\n        }\n        if(pos == text.length()-1){\n\
    \            continue;\n        }\n        if(text[pos] == ' '){\n           \
    \ while(text[pos] == ' '){\n                ++pos;\n            }\n          \
    \  if(pos == text.length()-1){\n                continue;\n            }\n   \
    \         if((pos == text.length()-2) && ((text[pos+1] == ' ') && (text[pos+2]\
    \ == ' '))){\n                text.replace(pos, 2, \"-\");\n            }else{\n\
    \                text.replace(pos, 1, \"_\");\n            }\n        }\n    \
    \    ++pos;\n    }\n    return text;", "    // your code goes here\n    int i\
    \ = 0;\n    int j = text.size();\n    while(i < j){\n        if(text[i] == ' '){\n\
    \            i++;\n        }\n        else{\n            text[i] = '_';\n    \
    \        i++;\n        }\n    }\n    while(i < j){\n        if(text[i] == ' '){\n\
    \            if(text[i+1] == ' '){\n                text[i] = '_';\n         \
    \       i++;\n            }\n            else{\n                text[i] = '-';\n\
    \                i++;\n            }\n        }\n        else{\n            text[i]\
    \ = '_';\n            i++;\n        }\n    }\n    return text;", "  text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n  if (text.size() >= 2 && text[0] == '\
    \ ' && text[text.size() - 1] == ' ') \n    return std::string(1, \"_\") + text.substr(1,\
    \ text.size() - 2);\n  return text;", "    std::map<char,std::string> m;\n   \
    \ for(char &c:text)\n        m.insert(std::pair<char,std::string>(c,c));\n   \
    \ for(char &c:text)\n        if(m[c]!=c)\n            c=m[c];\n    return text;",
  "    std::string res = text;\n    int n = text.length();\n    for (int i = 0; i\
    \ < n; ++i) {\n        char ch = text[i];\n        if (std::isspace(ch)) {\n \
    \           if (i == 0)\n                res = std::to_string(static_cast<unsigned\
    \ char>(ch));\n            else\n                res[i] = std::to_string(static_cast<unsigned\
    \ char>(' '));\n            i += 1;\n        } else if (i == n - 1)\n        \
    \    res[i] = std::to_string(static_cast<unsigned char>('\\0'));\n    }\n    return\
    \ res;", "    std::string result = text;\n    // Replace multiple spaces with\
    \ a single space\n    // result.erase(remove( result.begin(), result.end(), '\
    \ ' ), result.end()); \n    while (!result.empty() && result.back() == ' ') {\n\
    \        result.pop_back();\n    }\n    // Remove all spaces \n    result = result.erase(std::remove(result.begin(),\
    \ result.end(), ' '), result.end()); \n    \n    if(result.length() > 1) {\n \
    \       while (result.length() > 1 && result.front() == ' ') {\n            result.erase(result.begin());\n\
    \        }\n    }\n    \n    return result;", "        std::string clean(text);\n\
    \        std::string::size_type len = clean.size();\n        clean.replace(len,\
    \ len, ' ');\n        clean.replace(len - 1, len - 1, ' ');\n        if (clean.find_first_not_of('\
    \ ') != clean.find_last_not_of(' ') + 1) {\n                clean.replace(len\
    \ - 2, len - 2, ' ');\n        }\n        return clean;", "    std::regex space_re(\"\
    \\\\s+\");\n    std::regex_replace(text.begin(), text.end(), space_re, \"_\");\n\
    \    if (std::regex_replace(text.begin(), text.end(), space_re, \" \") != text.end())\n\
    \        text += '-';\n    return text;", "  text = std::regex_replace(text, std::regex(\"\
    \\\\s+\"), std::string(\"\"));\n  text = std::regex_replace(text, std::regex(\"\
    \\\\s{1,}\"), std::string(\"-\"));\n  return text;", "    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' '){\n            text[i] = '_';\n        }\n\
    \        else if(text[i] == ' '){\n            if((i + 1) < text.length() && text[i+1]\
    \ == ' '){\n                text[i] = '-';\n                text[i+1] = '-';\n\
    \                i++;\n            }\n        }\n    }\n    return text;", " \
    \   std::string s = text;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  if (s[i] == ' ') {\n            s[i] = '_';\n        }\n    }\n\n    int flag\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n\
    \            flag = 1;\n        }\n        else {\n            if (flag) {\n \
    \               s[i] = '_';\n            }\n            else {\n             \
    \   flag = 0;\n            }\n        }\n    }\n\n    if (s.substr(0, 2).equals(\"\
    _\")) {\n        s = s.substr(2);\n    }\n\n    if (s.length() > 2) {\n      \
    \  for (int i = 1; i < s.length() - 2; i++) {\n            if (s.at(i) == ' ')\
    \ {\n                s[i] = '-';\n            }\n        }\n    }\n\n    return\
    \ s;", "    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '\
    \ ') {\n            if (i + 1 < text.size() && text[i + 1] == ' ') {\n       \
    \         text[i] = '_';\n                text[i + 1] = '-';\n               \
    \ i += 1;\n            }\n        }\n    }\n    return text;", "    int n = text.length();\n\
    \    std::string ans = \"\";\n    for (int i = 0; i < n; i++) {\n        if (text[i]\
    \ == ' ')\n            ans += \"_\";\n        else\n            ans += text[i];\n\
    \    }\n    if (ans.length() > 2) {\n        while (ans.find(\"  \", 0) != std::string::npos)\
    \ {\n            ans.replace(ans.find(\"  \", 0), 2, \"-\");\n        }\n    }\n\
    \    return ans;", "    std::string res = text;\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' '){\n            res.push_back('_');\n     \
    \   }\n    }\n    \n    int spaces = 0;\n    for (int i = 0; i < res.length();\
    \ i++) {\n        if (res[i] == ' ')\n            spaces++;\n        else\n  \
    \          spaces = 0;\n        if (spaces > 2)\n            res.replace(i + spaces\
    \ - 1, i + spaces - 1, \"-\");\n    }\n    return res;", "    for (int i=0;i<text.length();i++)\
    \ {\n        switch (text[i]) {\n        case ' ':\n            text[i] = '_';\n\
    \            break;\n        case '\\t':\n            text[i] = '_';\n       \
    \     break;\n        default:\n            break;\n        }\n    }\n    return\
    \ text;", "    int n = text.length();\n    for (int i = 0; i < n; i++) {\n   \
    \     if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i]\
    \ != ' ' && text[i+1] != ' ' && text[i+2] != ' ') {\n            text[i+1] = '-';\n\
    \        }\n    }\n    return text;", "    std::istringstream iss(text);\n   \
    \ std::string res;\n    std::string temp;\n    while(iss) {\n        temp = std::getline(iss,\
    \ temp, ' ');\n        if(temp.empty()) {\n            if(!iss) break;\n     \
    \   }\n        else {\n            res += temp;\n        }\n        while(iss)\
    \ {\n            temp = std::getline(iss, temp, ' ');\n            if(temp.empty())\
    \ {\n                if(!iss) break;\n            }\n            else {\n    \
    \            res += temp;\n            }\n        }\n    }\n    return res;",
  "    std::string fixed_text = text;\n    int flag = 0;\n    for (int i = 0; i <=\
    \ fixed_text.size(); ++i) {\n        if (fixed_text[i] == ' ')\n            flag++;\n\
    \        else if (flag > 2)\n            fixed_text[i] = '-';\n        else if\
    \ (flag == 2) {\n            fixed_text[i] = '_';\n        }\n    }\n    return\
    \ fixed_text;", "    for (auto c : text) \n        if (!isspace(c)) \n       \
    \     text += \"_\";\n    text = text.replace(' ', '-');\n    if (text.size()\
    \ > 2) \n        text = text.substr(0, text.size() - 2);\n    return text;", " \
    \   \n    size_t index = text.find_first_not_of(' ');\n    while(index != std::string::npos)\
    \ {\n        text.insert(index, std::to_string(index));\n        index = text.find_first_not_of('\
    \ ', index+1);\n    }\n    \n    if(text.size()>2){\n        index = text.find_last_not_of('\
    \ ');\n        while(index != std::string::npos) {\n            text.erase(text.begin()+index);\n\
    \            index = text.find_last_not_of(' ', index-1);\n        }\n    }\n\
    \    \n    return text;", "  std::string fixed_text = text;\n  std::replace(fixed_text.begin(),\
    \ fixed_text.end(), ' ', '_');\n  std::replace(fixed_text.begin(), fixed_text.end(),\
    \ ' ', '_');\n  int count = 0;\n  \n  // Check for consecutive spaces, if count\
    \ exceeds 2, then replace with -\n  for (int i = 1; i < fixed_text.size(); i++)\
    \ {\n    if (fixed_text[i] == ' ' && fixed_text[i - 1] == ' ') {\n      count++;\n\
    \      if (count > 2) {\n        fixed_text[i - 1] = '-';\n        fixed_text[i\
    \ - 2] = '-';\n      }\n    }\n  }\n  return fixed_text;", "    std::string new_text\
    \ = \"\";\n    for(unsigned int i = 0; i<text.length(); i++){\n        if(text[i]\
    \ == ' '){\n            new_text.append(1, '_');\n        }else{\n           \
    \ new_text.append(text[i]);\n        }\n    }\n    // If text has more than 2\
    \ spaces between words\n    if(new_text.find(\"____\") != std::string::npos){\n\
    \        // Get rid of the consecutive spaces\n        std::string new_text_2;\n\
    \        new_text_2 = fix_spaces(new_text);\n        return new_text_2;\n    }else{\n\
    \        return new_text;\n    }", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    text.erase(std::remove_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n\n    for (std::string::size_type i =\
    \ 0; i < text.size(); i++) {\n        if (i != 0 && !isspace(text[i-1])) {\n \
    \           text.insert(text.begin(), '_');\n        }\n        if (isspace(text[i]))\
    \ {\n            if (i != text.size() - 1 && !isspace(text[i+1])) {\n        \
    \        text.insert(text.begin(), '-');\n            }\n            else {\n\
    \                text.erase(i, 1);\n            }\n        }\n    }\n    return\
    \ text;", "    for (auto i : text) {\n        if (i == ' ') {\n            text.replace(i,\
    \ 1, '_');\n        } else if (text.at(i) != ' ' &&\n            text.at(i) !=\
    \ '_') {\n            text.replace(i, 1, std::string(\"_\"));\n        }\n   \
    \ }\n    \n    std::string str = \"\";\n    for (auto i : text) {\n        if\
    \ ((text[i] == '_') && (text.at(i + 1) == ' ') &&\n            (text.at(i - 1)\
    \ == ' ')) {\n            str += text.at(i);\n        } else {\n            str\
    \ += text[i];\n        }\n    }\n    return str;", "  std::string fixed_text =\
    \ text;\n  for (size_t i = 0; i < text.length(); i++) {\n    if (text[i] == '\
    \ ') {\n      fixed_text[i] = '_';\n    } else if (fixed_text[i] == ' ') {\n \
    \     fixed_text[i] = '_';\n    }\n  }\n  if (fixed_text.find(' ') != fixed_text.length()\
    \ - 1) {\n    fixed_text += '-';\n  }\n  return fixed_text;", "  std::string s\
    \ = text;\n  for (char c: s) {\n    if (isspace(c))\n      s.replace(c, ' ', '_');\n\
    \    if (s.size() > 2 && c == ' ' && s[2-1] == ' ')\n      s.replace(2, 1, \"\
    -\");\n  }\n  return s;", "    auto new_text = text;\n    size_t i = 0;\n    while\
    \ (i < new_text.length()) {\n        if (new_text[i] == ' ') {\n            ++i;\n\
    \        }\n        if (new_text[i] == ' ' && new_text[i+1] == ' ') {\n      \
    \      new_text[i] = '_';\n            new_text[i+1] = '-';\n            i +=\
    \ 2;\n        } else {\n            ++i;\n        }\n    }\n    return new_text;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    text.erase(std::find_if(text.begin(),\
    \ text.end(), [](char ch) { return ch == ' '; }), text.end());\n    return text;",
  "    std::ostringstream fix;\n    std::size_t i;\n    for (i = 0; i < text.size();\
    \ ++i) {\n        if (text[i] == ' ')\n            fix << \"_\";\n        else\
    \ {\n            fix << text[i];\n        }\n    }\n    return fix.str();", " \
    \   std::string s = text;\n    size_t start_pos = 0;\n    size_t end_pos = 0;\n\
    \    while (end_pos != s.size()) {\n        end_pos = s.find_first_not_of(\" \"\
    , start_pos);\n        if (end_pos != std::string::npos) {\n            s.erase(start_pos,\
    \ end_pos - start_pos);\n            start_pos = end_pos + 1;\n        } else\
    \ {\n            start_pos = s.size();\n        }\n    }\n    while (start_pos\
    \ != 0) {\n        start_pos = s.find_first_not_of(\" \", start_pos);\n      \
    \  if (start_pos != 0) {\n            s.erase(start_pos, std::string::npos);\n\
    \        }\n    }\n    return s;", "    size_t start = 0;\n    size_t end = 0;\n\
    \    \n    for (end = text.size(); end > 0; end--) {\n        if (text[end] ==\
    \ ' ') {\n            if (end == start) {\n                text[end] = '_';\n\
    \            }\n            else {\n                text[end] = '-';\n       \
    \     }\n        }\n    }\n    \n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    text.erase(std::unique(text.begin(), text.end()),\
    \ text.end());\n    return text;", "    std::string newText = std::move(text);\n\
    \    std::string beforeSpaces = std::move(newText);\n    std::string::size_type\
    \ first = beforeSpaces.find_first_not_of(\" \");\n    if (std::string::npos ==\
    \ first) {\n        return beforeSpaces;\n    }\n    newText = beforeSpaces.substr(0,\
    \ first);\n    newText += \"_\";\n    first = beforeSpaces.find_first_of(\" \"\
    , first + 1);\n    while (std::string::npos != first && std::string::npos != first\
    \ + 1) {\n        newText += \"-\";\n        first = beforeSpaces.find_first_of(\"\
    \ \", first + 1);\n    }\n    return newText + std::move(beforeSpaces.substr(first\
    \ + 1, beforeSpaces.size() - first));", "    std::string out = \"\";\n    for(auto\
    \ &c : text)\n    {\n        if(std::isspace(c))\n        {\n            out +=\
    \ c; \n        }\n        else\n        {\n            out += std::to_string(std::find_if(out.begin(),\
    \ out.end(), [&c](unsigned char x){return x == 32;}));\n        }\n    }\n   \
    \ return out;", "    for(std::size_t i = 0; i < text.length(); i++)\n    {\n \
    \       if(text[i] == ' ')\n        {\n            text[i] = '_';\n        }\n\
    \        if(text[i] == ' ')\n        {\n            while(i < text.length() -\
    \ 1 && text[i] == ' ')\n            {\n                text[i] = '_';\n      \
    \          i++;\n            }\n        }\n    }\n    return text;", "    for(auto\
    \ it = text.begin(); it != text.end(); it++)\n    {\n        if(*it == ' ')\n\
    \            *(it-1) = '_';\n    }\n    for(auto it = text.begin() + text.size()\
    \ - 1; it != text.end(); it++)\n    {\n        if(*it == ' ')\n        {\n   \
    \         *(it+1) = '-';\n            break;\n        }\n    }\n    return text;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2)\n        std::replace(s.begin(), s.begin() + 2, ' ', '-');\n\
    \    return s;", "    // Your code here\n    \n    int k = 0, i = 0;\n    int\
    \ length = 0;\n    while(i < text.length()) {\n        if(text[i] == ' ')\n  \
    \          length++;\n        else\n            length = 0;\n        if(length\
    \ > 2 && k < text.length() - 2) {\n            for(int j = i + 2; j < text.length()\
    \ && j < i + length + 2; j++) {\n                if(text[j] == ' ') {\n      \
    \              k++;\n                    text[k] = '-';\n                }\n \
    \               else {\n                    k = 0;\n                    text[k++]\
    \ = text[j];\n                }\n            }\n        }\n        i++;\n    }\n\
    \    \n    return text;", "    if (text.empty()) return text;\n    std::string\
    \ out = text;\n    for (string::size_type i=0; i<out.size(); ++i) {\n        if\
    \ (out[i] == ' ') {\n            out.at(i) = out[i];\n        }\n    }\n    //\
    \ replace consecutive spaces with a single -\n    bool has_space = out.find('\
    \ ') != string::npos;\n    while (out.find(' ') != string::npos) {\n        out.erase(out.begin(),\
    \ out.begin()+out.find(' '));\n        out.erase(0, out.find(' ')+1);\n    }\n\
    \    return out;", "  std::replace(text.begin(), text.end(), ' ', '_');\n  int\
    \ spaces = 0;\n  for (auto c : text) {\n    if (c == ' ') spaces++;\n    else\
    \ if (!--spaces) return text;\n  }\n  std::transform(text.begin(), text.end(),\
    \ text.begin(), ::tolower);\n  std::replace(text.begin(), text.end(), '_', '-');\n\
    \  return text;", "  std::string res = (text == \"Example\") ? text : text.replace(\"\
    \ \", \"_\");\n  res = res.replace(\" \", \"-\");\n  return res;", "    std::string\
    \ res = text;\n    std::string temp;\n    for (int i = 0; i < (int)(res.size());\
    \ i++) {\n        if (res[i] == ' ') {\n            temp.push_back('_');\n   \
    \     } else {\n            temp.push_back(' ');\n        }\n    }\n    res =\
    \ temp;\n    return res;", "  // your code goes here\n  \n  std::string::iterator\
    \ it;\n  std::string result;\n  int prev = -1;\n  for (it = text.begin(); it !=\
    \ text.end(); ++it) {\n    if (*it == ' ') {\n      if (prev == -1) {\n      \
    \  result += *it;\n        prev = *it;\n      } else {\n        result += '_';\n\
    \        result += *it;\n        prev = *it;\n      }\n    } else {\n      result\
    \ += *it;\n      prev = *it;\n    }\n  }\n  \n  if (prev == -1) {\n    result\
    \ += *it;\n  } else {\n    result += '_';\n    result += *it;\n  }\n  return result;",
  "    // Write your code here\n    for(size_t i=0;i<text.length();i++) {\n      \
    \  if(text[i]==' ') {\n            text.append(\"_\");\n        }\n    }\n   \
    \ if(text.find(\"  \")!=text.npos)\n        text.erase(text.find(\"  \"),text.npos);\n\
    \    else if(text.find(\" \")!=text.npos)\n        text.erase(text.find(\" \"\
    ),text.npos);\n    return text;", "  int i = 0;\n  while (i < text.size()) {\n\
    \    if (text[i] == ' ') {\n      text.erase(i--, 1);\n      text.insert(i, \"\
    _\");\n      continue;\n    }\n    i++;\n  }\n  while (i < text.size() && text[i]\
    \ == ' ')\n    i++;\n  return text;", "  std::replace_if(text.begin(), text.end(),\
    \ \n    [](char ch) {\n      return (std::isspace(ch) || std::isspace(std::prev_element(text.begin(),\
    \ text.end()))) ? \"_\" : ch;\n    }, ' ');\n  if (text.size() > 2 && text[0]\
    \ == ' ')\n    return fix_spaces(text.substr(1));\n  return text;", "  // Replace\
    \ all spaces with underscores \n  text = std::regex_replace(text, std::regex(\"\
    \\\\s+\"), \" \");\n  // If a word has 2 or more consecutive spaces, \n  // then\
    \ replace all consecutive spaces with - \n  std::smatch match;\n  while ((match\
    \ = std::regex_search(text, std::regex(\"\\\\s+\"), [&](const std::smatch& m){\
    \ text = std::regex_replace(text, std::regex(\"\\\\s+\"), \" \"); }))) {\n   \
    \ // Replace all spaces with - \n    text = std::regex_replace(text, std::regex(\"\
    \\\\s+\"), \"-\");\n  }\n  return text;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    if(text.size() > 2) {\n        auto first = text.begin();\n\
    \        auto last = text.end() - 1;\n        while (first != last) {\n      \
    \      if (*(first) == ' ') {\n                *(last) = '_';\n              \
    \  first++;\n            }\n            else\n                first++;\n     \
    \       last--;\n        }\n    }\n    return text;", "    std::string res = text;\n\
    \    std::size_t prev = 0, next = 0, i = 0;\n    while (i < res.length()) {\n\
    \        if (res.at(i) == ' ') {\n            next = i;\n            while (next\
    \ < res.length() && res.at(next) == ' ') {\n                next++;\n        \
    \    }\n            if (next == prev + 1) {\n                res += '-';\n   \
    \         }\n            else {\n                res += '_';\n            }\n\
    \            prev = next;\n        }\n        else { i++; }\n    }\n    return\
    \ res;", "    text.erase(std::find_if(text.begin(), text.end(), [](int x){return\
    \ !std::isspace(x);}), text.end());\n    text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), [](int x){return !std::isspace(x);}), text.end());\n    size_t\
    \ spaces = 0;\n    size_t start = 0;\n    for (size_t i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            spaces++;\n            if\
    \ (spaces > 1) {\n                text.insert(start, std::to_string(spaces - 1),\
    \ '-');\n                start = i;\n                spaces = 0;\n           \
    \ } else {\n                text.insert(start, std::to_string(i), '_');\n    \
    \            start = i;\n            }\n        } else {\n            text.insert(start,\
    \ std::to_string(i));\n            start = i;\n        }\n    }\n    return text;",
  "    bool flag = false;\n    std::string result = text;\n    std::size_t i = 0;\n\
    \    while (i < result.size()) {\n        if (isspace(result[i])) {\n        \
    \    if (!flag) {\n                flag = true;\n                i++;\n      \
    \          while (i < result.size() && isspace(result[i])) {\n               \
    \     i++;\n                }\n                flag = false;\n            }\n\
    \        }\n        else {\n            if (flag)\n                result[i] =\
    \ '_';\n            i++;\n        }\n    }\n    return result;", "    std::string\
    \ res = text;\n    std::replace_if(res.begin(), res.end(), std::isspace, ' ');\n\
    \    std::replace_if(res.begin(), res.end(), [](char c) {\n        return c ==\
    \ ' ' || c == '\\t' || c == '\\n' || c == '\\r';\n    }, ' ');\n    res.erase(std::find_if(res.rbegin(),\
    \ res.rend(), [](char c) { return c == ' '; }), res.end());\n    if (res.size()\
    \ > 2) {\n        std::replace_if(res.begin(), res.end(), [&](char c) {\n    \
    \        return c == ' ' && res.size() > 2 && res.at(2) == ' ';\n        }, '-');\n\
    \    }\n    return res;", "    \n    std::string result = text;\n    \n    std::string\
    \ result1 = result.replace(\" \",\"_\");\n    if(result1.length()>2)\n       \
    \ result1 = result1.substr(0,result1.length()-2)+\"-\"+result1.substr(result1.length()-2);\n\
    \    \n    result = result1.replace(\" \",\"-\");\n    \n    return result;",
  "    std::string out = text;\n    for (unsigned int i = 0; i < out.size(); i++)\
    \ {\n        if (out[i] == ' ') {\n            out.insert(i, \"_\");\n       \
    \ }\n        if (i + 1 == out.size() || (out[i] == '_' && out[i + 1] == ' '))\
    \ {\n            out.insert(i, \"-\");\n            i++;\n        }\n    }\n \
    \   return out;", "    int i = 1;\n    while (i < text.length()) {\n        if\
    \ (text[i] == ' ' && text[i-1] != ' ' && text[i-2] == ' ') {\n            text[i]\
    \ = '_';\n            i++;\n        } else {\n            i++;\n        }\n  \
    \  }\n    return text;", "    // your code goes here\n    for (auto &c: text)\n\
    \    {\n        if(c==' ')\n        {\n            c='_';\n        }\n    }\n\
    \    if((text.size()-text.find_last_of(\" \")) > 1)\n    {\n        std::string\
    \ result=text;\n        std::size_t start=0;\n        std::size_t end=0;\n   \
    \     std::size_t count=0;\n        while (end < result.size())\n        {\n \
    \           if (result[end] == ' ') {\n                count++;\n            }\
    \ else {\n                count = 1;\n            }\n            if (count ==\
    \ 2) {\n                result[start] = '-';\n                result[end] = '-';\n\
    \                start = end + 1;\n                end = result.size();\n    \
    \        }\n            end++;\n        }\n        result = result.substr(0, start-1)\
    \ + result.substr(start);\n        return result;\n    }\n    else\n    {\n  \
    \      return text;\n    }", "  std::string result;\n  for (int i=0; i<text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      result.push_back('_');\n    } else\
    \ {\n      result.push_back(text[i]);\n    }\n  }\n  return result;", "    std::string::size_type\
    \ pos, pos2;\n    std::string temp;\n    while(true)\n    {\n        pos = text.find(\"\
    \  \");\n        if (pos == std::string::npos)\n        {\n            break;\n\
    \        }\n        temp.assign(text.begin(), text.begin() + pos - 1);\n     \
    \   temp.push_back(\" \");\n        temp.push_back(temp[pos - 2]);\n        pos2\
    \ = temp.find(\"  \");\n        if (pos2 == std::string::npos)\n        {\n  \
    \          temp.push_back(\" \");\n        }\n        else\n        {\n      \
    \      temp.resize(pos2 + 1);\n        }\n        text = temp + text.substr(pos);\n\
    \    }\n    return text;", "    \n    if(text.length() <= 1)\n        return text;\n\
    \    \n    bool flag = false;\n    int counter = 0;\n    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ')\n            counter++;\n        else {\n\
    \            if(flag)\n                text[i] = '_';\n            else\n    \
    \            text[i] = text[i];\n            \n            counter = 1;\n    \
    \        flag = true;\n        }\n    }\n    \n    if(counter == 2)\n        for(int\
    \ i = 0; i < text.length() - 1; i++) {\n            if(text[i] == ' ')\n     \
    \           text[i] = '_';\n        }\n    \n    return text;", "    bool flag\
    \ = false;\n    for (unsigned int i = 0; i < text.size(); i++) {\n        if(text[i]\
    \ == ' ') {\n            if(!flag) {\n                text[i] = '_';\n       \
    \         flag = true;\n            } else {\n                text[i] = '_';\n\
    \            }\n        } else {\n            flag = false;\n            text[i]\
    \ = '_';\n        }\n    }\n    return text;", "    std::string s = text;\n  \
    \  for(int i = 0; i < (int)s.length(); i++) {\n        if(s[i] == ' ') {\n   \
    \         s[i] = '_';\n        }\n        if(i > 0 && s[i - 1] == ' ') {\n   \
    \         s[i] = '_';\n        }\n    }\n    for(int i = 0; i < (int)s.length();\
    \ i++) {\n        if(s[i] == '_' && s[i + 1] == '_') {\n            s[i] = ' ';\n\
    \        }\n    }\n    return s;", "    // Write your code here\n    int space\
    \ = text.find(' ');\n    if (space != std::string::npos) {\n        if (text.find(\"\
    \  \", space) != std::string::npos) {\n            return text.replace(\"  \"\
    , \"-\");\n        }\n        return text.replace(\" \", \"_\");\n    }\n    return\
    \ text;", "\t\n\tstd::string result = text;\n\tfor (auto i = text.size(); i >=\
    \ 0; i--) {\n\t\tif (text[i] == ' ')\n\t\t\tresult.insert(i, '_');\n\t\telse if\
    \ (text[i] == ' ' && text[i+1] == ' ')\n\t\t\tresult.insert(i, '_');\n\t\telse\
    \ if (i > 0 && text[i-1] == ' ' && text[i] == ' ')\n\t\t\tresult.insert(i, '-');\n\
    \t}\n\t\n\treturn result;", "    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    std::string::size_type pos = 0;\n    while ((pos = text.find_first_not_of(\"\
    \ \\t\\n\", pos)) != text.npos) {\n        text.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 2;\n    }\n    return text;", "    std::string result =\
    \ text;\n    for (size_t i = 0; i < result.length(); ++i) {\n        char ch =\
    \ text[i];\n        if (ch != ' ') {\n            result[i] = ch;\n        } else\
    \ if (i + 1 < result.length() && (result[i + 1] == ' ')) {\n            result[i]\
    \ = '-';\n            ++i;\n        }\n    }\n    return result;", "\tsize_t start\
    \ = 0;\n\tsize_t end = text.length();\n\tbool flag = false;\n\twhile (flag ==\
    \ false) {\n\t\tstart = text.find(' ', start);\n\t\tend = text.find(' ', end);\n\
    \t\tif (end != std::string::npos)\n\t\t\tif (end - start > 1)\n\t\t\t\ttext =\
    \ text.substr(0, start) + \"_\" + text.substr(start + 1, end - 1);\n\t\telse {\n\
    \t\t\tflag = true;\n\t\t}\n\t}\n\treturn text;", "  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  if (text.find('  ') != std::string::npos) {\n    text.replace(2,\
    \ 2, std::string(\"_\"));\n  }\n  return text;", "    if(text.size()==0)\n   \
    \     return \"\";\n    int i=0;\n    while(text[i]!=' ' && text[i]!='\\0')\n\
    \        i++;\n    if(i==0)\n        return text;\n    int count=1;\n    while(text[i]!='\
    \ ' && text[i]!='\\0'){\n        if(text[i]=='\\0')\n            break;\n    \
    \    if(text[i]==' ')\n            count++;\n        else\n            count--;\n\
    \        i++;\n    }\n    if(count<2)\n        return text;\n    std::string s;\n\
    \    while(count>0)\n    {\n        if(count==1)\n            s=s+\"_\";\n   \
    \     else\n            s=s+\"-\";\n        count--;\n        i++;\n    }\n  \
    \  return s;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    if\
    \ (text.find_first_of(' ') >= 2) {\n        std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    }\n    return text;", "    std::string ans;\n    std::string\
    \ space=\"_\";\n    std::string newspace=\" \";\n    std::size_t found = text.find(space);\n\
    \    while(found != std::string::npos) {\n        ans = ans + text.substr(0,found);\n\
    \        ans = ans + newspace;\n        ans = ans + text.substr(found+1,text.length());\n\
    \        found = text.find(space,found+1);\n    }\n    ans = ans + text;\n   \
    \ return ans;", "  text.resize(text.size());\n  int index = 0;\n  while (index\
    \ < text.size()) {\n    char ch = text[index];\n    if (std::isspace(ch)) {\n\
    \      index = text[index];\n      continue;\n    }\n    else if (index > 0) {\n\
    \      char prev_ch = text[text.length - index - 1];\n      if (prev_ch == ' ')\
    \ {\n        text[text.length - index - 1] = '-';\n      }\n    }\n    else {\
    \ // text[0] == ''\n      index = text[index];\n      continue;\n    }\n    ++index;\n\
    \  }\n  return text;", "    std::string::size_type pos = 0;\n    bool space =\
    \ false;\n    while(text[pos] == ' ') {\n        space = true;\n        pos++;\n\
    \    }\n    while(pos < text.size()) {\n        if(text[pos] == ' ') {\n     \
    \       space = true;\n        } else {\n            space = false;\n        }\n\
    \        if(space) {\n            text.replace(1, text.size() - 1, std::string(\"\
    _\"));\n        } else {\n            text.replace(1, text.size() - 1, std::string(\"\
    -\"));\n        }\n        pos++;\n    }\n    return text;", "    std::replace_if(text.begin(),\
    \ text.end(), std::isspace, ' ');\n    return std::accumulate(text.begin(), text.end(),\
    \ std::string(\"\"), \n            [](std::string acc, char c) {\n           \
    \     return acc + std::string(1, c == ' ' ? '_' : ' ');\n            });", " \
    \   if (text.empty()) return text;\n    std::string buffer = text;\n    std::size_t\
    \ pos = 0;\n    bool modified = false;\n    while (pos < buffer.size()) {\n  \
    \      char ch = buffer[pos];\n        if (ch == ' ') {\n            if (modified)\
    \ {\n                pos = buffer.find_last_not_of(\" \", pos);\n            }\
    \ else {\n                pos = buffer.find_first_not_of(\" \", pos);\n      \
    \      }\n            modified = true;\n        } else {\n            modified\
    \ = false;\n            buffer[pos] = '_';\n            ++pos;\n        }\n  \
    \  }\n    return buffer;", "    text.erase(std::find_if(text.begin(), text.end(),\
    \ [](char c) {\n        return c == ' ' || c == '\\t';\n    }), text.end()); //\
    \ remove all spaces in text\n    if (text.size() >= 2 && *text.rbegin() == ' ')\
    \ // if text has only 1 consecutive space, \n        text = text.substr(0, text.size()\
    \ - 1) + '-';\n    return text;", "    std::string result;\n    int spaces = 0;\n\
    \    for (int i = 0; i < text.size(); i++) {\n        char c = text[i];\n    \
    \    if (c == ' ') {\n            spaces++;\n        }\n        else {\n     \
    \       if (spaces > 1) {\n                result.append(1, '-');\n          \
    \  }\n            spaces = 0;\n            result.append(1, c);\n        }\n \
    \   }\n    if (spaces > 1) {\n        result.append(1, '-');\n    }\n    return\
    \ result;", "    std::string out = text;\n    std::replace(out.begin(), out.end(),\
    \ ' ', '_');\n    if (out.find_first_not_of(\" \\t\\n\") != out.npos) {\n    \
    \    while ((out.find_first_not_of(\" \\t\\n\") != out.npos) && (out.find_first_of(\"\
    \ \\t\\n\") != out.npos)) {\n            std::replace(out.begin(), out.end(),\
    \ ' ', '_');\n        }\n    }\n    return out;", "  // your code goes here\n\
    \  if(text.empty()) \n    return text;\n\n  if(text.size() >= 2)\n  {\n    text.insert(text.begin(),\
    \ ' ');\n    int prev = 0, start = text.size();\n    while(start > 0 && (text[start-1]\
    \ == ' ' || text[start-1] == '\\n'))\n    {\n      start--;\n      text.insert(text.begin(),\
    \ '-');\n    }\n  }\n\n  return text;", "   std::size_t foundSpace = std::count(text.begin(),\
    \ text.end(), ' ');\n   std::size_t prevSpace = foundSpace;\n   std::size_t nextSpace\
    \ = foundSpace;\n   while( (prevSpace != nextSpace) && (prevSpace != (std::size_t)-1)\
    \ ) {\n      std::size_t nextSpace = std::count(text.begin()+prevSpace, text.end(),\
    \ ' ');\n      text[prevSpace] = text[nextSpace];\n      text[nextSpace] = '-';\n\
    \      prevSpace = nextSpace;\n   }\n   return text;", "  std::string s = text;\n\
    \  for (size_t i = 0; i < s.size(); i++) {\n    if (s[i] != ' ') {\n      s[i]\
    \ = '_';\n    } else {\n      i = s[i];\n      while ((i < s.size() - 1) && (s[i\
    \ + 1] == ' ')) {\n        s[i] = '-';\n        i += 1;\n      }\n    }\n  }\n\
    \  return s;", "    \n    \n    int spaces = 0, consecutiveSpaces = 0, newLength\
    \ = 0; \n    for (int i = 0; i < text.size(); i++) { \n        if (text[i] ==\
    \ ' ') \n            spaces++; \n        else \n            consecutiveSpaces++;\
    \ \n        if (spaces > 2 && consecutiveSpaces == 2) \n            newLength\
    \ = i;\n        spaces = 0;\n        consecutiveSpaces = 0;\n    } \n    \n  \
    \  std::string result(text.size(), '_');\n    \n    for (int i = 0; i < newLength;\
    \ i++) { \n        result[i] = text[i];\n    }\n    \n    return std::string(result);",
  "\ttext = text.str();\n\tstd::replace(text.begin(), text.end(), ' ', '_');\n\t\n\
    \tstd::string res;\n\tsize_t pos = 0;\n\twhile (pos < text.size()) {\n\t\tif (text[pos]\
    \ == ' ')\n\t\t\tpos = text.find(' ', pos + 1);\n\t\telse\n\t\t\tpos = text.find('\
    \ ', pos);\n\t\t\n\t\tif (pos != text.size() - 1) {\n\t\t\tres += \"-\" + text.substr(pos);\n\
    \t\t} else {\n\t\t\tres += text.substr(pos);\n\t\t}\n\t}\n\t\n\treturn res;"]
stop_tokens:
- "\n}"
