name: HumanEval_27_flip_case
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] = string[i] - 32;\n        } else if (string[i] >=\
    \ 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n      \
    \  }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();\
    \ i++)\n    {\n        string =  string[i] >= 'a' && string[i] <= 'z'? string[i]\
    \ - 32 : string[i];\n    }\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpguz54yn9: /tmp/tmpguz54yn9.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string str =\
    \ \"\";\n    for (char &c: string)\n    {\n        if(isupper(c))\n          \
    \  c = tolower(c);\n        else\n            c = toupper(c);\n        str +=\
    \ c;\n    }\n    return str;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Initialize output\
    \ string\n    std::string output{};\n    // Iterate through all characters\n \
    \   for (char ch : string) {\n        // If the character is uppercase (capital\
    \ letter)\n        if (isupper(ch)) {\n            // Set the output string to\
    \ output + the uppercase character\n            output = output + tolower(ch);\n\
    \        } else {\n            // Set the output string to output + the uppercase\
    \ character\n            output = output + toupper(ch);\n        }\n    }\n  \
    \  // Return output string\n    return output;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3xlvbsv.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpl3xlvbsv.cpp:14:29: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   14 |             output = output + tolower(ch);\n \
    \     |                      ~~~~~~ ^ ~~~~~~~~~~~\n      |                   \
    \   |               |\n      |                      |               int\n    \
    \  |                      std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl3xlvbsv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpl3xlvbsv.cpp:14:41:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   14 |             output = output + tolower(ch);\n  \
    \    |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::map<char, char>\
    \ mapping;\n    for (size_t i = 0; i < string.length(); ++i) {\n        mapping[string[i]]\
    \ = toupper(string[i]);\n    }\n\n    for (auto i = mapping.begin(); i != mapping.end();\
    \ ++i) {\n        mapping[i->second] = tolower(i->second);\n    }\n\n    std::string\
    \ ret(\"\");\n    for (auto i = mapping.begin(); i != mapping.end(); ++i) {\n\
    \        ret += i->second;\n    }\n\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpjplq0n2r: /tmp/tmpjplq0n2r.cpp:26: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s(string);\n\
    \    for (auto c : s) {\n        if (c >= 'A' && c <= 'Z') c += 32;\n        else\
    \ if (c >= 'a' && c <= 'z') c -= 32;\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp1krwhdnd: /tmp/tmp1krwhdnd.cpp:17: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] = string[i] - 32;\n        }\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n   \
    \     }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp37ilakah: /tmp/tmp37ilakah.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string out;\n\
    \    for(size_t i = 0; i < string.size(); i++) {\n        char c = string[i];\n\
    \        if('A' <= c && c <= 'Z') {\n            out += (char)((c ^ 32));\n  \
    \      }\n        else if('a' <= c && c <= 'z') {\n            out += (char)((c\
    \ ^ 97));\n        }\n        else {\n            out += c;\n        }\n    }\n\
    \    return out;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpi66rtdwb: /tmp/tmpi66rtdwb.cpp:25: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string temp;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] < 'A' || string[i]\
    \ > 'Z') {\n      temp = temp + string[i];\n    } else {\n      temp = temp +\
    \ string[i] - 'A' + 'a';\n    }\n  }\n  return temp;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpad05gh8e.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpad05gh8e.cpp:7:9: error: expected \u2018;\u2019 before \u2018temp\u2019\
    \n    7 |   string temp;\n      |         ^~~~~\n      |         ;\n/tmp/tmpad05gh8e.cpp:10:7:\
    \ error: \u2018temp\u2019 was not declared in this scope\n   10 |       temp =\
    \ temp + string[i];\n      |       ^~~~\n/tmp/tmpad05gh8e.cpp:12:7: error: \u2018\
    temp\u2019 was not declared in this scope\n   12 |       temp = temp + string[i]\
    \ - 'A' + 'a';\n      |       ^~~~\n/tmp/tmpad05gh8e.cpp:15:10: error: \u2018\
    temp\u2019 was not declared in this scope\n   15 |   return temp;\n      |   \
    \       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string outstr(string);\n\
    \    for (size_t i = 0; i < outstr.size(); i++) {\n        char c = outstr[i];\n\
    \        if ('A' <= c && c <= 'Z')\n            outstr[i] = outstr[i] + 'a' -\
    \ 'A';\n        if ('a' <= c && c <= 'z')\n            outstr[i] = outstr[i] +\
    \ 'A' - 'a';\n    }\n    return std::string(outstr);\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42k14csg.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp42k14csg.cpp:7:11: error: expected \u2018;\u2019 before \u2018outstr\u2019\
    \n    7 |     string outstr(string);\n      |           ^~~~~~~\n      |     \
    \      ;\n/tmp/tmp42k14csg.cpp:8:28: error: \u2018outstr\u2019 was not declared\
    \ in this scope\n    8 |     for (size_t i = 0; i < outstr.size(); i++) {\n  \
    \    |                            ^~~~~~\n/tmp/tmp42k14csg.cpp:15:24: error: \u2018\
    outstr\u2019 was not declared in this scope\n   15 |     return std::string(outstr);\n\
    \      |                        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Transform lowercase\
    \ letters to uppercase and vice versa\n    std::transform(string.cbegin(), string.cend(),\
    \ string.begin(),\n                   [](char letter) {\n                    \
    \   return (letter >= 'a' && letter <= 'z') ? letter - ('a' - 'A') : letter;\n\
    \                   });\n    // Transform uppercase letters to lowercase and vice\
    \ versa\n    std::transform(string.cbegin(), string.cend(), string.begin(),\n\
    \                   [](char letter) {\n                       return (letter >=\
    \ 'A' && letter <= 'Z') ? letter - (('A' - 'a' + 1)) : letter;\n             \
    \      });\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp022cpirj: /tmp/tmp022cpirj.cpp:22: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] -= 32;\n    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n\
    \      string[i] += 32;\n    }\n  }\n  return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.size(); ++i) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n   \
    \   string[i] = string[i] + 'A' - 'a';\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 'a' - 'A';\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpyfi1hn9f: /tmp/tmpyfi1hn9f.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n   std::string flipped\
    \ = \"\";\n   for (char ch : string) {\n      if (std::toupper(ch) == ch)\n  \
    \       flipped += std::tolower(ch);\n      else\n         flipped += std::toupper(ch);\n\
    \   }\n   return flipped;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string out(string.size());\n\
    \    for(int i=0; i<string.size(); i++)\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n            out[i] = string[i] - 32;\n        else\n            out[i]\
    \ = string[i];\n    return out;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0e4hhma9.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp0e4hhma9.cpp:7:34: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(std::__cxx11::basic_string<char>::size_type)\u2019\
    \n    7 |     std::string out(string.size());\n      |                       \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0e4hhma9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0e4hhma9.cpp:7:34:\
    \ note:   candidate expects 3 arguments, 1 provided\n    7 |     std::string out(string.size());\n\
    \      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /share"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Code here \n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpjmaj08v7: /tmp/tmpjmaj08v7.cpp:12: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\n\
    \    if (c >= 'a' && c <= 'z')\n      c -= 32;\n    else if (c >= 'A' && c <=\
    \ 'Z')\n      c += 32;\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if ('A' <= c && c <= 'Z') {\n            string += 'a' - 'A';\n \
    \       }\n        else if (c <= 'Z') {\n            string += 'A' - 'a';\n  \
    \      }\n        else if (c <= 'z') {\n            string += 'a' - 'A';\n   \
    \     }\n        else if (c >= 'a') {\n            string += 'A' - 'a';\n    \
    \    }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpll3qkfxb: /tmp/tmpll3qkfxb.cpp:26: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        if (string[i] == 'a')\n            string[i]\
    \ = 'A';\n        else if (string[i] == 'b')\n            string[i] = 'B';\n \
    \       else if (string[i] == 'c')\n            string[i] = 'C';\n        else\
    \ if (string[i] == 'd')\n            string[i] = 'D';\n        else if (string[i]\
    \ == 'e')\n            string[i] = 'E';\n        else if (string[i] == 'f')\n\
    \            string[i] = 'F';\n        else if (string[i] == 'g')\n          \
    \  string[i] = 'G';\n        else if (string[i] == 'h')\n            string[i]\
    \ = 'H';\n        else if (string[i] == 'i')\n            string[i] = 'I';\n \
    \       else if (string[i] == 'j')\n            string[i] = 'J';\n        else\
    \ if (string[i] == 'k')\n            string[i] = 'K';\n        else if (string[i]\
    \ == 'l')\n            string[i] = 'L';\n        else if (string[i] == 'm')\n\
    \            string[i] = 'M';\n        else if (string[i] == 'n')\n          \
    \  string[i] = 'N';\n        else if (string[i] == 'o')\n            string[i]\
    \ = 'O';\n        else if (string[i] == 'p')\n            string[i] = 'P';\n \
    \       else if (string[i] == 'q')\n            string[i] = 'Q';\n        else\
    \ if (string[i] == 'r')\n            string[i] = 'R';\n        else if (string[i]\
    \ == 's')\n            string[i] = 'S';\n        else if (string[i] == 't')\n\
    \            string[i] = 'T';\n        else if (string[i] == 'u')\n          \
    \  string[i] = 'U';\n        else if (string[i] == 'v')\n            string[i]\
    \ = 'V';\n        else if (string[i] == 'w')\n            string[i] = 'W';\n \
    \       else if (string[i] == 'x')\n            string[i] = 'X';\n        else\
    \ if (string[i] == 'y')\n            string[i] = 'Y';\n        else if (string[i]\
    \ == 'z')\n            string[i] = 'Z';\n        else\n            string[i] =\
    \ string[i];\n    }\n    return string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp1y1rutqt: /tmp/tmp1y1rutqt.cpp:68: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstring result = string;\n\
    \tfor (size_t i = 0; i < result.size(); i++) {\n\t\tif (result[i] >= 'A' && result[i]\
    \ <= 'Z') {\n\t\t\tresult[i] = result[i] - 32;\n\t\t}\n\t\telse if (result[i]\
    \ >= 'a' && result[i] <= 'z') {\n\t\t\tresult[i] = result[i] + 32;\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0zn_9shh.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp0zn_9shh.cpp:7:8: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n    7 |  string result = string;\n      |        ^~~~~~~\n      |        ;\n\
    /tmp/tmp0zn_9shh.cpp:8:25: error: \u2018result\u2019 was not declared in this\
    \ scope\n    8 |  for (size_t i = 0; i < result.size(); i++) {\n      |      \
    \                   ^~~~~~\n/tmp/tmp0zn_9shh.cpp:16:9: error: \u2018result\u2019\
    \ was not declared in this scope\n   16 |  return result;\n      |         ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string out = \"\";\n\
    \  for (int i = 0; i < string.size(); i++)\n    out += std::toupper(string[i])\
    \ + string[i];\n  return out;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9oypb6xr.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp9oypb6xr.cpp:7:9: error: expected \u2018;\u2019 before \u2018out\u2019\
    \n    7 |   string out = \"\";\n      |         ^~~~\n      |         ;\n/tmp/tmp9oypb6xr.cpp:9:5:\
    \ error: \u2018out\u2019 was not declared in this scope\n    9 |     out += std::toupper(string[i])\
    \ + string[i];\n      |     ^~~\n/tmp/tmp9oypb6xr.cpp:10:10: error: \u2018out\u2019\
    \ was not declared in this scope\n   10 |   return out;\n      |          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Write your code\
    \ here.\n    string temp = string;\n    for(int i =0;i<string.length();i++){\n\
    \        if(string[i] == 'A'){\n            string[i] = 'a';\n        }\n    \
    \    else if (string[i] == 'a'){\n            string[i] = 'A';\n        }\n  \
    \      else if (string[i] == 'B'){\n            string[i] = 'b';\n        }\n\
    \        else if (string[i] == 'b'){\n            string[i] = 'B';\n        }\n\
    \        else if (string[i] == 'C'){\n            string[i] = 'c';\n        }\n\
    \        else if (string[i] == 'c'){\n            string[i] = 'C';\n        }\n\
    \        else if (string[i] == 'D'){\n            string[i] = 'd';\n        }\n\
    \        else if (string[i] == 'd'){\n            string[i] = 'D';\n        }\n\
    \        else if (string[i] == 'E'){\n            string[i] = 'e';\n        }\n\
    \        else if (string[i] == 'e'){\n            string[i] = 'E';\n        }\n\
    \        else if (string[i] == 'F'){\n            string[i] = 'f';\n        }\n\
    \        else if (string[i] == 'f'){\n            string[i] = 'F';\n        }\n\
    \        else if (string[i] == 'G'){\n            string[i] = 'g';\n        }\n\
    \        else if (string[i] == 'g'){\n            string[i] = 'G';\n        }\n\
    \        else if (string[i] == 'H'){\n            string[i] = 'h';\n        }\n\
    \        else if (string[i] == 'h'){\n            string[i] = 'H';\n        }\n\
    \        else if (string[i] == 'I'){\n            string[i] = 'i';\n        }\n\
    \        else if (string[i] == 'i'){\n            string[i] = 'I';\n        }\n\
    \        else if (string[i] == 'J'){\n            string[i] = 'j';\n        }\n\
    \        else if (string[i] == 'j'){\n            string[i] = 'J';\n        }\n\
    \        else if (string[i] == 'K'){\n            string[i] = 'k';\n        }\n\
    \        else if (string[i] == 'k'){\n            string[i] = 'K';\n        }\n\
    \        else if (string[i] == 'L'){\n            string[i] = 'l';\n        }\n\
    \        else if (string[i] == 'l'){\n            string[i] = 'L';\n        }\n\
    \        else if (string[i] == 'M'){\n            string[i] = 'm';\n        }\n\
    \        else if (string[i] == 'm'){\n            string[i] = 'M';\n        }\n\
    \        else if (string[i] == 'N'){\n            string[i] = 'n';\n        }\n\
    \        else if (string[i] == 'n'){\n            string[i] = 'N';\n        }\n\
    \        else if (string[i] == 'O'){\n            string[i] = 'o';\n        }\n\
    \        else if (string[i] == '\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppoajdg9s.cpp:97:31: warning: missing terminating ' character\n\
    \   97 |         else if (string[i] == '\n      |                            \
    \   ^\n/tmp/tmppoajdg9s.cpp:97:31: error: missing terminating ' character\n/tmp/tmppoajdg9s.cpp:\
    \ In function \u2018std::string flip_case(std::string)\u2019:\n/tmp/tmppoajdg9s.cpp:8:11:\
    \ error: expected \u2018;\u2019 before \u2018temp\u2019\n    8 |     string temp\
    \ = string;\n      |           ^~~~~\n      |           ;\n/tmp/tmppoajdg9s.cpp:98:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   98 | }\n \
    \     | ^\n/tmp/tmppoajdg9s.cpp:97:30: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   97 |         else if (string[i] == '\n      |              \
    \   ~            ^\n      |                              )\n   98 | }\n      |\
    \ ~                             \n/tmp/tmppoajdg9s.cpp:98:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmppoajdg9s.cpp:99:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   99 | int main() {\n      |            ^\n/tmp/tmppoajdg9s.cpp:104:1: error:\
    \ expected \u2018}\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmppoajdg9s.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmppoajdg9s.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  104 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int len = string.length();\n\
    \  if (len == 0) {\n    return \"\";\n  }\n  std::string new_str = string(len\
    \ - 1); // Copy all but the last char.\n  for (int i = 0; i < len - 1; i++) {\n\
    \    new_str[i] = string[i] ^ (string[i] >= 'A' ? 0xFF : 0x60);\n  }\n  new_str[len\
    \ - 1] = string[len - 1] ^ (string[len - 1] >= 'A' ? 0xFF : 0x60);\n  return new_str;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1w6eteq.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpr1w6eteq.cpp:11:39: error: no match for call to \u2018(std::string\
    \ {aka std::__cxx11::basic_string<char>}) (int)\u2019\n   11 |   std::string new_str\
    \ = string(len - 1); // Copy all but the last char.\n      |                 \
    \                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(auto c: string)\
    \ {\n        switch(c) {\n        case 'a':\n        case 'b':\n        case 'c':\n\
    \        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n\
    \        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n\
    \        case 'l':\n        case 'm':\n        case 'n':\n        case 'o':\n\
    \        case 'p':\n        case 'q':\n        case 'r':\n        case 's':\n\
    \        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n\
    \        case 'x':\n        case 'y':\n        case 'z':\n            string +=\
    \ 'A';\n            break;\n        case 'A':\n        case 'B':\n        case\
    \ 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n        case\
    \ 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n        case\
    \ 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n        case\
    \ 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n        case\
    \ 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n        case\
    \ 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n            string\
    \ += 'b';\n            break;\n        case 'b':\n        case 'B':\n        case\
    \ 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n        case\
    \ 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n        case\
    \ 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n        case\
    \ 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n        case\
    \ 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n        case\
    \ 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n            string\
    \ += 'A';\n            break;\n        default:\n            string = string;\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoizm3v34.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpoizm3v34.cpp:65:9: error: duplicate case value\n   65 |         case\
    \ 'b':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:10:9: note: previously used\
    \ here\n   10 |         case 'b':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:66:9:\
    \ error: duplicate case value\n   66 |         case 'B':\n      |         ^~~~\n\
    /tmp/tmpoizm3v34.cpp:38:9: note: previously used here\n   38 |         case 'B':\n\
    \      |         ^~~~\n/tmp/tmpoizm3v34.cpp:67:9: error: duplicate case value\n\
    \   67 |         case 'C':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:39:9: note:\
    \ previously used here\n   39 |         case 'C':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:68:9:\
    \ error: duplicate case value\n   68 |         case 'D':\n      |         ^~~~\n\
    /tmp/tmpoizm3v34.cpp:40:9: note: previously used here\n   40 |         case 'D':\n\
    \      |         ^~~~\n/tmp/tmpoizm3v34.cpp:69:9: error: duplicate case value\n\
    \   69 |         case 'E':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:41:9: note:\
    \ previously used here\n   41 |         case 'E':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:70:9:\
    \ error: duplicate case value\n   70 |         case 'F':\n      |         ^~~~\n\
    /tmp/tmpoizm3v34.cpp:42:9: note: previously used here\n   42 |         case 'F':\n\
    \      |         ^~~~\n/tmp/tmpoizm3v34.cpp:71:9: error: duplicate case value\n\
    \   71 |         case 'G':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:43:9: note:\
    \ previously used here\n   43 |         case 'G':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:72:9:\
    \ error: duplicate case value\n   72 |         case 'H':\n      |         ^~~~\n\
    /tmp/tmpoizm3v34.cpp:44:9: note: previously used here\n   44 |         case 'H':\n\
    \      |         ^~~~\n/tmp/tmpoizm3v34.cpp:73:9: error: duplicate case value\n\
    \   73 |         case 'I':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:45:9: note:\
    \ previously used here\n   45 |         case 'I':\n      |         ^~~~\n/tmp/tmpoizm3v34.cpp:74:9:\
    \ error: duplicate case value\n   74 |         case 'J':\n      |         ^~~~\n\
    /tmp/tmpoizm3v34.cpp:46:9: note: previously use"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ (int)string.size(); i++) {\n    if (string[i] == string::toupper(string[i]))\
    \ {\n      string[i] = string::tolower(string[i]);\n    }\n    if (string[i] ==\
    \ string::tolower(string[i])) {\n      string[i] = string::toupper(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8vvty68.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpb8vvty68.cpp:8:22: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n    8 |     if (string[i] == string::toupper(string[i])) {\n\
    \      |                      ^~~~~~\n/tmp/tmpb8vvty68.cpp:9:19: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n    9 |       string[i]\
    \ = string::tolower(string[i]);\n      |                   ^~~~~~\n/tmp/tmpb8vvty68.cpp:11:22:\
    \ error: \u2018string\u2019 is not a class, namespace, or enumeration\n   11 |\
    \     if (string[i] == string::tolower(string[i])) {\n      |                \
    \      ^~~~~~\n/tmp/tmpb8vvty68.cpp:12:19: error: \u2018string\u2019 is not a\
    \ class, namespace, or enumeration\n   12 |       string[i] = string::toupper(string[i]);\n\
    \      |                   ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Iterate over every\
    \ character of the given string.\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    // Determine whether the character is lowercase or not.\n    char c =\
    \ string[i];\n    // If the character is not lowercase, flip it else leave the\
    \ character.\n    if (c >= 'a' && c <= 'z') c = toupper(c);\n    // Otherwise,\
    \ flip the character.\n    string[i] = c;\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmprqyb_9ri: /tmp/tmprqyb_9ri.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &character\
    \ : string) {\n    if (character == 'a')\n      character = 'A';\n    else if\
    \ (character == 'A')\n      character = 'a';\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpq2z84ckg: /tmp/tmpq2z84ckg.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Initialize result\
    \ to the empty string.\n  std::string result;\n  // Iterate over all characters\
    \ in string.\n  for (auto character : string) {\n    // If the character is lowercase\
    \ and not already uppercase,\n    // append an uppercase letter.\n    if (character\
    \ < 'a' || character > 'z') result += toupper(character);\n    // Otherwise, append\
    \ the lowercase letter.\n    else\n      result += character;\n  }\n  // Return\
    \ result.\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmplbuaghop: /tmp/tmplbuaghop.cpp:24: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (int i = 0; i\
    \ < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] -= 32;\n        } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] += 32;\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        auto upperCaseCase = std::toupper(c);\n        if (upperCaseCase\
    \ == c) upperCaseCase = std::tolower(c);\n        c = upperCaseCase;\n    }\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), [](char c){return c == ' ' ? c : c ^ 0x20;});\n\
    \    std::transform(string.begin(), string.end(), string.begin(), [](char c){return\
    \ c == ' ' ? '_' : c ^ 0x20;});\n    return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpc94nabtx: /tmp/tmpc94nabtx.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string str1(string);\n\
    \  for (int i = 0; str1.size(); i++) {\n    char c = str1[i];\n    if (c >= 'a'\
    \ && c <= 'z') {\n      str1[i] = c + 32;\n    } else if (c >= 'A' && c <= 'Z')\
    \ {\n      str1[i] = c + 32;\n    }\n  }\n  return str1;\n}\nint main() {\n  \
    \  auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n   \
    \ assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These\
    \ violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppng6293u.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmppng6293u.cpp:7:9: error: expected \u2018;\u2019 before \u2018str1\u2019\
    \n    7 |   string str1(string);\n      |         ^~~~~\n      |         ;\n/tmp/tmppng6293u.cpp:8:19:\
    \ error: \u2018str1\u2019 was not declared in this scope\n    8 |   for (int i\
    \ = 0; str1.size(); i++) {\n      |                   ^~~~\n/tmp/tmppng6293u.cpp:16:10:\
    \ error: \u2018str1\u2019 was not declared in this scope\n   16 |   return str1;\n\
    \      |          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    \n    int length\
    \ = string.length();\n    \n    std::string new_string = \"\";\n    \n    for(int\
    \ i = 0; i < length; i++) {\n        \n        if(string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            \n            new_string += string[i];\n            \n\
    \        }\n        \n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n\
    \            \n            new_string += string[i];\n            \n        }\n\
    \        \n        else {\n            \n            new_string += string[i].toupper();\n\
    \            \n        }\n        \n    }\n    \n    return new_string;\n    \n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyh25f0lb.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpyh25f0lb.cpp:28:37: error: request for member \u2018toupper\u2019 in\
    \ \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   28 |             new_string\
    \ += string[i].toupper();\n      |                                     ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string new_string;\n\
    \  for (int i = 0; i < string.size(); ++i) {\n    char c = string[i];\n    if\
    \ (c == 'a') {\n      c = 'A';\n    } else if (c == 'A') {\n      c = 'a';\n \
    \   }\n    new_string.push_back(c);\n  }\n  return new_string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp4fbljeht: /tmp/tmp4fbljeht.cpp:22: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string lowercase_string\
    \ = string;\n    std::transform(lowercase_string.begin(), lowercase_string.end(),\
    \ lowercase_string.begin(), ::tolower);\n    std::transform(lowercase_string.begin(),\
    \ lowercase_string.end(), lowercase_string.begin(), ::toupper);\n    return lowercase_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmphdterm6d: /tmp/tmphdterm6d.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (std::string::size_type\
    \ i = 0; i < string.length(); i++) {\n        char c = string[i];\n        if\
    \ (std::isupper(c)) {\n            string[i] = tolower(c);\n        }\n    }\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp00jirtu9: /tmp/tmp00jirtu9.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        result += string[i] >=\
    \ 'A' && string[i] <= 'Z' ? 'A' + (string[i] - 'A') + 1 :\n            string[i]\
    \ >= 'a' && string[i] <= 'z' ? 'a' + (string[i] - 'a') + 1 :\n            string[i];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmph31v_4iy: /tmp/tmph31v_4iy.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string res(string.begin(),\
    \ string.end());\n  for (auto &c : res) {\n    if (c >= 'A' && c <= 'Z') {\n \
    \     c ^= ('A' - 'a');\n      c ^= ('A' - 'a');\n    }\n    if (c >= 'a' && c\
    \ <= 'z') {\n      c ^= ('a' - 'A');\n      c ^= ('a' - 'A');\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg83605q6.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpg83605q6.cpp:7:9: error: expected \u2018;\u2019 before \u2018res\u2019\
    \n    7 |   string res(string.begin(), string.end());\n      |         ^~~~\n\
    \      |         ;\n/tmp/tmpg83605q6.cpp:8:18: error: \u2018res\u2019 was not\
    \ declared in this scope\n    8 |   for (auto &c : res) {\n      |           \
    \       ^~~\n/tmp/tmpg83605q6.cpp:18:10: error: \u2018res\u2019 was not declared\
    \ in this scope\n   18 |   return res;\n      |          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = \"\";\n\
    \    for (auto itr = string.begin(); itr != string.end(); itr++) {\n        if\
    \ (*itr >= 'a' && *itr <= 'z') {\n            *itr += 32;\n        }\n       \
    \ else if (*itr >= 'A' && *itr <= 'Z') {\n            *itr -= 32;\n        }\n\
    \        else {\n            s += *itr;\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0z4jqnu.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpb0z4jqnu.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = \"\";\n      |           ^~\n      |           ;\n/tmp/tmpb0z4jqnu.cpp:16:13:\
    \ error: \u2018s\u2019 was not declared in this scope\n   16 |             s +=\
    \ *itr;\n      |             ^\n/tmp/tmpb0z4jqnu.cpp:19:12: error: \u2018s\u2019\
    \ was not declared in this scope\n   19 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::map<char, char>\
    \ table_map;\n    for (auto &c : string)\n        table_map[c] = toupper(c);\n\
    \    for (auto &c : string)\n        table_map[tolower(c)] = c;\n    string result;\n\
    \    for (auto &c : string)\n        result += table_map[c];\n    return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyyg6vhwj.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpyyg6vhwj.cpp:12:11: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n   12 |     string result;\n      |           ^~~~~~~\n      |           ;\n\
    /tmp/tmpyyg6vhwj.cpp:14:9: error: \u2018result\u2019 was not declared in this\
    \ scope\n   14 |         result += table_map[c];\n      |         ^~~~~~\n/tmp/tmpyyg6vhwj.cpp:15:12:\
    \ error: \u2018result\u2019 was not declared in this scope\n   15 |     return\
    \ result;\n      |            ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s(string);\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z')\n            s[i] = s[i] - 32;\n        else if (s[i] >= 'A' && s[i] <=\
    \ 'Z')\n            s[i] = s[i] + 32;\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpke2aijmh.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpke2aijmh.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s(string);\n      |           ^~\n      |           ;\n/tmp/tmpke2aijmh.cpp:8:25:\
    \ error: \u2018s\u2019 was not declared in this scope\n    8 |     for (int i\
    \ = 0; i < s.length(); i++) {\n      |                         ^\n/tmp/tmpke2aijmh.cpp:14:12:\
    \ error: \u2018s\u2019 was not declared in this scope\n   14 |     return s;\n\
    \      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c: string)\n\
    \        c = c >= 'a' && c <= 'z' ? 'A' + c - 'a' : c >= 'A' && c <= 'Z' ? 'a'\
    \ + c - 'A' : c;\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  assert(string);\n \
    \ std::string result = string;\n  for (auto &c : result) {\n    if (c >= 'a' &&\
    \ c <= 'z') {\n      c = toupper(c);\n    }\n    if (c >= 'A' && c <= 'Z') {\n\
    \      c = tolower(c);\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpojza6a1a.cpp:2:\n/tmp/tmpojza6a1a.cpp: In function\
    \ \u2018std::string flip_case(std::string)\u2019:\n/tmp/tmpojza6a1a.cpp:7:10:\
    \ error: could not convert \u2018string\u2019 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n    7 | \
    \  assert(string);\n      |          ^\n      |          |\n      |          std::string\
    \ {aka std::__cxx11::basic_string<char>}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string s;\n  for (int\
    \ i = 0; i < string.size(); ++i) {\n    s += (islower(string[i]) ? toupper(string[i])\
    \ : string[i]);\n  }\n  return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp879_mpm5.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp879_mpm5.cpp:7:9: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |   string s;\n      |         ^~\n      |         ;\n/tmp/tmp879_mpm5.cpp:9:5:\
    \ error: \u2018s\u2019 was not declared in this scope\n    9 |     s += (islower(string[i])\
    \ ? toupper(string[i]) : string[i]);\n      |     ^\n/tmp/tmp879_mpm5.cpp:11:10:\
    \ error: \u2018s\u2019 was not declared in this scope\n   11 |   return s;\n \
    \     |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\
    \ {\n    if (c >= 'a' && c <= 'z') c ^= 32;\n    if (c >= 'A' && c <= 'Z') c ^=\
    \ 32;\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwr166m9g: /tmp/tmpwr166m9g.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string newString\
    \ = \"\";\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >=\
    \ 'a' && string[i] <= 'z') {\n      newString += string[i] + string[i] + 'A';\n\
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      newString += string[i]\
    \ + string[i] + 'a';\n    } else {\n      newString += string[i];\n    }\n  }\n\
    \  return newString;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp5qw45jyp: /tmp/tmp5qw45jyp.cpp:22: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::for_each(string.begin(),\
    \ string.end(), [](char &c){\n        switch(c){\n            case 'a':\n    \
    \            c = 'A';\n                break;\n            case 'b':\n       \
    \         c = 'B';\n                break;\n            case 'c':\n          \
    \      c = 'C';\n                break;\n            case 'd':\n             \
    \   c = 'D';\n                break;\n            case 'e':\n                c\
    \ = 'E';\n                break;\n            case 'f':\n                c = 'F';\n\
    \                break;\n            case 'g':\n                c = 'G';\n   \
    \             break;\n            case 'h':\n                c = 'H';\n      \
    \          break;\n            case 'i':\n                c = 'I';\n         \
    \       break;\n            case 'j':\n                c = 'J';\n            \
    \    break;\n            case 'k':\n                c = 'K';\n               \
    \ break;\n            case 'l':\n                c = 'L';\n                break;\n\
    \            case 'm':\n                c = 'M';\n                break;\n   \
    \         case 'n':\n                c = 'N';\n                break;\n      \
    \      case 'o':\n                c = 'O';\n                break;\n         \
    \   case 'p':\n                c = 'P';\n                break;\n            case\
    \ 'q':\n                c = 'Q';\n                break;\n            case 'r':\n\
    \                c = 'R';\n                break;\n            case 's':\n   \
    \             c = 'S';\n                break;\n            case 't':\n      \
    \          c = 'T';\n                break;\n            case 'u':\n         \
    \       c = 'U';\n                break;\n            case 'v':\n            \
    \    c = 'V';\n                break;\n            case 'w':\n               \
    \ c = 'W';\n                break;\n            case 'x':\n                c =\
    \ 'X';\n                break;\n            case 'y':\n                c = 'Y';\n\
    \                break;\n            case 'z':\n                c = 'Z';\n   \
    \             break;\n        }\n    });\n    return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpbju75l8m: /tmp/tmpbju75l8m.cpp:94: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string result=\"\"\
    ;\n    for (size_t i=0; i < string.length(); i++) {\n        if (string[i]>='a'\
    \ && string[i]<='z'){\n            result += string[i]-'a' + 'A';\n        }else\
    \ if (string[i]>='A' && string[i]<='Z'){\n            result += string[i]-'A'\
    \ + 'a';\n        }else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm_0lhfig.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpm_0lhfig.cpp:7:11: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n    7 |     string result=\"\";\n      |           ^~~~~~~\n      |        \
    \   ;\n/tmp/tmpm_0lhfig.cpp:10:13: error: \u2018result\u2019 was not declared\
    \ in this scope\n   10 |             result += string[i]-'a' + 'A';\n      | \
    \            ^~~~~~\n/tmp/tmpm_0lhfig.cpp:12:13: error: \u2018result\u2019 was\
    \ not declared in this scope\n   12 |             result += string[i]-'A' + 'a';\n\
    \      |             ^~~~~~\n/tmp/tmpm_0lhfig.cpp:14:13: error: \u2018result\u2019\
    \ was not declared in this scope\n   14 |             result += string[i];\n \
    \     |             ^~~~~~\n/tmp/tmpm_0lhfig.cpp:17:12: error: \u2018result\u2019\
    \ was not declared in this scope\n   17 |     return result;\n      |        \
    \    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c: string)\
    \ {\n        switch (c) {\n        case 'A':\n        case 'a':\n            string.replace(c,\
    \ 'a');\n            string.replace(c, 'A');\n            break;\n        case\
    \ 'B':\n        case 'b':\n            string.replace(c, 'b');\n            string.replace(c,\
    \ 'B');\n            break;\n        default:\n            break;\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwnsr77tf.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpwnsr77tf.cpp:11:34: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(char&, char)\u2019\n   11 |        \
    \     string.replace(c, 'a');\n      |                                  ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwnsr77tf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1911:7:\
    \ note: candidate:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::replace(string.begin(),\
    \ string.end(), ' ', 'A');\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::toupper);\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpts9k1gdu: /tmp/tmpts9k1gdu.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\n\
    \    if (c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f'\
    \ || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c\
    \ == 'z')\n      c = c ^ 32;\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmphmmptv6p: /tmp/tmphmmptv6p.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\n\
    \    {\n        if (c == tolower(c))\n        {\n            c = toupper(c);\n\
    \        }\n        else\n        {\n            c = tolower(c);\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::replace(string\n\
    \                .begin(), string\n                .end(), string\n          \
    \      .begin(),\n                [](char c) -> char {\n                  return\
    \ ::toupper(c);\n                });\n  std::reverse(string\n                .begin(),\
    \ string\n                .end(),\n                [](char c) -> char {\n    \
    \              return ::tolower(c);\n                });\n  return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1qit9l07.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp1qit9l07.cpp:13:18: error: no matching function for call to \u2018\
    replace(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, flip_case(std::string)::<lambda(char)>)\u2019\
    \n   13 |                 });\n      |                  ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qit9l07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp1qit9l07.cpp:13:18:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019 and\
    \ \u2018flip_case(std::string)::<lambda(char)>\u2019)\n   13 |               \
    \  });\n      |                  ^\n/tmp/tmp1qit9l07.cpp:19:18: error: no matching\
    \ function for call to \u2018reverse(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, flip_case(std::string)::<lambda(char)>)\u2019\
    \n   19 |                 });\n      |                  ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qit9l07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note: candidate: \u2018template<class _BIter> void std::reverse(_BIter, _BIter)\u2019\
    \n 1180 |     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n\
    \      |  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (size_t i = 0;\
    \ i < string.length(); ++i) {\n    string[i] = toupper(string[i]);\n    string[i+1]\
    \ = tolower(string[i+1]);\n  }\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpqmhghh2h: /tmp/tmpqmhghh2h.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  assert(!string.empty());\n\
    \  std::string result = string;\n  for (int i = 0; i <= string.length() - 1; ++i)\
    \ {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      result[string.length()\
    \ - i - 1] = string[string.length() - i - 1] + string[i];\n    }\n    else if\
    \ (string[i] >= 'A' && string[i] <= 'Z') {\n      result[string.length() - i -\
    \ 1] = string[string.length() - i - 1] + string[i];\n    }\n    else if (string[i]\
    \ >= '0' && string[i] <= '9') {\n      result[string.length() - i - 1] = string[string.length()\
    \ - i - 1] + string[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpti_4pv93: /tmp/tmpti_4pv93.cpp:7: std::string flip_case(std::string):\
    \ Assertion `!string.empty()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (std::size_t i = 0; i < result.size(); ++i) {\n        switch\
    \ (result[i]) {\n        case 'a':\n            result[i] = 'A';\n           \
    \ break;\n        case 'b':\n            result[i] = 'B';\n            break;\n\
    \        case 'c':\n            result[i] = 'C';\n            break;\n       \
    \ case 'd':\n            result[i] = 'D';\n            break;\n        case 'e':\n\
    \            result[i] = 'E';\n            break;\n        case 'f':\n       \
    \     result[i] = 'F';\n            break;\n        case 'g':\n            result[i]\
    \ = 'G';\n            break;\n        case 'h':\n            result[i] = 'H';\n\
    \            break;\n        case 'i':\n            result[i] = 'I';\n       \
    \     break;\n        case 'j':\n            result[i] = 'J';\n            break;\n\
    \        case 'k':\n            result[i] = 'K';\n            break;\n       \
    \ case 'l':\n            result[i] = 'L';\n            break;\n        case 'm':\n\
    \            result[i] = 'M';\n            break;\n        case 'n':\n       \
    \     result[i] = 'N';\n            break;\n        case 'o':\n            result[i]\
    \ = 'O';\n            break;\n        case 'p':\n            result[i] = 'P';\n\
    \            break;\n        case 'q':\n            result[i] = 'Q';\n       \
    \     break;\n        case 'r':\n            result[i] = 'R';\n            break;\n\
    \        case 's':\n            result[i] = 'S';\n            break;\n       \
    \ case 't':\n            result[i] = 'T';\n            break;\n        case 'u':\n\
    \            result[i] = 'U';\n            break;\n        case 'v':\n       \
    \     result[i] = 'V';\n            break;\n        case 'w':\n            result[i]\
    \ = 'W';\n            break;\n        case 'x':\n            result[i] = 'X';\n\
    \            break;\n        case 'y':\n            result[i] = 'Y';\n       \
    \     break;\n        case 'z':\n            result[i] = 'Z';\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp_i_sfsmc: /tmp/tmp_i_sfsmc.cpp:95: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Create string with\
    \ 0 size.\n  std::string temp(string.size());\n\n  for (int i = 0; i < string.size();\
    \ i++) {\n    // Convert the character to upper case and append it to string.\n\
    \    temp[i] = toupper(string[i]);\n  }\n\n  return temp;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpck2o4ioe.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpck2o4ioe.cpp:8:33: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(std::__cxx11::basic_string<char>::size_type)\u2019\
    \n    8 |   std::string temp(string.size());\n      |                        \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpck2o4ioe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpck2o4ioe.cpp:8:33:\
    \ note:   candidate expects 3 arguments, 1 provided\n    8 |   std::string temp(string.size());\n\
    \      |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/ce"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string new_string =\
    \ \"\";\n  for (int i = 0; i < string.length(); i++) {\n    char current_char\
    \ = string[i];\n    char next_char = string[i+1];\n    new_string += (current_char\
    \ == next_char) ? (current_char - 32) : current_char;\n  }\n  return new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp127l4feo.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp127l4feo.cpp:7:9: error: expected \u2018;\u2019 before \u2018new_string\u2019\
    \n    7 |   string new_string = \"\";\n      |         ^~~~~~~~~~~\n      |  \
    \       ;\n/tmp/tmp127l4feo.cpp:11:5: error: \u2018new_string\u2019 was not declared\
    \ in this scope; did you mean \u2018string\u2019?\n   11 |     new_string += (current_char\
    \ == next_char) ? (current_char - 32) : current_char;\n      |     ^~~~~~~~~~\n\
    \      |     string\n/tmp/tmp127l4feo.cpp:13:10: error: \u2018new_string\u2019\
    \ was not declared in this scope; did you mean \u2018string\u2019?\n   13 |  \
    \ return new_string;\n      |          ^~~~~~~~~~\n      |          string\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (size_t i = 0; i < s.length(); ++i) {\n        s[i] = toupper(s[i]);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmph8ndm1ze: /tmp/tmph8ndm1ze.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string result=\"\
    \";\n\tfor(auto &c:string)\n\t\tresult+=toupper(c)^tolower(c);\n\treturn result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp0xibd1eg: /tmp/tmp0xibd1eg.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    char c = string[i];\n    if (std::islower(c)) {\n\
    \      string[i] = std::toupper(c);\n    } else if (std::isupper(c)) {\n     \
    \ string[i] = std::tolower(c);\n    }\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string newString;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n      newString.append(tolower(string[i]));\n    else if (string[i]\
    \ >= 'A' && string[i] <= 'Z')\n      newString.append(toupper(string[i]));\n \
    \   else\n      newString.append(string[i]);\n  }\n  return newString;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi43zuek8.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpi43zuek8.cpp:10:42: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(int)\u2019\n   10 |       newString.append(tolower(string[i]));\n\
    \      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi43zuek8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1263 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpi43zuek8.cpp:10:31:\
    \ error: invalid conversion from \u2018int\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   10 |       newString.append(tolower(string[i]));\n      |                \
    \        ~~~~~~~^~~~~~~~~~~\n      |                               |\n      |\
    \                               int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string res =\
    \ \"\";\n    int len = string.length();\n    for (int i = 0; i < len; i++) {\n\
    \        if (string[i] == string[i].toupper()) {\n            res += string[i].tolower();\n\
    \        } else {\n            res += string[i].toupper();\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmgvtayck.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpmgvtayck.cpp:10:36: error: request for member \u2018toupper\u2019 in\
    \ \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   10 |         if (string[i]\
    \ == string[i].toupper()) {\n      |                                    ^~~~~~~\n\
    /tmp/tmpmgvtayck.cpp:11:30: error: request for member \u2018tolower\u2019 in \u2018\
    string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   11 |             res += string[i].tolower();\n\
    \      |                              ^~~~~~~\n/tmp/tmpmgvtayck.cpp:13:30: error:\
    \ request for member \u2018toupper\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   13 |             res += string[i].toupper();\n\
    \      |                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string output;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        output[i] = tolower(string[i]);\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpjvg70uxh: /tmp/tmpjvg70uxh.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int len = string.length();\n\
    \  for (int i = 0; i < len; i++) {\n    if (string[i] == string::toupper(string[i]))\
    \ {\n      string[i] = string::tolower(string[i]);\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdl3y8r0y.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpdl3y8r0y.cpp:9:22: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n    9 |     if (string[i] == string::toupper(string[i])) {\n\
    \      |                      ^~~~~~\n/tmp/tmpdl3y8r0y.cpp:10:19: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   10 |       string[i]\
    \ = string::tolower(string[i]);\n      |                   ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::map<char, char>\
    \ char_map;\n  for (char &c : string)\n    char_map[c] = toupper(c);\n  string\
    \ result(string.begin(), string.end());\n  for (char &c : string)\n    c = char_map[c];\n\
    \  return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpssa5z8eu.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpssa5z8eu.cpp:10:9: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n   10 |   string result(string.begin(), string.end());\n      |         ^~~~~~~\n\
    \      |         ;\n/tmp/tmpssa5z8eu.cpp:13:10: error: \u2018result\u2019 was\
    \ not declared in this scope\n   13 |   return result;\n      |          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string output = string;\n\
    \  for (char c : output)\n    if (('A' <= c && c <= 'Z') || (c <= 'a' && c >=\
    \ 'z'))\n      c = toupper(c);\n  output = output;\n  for (char c : output)\n\
    \    if (('Z' <= c && c <= 'a') || (c <= 'z' && c >= 'a'))\n      c = tolower(c);\n\
    \  return output;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr8nytc7i.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpr8nytc7i.cpp:7:9: error: expected \u2018;\u2019 before \u2018output\u2019\
    \n    7 |   string output = string;\n      |         ^~~~~~~\n      |        \
    \ ;\n/tmp/tmpr8nytc7i.cpp:8:17: error: \u2018output\u2019 was not declared in\
    \ this scope\n    8 |   for (char c : output)\n      |                 ^~~~~~\n\
    /tmp/tmpr8nytc7i.cpp:11:3: error: \u2018output\u2019 was not declared in this\
    \ scope\n   11 |   output = output;\n      |   ^~~~~~\n/tmp/tmpr8nytc7i.cpp:12:17:\
    \ error: unable to deduce \u2018auto&&\u2019 from \u2018output\u2019\n   12 |\
    \   for (char c : output)\n      |                 ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(std::string::iterator\
    \ it = string.begin(); it != string.end(); ++it) {\n        if(*it >= 'a' && *it\
    \ <= 'z') {\n            *it = (*it)+'A'-('a'-'A');\n        }\n        else if(*it\
    \ >= 'A' && *it <= 'Z') {\n            *it = (*it)+'a'-('A'-'a');\n        }\n\
    \        else if(*it >= '0' && *it <= '9') {\n            *it = (*it)+'0'-('0'-'0');\n\
    \        }\n        else {\n            *it = (*it)+((*it)>=97 ? *it - 'A'+'a'\
    \ : *it - 'a'+26);\n        }\n    }\n    return string;\n}\nint main() {\n  \
    \  auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n   \
    \ assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These\
    \ violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpap821411: /tmp/tmpap821411.cpp:26: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string new_string;\n\
    \  for(int i = 0; i < string.size(); i++){\n    if(string[i] >= 'a' && string[i]\
    \ <= 'z'){\n      new_string += string[i];\n    }\n    else{\n      new_string\
    \ += toupper((int)string[i]);\n    }\n  }\n  return new_string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bvkhhun.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp7bvkhhun.cpp:7:9: error: expected \u2018;\u2019 before \u2018new_string\u2019\
    \n    7 |   string new_string;\n      |         ^~~~~~~~~~~\n      |         ;\n\
    /tmp/tmp7bvkhhun.cpp:10:7: error: \u2018new_string\u2019 was not declared in this\
    \ scope; did you mean \u2018string\u2019?\n   10 |       new_string += string[i];\n\
    \      |       ^~~~~~~~~~\n      |       string\n/tmp/tmp7bvkhhun.cpp:13:7: error:\
    \ \u2018new_string\u2019 was not declared in this scope; did you mean \u2018string\u2019\
    ?\n   13 |       new_string += toupper((int)string[i]);\n      |       ^~~~~~~~~~\n\
    \      |       string\n/tmp/tmp7bvkhhun.cpp:16:10: error: \u2018new_string\u2019\
    \ was not declared in this scope; did you mean \u2018string\u2019?\n   16 |  \
    \ return new_string;\n      |          ^~~~~~~~~~\n      |          string\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::transform(\n\
    \        string.begin(), string.end(),\n        string.begin(), ::toupper\n  \
    \  );\n    return std::string(\n        string.begin(), string.end()\n    );\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpd4rugpo4: /tmp/tmpd4rugpo4.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto& c : string)\
    \ c = toupper(c);\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp44xps0hw: /tmp/tmp44xps0hw.cpp:13: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    char c = string[i];\n    if (islower(c)) {\n  \
    \    string[i] = toupper(c);\n    } else {\n      string[i] = tolower(c);\n  \
    \  }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp9yu8x9km: /tmp/tmp9yu8x9km.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (std::string::size_type\
    \ i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            string[i] = string[i] - 32;\n        }\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            string[i] = string[i] + 32;\n   \
    \     }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmps03l7vme: /tmp/tmps03l7vme.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (std::string::iterator\
    \ i = string.begin(); i != string.end(); i++) {\n        if (*i == ' ' || *i ==\
    \ '\\t' || *i == '\\n' || *i == '\\r') {\n            continue;\n        }\n \
    \       if (*i == 'a' && *(i + 1) == 'A' && *(i + 2) == 'a') {\n            *i\
    \ = toupper(*i);\n            i += 2;\n            continue;\n        }\n    \
    \    if (*i == 'A' && *(i + 1) == 'a' && *(i + 2) == 'A') {\n            *i =\
    \ tolower(*i);\n            i += 2;\n            continue;\n        }\n      \
    \  continue;\n    }\n    return string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpmdkirsvf: /tmp/tmpmdkirsvf.cpp:28: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] == 'a') {\n      string[i] = 'A';\n\
    \    } else if (string[i] == 'A') {\n      string[i] = 'a';\n    }\n  }\n  return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpa082cufc: /tmp/tmpa082cufc.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::map<char, char>\
    \ new_map;\n  for (char c : string) {\n    new_map.emplace(c, toupper(c));\n \
    \ }\n  std::string result = \"\";\n  for (char c : string) {\n    result += new_map.at(c);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpgj2wy7di: /tmp/tmpgj2wy7di.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string output = \"\
    \";\n    for(auto c : string)\n    {\n        if(c < 'A' || c > 'Z')\n       \
    \ {\n            output += toupper((unsigned char)c);\n        }\n        else\n\
    \        {\n            output += tolower((unsigned char)c);\n        }\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyohom79b.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpyohom79b.cpp:7:11: error: expected \u2018;\u2019 before \u2018output\u2019\
    \n    7 |     string output = \"\";\n      |           ^~~~~~~\n      |      \
    \     ;\n/tmp/tmpyohom79b.cpp:12:13: error: \u2018output\u2019 was not declared\
    \ in this scope\n   12 |             output += toupper((unsigned char)c);\n  \
    \    |             ^~~~~~\n/tmp/tmpyohom79b.cpp:16:13: error: \u2018output\u2019\
    \ was not declared in this scope\n   16 |             output += tolower((unsigned\
    \ char)c);\n      |             ^~~~~~\n/tmp/tmpyohom79b.cpp:19:12: error: \u2018\
    output\u2019 was not declared in this scope\n   19 |     return output;\n    \
    \  |            ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z')\n            string[i]\
    \ = string[i] - 32;\n        else if(string[i] >= 'A' && string[i] <= 'Z')\n \
    \           string[i] = string[i] + 32;\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto& c : string)\n\
    \        c = toupper(c);\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpqic5v45v: /tmp/tmpqic5v45v.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (char c : string)\n\
    \        if ('A' <= c && c <= 'Z') \n            string += (char) (c + 32 - (c\
    \ | 32));\n        else \n            string += c;\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp3kjgmtmd: /tmp/tmp3kjgmtmd.cpp:17: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Write your code\
    \ here.\n  string flipped = \"\";\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    char c = string[i];\n    if (string[i] == string::toupper(c)) {\n   \
    \   flipped += string[i];\n      flipped += string::tolower(string[i]);\n    }\
    \ else {\n      flipped += string[i];\n    }\n  }\n  return flipped;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnk25_p_b.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpnk25_p_b.cpp:8:9: error: expected \u2018;\u2019 before \u2018flipped\u2019\
    \n    8 |   string flipped = \"\";\n      |         ^~~~~~~~\n      |        \
    \ ;\n/tmp/tmpnk25_p_b.cpp:11:22: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |     if (string[i] == string::toupper(c)) {\n      |\
    \                      ^~~~~~\n/tmp/tmpnk25_p_b.cpp:12:7: error: \u2018flipped\u2019\
    \ was not declared in this scope\n   12 |       flipped += string[i];\n      |\
    \       ^~~~~~~\n/tmp/tmpnk25_p_b.cpp:13:18: error: \u2018string\u2019 is not\
    \ a class, namespace, or enumeration\n   13 |       flipped += string::tolower(string[i]);\n\
    \      |                  ^~~~~~\n/tmp/tmpnk25_p_b.cpp:15:7: error: \u2018flipped\u2019\
    \ was not declared in this scope\n   15 |       flipped += string[i];\n      |\
    \       ^~~~~~~\n/tmp/tmpnk25_p_b.cpp:18:10: error: \u2018flipped\u2019 was not\
    \ declared in this scope\n   18 |   return flipped;\n      |          ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\
    \ {\n    if (std::toupper(c) == c) c = std::tolower(c);\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpw1blf5dt: /tmp/tmpw1blf5dt.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string res;\n\
    \    int len = string.length();\n    for (int i = 0; i < len; ++i) {\n       \
    \ char c = string[i];\n        if ('a' <= c && c <= 'z') {\n            res +=\
    \ toupper(c);\n        } else if (c == 'A') {\n            res += 'a';\n     \
    \   } else if (c == 'B') {\n            res += 'b';\n        } else if (c == 'C')\
    \ {\n            res += 'c';\n        } else if (c == 'D') {\n            res\
    \ += 'd';\n        } else if (c == 'E') {\n            res += 'e';\n        }\
    \ else if (c == 'F') {\n            res += 'f';\n        } else if (c == 'G')\
    \ {\n            res += 'g';\n        } else if (c == 'H') {\n            res\
    \ += 'h';\n        } else if (c == 'I') {\n            res += 'i';\n        }\
    \ else if (c == 'J') {\n            res += 'j';\n        } else if (c == 'K')\
    \ {\n            res += 'k';\n        } else if (c == 'L') {\n            res\
    \ += 'l';\n        } else if (c == 'M') {\n            res += 'm';\n        }\
    \ else if (c == 'N') {\n            res += 'n';\n        } else if (c == 'O')\
    \ {\n            res += 'o';\n        } else if (c == 'P') {\n            res\
    \ += 'p';\n        } else if (c == 'Q') {\n            res += 'q';\n        }\
    \ else if (c == 'R') {\n            res += 'r';\n        } else if (c == 'S')\
    \ {\n            res += 's';\n        } else if (c == 'T') {\n            res\
    \ += 't';\n        } else if (c == 'U') {\n            res += 'u';\n        }\
    \ else if (c == 'V') {\n            res += 'v';\n        } else if (c == 'W')\
    \ {\n            res += 'w';\n        } else if (c == 'X') {\n            res\
    \ += 'x';\n        } else if (c == 'Y') {\n            res += 'y';\n        }\
    \ else if (c == 'Z') {\n            res += 'z';\n        } else {\n          \
    \  res += c;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Iterate through\
    \ all the characters in the string.\n    for (int i = 0; i < string.length();\
    \ i++) {\n        // If the character is an uppercase character, flip it to lowercase.\n\
    \        if (string[i] >= 'A' && string[i] <= 'Z') {\n            string[i] =\
    \ string[i] - 32;\n        }\n        // If the character is an lowercase character,\
    \ flip it to uppercase.\n        else if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp4v607dxc: /tmp/tmp4v607dxc.cpp:23: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int size = string.size();\n\
    \  std::string result;\n  for (int i = 0; i < size; i++) {\n    if (isupper(string[i]))\
    \ {\n      result += tolower(string[i]);\n    } else {\n      result += string[i];\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp4l8eq49w: /tmp/tmp4l8eq49w.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::transform(string.length(),\
    \ string.begin(), string.begin(), ::toupper);\n  std::transform(string.length(),\
    \ string.begin(), string.begin(), ::tolower);\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps06vzigp.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmps06vzigp.cpp:7:76: error: no matching function for call to \u2018transform(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ int (&)(int) throw ())\u2019\n    7 |   std::transform(string.length(), string.begin(),\
    \ string.begin(), ::toupper);\n      |                                       \
    \                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps06vzigp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4287:5:\
    \ note: candidate: \u2018template<class _IIter, class _OIter, class _UnaryOperation>\
    \ _OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation)\u2019\n 4287\
    \ |     transform(_InputIterator __first, _InputIterator __last,\n      |    \
    \ ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4287:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmps06vzigp.cpp:7:76:\
    \ note:   deduced conflicting types for parameter \u2018_IIter\u2019 (\u2018long\
    \ unsigned int\u2019 and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n    7 |   std::transform(string.length(), string.begin(), string.begin(),\
    \ ::toupper);\n      |                                                       \
    \                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps06vzigp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4324:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _BinaryOperation> _OIter std::transform(_IIter1, _IIter1, _IIter2, _OIter,\
    \ _BinaryOperation)\u2019\n 4324 |     transform(_InputIterato"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (auto c : string)\n    {\n        if (c >= 'A' && c <= 'Z')\n\
    \        {\n            result += static_cast<char>('a'-static_cast<int>(c));\n\
    \        }\n        else if (c >= 'a' && c <= 'z')\n        {\n            result\
    \ += static_cast<char>('A'-static_cast<int>(c));\n        }\n        else\n  \
    \      {\n            result += c;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp9u9kok5c: /tmp/tmp9u9kok5c.cpp:28: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpmp39rkfs: /tmp/tmpmp39rkfs.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto i : string)\
    \ {\n    if (i != 'a'&&i != 'A'&&i != 'e'&&i != 'E'&&i != 'i'&&i != 'I'&&i !=\
    \ 'o'&&i != 'O'&&i != 'u'&&i != 'U')\n    {\n        char tmp = i;\n        i\
    \ = tolower(i);\n        string += tmp;\n    }\n  }\n  return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp70y53r7q: /tmp/tmp70y53r7q.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (size_t i = 0;\
    \ i < string.length(); i++) {\n    const char c = string[i];\n    if (toupper(c)\
    \ == c)\n      string[i] = tolower(c);\n    else if (tolower(c) == c)\n      string[i]\
    \ = toupper(c);\n  }\n  return string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string temp;\n  for\
    \ (int i = 0; i < string.size(); ++i) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      temp += string[i];\n    } else {\n      temp += string[i] +\
    \ 32 - (string[i] >= 'A' && string[i] <= 'Z');\n    }\n  }\n  return temp;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzdj54fll.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpzdj54fll.cpp:7:9: error: expected \u2018;\u2019 before \u2018temp\u2019\
    \n    7 |   string temp;\n      |         ^~~~~\n      |         ;\n/tmp/tmpzdj54fll.cpp:10:7:\
    \ error: \u2018temp\u2019 was not declared in this scope\n   10 |       temp +=\
    \ string[i];\n      |       ^~~~\n/tmp/tmpzdj54fll.cpp:12:7: error: \u2018temp\u2019\
    \ was not declared in this scope\n   12 |       temp += string[i] + 32 - (string[i]\
    \ >= 'A' && string[i] <= 'Z');\n      |       ^~~~\n/tmp/tmpzdj54fll.cpp:15:10:\
    \ error: \u2018temp\u2019 was not declared in this scope\n   15 |   return temp;\n\
    \      |          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string str1(string);\n\
    \    int len = str1.length();\n    for(int i = 0; i < len; i++) {\n        if(str1[i]\
    \ >= 'a' && str1[i] <= 'z')\n            str1[i] += 32;\n    }\n    return str1;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwqtyo3h.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpiwqtyo3h.cpp:7:11: error: expected \u2018;\u2019 before \u2018str1\u2019\
    \n    7 |     string str1(string);\n      |           ^~~~~\n      |         \
    \  ;\n/tmp/tmpiwqtyo3h.cpp:8:15: error: \u2018str1\u2019 was not declared in this\
    \ scope\n    8 |     int len = str1.length();\n      |               ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpjm09md8d: /tmp/tmpjm09md8d.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    assert(string.size()\
    \ > 0);\n    std::string new_string = \"\";\n    for (char &character : string)\
    \ {\n        switch (character) {\n            case 'a':\n                new_string\
    \ += 'A';\n                break;\n            case 'b':\n                new_string\
    \ += 'B';\n                break;\n            case 'c':\n                new_string\
    \ += 'C';\n                break;\n            case 'd':\n                new_string\
    \ += 'D';\n                break;\n            case 'e':\n                new_string\
    \ += 'E';\n                break;\n            case 'f':\n                new_string\
    \ += 'F';\n                break;\n            case 'g':\n                new_string\
    \ += 'G';\n                break;\n            case 'h':\n                new_string\
    \ += 'H';\n                break;\n            case 'i':\n                new_string\
    \ += 'I';\n                break;\n            case 'j':\n                new_string\
    \ += 'J';\n                break;\n            case 'k':\n                new_string\
    \ += 'K';\n                break;\n            case 'l':\n                new_string\
    \ += 'L';\n                break;\n            case 'm':\n                new_string\
    \ += 'M';\n                break;\n            case 'n':\n                new_string\
    \ += 'N';\n                break;\n            case 'o':\n                new_string\
    \ += 'O';\n                break;\n            case 'p':\n                new_string\
    \ += 'P';\n                break;\n            case 'q':\n                new_string\
    \ += 'Q';\n                break;\n            case 'r':\n                new_string\
    \ += 'R';\n                break;\n            case 's':\n                new_string\
    \ += 'S';\n                break;\n            case 't':\n                new_string\
    \ += 'T';\n                break;\n            case 'u':\n                new_string\
    \ += 'U';\n                break;\n            case 'v':\n                new_string\
    \ += 'V';\n                break;\n            case 'w':\n                new_string\
    \ += 'W';\n                break;\n            case 'x':\n                new_string\
    \ += 'X';\n                break;\n            case 'y':\n                new_string\
    \ += 'Y';\n                break;\n            case 'z':\n                new_string\
    \ += 'Z';\n                break;\n            default:\n                new_string\
    \ += character;\n        }\n    }\n    return new_string;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpcc440gil: /tmp/tmpcc440gil.cpp:7: std::string flip_case(std::string):\
    \ Assertion `string.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for(char &c : string)\n        c = tolower(c);\n    return string.isalpha()\
    \ ? result : string.swapcase();\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpukatjsyz.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpukatjsyz.cpp:10:19: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018isalpha\u2019\
    \n   10 |     return string.isalpha() ? result : string.swapcase();\n      | \
    \                  ^~~~~~~\n/tmp/tmpukatjsyz.cpp:10:47: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018swapcase\u2019\n   10 |     return string.isalpha() ? result : string.swapcase();\n\
    \      |                                               ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    char c = string[i];\n    if (c >= 'a' && c <= 'z')\
    \ {\n      string[i] = c ^ 'A';\n    } else if (c >= 'A' && c <= 'Z') {\n    \
    \  string[i] = c ^ 'a';\n    }\n  }\n  return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwm2k1juc: /tmp/tmpwm2k1juc.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Return an empty\
    \ string if there are no characters.\n  if (string.size() == 0)\n    return \"\
    \";\n  // Flip each character in the string from lowercase to uppercase.\n  for\
    \ (int i = 0; i < string.size(); ++i) {\n    string[i] = string[i] ^ 32;\n  }\n\
    \  return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp4bb50rk8: /tmp/tmp4bb50rk8.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string new_string\
    \ = \"\";\n    for (auto &c : string) {\n        if (c == 'a') {\n           \
    \ c = 'A';\n        } else if (c == 'b') {\n            c = 'B';\n        } else\
    \ if (c == 'c') {\n            c = 'C';\n        } else if (c == 'd') {\n    \
    \        c = 'D';\n        } else if (c == 'e') {\n            c = 'E';\n    \
    \    } else if (c == 'f') {\n            c = 'F';\n        } else if (c == 'g')\
    \ {\n            c = 'G';\n        } else if (c == 'h') {\n            c = 'H';\n\
    \        } else if (c == 'i') {\n            c = 'I';\n        } else if (c ==\
    \ 'j') {\n            c = 'J';\n        } else if (c == 'k') {\n            c\
    \ = 'K';\n        } else if (c == 'l') {\n            c = 'L';\n        } else\
    \ if (c == 'm') {\n            c = 'M';\n        } else if (c == 'n') {\n    \
    \        c = 'N';\n        } else if (c == 'o') {\n            c = 'O';\n    \
    \    } else if (c == 'p') {\n            c = 'P';\n        } else if (c == 'q')\
    \ {\n            c = 'Q';\n        } else if (c == 'r') {\n            c = 'R';\n\
    \        } else if (c == 's') {\n            c = 'S';\n        } else if (c ==\
    \ 't') {\n            c = 'T';\n        } else if (c == 'u') {\n            c\
    \ = 'U';\n        } else if (c == 'v') {\n            c = 'V';\n        } else\
    \ if (c == 'w') {\n            c = 'W';\n        } else if (c == 'x') {\n    \
    \        c = 'X';\n        } else if (c == 'y') {\n            c = 'Y';\n    \
    \    } else if (c == 'z') {\n            c = 'Z';\n        } else if (c == 'A')\
    \ {\n            c = 'a';\n        } else if (c == 'B') {\n            c = 'b';\n\
    \        } else if (c == 'C') {\n            c = 'c';\n        } else if (c ==\
    \ 'D') {\n            c = 'd';\n        } else if (c == 'E') {\n            c\
    \ = 'e';\n        } else if (c == 'F') {\n            c = 'f';\n        } else\
    \ if (c == 'G') {\n            c = 'g';\n        } else if (c == 'H') {\n    \
    \        c = 'h';\n        } else if (c == 'I') {\n            c = 'i';\n    \
    \    } else if (c == 'J') {\n            c = 'j';\n        } else if (c == 'K')\
    \ {\n            c = 'k';\n        } else if (c == 'L') {\n            c = 'l';\n\
    \        } else if (c == 'M') {\n            c = 'm';\n        } else if (c ==\
    \ 'N') {\n            c = 'n';\n        } else if (c == 'O') {\n            c\
    \ = 'o';\n        } else if (c == 'P') {\n            c = 'p';\n        } else\
    \ if (c == 'Q') {\n            c = 'q';\n        } else if (c == 'R') {\n    \
    \        c = 'r';\n        } else if (c == 'S') {\n            c = 's';\n    \
    \    } else if (c == 'T') {\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiakld7eb.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpiakld7eb.cpp:7:11: error: expected \u2018;\u2019 before \u2018new_string\u2019\
    \n    7 |     string new_string = \"\";\n      |           ^~~~~~~~~~~\n     \
    \ |           ;\n/tmp/tmpiakld7eb.cpp:101:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n  101 | int main() {\n      | \
    \           ^\n/tmp/tmpiakld7eb.cpp:106:1: error: expected \u2018}\u2019 at end\
    \ of input\n  106 | }\n      | ^\n/tmp/tmpiakld7eb.cpp:8:28: note: to match this\
    \ \u2018{\u2019\n    8 |     for (auto &c : string) {\n      |               \
    \             ^\n/tmp/tmpiakld7eb.cpp:106:1: error: expected \u2018}\u2019 at\
    \ end of input\n  106 | }\n      | ^\n/tmp/tmpiakld7eb.cpp:6:43: note: to match\
    \ this \u2018{\u2019\n    6 | std::string flip_case(std::string string) {\n  \
    \    |                                           ^\n/tmp/tmpiakld7eb.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  106 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    assert(string.size()\
    \ > 0);\n    std::string out = string;\n    for (unsigned int i = 0; i < out.size();\
    \ i++) {\n        out[i] = toupper(out[i]);\n        out[i] = tolower(out[i]);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpee007cli: /tmp/tmpee007cli.cpp:7: std::string flip_case(std::string):\
    \ Assertion `string.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (size_t i = 0;\
    \ i < string.length(); ++i) {\n        if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n            string[i] = string[i] + 32;\n        }\n        else if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            string[i] = string[i] - 32;\n   \
    \     }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (char &c : string)\
    \ {\n    if (c >= 'a' && c <= 'z') {\n      c ^= ('a' - 'A');\n    } else if (c\
    \ >= 'A' && c <= 'Z') {\n      c ^= ('A' - 'a');\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpeixwclr2: /tmp/tmpeixwclr2.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string rep(string.size(),\
    \ 'a');\n    rep.erase(std::transform(rep.begin(), rep.end(), rep.begin(),\n \
    \                            [](char c) {return (c >= 'a' && c <= 'z') ? c - 32\
    \ : c;}));\n    rep.erase(std::transform(rep.begin(), rep.end(), rep.begin(),\n\
    \                             [](char c) {return (c >= 'A' && c <= 'Z') ? c +\
    \ 32 : c;}));\n    return rep;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5brl5a9a.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp5brl5a9a.cpp:7:11: error: expected \u2018;\u2019 before \u2018rep\u2019\
    \n    7 |     string rep(string.size(), 'a');\n      |           ^~~~\n      |\
    \           ;\n/tmp/tmp5brl5a9a.cpp:8:5: error: \u2018rep\u2019 was not declared\
    \ in this scope\n    8 |     rep.erase(std::transform(rep.begin(), rep.end(),\
    \ rep.begin(),\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\n\
    \        if (std::toupper(c) != std::tolower(c))\n            string += (c + std::toupper(c));\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpw6zfpb9z: /tmp/tmpw6zfpb9z.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n   \
    \   string[i] = string[i] - 32;\n    if (string[i] >= 'A' && string[i] <= 'Z')\n\
    \      string[i] = string[i] + 32;\n  }\n  return string;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpmjfne_ms: /tmp/tmpmjfne_ms.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int flag = 0;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      flag++;\n      string[i] = string[i] - 32;\n    } else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      flag++;\n      string[i] = string[i] +\
    \ 32;\n    } else {\n      flag = 0;\n    }\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string t = string;\n\
    \  for (int i = 0; i < t.length(); i++) {\n    if (t.at(i) == 'a' || t.at(i) ==\
    \ 'e' || t.at(i) == 'i' || t.at(i) == 'o' || t.at(i) == 'u' || t.at(i) == 'Y'\
    \ || t.at(i) == 'y') {\n      t.at(i) = t.at(i) + 32;\n    }\n    if (t.at(i)\
    \ == 'b' || t.at(i) == 'd' || t.at(i) == 'f' || t.at(i) == 'g' || t.at(i) == 'h'\
    \ || t.at(i) == 'j' || t.at(i) == 'k' || t.at(i) == 'l' || t.at(i) == 'm' || t.at(i)\
    \ == 'p' || t.at(i) == 'q' || t.at(i) == 'r' || t.at(i) == 's' || t.at(i) == 't'\
    \ || t.at(i) == 'v' || t.at(i) == 'w' || t.at(i) == 'x' || t.at(i) == 'z') {\n\
    \      t.at(i) = t.at(i) - 32;\n    }\n  }\n  return t;\n}\nint main() {\n   \
    \ auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dszd1fj.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp7dszd1fj.cpp:7:9: error: expected \u2018;\u2019 before \u2018t\u2019\
    \n    7 |   string t = string;\n      |         ^~\n      |         ;\n/tmp/tmp7dszd1fj.cpp:8:23:\
    \ error: \u2018t\u2019 was not declared in this scope\n    8 |   for (int i =\
    \ 0; i < t.length(); i++) {\n      |                       ^\n/tmp/tmp7dszd1fj.cpp:16:10:\
    \ error: \u2018t\u2019 was not declared in this scope; did you mean \u2018tm\u2019\
    ?\n   16 |   return t;\n      |          ^\n      |          tm\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string output = string;\n\
    \  for (int i = 0; i < output.length(); i++) {\n    if (islower(output[i])) {\n\
    \      output[i] = toupper(output[i]);\n    }\n    if (isupper(output[i])) {\n\
    \      output[i] = tolower(output[i]);\n    }\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygmpo9yu.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpygmpo9yu.cpp:7:9: error: expected \u2018;\u2019 before \u2018output\u2019\
    \n    7 |   string output = string;\n      |         ^~~~~~~\n      |        \
    \ ;\n/tmp/tmpygmpo9yu.cpp:8:23: error: \u2018output\u2019 was not declared in\
    \ this scope\n    8 |   for (int i = 0; i < output.length(); i++) {\n      | \
    \                      ^~~~~~\n/tmp/tmpygmpo9yu.cpp:16:10: error: \u2018output\u2019\
    \ was not declared in this scope\n   16 |   return output;\n      |          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string s = string;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (s[i] == string::toupper(s[i]))\
    \ {\n            s[i] = string::tolower(s[i]);\n        }\n        if (s[i] ==\
    \ string::tolower(s[i])) {\n            s[i] = string::toupper(s[i]);\n      \
    \  }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwsfobxe.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpfwsfobxe.cpp:7:11: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |     string s = string;\n      |           ^~\n      |           ;\n\
    /tmp/tmpfwsfobxe.cpp:8:28: error: \u2018s\u2019 was not declared in this scope\n\
    \    8 |     for (size_t i = 0; i < s.length(); i++) {\n      |              \
    \              ^\n/tmp/tmpfwsfobxe.cpp:9:21: error: \u2018string\u2019 is not\
    \ a class, namespace, or enumeration\n    9 |         if (s[i] == string::toupper(s[i]))\
    \ {\n      |                     ^~~~~~\n/tmp/tmpfwsfobxe.cpp:10:20: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   10 |             s[i]\
    \ = string::tolower(s[i]);\n      |                    ^~~~~~\n/tmp/tmpfwsfobxe.cpp:12:21:\
    \ error: \u2018string\u2019 is not a class, namespace, or enumeration\n   12 |\
    \         if (s[i] == string::tolower(s[i])) {\n      |                     ^~~~~~\n\
    /tmp/tmpfwsfobxe.cpp:13:20: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   13 |             s[i] = string::toupper(s[i]);\n      | \
    \                   ^~~~~~\n/tmp/tmpfwsfobxe.cpp:16:12: error: \u2018s\u2019 was\
    \ not declared in this scope\n   16 |     return s;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(auto &it: string)\
    \ if(std::islower(it)) it = std::toupper(it);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpijo91n8o: /tmp/tmpijo91n8o.cpp:13: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto c: string)\
    \ {\n        c = (c >= 'a' && c <= 'z') ? c - 32 : c;\n        c = (c >= 'A' &&\
    \ c <= 'Z') ? c + 32 : c;\n    }\n    return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpc5__z05y: /tmp/tmpc5__z05y.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (std::size_t\
    \ i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = static_cast<char>(string[i] + 32);\n    \
    \    } else if (string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = static_cast<char>(string[i] - 32);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string new_string;\n\
    \    for (auto & ch : string) {\n        if (('A' <= ch && ch <= 'Z')) ch ^= 'a';\
    \ // Uppercase A -> a\n        if (('a' <= ch && ch <= 'z')) ch ^= 'A'; // Lowercase\
    \ a -> A\n        new_string.push_back(ch);\n    }\n    return new_string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5u89a0jq.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp5u89a0jq.cpp:7:11: error: expected \u2018;\u2019 before \u2018new_string\u2019\
    \n    7 |     string new_string;\n      |           ^~~~~~~~~~~\n      |     \
    \      ;\n/tmp/tmp5u89a0jq.cpp:11:9: error: \u2018new_string\u2019 was not declared\
    \ in this scope; did you mean \u2018string\u2019?\n   11 |         new_string.push_back(ch);\n\
    \      |         ^~~~~~~~~~\n      |         string\n/tmp/tmp5u89a0jq.cpp:13:12:\
    \ error: \u2018new_string\u2019 was not declared in this scope; did you mean \u2018\
    string\u2019?\n   13 |     return new_string;\n      |            ^~~~~~~~~~\n\
    \      |            string\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  assert(!string.empty());\n\
    \  string t = string;\n  std::transform(t.begin(), t.end(), t.begin(), ::toupper);\n\
    \  std::transform(t.begin(), t.end(), t.begin(), ::tolower);\n  return t;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg723vq4y.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpg723vq4y.cpp:8:9: error: expected \u2018;\u2019 before \u2018t\u2019\
    \n    8 |   string t = string;\n      |         ^~\n      |         ;\n/tmp/tmpg723vq4y.cpp:9:18:\
    \ error: \u2018t\u2019 was not declared in this scope; did you mean \u2018tm\u2019\
    ?\n    9 |   std::transform(t.begin(), t.end(), t.begin(), ::toupper);\n     \
    \ |                  ^\n      |                  tm\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(size_t i = 0;\
    \ i < string.length(); i++) {\n        if(isupper(string[i])) string[i] = tolower(string[i]);\n\
    \        else string[i] = toupper(string[i]);\n    }\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (char &i : string)\
    \ {\n        i = tolower(i);\n    }\n    return string;\n}\nint main() {\n   \
    \ auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwv7rrlrd: /tmp/tmpwv7rrlrd.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto ch : string)\
    \ {\n        string += (ch >= 'a' && ch <= 'z') ? ch-'a' + 'A' : ch-'A' + 'a';\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpfu4fc0nw: /tmp/tmpfu4fc0nw.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string res =\
    \ string;\n    for (auto &letter : string) {\n        if (letter >= 'a' && letter\
    \ <= 'z')\n            letter = letter ^ ('A' - 'a');\n        else if (letter\
    \ >= 'A' && letter <= 'Z')\n            letter = letter ^ 'a' - 'A';\n       \
    \ else if (letter == '_')\n            letter = '-';\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp_gq5pdy4: /tmp/tmp_gq5pdy4.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result(string.size(),\
    \ string[0]);\n    for (int i = 1; i < string.size(); ++i) {\n        char c =\
    \ string[i];\n        if ('A' <= c && c <= 'Z') {\n            result[i] = c +\
    \ 32;\n        } else {\n            result[i] = c;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpwsmzltrj: /tmp/tmpwsmzltrj.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (size_t i = 0;\
    \ i < string.length(); ++i) {\n        std::string s = string(string.begin() +\
    \ i, string.begin() + i + 1);\n        string.erase(string.begin() + i, string.begin()\
    \ + i + 1);\n        string += s;\n    }\n    return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpra0cnbxy.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpra0cnbxy.cpp:8:74: error: no match for call to \u2018(std::string {aka\
    \ std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n    8 |         std::string s = string(string.begin() + i, string.begin() +\
    \ i + 1);\n      |                                                           \
    \               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for(std::string::size_type\
    \ i = 0; i < string.length(); i++) {\n    if(string[i] == tolower(string[i]))\n\
    \      string[i] = toupper(string[i]);\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpfkejb01g: /tmp/tmpfkejb01g.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string out = string;\n\
    \    std::transform(string.begin(), string.end(), out.begin(), ::toupper);\n \
    \   std::transform(out.begin(), out.end(), out.begin(), ::tolower);\n    return\
    \ out;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk7dv43wj.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpk7dv43wj.cpp:7:11: error: expected \u2018;\u2019 before \u2018out\u2019\
    \n    7 |     string out = string;\n      |           ^~~~\n      |          \
    \ ;\n/tmp/tmpk7dv43wj.cpp:8:50: error: \u2018out\u2019 was not declared in this\
    \ scope\n    8 |     std::transform(string.begin(), string.end(), out.begin(),\
    \ ::toupper);\n      |                                                  ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string ans = string;\n\
    \  for (int i = 0; i < ans.size(); i++) {\n    char temp = ans[i];\n    ans[i]\
    \ = ans[string.length() - 1 - i];\n    ans[string.length() - 1 - i] = temp;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp2oeqv4dd: /tmp/tmp2oeqv4dd.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto c : string)\n\
    \        c = toupper(c);\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp74q2u084: /tmp/tmp74q2u084.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    assert(!string.empty());\n\
    \    \n    std::string result(string);\n    for (auto c : string) {\n        if\
    \ ('A' <= c && c <= 'Z') {\n            result += static_cast<char>(c - 'A' +\
    \ 'a');\n        } else {\n            result += c;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpnoqgu11q: /tmp/tmpnoqgu11q.cpp:7: std::string flip_case(std::string):\
    \ Assertion `!string.empty()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(std::string::iterator\
    \ it = string.begin(); it != string.end(); ++it) {\n        if(*it >= 'A' && *it\
    \ <= 'Z') {\n            *it = (*it) - 'A' + 'a';\n        }\n        else if(*it\
    \ >= 'a' && *it <= 'z') {\n            *it = (*it) - 'a' + 'A';\n        }\n \
    \   }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s;\n\
    \    s.reserve(string.length());\n    for (auto c : string)\n        if (toupper(c)\
    \ == c)\n            s += tolower(c);\n        else\n            s += c;\n   \
    \ return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpp5eueh9n: /tmp/tmpp5eueh9n.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto it = string.begin();\
    \ it != string.end(); ++it)\n    {\n        if (*it >= 'a' && *it <= 'z')\n  \
    \          *(it+1) = static_cast<char>(toupper((*it)));\n        else\n      \
    \      *(it+1) = static_cast<char>(tolower((*it)));\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpkvfn4tb9: /tmp/tmpkvfn4tb9.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string new_string;\n\
    \  for(unsigned int i = 0; i < string.size(); i++) {\n    if (string[i] == '_')\
    \ {\n      new_string += string[i];\n    }\n    else if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      new_string += string[i] - 'a' + 'A';\n    }\n    else {\n \
    \     new_string += string[i];\n    }\n  }\n  return new_string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89vo1fwj.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp89vo1fwj.cpp:7:9: error: expected \u2018;\u2019 before \u2018new_string\u2019\
    \n    7 |   string new_string;\n      |         ^~~~~~~~~~~\n      |         ;\n\
    /tmp/tmp89vo1fwj.cpp:10:7: error: \u2018new_string\u2019 was not declared in this\
    \ scope; did you mean \u2018string\u2019?\n   10 |       new_string += string[i];\n\
    \      |       ^~~~~~~~~~\n      |       string\n/tmp/tmp89vo1fwj.cpp:13:7: error:\
    \ \u2018new_string\u2019 was not declared in this scope; did you mean \u2018string\u2019\
    ?\n   13 |       new_string += string[i] - 'a' + 'A';\n      |       ^~~~~~~~~~\n\
    \      |       string\n/tmp/tmp89vo1fwj.cpp:16:7: error: \u2018new_string\u2019\
    \ was not declared in this scope; did you mean \u2018string\u2019?\n   16 |  \
    \     new_string += string[i];\n      |       ^~~~~~~~~~\n      |       string\n\
    /tmp/tmp89vo1fwj.cpp:19:10: error: \u2018new_string\u2019 was not declared in\
    \ this scope; did you mean \u2018string\u2019?\n   19 |   return new_string;\n\
    \      |          ^~~~~~~~~~\n      |          string\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::map<char, char>\
    \ mapping;\n    for (char ch : string) {\n        mapping[ch] = toupper(ch);\n\
    \    }\n    std::string result;\n    for (char ch : string) {\n        result.append(mapping[ch]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdfpq9cp.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpsdfpq9cp.cpp:13:34: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(std::map<char, char>::mapped_type&)\u2019\
    \n   13 |         result.append(mapping[ch]);\n      |                       \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsdfpq9cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1263 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpsdfpq9cp.cpp:13:34:\
    \ error: invalid conversion from \u2018std::map<char, char>::mapped_type\u2019\
    \ {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n   13 |  \
    \       result.append(mapping[ch]);\n      |                                 \
    \ ^\n      |                                  |\n      |                     \
    \             std::map<char, char>::mapped_type {aka char}\nI"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = string;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (result[i]\
    \ >= 'a' && result[i] <= 'z')\n            result[i] = toupper(result[i]);\n \
    \       else if (result[i] >= 'A' && result[i] <= 'Z')\n            result[i]\
    \ = tolower(result[i]);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string s;\n  for (char\
    \ c : string)\n    s += (c >= 'a' && c <= 'z') ? c + 32 : c;\n  return s;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzcq34p7d.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpzcq34p7d.cpp:7:9: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |   string s;\n      |         ^~\n      |         ;\n/tmp/tmpzcq34p7d.cpp:9:5:\
    \ error: \u2018s\u2019 was not declared in this scope\n    9 |     s += (c >=\
    \ 'a' && c <= 'z') ? c + 32 : c;\n      |     ^\n/tmp/tmpzcq34p7d.cpp:10:10: error:\
    \ \u2018s\u2019 was not declared in this scope\n   10 |   return s;\n      | \
    \         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string s = string;\n\
    \  for (auto i : s) {\n    if (i == tolower(i)) {\n      s[i] = toupper(i);\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5dhw_1_.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpd5dhw_1_.cpp:7:9: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |   string s = string;\n      |         ^~\n      |         ;\n/tmp/tmpd5dhw_1_.cpp:8:17:\
    \ error: \u2018s\u2019 was not declared in this scope\n    8 |   for (auto i :\
    \ s) {\n      |                 ^\n/tmp/tmpd5dhw_1_.cpp:13:10: error: \u2018s\u2019\
    \ was not declared in this scope\n   13 |   return s;\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string res =\
    \ string;\n    for (unsigned int i = 0; i < string.length(); i++) {\n        if\
    \ (string[i] >= 'A' && string[i] <= 'Z') {\n            res += string[i] + 'a'\
    \ - 'A';\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmphfciqdns: /tmp/tmphfciqdns.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = \"\
    \";\n    for (auto x : string)\n        if (x != ' ')\n            s += (x >=\
    \ 'A' && x <= 'Z') ? (x - 'A' + 'a') : (x == 'a' ? 'A' : x);\n    return s;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpgjue7rti: /tmp/tmpgjue7rti.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Store the string\
    \ length\n  int len = string.length();\n  // Create an empty string for the result\n\
    \  std::string result = '';\n  for (int i = 0; i < len; i++) {\n    char ch =\
    \ string[i];\n    if (islower(ch)) {\n      result += toupper(ch);\n    } else\
    \ {\n      result += tolower(ch);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwjzff_7b.cpp:10:24: error: empty character constant\n   10 |  \
    \ std::string result = '';\n      |                        ^~\n/tmp/tmpwjzff_7b.cpp:\
    \ In function \u2018std::string flip_case(std::string)\u2019:\n/tmp/tmpwjzff_7b.cpp:10:24:\
    \ error: conversion from \u2018char\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'a' && c <= 'z')\n            c = c - 'a' + 'A';\n     \
    \   if (c >= 'A' && c <= 'Z')\n            c = c - 'A' + 'a';\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpsjlkwiso: /tmp/tmpsjlkwiso.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Initialization\n\
    \  string flipped_string(string);\n\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    switch (string[i]) {\n      case 'a':\n      case 'b':\n      case 'c':\n\
    \      case 'd':\n      case 'e':\n      case 'f':\n      case 'g':\n      case\
    \ 'h':\n      case 'i':\n      case 'j':\n      case 'k':\n      case 'l':\n \
    \     case 'm':\n      case 'n':\n      case 'o':\n      case 'p':\n      case\
    \ 'q':\n      case 'r':\n      case 's':\n      case 't':\n      case 'u':\n \
    \     case 'v':\n      case 'w':\n      case 'x':\n      case 'y':\n      case\
    \ 'z':\n        flipped_string[i] = string[i];\n        break;\n      default:\n\
    \        flipped_string[i] = 'A' + string[i] - 1;\n    }\n  }\n\n  return flipped_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13mkc87u.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp13mkc87u.cpp:8:9: error: expected \u2018;\u2019 before \u2018flipped_string\u2019\
    \n    8 |   string flipped_string(string);\n      |         ^~~~~~~~~~~~~~~\n\
    \      |         ;\n/tmp/tmp13mkc87u.cpp:38:9: error: \u2018flipped_string\u2019\
    \ was not declared in this scope\n   38 |         flipped_string[i] = string[i];\n\
    \      |         ^~~~~~~~~~~~~~\n/tmp/tmp13mkc87u.cpp:45:10: error: \u2018flipped_string\u2019\
    \ was not declared in this scope\n   45 |   return flipped_string;\n      |  \
    \        ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string s = string;\n\
    \  for (int i = 0; i < s.size(); i++) {\n    char c = s[i];\n    if (c >= 'a'\
    \ && c <= 'z') {\n      s[i] = c + 32;\n    } else if (c >= 'A' && c <= 'Z') {\n\
    \      s[i] = c - 32;\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp36zxlqx_: /tmp/tmp36zxlqx_.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string s = string;\n\
    \  for (size_t i = 0; i < s.length(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z')\n\
    \      s[i] += ('a' - 'A');\n    else if (s[i] >= 'A' && s[i] <= 'Z')\n      s[i]\
    \ += ('A' - 'a');\n  }\n  return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnadbj_fa.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpnadbj_fa.cpp:7:9: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    7 |   string s = string;\n      |         ^~\n      |         ;\n/tmp/tmpnadbj_fa.cpp:8:26:\
    \ error: \u2018s\u2019 was not declared in this scope\n    8 |   for (size_t i\
    \ = 0; i < s.length(); i++) {\n      |                          ^\n/tmp/tmpnadbj_fa.cpp:14:10:\
    \ error: \u2018s\u2019 was not declared in this scope\n   14 |   return s;\n \
    \     |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string temp(string.begin(),\
    \ string.end());\n    std::transform(str.begin(), str.end(), temp.begin(), ::toupper);\n\
    \    std::transform(temp.begin(), temp.end(), temp.begin(), ::tolower);\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppy6l6uq1.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmppy6l6uq1.cpp:7:11: error: expected \u2018;\u2019 before \u2018temp\u2019\
    \n    7 |     string temp(string.begin(), string.end());\n      |           ^~~~~\n\
    \      |           ;\n/tmp/tmppy6l6uq1.cpp:8:20: error: \u2018str\u2019 was not\
    \ declared in this scope; did you mean \u2018std\u2019?\n    8 |     std::transform(str.begin(),\
    \ str.end(), temp.begin(), ::toupper);\n      |                    ^~~\n     \
    \ |                    std\n/tmp/tmppy6l6uq1.cpp:8:44: error: \u2018temp\u2019\
    \ was not declared in this scope\n    8 |     std::transform(str.begin(), str.end(),\
    \ temp.begin(), ::toupper);\n      |                                         \
    \   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string outStr;\n\
    \    for(int i = 0; i < string.length(); ++i) {\n        char c = string[i];\n\
    \        if('A' <= c && c <= 'Z') {\n            outStr += toupper(c);\n     \
    \   } else if('a' <= c && c <= 'z') {\n            outStr += tolower(c);\n   \
    \     } else {\n            outStr += c;\n        }\n    }\n    return outStr;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmplpr0qkwn: /tmp/tmplpr0qkwn.cpp:23: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int length = string.length();\n\
    \  for (int i = 0; i < length; i++) {\n    char character = string[i];\n    if\
    \ (character >= 'a' && character <= 'z')\n      character = (character - 'a')\
    \ + 'A';\n    if (character >= 'A' && character <= 'Z')\n      character = (character\
    \ - 'A') + 'a';\n    string[i] = character;\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpsyukd7an: /tmp/tmpsyukd7an.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (char c : string)\
    \ {\n        if (c >= 'A' && c <= 'Z') {\n            string += c;\n        }\n\
    \        else if (c >= 'a' && c <= 'z') {\n            string += c;\n        }\n\
    \        else if (c >= '0' && c <= '9') {\n            string += c;\n        }\n\
    \        else {\n            string += toupper(c);\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp9_6ai56c: /tmp/tmp9_6ai56c.cpp:26: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string lower = string;\n\
    \  for (int i = 0, size = string.length(); i < size; ++i) {\n    if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n      lower.at(i) = string[i] - 32;\n    }\n\
    \  }\n  return lower;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyyiz16et.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpyyiz16et.cpp:7:9: error: expected \u2018;\u2019 before \u2018lower\u2019\
    \n    7 |   string lower = string;\n      |         ^~~~~~\n      |         ;\n\
    /tmp/tmpyyiz16et.cpp:10:7: error: \u2018lower\u2019 was not declared in this scope;\
    \ did you mean \u2018tolower\u2019?\n   10 |       lower.at(i) = string[i] - 32;\n\
    \      |       ^~~~~\n      |       tolower\n/tmp/tmpyyiz16et.cpp:13:10: error:\
    \ \u2018lower\u2019 was not declared in this scope; did you mean \u2018tolower\u2019\
    ?\n   13 |   return lower;\n      |          ^~~~~\n      |          tolower\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto it = string.begin();\
    \ it != string.end(); ++it)\n    {\n        if (*it == 'A') *it = 'a';\n     \
    \   else if (*it == 'B') *it = 'b';\n        else if (*it == 'C') *it = 'c';\n\
    \        else if (*it == 'D') *it = 'd';\n        else if (*it == 'E') *it = 'e';\n\
    \        else if (*it == 'F') *it = 'f';\n        else if (*it == 'G') *it = 'g';\n\
    \        else if (*it == 'H') *it = 'h';\n        else if (*it == 'I') *it = 'i';\n\
    \        else if (*it == 'J') *it = 'j';\n        else if (*it == 'K') *it = 'k';\n\
    \        else if (*it == 'L') *it = 'l';\n        else if (*it == 'M') *it = 'm';\n\
    \        else if (*it == 'N') *it = 'n';\n        else if (*it == 'O') *it = 'o';\n\
    \        else if (*it == 'P') *it = 'p';\n        else if (*it == 'Q') *it = 'q';\n\
    \        else if (*it == 'R') *it = 'r';\n        else if (*it == 'S') *it = 's';\n\
    \        else if (*it == 'T') *it = 't';\n        else if (*it == 'U') *it = 'u';\n\
    \        else if (*it == 'V') *it = 'v';\n        else if (*it == 'W') *it = 'w';\n\
    \        else if (*it == 'X') *it = 'x';\n        else if (*it == 'Y') *it = 'y';\n\
    \        else if (*it == 'Z') *it = 'z';\n        else if (*it == 'a') *it = 'A';\n\
    \        else if (*it == 'b') *it = 'B';\n        else if (*it == 'c') *it = 'C';\n\
    \        else if (*it == 'd') *it = 'D';\n        else if (*it == 'e') *it = 'E';\n\
    \        else if (*it == 'f') *it = 'F';\n        else if (*it == 'g') *it = 'G';\n\
    \        else if (*it == 'h') *it = 'H';\n        else if (*it == 'i') *it = 'I';\n\
    \        else if (*it == 'j') *it = 'J';\n        else if (*it == 'k') *it = 'K';\n\
    \        else if (*it == 'l') *it = 'L';\n        else if (*it == 'm') *it = 'M';\n\
    \        else if (*it == 'n') *it = 'N';\n        else if (*it == 'o') *it = 'O';\n\
    \        else if (*it == 'p') \n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkkodachc.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpkkodachc.cpp:51:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   51 | }\n      | ^\n/tmp/tmpkkodachc.cpp:52:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   52 | int main() {\n     \
    \ |            ^\n/tmp/tmpkkodachc.cpp:57:1: error: expected \u2018}\u2019 at\
    \ end of input\n   57 | }\n      | ^\n/tmp/tmpkkodachc.cpp:6:43: note: to match\
    \ this \u2018{\u2019\n    6 | std::string flip_case(std::string string) {\n  \
    \    |                                           ^\n/tmp/tmpkkodachc.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Write your code\
    \ here\n  string s = string;\n  for (int i = 0; i < s.length(); ++i) {\n    if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = s[i] - 32;\n    } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      s[i] = s[i] + 32;\n    }\n  }\n  return s;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfzsdlw2d.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpfzsdlw2d.cpp:8:9: error: expected \u2018;\u2019 before \u2018s\u2019\
    \n    8 |   string s = string;\n      |         ^~\n      |         ;\n/tmp/tmpfzsdlw2d.cpp:9:23:\
    \ error: \u2018s\u2019 was not declared in this scope\n    9 |   for (int i =\
    \ 0; i < s.length(); ++i) {\n      |                       ^\n/tmp/tmpfzsdlw2d.cpp:16:10:\
    \ error: \u2018s\u2019 was not declared in this scope\n   16 |   return s;\n \
    \     |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Your code here\n\
    \  return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpzbign9v0: /tmp/tmpzbign9v0.cpp:13: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &i : string)\n\
    \    if (islower(i)) i = toupper(i);\n  return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpib3to2f7: /tmp/tmpib3to2f7.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::replace_if(string.begin(),\
    \ string.end(), [](char c) { return c == 'a'; }, [](char c) { return c != 'A';\
    \ });\n  std::replace_if(string.begin(), string.end(), [](char c) { return c ==\
    \ 'A'; }, [](char c) { return c != 'a'; });\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0sxb3bp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018void std::replace_if(_FIter, _FIter, _Predicate, const\
    \ _Tp&) [with _FIter = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = flip_case(std::string)::<lambda(char)>; _Tp = flip_case(std::string)::<lambda(char)>]\u2019\
    :\n/tmp/tmpo0sxb3bp.cpp:7:113:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4402:13:\
    \ error: invalid user-defined conversion from \u2018const flip_case(std::string)::<lambda(char)>\u2019\
    \ to \u2018char\u2019 [-fpermissive]\n 4402 |    *__first = __new_value;\n   \
    \   |    ~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpo0sxb3bp.cpp:7:82: note: candidate is:\
    \ \u2018flip_case(std::string)::<lambda(char)>::operator bool (*)(char)() const\u2019\
    \ <near match>\n    7 |   std::replace_if(string.begin(), string.end(), [](char\
    \ c) { return c == 'a'; }, [](char c) { return c != 'A'; });\n      |        \
    \                                                                          ^\n\
    /tmp/tmpo0sxb3bp.cpp:7:82: note:   no known conversion from \u2018bool (*)(char)\u2019\
    \ to \u2018char\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo0sxb3bp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018void std::replace_if(_FIter, _FIter, _Predicate, const\
    \ _Tp&) [with _FIter = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = flip_case(std::string)::<lambda(char)>; _Tp = flip_case(std::string)::<lambda(char)>]\u2019\
    :\n/tmp/tmpo0sxb3bp.cpp:8:113:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4402:13:\
    \ error:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto &ch : string) {\n        switch (ch) {\n        case 'a':\n   \
    \         result = 'A';\n            break;\n        case 'b':\n            result\
    \ = 'B';\n            break;\n        case 'c':\n            result = 'C';\n \
    \           break;\n        case 'd':\n            result = 'D';\n           \
    \ break;\n        case 'e':\n            result = 'E';\n            break;\n \
    \       case 'f':\n            result = 'F';\n            break;\n        case\
    \ 'g':\n            result = 'G';\n            break;\n        case 'h':\n   \
    \         result = 'H';\n            break;\n        case 'i':\n            result\
    \ = 'I';\n            break;\n        case 'j':\n            result = 'J';\n \
    \           break;\n        case 'k':\n            result = 'K';\n           \
    \ break;\n        case 'l':\n            result = 'L';\n            break;\n \
    \       case 'm':\n            result = 'M';\n            break;\n        case\
    \ 'n':\n            result = 'N';\n            break;\n        case 'o':\n   \
    \         result = 'O';\n            break;\n        case 'p':\n            result\
    \ = 'P';\n            break;\n        case 'q':\n            result = 'Q';\n \
    \           break;\n        case 'r':\n            result = 'R';\n           \
    \ break;\n        case 's':\n            result = 'S';\n            break;\n \
    \       case 't':\n            result = 'T';\n            break;\n        case\
    \ 'u':\n            result = 'U';\n            break;\n        case 'v':\n   \
    \         result = 'V';\n            break;\n        case 'w':\n            result\
    \ = 'W';\n            break;\n        case 'x':\n            result = 'X';\n \
    \           break;\n        case 'y':\n            result = 'Y';\n           \
    \ break;\n        case 'z':\n            result = 'Z';\n            break;\n \
    \       default:\n            result = ch;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmphxry4vng: /tmp/tmphxry4vng.cpp:97: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] + 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] - 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpo9i5xp7k: /tmp/tmpo9i5xp7k.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string result = string;\n\
    \  for (size_t i = 0; i < result.size(); i++) {\n    if (result[i] >= 'a' && result[i]\
    \ <= 'z') {\n      result[i] = result[i] - 32;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp311lc58g.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp311lc58g.cpp:7:9: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n    7 |   string result = string;\n      |         ^~~~~~~\n      |        \
    \ ;\n/tmp/tmp311lc58g.cpp:8:26: error: \u2018result\u2019 was not declared in\
    \ this scope\n    8 |   for (size_t i = 0; i < result.size(); i++) {\n      |\
    \                          ^~~~~~\n/tmp/tmp311lc58g.cpp:13:10: error: \u2018result\u2019\
    \ was not declared in this scope\n   13 |   return result;\n      |          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    size_t len = string.length();\n\
    \    for (size_t i = 0; i < len; i++) {\n        if (string[i] == 'a')\n     \
    \       string[i] = 'A';\n        else if (string[i] == 'A')\n            string[i]\
    \ = 'a';\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpr14x8q2i: /tmp/tmpr14x8q2i.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &char :\
    \ string) {\n        if (char >= 'a' && char <= 'z') {\n            char &newChar\
    \ = char - 'a' + 'A';\n            newChar = toupper(newChar);\n            newChar\
    \ = tolower(newChar);\n            string += newChar;\n        } else {\n    \
    \        string += char;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcg94lpow.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpcg94lpow.cpp:7:16: error: expected unqualified-id before \u2018char\u2019\
    \n    7 |     for (auto &char : string) {\n      |                ^~~~\n/tmp/tmpcg94lpow.cpp:7:16:\
    \ error: expected \u2018;\u2019 before \u2018char\u2019\n    7 |     for (auto\
    \ &char : string) {\n      |                ^~~~\n      |                ;\n/tmp/tmpcg94lpow.cpp:7:21:\
    \ error: expected unqualified-id before \u2018:\u2019 token\n    7 |     for (auto\
    \ &char : string) {\n      |                     ^\n/tmp/tmpcg94lpow.cpp:7:29:\
    \ error: expected \u2018;\u2019 before \u2018)\u2019 token\n    7 |     for (auto\
    \ &char : string) {\n      |                             ^\n      |          \
    \                   ;\n/tmp/tmpcg94lpow.cpp:8:18: error: expected unqualified-id\
    \ before \u2018>=\u2019 token\n    8 |         if (char >= 'a' && char <= 'z')\
    \ {\n      |                  ^~\n/tmp/tmpcg94lpow.cpp:9:29: error: expected primary-expression\
    \ before \u2018char\u2019\n    9 |             char &newChar = char - 'a' + 'A';\n\
    \      |                             ^~~~\n/tmp/tmpcg94lpow.cpp:14:23: error:\
    \ expected primary-expression before \u2018char\u2019\n   14 |             string\
    \ += char;\n      |                       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string out(string.size(),\
    \ ' ');\n  for (int i = 0; i < string.size(); i++)\n    out[i] = string[i] ^ ('a'-'A');\n\
    \  return out;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5cw9prie.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp5cw9prie.cpp:7:9: error: expected \u2018;\u2019 before \u2018out\u2019\
    \n    7 |   string out(string.size(), ' ');\n      |         ^~~~\n      |   \
    \      ;\n/tmp/tmp5cw9prie.cpp:9:5: error: \u2018out\u2019 was not declared in\
    \ this scope\n    9 |     out[i] = string[i] ^ ('a'-'A');\n      |     ^~~\n/tmp/tmp5cw9prie.cpp:10:10:\
    \ error: \u2018out\u2019 was not declared in this scope\n   10 |   return out;\n\
    \      |          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string out;\n  for\
    \ (int i = 0; i < string.size(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n      out += string[i] - 'a' + 'A';\n    else if (string[i] >= 'A'\
    \ && string[i] <= 'Z')\n      out += string[i] - 'A' + 'a';\n    else\n      out\
    \ += string[i];\n  }\n  return out;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3m4lkapc.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp3m4lkapc.cpp:7:9: error: expected \u2018;\u2019 before \u2018out\u2019\
    \n    7 |   string out;\n      |         ^~~~\n      |         ;\n/tmp/tmp3m4lkapc.cpp:10:7:\
    \ error: \u2018out\u2019 was not declared in this scope\n   10 |       out +=\
    \ string[i] - 'a' + 'A';\n      |       ^~~\n/tmp/tmp3m4lkapc.cpp:12:7: error:\
    \ \u2018out\u2019 was not declared in this scope\n   12 |       out += string[i]\
    \ - 'A' + 'a';\n      |       ^~~\n/tmp/tmp3m4lkapc.cpp:14:7: error: \u2018out\u2019\
    \ was not declared in this scope\n   14 |       out += string[i];\n      |   \
    \    ^~~\n/tmp/tmp3m4lkapc.cpp:16:10: error: \u2018out\u2019 was not declared\
    \ in this scope\n   16 |   return out;\n      |          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string newString;\n\
    \    std::transform(string.begin(), string.end(), newString.begin(), [](unsigned\
    \ char c){\n        return isupper(c) ? tolower(c) : toupper(c);\n    });\n  \
    \  return newString;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpq7117s3n: /tmp/tmpq7117s3n.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Iterate through\
    \ every character in string\n    for(auto &c : string) {\n        // If character\
    \ is uppercase\n        if(std::toupper(c) != c) {\n            // Uppercase it\n\
    \            c = std::toupper(c);\n            // Lowercase it if it is uppercase\n\
    \            if(std::tolower(c) != c) {\n                c = std::tolower(c);\n\
    \            }\n        }\n    }\n    // Return string\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpx4qrullq: /tmp/tmpx4qrullq.cpp:25: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] + 'A' - 'a';\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 'a' - 'A';\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp7omz8ccu: /tmp/tmp7omz8ccu.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (::islower(c)) {\n            c = ::toupper(c);\n        } else\
    \ if (::isupper(c)) {\n            c = ::tolower(c);\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // your code goes\
    \ here\n    // Complete the flip case function here.\n    \n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpij2yywoq: /tmp/tmpij2yywoq.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] + 32;\n    }\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] - 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp43chms5j: /tmp/tmp43chms5j.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = string;\n\
    \    for (std::string::iterator it = s.begin(); it < s.end(); it++) {\n      \
    \  if (*it == std::tolower(*it)) {\n            *it = std::toupper(*it);\n   \
    \     }\n        if (*it == std::toupper(*it)) {\n            *it = std::tolower(*it);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp_bcv6okd: /tmp/tmp_bcv6okd.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    int pos = 0;\n    while (pos < string.length()) {\n        char ch = string[pos];\n\
    \        if (islower(ch)) {\n            result += toupper(ch);\n            pos++;\n\
    \        } else {\n            result += ch;\n            pos++;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpm8rdijjr: /tmp/tmpm8rdijjr.cpp:24: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (std::size_t\
    \ i = 0; i < string.size(); ++i) {\n        if (islower(string[i]) && string[i]\
    \ != toupper(string[i])) {\n            string[i] = toupper(string[i]);\n    \
    \    }\n        else if (string[i] != tolower(string[i])) {\n            string[i]\
    \ = tolower(string[i]);\n        }\n    }\n    return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string flipped_string(string.size(),\
    \ '\\0');\n    for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n            flipped_string[i] = toupper(string[i]);\n\
    \        else if (string[i] >= 'A' && string[i] <= 'Z')\n            flipped_string[i]\
    \ = tolower(string[i]);\n    }\n    return flipped_string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmplhgkffs3: /tmp/tmplhgkffs3.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (size_t i = 0;\
    \ i < string.length(); ++i) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n\
    \      string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string newstring;\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            newstring += string[i] - 'a' + 'A';\n  \
    \      } else {\n            newstring += string[i];\n        }\n    }\n    return\
    \ newstring;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpn4_w2x2r: /tmp/tmpn4_w2x2r.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Write your code\
    \ here.\n    int size = 0;\n    for(int i = 0; i < string.length(); i++){\n  \
    \      if(string[i] >= 'A' && string[i] <= 'Z'){\n            string[i] = 'A'\
    \ + string[i] - 'A';\n            string[size] = string[i] - 'A' + 'a';\n    \
    \        size++;\n        }\n    }\n    string += string[size - 1];\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpl5uunmfb: /tmp/tmpl5uunmfb.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if ((string[i] >= 'a' && string[i] <= 'z') || (string[i]\
    \ >= 'A' && string[i] <= 'Z')) {\n      string[i] = toupper(string[i]);\n    }\n\
    \  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmplexet777: /tmp/tmplexet777.cpp:17: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::swap(string[0],\
    \ string[0]);\n  std::swap(string[1], string[1]);\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpkspoy1mc: /tmp/tmpkspoy1mc.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Check for empty\
    \ string\n  if(string.empty()){\n    return string;\n  }\n  // Iterate over each\
    \ character of the string\n  for(auto &c : string){\n    // If c is a lowercase\
    \ letter, convert it to uppercase\n    if(islower(c)){\n      c = toupper(c);\n\
    \    }\n    // If c is an uppercase letter, convert it to lowercase\n    if(isupper(c)){\n\
    \      c = tolower(c);\n    }\n  }\n  // Return flipped string\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpxauqb9go: /tmp/tmpxauqb9go.cpp:28: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string res =\
    \ \"\";\n    char ch;\n    for (int i = 0; i < string.length(); i++) {\n     \
    \   ch = string[i];\n        if (isupper(ch))\n            res += tolower(ch);\n\
    \        else\n            res += ch;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp476xw5ow: /tmp/tmp476xw5ow.cpp:21: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (size_t i = 0;\
    \ i < string.length(); ++i) {\n    if (string[i] >= 'A' && string[i] <= 'Z') {\n\
    \      string[i] = string[i] - 32;\n    }\n    else if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp2mcym_h6: /tmp/tmp2mcym_h6.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result=\"\
    \";\n    for(const char &c:string) {\n        if(std::isupper(c))\n          \
    \  result += std::tolower(c);\n        else result += std::toupper(c);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string flip = string;\n\
    \  for (int i = 0; i < flip.size(); i++) {\n    if (flip[i] >= 'a' && flip[i]\
    \ <= 'z') {\n      flip[i] = flip[i] + 'A' - 'a';\n    } else if (flip[i] >= 'A'\
    \ && flip[i] <= 'Z') {\n      flip[i] = flip[i] + 'a' - 'A';\n    }\n  }\n  return\
    \ flip;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1hjfktvs.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp1hjfktvs.cpp:7:9: error: expected \u2018;\u2019 before \u2018flip\u2019\
    \n    7 |   string flip = string;\n      |         ^~~~~\n      |         ;\n\
    /tmp/tmp1hjfktvs.cpp:8:23: error: \u2018flip\u2019 was not declared in this scope\n\
    \    8 |   for (int i = 0; i < flip.size(); i++) {\n      |                  \
    \     ^~~~\n/tmp/tmp1hjfktvs.cpp:15:10: error: \u2018flip\u2019 was not declared\
    \ in this scope\n   15 |   return flip;\n      |          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto c : string)\
    \ {\n        if (('A' <= c && c <= 'Z')) c += 'a' - 'A';\n        else if (('a'\
    \ <= c && c <= 'z')) c += 'A' - 'a';\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpa3rav_2f: /tmp/tmpa3rav_2f.cpp:16: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    size_t i, j, k;\n\
    \    for (k = 0, i = 0; i < string.length(); i++) {\n        j = (int)string[i];\n\
    \        if (j >= 'a' && j <= 'z')\n            string[k++] = string[i];\n   \
    \     else if (j >= 'A' && j <= 'Z')\n            string[k++] = string[i];\n \
    \       else\n            string[k++] = toupper((int)string[i]);\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpjnzh62ni: /tmp/tmpjnzh62ni.cpp:22: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (size_t i = 0;\
    \ i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n\
    \      string[i] = string[i] - 32;\n    }\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &c : string)\
    \ {\n        if (c >= 'A' && c <= 'Z') {\n            c += 'a' - 'A';\n      \
    \  }\n        else if (c >= 'a' && c <= 'z') {\n            c += 'A' - 'a';\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    }\n    if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpvh0_x069: /tmp/tmpvh0_x069.cpp:20: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string lower(string);\n\
    \  for (int i = 0; i < string.length(); i++) {\n    char ch = string[i];\n   \
    \ if (ch >= 'a' && ch <= 'z') {\n      string[i] = ch - 'a' + 'A';\n    }\n  }\n\
    \  return lower;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwz2gr_0t.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpwz2gr_0t.cpp:7:9: error: expected \u2018;\u2019 before \u2018lower\u2019\
    \n    7 |   string lower(string);\n      |         ^~~~~~\n      |         ;\n\
    /tmp/tmpwz2gr_0t.cpp:14:10: error: \u2018lower\u2019 was not declared in this\
    \ scope; did you mean \u2018tolower\u2019?\n   14 |   return lower;\n      | \
    \         ^~~~~\n      |          tolower\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string new_string\
    \ = \"\";\n  for (auto character : string) {\n    if (character == 'a' || character\
    \ == 'A') {\n      new_string += 'A';\n    } else if (character == 'b' || character\
    \ == 'B') {\n      new_string += 'B';\n    } else if (character == 'c' || character\
    \ == 'C') {\n      new_string += 'C';\n    } else if (character == 'd' || character\
    \ == 'D') {\n      new_string += 'D';\n    } else if (character == 'e' || character\
    \ == 'E') {\n      new_string += 'E';\n    } else if (character == 'f' || character\
    \ == 'F') {\n      new_string += 'F';\n    } else if (character == 'g' || character\
    \ == 'G') {\n      new_string += 'G';\n    } else if (character == 'h' || character\
    \ == 'H') {\n      new_string += 'H';\n    } else if (character == 'i' || character\
    \ == 'I') {\n      new_string += 'I';\n    } else if (character == 'j' || character\
    \ == 'J') {\n      new_string += 'J';\n    } else if (character == 'k' || character\
    \ == 'K') {\n      new_string += 'K';\n    } else if (character == 'l' || character\
    \ == 'L') {\n      new_string += 'L';\n    } else if (character == 'm' || character\
    \ == 'M') {\n      new_string += 'M';\n    } else if (character == 'n' || character\
    \ == 'N') {\n      new_string += 'N';\n    } else if (character == 'o' || character\
    \ == 'O') {\n      new_string += 'O';\n    } else if (character == 'p' || character\
    \ == 'P') {\n      new_string += 'P';\n    } else if (character == 'q' || character\
    \ == 'Q') {\n      new_string += 'Q';\n    } else if (character == 'r' || character\
    \ == 'R') {\n      new_string += 'R';\n    } else if (character == 's' || character\
    \ == 'S') {\n      new_string += 'S';\n    } else if (character == 't' || character\
    \ == 'T') {\n      new_string += 'T';\n    } else if (character == 'u' || character\
    \ == 'U') {\n      new_string += 'U';\n    } else if (character == 'v' || character\
    \ == 'V') {\n      new_string += 'V';\n    } else if (character == 'w' || character\
    \ == 'W') {\n      new_string += 'W';\n    } else if (character == 'x' || character\
    \ == 'X') {\n      new_string += 'X';\n    } else if (character == 'y' || character\
    \ == 'Y') {\n      new_string += 'Y';\n    } else if (character == 'z' || character\
    \ == 'Z') {\n      new_string += 'Z';\n    } else if (character == 'A' || character\
    \ == 'a') {\n      new_string += 'a';\n    } else if (character == 'B' || character\
    \ == 'b') {\n      new_string += 'b';\n    } else if (character == 'C' || character\
    \ == 'c') {\n      new_string += 'c';\n    } else if (character == 'D' || character\
    \ == '\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpszehucch.cpp:67:49: warning: missing terminating ' character\n\
    \   67 |     } else if (character == 'D' || character == '\n      |          \
    \                                       ^\n/tmp/tmpszehucch.cpp:67:49: error:\
    \ missing terminating ' character\n/tmp/tmpszehucch.cpp: In function \u2018std::string\
    \ flip_case(std::string)\u2019:\n/tmp/tmpszehucch.cpp:68:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   68 | }\n      | ^\n/tmp/tmpszehucch.cpp:67:48:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   67 |     } else\
    \ if (character == 'D' || character == '\n      |               ~            \
    \                    ^\n      |                                              \
    \  )\n   68 | }\n      | ~                                               \n/tmp/tmpszehucch.cpp:68:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   68 | }\n \
    \     | ^\n/tmp/tmpszehucch.cpp:69:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   69 | int main() {\n      |            ^\n\
    /tmp/tmpszehucch.cpp:74:1: error: expected \u2018}\u2019 at end of input\n   74\
    \ | }\n      | ^\n/tmp/tmpszehucch.cpp:6:43: note: to match this \u2018{\u2019\
    \n    6 | std::string flip_case(std::string string) {\n      |               \
    \                            ^\n/tmp/tmpszehucch.cpp:74:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   74 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string res;\n\
    \    for(int i=0; i<string.size(); ++i) {\n        char c = string[i];\n     \
    \   if(c>='a' && c<='z') c+=32;\n        else if(c>='A' && c<='Z') c+=32;\n  \
    \      res.push_back(c);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpxaw4ce0d: /tmp/tmpxaw4ce0d.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto i = 0; i\
    \ < string.size(); i++) {\n    auto c = string[i];\n    string[i] = c ^ ('A' ^\
    \ ('A' ^ c));\n    string[i] = c ^ ('A' ^ c);\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpw_67ibhm: /tmp/tmpw_67ibhm.cpp:17: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string newString;\n\
    \  newString.reserve(string.length());\n  for (int i = 0; i < string.length();\
    \ i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      newString.append(toupper(string[i]));\n\
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n      newString.append(tolower(string[i]));\n\
    \    }\n  }\n  return newString;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwvkr6dy.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpfwvkr6dy.cpp:11:42: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(int)\u2019\n   11 |       newString.append(toupper(string[i]));\n\
    \      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfwvkr6dy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1263 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpfwvkr6dy.cpp:11:31:\
    \ error: invalid conversion from \u2018int\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   11 |       newString.append(toupper(string[i]));\n      |                \
    \        ~~~~~~~^~~~~~~~~~~\n      |                               |\n      |\
    \                               int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Write your code\
    \ here.\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpfkatt_cx: /tmp/tmpfkatt_cx.cpp:12: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string out(string);\n\
    \    std::transform(out.begin(), out.end(), out.begin(), ::toupper);\n    std::transform(out.begin(),\
    \ out.end(), out.begin(), ::tolower);\n    return out;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp_2lv9aid: /tmp/tmp_2lv9aid.cpp:15: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n            result.append((string[i] + 'A' - 'a'));\n\
    \        } else if (string[i] >= 'a' && string[i] <= 'z') {\n            result.append((string[i]\
    \ + 'a' - 'A'));\n        } else {\n            result.push_back(string[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpepz_l5yv.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpepz_l5yv.cpp:7:11: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n    7 |     string result;\n      |           ^~~~~~~\n      |           ;\n\
    /tmp/tmpepz_l5yv.cpp:10:13: error: \u2018result\u2019 was not declared in this\
    \ scope\n   10 |             result.append((string[i] + 'A' - 'a'));\n      |\
    \             ^~~~~~\n/tmp/tmpepz_l5yv.cpp:12:13: error: \u2018result\u2019 was\
    \ not declared in this scope\n   12 |             result.append((string[i] + 'a'\
    \ - 'A'));\n      |             ^~~~~~\n/tmp/tmpepz_l5yv.cpp:14:13: error: \u2018\
    result\u2019 was not declared in this scope\n   14 |             result.push_back(string[i]);\n\
    \      |             ^~~~~~\n/tmp/tmpepz_l5yv.cpp:17:12: error: \u2018result\u2019\
    \ was not declared in this scope\n   17 |     return result;\n      |        \
    \    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n   std::string result\
    \ = \"\";\n   for (char &c : string) {\n      c = toupper(c);\n      if (islower(c))\n\
    \         c = tolower(c);\n      result += c;\n   }\n   return result;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp692h9l6r: /tmp/tmp692h9l6r.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string output;\n\
    \    output.reserve(string.size());\n    for (char c : string) {\n        switch\
    \ (c) {\n        case 'a':\n            output.append(\"A\");\n            break;\n\
    \        case 'b':\n            output.append(\"B\");\n            break;\n  \
    \      case 'c':\n            output.append(\"C\");\n            break;\n    \
    \    case 'd':\n            output.append(\"D\");\n            break;\n      \
    \  case 'e':\n            output.append(\"E\");\n            break;\n        case\
    \ 'f':\n            output.append(\"F\");\n            break;\n        case 'g':\n\
    \            output.append(\"G\");\n            break;\n        case 'h':\n  \
    \          output.append(\"H\");\n            break;\n        case 'i':\n    \
    \        output.append(\"I\");\n            break;\n        case 'j':\n      \
    \      output.append(\"J\");\n            break;\n        case 'k':\n        \
    \    output.append(\"K\");\n            break;\n        case 'l':\n          \
    \  output.append(\"L\");\n            break;\n        case 'm':\n            output.append(\"\
    M\");\n            break;\n        case 'n':\n            output.append(\"N\"\
    );\n            break;\n        case 'o':\n            output.append(\"O\");\n\
    \            break;\n        case 'p':\n            output.append(\"P\");\n  \
    \          break;\n        case 'q':\n            output.append(\"Q\");\n    \
    \        break;\n        case 'r':\n            output.append(\"R\");\n      \
    \      break;\n        case 's':\n            output.append(\"S\");\n        \
    \    break;\n        case 't':\n            output.append(\"T\");\n          \
    \  break;\n        case 'u':\n            output.append(\"U\");\n            break;\n\
    \        case 'v':\n            output.append(\"V\");\n            break;\n  \
    \      case 'w':\n            output.append(\"W\");\n            break;\n    \
    \    case 'x':\n            output.append(\"X\");\n            break;\n      \
    \  case 'y':\n            output.append(\"Y\");\n            break;\n        case\
    \ 'z':\n            output.append(\"Z\");\n            break;\n        default:\n\
    \            output.push_back(c);\n        }\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp34atx7n6: /tmp/tmp34atx7n6.cpp:98: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto &ch : string)\
    \ ch = std::toupper(ch);\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpk75e00ge: /tmp/tmpk75e00ge.cpp:13: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (size_t i = 0;\
    \ i < string.length(); i++) {\n        if (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n            string[i] = string[i] + 'A' - 'a';\n        } else {\n      \
    \      string[i] = string[i] + 'a' - 'A';\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmp6xki5fln: /tmp/tmp6xki5fln.cpp:19: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpo6dfkzxw: /tmp/tmpo6dfkzxw.cpp:14: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.size(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n   \
    \   string[i] ^= 32;\n    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n\
    \      string[i] ^= 32;\n    }\n  }\n  return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for (auto c: string)\
    \ {\n        if (c == char('a'))\n            string.replace(c, char('A'));\n\
    \        else if (c == char('A'))\n            string.replace(c, char('a'));\n\
    \        else if (c == char('0'))\n            string.replace(c, char('9'));\n\
    \        else if (c == char('9'))\n            string.replace(c, char('0'));\n\
    \        else if (c == char('z'))\n            string.replace(c, char('Z'));\n\
    \        else if (c == char('Z'))\n            string.replace(c, char('z'));\n\
    \        else if (c == char(' '))\n            string.replace(c, char(''));\n\
    \        else if (c == char('\\t'))\n            string.replace(c, char(''));\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgt2h7zpa.cpp:21:36: error: empty character constant\n   21 |  \
    \           string.replace(c, char(''));\n      |                            \
    \        ^~\n/tmp/tmpgt2h7zpa.cpp:23:36: error: empty character constant\n   23\
    \ |             string.replace(c, char(''));\n      |                        \
    \            ^~\n/tmp/tmpgt2h7zpa.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpgt2h7zpa.cpp:9:40: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(char&,\
    \ char)\u2019\n    9 |             string.replace(c, char('A'));\n      |    \
    \                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgt2h7zpa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1889:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1889 | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(auto &character\
    \ : string)\n        if(character >= 'A' && character <= 'Z')\n            character\
    \ = (character - 'A') + 'a';\n        else\n            character = (character\
    \ - 'a') + 'A';\n\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "tmpoef7qie8: /tmp/tmpoef7qie8.cpp:18: int main(): Assertion `candidate((\"\
    Hello!\")) == (\"hELLO!\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  string flipped_string;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n      flipped_string += string[i] - 'a' + 'A';\n    } else if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n      flipped_string += string[i] - 'A' + 'a';\n\
    \    } else {\n      flipped_string += string[i];\n    }\n  }\n  return flipped_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_ih6d8wa.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp_ih6d8wa.cpp:7:9: error: expected \u2018;\u2019 before \u2018flipped_string\u2019\
    \n    7 |   string flipped_string;\n      |         ^~~~~~~~~~~~~~~\n      | \
    \        ;\n/tmp/tmp_ih6d8wa.cpp:10:7: error: \u2018flipped_string\u2019 was not\
    \ declared in this scope\n   10 |       flipped_string += string[i] - 'a' + 'A';\n\
    \      |       ^~~~~~~~~~~~~~\n/tmp/tmp_ih6d8wa.cpp:12:7: error: \u2018flipped_string\u2019\
    \ was not declared in this scope\n   12 |       flipped_string += string[i] -\
    \ 'A' + 'a';\n      |       ^~~~~~~~~~~~~~\n/tmp/tmp_ih6d8wa.cpp:14:7: error:\
    \ \u2018flipped_string\u2019 was not declared in this scope\n   14 |       flipped_string\
    \ += string[i];\n      |       ^~~~~~~~~~~~~~\n/tmp/tmp_ih6d8wa.cpp:17:10: error:\
    \ \u2018flipped_string\u2019 was not declared in this scope\n   17 |   return\
    \ flipped_string;\n      |          ^~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
