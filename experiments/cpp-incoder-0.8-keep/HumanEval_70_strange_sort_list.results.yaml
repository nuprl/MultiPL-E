name: HumanEval_70_strange_sort_list
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long smallest = *std::min_element(lst.begin(), lst.end());\n    long\
    \ largest = *std::max_element(lst.begin(), lst.end());\n    for (long i : lst)\
    \ {\n        if (i < smallest) continue;\n        if (i > largest) break;\n  \
    \      res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp94q44etq: /tmp/tmp94q44etq.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfwuup3dl: /tmp/tmpfwuup3dl.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // sort\
    \ elements using insertion sort\n    for (long i = 0, end = lst.size(); i < end;\
    \ i++) {\n        long smallest = i;\n        for (long j = i + 1; j < end; j++)\
    \ {\n            if (lst[j] < lst[smallest]) {\n                smallest = j;\n\
    \            }\n        }\n        std::vector<long> tmp;\n        tmp.reserve(lst.size());\n\
    \        for (long j = 0; j < smallest; j++) {\n            tmp.push_back(lst[j]);\n\
    \        }\n        std::vector<long> tmp = tmp;\n        for (long j = 0; j <\
    \ i; j++) {\n            tmp.push_back(lst[j]);\n        }\n        tmp.push_back(lst[i]);\n\
    \        std::swap(tmp.back(), lst[i]);\n    }\n    // sort again using selection\
    \ sort\n    for (long i = 0, end = lst.size(); i < end; i++) {\n        long smallest\
    \ = i;\n        for (long j = i + 1; j < end; j++) {\n            if (lst[j] >\
    \ lst[smallest]) {\n                smallest = j;\n            }\n        }\n\
    \        std::vector<long> tmp;\n        tmp.reserve(lst.size());\n        for\
    \ (long j = i; j < smallest; j++) {\n            tmp.push_back(lst[j]);\n    \
    \    }\n        std::vector<long> tmp = tmp;\n        for (long j = i; j < end;\
    \ j++) {\n            tmp.push_back(lst[j]);\n        }\n        tmp.push_back(lst[i]);\n\
    \        std::swap(tmp.back(), lst[i]);\n    }\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphnxl102c.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphnxl102c.cpp:24:27: error: redeclaration of \u2018std::vector<long\
    \ int> tmp\u2019\n   24 |         std::vector<long> tmp = tmp;\n      |      \
    \                     ^~~\n/tmp/tmphnxl102c.cpp:19:27: note: \u2018std::vector<long\
    \ int> tmp\u2019 previously declared here\n   19 |         std::vector<long> tmp;\n\
    \      |                           ^~~\n/tmp/tmphnxl102c.cpp:44:27: error: redeclaration\
    \ of \u2018std::vector<long int> tmp\u2019\n   44 |         std::vector<long>\
    \ tmp = tmp;\n      |                           ^~~\n/tmp/tmphnxl102c.cpp:39:27:\
    \ note: \u2018std::vector<long int> tmp\u2019 previously declared here\n   39\
    \ |         std::vector<long> tmp;\n      |                           ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    std::vector<long> ret;\n    long minElem = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxElem = *std::max_element(lst.begin(), lst.end());\n\
    \    long curMaxElem = maxElem;\n    long nextMaxElem = maxElem;\n\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] == maxElem) {\n          \
    \  maxElem = lst[i];\n            if (i == lst.size() - 1)\n                ret.resize(0);\n\
    \        }\n        else if (lst[i] == maxElem + 1) {\n            maxElem = lst[i\
    \ + 1];\n            ret.resize(i + 1);\n        }\n        else if (lst[i] ==\
    \ minElem) {\n            nextMaxElem = lst[i];\n        }\n        else if (lst[i]\
    \ == minElem + 1) {\n            nextMaxElem = lst[i + 1];\n        }\n      \
    \  else if (lst[i] == maxElem - 1) {\n            maxElem = nextMaxElem;\n   \
    \     }\n        else if (lst[i] == nextMaxElem + 1) {\n            nextMaxElem\
    \ = lst[i];\n        }\n        else {\n            maxElem = nextMaxElem;\n \
    \           ret.resize(i + 1);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc4ifoqcq: /tmp/tmpc4ifoqcq.cpp:49: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // We\
    \ will store the result here.\n    std::vector<long> ret;\n\n    // If list is\
    \ empty, empty the result.\n    if (lst.size() == 0) return ret;\n    std::cout\
    \ << \"Before sort list: \" << lst << std::endl;\n\n    // Get the first number\
    \ from the list.\n    long first = lst[0];\n\n    // Get the number of elements\
    \ in the list.\n    // We will use it to determine the size of the result array.\n\
    \    size_t num_elements = lst.size();\n\n    // Create a temporary array and\
    \ copy all elements into it.\n    std::vector<long> tmp = lst;\n\n    // Sort\
    \ the temporary array.\n    sort(tmp.begin(), tmp.end());\n\n    // Add the first\
    \ element in the temporary array to the result.\n    ret.push_back(first);\n\n\
    \    // Loop over remaining elements.\n    for (size_t i = 1; i < num_elements;\
    \ i++) {\n        // If the current element is less than the element before it,\n\
    \        // then swap it with the element before it.\n        if (tmp[i] < tmp[i\
    \ - 1]) {\n            // Swap.\n            long tmp = tmp[i];\n            tmp[i]\
    \ = tmp[i - 1];\n            tmp[i - 1] = tmp;\n        }\n    }\n\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp53rw_qs_.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp53rw_qs_.cpp:16:39: error: no match for \u2018operator<<\u2019\
    \ (operand types are \u2018std::basic_ostream<char>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   16 |     std::cout << \"Before sort list: \" << lst << std::endl;\n\
    \      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~\n      |               |\
    \                          |\n      |               std::basic_ostream<char> \
    \  std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp53rw_qs_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:117:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT,"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0)\n        return lst;\n    // Initialize min and max values.\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (auto x : lst) {\n        if\
    \ (x < min)\n            min = x;\n        else if (x > max)\n            max\
    \ = x;\n    }\n    std::vector<long> result;\n    for (auto x : lst) {\n     \
    \   if (x < min)\n            result.push_back(min);\n        else if (x > max)\n\
    \            result.push_back(max);\n        else\n            result.push_back(x);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi3frj90b: /tmp/tmpi3frj90b.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Write\
    \ your code here\n  assert(lst.size() != 0 && \"List can't be empty.\");\n  std::stack<long>\
    \ st;\n  long minimum = lst[0];\n  long maximum = lst[0];\n  for (auto val : lst)\
    \ {\n    if (val < minimum) minimum = val;\n    if (val > maximum) maximum = val;\n\
    \    st.push(val);\n  }\n  std::vector<long> result;\n  while (st.top()) {\n \
    \   result.push_back(st.top());\n    st.pop();\n  }\n  assert(!st.empty() && \"\
    No elements found for sorting.\");\n  result.push_back(minimum);\n  result.push_back(maximum);\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst)\n        res.push_back(i);\n\
    \    std::sort(res.begin(), res.end(), [](long i1, long i2) { return i1 > i2;\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_d30vcqh: /tmp/tmp_d30vcqh.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long min\
    \ = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    std::vector<long> returnLst;\n    std::swap(min, max);\n  \
    \  for (long i : lst) {\n        if (i > max) {\n            returnLst.push_back(i);\n\
    \            std::swap(max, i);\n        } else if (i < min) {\n            returnLst.push_back(i);\n\
    \            std::swap(min, i);\n        } else {\n            continue;\n   \
    \     }\n    }\n    return returnLst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyym3dsdg: /tmp/tmpyym3dsdg.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\
    \ return std::vector<long>();\n    std::vector<long> res(lst);\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiul9caee: /tmp/tmpiul9caee.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.resize(std::max(lst.begin(), lst.end()) + 1);\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (auto x: lst) {\n        if (x < min)\
    \ min = x;\n        if (x > max) max = x;\n    }\n    for (int i = 0; i < res.size();\
    \ i++) {\n        if (i == max) res[i] = min;\n        else res[i] = max;\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpg0y8jcg3.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg0y8jcg3.cpp:12:52: error: no matching function for call\
    \ to \u2018std::vector<long int>::resize(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >)\u2019\n   12 |     res.resize(std::max(lst.begin(),\
    \ lst.end()) + 1);\n      |                                                  \
    \  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg0y8jcg3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:934:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::resize(std::vector<_Tp,\
    \ _Alloc>::size_type) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n  934 |    \
    \   resize(size_type __new_size)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:934:24:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n  934 |       resize(size_type __new_size)\n\
    \      |              ~~~~~~~~~~^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:954:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::resize(std::vector<_Tp,\
    \ _Alloc>::size_type, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp,\
    \ _Alloc>::value_type = long int]\u2019\n  954 |       resize(size_type __new_size,\
    \ const value_type& __x)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:954:7:\
    \ note:   candidate expects 2 arguments, 1 provided\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // If\
    \ empty list, return empty list.\n    if (lst.size() == 0) {\n        return lst;\n\
    \    }\n    std::vector<long> strange_lst;\n    // Start from minimum value.\n\
    \    long min_element = lst.front();\n    for (long i: lst) {\n        // If current\
    \ value is smaller, swap it with minimum value.\n        if (i < min_element)\
    \ {\n            strange_lst.push_back(min_element);\n            min_element\
    \ = i;\n            continue;\n        }\n        // If current value is bigger,\
    \ continue searching.\n        strange_lst.push_back(i);\n    }\n    strange_lst.push_back(min_element);\n\
    \    return strange_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbllcbzpl: /tmp/tmpbllcbzpl.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    // start with the minimum of the remaining\
    \ numbers\n    long min = *std::min_element(std::next(lst.begin()), std::prev(lst.end()));\n\
    \    // keep going until we run out of numbers\n    while (true) {\n        //\
    \ find minimum between the minimum and the remaining numbers\n        long max\
    \ = *std::max_element(std::next(lst.begin()), std::prev(lst.end()));\n       \
    \ // if we've made it this far, we're done\n        if (max == min) {\n      \
    \      break;\n        }\n        // otherwise swap min with the max\n       \
    \ min = max;\n        // and push the max onto the stack\n        res.push_back(max);\n\
    \    }\n    // return the sorted list\n    return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu816wm91: /tmp/tmpu816wm91.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // First\
    \ we will calculate the number of steps to take\n  // If we have two numbers we\
    \ will do 1 step,\n  // else if there are two even numbers, we will do 2 steps,\n\
    \  // else we will do 3 steps. After each step we check if the numbers are the\
    \ same\n  int size = lst.size();\n  std::vector<long> ans;\n  ans.resize(size);\n\
    \  for (int i = 0; i < (size - 1) / 2; ++i) {\n    int left = 2 * i + 1;\n   \
    \ int right = 2 * i + 2;\n    long minLeft = 0;\n    long maxRight = size - 1;\n\
    \    long minRight = size - 1;\n    long current;\n    long minSwap = 0;\n   \
    \ for (int j = 0; j < size; ++j) {\n      current = lst[j];\n      if (left <=\
    \ j && j < right) {\n        minLeft = minLeft > current ? minLeft : current;\n\
    \        maxRight = maxRight < current ? maxRight : current;\n      }\n      if\
    \ (left <= j && j > right) {\n        minRight = minRight > current ? minRight\
    \ : current;\n        minSwap = minSwap > current ? minSwap : current;\n     \
    \ }\n    }\n    ans[i] = minLeft;\n    if (minRight > minSwap) {\n      ans[i]\
    \ = minRight;\n    }\n    ans[i] = minSwap;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdrmr6vco: /tmp/tmpdrmr6vco.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int max_index\
    \ = 0;\n    for (int i = 1; i < lst.size(); i++) {\n        max_index = std::max(max_index,\
    \ lst[i]);\n    }\n    int min_index = 0;\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        min_index = std::min(min_index, lst[i]);\n    }\n    std::vector<long>\
    \ result;\n    long temp = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < temp) {\n            result.push_back(temp);\n         \
    \   temp = lst[i];\n        } else if (lst[i] > temp) {\n            result.push_back(temp);\n\
    \            temp = lst[i];\n        }\n    }\n    result.push_back(temp);\n \
    \   std::rotate(result.begin() + min_index, result.begin() + max_index, result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpweqg67zz.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpweqg67zz.cpp:13:47: error: no matching function for call\
    \ to \u2018max(int&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type&)\u2019\n   13 |         max_index = std::max(max_index, lst[i]);\n\
    \      |                                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpweqg67zz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpweqg67zz.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   13 |         max_index = std::max(max_index,\
    \ lst[i]);\n      |                                               ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylak"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpomys81ch: /tmp/tmpomys81ch.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long max\
    \ = std::max_element(lst.begin(), lst.end()); // max number\n    long min = std::min_element(lst.begin(),\
    \ lst.end()); // min number\n    long max_to_min = max - min; // Max to min\n\n\
    \    // create new vector\n    std::vector<long> result;\n\n    // iterate over\
    \ input vector\n    for (long num : lst) {\n        long diff = num - min;\n \
    \       // if diff is negative, insert min to result\n        if (diff < 0) {\n\
    \            result.push_back(min + max_to_min);\n        }\n        // if diff\
    \ is positive, insert max + diff to result\n        else {\n            result.push_back(max\
    \ + diff);\n        }\n    }\n\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpk1qylzk2.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk1qylzk2.cpp:11:32: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   11 |     long max = std::max_element(lst.begin(), lst.end()); // max number\n\
    \      |                ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n      |    \
    \                            |\n      |                                __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpk1qylzk2.cpp:12:32: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   12 |     long min = std::min_element(lst.begin(),\
    \ lst.end()); // min number\n      |                ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                |\n      |                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    std::vector<long> ret(lst);\n    std::sort(ret.begin(), ret.end(),\
    \ [](long l, long r) { return l < r; });\n    return ret;\n}\nint main() {\n \
    \   auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyw1a_j6b: /tmp/tmpyw1a_j6b.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ v;\n    v.push_back(lst.at(0));\n    long max = lst.at(0);\n    for (long i\
    \ = 1; i < lst.size(); i++) {\n        if (lst.at(i) > max) {\n            max\
    \ = lst.at(i);\n        }\n        v.push_back(max);\n        max = lst.at(i);\n\
    \    }\n    v.push_back(max);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr4toaryd: /tmp/tmpr4toaryd.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code goes here\n    assert(lst.size() > 0);\n\n    long first = 1;\n    long\
    \ second = 0;\n    long third = 2;\n    long fourth = 3;\n    for (size_t i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] < first) {\n            first\
    \ = lst[i];\n        } else if (lst[i] < third) {\n            third = lst[i];\n\
    \        } else if (lst[i] < fourth) {\n            fourth = lst[i];\n       \
    \ } else if (lst[i] > second) {\n            second = lst[i];\n        } else\
    \ {\n            fourth = lst[i];\n        }\n    }\n    return std::vector<long>(&first,\
    \ &fourth);\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  cannot create std::vector larger than max_size()\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int n\
    \ = lst.size();\n    std::vector<long> res;\n    if (n > 0) {\n        // Reverse\
    \ the array from least to greatest in one pass.\n        std::reverse(std::begin(lst),\
    \ std::end(lst));\n        // Reverse it again.\n        std::reverse(std::begin(lst),\
    \ std::end(lst));\n        long min_value = std::numeric_limits<long>::min();\n\
    \        long max_value = std::numeric_limits<long>::max();\n        long temp;\n\
    \        for (long i = 1; i < n; i++) {\n            temp = lst[i];\n        \
    \    if (temp < min_value)\n                min_value = temp;\n            else\
    \ if (temp > max_value)\n                max_value = temp;\n        }\n      \
    \  if (min_value > max_value)\n            min_value = max_value;\n        //\
    \ The first pass puts all the minimum values to the front\n        res.insert(res.begin(),\
    \ min_value);\n        // Second pass puts maximum value at the back.\n      \
    \  res.insert(res.end(), max_value);\n        // Finally pass puts all the other\
    \ values after it.\n        for (long i = 1; i < n; i++) {\n            temp =\
    \ lst[i];\n            if (temp >= min_value && temp <= max_value)\n         \
    \       res.insert(res.begin() + i, temp);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3l8_nj3k: /tmp/tmp3l8_nj3k.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() <= 0) {\n        return res;\n    }\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    lst.erase(lst.begin(), lst.begin()\
    \ + 1);\n    for (auto it : lst) {\n        if (it < min) {\n            min =\
    \ it;\n        }\n        if (it > max) {\n            max = it;\n        }\n\
    \    }\n    res.push_back(min);\n    res.push_back(max);\n    return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp64mimnwz: /tmp/tmp64mimnwz.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\
    \ return lst;\n    long min = *std::min_element(lst.begin(), lst.end());\n   \
    \ long max = *std::max_element(lst.begin(), lst.end());\n    long rest = max -\
    \ min;\n    std::vector<long> res(lst);\n    std::sort(res.begin(), res.end(),\
    \ [&min, rest](int a, int b) {\n        return a - b < rest;\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2d0osh4p: /tmp/tmp2d0osh4p.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if(lst.empty())\
    \ {\n        return {};\n    }\n    std::vector<long> res;\n    // To store the\
    \ max number of the remaining integers\n    long max_num = lst[0];\n    // To\
    \ store the minimum number of the remaining integers\n    long min_num = lst[0];\n\
    \    // To store the indices of the remaining integers\n    std::vector<int> indices;\n\
    \    // To store the index of the current minimum number\n    int current_idx\
    \ = 0;\n    // To store the index of the current maximum number\n    int current_idx_max\
    \ = 0;\n    // To store the numbers in reverse order of the remaining integers\n\
    \    for(long i: lst) {\n        if(i > max_num) {\n            indices.clear();\n\
    \            std::swap(indices, current_idx_max);\n            std::swap(max_num,\
    \ i);\n        } else {\n            if(i <= min_num) {\n                indices.clear();\n\
    \                std::swap(indices, current_idx);\n                std::swap(min_num,\
    \ i);\n            } else {\n                indices.push_back(current_idx);\n\
    \                indices.push_back(current_idx_max);\n                std::swap(current_idx_max,\
    \ i);\n                current_idx_max = i;\n            }\n        }\n      \
    \  current_idx = std::upper_bound(indices.begin(), indices.end(), i) - indices.begin();\n\
    \    }\n    res.push_back(min_num);\n    for(long idx: indices) {\n        res.push_back(lst[idx]);\n\
    \    }\n    res.push_back(max_num);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprmw239bn.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprmw239bn.cpp:29:47: error: no matching function for call\
    \ to \u2018swap(std::vector<int>&, int&)\u2019\n   29 |             std::swap(indices,\
    \ current_idx_max);\n      |                                               ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprmw239bn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprmw239bn.cpp:29:47:\
    \ note:   deduced conflicting types for parameter \u2018_Tp\u2019 (\u2018std::vector<int>\u2019\
    \ and \u2018int\u2019)\n   29 |             std::swap(indices, current_idx_max);\n\
    \      |                                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ <= 100000);\n    std::vector<long> ans;\n    std::stack<long> st;\n    for (long\
    \ i : lst) {\n        st.push(i);\n        while (!st.empty() && st.top() > i)\
    \ st.pop();\n        if (st.empty()) break;\n        ans.push_back(st.top());\n\
    \        st.push(i);\n    }\n    while (!st.empty()) st.pop();\n    return ans;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa4upq4iy: /tmp/tmpa4upq4iy.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // sort\
    \ from minimum -> maximum\n    std::sort(lst.begin(), lst.end());\n    std::vector<long>\
    \ sorted_lst;\n    // reverse sorted from minimum -> maximum\n    std::reverse(lst.begin(),\
    \ lst.end());\n    // merge two sorted list\n    std::merge(sorted_lst.begin(),\
    \ sorted_lst.end(), lst.begin(), lst.end());\n    return sorted_lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpeynkakp6.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeynkakp6.cpp:17:76: error: no matching function for call\
    \ to \u2018merge(std::vector<long int>::iterator, std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, std::vector<long int>::iterator)\u2019\n  \
    \ 17 |     std::merge(sorted_lst.begin(), sorted_lst.end(), lst.begin(), lst.end());\n\
    \      |                                                                     \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeynkakp6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4910:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter>\
    \ _OIter std::merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter)\u2019\n 4910 |\
    \     merge(_InputIterator1 __first1, _InputIterator1 __last1,\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4910:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpeynkakp6.cpp:17:76:\
    \ note:   candidate expects 5 arguments, 4 provided\n   17 |     std::merge(sorted_lst.begin(),\
    \ sorted_lst.end(), lst.begin(), lst.end());\n      |                        \
    \                                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeynkakp6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4960:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _Compare> _OIter std::merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter,\
    \ _Compare)\u2019\n 4960 |     merge(_InputIterator1 __first1, _InputIterator1\
    \ __last1,\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4960:5:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ < 2) {\n        return lst;\n    }\n    // Initialize minimum and maximum of\
    \ list\n    auto min = std::numeric_limits<long>::max();\n    auto max = std::numeric_limits<long>::min();\n\
    \    // For each element, add it to the maximum and minimum\n    for (long i :\
    \ lst) {\n        max = std::max(max, i);\n        min = std::min(min, i);\n \
    \   }\n    // Recursively call with remaining list\n    return strange_sort_list(lst.cbegin(),\
    \ lst.cend(), min, max);\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0nmk71fs.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0nmk71fs.cpp:23:40: error: could not convert \u2018lst.std::vector<long\
    \ int>::cbegin()\u2019 from \u2018std::vector<long int>::const_iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<const long int*, std::vector<long int>\
    \ >\u2019} to \u2018std::vector<long int>\u2019\n   23 |     return strange_sort_list(lst.cbegin(),\
    \ lst.cend(), min, max);\n      |                              ~~~~~~~~~~^~\n\
    \      |                                        |\n      |                   \
    \                     std::vector<long int>::const_iterator {aka __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ v;\n    for(long i=0;i<lst.size();i++){\n        v.push_back(i);\n    }\n  \
    \  sort(v.begin(), v.end(), [&](long a, long b)->bool{\n        return (lst[a]>lst[b]);\n\
    \    });\n    return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2uiglzad: /tmp/tmp2uiglzad.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    long long minl = lst.size();\n    long long maxl = minl;\n  \
    \  for (long long i = 0; i < lst.size(); i++) {\n        if (lst[i] < minl) {\n\
    \            minl = lst[i];\n        }\n        if (lst[i] > maxl) {\n       \
    \     maxl = lst[i];\n        }\n    }\n\n    std::vector<long> out;\n    for\
    \ (long long i = 0; i < lst.size(); i++) {\n        if (lst[i] < minl) {\n   \
    \         out.push_back(lst[i]);\n        }\n        if (lst[i] > maxl) {\n  \
    \          out.push_back(lst[i]);\n        }\n        if (lst[i] == minl) {\n\
    \            for (long long j = i + 1; j < lst.size(); j++) {\n              \
    \  if (lst[j] == minl) {\n                    out.push_back(lst[i]);\n       \
    \             break;\n                }\n            }\n        }\n        if\
    \ (lst[i] == maxl) {\n            for (long long j = i + 1; j < lst.size(); j++)\
    \ {\n                if (lst[j] == maxl) {\n                    out.push_back(lst[i]);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    std::sort(out.begin(), out.end());\n    return out;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqmnn5g3l: /tmp/tmpqmnn5g3l.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // create\
    \ new empty list\n    std::vector<long> lstCopy;\n    lstCopy.swap(lst);\n   \
    \ // sort it\n    std::sort(lst.begin(), lst.end());\n    // replace it with itself\n\
    \    for (size_t i = 0; i < lst.size(); ++i) {\n        lstCopy[i] = lst[i];\n\
    \    }\n    return lstCopy;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpogb04vz7: /tmp/tmpogb04vz7.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) return lst;\n  std::vector<long> temp(lst);\n  std::sort(temp.begin(),\
    \ temp.end(), [&](int a, int b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  });\n\
    \  for (long i = temp.size(); i != 0; i--) {\n    temp[i - 1] = temp[i - 1];\n\
    \  }\n  return temp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzsm4jx4f: /tmp/tmpzsm4jx4f.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return std::vector<long>();\n    }\n    long min = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max = *std::max_element(lst.begin(), lst.end());\n   \
    \ std::rotate(lst.begin(), lst.begin() + 1, lst.end());\n    std::vector<long>\
    \ res(2 * lst.size());\n    for (long i = 0; i < res.size(); i++) {\n        res[i]\
    \ = (2 * i) + 1;\n        res[i + res.size()] = min + i;\n    }\n    for (long\
    \ i = res.size() - 1; i >= 0; i--) {\n        std::swap(res[i], res[i + res.size()]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcp_jrkcy: /tmp/tmpcp_jrkcy.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res(lst);\n  for (auto it = lst.rbegin(); it != lst.rend(); ++it) {\n    for\
    \ (long cur = *it; cur != *it - 1;) {\n      res.push_back(cur);\n      cur =\
    \ *(res.end()-1);\n    }\n    res.push_back(cur);\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdw5puuu6.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdw5puuu6.cpp:17:19: error: \u2018cur\u2019 was not declared\
    \ in this scope\n   17 |     res.push_back(cur);\n      |                   ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    // You can take reference from http://en.cppreference.com/w/cpp/algorithm/sort\n\
    \    // and use std::sort or any sorting algorithm you like.\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptvjljant: /tmp/tmptvjljant.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sorted_lst;\n  int size = lst.size();\n  for (int i = 0; i < size; i++) {\n\
    \    sorted_lst.push_back(lst.at(i));\n  }\n  int max = sorted_lst.at(size);\n\
    \  int min_idx = size;\n  for (int i = size - 1; i >= 0; i--) {\n    if (sorted_lst.at(i)\
    \ < max) {\n      max_idx = i;\n    } else {\n      sorted_lst.push_back(sorted_lst.at(min_idx));\n\
    \      min_idx = i;\n    }\n  }\n  sorted_lst.push_back(sorted_lst.at(max_idx));\n\
    \  return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpa5hoadxy.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa5hoadxy.cpp:20:7: error: \u2018max_idx\u2019 was not\
    \ declared in this scope; did you mean \u2018min_idx\u2019?\n   20 |       max_idx\
    \ = i;\n      |       ^~~~~~~\n      |       min_idx\n/tmp/tmpa5hoadxy.cpp:26:38:\
    \ error: \u2018max_idx\u2019 was not declared in this scope; did you mean \u2018\
    min_idx\u2019?\n   26 |   sorted_lst.push_back(sorted_lst.at(max_idx));\n    \
    \  |                                      ^~~~~~~\n      |                   \
    \                   min_idx\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    // Base case\n    if (lst.size() == 1) {\n        std::vector<long>\
    \ result;\n        for (long i : lst) {\n            result.push_back(i);\n  \
    \      }\n        return result;\n    }\n    // Recursive case\n    std::vector<long>\
    \ first;\n    std::vector<long> second;\n    std::vector<long> result;\n    first\
    \ = strange_sort_list(lst.slice(0, lst.size() / 2));\n    second = strange_sort_list(lst.slice(lst.size()\
    \ / 2, lst.size()));\n    for (long i : first) {\n        bool in_second = true;\n\
    \        for (long j : second) {\n            if (i == j) {\n                in_second\
    \ = false;\n                break;\n            }\n        }\n        if (in_second)\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpluzl2cj1.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpluzl2cj1.cpp:24:35: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018slice\u2019\n   24 |     first = strange_sort_list(lst.slice(0,\
    \ lst.size() / 2));\n      |                                   ^~~~~\n/tmp/tmpluzl2cj1.cpp:25:36:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018slice\u2019\
    \n   25 |     second = strange_sort_list(lst.slice(lst.size() / 2, lst.size()));\n\
    \      |                                    ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\
    \ return std::vector();\n    std::vector<long> ret(2 * lst.size());\n    for (long\
    \ i = 0; i <= lst.size(); ++i) ret[i] = i;\n    for (long i = lst.size(); i >\
    \ 0; --i) {\n        long j = ret[i - 2];\n        while (j > 0 && lst[j - 1]\
    \ > lst[j]) {\n            ret[i - 2] = j;\n            j = ret[i - 2];\n    \
    \    }\n        ret[i - 1] = j;\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpg4m7oi7i.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg4m7oi7i.cpp:11:40: error: missing template arguments\
    \ before \u2018(\u2019 token\n   11 |     if (lst.empty()) return std::vector();\n\
    \      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Base\
    \ case: empty list\n    if (lst.size() == 0) {\n        return {};\n    }\n  \
    \  // Recursive case: list has length 1.\n    // If list is sorted, then return\
    \ it.\n    else if (lst.size() == 1) {\n        if (lst[0] < lst[1]) {\n     \
    \       return std::vector<long>{lst[0]};\n        }\n        return std::vector<long>{lst[1]};\n\
    \    }\n    // If not sorted, so sort it.\n    else {\n        // Initialize min\
    \ and max values.\n        long min_val = std::numeric_limits<long>::min();\n\
    \        long max_val = std::numeric_limits<long>::max();\n\n        // Get the\
    \ min and max values from all remaining values.\n        for (long &val : lst)\
    \ {\n            min_val = std::min(val, min_val);\n            max_val = std::max(val,\
    \ max_val);\n        }\n\n        // Sort list by recursive calls.\n        std::vector<long>\
    \ res = strange_sort_list(\n            std::vector<T>(std::max_element(lst.begin(),\
    \ lst.end()),\n                          std::min_element(lst.begin(), lst.end())));\n\
    \n        // Insert min and max values.\n        for (long &val : res) {\n   \
    \         val = min_val;\n            val = std::max(val, max_val);\n        }\n\
    \n        return res;\n    }\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph5no41e_.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph5no41e_.cpp:37:25: error: \u2018T\u2019 was not declared\
    \ in this scope\n   37 |             std::vector<T>(std::max_element(lst.begin(),\
    \ lst.end()),\n      |                         ^\n/tmp/tmph5no41e_.cpp:37:26:\
    \ error: template argument 1 is invalid\n   37 |             std::vector<T>(std::max_element(lst.begin(),\
    \ lst.end()),\n      |                          ^\n/tmp/tmph5no41e_.cpp:37:26:\
    \ error: template argument 2 is invalid\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ res(lst);\n\tsort(res.begin(), res.end());\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnmv62rg7: /tmp/tmpnmv62rg7.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    if (lst.size() == 1)\n        return lst;\n    std::vector<long>\
    \ result;\n    long minimum = *std::min_element(lst.begin(), lst.end());\n   \
    \ long maximum = *std::max_element(lst.begin(), lst.end());\n    result.push_back(minum);\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        long el = lst[i];\n    \
    \    if (el < minimum) {\n            result.push_back(el);\n            lst[i]\
    \ = maximum;\n        } else if (el > maximum) {\n            result.push_back(maximum);\n\
    \            lst[i] = minimum;\n        } else {\n            result.push_back(el);\n\
    \            lst[i] = minimum;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4jvibs0a.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4jvibs0a.cpp:17:22: error: \u2018minum\u2019 was not declared\
    \ in this scope; did you mean \u2018minimum\u2019?\n   17 |     result.push_back(minum);\n\
    \      |                      ^~~~~\n      |                      minimum\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return {};\n    long min = lst[0];\n    long max = lst.back();\n\n   \
    \ // We sort lists in such way that integers in lists are in ascending order.\n\
    \    // For each element in the list we swap it with maximum or minimum element,\n\
    \    // depending on whether element is greater or lesser than current maximum\
    \ or minimum.\n    for (long i = 0; i < lst.size(); i++) {\n        long tmp =\
    \ lst[i];\n        if (tmp < min) min = tmp;\n        else if (tmp > max) max\
    \ = tmp;\n    }\n\n    std::vector<long> out;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (i == 0 || lst[i] < lst[i - 1]) out.push_back(lst[i]);\n\
    \        else out.push_back(min);\n    }\n    return out;\n}\nint main() {\n \
    \   auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe4jafwna: /tmp/tmpe4jafwna.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code goes here\n    int l = lst.size();\n    for (int i = 0; i < l - 1; ++i)\
    \ {\n        int j = i + 1;\n        while (j < l && lst[j] < lst[i]) {\n    \
    \        ++j;\n        }\n        std::swap(lst[i], lst[j]);\n    }\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3_i1hi8d: /tmp/tmp3_i1hi8d.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ code here\n    if(lst.size() == 0)\n        return std::vector<long>();\n  \
    \  long max_num = lst.back();\n    long min_num = lst[0];\n    for(long i : lst)\n\
    \    {\n        if(i > max_num)\n        {\n            max_num = i;\n       \
    \ }\n        if(i < min_num)\n        {\n            min_num = i;\n        }\n\
    \    }\n    std::vector<long> ret;\n    while(max_num < min_num+1)\n    {\n  \
    \      long mid = max_num + (min_num - max_num)/2;\n        ret.push_back(mid);\n\
    \        max_num = mid;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf3iopu0v: /tmp/tmpf3iopu0v.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Your\
    \ code here\n  std::vector<long> res;\n  for (long i=0 ; i<lst.size() ; i++){\n\
    \    long first = lst[i];\n    long last = i;\n    for(int j=i+1 ; j<lst.size()\
    \ ; j++){\n      long elem = lst[j];\n      if (elem < first){\n        first\
    \ = elem;\n      }\n      else if (elem > last){\n        last = elem;\n     \
    \ }\n      else{\n        continue;\n      }\n    }\n    res.push_back(first);\n\
    \    res.push_back(last);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2bmnkiot: /tmp/tmp2bmnkiot.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  long min\
    \ = lst.front();\n  long max = lst.back();\n  std::vector<long> result;\n  while\
    \ (!lst.empty()) {\n    long cur = lst.back();\n    lst.pop_back();\n    if (cur\
    \ < min) {\n      result.push_back(cur);\n      min = cur;\n    } else if (cur\
    \ > max) {\n      result.push_back(cur);\n      max = cur;\n    } else {\n   \
    \   result.push_back(cur);\n    }\n  }\n  result.push_back(min);\n  result.push_back(max);\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9u1v35hg: /tmp/tmp9u1v35hg.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long long\
    \ temp_val = std::accumulate(lst.begin(), lst.end(), 0);\n    if (temp_val ==\
    \ 0) return lst;\n    std::vector<long> sorted_list(lst.size());\n    for (long\
    \ i = 0; i < lst.size(); ++i) {\n        long k = static_cast<long long>((lst.at(i)\
    \ - temp_val) / 2);\n        long temp;\n        if (k < lst.size() - 1) {\n \
    \           temp = sorted_list[k + 1];\n            sorted_list[k + 1] = sorted_list[k];\n\
    \            sorted_list[k] = temp;\n        }\n    }\n    return sorted_list;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8gh4y81e: /tmp/tmp8gh4y81e.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return {};\n    std::sort(lst.begin(), lst.end());\n    long prev_val\
    \ = lst.back();\n    lst.back() = lst.front();\n    lst.pop_back();\n    // we\
    \ may need to do some shifting so use another vector\n    std::vector<long> new_lst;\n\
    \    for (auto val : lst) {\n        new_lst.push_back(val);\n    }\n    for (auto\
    \ val : new_lst) {\n        if (val == prev_val) continue;\n        // shift down\n\
    \        long cur_index = new_lst.size() - 1;\n        while (true) {\n      \
    \      while (cur_index > 0 && (new_lst[cur_index] > val)) {\n               \
    \ cur_index--;\n            }\n            // if we are at the end, the min element\
    \ must be the final element\n            if (cur_index == new_lst.size() - 1)\
    \ break;\n            if (new_lst[cur_index] == val) {\n                new_lst.insert(new_lst.begin()\
    \ + cur_index, val);\n                for (auto i = cur_index + 1; i < new_lst.size();\
    \ i++) {\n                    new_lst[i] -= (val - new_lst[cur_index]);\n    \
    \            }\n                for (auto i = cur_index; i < new_lst.size(); i++)\
    \ {\n                    new_lst[i] += (val - new_lst[cur_index]);\n         \
    \       }\n                break;\n            }\n            if (new_lst[cur_index]\
    \ == prev_val) break;\n            prev_val = new_lst[cur_index];\n          \
    \  cur_index--;\n        }\n    }\n    return new_lst;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwa48sajv: /tmp/tmpwa48sajv.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] < min) min = lst[i];\n   \
    \     if (lst[i] > max) max = lst[i];\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long mid = (min + max) / 2;\n        if (lst[i] < mid) {\n \
    \           min = mid;\n        } else {\n            max = mid;\n        }\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    for (long\
    \ i = lst.size() - 1; i > 0; i--) {\n        long mid = (min + max) / 2;\n   \
    \     if (lst[i] < mid) {\n            max = mid;\n        } else {\n        \
    \    min = mid;\n        }\n    }\n    for (long i = lst.size() - 1; i > 0; i--)\
    \ {\n        result.push_back(lst[i]);\n    }\n    for (long i = 0; i < result.size();\
    \ i++) {\n        result[i] = lst.back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd_me8oys: /tmp/tmpd_me8oys.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ret(lst);\n  std::sort(ret.begin(), ret.end());\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4n7k_cye: /tmp/tmp4n7k_cye.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    if (lst.size() <= 1)\n        return lst;\n    long min_ind = lst[lst.size()\
    \ - 1];\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] > lst[min_ind])\
    \ {\n            min_ind = i;\n        }\n    }\n    lst2.emplace_back(lst[min_ind]);\n\
    \    for (size_t i = min_ind + 1, j = 0; i < lst.size(); i++, j++) {\n       \
    \ if (lst[i] > lst[j]) {\n            std::swap(lst[i], lst[j]);\n        }\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpccr0wt24: /tmp/tmpccr0wt24.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long minv\
    \ = lst[0];\n    long maxv = lst[0];\n    for (long i : lst) {\n        if (i\
    \ < minv)\n            minv = i;\n        if (i > maxv)\n            maxv = i;\n\
    \    }\n    std::vector<long> result;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        for (int j = i; j < lst.size(); j++) {\n            if (lst[i] <\
    \ lst[j]) {\n                long temp = lst[i];\n                lst[i] = lst[j];\n\
    \                lst[j] = temp;\n            }\n        }\n    }\n    for (long\
    \ i = minv; i < maxv; i++) {\n        result.push_back(i);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpears0xj2: /tmp/tmpears0xj2.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt_hqrci0: /tmp/tmpt_hqrci0.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long maximum\
    \ = *std::max_element(std::begin(lst), std::end(lst));\n    long minimum = *std::min_element(std::begin(lst),\
    \ std::end(lst));\n    std::vector<long> lst2(lst.size());\n    for (size_t i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] < minimum) {\n            lst[i]\
    \ = minimum;\n        } else if (lst[i] > maximum) {\n            lst[i] = maximum;\n\
    \        } else {\n            lst[i] = i;\n        }\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpffg9cqwi: /tmp/tmpffg9cqwi.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\
    \ return {};\n    // Sorting begins here. Remember that std::sort can take a comparator\
    \ functor\n    // which takes 2 elements of the list and decides which one is\
    \ greater than.\n    // Here, we sort by comparing 1st element with rest of the\
    \ list.\n    // This is basically an increasing sort, since we started the minimum\
    \ number first\n    auto comp = [](const long x, const long y){\n        if (x\
    \ > y) return true;\n        if (x < y) return false;\n    };\n    std::sort(lst.begin(),\
    \ lst.end(), comp);\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiqs_uho9: /tmp/tmpiqs_uho9.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ newlist;\n  newlist.push_back(lst[0]);\n  for (int i = 0; i < lst.size() - 1;\
    \ i++) {\n    if (lst[i] < lst[i + 1]) {\n      long temp = lst[i];\n      lst[i]\
    \ = lst[i + 1];\n      lst[i + 1] = temp;\n    }\n  }\n  newlist.push_back(lst[lst.size()\
    \ - 1]);\n  return newlist;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2kog11br: /tmp/tmp2kog11br.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // assert\
    \ that lst.size() > 0;\n    std::reverse(std::begin(lst), std::end(lst));\n  \
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmprcqz5011: /tmp/tmprcqz5011.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    \n    if(lst.empty()){\n   \
    \     return res;\n    }\n    \n    res.push_back(lst.at(0));\n    \n    std::transform(lst.begin(),\
    \ lst.end(), std::back_inserter(res),\n        [](int i) { return (std::min)(i,\
    \ i); });\n    \n    std::transform(lst.begin(), lst.end(), std::back_inserter(res),\n\
    \        [](int i) { return (std::max)(i, i); });\n    \n    return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv50f1pjn: /tmp/tmpv50f1pjn.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int n\
    \ = lst.size();\n    std::vector<long> ret(n);\n    // Sorting algorithm is simple:\
    \ start with the minimum number,\n    // then maximum, etc.\n    for (int i =\
    \ 0; i < n; ++i) {\n        ret[i] = i;\n    }\n    // Sort the list by decreasing\
    \ order using bubble sort\n    for (int i = 0; i < n - 1; ++i) {\n        for\
    \ (int j = 0; j < n - i - 1; ++j) {\n            if (lst[j] > lst[j + 1]) {\n\
    \                long temp = lst[j];\n                lst[j] = lst[j + 1];\n \
    \               lst[j + 1] = temp;\n            }\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu95of4ex: /tmp/tmpu95of4ex.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.empty())\
    \ return std::vector<long>();\n\n  int low = lst.front();\n  std::vector<long>\
    \ res;\n\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] < low) {\n\
    \      res.push_back(low);\n      low = lst[i];\n    } else {\n      res.push_back(lst[i]);\n\
    \    }\n  }\n  res.push_back(low);\n\n  return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbg6xe4nf: /tmp/tmpbg6xe4nf.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  if (lst.size() == 0) {\n    return res;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  long cur_min = lst[0];\n  long cur_max = lst[lst.size()-1];\n\
    \  long cur_mid;\n  long cur_left = cur_min;\n  long cur_right = cur_max;\n  for\
    \ (long i = 1; i < lst.size(); i++) {\n    if (cur_left > cur_max) {\n      cur_mid\
    \ = cur_right;\n      cur_right = cur_left;\n      cur_left = cur_mid;\n    }\
    \ else {\n      cur_mid = cur_left;\n      cur_left = cur_right;\n      cur_right\
    \ = cur_mid;\n    }\n    long tmp_lt = lst[i];\n    long tmp_gt = lst[i - 1];\n\
    \    if (tmp_lt < cur_mid) {\n      cur_mid = tmp_lt;\n    } else if (tmp_gt >\
    \ cur_mid) {\n      cur_mid = tmp_gt;\n    } else {\n      cur_mid = tmp_lt;\n\
    \    }\n  }\n  res.push_back(cur_mid);\n  res.push_back(cur_min);\n  res.push_back(cur_max);\n\
    \  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsfh9_7lu: /tmp/tmpsfh9_7lu.cpp:48: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Base\
    \ case\n    if (lst.size() == 0) {\n        return lst;\n    }\n    // Recursive\
    \ case\n    std::vector<long> res;\n    for (long &val : lst) {\n        std::swap(val,\
    \ std::min_element(lst.begin(), lst.end()) - 1);\n        res.push_back(val);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjqu2_wj2.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjqu2_wj2.cpp:18:68: error: no matching function for call\
    \ to \u2018swap(long int&, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >)\u2019\n   18 |         std::swap(val, std::min_element(lst.begin(),\
    \ lst.end()) - 1);\n      |                                                  \
    \                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjqu2_wj2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjqu2_wj2.cpp:18:68:\
    \ note:   deduced conflicting types for parameter \u2018_Tp\u2019 (\u2018long\
    \ int\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   18 |         std::swap(val, std::min_element(lst.begin(),\
    \ lst.end()) - 1);\n      |                                                  \
    \                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bit"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst.size());\n    std::iota(lst2.begin(), lst2.end(), 1);\n    std::sort(lst2.begin(),\
    \ lst2.end(), [&lst](long a, long b) -> bool {\n        return lst[a] > lst[b];\n\
    \    });\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqq9tv9xf: /tmp/tmpqq9tv9xf.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res(lst);\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp266qu6ra: /tmp/tmp266qu6ra.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Empty\
    \ list is no change.\n  if (lst.empty())\n    return lst;\n  // Taking the minimum\
    \ element from first element of the list\n  std::pair<long, long> firstElem =\
    \ std::pair<long, long>(lst[0], lst[0]);\n  // Finding the minimum element of\
    \ the remaining elements.\n  for (size_t i = 1; i < lst.size(); i++) {\n    if\
    \ (lst[i] < firstElem.first)\n      firstElem = std::pair<long, long>(lst[i],\
    \ lst[i]);\n  }\n  // Adding the minimum element in the first element of the list.\n\
    \  lst.insert(lst.begin(), firstElem.first);\n  // Finding the maximum element\
    \ of the remaining elements.\n  for (size_t i = lst.size(); i > 0; i--) {\n  \
    \  if (lst[i - 1] > lst[i])\n      lst.erase(lst.begin() + i - 1);\n  }\n  return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbhq9gh0t: /tmp/tmpbhq9gh0t.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3usnqfdn: /tmp/tmp3usnqfdn.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long min\
    \ = lst[0];\n    long max = lst[0];\n    long min_pos = 0;\n    long max_pos =\
    \ 0;\n    for (std::size_t i = 0; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n            min_pos = i;\n        }\n   \
    \     if (lst[i] > max) {\n            max = lst[i];\n            max_pos = i;\n\
    \        }\n    }\n    std::vector<long> res(lst.size());\n    for (std::size_t\
    \ i = 0; i < lst.size(); i++) {\n        long j = i;\n        while (j != min_pos\
    \ && lst[j] < min)\n            ++j;\n        while (j != max_pos && lst[j] >\
    \ max)\n            ++j;\n        if (j != i) {\n            res[i] = lst[j];\n\
    \            lst[i] = lst[i];\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6v3fub_6: /tmp/tmp6v3fub_6.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz1y0nsk3: /tmp/tmpz1y0nsk3.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  long i =\
    \ 0;\n  std::vector<long> res(lst);\n  std::sort(res.begin(), res.end());\n  for\
    \ (long x = lst[i]; x < lst[i + 1]; x++) {\n    for (i = i; i < res.size(); i++)\
    \ {\n      if (res[i] <= x) {\n        res[i] = x + 1;\n        break;\n     \
    \ }\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp80h0su1e: /tmp/tmp80h0su1e.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    long min_element = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_element = *std::max_element(lst.begin(), lst.end());\n\n    std::vector<long>\
    \ ans;\n    std::vector<long> temp;\n    temp.push_back(min_element);\n    temp.push_back(max_element);\n\
    \    ans = temp;\n\n    for (long i = 2; i < lst.size(); i++) {\n        long\
    \ k = min_element;\n        long j = max_element;\n        while (j > k) {\n \
    \           while (std::find(temp.begin(), temp.end(), j) != temp.end() && j <\
    \ i) {\n                j++;\n            }\n            while (std::find(temp.begin(),\
    \ temp.end(), i) != temp.end() && i < j) {\n                k++;\n           \
    \ }\n            temp.insert(temp.begin(), k);\n            temp.insert(temp.begin(),\
    \ j);\n        }\n        ans.insert(ans.begin(), k);\n        ans.insert(ans.begin(),\
    \ j);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst);\n    std::sort(lst2.begin(), lst2.end());\n    return lst2;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxfv3ha4u: /tmp/tmpxfv3ha4u.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(),\
    \ lst.end());\n  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpewp3dzo_: /tmp/tmpewp3dzo_.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result{};\n    long min_val=lst[0];\n    long max_val=lst[0];\n    for(auto\
    \ itr=lst.begin();itr!=lst.end();itr++) {\n        if(*itr<min_val) min_val= *itr;\n\
    \        if(*itr>max_val) max_val= *itr;\n    }\n    for(auto itr=lst.begin();itr!=lst.end();itr++)\
    \ {\n        result.push_back(*itr);\n    }\n    long curr_index=0;\n    while(result.size()!=0)\
    \ {\n        std::swap(result[curr_index],result[0]);\n        curr_index++;\n\
    \        if(curr_index>result.size()-1) {\n            curr_index=0;\n       \
    \ }\n    }\n    if(max_val<=min_val) return result;\n    for(auto itr=lst.begin();itr!=lst.end();itr++)\
    \ {\n        if(*itr==max_val) result.push_back(*itr);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sorted_list;\n  for (int i = 0; i < lst.size(); i++) {\n    int min_index =\
    \ i;\n    for (int j = i + 1; j < lst.size(); j++) {\n      if (lst[j] < lst[min_index])\
    \ {\n        min_index = j;\n      }\n    }\n    sorted_list.push_back(lst[min_index]);\n\
    \    sorted_list.push_back(lst[i]);\n  }\n  return sorted_list;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp64ws6e6h: /tmp/tmp64ws6e6h.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::sort(lst.begin(), lst.end());\n    lst.erase(std::remove(lst.begin(),\
    \ lst.end(), static_cast<long>(0)),\n              lst.end());\n    return lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_wz94lls: /tmp/tmp_wz94lls.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long low\
    \ = lst[0];\n    long high = lst[lst.size()-1];\n    std::vector<long> ans;\n\
    \    while(low<=high) {\n        while(low<=high) {\n            long mid = low+(high-low)/2;\n\
    \            if(mid < lst[mid]) high = mid - 1;\n            else if(mid > lst[mid])\
    \ low = mid + 1;\n            else ans.push_back(mid);\n        }\n        while(low<=high)\
    \ low++;\n        while(low<=high) high--;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1p0v3qmt: /tmp/tmp1p0v3qmt.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  long long\
    \ min = lst.front();\n  long long max = lst.back();\n\n  std::vector<long> answer;\n\
    \  answer.push_back(min);\n  for (size_t i = 1; i < lst.size(); i++) {\n    if\
    \ (lst[i] < min) answer = answer.insert(answer.begin(), min);\n    if (lst[i]\
    \ > max) answer = answer.insert(answer.begin(), max);\n    min = std::min(min,\
    \ lst[i]);\n    max = std::max(max, lst[i]);\n  }\n  answer = answer.insert(answer.begin(),\
    \ max);\n  return answer;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxo8ctg4l.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxo8ctg4l.cpp:17:65: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019})\n   17 |     if (lst[i] < min) answer = answer.insert(answer.begin(),\
    \ min);\n      |                                                             \
    \    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxo8ctg4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:199:42: note:\
    \   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018const std::vector<long int>&\u2019\n  199 |     operator=(const vector<_Tp,\
    \ _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxo8ctg4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n\
    \  706"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Create\
    \ list that will contain sorted list.\n  std::vector<long> sorted_lst;\n  // Create\
    \ temporary list, which will be used to store original list.\n  std::vector<long>\
    \ temp_lst = lst;\n  sorted_lst.push_back(temp_lst.back());\n  // Iterate through\
    \ original list, comparing current value with all previous ones\n  // in temp_lst.\n\
    \  for (long i = temp_lst.size() - 1; i >= 0; i--) {\n    long current = temp_lst[i];\n\
    \    for (long j = 0; j < i; j++) {\n      // Compare current with each of its\
    \ previous values in\n      // temp_lst, adding those values into sorted_lst.\n\
    \      if (current > temp_lst[j]) {\n        sorted_lst.insert(sorted_lst.begin()\
    \ + j + 1, current);\n        temp_lst.erase(temp_lst.begin() + j + 1);\n    \
    \    break;\n      }\n    }\n  }\n  // Return list of all previously sorted values.\n\
    \  return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpra4nbzs5: /tmp/tmpra4nbzs5.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  std::vector<long> strange_lst;\n  long first_item\
    \ = lst[0];\n  long second_item = lst[lst.size() - 1];\n  if (first_item < second_item)\
    \ {\n    std::swap(first_item, second_item);\n  }\n  // Now we know first_item\
    \ < second_item\n  std::vector<long> strange_list_to_return(lst.size());\n  std::vector<long>\
    \ strange_list_to_return2(lst.size());\n  for (size_t i = 0; i < lst.size(); i++)\
    \ {\n    if (i == 0) {\n      strange_list_to_return[i] = first_item;\n    } else\
    \ {\n      strange_list_to_return[i] = strange_list_to_return2[i - 1];\n    }\n\
    \    if (i != lst.size() - 1) {\n      strange_list_to_return2[i] = second_item;\n\
    \    } else {\n      strange_list_to_return2[i] = first_item;\n    }\n  }\n  strange_sort_list(strange_list_to_return);\n\
    \  strange_sort_list(strange_list_to_return2);\n  // We are done\n  for (size_t\
    \ i = 0; i < lst.size(); i++) {\n    strange_lst.push_back(strange_list_to_return[i]);\n\
    \    strange_lst.push_back(strange_list_to_return2[i]);\n  }\n  return strange_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long first = *std::min_element(std::begin(lst), std::end(lst));\n\
    \    long last = *std::max_element(std::begin(lst), std::end(lst));\n    long\
    \ mid = first + (last - first) / 2;\n    bool isFirst = true;\n    // While there\
    \ are elements left to check\n    while (std::distance(std::begin(lst), std::end(lst))\
    \ - 1 != 0) {\n        // While element is not the minimum and is not the maximum\n\
    \        while (isFirst && lst.front() != mid) {\n            result.push_back(lst.front());\n\
    \            isFirst = false;\n            lst.front()++;\n        }\n       \
    \ // While element is the maximum\n        while (!isFirst && lst.back() != mid)\
    \ {\n            result.push_back(lst.back());\n            isFirst = true;\n\
    \            lst.back()--;\n        }\n        // Increment the mid element\n\
    \        mid++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long minval\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < minval) {\n            minval = i;\n        }\n    }\n\n    long maxval =\
    \ std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i >\
    \ maxval) {\n            maxval = i;\n        }\n    }\n\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        for (long j = i + 1; j < lst.size(); j++) {\n\
    \            long a = lst[i];\n            long b = lst[j];\n            if (a\
    \ > b) {\n                auto temp = b;\n                b = a;\n           \
    \     a = temp;\n            }\n            if (a < minval) {\n              \
    \  auto temp = minval;\n                minval = a;\n                a = temp;\n\
    \            }\n            if (b > maxval) {\n                auto temp = maxval;\n\
    \                maxval = b;\n                b = temp;\n            }\n     \
    \       lst[i] = std::max(a, b);\n            lst[j] = std::min(a, b);\n     \
    \   }\n    }\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy45bfsex: /tmp/tmpy45bfsex.cpp:52: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long minval\
    \ = *std::min_element(std::begin(lst), std::end(lst));\n    long maxval = *std::max_element(std::begin(lst),\
    \ std::end(lst));\n    std::vector<long> lst2(lst.size());\n    for (auto iter\
    \ = lst.begin(); iter != lst.end(); ++iter)\n    {\n        long val = *iter;\n\
    \        if (val < minval)\n        {\n            minval = val;\n        }\n\
    \        else if (val > maxval)\n        {\n            maxval = val;\n      \
    \  }\n        else\n        {\n            if (iter == lst.begin() || iter ==\
    \ lst.end() || iter != lst.begin() && *(iter-1) > val)\n            {\n      \
    \          lst2[lst2.size()-1] = val;\n            }\n            else\n     \
    \       {\n                lst2[lst2.size()-1] = val;\n                lst2.back()\
    \ = val;\n            }\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx1p_u000: /tmp/tmpx1p_u000.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long min\
    \ = -9223372036854775808;\n    long max = 0;\n    for (auto i : lst) {\n     \
    \   min = std::min(min, i);\n        max = std::max(max, i);\n    }\n    long\
    \ swap = 1;\n    std::vector<long> result;\n    for (auto i = min; i <= max; i++)\
    \ {\n        bool exist = false;\n        for (auto j = result.size(); j--;) {\n\
    \            if (result[j] == i) {\n                exist = true;\n          \
    \      break;\n            }\n        }\n        if (!exist) {\n            result.push_back(i);\n\
    \        }\n    }\n    if (result.size() == 0) {\n        return result;\n   \
    \ }\n    while (result.size() != 1) {\n        result.push_back(swap);\n     \
    \   swap = swap * 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ output;\n    output.push_back(lst[0]);\n    output.push_back(lst[1]);\n    output.push_back(lst[2]);\n\
    \    output.push_back(lst[3]);\n    std::reverse(output.begin(), output.end());\n\
    \    return output;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplbqobjor: /tmp/tmplbqobjor.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long> ret(lst);\n    std::rotate(ret.begin(), ret.begin()\
    \ + 2, ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmposfldy0v: /tmp/tmposfldy0v.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  res.resize(lst.size());\n  long min = std::numeric_limits<long>::min();\n\
    \  long max = std::numeric_limits<long>::max();\n  for (int i = 0; i < lst.size();\
    \ ++i) {\n    long curr = lst[i];\n    // If min or max is greater than current\
    \ element.\n    if (curr > max) {\n      max = curr;\n    } else if (curr < min)\
    \ {\n      min = curr;\n    }\n  }\n  for (int i = 0; i < lst.size(); ++i) {\n\
    \    long curr = lst[i];\n    // If min is greater than the max\n    if (curr\
    \ > max) {\n      res[i] = max;\n      max = curr - 1;\n    } else {\n      //\
    \ If max is less than the min\n      if (curr < min) {\n        res[i] = min;\n\
    \        min = curr + 1;\n      }\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2hohi4nr: /tmp/tmp2hohi4nr.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lstTemp;\n    for (int i = 0; i < lst.size(); i++) {\n        long currentValue\
    \ = lst[i];\n        long minIndex = i;\n        for (int j = i + 1; j < lst.size();\
    \ j++) {\n            if (currentValue > lst[j]) {\n                currentValue\
    \ = lst[j];\n                minIndex = j;\n            }\n        }\n       \
    \ long tempValue = currentValue;\n        currentValue = lst[minIndex];\n    \
    \    lstTemp.push_back(currentValue);\n        lst[minIndex] = tempValue;\n  \
    \  }\n    return lstTemp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo0s4wjgd: /tmp/tmpo0s4wjgd.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res(lst);\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqe9wbk9z: /tmp/tmpqe9wbk9z.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long long\
    \ minval = std::numeric_limits<long long>::max();\n    long long maxval = std::numeric_limits<long\
    \ long>::min();\n    for (auto i : lst) {\n        if (i < minval) {\n       \
    \     minval = i;\n        }\n        if (i > maxval) {\n            maxval =\
    \ i;\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(minval);\n\
    \    ans.push_back(maxval);\n    for (long long i = minval + 1; i <= maxval; i++)\
    \ {\n        ans.push_back(i);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpubwexcu1: /tmp/tmpubwexcu1.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    // If there are no integers, return the empty list.\n    if (lst.empty())\
    \ {\n        return res;\n    }\n\n    // Keep track of the biggest and smallest\
    \ values.\n    long big = lst[0];\n    long small = lst[0];\n    for (long i :\
    \ lst) {\n        // If current value is bigger than the biggest, then set biggest\
    \ to current\n        // value.\n        if (i > big) {\n            big = i;\n\
    \        }\n        // If current value is smaller than the smallest, then set\
    \ smallest to current\n        // value.\n        if (i < small) {\n         \
    \   small = i;\n        }\n    }\n\n    // If there are only two numbers, then\
    \ just return the two numbers.\n    if (big == small && big < lst[0]) {\n    \
    \    return {big, small};\n    }\n\n    // The remaining numbers don't need to\
    \ be swapped. Just sort the remaining numbers,\n    // then swap each remaining\
    \ number with the next smaller number.\n    long largest = small;\n    long next_small\
    \ = lst[0];\n    for (long i = big + 1; i < lst.size(); i++) {\n        if (next_small\
    \ > lst[i]) {\n            next_small = lst[i];\n            largest = i;\n  \
    \      }\n    }\n\n    res.push_back(big);\n    res.push_back(next_small);\n \
    \   res.push_back(largest);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp94lrtvit: /tmp/tmp94lrtvit.cpp:56: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res(std::begin(lst), std::end(lst));\n    std::sort(std::begin(res), std::end(res));\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt5z3dgll: /tmp/tmpt5z3dgll.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ arr;\n    if (lst.size() == 0) {\n        return arr;\n    }\n\n    // Create\
    \ array to be returned.\n    // Start with the smallest integer.\n    // If there\
    \ are multiple smallest integers,\n    // then start with first integer.\n   \
    \ std::vector<long> arr(1 + lst.size());\n    arr[0] = lst[0];\n\n    // Create\
    \ array that will store max and min of remaining items.\n    std::vector<long>\
    \ arr2(1 + lst.size());\n    arr2[0] = std::numeric_limits<long>::max();\n   \
    \ for (std::size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] < arr2[0])\
    \ {\n            arr2[0] = lst[i];\n        }\n    }\n    for (std::size_t i =\
    \ 1; i < lst.size(); ++i) {\n        if (lst[i] > arr2[0]) {\n            arr2[0]\
    \ = lst[i];\n        }\n    }\n    // Move all remaining items to the end.\n \
    \   for (std::size_t i = 1; i < lst.size(); ++i) {\n        arr[i] = arr2[i -\
    \ 1];\n    }\n\n    return arr;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0tl9os2d.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0tl9os2d.cpp:20:23: error: redeclaration of \u2018std::vector<long\
    \ int> arr\u2019\n   20 |     std::vector<long> arr(1 + lst.size());\n      |\
    \                       ^~~\n/tmp/tmp0tl9os2d.cpp:11:23: note: \u2018std::vector<long\
    \ int> arr\u2019 previously declared here\n   11 |     std::vector<long> arr;\n\
    \      |                       ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // We\
    \ need to copy lst, because sort() can change lst.\n    std::vector<long> copy(lst);\n\
    \    sort(copy.begin(), copy.end(), [](long a, long b) -> bool {\n        return\
    \ a < b;\n    });\n    return copy;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8fl11xnz: /tmp/tmp8fl11xnz.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb396ejco: /tmp/tmpb396ejco.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        std::swap(lst[i],\
    \ lst[lst.size() - 1 - i]);\n    }\n    result.insert(result.end(), lst.begin(),\
    \ lst.end());\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppf0n1nwr: /tmp/tmppf0n1nwr.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(),\
    \ lst.end(), [&](int x, int y){\n    // x is the current minimum value\n    //\
    \ y is the current maximum value\n    // return the difference between x and y\n\
    \    return x - y;\n  });\n  return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp64ejnz7l: /tmp/tmp64ejnz7l.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code goes here\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp33eo29er: /tmp/tmp33eo29er.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    assert(lst.size() > 0);\n    std::vector<long> res(lst);\n  \
    \  res.resize(lst.size());\n    long last = lst[0];\n    res.front() = last;\n\
    \    for (long i = 1, len = lst.size(); i < len; i++) {\n        if (lst[i] <\
    \ last) {\n            std::swap(res[i - 1], res[i]);\n        }\n        last\
    \ = res[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp56g3y085: /tmp/tmp56g3y085.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.empty())\
    \ {\n    return lst;\n  }\n\n  std::vector<long> sorted_list(lst.size());\n  long\
    \ minimum = *std::min_element(lst.begin(), lst.end());\n\n  long maximum = *std::max_element(lst.begin(),\
    \ lst.end());\n  sorted_list[0] = minimum;\n  sorted_list[1] = maximum;\n  for\
    \ (size_t i = 2; i < lst.size(); i++) {\n    if (minimum > lst[i]) {\n      sorted_list[i]\
    \ = minimum;\n      minimum = *std::min_element(lst.begin() + i + 1, lst.end());\n\
    \    } else if (maximum < lst[i]) {\n      sorted_list[i] = maximum;\n      maximum\
    \ = *std::max_element(lst.begin() + i + 1, lst.end());\n    }\n  }\n  return sorted_list;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpucg9z7gw: /tmp/tmpucg9z7gw.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Create\
    \ reverse of lst.\n    for (std::size_t i = lst.size() - 1; i > 0; --i)\n    \
    \    lst.insert(std::begin(lst), std::begin(lst) + i, std::begin(lst) - i);\n\n\
    \    // Sort lst using std::sort.\n    std::sort(lst.begin(), lst.end());\n\n\
    \    // Create final list with sorted elements.\n    std::vector<long> res(lst.size());\n\
    \    for (std::size_t i = 0; i < lst.size(); ++i)\n        res[i] = lst[i];\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  vector::_M_range_insert\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long min\
    \ = *std::min_element(std::begin(lst), std::end(lst));\n    long max = *std::max_element(std::begin(lst),\
    \ std::end(lst));\n    std::vector<long> ans;\n    for(long i = 0; i < lst.size();\
    \ i++){\n        if(lst[i] < min) ans.push_back(min);\n        else if(lst[i]\
    \ > max) ans.push_back(max);\n        else if(lst[i] < ans.back()) ans.push_back(lst[i]);\n\
    \        else ans.push_back(ans.back());\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // sort\
    \ by minimum value first, then maximum of remaining values\n    std::sort(lst.begin(),\
    \ lst.end(), [](long a, long b){return a<b; });\n    std::sort(lst.begin(), lst.end(),\
    \ [](long a, long b){return a>b; });\n    return lst;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptjz3k9t8: /tmp/tmptjz3k9t8.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // O(nlogn)\n\
    \    // Sort the list\n    std::sort(lst.begin(), lst.end());\n\n    // O(n)\n\
    \    // Find minimum\n    auto min_element = lst.begin();\n    long min = *min_element;\n\
    \    for (auto iter = lst.begin(); iter != lst.end(); iter++) {\n        if ((*iter)\
    \ < min) {\n            min = *iter;\n            min_element = iter;\n      \
    \  }\n    }\n\n    // O(n) - now we have the minimum\n    // Find maximum\n  \
    \  auto max_element = lst.begin();\n    long max = *max_element;\n    for (auto\
    \ iter = lst.begin(); iter != lst.end(); iter++) {\n        if ((*iter) > max)\
    \ {\n            max = *iter;\n            max_element = iter;\n        }\n  \
    \  }\n\n    // O(n)\n    // Swap the maximum and minimum with the first element\
    \ of the list\n    *min_element = *max_element;\n    *max_element = *min_element;\n\
    \n    // O(n) - now the list is in order\n    // Now we reverse the list by swapping\
    \ the current minimum with the next maximum\n    auto cur = min_element;\n   \
    \ while (cur != max_element) {\n        *cur = *max_element;\n        max_element\
    \ = cur;\n        cur++;\n    }\n\n    // O(n) - now the list is reversed\n\n\
    \    // return the list\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    auto it = lst.begin();\n    std::rotate(lst.begin(),\
    \ it, lst.end() - 1);\n    std::rotate(lst.begin(), it, lst.end());\n    lst.push_back(std::stoll(std::to_string(it).c_str()));\n\
    \    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpltot74_8.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpltot74_8.cpp:17:47: error: no matching function for call\
    \ to \u2018to_string(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >&)\u2019\n   17 |     lst.push_back(std::stoll(std::to_string(it).c_str()));\n\
    \      |                                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpltot74_8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6546\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:17:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018int\u2019\n 6546 |   to_string(int\
    \ __val)\n      |             ~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(unsigned int)\u2019\
    \n 6551 |   to_string(unsigned __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:22:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iter"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    auto it =\
    \ lst.begin();\n    auto it = std::min_element(it, lst.end());\n    auto end =\
    \ std::max_element(it, lst.end());\n    for (; it != end; ++it) {\n        res.push_back(*it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplmcmytz0.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplmcmytz0.cpp:16:10: error: conflicting declaration \u2018\
    auto it\u2019\n   16 |     auto it = std::min_element(it, lst.end());\n      |\
    \          ^~\n/tmp/tmplmcmytz0.cpp:15:10: note: previous declaration as \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> > it\u2019\n   15\
    \ |     auto it = lst.begin();\n      |          ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(),\
    \ lst.end());\n  std::reverse(lst.begin(), lst.end());\n  return lst;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjbptjd23: /tmp/tmpjbptjd23.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // your\
    \ code goes here\n    if(lst.size() ==0)\n        return lst;\n    std::vector<long>\
    \ tmp;\n    long minValue = lst[0];\n    long maxValue = lst[0];\n    for(long\
    \ i =0; i<lst.size();i++)\n    {\n        if (lst[i]<minValue)\n            minValue\
    \ = lst[i];\n        if (lst[i]>maxValue)\n            maxValue = lst[i];\n  \
    \  }\n    long minValueIndex = lst.size();\n    long maxValueIndex = lst.size();\n\
    \    for(long i=0;i<lst.size();i++)\n    {\n        if (lst[i]==minValue)\n  \
    \      {\n            minValueIndex = i;\n        }\n        else if (lst[i]==maxValue)\n\
    \        {\n            maxValueIndex = i;\n        }\n    }\n    long minIndex\
    \ = minValueIndex;\n    long maxIndex = maxValueIndex;\n    long minValue = lst[minIndex];\n\
    \    long maxValue = lst[maxIndex];\n\n    while(minValue<maxValue)\n    {\n \
    \       long temp = lst[minIndex];\n        lst[minIndex] = lst[maxIndex];\n \
    \       lst[maxIndex] = temp;\n        temp = minValue;\n        minValue = maxValue;\n\
    \        maxValue = temp;\n        temp = minValueIndex;\n        minValueIndex\
    \ = maxValueIndex;\n        maxValueIndex = temp;\n        temp = minIndex;\n\
    \        minIndex = maxIndex;\n        maxIndex = temp;\n    }\n    return lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6u7u6x6k.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6u7u6x6k.cpp:39:10: error: redeclaration of \u2018long\
    \ int minValue\u2019\n   39 |     long minValue = lst[minIndex];\n      |    \
    \      ^~~~~~~~\n/tmp/tmp6u7u6x6k.cpp:15:10: note: \u2018long int minValue\u2019\
    \ previously declared here\n   15 |     long minValue = lst[0];\n      |     \
    \     ^~~~~~~~\n/tmp/tmp6u7u6x6k.cpp:40:10: error: redeclaration of \u2018long\
    \ int maxValue\u2019\n   40 |     long maxValue = lst[maxIndex];\n      |    \
    \      ^~~~~~~~\n/tmp/tmp6u7u6x6k.cpp:16:10: note: \u2018long int maxValue\u2019\
    \ previously declared here\n   16 |     long maxValue = lst[0];\n      |     \
    \     ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n\
    \        return lst;\n    // Get minimum value\n    auto min = lst.front();\n\
    \    // Get maximum number of values less than minimum value\n    int max_value\
    \ = std::max_element(lst.begin() + 1, lst.end()) - lst.begin();\n    // Get minimum\
    \ of remaining values\n    auto min_value = std::min_element(lst.begin() + 1,\
    \ lst.end()) - lst.begin();\n    // Get maximum of remaining values\n    auto\
    \ max_value = std::max_element(lst.begin(), lst.begin() + max_value) - lst.begin();\n\
    \    // Return sorted list\n    return std::vector<long>(lst.begin(), lst.begin()\
    \ + max_value) |\n           std::vector<long>(lst.begin() + min_value, lst.end())\
    \ |\n           std::vector<long>(lst.begin(), lst.begin() + max_value);\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppozwdy1l.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppozwdy1l.cpp:20:10: error: conflicting declaration \u2018\
    auto max_value\u2019\n   20 |     auto max_value = std::max_element(lst.begin(),\
    \ lst.begin() + max_value) - lst.begin();\n      |          ^~~~~~~~~\n/tmp/tmppozwdy1l.cpp:16:9:\
    \ note: previous declaration as \u2018int max_value\u2019\n   16 |     int max_value\
    \ = std::max_element(lst.begin() + 1, lst.end()) - lst.begin();\n      |     \
    \    ^~~~~~~~~\n/tmp/tmppozwdy1l.cpp:22:68: error: no match for \u2018operator|\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     return std::vector<long>(lst.begin(), lst.begin() +\
    \ max_value) |\n      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^\n      |                 |\n      |                 vector<[...]>\n   23 |\
    \            std::vector<long>(lst.begin() + min_value, lst.end()) |\n      |\
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    \n     \
    \ |                 |\n      |                 vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n         \
    \        from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppozwdy1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:87:3:\
    \ note: candidate: \u2018constexpr std::_Ios_Fmtflags std::operator|(std::_Ios_Fmtflags,\
    \ std::_Ios_Fmtflags)\u2019\n   87 |   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags\
    \ __b)\n      |   ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:87:27:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end(), [&](long a, long b){return a<b;});\n    lst.erase(lst.begin(), lst.begin()+(lst.size()+1)/2);\
    \ //half of size will remain\n    lst.insert(lst.begin(), lst.begin()+lst.size()/2);\
    \ //half of size will reappear\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppv6hbixw.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppv6hbixw.cpp:13:53: error: no matching function for call\
    \ to \u2018std::vector<long int>::insert(std::vector<long int>::iterator, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >)\u2019\n   13 |     lst.insert(lst.begin(), lst.begin()+lst.size()/2);\
    \ //half of size will reappear\n      |                                      \
    \               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmppv6hbixw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:132:57:\
    \ note:   no known conversion for argument 2 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018const value_type&\u2019 {aka \u2018\
    const long int&\u2019}\n  132 |     insert(const_iterator __position, const value_type&\
    \ __x)\n      |                                       ~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // We will\
    \ use two pointers here.\n  // One will be for traversing lst.\n  // And another\
    \ will be for traversing lst.\n  // After we visit the maximum element of the\
    \ list,\n  // we will swap pointers.\n  long max = lst[0];\n  // Traverse the\
    \ list, starting with the minimum element of the list\n  for (long i : lst) {\n\
    \    if (i > max) {\n      max = i;\n    }\n  }\n  // Now we will move max pointer\
    \ to the end of the list.\n  // And move the pointer to end of the list pointer.\n\
    \  long* ptr = &lst[0];\n  long* end = &lst[lst.size() - 1];\n  while (ptr < end)\
    \ {\n    if (*ptr == max) {\n      // If we have traversed the maximum element\n\
    \      // of the list, we will swap pointers.\n      // So we can get new maximum.\n\
    \      *end = *ptr;\n      // Now move the end pointer.\n      end = &lst[ptr\
    \ - lst];\n      // And move the pointer to end of the list pointer.\n      ptr\
    \ = &lst[ptr - lst];\n    } else {\n      // Move to next element.\n      ptr++;\n\
    \    }\n  }\n  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpku8vk_dm.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpku8vk_dm.cpp:34:22: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018long int*\u2019 and \u2018std::vector<long int>\u2019\
    )\n   34 |       end = &lst[ptr - lst];\n      |                  ~~~ ^ ~~~\n\
    \      |                  |     |\n      |                  |     std::vector<long\
    \ int>\n      |                  long int*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpku8vk_dm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpku8vk_dm.cpp:34:24:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int*\u2019\n   34 |       end = &lst[ptr - lst];\n      |   \
    \                     ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bit"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ out;\n    out.push_back(lst[0]);\n    for (size_t i = 1; i < lst.size(); i++)\
    \ {\n        long current = lst[i];\n        long prev = lst[i - 1];\n       \
    \ if (current > prev) {\n            out.push_back(current);\n            out.push_back(prev);\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz9mfxb6r: /tmp/tmpz9mfxb6r.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n\
    \        return lst;\n    std::vector<long> lst2(lst.size(), 0);\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        auto j = i;\n        while (j > 0 &&\
    \ lst[j - 1] >= lst[j]) {\n            lst2[j] = lst[j - 1];\n            j--;\n\
    \        }\n        lst2[j] = lst[i];\n    }\n    return lst2;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpew06yuoc: /tmp/tmpew06yuoc.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long> res;\n    long curr = std::min(*std::max_element(lst.begin(),\
    \ lst.end()), lst.end());\n    long prev = std::max(lst.begin(), lst.end()) -\
    \ 1;\n    for (long i = curr + 1; i <= prev; ++i)\n        res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph5f8pw6a.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph5f8pw6a.cpp:13:78: error: no matching function for call\
    \ to \u2018min(long int&, std::vector<long int>::iterator)\u2019\n   13 |    \
    \ long curr = std::min(*std::max_element(lst.begin(), lst.end()), lst.end());\n\
    \      |                                                                     \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmph5f8pw6a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmph5f8pw6a.cpp:13:78:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   13 |     long curr = std::min(*std::max_element(lst.begin(),\
    \ lst.end()), lst.end());\n      |                                           \
    \                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    std::vector<long> result(lst.size());\n    for (size_t i = 0; i <\
    \ result.size(); i++) {\n        result[i] = lst[i % lst.size()];\n    }\n   \
    \ long last = result[result.size() - 1];\n    while (last < lst.size()) {\n  \
    \      for (size_t i = 0; i < lst.size(); i++) {\n            result[i] =\n  \
    \              lst[i % lst.size()] < result[i] ? lst[i % lst.size()] : result[i];\n\
    \        }\n        last = result[result.size() - 1];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj76k6dn1: /tmp/tmpj76k6dn1.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Base\
    \ case\n    if (lst.size() == 0) return lst;\n    // Compare minimum and max of\
    \ first and last element\n    if (lst[0] < lst[lst.size() - 1]) {\n        long\
    \ temp = lst[0];\n        std::swap(lst[0], lst[lst.size() - 1]);\n        std::swap(lst[lst.size()\
    \ - 1], temp);\n    }\n    // Recursive step\n    return strange_sort_list(lst.substr(1))\
    \ + [lst[0]] + strange_sort_list(lst.substr(1));\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzalbbmby.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzalbbmby.cpp:20:34: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   20 |     return strange_sort_list(lst.substr(1))\
    \ + [lst[0]] + strange_sort_list(lst.substr(1));\n      |                    \
    \              ^~~~~~\n/tmp/tmpzalbbmby.cpp:20:51: error: expected \u2018,\u2019\
    \ before \u2018[\u2019 token\n   20 |     return strange_sort_list(lst.substr(1))\
    \ + [lst[0]] + strange_sort_list(lst.substr(1));\n      |                    \
    \                               ^\n      |                                   \
    \                ,\n/tmp/tmpzalbbmby.cpp:20:51: error: expected identifier before\
    \ \u2018[\u2019 token\n/tmp/tmpzalbbmby.cpp: In lambda function:\n/tmp/tmpzalbbmby.cpp:20:56:\
    \ error: expected \u2018{\u2019 before \u2018+\u2019 token\n   20 |     return\
    \ strange_sort_list(lst.substr(1)) + [lst[0]] + strange_sort_list(lst.substr(1));\n\
    \      |                                                        ^\n/tmp/tmpzalbbmby.cpp:\
    \ In function \u2018std::vector<long int> strange_sort_list(std::vector<long int>)\u2019\
    :\n/tmp/tmpzalbbmby.cpp:20:80: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018substr\u2019\n   20 |     return strange_sort_list(lst.substr(1))\
    \ + [lst[0]] + strange_sort_list(lst.substr(1));\n      |                    \
    \                                                            ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end(), [](long a, long b) { return std::abs(a - b); });\n    return lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmprym37_8q: /tmp/tmprym37_8q.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int n\
    \ = lst.size();\n    std::vector<long> lst2;\n    std::vector<long> lst3;\n  \
    \  for (int i = 0; i < n; i++) {\n        int j = i;\n        while (j > 0 &&\
    \ lst[j] < lst[j - 1]) j--;\n        lst2.push_back(lst[j]);\n        lst3.push_back(lst[j]);\n\
    \        std::swap(lst[j], lst[j - 1]);\n    }\n    std::reverse(lst3.begin(),\
    \ lst3.end());\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb4nh5iaj: /tmp/tmpb4nh5iaj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  long long\
    \ ans = lst[0];\n  for (size_t i = 0; i < lst.size(); i++) {\n    if (ans > lst[i])\n\
    \      ans = lst[i];\n  }\n  std::reverse(std::begin(lst), std::end(lst));\n \
    \ return std::vector<long>(ans, lst[lst.size() - 1]);\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptz2n_s7c: /tmp/tmptz2n_s7c.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Sort\
    \ the list using a custom comparator.\n    std::sort(lst.begin(), lst.end(),\n\
    \              [](long l, long r) { return (r - l) > 1; }\n    );\n    std::vector<long>\
    \ res;\n    // We reverse the list before returning.\n    std::reverse(lst);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpuobdy3oy.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuobdy3oy.cpp:17:21: error: no matching function for call\
    \ to \u2018reverse(std::vector<long int>&)\u2019\n   17 |     std::reverse(lst);\n\
    \      |                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuobdy3oy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note: candidate: \u2018template<class _BIter> void std::reverse(_BIter, _BIter)\u2019\
    \n 1180 |     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n\
    \      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpuobdy3oy.cpp:17:21:\
    \ note:   candidate expects 2 arguments, 1 provided\n   17 |     std::reverse(lst);\n\
    \      |                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long minimum\
    \ = *std::min_element(lst.begin(), lst.end());\n    long maximum = *std::max_element(lst.begin(),\
    \ lst.end());\n    std::vector<long> ans;\n    while (minimum != maximum) {\n\
    \        if (lst.size() > 1) {\n            std::vector<long> reversed_lst(lst.size());\n\
    \            std::reverse(reversed_lst.begin(), reversed_lst.end());\n       \
    \     ans.insert(ans.end(), reversed_lst.begin(), reversed_lst.end());\n     \
    \   } else {\n            ans.push_back(minimum);\n            break;\n      \
    \  }\n        std::vector<long> reversed_lst;\n        std::reverse(reversed_lst.begin(),\
    \ lst.end());\n        reversed_lst.push_back(minimum);\n        ans.insert(ans.end(),\
    \ reversed_lst.begin(), reversed_lst.end());\n        minimum = *std::min_element(reversed_lst.begin(),\
    \ reversed_lst.end());\n        maximum = *std::max_element(reversed_lst.begin(),\
    \ reversed_lst.end());\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n\n    // get size of list\n    long size\
    \ = lst.size();\n\n    std::vector<long> new_lst(size);\n    long i = 0, j = size\
    \ - 1;\n\n    for (long k = 0; k < size; k++) {\n        // find the minimum element\
    \ and swap it with the first element\n        if (lst[k] < new_lst[j]) {\n   \
    \         // swap lst[i] with new_lst[j]\n            std::swap(new_lst[i], new_lst[j]);\n\
    \            i++;\n            j--;\n        }\n        // find the maximum element\
    \ and swap it with the last element\n        else if (lst[k] > new_lst[j]) {\n\
    \            std::swap(new_lst[j], new_lst[j + 1]);\n            j--;\n      \
    \  }\n    }\n\n    new_lst.erase(new_lst.begin() + j + 1, new_lst.end());\n\n\
    \    return new_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmvjv_d3x: /tmp/tmpmvjv_d3x.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst.size());\n    for(long i=0; i<lst.size(); i++) {\n        lst2[i] =\
    \ i;\n    }\n    lst.sort([](const long &a, const long &b){return a<b;});\n  \
    \  for(long i=0; i<lst.size(); i++) {\n        lst2[lst[i]] = i;\n    }\n    return\
    \ lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpea5w4hwg.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpea5w4hwg.cpp:15:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   15 |     lst.sort([](const\
    \ long &a, const long &b){return a<b;});\n      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tif (lst.empty())\
    \ \n\t\treturn lst;\n\tstd::partial_sort(lst.begin(), lst.begin() + 2, lst.end(),\
    \ \n\t\t\t\t\t\t[](long x, long y) { return x <= y; });\n\tstd::partial_sort(lst.begin()\
    \ + 1, lst.end(), lst.end(), \n\t\t\t\t\t\t[](long x, long y) { return y <= x;\
    \ });\n\treturn lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz6h0nmav: /tmp/tmpz6h0nmav.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\
    \ return std::vector{};\n    if (lst.size() == 1) return lst;\n    auto last =\
    \ lst.back();\n    auto first = mirror(lst.front());\n    // reverse the list\
    \ from first to last\n    auto reversed = {first};\n    for (auto it = lst.begin();\
    \ it != lst.end(); ++it) {\n        if (*it >= last && *it < first) {\n      \
    \      reversed.push_back(*it);\n        } else {\n            reversed.emplace_back(*it);\n\
    \        }\n    }\n    reversed.emplace_back(last);\n    // reverse the reversed\
    \ list\n    return strange_sort_list(reversed);\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpb1m_27km.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb1m_27km.cpp:11:40: error: missing template arguments\
    \ before \u2018{\u2019 token\n   11 |     if (lst.empty()) return std::vector{};\n\
    \      |                                        ^\n/tmp/tmpb1m_27km.cpp:11:40:\
    \ error: expected \u2018;\u2019 before \u2018{\u2019 token\n   11 |     if (lst.empty())\
    \ return std::vector{};\n      |                                        ^\n  \
    \    |                                        ;\n/tmp/tmpb1m_27km.cpp:14:18: error:\
    \ \u2018mirror\u2019 was not declared in this scope; did you mean \u2018perror\u2019\
    ?\n   14 |     auto first = mirror(lst.front());\n      |                  ^~~~~~\n\
    \      |                  perror\n/tmp/tmpb1m_27km.cpp:16:27: error: unable to\
    \ deduce \u2018std::initializer_list<auto>\u2019 from \u2018{first}\u2019\n  \
    \ 16 |     auto reversed = {first};\n      |                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // return\
    \ empty list if lst is empty.\n    if (lst.size() == 0)\n        return std::vector<long>();\n\
    \    // store the current minimum value in a temporary variable.\n    long minimum\
    \ = lst[0];\n    // start iterating through the remaining list.\n    for (long\
    \ i = lst.size() - 1; i >= 0; --i) {\n        // if the current element is greater\
    \ than minimum value,\n        // swap minimum with the current element.\n   \
    \     if (lst[i] > minimum) {\n            std::swap(minimum, lst[i]);\n     \
    \   }\n    }\n    // return the temporary variable.\n    return std::vector<long>{minimum,\
    \ lst[0]};\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfe8a28js: /tmp/tmpfe8a28js.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n  long max_val = *std::max_element(lst.begin(), lst.end());\n \
    \ std::set<long> sorted_set(lst.begin(), lst.end());\n  sorted_set.insert(min_val);\n\
    \  sorted_set.insert(max_val);\n  auto it = sorted_set.begin();\n  std::vector<long>\
    \ result;\n  for (; it != sorted_set.end(); ++it) {\n    result.push_back(*it);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgapb88k7: /tmp/tmpgapb88k7.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> ans;\n    std::sort(lst.begin(),\
    \ lst.end(), [&ans](long a, long b) {\n        return ans.size() == 0;\n    });\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj_3uqbb3: /tmp/tmpj_3uqbb3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\
    \ {\n        return std::vector<long>();\n    }\n    std::vector<long> res(lst);\n\
    \    std::sort(res.begin(), res.end());\n    for (auto it = res.begin(); it !=\
    \ res.end(); ++it) {\n        std::swap(*it, *std::min_element(res.begin(), it\
    \ + 1));\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppg97tyjc: /tmp/tmppg97tyjc.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    for (long i=0;i<lst.size();i++) {\n        long cur = lst[i];\n  \
    \      int place = i;\n        while (cur>0)\n            cur/=10;\n        long\
    \ cur2 = cur;\n        while ((cur2>>=1)>0) {\n            res.push_back(place);\n\
    \            place++;\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg6stnxh7: /tmp/tmpg6stnxh7.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> ans;\n    // sort\
    \ first the minimum number\n    long minimum = *std::min_element(std::begin(lst),\
    \ std::end(lst));\n    ans.push_back(minimum);\n    // sort minimum and the maximum\
    \ number\n    for (auto i = std::begin(lst); i != std::end(lst); ++i) {\n    \
    \    if (*i > minimum) {\n            long maximum = *std::max_element(i, std::end(i));\n\
    \            ans.push_back(maximum);\n            ans.push_back(minimum);\n  \
    \      }\n        minimum = *i;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpitqjjk83.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpitqjjk83.cpp:21:59: error: no matching function for call\
    \ to \u2018end(__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >&)\u2019\
    \n   21 |             long maximum = *std::max_element(i, std::end(i));\n    \
    \  |                                                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpitqjjk83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:99:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::end(std::initializer_list<_Tp>)\u2019\
    \n   99 |     end(initializer_list<_Tp> __ils) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:99:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpitqjjk83.cpp:21:59:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n   21 |\
    \             long maximum = *std::max_element(i, std::end(i));\n      |     \
    \                                                      ^\nIn file included from\
    \ /shared/centos7/gcc/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ out;\n  long long min = 0;\n  long long max = std::numeric_limits<long long>::max();\n\
    \  for (long i = 0; i < lst.size(); ++i) {\n    max = std::max(max, lst[i]);\n\
    \  }\n  for (long i = 0; i < lst.size(); ++i) {\n    if (lst[i] < min)\n     \
    \ out.push_back(min);\n    else if (lst[i] > max)\n      out.push_back(max);\n\
    \    else\n      out.push_back(lst[i]);\n  }\n  return out;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1dqrg8ke.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1dqrg8ke.cpp:15:31: error: no matching function for call\
    \ to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type&)\u2019\n   15 |     max = std::max(max, lst[i]);\n  \
    \    |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1dqrg8ke.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp1dqrg8ke.cpp:15:31:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   15 |     max = std::max(max,\
    \ lst[i]);\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \            "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Base\
    \ case\n    if (lst.empty()) {\n        return {};\n    }\n    // Sort the list\
    \ by descending order\n    // Then reverse it.\n    std::sort(lst.rbegin(), lst.rend(),\
    \ std::greater<>{});\n    std::reverse(std::begin(lst), std::end(lst));\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyn816vul: /tmp/tmpyn816vul.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// We will\
    \ always have two elements, so the size() will be 2.\n\tassert(lst.size() >= 2);\n\
    \tstd::vector<long> sorted_list(lst.size());\n\n\t// We will always have two elements,\
    \ so the size() will be 2.\n\tassert(lst.size() >= 2);\n\n\tsorted_list[0] = lst[0];\n\
    \tsorted_list[1] = lst[lst.size() - 1];\n\n\tauto last_iter = sorted_list.end();\n\
    \t--last_iter;\n\n\t// Keep repeating until list is sorted.\n\twhile (last_iter\
    \ != sorted_list.begin()){\n\t\tauto it = last_iter;\n\t\t--it;\n\n\t\t// Swap\
    \ values.\n\t\tstd::swap(it->first, sorted_list[it->second]);\n\t\tstd::swap(it->second,\
    \ last_iter->second);\n\t}\n\n\treturn sorted_list;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_hpe5hti.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_hpe5hti.cpp:30:17: error: request for member \u2018first\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   30\
    \ |   std::swap(it->first, sorted_list[it->second]);\n      |                \
    \ ^~~~~\n/tmp/tmp_hpe5hti.cpp:30:40: error: request for member \u2018second\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   30\
    \ |   std::swap(it->first, sorted_list[it->second]);\n      |                \
    \                        ^~~~~~\n/tmp/tmp_hpe5hti.cpp:31:17: error: request for\
    \ member \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >::operator->()\u2019, which is of non-class type \u2018\
    long int\u2019\n   31 |   std::swap(it->second, last_iter->second);\n      | \
    \                ^~~~~~\n/tmp/tmp_hpe5hti.cpp:31:36: error: request for member\
    \ \u2018second\u2019 in \u2018* last_iter.__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >::operator->()\u2019, which is of non-class type \u2018\
    long int\u2019\n   31 |   std::swap(it->second, last_iter->second);\n      | \
    \                                   ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long max_value\
    \ = *std::max_element(lst.begin(), lst.end());\n    long min_value = *std::min_element(lst.begin(),\
    \ lst.end());\n    std::vector<long> res(std::max(lst.begin(), min_value), std::min(lst.end(),\
    \ max_value));\n    std::sort(lst.begin(), lst.end());\n    std::transform(lst.begin(),\
    \ lst.end(), res.begin(), [](long x){ return std::min(x, max_value); });\n   \
    \ return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpq659gfw_.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq659gfw_.cpp:13:58: error: no matching function for call\
    \ to \u2018max(std::vector<long int>::iterator, long int&)\u2019\n   13 |    \
    \ std::vector<long> res(std::max(lst.begin(), min_value), std::min(lst.end(),\
    \ max_value));\n      |                                                      \
    \    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq659gfw_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq659gfw_.cpp:13:58:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    long int\u2019)\n   13 |     std::vector<long> res(std::max(lst.begin(), min_value),\
    \ std::min(lst.end(), max_value));\n      |                                  \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ret;\n    if (lst.size() == 0)\n        return ret;\n    std::sort(lst.begin(),\
    \ lst.end());\n    ret.reserve(lst.size());\n    for (long i = 1; i < lst.size();\
    \ i++)\n        ret.push_back(std::max(lst[i], lst[i - 1]));\n    for (long i\
    \ = 0; i < lst.size(); i++)\n        ret.push_back(std::min(lst[i], lst[i - 1]));\n\
    \    return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyfva9cng: /tmp/tmpyfva9cng.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    assert(lst.size() != 0);\n    std::vector<long> result;\n\
    \    std::sort(lst.begin(), lst.end(), std::greater<long>());\n    for(long i\
    \ : lst)\n        result.push_back(i);\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1c35s3rj: /tmp/tmp1c35s3rj.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Sort\
    \ from smallest to largest\n    std::stable_sort(lst.begin(), lst.end());\n  \
    \  // Swap the smallest value with the largest value\n    std::iter_swap(lst.begin(),\
    \ lst.end() - 1);\n    // Now reverse the remaining list and sort from smallest\
    \ to largest\n    // Keep swapping the first value with the last and last-1 values\
    \ with the first\n    std::iter_swap(lst.begin() + 1, lst.end());\n    // Reverse\
    \ the list again\n    std::iter_swap(lst.begin(), lst.end() - 1);\n    // Return\
    \ the list\n    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6o5svjst: /tmp/tmp6o5svjst.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    for (long i : lst)\n        res.push_back(i);\n\n    res.sort();\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph8mdfszh.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph8mdfszh.cpp:15:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   15 |     res.sort();\n \
    \     |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // write\
    \ your code here\n    assert(lst.size() != 0);\n    std::sort(lst.begin(), lst.end());\n\
    \    return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4lzpfljb: /tmp/tmp4lzpfljb.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long long\
    \ first = (long long)lst.front();\n    std::vector<long> res;\n    res.push_back(first);\n\
    \    for (long long i : lst) {\n        if ((long long)i < first) {\n        \
    \    std::swap(i, first);\n        }\n        res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq54ijewd: /tmp/tmpq54ijewd.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if(lst.empty())\
    \ {\n        return lst;\n    }\n    auto min_val = lst.front();\n    auto max_val\
    \ = lst.back();\n    lst.erase(lst.begin(), lst.end());\n    lst.insert(lst.begin(),\
    \ max_val);\n    lst.insert(lst.begin(), min_val);\n    return strange_sort_list(lst);\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ vec;\n  if (lst.empty()) {\n    return vec;\n  }\n  auto min_value = *std::min_element(lst.begin(),\
    \ lst.end());\n  auto max_value = *std::max_element(lst.begin(), lst.end());\n\
    \  std::vector<long> new_lst(lst);\n  new_lst.erase(new_lst.begin());\n  new_lst.erase(new_lst.begin());\n\
    \  new_lst.insert(new_lst.end(), max_value, min_value);\n  new_lst.insert(new_lst.end(),\
    \ min_value, max_value);\n  new_lst.insert(new_lst.end(), max_value, min_value);\n\
    \  return new_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8treqzix: /tmp/tmp8treqzix.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    std::vector<long> ret(lst);\n    std::sort(ret.begin(), ret.end(),\
    \ std::greater<long>());\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfg6991cg: /tmp/tmpfg6991cg.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Declare\
    \ variables.\n    int start_index = 0, end_index = lst.size() - 1;\n    int min_num\
    \ = lst.front();\n    std::vector<long> sorted_lst;\n\n    // Perform first pass\
    \ to find minimum number.\n    // For each element, if it is the same as the minimum,\
    \ swap it with that element.\n    while (start_index < end_index) {\n        //\
    \ If element at start_index is greater than the minimum, move start_index\n  \
    \      // down.\n        if (lst[start_index] >= min_num) {\n            sorted_lst.push_back(lst[start_index]);\n\
    \            start_index++;\n        } else {\n            // If element at start_index\
    \ is less than the minimum, move end_index\n            // up.\n            end_index--;\n\
    \        }\n    }\n\n    // Perform second pass to find maximum number.\n    //\
    \ For each element, if it is the same as the minimum, swap it with that element.\n\
    \    while (start_index < end_index) {\n        // If element at start_index is\
    \ less than the minimum, move start_index\n        // down.\n        if (lst[start_index]\
    \ >= min_num) {\n            sorted_lst.push_back(lst[end_index]);\n         \
    \   start_index++;\n        } else {\n            // If element at start_index\
    \ is greater than the minimum, move end_index\n            // up.\n          \
    \  end_index--;\n        }\n    }\n\n    // Perform third pass to find minimum\
    \ number.\n    // For each element, if it is the same as the minimum, swap it\
    \ with that element.\n    while (start_index < end_index) {\n        // If element\
    \ at start_index is greater than the minimum, move start_index\n        // down.\n\
    \        if (lst[start_index] >= min_num) {\n            sorted_lst.push_back(lst[start_index]);\n\
    \            start_index++;\n        } else {\n            // If element at start_index\
    \ is less than the minimum, move end_index\n            // up.\n            end_index--;\n\
    \        }\n    }\n\n    // Return the sorted list.\n    return sorted_lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbz_k8ioa: /tmp/tmpbz_k8ioa.cpp:66: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // assert\
    \ (lst.size() == 0 || lst.size() == 1);\n  if (lst.size() == 0 || lst.size() ==\
    \ 1) {\n    return lst;\n  }\n  // 1. Create two pointers, one points to the minimum\
    \ element\n  // of lst, and the other points to the maximum element of lst.\n\
    \  // 2. Iterate through the list, one element at a time.\n  // 3. Swap the elements\
    \ with each other\n  // 4. Return\n  // lst.size()\n  auto p1 = lst.begin();\n\
    \  auto p2 = lst.end();\n  auto min = p1;\n  auto max = p2;\n  auto mid = min\
    \ + lst.size() / 2;\n  auto temp;\n\n  while (true) {\n    // if min is less than\
    \ mid, then swap min with mid.\n    if (*min < *mid) {\n      temp = *min;\n \
    \     *min = *mid;\n      *mid = temp;\n    }\n    // else if max is greater than\
    \ mid, then swap max with mid.\n    else if (*max > *mid) {\n      temp = *max;\n\
    \      *max = *mid;\n      *mid = temp;\n    }\n    else {\n      break;\n   \
    \ }\n  }\n  // Recursion\n  return strange_sort_list(lst);\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp316db5el.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp316db5el.cpp:26:3: error: declaration of \u2018auto temp\u2019\
    \ has no initializer\n   26 |   auto temp;\n      |   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  assert(!lst.empty());\n\
    \  long min = lst.front();\n  lst.erase(lst.begin());\n  long max = lst.back();\n\
    \  lst.erase(lst.end() - 1);\n  lst.insert(lst.begin(), min);\n  lst.insert(lst.end(),\
    \ max);\n  long mid = lst.size() / 2;\n  lst.erase(lst.begin() + mid, --lst.end());\n\
    \  lst.insert(lst.begin(), min);\n  lst.insert(lst.end(), max);\n  return lst;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpokb4mzhx: /tmp/tmpokb4mzhx.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if(lst.size()\
    \ == 1)\n        return lst;\n    // Find maximum\n    auto max_value = std::max_element(lst.begin(),\
    \ lst.end());\n    // Find minimum\n    auto min_value = std::min_element(lst.begin(),\
    \ lst.end());\n    // Reverse iterator\n    auto max_it = max_value - 1;\n   \
    \ // Sort rest of the list\n    for(auto it = max_value; it >= min_value; --it)\
    \ {\n        std::iter_swap(it, max_it);\n        max_it -= 1;\n    }\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg4z36eey: /tmp/tmpg4z36eey.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0)\n        return std::vector<long>();\n    std::vector<long> res = lst;\n\
    \    std::sort(res.begin(), res.end());\n    res.erase(std::unique(std::begin(res),\
    \ std::end(res)), std::end(res));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkndybjqb: /tmp/tmpkndybjqb.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int size\
    \ = lst.size();\n    // initialize with minimum value\n    long min_int = lst[0];\n\
    \    long max_int = lst[0];\n    // loop through the rest of the list and update\
    \ min and max if necessary\n    for (int i = 1; i < size; ++i) {\n        if (lst[i]\
    \ > max_int) {\n            max_int = lst[i];\n        } else if (lst[i] < min_int)\
    \ {\n            min_int = lst[i];\n        }\n    }\n    // update max if necessary\n\
    \    if (max_int > size) {\n        max_int = size;\n    }\n    // update min\
    \ if necessary\n    if (min_int < 0) {\n        min_int = -size;\n    }\n    //\
    \ sort array in descending order\n    std::sort(lst.begin(), lst.end());\n   \
    \ // reverse array\n    for (int i = 0; i < size; ++i) {\n        std::swap(lst[i],\
    \ lst[size - i - 1]);\n    }\n    return lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu8w8238k: /tmp/tmpu8w8238k.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) return lst;\n\n    std::vector<long> sorted_list;\n    sorted_list.reserve(lst.size());\
    \ \n\n    // Keep track of min and max values.\n    long minValue = lst[0];\n\
    \    long maxValue = lst[lst.size()-1];\n\n    // Sort list by swapping minimum\
    \ element to beginning and max to end.\n    // Repeat until no swaps occur.\n\
    \    while(true) {\n        // Look for swaps that would not cause list to become\
    \ sorted.\n        long swapping_min = std::min(*std::max_element(lst.begin(),\
    \ lst.end()) , minValue);\n        long swapping_max = std::max(*std::min_element(lst.begin(),\
    \ lst.end()) , maxValue);\n\n        // Swap if not swapped, otherwise continue\
    \ loop.\n        if(swapping_min != minValue && swapping_max != maxValue) sorted_list.push_back(std::min(swapping_min,\
    \ swapping_max));\n        else if(swapping_min != minValue) sorted_list.push_back(std::min(swapping_min,\
    \ minValue));\n        else if(swapping_max != maxValue) sorted_list.push_back(std::max(swapping_max,\
    \ maxValue));\n        else break;\n    }\n\n    return sorted_list;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptly9cwk0: /tmp/tmptly9cwk0.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\t// sort\
    \ array in ascending order\n\tstd::sort(lst.begin(), lst.end());\n\t\n\t// remove\
    \ duplicate elements\n\tstd::vector<long> result;\n\tstd::set<long> unique_elems;\n\
    \tfor (long x : lst) {\n\t\tunique_elems.insert(x);\n\t}\n\tfor (long x : unique_elems)\
    \ {\n\t\tresult.push_back(x);\n\t}\n\t\n\treturn result;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9m_vyphs: /tmp/tmp9m_vyphs.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    std::vector<long> res;\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max_val = *std::max_element(lst.begin(), lst.end());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        long curr = lst[i];\n   \
    \     if (curr == min_val) {\n            long temp = max_val;\n            max_val\
    \ = min_val;\n            min_val = temp;\n        } else if (curr == max_val)\
    \ {\n            long temp = min_val;\n            min_val = max_val;\n      \
    \      max_val = temp;\n        }\n        res.push_back(curr);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphioaq0_l: /tmp/tmphioaq0_l.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ lst2(lst.size());\n  // find minimum\n  long min = lst[0];\n  for (long i: lst)\
    \ if (i < min) min = i;\n  // find maximum\n  long max = lst[0];\n  for (long\
    \ i: lst) if (i > max) max = i;\n  // find median\n  long median = min + max /\
    \ 2;\n  // find middle element\n  long mid = lst[lst.size() / 2];\n  // swap minimum\
    \ and maximum with median in every iteration\n  for (int i = 1; i < lst.size();\
    \ i++) {\n    long tmp = lst[i];\n    lst[i] = min;\n    min = max;\n    max =\
    \ tmp;\n  }\n  // swap median with middle element\n  lst2[lst.size() / 2] = mid;\n\
    \  // reverse the rest of the list\n  for (int i = lst.size() - 1; i > 0; i--)\
    \ {\n    long tmp = lst[i];\n    lst[i] = max;\n    max = tmp;\n  }\n  // reverse\
    \ the rest of the list\n  for (int i = 0; i < lst.size(); i++) {\n    long tmp\
    \ = lst[i];\n    lst[i] = min;\n    min = tmp;\n  }\n  return lst2;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy5fx1yvp: /tmp/tmpy5fx1yvp.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // assert\
    \ (lst.size() != 0);\n    std::vector<long> sorted_list(lst.size());\n    for\
    \ (std::size_t i = 1; i < lst.size(); i++) {\n        sorted_list[i] += (sorted_list[i\
    \ - 1] > lst[i]) ? lst[i] - sorted_list[i - 1] : lst[i] - sorted_list[i];\n  \
    \  }\n    return sorted_list;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8vwdydvk: /tmp/tmp8vwdydvk.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  int size\
    \ = lst.size();\n  std::sort(lst.begin(), lst.end());\n  std::reverse(lst.begin(),\
    \ lst.end());\n  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp740giszp: /tmp/tmp740giszp.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ <= 0)\n        return lst;\n\n    std::vector<long> res = lst;\n\n    // Initialize\
    \ a temporary vector to store the result\n    // The size of vector is one less\
    \ than the original list\n    std::vector<long> tmp(std::next(res.begin()), res.end());\n\
    \n    // Find the index of the minimum element in the original list\n    int min_idx\
    \ = res.size() - 1;\n    for (int i = 0; i < res.size(); i++) {\n        if (res[i]\
    \ < res[min_idx]) {\n            min_idx = i;\n        }\n    }\n\n    // Swap\
    \ the minimum element with last element of the original list\n    std::swap(res[min_idx],\
    \ res.back());\n\n    // Move the last element of the original list to beginning\
    \ of the temporary vector\n    // and move the minimum element to the end of the\
    \ list\n    std::move_backward(res.rbegin(), res.rend(), std::next(tmp.begin(),\
    \ min_idx));\n    std::move(tmp.begin(), tmp.end(), res.begin());\n\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long ans\
    \ = 0;\n    std::vector<long> tmp;\n    for (long n : lst) {\n        if (ans\
    \ < n) {\n            tmp.push_back(n);\n            ans = n;\n        } else\
    \ {\n            while (!tmp.empty() && tmp.front() < n) {\n                tmp.pop_back();\n\
    \            }\n            if (tmp.empty()) {\n                tmp.push_back(n);\n\
    \            } else {\n                tmp.push_back(tmp.front());\n         \
    \   }\n            ans += n;\n        }\n    }\n    return tmp;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkhr5ggdd: /tmp/tmpkhr5ggdd.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return std::vector<long>();\n    }\n    long max_element =\
    \ *std::max_element(lst.begin(), lst.end());\n    std::vector<long> sorted_list(lst.size());\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        sorted_list[i] = lst[max_element\
    \ + 1 - i];\n    }\n    return sorted_list;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8vo9q1u2: /tmp/tmp8vo9q1u2.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    for (long\
    \ i = lst.size() - 1; i >= 0; i--) {\n        for (long j = lst.size() - 1; j\
    \ > i; j--) {\n            if (lst[j] > lst[j + 1]) {\n                auto t\
    \ = lst[j];\n                lst[j] = lst[j + 1];\n                lst[j + 1]\
    \ = t;\n            }\n        }\n    }\n    return lst;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp71tdv2pp: /tmp/tmp71tdv2pp.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ v;\n    for (long i : lst) {\n        v.push_back(i);\n    }\n    std::sort(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphtqx50yd: /tmp/tmphtqx50yd.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ out;\n    std::vector<long> tmp;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \n    for(long i=0; i < lst.size(); i++){\n        if(lst[i] <= minValue){\n \
    \           tmp.push_back(lst[i]);\n        }\n        if(lst[i] > maxValue){\n\
    \            out.push_back(tmp.back());\n            tmp.pop_back();\n       \
    \ }\n        else{\n            tmp.push_back(lst[i]);\n        }\n    }\n   \
    \ return out;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzj6q9j9a: /tmp/tmpzj6q9j9a.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ temp;\n    long tempval = lst[0];\n    temp.push_back(tempval);\n    for (long\
    \ i = 1; i < lst.size(); i++) {\n        long curval = lst[i];\n        if (curval\
    \ < tempval) {\n            std::swap(tempval, curval);\n            temp.push_back(curval);\n\
    \        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt7ld8pbj: /tmp/tmpt7ld8pbj.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ output;\n    // Initialize a vector of size lst.size() of zero value.\n    //\
    \ It will be used to store the indices of non-zero values.\n    std::set<int>\
    \ set_index;\n    // Iterate over the elements of the lst vector.\n    for (long\
    \ elem : lst) {\n        // If the element is not zero, store the index.\n   \
    \     if (elem != 0) {\n            set_index.insert(elem);\n        }\n    }\n\
    \    // Iterate over the elements of the lst vector.\n    for (long elem : lst)\
    \ {\n        // If the element is not zero, store its index.\n        if (elem\
    \ != 0) {\n            // If the element is already in the output vector at the\
    \ index stored in set_index\n            if (set_index.find(elem) == set_index.end())\
    \ {\n                output.push_back(elem);\n            }\n            // If\
    \ the element is NOT already in the output vector, add it to the output vector.\n\
    \            else {\n                output.insert(output.end(), std::find(output.begin(),\
    \ output.end(), elem) + 1,\n                              elem);\n           \
    \ }\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmcgexkd2.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmcgexkd2.cpp:33:35: error: no matching function for call\
    \ to \u2018std::vector<long int>::insert(std::vector<long int>::iterator, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, long int&)\u2019\n   33 |                   \
    \            elem);\n      |                                   ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpmcgexkd2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:130:5:\
    \ note:   candidate expects 2 arguments, 3 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpmcgexkd2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:12"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(!lst.empty());\n\
    \    if (lst.size() == 1) {\n        return lst;\n    }\n    std::vector<long>\
    \ sorted;\n    sorted.push_back(lst.front());\n    for (size_t i = 1; i < lst.size();\
    \ i++) {\n        long min_element = std::min(lst.at(i), lst.at(i - 1));\n   \
    \     long max_element = std::max(lst.at(i), lst.at(i - 1));\n        if (min_element\
    \ > lst.at(i)) {\n            sorted.push_back(lst.at(i));\n            lst.at(i\
    \ - 1) = lst.at(i);\n            lst.at(i) = min_element;\n        }\n       \
    \ if (max_element < lst.at(i)) {\n            sorted.push_back(lst.at(i));\n \
    \           lst.at(i - 1) = lst.at(i);\n            lst.at(i) = max_element;\n\
    \        }\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2mjv8vi1: /tmp/tmp2mjv8vi1.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    // Solution below\n    std::vector<long> result;\n    long min\
    \ = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (auto item : lst) {\n        min = std::min(min, item);\n        max\
    \ = std::max(max, item);\n    }\n    for (auto item : lst) {\n        if (item\
    \ > max) {\n            result.push_back(item);\n        } else if (item < min)\
    \ {\n            result.push_back(item);\n        } else {\n            result.push_back(min);\n\
    \            result.push_back(max);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt_1tqfd4: /tmp/tmpt_1tqfd4.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max_val = *std::max_element(lst.begin(), lst.end());\n    for (long elem : lst)\
    \ {\n        if (elem < min_val) {\n            lst2.push_back(elem);\n      \
    \  } else if (elem > max_val) {\n            lst2.push_back(elem);\n        }\
    \ else {\n            long elem = elem + 1;\n            long diff = elem - max_val;\n\
    \            while (diff > 0) {\n                lst2.push_back(max_val + diff);\n\
    \                diff--;\n            }\n            diff = elem - min_val;\n\
    \            while (diff > 0) {\n                lst2.push_back(min_val + diff);\n\
    \                diff--;\n            }\n        }\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpybrerm7h: /tmp/tmpybrerm7h.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    for (long\
    \ i = lst.size() - 1; i >= 0; i--) {\n        long min = i;\n        for (long\
    \ j = i + 1; j < lst.size(); j++) {\n            if (lst.at(j) < lst.at(min))\
    \ {\n                min = j;\n            }\n        }\n        swap(lst.at(i),\
    \ lst.at(min));\n    }\n    return lst;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppgvrts2c.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppgvrts2c.cpp:18:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   18 |         swap(lst.at(i), lst.at(min));\n      |      \
    \   ^~~~\n/tmp/tmppgvrts2c.cpp:18:9: note: suggested alternatives:\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppgvrts2c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppgvrts2c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  int n = lst.size();\n  for (int i = 0; i < n; i++) {\n    int j = (i\
    \ + 1) % (n - 1);\n    long temp = lst[i];\n    lst[i] = lst[j];\n    lst[j] =\
    \ temp;\n  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdo851h4m: /tmp/tmpdo851h4m.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ strange_lst;\n  if (lst.size() == 0) {\n    return strange_lst;\n  }\n  // Find\
    \ the max and min value of the first element\n  long max_num = std::max(lst.begin(),\
    \ lst.end());\n  long min_num = std::min(lst.begin(), lst.end());\n  // Now find\
    \ the next max, min for each element and add it to new list\n  for (int i = 0;\
    \ i < lst.size(); i++) {\n    long max_num2 = std::max(max_num, lst[i]);\n   \
    \ long min_num2 = std::min(min_num, lst[i]);\n    strange_lst.push_back(min_num2);\n\
    \    strange_lst.push_back(max_num2);\n    max_num = max_num2;\n    min_num =\
    \ min_num2;\n  }\n  return strange_lst;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7_xb7ck8.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7_xb7ck8.cpp:16:26: error: cannot convert \u2018const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   16 |   long max_num = std::max(lst.begin(),\
    \ lst.end());\n      |                  ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n   \
    \   |                          |\n      |                          const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmp7_xb7ck8.cpp:17:26: error: cannot convert\
    \ \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   17 |   long min_num = std::min(lst.begin(),\
    \ lst.end());\n      |                  ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n   \
    \   |                          |\n      |                          const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    long long min = lst.at(0);\n    long long max = lst.at(0);\n\
    \    for (auto i : lst) {\n        if (i < min) min = i;\n        if (i > max)\
    \ max = i;\n    }\n    std::vector<long> result;\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            result.push_back(lst[i - 1]);\n\
    \            lst[i - 1] = lst[i];\n            lst[i] = max;\n        } else if\
    \ (lst[i] < min) {\n            result.push_back(lst[i - 1]);\n            lst[i\
    \ - 1] = lst[i];\n            lst[i] = min;\n        } else {\n            result.push_back(lst[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3e1to0j9: /tmp/tmp3e1to0j9.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::sort(lst.begin(),\
    \ lst.end());\n  lst.erase(lst.begin(), lst.begin() + std::find_if(lst.begin(),\
    \ lst.end(), [](long l){return l < 5;}));\n  lst.erase(lst.begin(), lst.begin()\
    \ + std::find_if(lst.begin(), lst.end(), [](long l){return l > 5;}));\n  lst.erase(lst.begin(),\
    \ lst.begin() + std::find_if(lst.begin(), lst.end(), [](long l){return l < 10;}));\n\
    \  lst.erase(lst.begin(), lst.begin() + std::find_if(lst.begin(), lst.end(), [](long\
    \ l){return l > 10;}));\n  lst.erase(lst.begin(), lst.begin() + std::find_if(lst.begin(),\
    \ lst.end(), [](long l){return l < 15;}));\n  lst.erase(lst.begin(), lst.begin()\
    \ + std::find_if(lst.begin(), lst.end(), [](long l){return l > 15;}));\n  lst.erase(lst.begin(),\
    \ lst.begin() + std::find_if(lst.begin(), lst.end(), [](long l){return l < 20;}));\n\
    \  lst.erase(lst.begin(), lst.begin() + std::find_if(lst.begin(), lst.end(), [](long\
    \ l){return l > 20;}));\n  lst.erase(lst.begin(), lst.begin() + std::find_if(lst.begin(),\
    \ lst.end(), [](long l){return l < 25;}));\n  lst.erase(lst.begin(), lst.begin()\
    \ + std::find_if(lst.begin(), lst.end(), [](long l){return l > 25;}));\n  lst.erase(lst.begin(),\
    \ lst.begin() + std::find_if(lst.begin(), lst.end(), [](long l){return l < 30;}));\n\
    \  lst.erase(lst.begin(), lst.begin() + std::find_if(lst.begin(), lst.end(), [](long\
    \ l){return l > 30;}));\n  return lst;\n}\nint main() {\n    auto candidate =\
    \ strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps3ryjf5n.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps3ryjf5n.cpp:12:38: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   12 |   lst.erase(lst.begin(), lst.begin()\
    \ + std::find_if(lst.begin(), lst.end(), [](long l){return l < 5;}));\n      |\
    \                          ~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                   |                |\n      |       \
    \                            |                __normal_iterator<[...],[...]>\n\
    \      |                                   __normal_iterator<[...],[...]>\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmps3ryjf5n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:859:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  859 |       operator+(diffe"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Initialize\
    \ two variables to track current min and max\n  long min = lst.front();\n  long\
    \ max = lst.back();\n  // Initialize an empty vector to hold result\n  std::vector<long>\
    \ ans;\n  // For each value in the list, if value is between min and max,\n  //\
    \ append it to the ans vector.\n  for (long i : lst) {\n    if (i > min && i <\
    \ max) {\n      ans.push_back(i);\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi0b2p8vc: /tmp/tmpi0b2p8vc.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  long l =\
    \ std::min({lst.begin(), lst.end()});\n  long r = std::max({lst.begin(), lst.end()});\n\
    \  std::vector<long> result = std::vector<long>();\n  result.push_back(l);\n \
    \ while (l < r) {\n    long mid = (l + r) / 2;\n    if (mid > r) {\n      r =\
    \ mid;\n    } else {\n      result.push_back(mid);\n      l = mid + 1;\n    }\n\
    \  }\n  result.push_back(r);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpz39ltvvo.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz39ltvvo.cpp:11:20: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   11 |   long l = std::min({lst.begin(), lst.end()});\n      |            ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                    |\n      |                    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpz39ltvvo.cpp:12:20: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   12 |   long r = std::max({lst.begin(),\
    \ lst.end()});\n      |            ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \                    |\n      |                    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res(std::begin(lst), std::end(lst));\n    std::sort(std::begin(res), std::end(res));\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr46crme1: /tmp/tmpr46crme1.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ strange_vec;\n    long min_value = lst.front();\n    long max_value = lst.back();\n\
    \    for (long num : lst) {\n        if (num < min_value) {\n            min_value\
    \ = num;\n        } else if (num > max_value) {\n            max_value = num;\n\
    \        }\n    }\n    long max_diff = (max_value - min_value) + 1;\n    for (long\
    \ num : lst) {\n        if (num < min_value) {\n            strange_vec.push_back(num);\n\
    \        } else if (num > max_value) {\n            long new_num = min_value +\
    \ max_diff;\n            max_diff -= 1;\n            while (num > new_num) {\n\
    \                strange_vec.push_back(new_num);\n                new_num += max_diff;\n\
    \            }\n            strange_vec.push_back(new_num);\n        } else if\
    \ (num == min_value) {\n            strange_vec.push_back(num);\n        } else\
    \ {\n            long new_num = max_value - num;\n            while (num > new_num)\
    \ {\n                strange_vec.push_back(new_num);\n                new_num\
    \ -= max_diff;\n            }\n            strange_vec.push_back(new_num);\n \
    \       }\n    }\n    return strange_vec;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0)\n    return std::vector<long>();\n  std::vector<long> result(lst.size());\n\
    \  auto min_iter = min_element(lst.begin(), lst.end());\n  long min = *min_iter;\n\
    \  auto max_iter = max_element(lst.begin(), lst.end());\n  long max = *max_iter;\n\
    \  long rest = 0;\n  for (long i : lst)\n    if (i < min)\n      rest = i - min;\n\
    \    else if (i > max)\n      rest = i - max;\n    else\n      rest = 0;\n  long\
    \ diff = max - min;\n  long tmp;\n  for (long i : lst)\n    if (i < min)\n   \
    \   tmp = min;\n    else if (i > max)\n      tmp = max;\n    else\n      tmp =\
    \ i;\n    // This line is the only difference from your code \n    // If this\
    \ doesn't work, try to use \"tmp\" instead of \"min\"\n    result[rest--] = tmp;\n\
    \  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbp4sftwp: /tmp/tmpbp4sftwp.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    std::vector<long> res;\n    long cur = lst[0];\n    for (long i\
    \ : lst)\n        if (i == cur)\n            std::swap(cur, i);\n        else\n\
    \            res.push_back(cur);\n    res.push_back(cur);\n    return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiqxbui_k: /tmp/tmpiqxbui_k.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> newLst;\n    for (auto i : lst)\n   \
    \     newLst.push_back(std::max(i));\n    for(long i : newLst)\n        newLst.push_back(std::min(i));\n\
    \    return newLst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpssssh2do.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpssssh2do.cpp:14:36: error: no matching function for call\
    \ to \u2018max(long int&)\u2019\n   14 |         newLst.push_back(std::max(i));\n\
    \      |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpssssh2do.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpssssh2do.cpp:14:36:\
    \ note:   candidate expects 2 arguments, 1 provided\n   14 |         newLst.push_back(std::max(i));\n\
    \      |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i = 1; i < lst.size(); ++i) {\n        if (lst[i] < min) min =\
    \ lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    std::vector<long>\
    \ ret;\n    // Add min and max as first two elements\n    ret.push_back(min);\n\
    \    ret.push_back(max);\n    for (long i = 2; i < lst.size(); ++i) {\n      \
    \  // swap min and max\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \            std::swap(min, max);\n        } else if (lst[i] < min) {\n      \
    \      min = lst[i];\n            std::swap(min, max);\n        } else {\n   \
    \         std::swap(lst[i], ret[ret.size() - 1]);\n            ret.push_back(lst[i]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmc1m5xx3: /tmp/tmpmc1m5xx3.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  int n =\
    \ lst.size();\n  long min = lst[0];\n  long max = lst[0];\n  for (int i = 1; i\
    \ < n; i++) {\n    if (lst[i] < min) min = lst[i];\n    if (lst[i] > max) max\
    \ = lst[i];\n  }\n  long temp_min;\n  long temp_max;\n  int temp = 0;\n  int min_idx\
    \ = 0;\n  int max_idx = 0;\n  for (int i = 1; i < n; i++) {\n    if (lst[i] <\
    \ min) {\n      temp = lst[i];\n      temp_min = min;\n      temp_max = max;\n\
    \      min = lst[i];\n      max_idx = i;\n      min_idx = i - 1;\n      continue;\n\
    \    }\n    if (lst[i] > max) {\n      temp = lst[i];\n      temp_min = min;\n\
    \      temp_max = max;\n      max = lst[i];\n      min_idx = i;\n      max_idx\
    \ = i;\n      continue;\n    }\n    if (temp_min < lst[i]) {\n      temp = lst[i];\n\
    \      temp_min = min;\n      temp_max = max;\n      min = lst[i];\n      max_idx\
    \ = i;\n      min_idx = i - 1;\n      continue;\n    }\n    if (temp_max > lst[i])\
    \ {\n      temp = lst[i];\n      temp_min = min;\n      temp_max = max;\n    \
    \  max = lst[i];\n      min_idx = i;\n      max_idx = i;\n      continue;\n  \
    \  }\n  }\n  std::vector<long> result;\n  for (int i = 0; i < n; i++) {\n    if\
    \ (i == min_idx) result.push_back(temp);\n    if (i == max_idx) result.push_back(temp);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo9rmwr22: /tmp/tmpo9rmwr22.cpp:70: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Check\
    \ whether given list is empty.\n  if (lst.empty())\n    return lst;\n  // Create\
    \ two new list to hold minimum and maximum elements.\n  std::vector<long> min_lst\
    \ = lst;\n  std::vector<long> max_lst = lst;\n  // Remove first element of list.\n\
    \  lst.erase(std::remove(lst.begin(), lst.end(), lst.front()), lst.end());\n \
    \ // If length of list is one, return it.\n  if (lst.empty())\n    return lst;\n\
    \  // Otherwise, iterate through the list and find minimum and maximum\n  for\
    \ (long i : lst) {\n    long min = 0;\n    long max = 0;\n    // Compare each\
    \ element in list with maximum and minimum found so far.\n    for (int j = 0;\
    \ j < i; j++) {\n      // Compare each element with minimum found so far.\n  \
    \    if (min == 0) {\n        min = lst[j];\n      } else if (min > lst[j]) {\n\
    \        min = lst[j];\n      }\n      // Compare each element with maximum found\
    \ so far.\n      if (max == 0) {\n        max = lst[j];\n      } else if (max\
    \ < lst[j]) {\n        max = lst[j];\n      }\n    }\n    // If element greater\
    \ than the minimum or less than maximum, swap them\n    // and remove element\
    \ from list.\n    if (min < max_lst[max_lst.size() - 1]) {\n      std::swap(min,\
    \ max_lst[max_lst.size() - 1]);\n      lst.erase(max_lst.end() - 1, max_lst.end());\n\
    \    } else {\n      std::swap(max, min_lst[min_lst.size() - 1]);\n      lst.erase(min_lst.end()\
    \ - 1, min_lst.end());\n    }\n    // If the length of the list is one, return\
    \ it.\n    if (lst.empty())\n      return lst;\n  }\n  // If the length of the\
    \ list is one, return it.\n  if (lst.empty())\n    return lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ vec;\n    if (lst.size() == 0)\n        return vec;\n    std::sort(lst.begin(),\
    \ lst.end());\n    lst.insert(lst.begin(), lst.end());\n    vec.push_back(lst.front());\n\
    \    for (auto i = lst.begin() + 1; i < lst.end(); i++) {\n        long cur_max\
    \ = lst.front();\n        for (auto j = i; j != lst.end(); j++) {\n          \
    \  if (j->first > cur_max) {\n                cur_max = j->first;\n          \
    \  }\n        }\n        if (cur_max != lst.front()) {\n            vec.push_back(cur_max);\n\
    \        }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpieo81k3t.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpieo81k3t.cpp:15:38: error: no matching function for call\
    \ to \u2018std::vector<long int>::insert(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator)\u2019\n   15 |     lst.insert(lst.begin(), lst.end());\n   \
    \   |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpieo81k3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:132:57:\
    \ note:   no known conversion for argument 2 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n  132 |\
    \     insert(const_iterator __position, const value_type& __x)\n      |      \
    \                                 ~~~~~~~~~~~~~~~~~~^~~\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.empty())\n\
    \        return lst;\n\n    // Set current min to first element.\n    long current_min\
    \ = lst[0];\n\n    // Set current max to the last element.\n    long current_max\
    \ = lst[lst.size() - 1];\n\n    // Set current min to first element.\n    current_min\
    \ = current_max = lst[0];\n\n    // Iterate over rest of elements, starting from\
    \ the second one.\n    for (int i = 1; i < lst.size(); i++) {\n        // Find\
    \ the minimum of the current and previous numbers.\n        long current_element\
    \ = lst[i];\n\n        // Find the maximum of the current and previous numbers.\n\
    \        long current_element_max = current_element;\n\n        // Find the minimum\
    \ of the current and previous numbers.\n        long current_element_min = current_element;\n\
    \n        // Find the maximum of the current and previous numbers.\n        long\
    \ previous_element = lst[i - 1];\n\n        // Find the maximum of the current\
    \ and previous numbers.\n        long previous_element_max = previous_element;\n\
    \n        // Find the minimum of the current and previous numbers.\n        long\
    \ previous_element_min = previous_element;\n\n        // Set current min and max\
    \ to the minimum of current element\n        // and the maximum of the previous\
    \ element.\n        current_min = std::min(current_min, current_element);\n  \
    \      current_max = std::max(current_max, current_element);\n\n        // Set\
    \ current min and max to the minimum of current element\n        // and the maximum\
    \ of the previous element.\n        current_min = std::min(current_min, current_element_max);\n\
    \        current_max = std::max(current_max, current_element_max);\n\n       \
    \ // Set current min and max to the minimum of current element\n        // and\
    \ the maximum of the previous element.\n        current_min = std::min(current_min,\
    \ current_element_min);\n        current_max = std::max(current_max, current_element_min);\n\
    \n        // Set current min and max to the minimum of current element\n     \
    \   // and the maximum of the previous element.\n        current_min = std::min(current_min,\
    \ previous_element_max);\n        current_max = std::max(current_max, previous_element_max);\n\
    \n        // Set current min and max to the minimum of current element\n     \
    \   // and the maximum of the previous element.\n        current_min = std::min(current_min,\
    \ previous_element_min);\n        current_max = std::max(current_max, previous_element_min);\n\
    \n        // Set current min and max to the minimum of current element\n     \
    \   // and the maximum of the previous element.\n        current_min = std::min(current_min,\
    \ previous_element);\n        current_max = std::max(current_max, previous_element);\n\
    \    }\n\n    // Return list sorted from min to max.\n    return std::vector<long>{current_min,\
    \ current_max};\n}\nint main() {\n    auto candidate = strange_sort_list;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppcte_qnx: /tmp/tmppcte_qnx.cpp:79: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end(), [](long lhs, long rhs) {\n        return lhs > rhs;\n    });\n  \
    \  return lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppmx27wzi: /tmp/tmppmx27wzi.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if(lst.size()\
    \ <= 1) return lst;\n    std::vector<long> result = lst;\n    long largest = *std::max_element(result.begin(),\
    \ result.end());\n    result.erase(std::remove_if(result.begin(), result.end(),\n\
    \                               [&](long v){return v < largest;}), result.end());\n\
    \    for(long i = 0; i < result.size(); i++)\n    {\n        long current = result[i];\n\
    \        while(i < result.size() && result[i] > current)\n            i++;\n \
    \       result[i] = current;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpstvbasyu: /tmp/tmpstvbasyu.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long minValue = lst[0];\n    for (long i : lst) {\n       \
    \ if (i < minValue) {\n            minValue = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i > minValue) {\n            sorted_lst.push_back(minValue);\n\
    \            sorted_lst.push_back(i);\n            minValue = i;\n        }\n\
    \    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6vdnbld9: /tmp/tmp6vdnbld9.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  // Your\
    \ code goes here\n  if(lst.size() <= 1) return lst;\n  std::vector<long> vec;\n\
    \  long min_val, max_val;\n  long val = lst.at(0);\n  max_val = lst.at(0);\n \
    \ for (long i = 1; i < lst.size(); ++i) {\n    if (val > lst.at(i)) {\n      max_val\
    \ = val;\n      val = lst.at(i);\n    } else if (val < lst.at(i)) {\n      min_val\
    \ = val;\n      val = lst.at(i);\n    } else {\n      val = lst.at(i);\n    }\n\
    \  }\n  vec.push_back(min_val);\n  vec.push_back(max_val);\n  vec.push_back(val);\n\
    \  return vec;\n}\nint main() {\n    auto candidate = strange_sort_list;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0jokqpwm: /tmp/tmp0jokqpwm.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    int n = lst.size();\n    if (n <= 0)\n        return result;\n\n\
    \    // Find the min and max of the list\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i = 0; i < n;\
    \ ++i) {\n        min = std::min(min, lst[i]);\n        max = std::max(max, lst[i]);\n\
    \    }\n\n    // Sort based on this min/max pair\n    std::sort(lst.begin(), lst.end());\n\
    \    for (long i = 0; i < n; ++i)\n        std::swap(lst[i], lst[min + ((i + 1)\
    \ * ((max - min) / n))]); \n    std::reverse(lst.begin(), lst.end());\n    \n\
    \    // Add the min and max back to the result\n    for (long i = 0; i < n; ++i)\
    \ {\n        result.push_back(lst.at(i));\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqp0gizvf: /tmp/tmpqp0gizvf.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < lst.size(); i++) {\n    long max_value = std::max({lst[i],\
    \ lst[i + 1]});\n    long min_value = std::min({lst[i], lst[i + 1]});\n    if\
    \ (max_value > min_value) {\n      res.push_back(i);\n      res.push_back(max_value);\n\
    \      res.push_back(min_value);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7n6x9kt8: /tmp/tmp7n6x9kt8.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> lst1(lst.size());\n    for (std::size_t i =\
    \ 0; i < lst.size(); ++i) {\n        std::swap(lst1[i], lst[lst.size() - 1 - i]);\n\
    \    }\n    return lst1;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuscflrmt: /tmp/tmpuscflrmt.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end(), [](const long &a, const long &b)\
    \ -> bool {\n        return a < b;\n    });\n    // We need to do sort on reversed\
    \ list.\n    std::reverse(lst.begin(), lst.end());\n    res.reserve(lst.size());\n\
    \    long last = lst[0];\n    for (long x : lst) {\n        res.push_back(x);\n\
    \        if (x != last) {\n            res.push_back(last);\n            last\
    \ = x;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxgocvqew: /tmp/tmpxgocvqew.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 1) {\n        return lst;\n    }\n    // sort the list in increasing order\n\
    \    std::sort(lst.begin(), lst.end(), [](long i, long j) {\n        return i\
    \ < j;\n    });\n    // sort list again, starting from minimum\n    std::sort(lst.begin(),\
    \ lst.end(), [](long i, long j) {\n        return i < j;\n    });\n    return\
    \ lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5vepwprc: /tmp/tmp5vepwprc.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ <= 1) return lst;\n  long min_val = std::min(lst.begin(), lst.end());\n  long\
    \ max_val = std::max(lst.begin(), lst.end());\n  long mid = min_val + max_val\
    \ / 2;\n  long rest = max_val - min_val;\n  std::vector<long> res(2);\n  res[0]\
    \ = mid;\n  res[1] = rest;\n  return strange_sort_list(res) + lst;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvi4q12gc.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvi4q12gc.cpp:12:26: error: cannot convert \u2018const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   12 |   long min_val = std::min(lst.begin(),\
    \ lst.end());\n      |                  ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n   \
    \   |                          |\n      |                          const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpvi4q12gc.cpp:13:26: error: cannot convert\
    \ \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   13 |   long max_val = std::max(lst.begin(),\
    \ lst.end());\n      |                  ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n   \
    \   |                          |\n      |                          const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpvi4q12gc.cpp:19:33: error: no match for\
    \ \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and\
    \ \u2018std::vector<long int>\u2019)\n   19 |   return strange_sort_list(res)\
    \ + lst;\n      |          ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |             \
    \              |       |\n      |                           |       vector<[...]>\n\
    \      |                           vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  long temp\
    \ = 0;\n  // Find minimum number in list\n  for (size_t i = 0; i < lst.size();\
    \ ++i) {\n    if (lst[i] < temp) {\n      temp = lst[i];\n    }\n  }\n  std::cout\
    \ << \"The minimum value is \" << temp << std::endl;\n  std::vector<long> result;\n\
    \  result.push_back(temp);\n  // Find maximum number in list\n  for (size_t i\
    \ = 0; i < lst.size(); ++i) {\n    if (lst[i] > temp) {\n      temp = lst[i];\n\
    \    }\n  }\n  std::cout << \"The maximum value is \" << temp << std::endl;\n\
    \  result.push_back(temp);\n  // Find minimum number in remaining list\n  for\
    \ (size_t i = lst.size(); i < result.size(); ++i) {\n    if (lst[i] < temp) {\n\
    \      temp = lst[i];\n    }\n  }\n  std::cout << \"The minimum value is \" <<\
    \ temp << std::endl;\n  result.push_back(temp);\n  return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: "The minimum value is 0\nThe maximum value is 4\nThe minimum value is 4\n"
  stderr: "tmprh0j2lc7: /tmp/tmprh0j2lc7.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  assert(lst.size()\
    \ > 0);\n  std::vector<long> result;\n  long min = 0;\n  long max = *std::max_element(lst.begin(),\
    \ lst.end()); // get max element\n  for (long i : lst) {\n    assert(min <= i);\n\
    \    assert(i <= max);\n    if (i < min) {\n      result.push_back(min);\n   \
    \   min = i;\n    } else if (i > max) {\n      result.push_back(max);\n      max\
    \ = i;\n    } else {\n      result.push_back(i);\n    }\n  }\n  if (min != max)\
    \ {\n    result.push_back(min);\n    result.push_back(max);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoeklc1z0: /tmp/tmpoeklc1z0.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res(lst);\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr9oudkat: /tmp/tmpr9oudkat.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    assert(lst.size()\
    \ >= 2);\n\n    std::vector<long> vec;\n    vec.reserve(lst.size());\n\n    //\
    \ Find the minimum of the first two\n    long min1 = *std::min_element(lst.begin(),\
    \ lst.begin() + 2);\n\n    // Get the maximum of remaining list\n    long max1\
    \ = *std::max_element(lst.begin(), lst.begin() + 2);\n\n    // Go through the\
    \ list and swap with the minimum value\n    for (long i : lst) {\n        if (i\
    \ < min1) {\n            vec.push_back(min1);\n            min1 = i;\n       \
    \ } else {\n            if (i == max1) {\n                vec.push_back(min1);\n\
    \                min1 = *std::min_element(lst.begin() + 2, lst.end());\n     \
    \       } else {\n                vec.push_back(i);\n            }\n        }\n\
    \    }\n    return vec;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphy1mjdhf: /tmp/tmphy1mjdhf.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ ans;\n  long current_min = *std::min_element(lst.begin(), lst.end());\n  long\
    \ current_max = *std::max_element(lst.begin(), lst.end());\n  for (long num :\
    \ lst) {\n    if (num < current_min) {\n      ans.push_back(current_min);\n  \
    \    current_min = num;\n    }\n    else if (num > current_max) {\n      ans.push_back(current_max);\n\
    \      current_max = num;\n    }\n    else {\n      ans.push_back(num);\n    }\n\
    \  }\n  ans.push_back(current_min);\n  ans.push_back(current_max);\n  return ans;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpevk4j8py: /tmp/tmpevk4j8py.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long temp\
    \ = 0; \n    std::vector<long> res;\n    res.push_back(lst[0]);\n    for(int i\
    \ = 1; i < lst.size(); i++){\n        if(lst[i] < lst[temp]){\n            temp\
    \ = i;\n        }\n        res.push_back(lst[i]);\n    }\n    res.push_back(lst[temp]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfzy6l4f0: /tmp/tmpfzy6l4f0.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    long long\
    \ i = 1;\n    std::vector<long> out;\n\n    for (long long num : lst) {\n    \
    \    while (num < i) {\n            out.push_back(lst[i - 1]);\n            i\
    \ -= 1;\n        }\n        while (num > i) {\n            out.push_back(lst[i]);\n\
    \            i += 1;\n        }\n        out.push_back(num);\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbcknvpk5: /tmp/tmpbcknvpk5.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ vec;\n    vec.push_back(lst[0]);\n    for(auto i:lst)\n    {\n        for(auto\
    \ j=vec.size()-1;j>=0;--j)\n        {\n            if(vec[j]>i)\n            \
    \    break;\n            if(vec[j]<i)\n                vec.insert(vec.begin()+j,\
    \ i);\n        }\n    }\n    return vec;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwzvsp3h6: /tmp/tmpwzvsp3h6.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
