name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a list, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given array is empty, return [].\n// Example 1:\n// Input: [4,2,3]\n//\
  \ Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 2:\n// Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2\
  \ has the smallest even value, and 2 has the smallest index. \n// Example 3:\n//\
  \ Input: []\n// Output: []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output:\
  \ [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n//\
  \ so we will choose the first zero, which has the smallest index.\n// Constraints:\n\
  // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({4,\
  \ 2, 3}))) == (std::vector<long>({2, 1})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3}))) == (std::vector<long>({2, 1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5, 0, 3,\
  \ 0, 4, 2}))) == (std::vector<long>({0, 1})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 0, 5, 3}))) == (std::vector<long>({0, 3})));\n    assert(candidate((std::vector<long>({5,\
  \ 4, 8, 4, 8}))) == (std::vector<long>({4, 1})));\n    assert(candidate((std::vector<long>({7,\
  \ 6, 7, 1}))) == (std::vector<long>({6, 1})));\n    assert(candidate((std::vector<long>({7,\
  \ 9, 7, 1}))) == (std::vector<long>()));\n}\n"
completions: ["    std::vector<long> ans;\n    int size = arr.size();\n    int minIndex\
    \ = size;\n    int minVal = arr[minIndex];\n    long smalest_value = minVal;\n\
    \    \n    for (int i = 0; i < size; i++) {\n        int curVal = arr[i];\n  \
    \      if (curVal % 2 == 0) {\n            if (curVal < smalest_value) {\n   \
    \             minIndex = i;\n                minVal = curVal;\n              \
    \  smalest_value = curVal;\n            }\n        } else if (curVal == smalest_value)\
    \ {\n            minIndex++;\n            smalest_value = arr[minIndex];\n   \
    \     }\n    }\n    \n    ans.push_back(smalest_value);\n    ans.push_back(minIndex);\n\
    \    return ans;", "  // code here\n  std::vector<long> arr2 = arr;\n  int count[10000];\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    count[arr[i]] += 1;\n  }\n  std::vector<long>\
    \ result;\n  int smallest = 0;\n  for (int i = 0; i < arr.size(); i++) {\n   \
    \ if (count[i] > 1) {\n      if (smallest != 0 && count[smallest] > 1) {\n   \
    \     int index = arr2.size();\n        while (index > 0 && count[index] == 1)\
    \ {\n          index--;\n        }\n        int smaller_index = index;\n     \
    \   while (smaller_index > 0 && count[smaller_index] == 1) {\n          smaller_index--;\n\
    \        }\n        result.push_back(arr2[smallest]);\n        result.push_back(smaller_index);\n\
    \        break;\n      }\n      if (count[i] > count[smallest]) {\n        smallest\
    \ = i;\n      }\n    }\n  }\n  return result;", "    // code here\n    long low\
    \ = 0, high = arr.size()-1;\n    std::vector<long> v;\n    long smalest_value\
    \ = arr[0];\n    int index = -1;\n    while ( low <= high){\n        int mid =\
    \ low+((high-low)/2);\n        if( arr[mid] % 2 == 0){\n            smalest_value\
    \ = arr[mid];\n            index = mid;\n            low = mid + 1;\n        }\
    \ else {\n            high = mid - 1;\n        }\n    }\n    v.push_back(smalest_value);\n\
    \    v.push_back(index);\n    return v;", "    long smallest_even_value = arr[0];\n\
    \    long smallest_index = 0;\n    std::map<long, long> nodes;\n    std::vector<long>\
    \ answer;\n    std::for_each(arr.begin() + 1, arr.end(), [&](long &val) {\n  \
    \      auto it = nodes.find(val);\n        if (nodes.end() != it) {\n        \
    \    if (smallest_even_value == val) {\n                smallest_even_value =\
    \ smallest_even_value * 2;\n                smallest_index = it->second;\n   \
    \         }\n            nodes[val] = it->second;\n        } else {\n        \
    \    nodes[val] = arr.size();\n        }\n    });\n    if (smallest_even_value\
    \ == 0) return answer;\n    std::vector<long> index_to_ret(smallest_index + 1);\n\
    \    index_to_ret[0] = smallest_index;\n    for (auto it = nodes.begin(); it !=\
    \ nodes.end(); ++it) {\n        index_to_ret[it->second] = it->first;\n    }\n\
    \    return index_to_ret;", "  std::iota(arr.begin(), arr.end(), 0);\n  std::sort(arr.begin(),\
    \ arr.end(), [&arr](int a, int b){ return (arr[a] % 2 == 0) - (arr[b] % 2 == 0);\
    \ });\n  std::size_t index = std::distance(arr.begin(), std::min_element(arr.begin(),\
    \ arr.end(), [&arr](int a, int b){ return (arr[a] % 2 == 0) - (arr[b] % 2 == 0);\
    \ }));\n  return std::vector{arr[index], index};", "    std::vector<long> v;\n\
    \    int n=arr.size();\n    // \"pick\" will keep track of the smallest even value\n\
    \    long pick = arr[0];\n    int smallestEven = 0;\n    // \"index\" will keep\
    \ track of the smallest index\n    int smallestIndex = 0;\n    \n    // \"loop\"\
    \ will iterate over all the nodes\n    // and pick the smallest even and smallest\
    \ index\n    // for each node.\n    for (int i=1; i<n; i++){\n        \n     \
    \   if(pick%2==0){\n            smallestEven=arr[i];\n            smallestIndex=i;\n\
    \        }else{\n            if(arr[i]<smallestEven){\n                smallestEven=arr[i];\n\
    \                smallestIndex=i;\n            }\n        }\n        pick=smallestEven;\n\
    \    }\n    \n    // return the vector [ smallest even value, its index ]\n  \
    \  v.push_back(smallestEven);\n    v.push_back(smallestIndex);\n    \n    return\
    \ v;", "    // Write your code here\n    \n    std::vector<long> result;\n   \
    \ long smallestValue = arr[0];\n    long smallestIndex = 0;\n    for(int i = 1;\
    \ i < arr.size(); i++){\n        if(arr[i] < smallestValue){\n            smallestValue\
    \ = arr[i];\n            smallestIndex = i;\n        }\n    }\n    result.push_back(smallestValue);\n\
    \    result.push_back(smallestIndex);\n    return result;", "    long smallest_value\
    \ = INT_MIN;\n    long index = INT_MIN;\n\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_value) {\n        \
    \    smallest_value = arr[i];\n            index = i;\n        }\n    }\n    std::vector<long>\
    \ output = {smallest_value, index};\n    return output;", "    long temp=arr[0];\n\
    \    int i=0;\n    std::vector<long> ret={temp,i};\n    for(int j=1;j<arr.size();j++)\
    \ {\n        if(arr[j]%2==0){\n            temp=arr[j];\n            ret[i]=temp;\n\
    \            i=i+1;\n        }\n    }\n    return ret;", "\tstd::vector<long>\
    \ index;\n\tlong result = arr[0];\n\tfor (long i : arr) {\n\t\tif (i % 2 == 0)\
    \ {\n\t\t\tresult = i;\n\t\t\tindex.push_back(i);\n\t\t}\n\t}\n\treturn index;",
  "  int min_even_val = INT_MAX;\n  int index = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] % 2 == 0) {\n      if (arr[i] < min_even_val) {\n   \
    \     index = i;\n        min_even_val = arr[i];\n      }\n    }\n  }\n  return\
    \ std::vector<long>{min_even_val, index};", "  assert(arr.size() != 0);\n  std::vector<long>\
    \ result;\n  bool flag = false;\n  long minimum = 0;\n  long index = -1;\n  long\
    \ i = 0;\n  while (i < arr.size()) {\n    if (flag) {\n      if (arr[i] < minimum)\
    \ {\n        flag = false;\n      }\n      if (minimum == 0 && arr[i] == 0) {\n\
    \        result.push_back(arr[i]);\n      } else {\n        result.push_back(minimum);\n\
    \        index = i;\n      }\n    } else {\n      if (arr[i] == 0) {\n       \
    \ result.push_back(arr[i]);\n        flag = true;\n      } else if (arr[i] < minimum)\
    \ {\n        flag = true;\n        minimum = arr[i];\n        index = i;\n   \
    \   }\n    }\n    i++;\n  }\n  result.push_back(minimum);\n  result.push_back(index);\n\
    \  return result;", "    long smallest_even_val = INT_MIN;\n    std::vector<long>\
    \ res;\n    long min_value = arr[0];\n    long index = 0;\n    for (long i : arr)\
    \ {\n        long even_val = i % 2;\n        if (even_val > smallest_even_val)\
    \ {\n            smallest_even_val = even_val;\n            min_value = i;\n \
    \       }\n    }\n    res.push_back(min_value);\n    res.push_back(index);\n \
    \   return res;", "    std::iota(arr.begin(), arr.end(), 0);\n    std::sort(arr.begin(),\
    \ arr.end(), [&](long x, long y) {\n        return x % 2 == y % 2;\n    });\n\
    \    auto last = arr.end() - 1;\n    if (arr.front() == 0) {\n        arr.erase(arr.begin());\n\
    \        last--;\n    }\n    if (arr.back() == 0) {\n        arr.erase(last);\n\
    \    }\n    return arr;", "    std::set<long> even;\n    std::vector<std::pair<long,\
    \ long>> values;\n    for (auto it=arr.begin();it!=arr.end();++it) {\n       \
    \ if (even.find(*it)==even.end())\n            even.insert(*it);\n        else\n\
    \            values.push_back({ std::min(even.find(*it), even.end()), *it });\n\
    \    }\n    if (values.empty())\n        return std::vector<long>();\n    long\
    \ smalest_value = *values.rbegin();\n    long smalest_index = values.size();\n\
    \    for (int i=0;i<values.size();i++) {\n        if (values[i].first == smalest_value)\
    \ {\n            smalest_index = i;\n            break;\n        }\n    }\n  \
    \  std::vector<long> even_indices;\n    std::set<long> index;\n    for (auto it=even.begin();it!=even.end();++it)\
    \ {\n        if (index.find(*it)==index.end()) {\n            even_indices.push_back(*it);\n\
    \            index.insert(*it);\n        }\n    }\n    return std::vector<long>({\n\
    \        values[smalest_index].second,\n        smalest_index});", "    assert(arr.size()\
    \ != 0);\n    std::vector<long> vec;\n    long minValue = *std::min_element(arr.begin(),\
    \ arr.end());\n    int minIdx = 0;\n    for (long i : arr) {\n        if ((i %\
    \ 2) == 0) {\n            if (minValue == i) {\n                minIdx++;\n  \
    \          } else {\n                vec.push_back(minValue);\n              \
    \  minValue = i;\n                minIdx = 1;\n            }\n        }\n    }\n\
    \    vec.push_back(minValue);\n    return vec;", "    int size = arr.size();\n\
    \    int smallest_value = 0;\n    int smallest_index = 0;\n    for (int i = 0;\
    \ i < size; i++) {\n        int curr = arr[i];\n        if (curr > smallest_value)\
    \ {\n            smallest_value = curr;\n            smallest_index = i;\n   \
    \     }\n    }\n    if (smallest_value == 0) {\n        smallest_value = arr[0];\n\
    \        smallest_index = 0;\n    }\n    std::vector<long> result;\n    for (int\
    \ i = 0; i < size; i++) {\n        int curr = arr[i];\n        if (curr == smallest_value)\
    \ {\n            result.push_back(smallest_index);\n        }\n    }\n    return\
    \ result;", "    long smallest = 0;\n    long index;\n    bool found = false;\n\
    \    \n    // sort by even values\n    std::sort(arr.begin(), arr.end(), \n  \
    \      [](long a, long b){\n            return a % 2 == 0 && b % 2 == 0;\n   \
    \     }\n    );\n    \n    std::vector<long> ans;\n    \n    // search for the\
    \ smallest even value\n    // if multiple values are equal\n    for (long &i :\
    \ arr) {\n        if (i % 2 == 0 && i != 0) {\n            found = true;\n   \
    \         index = i;\n            break;\n        }\n    }\n    \n    // if there\
    \ is no even values, return empty array\n    if (!found)\n        return ans;\n\
    \    \n    // if we found an even value but it's the smallest value, \n    //\
    \ we return only the smallest index\n    if (smallest == 0)\n        index = index;\n\
    \    \n    // if this is the smallest index, add it to the result array\n    if\
    \ (index == smallest)\n        ans.push_back(smallest);\n    \n    // if the smallest\
    \ value is the last value, add it to the result array\n    // this is what we\
    \ want\n    else if (index == arr.back())\n        ans.push_back(index);\n   \
    \ \n    // else search for the smallest index\n    else{\n        // loop through\
    \ the remaining values\n        for (long &i : arr) {\n            \n        \
    \    // if the remaining value is smaller\n            if (i < smallest) {\n \
    \               \n                // update the smallest value \n            \
    \    smallest = i;\n                \n                // set the index to what\
    \ we found\n                index = i;\n                \n                // we\
    \ found what we needed so stop the loop\n                break;\n            }\n\
    \        }\n    }\n    \n    return ans;", "        long smalest_value,smallest_index;\n\
    \        std::vector<long> res;\n        for(long i=0;i<arr.size();i++){\n   \
    \         if(arr[i]%2==0){\n                smalest_value=arr[i];\n          \
    \      smallest_index=i;\n            }\n        }\n        if(arr.size()==0){\n\
    \            return res;\n        }\n        for(long i=0;i<arr.size();i++){\n\
    \            if(arr[i]%2==0){\n                if(arr[i]>smalest_value){\n   \
    \                 smalest_value=arr[i];\n                    smallest_index=i;\n\
    \                }\n            }\n        }\n        res.push_back(smalest_value);\n\
    \        res.push_back(smallest_index);\n        return res;\n    }\n\n// \"Given\
    \ an array representing a branch of a tree that has non-negative integer nodes\n\
    // your task is to pluck one of the nodes and return it.\n// The plucked node\
    \ should be the node with the smallest odd value.\n// If multiple nodes with the\
    \ same smallest odd value are found return the node that has smallest index.\n\
    // The plucked node should be returned in a list, [ smalest_value, its index ],\n\
    // If there are no odd values or the given array is empty, return [].\n// Example\
    \ 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
    \ odd value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
    // Output: [2, 1]\n// Explanation: 2 has the smallest odd value, and 2 has the\
    \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
    // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nstd::vector<long> pluck2(std::vector<long> arr) {\n    \
    \    long smalest_value,smallest_index;\n        std::vector<long> res;\n    \
    \    for(long i=0;i<arr.size();i++){\n            if(arr[i]%2==1){\n         \
    \       smalest_value=arr[i];\n                smallest_index=i;\n           \
    \ }\n        }\n        if(arr.size()==0){\n            return res;\n        }\n\
    \        for(long i=0;i<arr.size();i++){\n            if(arr[i]%2==1){\n     \
    \           if(arr[i]>smalest_value){\n                    smalest_value=arr[i];\n\
    \                    smallest_index=i;\n                }\n            }\n   \
    \     }\n        res.push_back(smalest_value);\n        res.push_back(smallest_",
  "    // Your code here\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n\
    \    auto it=std::find_if(arr.begin(), arr.end(), [](int n){return n%2==0;});\n\
    \    if(it!=arr.end()){\n        std::vector<long> res; \n        res.push_back(arr[it]);\n\
    \        long index=0;\n        for(auto i=it+1; i<arr.size(); i++){\n       \
    \     if(arr[i]%2==0){\n                res.push_back(arr[i]);\n             \
    \   index=i;\n                break;\n            }\n        }\n        if(index>res.size()){\n\
    \            res.resize(index);\n        }\n        return res;\n    }\n    return\
    \ std::vector<long>();", "  std::multiset<long> s;\n  for (auto &el : arr)\n \
    \   s.insert(el);\n  auto itr = s.begin();\n  std::vector<long> ret;\n  std::set<long>\
    \ pos;\n  while (itr != s.end()) {\n    if (*itr % 2 == 0) {\n      auto val =\
    \ *itr;\n      itr++;\n      if (pos.find(val) == pos.end()) {\n        ret.emplace_back(val);\n\
    \        pos.emplace(val);\n      }\n    } else {\n      itr++;\n    }\n  }\n\
    \  if (ret.empty())\n    return {};\n  if (ret.size() > 1) {\n    auto it = ret.begin();\n\
    \    for (auto &el : ret) {\n      if (it == ret.end()) {\n        break;\n  \
    \    }\n      if (it - ret.begin() > 1) {\n        break;\n      }\n    }\n  \
    \  ret.erase(std::next(it, ret.end()));\n  }\n  return ret;", "    long max_value\
    \ = arr.back();\n    int node_size = arr.size();\n    std::bitset<sizeof(max_value)\
    \ * 8> bitset(max_value);\n    std::vector<long> ans(0, 0);\n    int counter =\
    \ 0;\n    for (int i = 0; i < node_size; i++) {\n        bitset >>= 1;\n     \
    \   if (!bitset) break;\n        counter++;\n        ans.push_back(arr[i]);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    if (counter > 1) {\n     \
    \   return ans;\n    }\n    return {};", "    long min = std::numeric_limits<long>::max();\n\
    \    long index = 0;\n    for (auto &v : arr)\n        if (v < min)\n        \
    \    min = v;\n        if (v == min)\n            index++;\n    if (arr.empty())\n\
    \        return std::vector<long>();\n    else if (arr.size() == 1)\n        return\
    \ std::vector<long>(1, min);\n    std::sort(arr.begin(), arr.end());\n    if (arr[arr.size()-1]\
    \ % 2 == 0)\n        return std::vector<long>(1, min);\n    return std::vector<long>{min,\
    \ index};", "    std::vector<long> result;\n    result.push_back(arr[0]);\n  \
    \  for(size_t i = 1; i < arr.size(); ++i){\n        for(size_t j = 0; j <= i;\
    \ ++j){\n            if(arr[i] % arr[j] == 0){\n                long tmp = arr[i];\n\
    \                arr[i] = arr[j];\n                arr[j] = tmp;\n           \
    \ }\n        }\n        if(arr[i] % 2 == 0){\n            long tmp = arr[i];\n\
    \            arr[i] = arr[i+1];\n            arr[i+1] = tmp;\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    result.push_back(arr[arr.size()-1]);\n    for(int i = 1;\
    \ i < arr.size()/2; ++i){\n        if(arr[i] % 2 == 0){\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    return result;", "    // Write your code here.\n    std::vector<long>\
    \ result;\n    long smallest = 0;\n    long smallest_index;\n    long smallest_even\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        smallest = i;\n  \
    \      for(long j = i+1; j < arr.size(); j++) {\n            if(arr[j] % 2 ==\
    \ 0 && arr[j] < arr[smallest]) {\n                smallest = j;\n            \
    \    smallest_even = arr[j];\n            }\n        }\n        result.push_back(arr[smallest]);\n\
    \        result.push_back(smallest);\n        for(long j = smallest_even; j <\
    \ arr[smallest_even+1]; j++) {\n            if(arr[j] % 2 == 0) {\n          \
    \      smallest_even = j;\n                smallest_index = j;\n            }\n\
    \        }\n        if(smallest_even == 0) {\n            break;\n        }\n\
    \    }\n    return result ;", "    std::vector<long> index;\n    long smalest_even\
    \ = arr[0];\n    int smalest_index = 0;\n    int size = arr.size();\n    for(int\
    \ i = 1 ; i < size ; i++){\n        if(arr[i] < smalest_even){\n            smalest_even\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    index.push_back(smalest_index);\n\
    \    index.push_back(smalest_index);\n    return index;", "    long min = 0, max\
    \ = 0, index = 0;\n    for (long i = 0; i < arr.size(); ++i) {\n        if (arr[i]\
    \ > 0) {\n            min += arr[i];\n            if (max < min)\n           \
    \     max = min;\n            index++;\n        }\n    }\n    if (max == 0)\n\
    \        return std::vector<long>();\n    std::vector<long> ret;\n    long mid\
    \ = (max + min) / 2;\n    if (arr.size() % 2 == 0) {\n        min = mid;\n   \
    \     for (long i = 0; i < arr.size(); ++i) {\n            if (arr[i] > 0) {\n\
    \                if (arr[i] == mid)\n                    ret.push_back(index);\n\
    \                else {\n                    min = mid;\n                    break;\n\
    \                }\n            }\n        }\n    } else {\n        max = mid;\n\
    \        for (long i = 0; i < arr.size(); ++i) {\n            if (arr[i] > 0)\
    \ {\n                if (arr[i] >= mid)\n                    ret.push_back(index);\n\
    \                else {\n                    max = mid;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return ret;", "    //\
    \ Your code here\n    std::vector<long> result;\n    long smallest_value;\n  \
    \  int smallest_index;\n    for (auto i : arr) {\n        if ((i % 2) == 0) {\n\
    \            if (smallest_value != 0) {\n                if (smallest_value <\
    \ i) {\n                    smallest_value = i;\n                    smallest_index\
    \ = arr.size() - 1;\n                }\n            } else {\n               \
    \ smallest_value = i;\n                smallest_index = arr.size() - 1;\n    \
    \        }\n        } else {\n            if (smallest_value == 0) {\n       \
    \         smallest_value = i;\n                smallest_index = arr.size() - 1;\n\
    \            } else {\n                if (smallest_value < i) {\n           \
    \         smallest_value = i;\n                    smallest_index = arr.size()\
    \ - 1;\n                }\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // write your\
    \ code here\n    std::set<long> s;\n    for(long &i : arr){\n        s.insert(i);\n\
    \    }\n    if(s.empty()){\n        return std::vector<long>();\n    }\n    auto\
    \ i = std::min_element(s.begin(), s.end());\n    return std::vector<long>{ i,\
    \ s.lower_bound(i) };", "    // write your code here\n    long index = 0;\n  \
    \  int max_even = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            index++;\n            if (max_even < 0 || max_even\
    \ < arr[i]) {\n                max_even = arr[i];\n            }\n        } else\
    \ if (max_even == -1) {\n            index++;\n        }\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(max_even);\n    res.push_back(index);\n    return res;",
  "    if(arr.empty()) return {};\n    long smallest = *std::min_element(arr.begin(),\
    \ arr.end());\n    long index = 0;\n    long value = arr[smallest];\n    for(auto\
    \ it = std::next(arr.begin()); it != arr.end(); ++it) {\n        if(*it == value\
    \ || *it == (value + (*it < value ? 1 : 0))) {\n            index = *it - value;\n\
    \            break;\n        }\n    }\n    return {value, index};", "    long\
    \ min_value = 0;\n    long smallest_index = 0;\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2 ==0 && arr[i]>=min_value){\n            min_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> arr1;\n\
    \    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2 ==0 && arr[i]>=min_value){\n\
    \            arr1.push_back(arr[i]);\n        }\n    }\n    long min_element;\n\
    \    long min_value;\n    long min_index;\n    std::sort(arr1.begin(),arr1.end(),[&min_element,&min_value,&min_index](long\
    \ a, long b){\n        if(a < min_element){\n            min_element = a;\n  \
    \          min_value = a;\n            min_index= 0;\n        }\n        if(b<min_element){\n\
    \            min_element = b;\n            min_value = b;\n            min_index=\
    \ 1;\n        }\n        return min_element-min_value;\n    });\n    if(arr1.size()==1){\n\
    \        std::vector<long> ans;\n        ans.push_back(min_element);\n       \
    \ ans.push_back(min_index);\n        return ans;\n    }else{\n        std::vector<long>\
    \ ans;\n        ans.push_back(min_element);\n        ans.push_back(min_index);\n\
    \        return ans;\n    }", "  std::vector<long> vec;\n  bool flag = true;\n\
    \  for (long i : arr) {\n    if (flag) {\n      flag = false;\n      vec.push_back(i);\n\
    \    } else {\n      long k = i;\n      for (long j : vec) {\n        if (j ==\
    \ i) {\n          k++;\n        }\n      }\n      vec.push_back(k);\n    }\n \
    \ }\n  std::vector<long> ans;\n  for (long i : vec) {\n    long ans_val = i;\n\
    \    long ans_index = 0;\n    for (long j : vec) {\n      if (j == i) {\n    \
    \    if (j < ans_val) {\n          ans_val = j;\n          ans_index = j;\n  \
    \      }\n      }\n    }\n    if (ans_val % 2 == 0) {\n      ans.push_back(ans_val);\n\
    \      ans.push_back(ans_index);\n    }\n  }\n  return ans;", "    std::vector<long>\
    \ result;\n    long smallest_value = arr[0];\n    long smallest_index = arr[0];\n\
    \    for(auto i=0;i<arr.size();i++) {\n        if(arr[i] != smallest_value &&\
    \ arr[i] % 2 == 0) {\n            smallest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    std::set<long> evens;\n    long smalest_value = 0;\n\
    \    for (auto const& v : arr) evens.insert(v % 2 == 0);\n    if (evens.size()\
    \ == 0) return {};\n    for (auto const& v : arr) smalest_value = std::min(smalest_value,\
    \ v % 2 == 0 ? v : v % 2 + 1);\n    std::vector<long> v;\n    for (auto const&\
    \ v : arr) if (v % 2 == 0) v.push_back(v % 2 == 0);\n    if (v.size() == 0) return\
    \ {};\n    for (auto it = v.begin(); it != v.end(); ++it) std::sort(it);\n   \
    \ std::vector<long>::iterator i = v.begin();\n    while (i != v.end()) if (*i\
    \ < (*i + 1)/2) ++i;\n    return std::move(v);", "  std::sort(arr.begin(), arr.end(),\
    \ std::greater<long>());\n  std::vector<long> index;\n  std::vector<long> result;\n\
    \  // find first even value\n  // if not even then just return the arr\n  if (arr.size()\
    \ % 2 == 0) {\n    int i = 0;\n    long min_even = arr[i] % 2;\n    int size =\
    \ arr.size();\n    for (; i < size; i += 2) {\n      if (arr[i] < min_even &&\
    \ arr[i + 1] < min_even) {\n        break;\n      }\n      min_even = arr[i] %\
    \ 2;\n    }\n    if (i == size) {\n      return arr;\n    }\n    index = {i, i\
    \ + 1};\n    return arr;\n  }\n  long min_even = arr[0] % 2;\n  int size = arr.size();\n\
    \  for (int i = 1; i < size; i += 2) {\n    if (arr[i] < min_even && arr[i + 1]\
    \ < min_even) {\n      break;\n    }\n    min_even = arr[i] % 2;\n  }\n  if (i\
    \ == size) {\n    return arr;\n  }\n  index = {i, i + 1};\n  return arr;", " \
    \   long smallest_even_value = INT_MIN;\n    long smallest_index = INT_MAX;\n\
    \    long value;\n\n    for (long i : arr) {\n        value = i;\n        if (value\
    \ % 2 == 0) {\n            smallest_even_value = value;\n            smallest_index\
    \ = i;\n        } else {\n            if (value < smallest_even_value) {\n   \
    \             smallest_even_value = value;\n                smallest_index = i;\n\
    \            }\n        }\n    }\n\n    std::vector<long> vec;\n    vec.push_back(smallest_even_value);\n\
    \    vec.push_back(smallest_index);\n\n    return vec;", "    assert(arr.size()\
    \ <= 10000);\n    assert(arr.size() == arr.at(0) || arr.at(1) == 0);\n    std::vector<long>\
    \ res;\n    res.push_back(0);\n    long min_val = arr.at(0);\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr.at(i) % 2 == 0) {\n           \
    \ if (min_val > arr.at(i)) {\n                res.push_back(min_val);\n      \
    \          res.push_back(i);\n            }\n            min_val = arr.at(i);\n\
    \        }\n    }\n    return res;", "    // code here\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long temp_val = 0;\n    std::vector<long>\
    \ index;\n    for (long i = 0; i < arr.size(); i++) {\n        temp_val = arr[i];\n\
    \        if (temp_val % 2 == 0) {\n            for (long j = 0; j < arr.size();\
    \ j++) {\n                if (arr[j] > temp_val && arr[j] % 2 == 0) {\n      \
    \              temp_val = arr[j];\n                    smallest_value = temp_val;\n\
    \                    smallest_index = j;\n                }\n            }\n \
    \       } else {\n            for (long j = 0; j < arr.size(); j++) {\n      \
    \          if (arr[j] > temp_val && arr[j] % 2 != 0) {\n                    temp_val\
    \ = arr[j];\n                    smallest_value = temp_val;\n                \
    \    smallest_index = j;\n                }\n            }\n        }\n      \
    \  if (smallest_value != 0) {\n            if (smallest_value == smallest_value)\
    \ {\n                index.push_back(smallest_index);\n            }\n       \
    \ }\n    }\n    return index;", "    // code here\n    long smallest_value = 0;\n\
    \    long smallest_index = 0;\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (auto iter = arr.begin();iter!=arr.end(); ++iter) {\n        if(*iter<smallest_value)\
    \ {\n            smallest_value = *iter;\n            smallest_index = iter -\
    \ arr.begin();\n        }\n        if (*iter == smallest_value){\n           \
    \ smalest_value = *iter;\n            smalest_index = iter - arr.begin();\n  \
    \      }\n    }\n\n    std::vector<long> answer;\n    answer.push_back(smalest_value);\n\
    \    answer.push_back(smalest_index);\n    return answer;", "    std::vector<long>\
    \ results;\n    long smallest_even_value = std::numeric_limits<long>::max();\n\
    \    long smallest_index = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        } else if (arr[i] == smallest_even_value) {\n \
    \           smallest_index = i;\n        }\n    }\n    results.push_back(smallest_even_value);\n\
    \    results.push_back(smallest_index);\n    return results;", "    // code here\n\
    \    std::vector<long> result;\n    int min=INT_MAX;\n    for(auto i:arr)\n  \
    \  {\n        i=i%2==0?i:(i + (i%2));\n        if(i<min)\n        {\n        \
    \    result.emplace_back(i);\n            min=i;\n        }\n    }\n    if(result.size()==0)\n\
    \    {\n        result.emplace_back(0);\n        result.emplace_back(-1);\n  \
    \  }\n    return result;", "    // Your code here\n    int n = arr.size();\n \
    \   if (n == 0)\n        return {};\n\n    std::map<long, int> index_map;\n\n\
    \    for (int i = 0; i <= n; i++) {\n        int curr = arr[i];\n        if (index_map.find(curr)\
    \ == index_map.end())\n            index_map[curr] = i;\n        else if (index_map[curr]\
    \ != i) {\n            int curr = arr[index_map[curr]];\n            int smaller\
    \ = curr;\n            int smaller_index = index_map[curr];\n\n            for\
    \ (int j = i; j < n; j++) {\n                int curr = arr[j];\n            \
    \    int smaller2 = curr;\n                if (index_map.find(smaller2) == index_map.end())\
    \ {\n                    index_map[smaller2] = smaller_index;\n              \
    \      break;\n                }\n                if (smaller2 > smaller) {\n\
    \                    smaller = smaller2;\n                    smaller_index =\
    \ smaller_index;\n                }\n            }\n            index_map[smaller]\
    \ = smaller_index;\n        }\n    }\n\n    std::vector<long> smalest_value(index_map.begin(),\
    \ index_map.end());\n    std::sort(smalest_value.begin(), smalest_value.end());\n\
    \    return smalest_value;", "    // Write your code here\n    auto it = std::min_element(arr.begin(),\
    \ arr.end());\n    return std::vector<long>{*it, std::distance(arr.begin(), it)};",
  "\t// code here\n    long maxIndex = 0;\n    long maxValue = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > maxValue) {\n          \
    \  maxValue = arr[i];\n            maxIndex = i;\n        }\n    }\n    std::vector<long>\
    \ out;\n    out.push_back(maxValue);\n    out.push_back(maxIndex);\n    return\
    \ out;", "    // write your code here\n    int length = arr.size();\n    std::vector<long>\
    \ value;\n    std::vector<long> index;\n    long smallest_value = arr[0];\n  \
    \  int smallest_index = 0;\n    for (int i = 0; i < length; i++) {\n        if\
    \ (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n        \
    \    smallest_index = i;\n        } else if (arr[i] == smallest_value) {\n   \
    \         if (arr[i] % 2 == 0) {\n                index.push_back(smallest_index);\n\
    \                index.push_back(arr.size() - i - 1);\n            }\n       \
    \ }\n    }\n    return index;", "    assert(arr.size() > 0 && arr.size() <= 10000);\n\
    \    std::vector<long> ans;\n    // int val = 0;\n    long smallest_value = 0,\
    \ smallest_index = 0;\n    // int index = 0;\n    for (long x : arr) {\n     \
    \   if (x%2 == 0) {\n            smallest_value = x;\n            smallest_index\
    \ = arr.size();\n            // std::cout << \"smallest value: \" << smallest_value\
    \ << std::endl;\n            // std::cout << \"smallest index: \" << smallest_index\
    \ << std::endl;\n            break;\n        }\n    }\n    ans.push_back(smallest_value);\n\
    \    ans.push_back(smallest_index);\n    return ans;", "    std::vector<long>\
    \ ans;\n    long smalest_val = INT_MAX;\n    long smalest_idx = -1;\n    for(int\
    \ i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(smalest_val==arr[i]){\n\
    \                smalest_val=INT_MAX;\n                smalest_idx=-1;\n     \
    \       }\n            else if(arr[i]<smalest_val){\n                smalest_val=arr[i];\n\
    \                smalest_idx=i;\n            }\n        }\n    }\n    if(smalest_val==INT_MAX){\n\
    \        return ans;\n    }\n    ans.push_back(smalest_val);\n    ans.push_back(smalest_idx);\n\
    \    return ans;", "    std::sort(arr.begin(), arr.end(), std::greater<>());\n\
    \    long long min_even_val = *std::min_element(arr.begin(), arr.end(), [](long\
    \ long i, long long j) {\n        return i % 2 == 0 && j % 2 == 0;\n    });\n\
    \    std::vector<long> res(arr.size(), 0);\n    for (auto i = arr.begin(); i !=\
    \ arr.end(); i++) {\n        long long val_even_val = *i;\n        if (val_even_val\
    \ == min_even_val) {\n            res[val_even_val / 2] += 1;\n        } else\
    \ {\n            res[val_even_val / 2] = 1;\n        }\n    }\n    if (res.empty())\
    \ {\n        return {};\n    } else {\n        return res;\n    }", "  std::sort(arr.begin(),\
    \ arr.end(), [&](int a,int b){\n    return (a%2)==(b%2);\n  });\n  std::map<int,\
    \ std::vector<long> > m;\n  for (auto n : arr) {\n    auto it = m[n];\n    if\
    \ (!it) it = std::vector<long>{n};\n    else it = std::min(it, std::vector<long>{n});\n\
    \    m[n] = it;\n  }\n  std::vector<long> ans;\n  auto it = m.begin();\n  while\
    \ (it != m.end()) {\n    ans.push_back(it->second[0]);\n    it++;\n  }\n  return\
    \ ans;", "    auto less = [](long a, long b) { return a<b; };\n    auto greater\
    \ = [](long a, long b) { return a>b; };\n    auto equal_to = [](long a, long b)\
    \ { return a==b; };\n    std::sort(arr.begin(), arr.end(), less);\n    auto it\
    \ = std::find_if(arr.begin(), arr.end(), equal_to);\n    if (it == arr.end() )\
    \ return {};\n    auto index = std::distance(arr.begin(), it);\n    return { arr[std::distance(arr.begin(),\
    \ it)], index };", "\tstd::vector<long> ans;\n\tstd::set<long> indices;\n\tstd::set<long>::iterator\
    \ it;\n\tlong smallest = -1;\n\tlong smallest_index = -1;\n\tfor(std::vector<long>::iterator\
    \ i=arr.begin();i!=arr.end();++i) {\n\t\tif((*i)%2==0) {\n\t\t\tif((*i)<smallest)\
    \ {\n\t\t\t\tsmallest = (*i);\n\t\t\t\tsmallest_index = indices.begin();\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\tif((*i)>smallest) {\n\t\t\t\t\tsmallest = (*i);\n\t\
    \t\t\t\tsmallest_index = *i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindices.insert(*i);\n\t\
    \t}\n\t}\n\tif(smallest!=-1) {\n\t\tans.push_back(smallest);\n\t\tans.push_back(smallest_index);\n\
    \t}\n\treturn ans;", "    int n = arr.size();\n    int result[n + 1];\n    int\
    \ smallest;\n    for (int i = 0; i < (n + 1) ; i++) {\n        result[i] = i;\n\
    \    }\n    for (int i = 1; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          result[arr[i]] = i;\n        }\n    }\n    for (int i = 0; i <= n;\
    \ i++) {\n        if (result[i] == -1) {\n            result[i] = 0;\n       \
    \ }\n    }\n    smallest = result[0];\n    for (int i = 1; i < n; i++) {\n   \
    \     if (result[i] != -1 && result[i] < smallest) {\n            smallest = result[i];\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (result[i] !=\
    \ -1 && result[i] == smallest) {\n            return { result[i], i };\n     \
    \   }\n    }\n    return {};", "    long smallest_value = INT_MAX, smallest_index\
    \ = -1;\n    for (long i : arr)\n        if (i % 2 == 0 && i > smallest_value)\n\
    \        {\n            smallest_value = i;\n            smallest_index = arr.size()\
    \ - i - 1;\n        }\n    std::vector<long> result;\n    if (arr.size() != 0)\n\
    \    {\n        result.emplace_back(smallest_value, smallest_index);\n    }\n\
    \    return result;", "    std::vector<long> res(arr.size());\n    long min_value\
    \ = 0;\n    long idx = 0;\n    for (long i : arr) {\n        assert(i != 0);\n\
    \        if (min_value == 0) {\n            min_value = i;\n            idx =\
    \ -1;\n        } else if (i == min_value) {\n            idx = i;\n        }\n\
    \    }\n    if (min_value == 0) {\n        return res;\n    }\n\n    long index\
    \ = min_value;\n    for (long i : arr) {\n        if (i != min_value) {\n    \
    \        assert(i != 0);\n            if (i > min_value) {\n                res[index]\
    \ = min_value;\n                index = i;\n                min_value = i;\n \
    \           } else {\n                res[index] = i;\n                index =\
    \ i;\n            }\n        }\n    }\n\n    res.push_back(min_value);\n    res.push_back(idx);\n\
    \    return res;", "    std::vector<long> result;\n    int smallestEvenValue =\
    \ 0, smallestIndex = 0;\n    for (long i : arr) {\n        if (i % 2 == 0) {\n\
    \            if (smallestEvenValue < i) {\n                smallestEvenValue =\
    \ i;\n                smallestIndex = i;\n            }\n        } else {\n  \
    \          if (smallestEvenValue == i) {\n                if (smallestIndex !=\
    \ i) {\n                    smallestIndex = i;\n                }\n          \
    \  }\n        }\n    }\n    if (smallestEvenValue != 0) {\n        result.push_back(smallestEvenValue);\n\
    \        result.push_back(smallestIndex);\n    } else {\n        result.push_back(-1);\n\
    \        result.push_back(-1);\n    }\n    return result;", "  // write your code\
    \ here\n  long ans = 0;\n  int index = 0;\n  long smallest_even = 0;\n  \n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    if(arr[i]%2==0){\n      if(arr[i]<smallest_even){\n\
    \        smallest_even = arr[i];\n        index = i;\n      }\n      ans += arr[i]*i;\n\
    \    }\n  }\n  ans += smallest_even;\n  return std::vector<long>{ans, index};",
  "    std::vector<long> vs;\n    long smalest_value = arr[0];\n    int smallest_index\
    \ = 0;\n    for(long i : arr)\n    {\n        if (i == 0)\n            smallest_index\
    \ = 0;\n        else if (i == smalest_value)\n        {\n            if (smallest_index\
    \ == arr.size() - 1)\n                vs.push_back(i);\n            else if (smallest_index\
    \ == 0)\n                vs.push_back(i);\n        }\n        else if (i != smalest_value)\n\
    \        {\n            smallest_index++;\n        }\n        smalest_value =\
    \ i;\n    }\n    if (vs.empty())\n        return {};\n    return vs;", "  long\
    \ max_value = *std::max_element(arr.begin(), arr.end());\n  long min_value = *std::min_element(arr.begin(),\
    \ arr.end());\n\n  auto it = std::find_if(arr.begin(), arr.end(), [&](long val)\
    \ {\n    return val == min_value || val == max_value;\n  });\n\n  long min_index\
    \ = 0;\n  long min_even_val = min_value;\n  if (it != arr.end()) {\n    min_index\
    \ = *std::min_element(std::next(arr.begin()), it);\n    min_even_val = *it;\n\
    \  }\n\n  std::vector<long> result;\n  result.push_back(min_even_val);\n  result.push_back(min_index);\n\
    \n  return result;", "    std::map<long, std::pair<long, int> > index_to_value;\n\
    \    for (auto i = 0; i < arr.size(); i++) {\n        index_to_value[arr[i]].first\
    \ = arr[i];\n        index_to_value[arr[i]].second = i;\n    }\n\n    // initialize\
    \ min_value\n    auto it = index_to_value.begin();\n    long min_value = it->first;\n\
    \    int min_index = it->second;\n\n    std::vector<long> res;\n    std::pair<long,\
    \ int> temp;\n\n    // find the minimum value\n    it = index_to_value.find(min_value);\n\
    \    if (it != index_to_value.end()) {\n        temp = it->second;\n        min_index\
    \ = temp.second;\n        min_value = temp.first;\n    }\n    res.push_back(min_value);\n\
    \    res.push_back(min_index);\n\n    // sort the index list\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    int N = arr.size();\n    if (N == 0)\n \
    \       return {};\n    std::vector<std::pair<long, int> > min_index;\n    std::pair<long,\
    \ int> smallest;\n    for (int i = 0; i < N; i++) {\n        if (arr[i] % 2 !=\
    \ 0)\n            continue;\n        min = i;\n        min_index = std::make_pair(min,\
    \ i);\n        for (int j = i + 1; j < N; j++) {\n            if (arr[j] % 2 !=\
    \ 0)\n                continue;\n            if (arr[j] < arr[min]) {\n      \
    \          min = j;\n                min_index = std::make_pair(min, j);\n   \
    \         }\n        }\n        smallest = min_index;\n    }\n    if (smallest.first\
    \ == 0)\n        return {};\n    return std::list<long>({ smallest.second, smallest.first\
    \ });", "    if(arr.empty())\n        return {};\n    std::vector<long> res;\n\
    \    long smalest_value = 0;\n    long min_index = LONG_MAX;\n    int min_even\
    \ = -1;\n    for(size_t i=0; i<arr.size(); i++) {\n        if(arr[i] % 2 != 0)\n\
    \            continue;\n        if(arr[i] < min_index && arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            min_even = i;\n        \
    \    min_index = arr[i];\n        } else if(arr[i] == min_index && arr[i] < smalest_value)\
    \ {\n            min_index = arr[i];\n        }\n    }\n    if(min_index == LONG_MAX)\n\
    \        return {};\n    res.push_back(smalest_value);\n    res.push_back(min_index);\n\
    \    return res;", "    long smallest_value = arr[0];\n    std::vector<long> v;\n\
    \    for (size_t i = 0; i < arr.size(); ++i) {\n        if (arr[i] > smallest_value)\
    \ {\n            smallest_value = arr[i];\n            v.push_back(arr[i]);\n\
    \        }\n        if (arr[i] == smallest_value && arr[i] % 2 == 0) {\n     \
    \       v.push_back(i);\n        }\n    }\n    if (v.size() == 0) return v;\n\
    \    else return v[std::min_element(v.begin(), v.end()) - v.begin()];", "    auto\
    \ it = min_element(arr.begin(), arr.end());\n    auto size = arr.size();\n   \
    \ if (it == arr.end()) {\n        return {};\n    }\n    auto curr = it;\n   \
    \ std::advance(it, 2);\n    auto min_val = *curr;\n    std::vector<long> ans;\n\
    \    ans.push_back(min_val);\n    ans.push_back(curr - arr.begin());\n    size_t\
    \ ind = 0;\n    for (size_t i = 0; i < size - 1; i++) {\n        if (arr[i] !=\
    \ min_val) {\n            std::advance(it, 1);\n            curr = it;\n     \
    \       ans.push_back(*curr );\n            ans.push_back(ind - i);\n        \
    \    ind = i;\n        }\n    }\n    return ans;", "    // Write your code here.\n\
    \    if(arr.empty())\n        return {};\n    long min_even_val = 0;\n    long\
    \ min_even_val_pos_index = 0;\n    long min_even_val_pos_index = arr.size();\n\
    \    for (auto itr = arr.begin(); itr != arr.end(); ++itr)\n    {\n        long\
    \ val = itr->value;\n        if (val % 2 == 0 && val < min_even_val)\n       \
    \ {\n            min_even_val = val;\n            min_even_val_pos_index = itr\
    \ - arr.begin();\n        }\n    }\n    if (min_even_val == 0)\n        return\
    \ {};\n    return std::vector<long>{min_even_val, min_even_val_pos_index};", " \
    \   sort(arr.begin(), arr.end());\n    std::vector<long> res(arr.size(), 0);\n\
    \    long smalest_value, smalest_index;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        smalest_value = i;\n        smalest_index = 0;\n        for (int\
    \ j = i + 1; j < arr.size(); j++) {\n            if (arr[j] % 2 == 0) {\n    \
    \            if (smalest_value > arr[j]) {\n                    smalest_value\
    \ = arr[j];\n                    smalest_index = j;\n                }\n     \
    \       }\n        }\n        res[smalest_index] = smalest_value;\n    }\n   \
    \ return res;", "        long smallest_value = 0, smallest_index = -1;\n     \
    \   long min_odd_value = 0;\n        for(long n : arr){\n                if(n\
    \ % 2 == 1) min_odd_value = n;\n                if(n<smallest_value){\n      \
    \                  smallest_value = n;\n                        smallest_index\
    \ = arr.find(n);\n                }\n        }\n        if(smallest_value == 0)\
    \ return std::vector<long>();\n        std::vector<long> res;\n        res.push_back(smallest_value);\n\
    \        res.push_back(smallest_index);\n        res.push_back(min_odd_value);\n\
    \        return res;", "    std::vector<long> ans;\n    ans.reserve(arr.size());\n\
    \n    auto it = arr.begin();\n    long long ans = 0;\n\n    while (it != arr.end())\
    \ {\n        if (*it % 2 == 0) {\n            ans += *it;\n        }\n       \
    \ ++it;\n    }\n    ans.push_back(ans);\n    return ans;", "    std::vector<long>\
    \ res;\n    long smalest_value = 0;\n    int smalest_index = -1;\n    for (auto\
    \ &i : arr)\n        if (i & 1)\n            smalest_value = i;\n        else\n\
    \        {\n            if (smalest_value == 0)\n                smalest_index\
    \ = i;\n            else\n            {\n                if (smalest_value < i)\n\
    \                {\n                    smalest_value = i;\n                 \
    \   smalest_index = i;\n                }\n            }\n        }\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // code here\n    if(arr.size()\
    \ == 0)\n    {\n        return {};\n    }\n    long smallest = arr[0];\n    int\
    \ index = 0;\n    for(int i = 1; i < arr.size(); i++)\n    {\n        if(arr[i]\
    \ < smallest)\n        {\n            smallest = arr[i];\n            index =\
    \ i;\n        }\n    }\n    std::vector<long> vec;\n    vec.push_back(smallest);\n\
    \    vec.push_back(index);\n    return vec;", "    auto result = std::list<long>{};\n\
    \    std::vector<bool> visited(arr.size(), false);\n\n    for (auto i : arr) {\n\
    \        auto node = i;\n        visited[node] = true;\n        auto curr = result;\n\
    \        while (!visited[curr->back()] && curr->back() != node) {\n          \
    \  curr->pop_front();\n        }\n        visited[node] = false;\n        curr->push_back(node);\n\
    \    }\n    return std::move(result);", "    // Write your code here\n    int\
    \ n = arr.size();\n    long smalest_value = 0;\n    int smalest_index = 0;\n \
    \   int k = n;\n    long sum = 0;\n    std::vector<long> v;\n    while (k > 1)\
    \ {\n        sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum\
    \ += arr[i];\n        }\n        if (sum % 2 == 0) {\n            smalest_value\
    \ = sum / 2;\n            smalest_index = i;\n        }\n        k--;\n    }\n\
    \    for (int i = 0; i < k; i++) {\n        if (arr[i] % 2 == 0) {\n         \
    \   v.push_back(arr[i]);\n        }\n    }\n    std::vector<long> w;\n    for\
    \ (int i = 0; i < k; i++) {\n        if (arr[i] % 2 == 0) {\n            w.push_back(arr[i]);\n\
    \        }\n    }\n    if (v.size() > 0) {\n        w.push_back(v[0]);\n    }\n\
    \    return w;", "    // Your code here\n    long counter = 0;\n    long min_val\
    \ = 0;\n    int min_idx = 0;\n    for (long i = 0; i < arr.size(); i++) {\n  \
    \      counter += arr[i];\n        if (counter % 2 != 0){\n            min_val\
    \ = counter;\n            min_idx = i;\n        }\n        counter /= 2;\n   \
    \ }\n    std::vector<long> v;\n    if (min_val == 0)\n        return v;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0){\n           \
    \ v.push_back(arr[min_idx]);\n        }\n    }\n    long counter = 1;\n    for\
    \ (long i = 0; i < arr.size(); i++){\n        counter += arr[i];\n        if (counter\
    \ % 2 != 0){\n            v.push_back(counter);\n        }\n        counter /=\
    \ 2;\n    }\n    return v;", "    if(arr.size() == 0)\n        return {};\n  \
    \  std::vector<std::pair<long, long> > min;\n    long curr = 0, ans = 0, i = 0;\n\
    \    for(i = 0; i < arr.size(); i++) {\n        if(arr[i] < curr) {\n        \
    \    curr = arr[i];\n            ans = i;\n        }\n        else if(arr[i] ==\
    \ curr) {\n            min.push_back(std::make_pair(arr[i], i));\n        }\n\
    \    }\n    if(min.size() <= 1) {\n        return std::vector<long>();\n    }\n\
    \    std::vector<long> answer;\n    for(size_t i = 0; i < min.size() - 1; i++)\n\
    \        answer.push_back(min[i].first);\n    answer.push_back(min[min.size()\
    \ - 1].first);\n    return answer;", "    int n = arr.size();\n    \n    int min_value\
    \ = INT_MAX;\n    int index;\n    \n    for (int i = 0; i < n; i++) {\n      \
    \  if (arr[i] % 2 != 0) {\n            min_value = std::min(min_value, arr[i]);\n\
    \            index = i;\n        }\n    }\n    \n    std::vector<long> res;\n\
    \    res.push_back((min_value));\n    res.push_back(index);\n    \n    return\
    \ res;", "    assert(arr.size() != 0);\n    long maxValue = arr[0];\n    long\
    \ maxIndex = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long current\
    \ = arr[i];\n        if (current > maxValue) {\n            maxValue = current;\n\
    \            maxIndex = i;\n        } else if (current == maxValue) {\n      \
    \      maxIndex = i;\n        }\n    }\n    std::vector<long> res;\n    if (maxValue\
    \ % 2 == 0) {\n        res.push_back(maxValue);\n        res.push_back(maxIndex);\n\
    \    } else {\n        res.push_back(maxIndex + 2);\n        res.push_back(minIndex\
    \ - 2);\n    }\n    return res;", "    // write your code here\n    long n = 0;\n\
    \    std::vector<long> v;\n    for (long i : arr) {\n        if (i % 2 == 0 &&\
    \ n != 0) {\n            v.push_back(n);\n        }\n        n = i;\n    }\n \
    \   if (v.size() == 0) return v;\n    long long max = 0;\n    for (long i : v)\
    \ {\n        if (i > max) max = i;\n    }\n    v.clear();\n    for (long i : arr)\
    \ {\n        if (i % 2 == 0 && n != 0) {\n            if (n % 2 == 0) {\n    \
    \            v.push_back(i);\n            }\n            n /= 2;\n        }\n\
    \    }\n    if (v.size() == 0) return v;\n    long long i = 0;\n    std::vector<long>\
    \ res;\n    for (; i < v.size(); i++) {\n        if (v[i] < max) {\n         \
    \   break;\n        }\n    }\n    res.push_back(v[i]);\n    res.push_back(i);\n\
    \    return res;", "    long min = arr[0];\n    long index = arr[0];\n    bool\
    \ flag = false;\n    for(long i: arr) {\n        if (i % 2 == 0) {\n         \
    \   if (i == min) {\n                flag = true;\n            }\n           \
    \ if (flag == true) {\n                min = i;\n                index = i;\n\
    \            }\n        } else {\n            if (i == min) {\n              \
    \  flag = true;\n            }\n        }\n    }\n    if (flag == true) {\n  \
    \      std::vector<long> res;\n        res.push_back(min);\n        res.push_back(index);\n\
    \        return res;\n    }\n    return std::vector<long>();", "    int size =\
    \ arr.size();\n    std::sort(arr.begin(), arr.end());\n    if (size == 0) {\n\
    \        return std::vector<long>();\n    }\n    std::vector<long> result;\n \
    \   int index = 0;\n    int size = arr.size();\n    while (size > 0) {\n     \
    \   if (arr[size] % 2 != 0) {\n            result.push_back(arr[size]);\n    \
    \        index++;\n            size--;\n        } else {\n            size--;\n\
    \        }\n    }\n    result.push_back(arr[0]);\n    return result;", "    std::vector<long>\
    \ result;\n    long temp;\n    result.push_back(0);\n    long idx = 0;\n    //\
    \ std::sort(arr.begin(), arr.end()); // not necessary\n    for (auto i : arr){\n\
    \        if (i % 2 == 0){\n            temp = i;\n            while (idx != result.size()\
    \ && result[idx] == 0){\n                ++idx;\n            }\n            result.push_back(temp);\n\
    \            idx = 0;\n        }\n        else {\n            ++idx;\n       \
    \ }\n    }\n    if (result.size() == 0)\n        return result;\n    if (result.size()\
    \ == 1){\n        return result[0];\n    }\n    long min_value = result[0];\n\
    \    long min_idx = 0;\n    for (long i = 1;i < result.size();++i){\n        if\
    \ (result[i] < min_value){\n            min_value = result[i];\n            min_idx\
    \ = i;\n        }\n    }\n    result.erase(result.begin() + min_idx);\n    if\
    \ (min_idx != 0)\n        result.push_back(result[0]);\n    return result;", " \
    \   // write your code here\n    long min_even_val = 0, min_even_val_sofar = 0,\
    \ min_even_val_index = 0;\n    long i = 0;\n    while (i + 1 < arr.size()) {\n\
    \        if (arr[i] < arr[i + 1]) {\n            i++;\n            continue;\n\
    \        } else if (arr[i] == arr[i + 1]) {\n            i++;\n            long\
    \ a = arr[i] % 2;\n            if (a < min_even_val) {\n                min_even_val\
    \ = a;\n                min_even_val_sofar = arr[i];\n                min_even_val_index\
    \ = i;\n            } else if (a > min_even_val) {\n                min_even_val_index\
    \ = i;\n            }\n            i++;\n        } else {\n            i++;\n\
    \        }\n    }\n\n    std::vector<long> ans;\n    if (min_even_val_index !=\
    \ arr.size() - 1) {\n        ans.push_back(min_even_val);\n        ans.push_back(min_even_val_index);\n\
    \    }\n    return ans;", "    long smalest_value = arr[0], smalest_index = 0;\n\
    \    std::map<long, int> m; \n    for (long i: arr) { m[i] = 1; }\n    for (auto\
    \ i: m) { if (i.second) smalest_value = i.first; smalest_index = i.second; }\n\
    \    std::vector<long> res;\n    if (arr.size() == 0 || smalest_value % 2 == 0)\
    \ {\n        return res;\n    }\n    for (long i = 0; i < arr.size(); ++i) {\n\
    \        if (m.count(arr[i]) && (m[i] == 0)) {\n            auto it = m.find(arr[i]);\n\
    \            if (it != m.end() && it->second == 1) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = it->second;\n            } else {\n\
    \                res.push_back(arr[i]);\n            }\n        } else {\n   \
    \         res.push_back(arr[i]);\n        }\n    }\n    return res;", "    //\
    \ code here\n    std::vector<long> v;\n    std::vector<long> smallest_values;\n\
    \    for (long i : arr) {\n        if (i.to_ulong() % 2 == 0) {\n            v.push_back(i);\n\
    \        }\n        else {\n            if (v.size() != 0) {\n               \
    \ if (v.back() % 2 == 0 && v[v.size() - 1] % 2 == 0) {\n                    if\
    \ (v.size() < smallest_values.size()) {\n                        smallest_values.resize(v.size());\n\
    \                    }\n                    smallest_values.push_back(v.back());\n\
    \                }\n            }\n        }\n    }\n    if (v.size() == 0) {\n\
    \        return v;\n    }\n    if (smallest_values.size() == 0) {\n        return\
    \ v;\n    }\n    long smallest_value = *std::min_element(smallest_values.begin(),\
    \ smallest_values.end());\n    auto it = smallest_values.begin();\n    for (size_t\
    \ i = 0; i < v.size(); i++) {\n        if (v[i].to_ulong() % 2 == 0 && smallest_value\
    \ % 2 == 0) {\n            assert(v[i] <= smallest_value);\n            assert(v[v.size()\
    \ - i - 1] <= smallest_value);\n            assert(v[v.size() - i - 1] <= v[i]);\n\
    \            smallest_value = v[i];\n            it = i;\n        }\n    }\n \
    \   assert(*it % 2 == 0);\n    return v;", "    // write your code here\n    std::stack<long>\
    \ indexStack;\n    std::stack<long> valueStack;\n    std::vector<long> result;\n\
    \    long index = 0;\n    long value = arr[arr.size() - 1];\n    for (auto i =\
    \ arr.begin(); i != arr.end(); ++i) {\n        if (*i & 1 == 0 && value < arr[*i])\
    \ {\n            valueStack.push(value);\n            indexStack.push(index);\n\
    \            value = arr[*i];\n            index = *i;\n        } else if (value\
    \ == arr[*i]) {\n            valueStack.push(value);\n            indexStack.push(index);\n\
    \            value = arr[*i];\n            index = *i;\n        } else {\n   \
    \         if (valueStack.empty())\n                break;\n            else\n\
    \                value = valueStack.top();\n            index = indexStack.top();\n\
    \            valueStack.pop();\n            indexStack.pop();\n        }\n   \
    \ }\n    if (!valueStack.empty()) {\n        value = valueStack.top();\n     \
    \   index = indexStack.top();\n        valueStack.pop();\n        indexStack.pop();\n\
    \    }\n    for (auto i = arr.begin(); i != arr.end(); ++i) {\n        if (*i\
    \ & 1 == 0) {\n            result.push_back(value);\n            result.push_back(index);\n\
    \        }\n    }\n    return result;", "    // code here\n    std::map<long,\
    \ int> map;\n    std::set<int> value;\n    long smalest_value = 0, smalest_index\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i])\
    \ == map.end()) {\n            map[arr[i]] = 1;\n            value.insert(arr[i]);\n\
    \        } else {\n            map[arr[i]]++;\n        }\n    }\n    for (auto\
    \ it = map.begin(); it != map.end(); ++it) {\n        if (it->second > 1) {\n\
    \            smalest_value = it->first;\n            smalest_index = it->second;\n\
    \        }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n\
    \    std::vector<long> v;\n    v.push_back(smalest_value);\n    v.push_back(smalest_index);\n\
    \    return v;", "    if (arr.size() <= 0) {\n        return {};\n    }\n    auto\
    \ smallest = {}, index = {};\n    for (auto i : arr) {\n        if ((i % 2) !=\
    \ 0) {\n            if (smallest.second == 0) {\n                smallest.first\
    \ = i;\n                smallest.second = i;\n                index.first = 0;\n\
    \                index.second = 0;\n            }\n            else {\n      \
    \          if (smallest.second > i) {\n                    smallest.second = i;\n\
    \                    index.second = i;\n                }\n            }\n   \
    \     }\n        else {\n            if (index.first > i) {\n                index.first\
    \ = i;\n                index.second = i;\n            }\n        }\n    }\n \
    \   return {smallest.second, index.first};", "    int n = arr.size();\n    std::vector<long>\
    \ ans;\n    int smalest_val = 0, smallest_idx = -1;\n    for (int i = 0; i < n;\
    \ i++) {\n        int val = arr[i];\n        if (val % 2 == 0) {\n           \
    \ if (smalest_val < val) {\n                smalest_val = val;\n             \
    \   smallest_idx = i;\n            }\n        }\n    }\n    ans.push_back(smalest_val);\n\
    \    ans.push_back(smallest_idx);\n    return ans;", "    int n = arr.size();\n\
    \    std::priority_queue<long> st;\n    int ans = -1;\n    for (int i = 0; i <\
    \ n; i++) {\n        st.push(arr[i]);\n    }\n\n    while (!st.empty()) {\n  \
    \      long val = st.top();\n        st.pop();\n        if (val % 2 == 0) {\n\
    \            ans++;\n        }\n        else {\n            ans--;\n        }\n\
    \        st.push(val);\n    }\n    std::vector<long> res;\n    if (ans < 0) {\n\
    \        return res;\n    }\n    res.push_back(ans);\n    st.pop();\n    while\
    \ (!st.empty()) {\n        long val = st.top();\n        res.push_back(val);\n\
    \        st.pop();\n    }\n    return res;", "    // write your code here\n  \
    \  assert(arr.size() != 0);\n    std::vector<long> out;\n    long smallest_value;\n\
    \    long index = 0;\n    for (long i : arr) {\n        if ((i % 2) == 0) {\n\
    \            smallest_value = i;\n            index = 0;\n        }\n    }\n \
    \   std::set<long> seen;\n    out.push_back(smallest_value);\n    seen.insert(smallest_value);\n\
    \    std::vector<long> smallest_values;\n    std::vector<long> index;\n    \n\
    \    for (long i : arr) {\n        if ((i % 2) == 0) {\n            if (!seen.count(i))\
    \ {\n                seen.insert(i);\n                out.push_back(smallest_value);\n\
    \                index.push_back(index);\n                smallest_values.push_back(smallest_value);\n\
    \                smallest_values.push_back(index);\n            } else {\n   \
    \             auto it=seen.find(i);\n                smallest_values[index[0]]\
    \ = i;\n                index[index[0]] = index;\n                seen.erase(it);\n\
    \            }\n        }\n    }\n    return out;", "    long smalest_value=0;\n\
    \    long index = 0;\n    long smalest_value_even = 0;\n    long smalest_index_even\
    \ = 0;\n    int n = arr.size();\n    for (int i = 0; i < n; i++){\n        if(arr[i]%2==0){\n\
    \            if(arr[i]>smalest_value_even){\n                smalest_value_even=arr[i];\n\
    \                smalest_index_even = i;\n            }\n        }\n        else{\n\
    \            if(arr[i]>smalest_value){\n                smalest_value=arr[i];\n\
    \                index=i;\n            }\n        }\n    }\n    \n    return {smalest_value,index};",
  "    std::vector<long> result;\n    long min_value = arr[0];\n    long min_index\
    \ = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i] < min_value)\
    \ {\n            min_value = arr[i];\n            min_index = i;\n        }\n\
    \    }\n    auto itr = std::min_element(arr.begin(), arr.end(), [&](long a, long\
    \ b){return a<b;});\n    result.push_back(min_value);\n    result.push_back(min_index);\n\
    \    std::reverse(arr.begin(), itr);\n    return result;", "    // write your\
    \ code here\n    assert(arr.size() != 0);\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        smalest_value\
    \ = std::min(smalest_value, arr[i]);\n        smalest_index = i;\n    }\n    long\
    \ smalest_value2 = arr[0];\n    long smalest_index2 = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > smalest_value) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n            smalest_value2 = arr[i];\n\
    \            smalest_index2 = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value == smalest_value2) {\n        result.push_back(smalest_value2);\n\
    \        result.push_back(smalest_index2);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_val = std::numeric_limits<long>::max();\n\
    \    int smalest_idx = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < smalest_val) {\n            smalest_val =\
    \ arr[i];\n            smalest_idx = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_idx != -1) {\n        result.push_back(smalest_val);\n\
    \        result.push_back(smalest_idx);\n    }\n    return result;", "    long\
    \ max_val = *std::max_element(arr.begin(), arr.end()); // finds the highest value\n\
    \    long min_val = *std::min_element(arr.begin(), arr.end()); // finds the lowest\
    \ value\n\n    long max_even_index = -1;\n    long min_even_index = -1;\n    for\
    \ (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n       \
    \     if (arr[i] < min_val) {\n                min_val = arr[i];\n           \
    \     min_even_index = i;\n            }\n            else if (arr[i] > max_val)\
    \ { // this ensures that the first even value we find is always the smallest\n\
    \                max_even_index = i;\n                max_val = arr[i];\n    \
    \        }\n        }\n    }\n    if (max_even_index == -1)\n        return std::vector<long>();\n\
    \    else\n        return { max_val, max_even_index };", "    long smalest_value;\n\
    \    long smalest_index;\n    long curr_index;\n    for (auto it1 = arr.begin();\
    \ it1 != arr.end(); ++it1){\n        curr_index = it1 - arr.begin();\n       \
    \ if (it1 % 2 == 0){\n            smalest_value = *it1;\n            smalest_index\
    \ = curr_index;\n        }\n    }\n    if (smalest_value == 0){\n        return\
    \ std::vector<long>{};\n    }\n    std::vector<long> ans = {smalest_value, smalest_index};\n\
    \    return ans;", "    int n = arr.size();\n    if (n == 0) {\n        return\
    \ {};\n    }\n    int min = arr[0];\n    std::vector<long> minindexes(n);\n  \
    \  long minindex = 0;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] <\
    \ min) {\n            min = arr[i];\n            minindex = i;\n        }\n  \
    \  }\n    if (minindex < (int) (n/2))\n        minindex = (int) (n/2);\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == min) {\n \
    \           result.push_back(i);\n        }\n    }\n    return result;", "   \
    \ long smalest_value = arr[0], index_of_smallest_value = -1, smallest_value_found_at\
    \ = -1;\n    for (long &node: arr) {\n        if (smallest_value_found_at < 0\
    \ || smallest_value_found_at > node) {\n            smallest_value_found_at =\
    \ node;\n            index_of_smallest_value = -1;\n        }\n        if (node\
    \ % 2 == 0) {\n            smallest_value_found_at = node;\n            index_of_smallest_value\
    \ = node;\n        }\n        if (node < smalest_value) smalest_value = node;\n\
    \    }\n    \n    std::vector<long> output = {smalest_value, index_of_smallest_value};\n\
    \    if (index_of_smallest_value == -1) return {0L, -1L};\n    if (index_of_smallest_value\
    \ > arr.size()) return output;\n    \n    return pluck(arr[index_of_smallest_value\
    \ + 1]) + output;", "    long max_val = 0, index = 0, smalest_val = 0, smalest_index\
    \ = 0;\n    std::vector<long> ret;\n    for (auto i : arr) {\n        if ((i %\
    \ 2) == 0) {\n            if (max_val == 0 && i == 0) {\n                return\
    \ ret;\n            }\n            if (max_val < i) {\n                max_val\
    \ = i;\n                smalest_val = max_val;\n                smalest_index\
    \ = index;\n            }\n        }\n        else {\n            index++;\n \
    \       }\n    }\n    if (max_val == 0) {\n        return ret;\n    }\n    ret.resize(1);\n\
    \    ret[0] = smalest_val;\n    ret[1] = smalest_index;\n    return ret;", " \
    \   auto it=std::min_element(arr.begin(),arr.end());\n    std::sort(arr.begin(),arr.end());\n\
    \    auto it=std::min_element(arr.begin(),arr.end());\n    auto it1=std::find(arr.begin(),arr.end(),it);\n\
    \    long smalest_value=arr[it];\n    long smalest_index=it1;\n    return std::vector<long>{smalest_value,smalest_index};",
  "    std::map<long, std::vector<long> > even;\n    std::vector<long> evenindex;\n\
    \    // Sort the array first so we can grab the smallest even value.\n    std::sort(arr.begin(),\
    \ arr.end());\n    long smalest_value = arr.front();\n    even[smalest_value]\
    \ = arr;\n    // Now we find our first even value\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            even[arr[i]].push_back(i);\n\
    \        }\n    }\n    // If our even value is not in the map, we are done\n \
    \   if(even.find(smalest_value) == even.end()) {\n        return even;\n    }\n\
    \    // Grab the first value in the map that matches the smallest even value\n\
    \    std::vector<long> first_match;\n    for(auto it = even.begin(); it != even.end();\
    \ ++it) {\n        if(it->second.size() == 0) {\n            return even;\n  \
    \      }\n        if(it->second.front() == smalest_value) {\n            first_match\
    \ = it->second;\n        }\n    }\n    // If there is no even value that matches\
    \ the smallest even value, we return an empty vector\n    if(first_match.size()\
    \ == 0) {\n        return even;\n    }\n    // Now we need to find the smallest\
    \ index in the list of indices of our first value\n    for(long i = 0; i < first_match.size();\
    \ i++) {\n        evenindex.push_back(first_match[i]);\n    }\n    // Now we need\
    \ to loop through the map to find the smallest value\n    for(auto it = even.begin();\
    \ it != even.end(); ++it) {\n        std::vector<long> second_match;\n       \
    \ for(long j = 0; j < it->second.size(); j++) {\n            if(evenindex.front()\
    \ == it->second[j]) {\n                second_match.push_back(j);\n          \
    \  }\n        }\n        even.erase(it);\n        if(second_match.size() == 0)\
    \ {\n            even[smalest_value] = it->second;\n        } else {\n       \
    \     even[smalest_value].insert(second_match.begin(), second_match.end());\n\
    \        }\n    }\n    return even;", "    // Your code here\n    std::vector<long>\
    \ out;\n    if(arr.size() == 0 || arr.front() % 2 == 0) {\n        out.push_back(arr.front());\n\
    \        out.push_back(arr.size());\n        return out;\n    }\n\n    int min\
    \ = std::numeric_limits<int>::max();\n    long smallest = 0;\n    int index =\
    \ 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n            min = arr[i];\n            smallest = i;\n    \
    \        index = i;\n        }\n    }\n\n    out.push_back(min);\n    out.push_back(index);\n\
    \    return out;", "    long k = 1;\n    long min = std::numeric_limits<long>::max();\n\
    \    long min_even = std::numeric_limits<long>::max();\n    int n = arr.size();\n\
    \    long min_index = 0;\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[i]\
    \ % 2 == 0) {\n            k = k * arr[i] + arr[i];\n            if(k < min) {\n\
    \                min = k;\n                min_even = arr[i];\n              \
    \  min_index = i;\n            }\n            k /= 2;\n        }\n    }\n    \n\
    \    std::vector<long> arr1 = {min_even, min_index};\n    arr1.sort();\n    return\
    \ arr1;", "    long smalest_value;\n    int index = arr.size() - 1;\n    int min_pos\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (i == min_pos) {\n                smalest_value = arr[i];\n\
    \                index = i;\n            }\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                min_pos = i;\n \
    \           }\n        }\n    }\n    std::vector<long> result;\n    if (min_pos\
    \ != arr.size() - 1) {\n        result.push_back(smalest_value);\n        result.push_back(arr[min_pos]);\n\
    \    } else {\n        result.push_back(smalest_value);\n    }\n    return result;",
  "    long even = *std::min_element(arr.begin(), arr.end());\n    long i = 0;\n \
    \   while (i < arr.size() && arr[i] % 2 == 0) {\n        even = arr[i];\n    \
    \    i++;\n    }\n    if (i < arr.size() && arr[i] == even) {\n        // arr[i]\
    \ is the current node\n        std::list<long> result;\n        result.push_back(arr[i]);\n\
    \        while (i + 1 < arr.size() && arr[i + 1] % 2 == 0) {\n            result.push_back(arr[i\
    \ + 1]);\n            i++;\n        }\n        if (i < arr.size() && arr[i] ==\
    \ even) {\n            // arr[i] is the current node\n            result.push_back(arr[i]);\n\
    \        }\n        std::reverse(result.begin(), result.end());\n        return\
    \ result;\n    } else {\n        return {};\n    }", "    // Write your code here\n\
    \    int smallest = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] != 0 && smallest == -1 || arr[i] < arr[smallest]) {\n            smallest\
    \ = i;\n        }\n    }\n\n    if (smallest == -1) {\n        return {};\n  \
    \  }\n\n    std::vector<long> ans;\n    ans.push_back(arr[smallest]);\n    int\
    \ count = smallest;\n    for (int i = smallest + 1; i < arr.size(); i++) {\n \
    \       if (arr[i] != 0 && arr[count] % 2 == 0) {\n            ans.push_back(arr[i]);\n\
    \            count++;\n        }\n    }\n\n    return ans;", "    assert(arr.size()\
    \ > 0);\n    if (arr.empty()) return {0, 0};\n    long max_val = arr[0];\n   \
    \ int max_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_index = i;\n  \
    \      }\n    }\n    return {max_val, max_index};", "    auto sorted = arr;\n\
    \    std::sort(sorted.begin(), sorted.end());\n    long value = 0;\n    for (auto\
    \ i : sorted) {\n        if (i%2 == 0) {\n            value = i;\n           \
    \ break;\n        }\n    }\n    if (value == 0) return std::vector<long>();\n\
    \    auto found = std::lower_bound(sorted.begin(), sorted.end(), value);\n   \
    \ if (found != sorted.end()) {\n        std::vector<long> res;\n        res.push_back(value\
    \ - found);\n        res.push_back(std::distance(sorted.begin(), found));\n  \
    \      return res;\n    } else {\n        return std::vector<long>();\n    }",
  "  if(arr.empty())\n    return {};\n  long smallestEven = arr[0];\n  int smallestIndex\
    \ = 0;\n  for(long i : arr)\n    if(i%2==0 && i<smallestEven)\n      smallestEven\
    \ = i;\n    else if(i==smallestEven)\n      smallestIndex++;\n  std::vector<long>\
    \ out;\n  out.push_back(smallestEven);\n  out.push_back(smallestIndex);\n  return\
    \ out;", "    std::vector<long> ans;\n    long smalest_value = INT_MIN;\n    int\
    \ smalest_index = -1;\n    for (int i = 0; i < (int) arr.size(); ++i) {\n    \
    \    ans.push_back(arr[i]);\n        if (arr[i] < smalest_value) {\n         \
    \   smalest_value = arr[i];\n            smalest_index = i;\n        }\n    }\n\
    \    if (smalest_index >= 0) {\n        return ans;\n    }\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    return ans;", "    // code here\n    std::vector<long>\
    \ result;\n    auto min_index = std::min_element(arr.begin(), arr.end());\n  \
    \  result.push_back(min_index->second);\n    return result;", "    if(arr.empty())\
    \ return {};\n    long smallest_even_val = std::numeric_limits<long>::max();\n\
    \    std::vector<long> res;\n    std::pair<long, long> smallest_pair = std::make_pair(std::numeric_limits<long>::max(),\
    \ -1);\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0\
    \ && arr[i] <= smallest_even_val) {\n            smallest_pair = std::make_pair(arr[i],\
    \ i);\n            smallest_even_val = arr[i];\n        } else if(arr[i] % 2 ==\
    \ 0 && arr[i] > smallest_even_val && arr[i] != 0) {\n            auto it = std::lower_bound(std::begin(arr),\
    \ std::end(arr), smallest_pair);\n            res.push_back(arr[i] - 2 * arr[i]\
    \ - arr[it - arr.begin()]);\n            smallest_pair = std::make_pair(arr[i],\
    \ it - arr.begin());\n            smallest_even_val = arr[i];\n        }\n   \
    \ }\n    if(smallest_even_val == 0) {\n        res.push_back(0);\n        smallest_pair\
    \ = std::make_pair(std::numeric_limits<long>::max(), -1);\n    }\n    res.push_back(smallest_even_val);\n\
    \    res.push_back(smallest_pair.second);\n    return res;", "    std::vector<long>\
    \ output;\n    std::vector<int> idx;\n    int sz = arr.size();\n    int smallest\
    \ = 0;\n    long smalest_val = arr[0];\n    long smalest_idx = arr[0];\n    for\
    \ (int i = 0; i < sz; i++) {\n        if (arr[i] > arr[smallest] && arr[i] % 2\
    \ == 0) {\n            smallest = i;\n            smalest_val = arr[i];\n    \
    \    }\n    }\n    int curr_idx = 0;\n    while (arr[curr_idx] != arr[smallest])\
    \ {\n        if (arr[curr_idx] % 2 != 0) {\n            output.push_back(arr[curr_idx]);\n\
    \            idx.push_back(curr_idx);\n        }\n        curr_idx++;\n    }\n\
    \    output.push_back(arr[smallest]);\n    idx.push_back(curr_idx - 1);\n    return\
    \ output;", "    assert(arr.size() != 0);\n    int size = arr.size();\n    int\
    \ min_val = arr[0];\n    int index = 0;\n    int min_index = -1;\n    int max_index;\n\
    \    int max_val;\n    for (int i = 0; i < size; i++) {\n        // Check if current\
    \ element is smaller then the current minimum\n        if (arr[i] < min_val) {\n\
    \            min_val = arr[i];\n            min_index = i;\n        }\n      \
    \  // Check if current element is smaller than the current minimum\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_index =\
    \ i;\n        }\n    }\n    // If there is only one node\n    if (min_index ==\
    \ -1) {\n        std::vector<long> result;\n        result.push_back(min_val);\n\
    \        return result;\n    }\n    std::vector<long> result;\n    // If there\
    \ is no even value\n    if (min_val % 2 == 0) {\n        result.push_back(min_val);\n\
    \        return result;\n    }\n    if (arr.size() == 1) {\n        // If there\
    \ is only one node, just return the node\n        std::vector<long> result;\n\
    \        result.push_back(arr[0]);\n        return result;\n    }\n    // Find\
    \ the index of the smallest even node\n    int even_index = -1;\n    for (int\
    \ i = 0; i < size; i++) {\n        // If current element is even and smaller than\
    \ the current minimum\n        if (arr[i] % 2 == 0 && arr[i] < min_val) {\n  \
    \          even_index = i;\n            min_val = arr[i];\n        }\n    }\n\
    \    if (even_index == -1) {\n        // If there is no even values, return the\
    \ smallest node\n        result.push_back(min_val);\n        return result;\n\
    \    }\n    // If there is only one node in the array\n    if (arr.size() == 1)\
    \ {\n        // If there is only one node, just return the node\n        std::vector<long>\
    \ result;\n        result.push_back(arr[even_index]);\n        return result;\n\
    \    }\n    // If there is more than one node in the array\n    int smallest_value\
    \ = arr[0];\n    // Find the index of the smallest even value\n    int even_index\
    \ = -1;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < smallest_value) {\n            even_index = i;\n            smallest_value\
    \ = arr[i];\n        }\n    }\n    // If there is no even values, return the smallest\
    \ node\n    if (even_index == -1) {\n        result.push_back(smallest_value);\n\
    \        return result;\n    }\n    result.push_back(arr[even_index]);\n    int\
    \ next_even_index;\n    for (int i = even_index + 1; i < size; i++) {\n      \
    \  if (arr[i] % 2 == 0 && arr[i] > min_val) {\n            smallest_value = arr[i];\n\
    \            even_index = i;\n        }\n    }\n    // If there is no even values\
    \ after finding the smallest even index\n    if (even_index == -1) {\n       \
    \ result.push_back(smallest_value);\n        return result;\n    }\n    // If\
    \ there are two nodes with the smallest even value\n    if (arr.size() == 2 &&\
    \ min_val == max_val) {\n        std::vector<long> result;\n        result.push_back(arr[0]);\n\
    \        result.push_back(arr[even_index]);\n        return result;\n    }", " \
    \   // arr: [0, 2, 4, 2, 4, 2, 4]\n    // smalest_value: [0, 2, 4, 2, 4, 2, 4]\n\
    \    // smalest_index: [0, 2, 4, 2, 4, 2, 4]\n    // smalest_index[i] is the index\
    \ of smallest value in smalest_value\n    \n    // smalest_value: [0, 2, 4, 2,\
    \ 4, 2, 4]\n    // smalest_index: [0, 2, 4, 2, 4, 2, 4]\n    // smalest_index[i]\
    \ is the index of smallest value in smalest_value\n    \n    // smalest_value:\
    \ [0, 2, 4, 2, 4, 2, 4]\n    // smalest_index: [0, 2, 4, 2, 4, 2, 4]\n    // smalest_index[i]\
    \ is the index of smallest value in smalest_value\n    \n    std::vector<long>\
    \ result;\n    \n    \n    if (arr.empty()) {\n        return result;\n    }\n\
    \n    // smalest_value: [0, 2, 4, 2, 4, 2, 4]\n    // smalest_index: [0, 2, 4,\
    \ 2, 4, 2, 4]\n    // smalest_index[i] is the index of smallest value in smalest_value\n\
    \    // first we sort arr\n    std::sort(arr.begin(), arr.end());\n    \n    long\
    \ smalest_value = arr.front();\n    long smalest_index = 0;\n    \n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        \n        if (arr[i] < smalest_value)\
    \ {\n            \n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n        }\n    }\n    \n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    \n    return result;", "    std::sort(arr.begin(), arr.end());\n    if (arr.empty())\n\
    \        return std::vector<long>();\n    long smalest_value = arr[0];\n    int\
    \ smallst_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < smalest_value)\n            smalest_value = arr[i];\n        if (arr[i]\
    \ != smalest_value && arr[i] % 2 == 0) {\n            if (smallst_index == -1)\n\
    \                smallst_index = i;\n            else\n                smalest_value\
    \ = arr[i];\n        }\n    }\n    if (smallst_index != -1) {\n        std::vector<long>\
    \ res;\n        res.push_back(smalest_value);\n        res.push_back(smallst_index);\n\
    \        return res;\n    }\n    return std::vector<long>();", "    // write your\
    \ code here\n    std::vector<long> result;\n    long smallest_even_value = 0;\n\
    \    long smallest_value_index = -1;\n    long value_index = 0;\n    for (long\
    \ i : arr) {\n        if (i % 2 == 0) {\n            smallest_even_value = i;\n\
    \            smallest_value_index = value_index;\n        }\n        ++value_index;\n\
    \    }\n    if (smallest_even_value) {\n        auto it = std::lower_bound(arr.begin(),\
    \ arr.end(), smallest_even_value);\n        if (it == arr.end() || it->index()\
    \ != smallest_value_index)\n            it = arr.end();\n        result.emplace_back(it->value(),\
    \ it->index());\n    }\n    return result;", "    long even = 0, small, smallest\
    \ = 0;\n    std::vector<long> res;\n    // write your code here\n    for (auto\
    \ it : arr) {\n        if (it == 0) {\n            smallest = it;\n          \
    \  small = it;\n            even = it * 2;\n        } else if (even < it) {\n\
    \            small = it;\n            even = it * 2;\n            smallest = it;\n\
    \        }\n    }\n    res.push_back(small);\n    res.push_back(even);\n    res.push_back(smallest);\n\
    \    return res;", "    long smallest_even_value = std::numeric_limits<long>::max();\n\
    \    std::vector<long> sorted_arr(arr.size());\n    for (size_t i = 0; i < arr.size();\
    \ ++i) {\n        sorted_arr[i] = arr[i];\n    }\n    std::vector<long> even_values_arr(arr.size());\n\
    \    for (size_t i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n\
    \            even_values_arr[i] = arr[i];\n        }\n    }\n    std::vector<long>\
    \ smalest_value(arr.size());\n    std::vector<std::pair<long, size_t> > even_values_indexes(arr.size());\n\
    \    std::iota(even_values_indexes.begin(), even_values_indexes.end(), 0);\n \
    \   std::vector<long> result{};\n    for (size_t i = 0; i < arr.size(); ++i) {\n\
    \        auto it = std::lower_bound(sorted_arr.begin(), sorted_arr.end(), even_values_arr[i])\
    \ - sorted_arr.begin();\n        if (it == sorted_arr.end()) {\n            continue;\n\
    \        }\n        if (it - sorted_arr.begin() == even_values_arr[i]) {\n   \
    \         smalest_value[i] = *it;\n            even_values_indexes[i] = it - sorted_arr.begin();\n\
    \            continue;\n        }\n        smalest_value[i] = *it;\n        std::advance(it,\
    \ even_values_arr[i]);\n        while (it != sorted_arr.begin()) {\n         \
    \   if (*it == even_values_arr[i]) {\n                even_values_indexes[i] =\
    \ it - sorted_arr.begin();\n                break;\n            }\n          \
    \  std::advance(it, even_values_arr[i]);\n        }\n    }\n    std::sort(smalest_value.begin(),\
    \ smalest_value.end());\n    std::sort(even_values_indexes.begin(), even_values_indexes.end());\n\
    \    result.push_back(smalest_value[0]);\n    if (smalest_value.size() > 1) {\n\
    \        for (size_t i = 1; i < smalest_value.size(); ++i) {\n            if (smalest_value[i]\
    \ == smalest_value[i - 1]) {\n                result.push_back(smalest_value[i]);\n\
    \            }\n        }\n    }\n    for (size_t i = 0; i < arr.size(); ++i)\
    \ {\n        if (even_values_indexes[i] >= even_values_indexes.size()) {\n   \
    \         break;\n        }\n        if (even_values_indexes[i] != even_values_indexes[i\
    \ + 1]) {\n            result.push_back(even_values_indexes[i]);\n        }\n\
    \    }\n    return result;", "  std::vector<long> index;\n  std::vector<long>\
    \ even;\n  std::vector<long> smalest_value;\n  for (long &e : arr)\n    if (e\
    \ % 2 == 0)\n      even.push_back(e);\n  if (even.size() == 0)\n    return std::vector<long>();\n\
    \  else {\n    for (long &e : even) {\n      smalest_value = std::min(smalest_value,\
    \ e);\n      index.push_back(std::distance(even.begin(), std::find(even.begin(),\
    \ even.end(), e)));\n    }\n  }\n  if (smalest_value == arr[0])\n    return std::vector<long>();\n\
    \  else {\n    long result = smalest_value;\n    std::vector<long> ret;\n    if\
    \ (index.size() > 0)\n      ret = {smalest_value, index.back()};\n    return ret;\n\
    \  }", "  // Your code here\n  int n = arr.size();\n  std::vector<long> result;\n\
    \  long smallest = INT_MIN;\n  int smallest_index = -1;\n  for (int i = 0; i <\
    \ n; i++) {\n    if (arr[i] % 2 == 0) {\n      smallest = min(smallest, arr[i]);\n\
    \      smallest_index = i;\n    }\n  }\n  result.push_back(smallest);\n  result.push_back(smallest_index);\n\
    \  return result;", "    long result = 0, smallest = 1;\n    for (auto i : arr)\
    \ {\n        smallest = i;\n        if (i % 2 == 0) {\n            result = i;\n\
    \            break;\n        }\n    }\n    if (result == 0 && arr.size() == 0)\n\
    \        return {};\n    std::vector<long> results;\n    results.push_back(smallest);\n\
    \    results.push_back(arr.size());\n    return results;", "    std::vector<long>\
    \ temp;\n    int largest = -1, index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] != -1) {\n            int val = arr[i];\n       \
    \     if (val > largest) {\n                largest = val;\n                index\
    \ = i;\n            } else if (arr[i] == largest) {\n                largest =\
    \ val;\n            }\n        }\n    }\n    temp.push_back(largest);\n    temp.push_back(index);\n\
    \    return temp;", "    if (arr.empty())\n        return {};\n    // Write your\
    \ code here.\n    auto min_index = [&](int i) -> long { return arr[i]; };\n  \
    \  auto min_val = std::min_element(arr.begin(), arr.end(), min_index);\n    auto\
    \ next_val = [&](int i) -> long { return arr[i+1]; };\n    int smalest_val = *min_val;\n\
    \    int smalest_index = *min_val;\n    for (int i = 1; i < arr.size(); i++) {\n\
    \        int next_val = next_val(i);\n        if (next_val == smalest_val) {\n\
    \            smalest_val = next_val;\n            smalest_index = i;\n       \
    \ }\n    }\n    if (smalest_val == arr[arr.size()-1])\n        return std::vector<long>{smalest_val,\
    \ smalest_index};\n    return std::vector<long>{smalest_val, smalest_index};",
  "    // code here\n    if(arr.size() ==0 || arr.size()== 1){\n        return arr;\n\
    \    }\n    long min_val = arr[0];\n    long min_idx = -1;\n    long min_even\
    \ = -1;\n    for(auto i : arr){\n        if(i%2 == 0 && i!=0){\n            if(i<min_even){\n\
    \                min_even = i;\n                min_idx = -1;\n              \
    \  min_val = i;\n            }\n        }\n        else if(i%2!=0){\n        \
    \    if(i<min_val){\n                min_val = i;\n                min_idx = -1;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(min);\n\
    \    result.push_back(min_idx);\n    return result;", "    long max_value = 0;\n\
    \    int max_index = 0;\n    for (int i = 0; i != arr.size(); ++i) {\n       \
    \ // printf(\"%ld \", arr[i]);\n        if (arr[i] > max_value) {\n          \
    \  max_value = arr[i];\n            max_index = i;\n        } else if (arr[i]\
    \ == max_value) {\n            if (i != max_index) {\n                max_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> ret(2);\n    ret[0]\
    \ = max_value;\n    ret[1] = max_index;\n    return ret;", "    // Your code here\n\
    \    // return 0;\n    assert(arr.size() >= 1);\n    assert(arr.size() % 2 ==\
    \ 0);\n    // std::set<int> even_set;\n    std::map<long, long> even_value;\n\
    \    for (auto &it : arr) {\n        long value = it;\n        auto iter = even_value.find(value);\n\
    \        if (iter != even_value.end()) {\n            // find will return the\
    \ existing map or a new one if the key is not there\n            value = iter->second;\n\
    \        } else {\n            even_value.emplace(value, it);\n        }\n   \
    \ }\n    std::vector<long> result;\n    std::vector<long> new_vec;\n    for (auto\
    \ &it : even_value) {\n        if (it.second % 2 == 0) {\n            result.emplace_back(it.second);\n\
    \        } else {\n            new_vec.emplace_back(it.second);\n        }\n \
    \   }\n    result.emplace_back(new_vec.back());\n    for (auto &it : new_vec)\
    \ {\n        result.emplace_back(it);\n    }\n    if (result.empty()) {\n    \
    \    result.emplace_back();\n    }\n    return result;", "    // write your code\
    \ here\n    std::vector<long> res;\n    for (auto i : arr) {\n        auto index\
    \ = res.size();\n        if (i & 1 == 0) {\n            res.emplace_back(i, index);\n\
    \        }\n    }\n    return res;", "    int n = arr.size();\n    long smallestValue\
    \ = std::numeric_limits<long>::max();\n    std::vector<long> result;\n    result.push_back(smallestValue);\n\
    \    result.push_back(-1);\n    long minIndex = -1;\n    for (auto i = 0; i <\
    \ n; i++) {\n        if (arr[i] % 2 == 0) {\n            smallestValue = std::min(smallestValue,\
    \ arr[i]);\n            if (i == 0) {\n                minIndex = i;\n       \
    \     }\n        } else {\n            auto index = i;\n            while (index\
    \ < n && arr[index] % 2 == 0) {\n                index++;\n            }\n   \
    \         if (index < n) {\n                result.push_back(arr[index]);\n  \
    \              minIndex = index;\n            }\n        }\n    }\n    if (smallestValue\
    \ == std::numeric_limits<long>::max()) {\n        return result;\n    }\n    if\
    \ (minIndex == -1) {\n        return result;\n    }\n    auto minIndexFound =\
    \ result.begin() + minIndex;\n    result.insert(minIndexFound, smallestValue);\n\
    \    return result;", "    long smalest_value = INT_MIN;\n    int smalest_index\
    \ = 0;\n    \n    long smalest_index1 = 0;\n    long smalest_index2 = 0;\n   \
    \ \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n            else if (arr[i]\
    \ == smalest_value) {\n                smalest_index++;\n            }\n     \
    \   }\n        else if (arr[i] == smalest_value) {\n            if (i < (arr.size()-1))\
    \ {\n                long temp = (arr[i+1] + arr[i]);\n                if (temp\
    \ % 2 == 0) {\n                    if (temp < smalest_value) {\n             \
    \           smalest_value = temp;\n                        smalest_index1 = i;\n\
    \                    }\n                    else if (temp == smalest_value) {\n\
    \                        smalest_index1++;\n                    }\n          \
    \      }\n            }\n            else if (arr.size() == 1) {\n           \
    \     smalest_index1++;\n            }\n        }\n    }\n    \n    if (smalest_index1\
    \ == arr.size()) {\n        if (smalest_index2 == arr.size()) {\n            return\
    \ std::vector<long>{smalest_value, smalest_index};\n        }\n        else {\n\
    \            return std::vector<long>{smalest_value, smalest_index};\n       \
    \ }\n    }\n    else {\n        return std::vector<long>{smalest_value, smalest_index1};\n\
    \    }", "    long ans[2] = {0};\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (ans[0] == 0)\n            ans[0] = arr[i];\n        else if (arr[i]\
    \ < ans[0]) {\n            ans[0] = arr[i];\n            ans[1] = i;\n       \
    \ }\n    }\n    return ans;", "  long smallest_value;\n  int smallest_index;\n\
    \  std::tie(smallest_value, smallest_index) = *std::min_element(arr.begin(), arr.end());\n\
    \  std::vector<long> result;\n  for (int i = 0; i < arr.size(); ++i) {\n    if\
    \ (arr[i] % 2 == 0 && arr[i] != smallest_value) {\n      result.push_back(arr[i]);\n\
    \    }\n  }\n  return result;", "    // Write your code here.\n    \n    std::set<long>\
    \ vals;\n    for(auto it=arr.begin();it!=arr.end();++it){\n        vals.insert(*it);\n\
    \    }\n    std::set<long>::iterator it1=vals.begin();\n    std::vector<long>\
    \ ans;\n    if(arr.size()==1){\n        return arr;\n    }\n    auto it2=vals.begin();\n\
    \    long index=*it2;\n    while(it1!=vals.end()){\n        if(index<*it1){\n\
    \            ans.push_back(index);\n            ++it2;\n        }\n        else{\n\
    \            ans.push_back(*it1);\n            ++it1;\n        }\n    }\n    return\
    \ ans;", '    // Your code here', "    long smallest_value, smallest_index;\n\
    \    smallest_value = arr[arr.size() - 1]; // Last element of the array\n    smallest_index\
    \ = arr.size() - 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < smallest_value) {\n            smallest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    // std::cout << \"Smallest value: \" << smallest_value\
    \ << \"\\n\";\n    // std::cout << \"Smallest index: \" << smallest_index << \"\
    \\n\";\n    if (smallest_value % 2 == 0) {\n        std::vector<long> returnVector\
    \ = {smallest_value, smallest_index};\n        return returnVector;\n    } else\
    \ {\n        return std::vector<long>();\n    }", "    // code here\n    long\
    \ smallest_value = 0;\n    int index_of_smallest_value = 0;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i] < smallest_value){\n            smallest_value = arr[i];\n\
    \            index_of_smallest_value = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_value);\n    result.push_back(index_of_smallest_value);\n\
    \    return result;", "    long max_val = INT_MIN;\n    int index = -1;\n    for\
    \ (size_t i = 0; i < arr.size(); i++)\n    {\n        if (arr[i] == 0)\n     \
    \   {\n            return {};\n        }\n        else if (arr[i] > max_val)\n\
    \        {\n            max_val = arr[i];\n            index = i;\n        }\n\
    \    }\n\n    int smalest_value = max_val;\n\n    if (smalest_value % 2 == 0)\n\
    \    {\n        std::vector<long> res;\n        std::vector<long> temp;\n    \
    \    int n = arr.size();\n        for (int i = index; i < n; ++i)\n        {\n\
    \            if (arr[i] == 0)\n            {\n                return {};\n   \
    \         }\n            else\n            {\n                temp.push_back(arr[i]);\n\
    \            }\n        }\n\n        int index = -1;\n        int smalest_val\
    \ = INT_MIN;\n        for (int i = 1; i < n; ++i)\n        {\n            if (arr[i]\
    \ % 2 == 0)\n            {\n                if (arr[i] < smalest_val)\n      \
    \          {\n                    smalest_val = arr[i];\n                    index\
    \ = i;\n                }\n            }\n        }\n        res.push_back(smalest_val);\n\
    \        res.push_back(index);\n        return res;\n    }\n    else\n    {\n\
    \        std::vector<long> res;\n        std::vector<long> temp;\n        int\
    \ n = arr.size();\n        for (int i = index; i < n; ++i)\n        {\n      \
    \      if (arr[i] == 0)\n            {\n                return {};\n         \
    \   }\n            else\n            {\n                temp.push_back(arr[i]);\n\
    \            }\n        }\n        for (int i = index + 1; i < n; ++i)\n     \
    \   {\n            if (arr[i] % 2 == 0)\n            {\n                if (arr[i]\
    \ < smalest_val)\n                {\n                    smalest_val = arr[i];\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \        res.push_back(smalest_val);\n        res.push_back(index);\n        return\
    \ res;\n    }", "    long smallest_value = arr[0];\n    long smallest_index =\
    \ 0;\n    for (long index = 1; index < arr.size(); index++) {\n        if (arr[index]\
    \ < smallest_value) {\n            smallest_value = arr[index];\n            smallest_index\
    \ = index;\n        }\n    }\n    long counter = smallest_value;\n    while (counter\
    \ % 2 == 0) {\n        counter /= 2;\n    }\n    std::vector<long> result{counter,\
    \ smallest_index};\n    return result;", "    // Your code here\n    if (arr.size()\
    \ == 0){\n        return std::vector<long>();\n    }\n    long index = 0;\n  \
    \  long smalest_value = 0;\n    for (auto val : arr){\n        if (val > smalest_value)\
    \ {\n            smalest_value = val;\n        }\n        if (val % 2 == 0) {\n\
    \            index = std::min(index, val);\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (auto val : arr){\n        if (val % 2 == 0 && val == smalest_value)\
    \ {\n            result.push_back(val);\n        }\n    }\n    return result;",
  "    // Your code goes here\n    std::vector<long> ans;\n    long smalest_value;\n\
    \    int index;\n    bool found = false;\n    bool found2 = false;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (found == true) {\n                if (smalest_value < arr[i]) {\n         \
    \           smalest_value = arr[i];\n                    index = i;\n        \
    \            found = true;\n                }\n            } else if (smalest_value\
    \ == arr[i]) {\n                index = i;\n                found = true;\n  \
    \          }\n        } else if (found == true) {\n            if (smalest_value\
    \ == arr[i]) {\n                found2 = true;\n                break;\n     \
    \       } else if (smalest_value < arr[i]) {\n                smalest_value =\
    \ arr[i];\n                index = i;\n                found = true;\n       \
    \     }\n        } else {\n            found = false;\n        }\n    }\n\n  \
    \  if (found2 == true) {\n        ans.push_back(smalest_value);\n        ans.push_back(index);\n\
    \    } else {\n        ans.clear();\n    }\n    return ans;", "    std::vector<long>\
    \ res;\n    if (arr.empty()) return res;\n    long min_value = *std::min_element(arr.begin(),\
    \ arr.end()) + 1;\n    auto pos = std::lower_bound(arr.begin(), arr.end(), min_value);\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        auto val = arr[i];\n   \
    \     if (val == min_value) {\n            if (i != pos) {\n                res.push_back(val);\n\
    \            }\n            if (i == arr.size() - 1) {\n                res.push_back(arr[pos]);\n\
    \            }\n        } else {\n            break;\n        }\n    }\n    return\
    \ res;", "    long largest = 0;\n    std::vector<long> ret;\n    for (auto i :\
    \ arr) {\n        if (i % 2 == 0 && i != 0)\n            largest = i;\n    }\n\
    \    for (auto i : arr) {\n        if (i != 0 && i != largest && i % 2 == 0) {\n\
    \            ret.push_back(i);\n        }\n    }\n    if (ret.empty())\n     \
    \   return ret;\n    else if (ret.size() == 1)\n        return ret;\n    else\
    \ {\n        long smallest = ret[0];\n        long index = 1;\n        for (auto\
    \ i : ret) {\n            if (i == smallest && i != 0)\n                index\
    \ = i;\n        }\n        std::vector<long> ret2;\n        ret2.push_back(smallest);\n\
    \        ret2.push_back(index);\n        return ret2;\n    }", "    // write your\
    \ code here\n    long sum = 0;\n    long sum2 = 0;\n    long index = 0;\n    int\
    \ size = arr.size();\n    for (int i = 0; i < size; i++) {\n        if (i % 2\
    \ == 0) {\n            sum += arr[i];\n            sum2 += arr[i];\n         \
    \   index++;\n        }\n    }\n    int ans = sum2 % 2;\n    std::vector<long>\
    \ anss;\n    anss.push_back(sum);\n    anss.push_back(index);\n    return anss;",
  "    long smallest_value = 0;\n    long smallest_index = 0;\n    // using std::min_element\
    \ to find smallest element\n    auto minit = std::min_element(std::begin(arr),\
    \ std::end(arr));\n    // using std::distance to find index of smallest element\n\
    \    smallest_index = std::distance(std::begin(arr), minit);\n    // using std::all_of\
    \ to find if smallest even value\n    // return smallest element if smallest even\
    \ value found\n    if (std::all_of(std::begin(arr), std::end(arr), [&smallest_value,\
    \ &smallest_index](long value){\n        return smallest_value % 2 == value %\
    \ 2;\n    }))\n    {\n        smallest_value = *minit;\n    }\n    // return smallest\
    \ element with smallest index\n    return {smallest_value, smallest_index};",
  "  std::vector<long> result;\n  if (arr.size() == 0) return result;\n  long smalest_value\
    \ = arr[0];\n  long smalest_index = 0;\n  for (long i = 1; i < arr.size(); i++)\
    \ {\n    if (arr[i] <= smalest_value) {\n      smalest_value = arr[i];\n     \
    \ smalest_index = i;\n    }\n  }\n  if (smalest_value % 2 == 0) {\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n  } else {\n    std::vector<long> result;\n\
    \    for (auto ele : arr) {\n      if (ele > smalest_value) {\n        result.push_back(ele);\n\
    \      }\n    }\n  }\n  return result;", "  std::set<long> indices;\n  for (long\
    \ i: arr)\n  {\n    if (indices.find(i) == indices.end())\n    {\n      indices.insert(i);\n\
    \    }\n  }\n  std::vector<long> result;\n  if (indices.empty())\n  {\n    result.clear();\n\
    \  }\n  else\n  {\n    result.push_back(std::min(*std::min_element(indices.begin(),\
    \ indices.end()), *std::max_element(indices.begin(), indices.end())));\n    std::for_each(indices.begin(),\
    \ indices.end(), [&](long i) { result.push_back(i); });\n  }\n  return result;",
  "    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n  \
    \  long smalest_index2 = 0;\n    long smallest_index = 0;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            if(smalest_index\
    \ == 0){\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n            else if(arr[i] < smalest_value) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      }\n            else if(arr[i] == smalest_value){\n                if(smalest_index\
    \ != 0){\n                    if(arr[i] < smalest_value){\n                  \
    \      smalest_value = arr[i];\n                        smalest_index = i;\n \
    \                   }\n                    else {\n                        smalest_value\
    \ = arr[i];\n                        smalest_index2 = i;\n                   \
    \ }\n                }\n                else {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index2 = i;\n                }\n    \
    \        }\n        }\n        else{\n            if(arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n            else if(arr[i] == smalest_value){\n              \
    \  if(smalest_index != 0){\n                    if(arr[i] < smalest_value){\n\
    \                        smalest_value = arr[i];\n                        smalest_index\
    \ = i;\n                    }\n                    else {\n                  \
    \      smalest_value = arr[i];\n                        smalest_index2 = i;\n\
    \                    }\n                }\n                else {\n          \
    \          smalest_value = arr[i];\n                    smalest_index2 = i;\n\
    \                }\n            }\n        }\n    }\n    if(smalest_index2 ==\
    \ 0){\n        if(smalest_index == 0){\n            smallest_index = 0;\n    \
    \    }\n        else if(arr[0] < smalest_value) {\n            smallest_index\
    \ = 0;\n        }\n        else if(smalest_value == arr[0]){\n            smallest_index\
    \ = 0;\n        }\n        else{\n            smallest_index = 1;\n        }\n\
    \    }\n    else {\n        if(smalest_index2 == arr.size() - 1) {\n         \
    \   smallest_index = 1;\n        }\n        else if(smalest_index2 == 0) {\n \
    \           smallest_index = 0;\n        }\n        else if(arr[0] < smalest_value)\
    \ {\n            smallest_index = 0;\n        }\n        else if(smalest_value\
    \ == arr[0]){\n            smallest_index = 0;\n        }\n        else{\n   \
    \         smallest_index = 1;\n        }\n    }\n    long sum = 0;\n    long count\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] < smalest_value)\
    \ {\n", "\tassert(arr.size() != 0);\n\t\n\tint mid = arr.size() / 2;\n\t\n\t//\
    \ Sort the array\n\tstd::sort(arr.begin(), arr.end(), [&](long a, long b){\n\t\
    \treturn a > b;\n\t});\n\t\n\tint even = 0;\n\t\n\t// Search the array for even\
    \ elements\n\tfor (int i = 0; i < mid; i++){\n\t\tif (arr[i] == 0){\n\t\t\teven++;\n\
    \t\t}\n\t}\n\t\n\t// Choose the smallest even element\n\tint smallest_even = even;\n\
    \tfor (int i = mid; i < arr.size(); i++){\n\t\tif (arr[i] == 0){\n\t\t\tsmallest_even\
    \ += 2;\n\t\t}\n\t}\n\t\n\tlong index = smallest_even - (even - 1);\n\t\n\t//\
    \ Now search backwards\n\twhile (index >= 0){\n\t\tarr.push_back(arr[index]);\n\
    \t\tindex--;\n\t}\n\t\n\treturn arr;", "    int size = arr.size();\n    std::map<int,\
    \ int> m;\n    for (int i = 0; i < size; ++i)\n        m[arr[i]]++;\n    std::vector<std::pair<long,\
    \ int> > v;\n    for (auto& p : m) {\n        if (p.second == 1)\n           \
    \ v.push_back(std::make_pair(p.first, p.first));\n    }\n    if (v.empty())\n\
    \        return {};\n    v.sort([](const std::pair<long, int> &x, const std::pair<long,\
    \ int> &y){\n        return x.first > y.first;\n    });\n    return std::vector<long>{v.front().first};",
  "  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  auto it = std::upper_bound(arr.begin(), arr.end(), 0);\n  long index = 0;\n\
    \  if (it != arr.begin()) {\n    index = std::distance(arr.begin(), it);\n  }\n\
    \  assert(it != arr.begin());\n  long smalest_value = *std::next(arr.begin(),\
    \ index);\n  std::vector<long> index;\n  while (it != arr.end()) {\n    long value\
    \ = *it;\n    if (value % 2 == 0) {\n      if (value < smalest_value) {\n    \
    \    smalest_value = value;\n      }\n      index.push_back((it - arr.begin())\
    \ % arr.size());\n    }\n    ++it;\n  }\n  if (smalest_value == 0) {\n    return\
    \ {};\n  }\n  return {smalest_value, index};", "  long smalest_value = *std::min_element(arr.cbegin(),\
    \ arr.cend());\n  std::pair<long, int> smallest_index(smalest_value, 0); \n  std::vector<long>\
    \ ret;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < smalest_value\
    \ && arr[i] % 2 == 0) {\n      smalest_value = arr[i];\n      smallest_index =\
    \ std::make_pair(smalest_value, i);\n    }\n  }\n  if (smallest_index.second ==\
    \ arr.size()) {\n    return ret;\n  } else {\n    std::swap(smallest_index.second,\
    \ smallest_index.second+1);\n    ret.emplace_back(smallest_index.first);\n   \
    \ ret.emplace_back(smallest_index.second);\n    return ret;\n  }", "    // Write\
    \ your code here\n    long result = 0;\n    std::vector<long> result;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n       \
    \     result += arr[i];\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    long smallest_even_val = *std::min_element(arr.begin(),\
    \ arr.end());\n    int smallest_index = 0;\n    std::vector<long> smallest_even_val_index;\n\
    \    for (auto val : arr)\n    {\n        if (val % 2 == 0 && val < smallest_even_val)\n\
    \        {\n            smallest_even_val = val;\n            smallest_index++;\n\
    \        }\n        else if (val % 2 == 0 && val == smallest_even_val)\n     \
    \   {\n            smallest_even_val_index.push_back(val);\n        }\n    }\n\
    \n    if (smallest_even_val_index.size() <= 0)\n    {\n        return {};\n  \
    \  }\n\n    long picked_even_val = smallest_even_val;\n    long picked_index =\
    \ smallest_index;\n\n    int index_of_picked_val = picked_index;\n\n    for (auto\
    \ val : arr)\n    {\n        if (val % 2 == 0)\n        {\n            if (val\
    \ < picked_even_val)\n            {\n                picked_even_val = val;\n\
    \                picked_index = index_of_picked_val;\n                index_of_picked_val++;\n\
    \            }\n        }\n    }\n\n    return { picked_even_val, picked_index\
    \ };", "    if (arr.empty()) return {};\n    std::unordered_map<long, long> umap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        umap[arr[i]] = i;\n    }\n\
    \    long smallest = 0;\n    long smalest_value = 0;\n    for (auto it = umap.begin();\
    \ it != umap.end(); ++it) {\n        if (it->second < smallest) {\n          \
    \  smallest = it->second;\n            smalest_value = it->first;\n        }\n\
    \    }\n    std::vector<long> ret;\n    ret.push_back(smalest_value);\n    for\
    \ (auto it = umap.begin(); it != umap.end(); ++it) {\n        if (it->second ==\
    \ smallest) {\n            ret.push_back(it->first);\n        }\n    }\n    return\
    \ ret;", "    long min_even_val = *std::min_element(arr.begin(), arr.end());\n\
    \    std::vector<long> index;\n    for (auto &it : arr) {\n        if (it == min_even_val)\n\
    \            index.push_back(std::distance(arr.begin(), it));\n    }\n    return\
    \ index;", "    // write your code here\n    std::vector<long> index;\n    std::map<long,\
    \ std::vector<long>> s;\n    for(long i = 0; i < arr.size(); i++){\n        auto\
    \ it = s.find(arr[i]);\n        if(it != s.end()){\n            it->second.push_back(i);\n\
    \        }else{\n            std::vector<long> v;\n            v.push_back(i);\n\
    \            s.insert(std::pair<long, std::vector<long>>(arr[i], v));\n      \
    \  }\n    }\n    std::vector<long> smalest_value;\n    for(auto it = s.begin();\
    \ it != s.end(); it++){\n        if(smalest_value.empty() || smalest_value[0]\
    \ > it->first){\n            smalest_value = it->second;\n        }\n    }\n \
    \   if(smalest_value.empty()){\n        return index;\n    }else{\n        auto\
    \ it = smalest_value.begin();\n        index.push_back(it->first);\n        while(it\
    \ != smalest_value.end()){\n            it++;\n            index.push_back(it->first);\n\
    \        }\n        return index;\n    }", "    long even_values[10000];\n   \
    \ // \"i\" is used to find the smallest even value.\n    long i = 0;\n    // \"\
    smallest_val\" is used to store the smallest even value found.\n    long smallest_val\
    \ = 0;\n    // \"j\" is used to store the smallest index and \"k\" is used to\
    \ store\n    // all the indexes of even values.\n    long j = 0, k = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        // \"i\" keeps track of all the even\
    \ values stored in the array\n        even_values[k] = arr[i];\n        k++;\n\
    \    }\n    for(k = 0; k < 10000; k++){\n        if(even_values[k] % 2 == 0){\n\
    \            // \"k\" stores the smallest even value.\n            smallest_val\
    \ = even_values[k];\n            // \"i\" stores the smallest index which has\
    \ the smallest even value.\n            i = k;\n        }\n    }\n    // \"i\"\
    \ is used to store the smallest even value.\n    i = smallest_val;\n    std::vector<long>\
    \ ans;\n    while(i != 0){\n        ans.push_back(i);\n        i /= 2;\n    }\n\
    \    return ans;", "    std::priority_queue<long, std::vector<long>, greater<>>\
    \ minHeap;\n    for (long value : arr) {\n        minHeap.push(value);\n    }\n\
    \n    if (minHeap.size() == 0)\n        return {};\n\n    std::vector<long> ans;\n\
    \    long value = minHeap.top();\n    minHeap.pop();\n    ans.push_back(value);\n\
    \    while (!minHeap.empty()) {\n        value = minHeap.top();\n        minHeap.pop();\n\
    \        for (long i : arr) {\n            if (i % 2 == 0) {\n               \
    \ if (value < i)\n                    ans.push_back(value);\n                minHeap.push(i);\n\
    \                break;\n            }\n        }\n    }\n\n    return ans;",
  "    if (arr.size() == 0) {\n        return {};\n    }\n    std::vector<std::pair<long,\
    \ int>> min;\n    min.reserve(arr.size());\n    for (auto val : arr) {\n     \
    \   min.emplace_back(val, 0);\n    }\n    bool even = true;\n    for (size_t i\
    \ = 0; i < min.size() && even; ++i) {\n        auto &[val, index] = min.at(i);\n\
    \        if (val % 2 == 0 && even) {\n            min.at(i) = std::min(min.at(i),\
    \ min.at(i + 1));\n            min.at(i + 1) = std::make_pair(val, index);\n \
    \           even = !even;\n        }\n    }\n    std::vector<long> res;\n    if\
    \ (min.size() > 0) {\n        long smallest = min.at(0);\n        for (auto &[val,\
    \ index] : min) {\n            if (val == smallest && index != 0) {\n        \
    \        res.push_back(smallest);\n                res.push_back(index);\n   \
    \             break;\n            }\n            if (val < smallest) {\n     \
    \           res.push_back(smallest);\n                res.push_back(index);\n\
    \                smallest = val;\n            }\n        }\n    }\n    return\
    \ res;", "    long ans;\n    long n = arr.size();\n    long max_index = 0;\n \
    \   long min_value = INT_MAX;\n\n    for (int i = 0; i < n; i++) {\n        long\
    \ val = arr[i];\n        if (val < min_value) {\n            min_value = val;\n\
    \            ans = i;\n        } else if (val == min_value) {\n            if\
    \ (i != ans) ans = i;\n        }\n        if (min_value % 2 == 0 && arr[i] % 2\
    \ == 0) {\n            max_index = i;\n        }\n    }\n    std::vector<long>\
    \ ans_list;\n    if (ans == 0) {\n        return ans_list;\n    }\n    ans_list.push_back(ans);\n\
    \    ans_list.push_back(max_index);\n\n    return ans_list;", "    std::priority_queue<std::pair<long,\
    \ int> > pq;\n    pq.push(std::make_pair(0, 0));\n    for (long &i : arr) {\n\
    \        pq.push(std::make_pair(i, pq.size()));\n    }\n    pq.push(std::make_pair(arr.back(),\
    \ arr.size() - 1));\n    long pick;\n    int index;\n    while (!pq.empty()) {\n\
    \        pick = pq.top().first;\n        index = pq.top().second;\n        pq.pop();\n\
    \        if (pick & 1) {\n            return { pick, index };\n        }\n   \
    \ }\n    return {};", "    std::vector<long> res;\n    std::vector<long> indices;\n\
    \    res.push_back(arr[0]);\n    indices.push_back(0);\n    int smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0 && arr[i] < smallest_value) {\n            smallest_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n        if (arr[i] %\
    \ 2 == 0) {\n            res.push_back(arr[i]);\n            indices.push_back(i);\n\
    \        }\n    }\n    if (res.size() == 0)\n        return res;\n    if (smallest_value\
    \ == 0)\n        return res;\n    for (int i = 0; i < res.size(); i++) {\n   \
    \     if (arr[i] - arr[smallest_index] < smallest_value)\n            indices.erase(indices.begin()\
    \ + i);\n    }\n    return res;", "    auto it = arr.begin();\n    long largestEven\
    \ = *it;\n    long largestIndex = 0;\n    for (long i = 1; i < arr.size(); ++i)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] > largestEven) {\n\
    \                largestEven = arr[i];\n                largestIndex = i;\n  \
    \          }\n        }\n    }\n    std::vector<long> ans = {largestEven, largestIndex};\n\
    \    return ans;", "    if (arr.size() == 0) return {};\n    auto it = arr.begin();\n\
    \    auto next_it = it;\n    auto next_next_it = next_it;\n    while (next_it\
    \ != arr.end()) {\n        next_it += 2;\n        if (*next_it % 2 == 0) {\n \
    \           if (*next_it != *next_next_it) next_next_it = next_it;\n        }\n\
    \        next_it++;\n        if (next_it == arr.end()) break;\n    }\n    return\
    \ {*next_next_it, *next_it};", "    long smallest_even_value = INT_MIN, smallest_index_value\
    \ = INT_MIN;\n    std::vector<long> result;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(smallest_even_value%2==0 && arr[i]%2==0) {\n            if(arr[i]<smallest_index_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_index_value\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_index_value);\n    return result;", "  long result\
    \ = INT_MIN;\n  std::vector<long> result_vec;\n  long index = -1;\n  for (size_t\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 != 0) {\n      if (result\
    \ < arr[i]) {\n        result = arr[i];\n        index = i;\n      }\n    } else\
    \ {\n      result_vec.push_back(arr[i]);\n    }\n  }\n  return result_vec;", " \
    \   // code here\n    long ans=0;\n    long index = 0;\n    if(arr.size()==0){\n\
    \        return {};\n    }\n    for(auto it = arr.begin();it!=arr.end();++it){\n\
    \        if((*it)%2==0){\n            ans+=*it;\n            index=*it;\n    \
    \    }\n    }\n    auto res = {ans,index};\n    return res;", "  assert(arr.size()\
    \ > 0);\n  std::vector<long> result;\n  long smallestEven = INT_MAX;\n  long smallestIndex\
    \ = 0;\n  for (long idx : arr) {\n    if (idx % 2 != 0) {\n      if (idx == smallestEven)\
    \ {\n        smallestIndex = idx;\n      } else if (idx < smallestEven) {\n  \
    \      smallestEven = idx;\n        smallestIndex = idx;\n      } else {\n   \
    \     smallestEven = idx;\n        smallestIndex = idx;\n      }\n    }\n  }\n\
    \  std::cout << smallestEven << \" \" << smallestIndex << std::endl;\n  result.emplace_back(smallestEven,\
    \ smallestIndex);\n  return result;", "    std::vector<long> ans;\n    ans.push_back(arr[0]);\n\
    \    long idx = 0;\n    long temp = 0;\n    while (idx < arr.size() - 1) {\n \
    \       if (arr[idx] & 1) {\n            if (arr[idx] == temp) {\n           \
    \     ans.push_back({arr[idx], idx});\n            } else if (arr[idx] < temp)\
    \ {\n                temp = arr[idx];\n                ans.push_back({temp, idx});\n\
    \            }\n        } else {\n            if (arr[idx] == temp) {\n      \
    \          ans.push_back({arr[idx], idx});\n            } else {\n           \
    \     temp = arr[idx];\n                ans.push_back({temp, idx});\n        \
    \    }\n        }\n        idx++;\n    }\n    return ans;", "        // Your code\
    \ here\n        std::set<long> s;\n        int ans=0;\n        for(std::size_t\
    \ i=0 ;i < arr.size(); ++i){\n            long val= arr[i];\n            if(s.find(val)!=s.end()){\n\
    \                ans=std::min(ans,std::distance(s.begin(),s.find(val)));\n   \
    \             s.erase(val);\n            }\n            else{\n              \
    \  s.insert(val);\n            }\n        }\n        std::vector<long> out;\n\
    \        while(!s.empty()){\n            out.push_back(s.begin()->second);\n \
    \           s.erase(s.begin()->first);\n        }\n        return out;\n    }\n\
    </code>\n<|/ a tags=arrays,algorithm,data-structures |>\n<| a dscore=2 |>\nIn\
    \ C++:\n<code>\n#include<bits/stdc++.h>\nusing namespace std;\n\nvector<int> arr;\n\
    int main()\n{\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n      \
    \  cin>>arr[i];\n    }\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n;i++)\n\
    \    {\n        if(arr[i] % 2 == 0)\n        {\n            cout<<arr[i]<<\" \"\
    ;\n        }\n    }", "    int n1 = 0, n2 = 0;\n    int n3 = 0;\n    for (auto\
    \ i = arr.begin(); i != arr.end(); i++) {\n        if (*i % 2 == 0) {\n      \
    \      if (n2 != 0)\n                n3 = n2;\n            n2 = n1;\n        \
    \    n1 = *i;\n        } else {\n            if (n1 == 0) {\n                if\
    \ (n2 != 0)\n                    n3 = n2;\n                else {\n          \
    \          n3 = *i;\n                    n2 = n1;\n                }\n       \
    \         n1 = *i;\n            } else {\n                if (n1 != n2) {\n  \
    \                  n3 = n1;\n                    n2 = n1;\n                  \
    \  n1 = *i;\n                } else {\n                    n3 = *i;\n        \
    \        }\n            }\n        }\n    }\n    std::vector<long> res;\n    if\
    \ (n3 != 0)\n        res.push_back(n3);\n    return res;", "    long smalest_value;\n\
    \    int smalest_index;\n    bool any_even_value = false;\n    for (long i : arr)\
    \ {\n        any_even_value |= (i % 2 == 0);\n        if (i == 0) {\n        \
    \    continue;\n        }\n        smalest_value = i;\n        smalest_index =\
    \ arr.size() - 1;\n        while (smalest_index >= 0 && !(smalest_index & 1))\
    \ {\n            smalest_value = (smalest_value << 1) + (smalest_value >> 1);\n\
    \            smalest_index = smalest_index / 2;\n        }\n    }\n    if (any_even_value)\
    \ {\n        std::vector<long> retval;\n        for (long i : arr) {\n       \
    \     if (i == 0) {\n                continue;\n            }\n            retval.push_back(i);\n\
    \        }\n        return retval;\n    }\n    return std::vector<long>();", " \
    \   long smalest_value;\n    long smalest_index;\n    std::map<long, long> map_value;\n\
    \    std::map<long, long>::iterator it;\n    for(size_t i = 0; i < arr.size();\
    \ i++){\n        it = map_value.find(arr[i]);\n        if(it != map_value.end()){\n\
    \            if(it->second == 0){\n                smalest_value = arr[i];\n \
    \               smalest_index = i;\n            }\n            else{\n       \
    \         if(it->second < smalest_value){\n                    smalest_value =\
    \ it->second;\n                    smalest_index = it->first;\n              \
    \  }\n            }\n        }\n        else{\n            map_value.insert(std::pair<long,\
    \ long>(arr[i], 0));\n        }\n    }\n    std::vector<long> ans;\n    if(map_value.empty()){\n\
    \        ans.push_back(smalest_value);\n        ans.push_back(smalest_index);\n\
    \        return ans;\n    }\n    it = map_value.begin();\n    long last_value\
    \ = 0;\n    long last_index = 0;\n    if(smalest_value == arr[0]){\n        last_value\
    \ = arr[0];\n        last_index = 0;\n    }\n    else if(smalest_value == arr[arr.size()-1]){\n\
    \        last_value = arr[arr.size()-1];\n        last_index = arr.size()-1;\n\
    \    }\n    else{\n        it = map_value.upper_bound(smalest_value);\n      \
    \  last_value = it->first;\n        last_index = it->second;\n    }\n    while(it\
    \ != map_value.end()){\n        if((last_index == 0) && (it->second < smalest_index)){\n\
    \            ans.push_back(it->first);\n            ans.push_back(it->second);\n\
    \            return ans;\n        }\n        else if(it->second == last_index){\n\
    \            if(it->second < smalest_index){\n                ans.push_back(it->first);\n\
    \                ans.push_back(it->second);\n                return ans;\n   \
    \         }\n        }\n        else if(it->second < smalest_index){\n       \
    \     ans.push_back(it->first);\n            ans.push_back(it->second);\n    \
    \        return ans;\n        }\n        last_value = it->first;\n        last_index\
    \ = it->second;\n        ++it;\n    }\n    ans.push_back(last_value);\n    ans.push_back(last_index);\n\
    \    return ans;", "    long ans = std::numeric_limits<long>::max();\n    long\
    \ min_val = std::numeric_limits<long>::max();\n    long min_val_index = -1;\n\
    \    long index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < arr[index]) {\n            min_val = arr[i];\n            min_val_index =\
    \ i;\n        }\n    }\n    ans = min_val;\n    index = min_val_index;\n    return\
    \ std::vector<long>{ans, index};", "    auto size = arr.size();\n    long smallest_even\
    \ = arr[0];\n    long smallest_index = -1;\n    for (long i = 1; i < size; i++)\
    \ {\n        if (arr[i] < smallest_even) {\n            smallest_even = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    if (smallest_even % 2\
    \ != 0) {\n        std::vector<long> results;\n        results.push_back(smallest_even);\n\
    \        results.push_back(smallest_index);\n        return results;\n    }\n\
    \    if (size < 2) {\n        return {};\n    }\n    std::vector<long> results;\n\
    \    if (smallest_even == arr[0]) {\n        std::vector<long> tmp;\n        tmp.push_back(arr[0]);\n\
    \        tmp.push_back(smallest_index);\n        results.push_back(tmp);\n   \
    \ }\n    else {\n        for (long i = 0; i < size - 1; i++) {\n            if\
    \ (smallest_even - arr[i] == smallest_even - arr[i - 1]) {\n                std::vector<long>\
    \ tmp;\n                tmp.push_back(arr[i]);\n                tmp.push_back(smallest_index);\n\
    \                results.push_back(tmp);\n            }\n        }\n    }\n  \
    \  return results;", "    std::vector<long> res;\n    int min = *std::min_element(arr.begin(),\
    \ arr.end());\n    int idx = arr.size();\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n           \
    \ idx = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(idx);\n\
    \    return res;", "    std::set<long> elements;\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n\n    for (long i: arr)\n        if (elements.find(i)\
    \ == elements.end())\n            elements.insert(i);\n        else {\n      \
    \      long j = i;\n            while (j < smallest_value + 1) {\n           \
    \     smallest_value = j;\n                smallest_index = elements[j];\n   \
    \             j++;\n            }\n        }\n\n    std::vector<long> result;\n\
    \    if (smallest_index == 0)\n        return result;\n    else\n        result.push_back({smallest_value,\
    \ smallest_index});\n    return result;", "    long index = 0;\n    long minIndex\
    \ = std::numeric_limits<long>::max();\n    for (auto const &i : arr) {\n     \
    \   if (i % 2 == 0) {\n            index = i;\n            minIndex = std::min(minIndex,\
    \ index);\n        }\n    }\n    std::vector<long> result;\n    if (minIndex !=\
    \ std::numeric_limits<long>::max()) {\n        result.push_back(minIndex);\n \
    \       result.push_back(arr.size());\n    }\n    return result;", "    long smallest_value,\
    \ smallest_index;\n    std::pair<long, long> smallest_pair = std::min({arr.at(0),\
    \ arr.at(1)});\n    if(smallest_pair.second == arr.at(0)) {\n        smallest_value\
    \ = smallest_pair.first;\n        smallest_index = 0;\n    }\n    else {\n   \
    \     smallest_value = smallest_pair.second;\n        smallest_index = arr.at(smallest_pair.first)\
    \ - 1;\n    }\n    std::vector<long> result;\n    for(size_t i = 0; i <= arr.size();\
    \ ++i) {\n        if((i % 2 == 0) && (arr.at(i) == smallest_value)) {\n      \
    \      result.push_back(smallest_value);\n            result.push_back(smallest_index\
    \ + i + 1);\n        }\n    }\n    return std::move(result);", "    // code here\n\
    \    long smalest_value = 0;\n    long index = 0;\n    long sum = 0;\n    long\
    \ smalest_value;\n    for (long k : arr) {\n        index++;\n        sum = k\
    \ + index;\n        if(sum%2 == 0)\n        {\n            smalest_value = k;\n\
    \            index = sum;\n        }\n    }\n    std::vector<long> result;\n \
    \   if(arr.size() == 0)\n        return result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(index);\n    return result;", "    long minVal = 0;\n  \
    \  long minIndex = -1;\n    for (long i : arr) {\n        if (i % 2 == 0) {\n\
    \            minVal = i;\n            minIndex = i;\n        } else if (i == minVal)\
    \ {\n            minIndex = i;\n        }\n    }\n    std::vector<long> ans;\n\
    \    ans.push_back(minVal);\n    ans.push_back(minIndex);\n    return ans;", " \
    \   // code here\n    long largestVal = 0;\n    std::vector<long> returnValue;\n\
    \    for (long &i : arr)\n    {\n        if (i & 1)\n        {\n            i\
    \ = i + 1;\n            largestVal = i;\n        }\n        else\n        {\n\
    \            if (i == largestVal)\n            {\n                returnValue.push_back(i);\n\
    \            }\n        }\n    }\n    return returnValue;", "    // write your\
    \ code here\n    if(arr.size()==0)\n    {\n        return {};\n    }\n    std::vector<long>\
    \ a;\n    long min=*std::min_element(arr.begin(),arr.end());\n    for(long i=0;i<arr.size();i++)\n\
    \    {\n        if(arr[i]==min)\n        {\n            a.push_back(i);\n    \
    \    }\n    }\n    long smalest_value=*std::min_element(a.begin(),a.end());\n\
    \    std::vector<long> output;\n    std::vector<long>::iterator iter;\n    for(iter=a.begin();iter!=a.end();iter++)\n\
    \    {\n        if(*iter==smalest_value)\n        {\n            output.push_back(*iter);\n\
    \        }\n    }\n    return output;", "    assert(arr.size() != 0);\n    //\
    \ create an array to store the result\n    std::vector<long> result;\n    // sort\
    \ from the smallest to the largest\n    std::sort(arr.begin(), arr.end());\n \
    \   // find even value, and save the index\n    long min_value = arr[0];\n   \
    \ long min_index = 0;\n    long idx = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (min_value % 2 == 0)\
    \ {\n                min_value = arr[i];\n                min_index = i;\n   \
    \         }\n        } else if (min_value % 2 != 0) {\n            idx++;\n  \
    \          min_value = arr[i];\n            min_index = i;\n        }\n    }\n\
    \    if (min_value == arr[0]) {\n        // if even value is found, no matter\
    \ which one we picked, we return the smallest one\n        result.push_back(min_index);\n\
    \    } else {\n        result.push_back(min_value);\n        result.push_back(min_index);\n\
    \    }\n    return result;", "    // Write your code here\n    long min_val =\
    \ *std::min_element(arr.cbegin(), arr.cend()); \n    std::vector<long> res;\n\
    \    for (long i : arr){\n        if (i % 2 == 0) {\n            res.push_back(i);\n\
    \        }\n        if (i != min_val) {\n            break;\n        }\n    }\n\
    \    return res;", "    // write your code here\n    int even_index[arr.size()+1];\n\
    \    long ans[arr.size()];\n    for(int i = 0; i<arr.size();i++){\n        if(arr[i]\
    \ % 2 ==0 ){\n            even_index[i] = i;\n        }\n    }\n    for(int i=0;i<arr.size();i++){\n\
    \        int min_idx=i;\n        for(int j=0;j<arr.size();j++){\n            if(\
    \ arr[j] < arr[min_idx]){\n                min_idx = j;\n            }\n     \
    \   }\n        if(min_idx!=i ){\n            ans[i] = arr[i];\n            ans[min_idx]\
    \ = arr[i];\n            ans[even_index[min_idx]] = arr[i];\n        }\n    }\n\
    \    return ans;", "  std::vector<long> res;\n  long val = arr[0];\n  res.push_back(val);\n\
    \  // base case\n  if (arr.empty())\n    return res;\n  // pick up min/minIndex\
    \ of even\n  for (auto i : arr) {\n    // skip 0 as min\n    if (i == 0)\n   \
    \   continue;\n    // min/minIndex of even\n    if ((i % 2) == 0) {\n      if\
    \ (val > i) {\n        val = i;\n        res.push_back(val);\n      }\n    } else\
    \ {\n      if (val > i) {\n        val = i;\n        res.push_back(val);\n   \
    \   }\n    }\n  }\n  return res;", "    long smalest_value, smalest_index, smallest_value,\
    \ smallest_index;\n    std::vector<long> ret_val;\n    // Your code goes here\n\
    \    std::priority_queue<long> que;\n    std::unordered_map<long, bool> is_even;\n\
    \n    for (long &i : arr)\n        is_even[i] = false;\n\n    que.push(arr[0]);\n\
    \n    while (!que.empty()) {\n        smalest_value = que.top();\n        que.pop();\n\
    \        smalest_index = smallest_value = smallest_index = 0;\n\n        for (long\
    \ &i : arr)\n            if (is_even[i] && !is_even[smalest_value]) {\n      \
    \          is_even[smalest_value] = true;\n                smallest_value = smalest_value;\n\
    \                smallest_index = i;\n                break;\n            } else\
    \ if (is_even[i]) {\n                if (i < smalest_value) {\n              \
    \      smallest_value = i;\n                    smallest_index = i;\n        \
    \        }\n            }\n        ret_val.push_back(smallest_value);\n      \
    \  ret_val.push_back(smallest_index);\n    }\n\n    if (ret_val.size() == 0) return\
    \ ret_val;\n\n    if (ret_val.size() == 1) {\n        is_even[ret_val[0]] = false;\n\
    \        que.push(ret_val[0]);\n    }\n\n    while (!que.empty()) {\n        smalest_value\
    \ = que.top();\n        que.pop();\n        smalest_index = smallest_value = smallest_index\
    \ = 0;\n\n        for (long &i : arr)\n            if (is_even[i] && !is_even[smalest_value])\
    \ {\n                is_even[smalest_value] = true;\n                smallest_value\
    \ = smalest_value;\n                smallest_index = i;\n                break;\n\
    \            } else if (is_even[i]) {\n                if (i < smalest_value)\
    \ {\n                    smallest_value = i;\n                    smallest_index\
    \ = i;\n                }\n            }\n        ret_val.push_back(smallest_value);\n\
    \        ret_val.push_back(smallest_index);\n    }\n\n    return ret_val;", " \
    \   // code here\n    auto ret = std::min_element(arr.begin(), arr.end()) + 1;\n\
    \    std::sort(arr.begin(), arr.end(), [&arr](long a, long b)\n    {\n       \
    \ if ((a % 2) != (b % 2)) {\n            return a < b;\n        }\n        return\
    \ a < arr[b];\n    });\n    return ret; ", "    long minValue = INT_MIN, minIndex\
    \ = -1;\n    for (auto i : arr) {\n        if (i < minValue) {\n            minValue\
    \ = i;\n            minIndex = arr.size();\n        }\n    }\n\n    if (minValue\
    \ == 0) {\n        std::vector<long> result;\n        if (arr.size() > 1) {\n\
    \            std::vector<long> index;\n            for (auto i : arr) {\n    \
    \            if (i != 0) {\n                    index.push_back(i);\n        \
    \        }\n            }\n            index.sort([](long a, long b) {\n     \
    \           return a < b;\n            });\n            result[0] = index[0];\n\
    \            result.push_back(index[0]);\n            return result;\n       \
    \ } else {\n            return {};\n        }\n    }\n    std::vector<long> result;\n\
    \    std::vector<long> index;\n    for (auto i : arr) {\n        if (i > 0) {\n\
    \            index.push_back(i);\n        }\n    }\n    index.sort([](long a,\
    \ long b) {\n        return a < b;\n    });\n    result[0] = index[0];\n    long\
    \ lastValue = index[0];\n    for (auto i : index[1:]) {\n        if (lastValue\
    \ == i) {\n            lastValue += 2;\n        } else {\n            result.push_back(lastValue);\n\
    \            lastValue = i;\n        }\n    }\n    result.push_back(lastValue);\n\
    \    return result;", "    // write your code here\n    \n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long sum = 0;\n    for (int i = 0; i\
    \ < arr.size(); ++i) {\n        sum += arr[i];\n        if (sum % 2 == 0) {\n\
    \            smalest_value = sum;\n            smalest_index = i;\n        }\n\
    \    }\n    \n    std::vector<long> res;\n    if (smalest_index != 0) {\n    \
    \    std::swap(smalest_value, arr[smalest_index]);\n        res.push_back(smalest_value);\n\
    \        res.push_back(smalest_index);\n    } else {\n        res.push_back(smalest_value);\n\
    \    }\n    return res;", "    std::vector<long> vec;\n    std::vector<bool> isEven(arr.size(),\
    \ true);\n    long smallestEven = arr[0];\n    int smallestIndex = -1;\n    for\
    \ (int i = 1; i < arr.size(); i++) {\n        if (isEven[i]) {\n            if\
    \ (arr[i] < smallestEven) {\n                smallestEven = arr[i];\n        \
    \        smallestIndex = i;\n            }\n        } else if (arr[i] == 0) {\n\
    \            if (smallestIndex != -1) {\n                isEven[smallestIndex]\
    \ = false;\n                vec.push_back(smallestEven);\n                smallestEven\
    \ = arr[i];\n                smallestIndex = -1;\n            }\n        }\n \
    \   }\n    return vec;", "  \n  long smallest_value = 0, smallest_index = 0;\n\
    \  for (size_t i = 1; i < arr.size(); i++) {\n    if (arr[i] < arr[i-1]) {\n \
    \     smallest_value = arr[i];\n      smallest_index = i;\n    }\n  }\n  // If\
    \ no even values are present\n  if (smallest_value == 0) {\n    return std::vector<long>();\n\
    \  }\n  // If no even values are present or the array is empty\n  if (smallest_value\
    \ == 0) {\n    return std::vector<long>();\n  }\n  // If there is just one even\
    \ value\n  if (arr.size() == 1) {\n    return std::vector<long>();\n  }\n  std::vector<long>\
    \ ans;\n  std::vector<long> even_indices;\n  \n  // For each element in the array\n\
    \  for (size_t i = 0; i < arr.size(); i++) {\n    // If the current element is\
    \ smaller than the previous element\n    if (arr[i] < arr[smallest_index]) {\n\
    \      // If the current element is smaller than the previous element and is even\n\
    \      if (arr[i] % 2 == 0) {\n        even_indices.push_back(i);\n      }\n \
    \     // If the current element is smaller than the previous element is not even\n\
    \      else {\n        ans.push_back(arr[i]);\n      }\n    }\n    // If the current\
    \ element is smaller than the previous element\n    else if (arr[i] == arr[smallest_index]\
    \ && arr[i] % 2 != 0) {\n      ans.push_back(arr[i]);\n    }\n  }\n  // If there\
    \ are more than one even values\n  if (even_indices.size() > 1) {\n    for (size_t\
    \ i = 0; i < even_indices.size(); i++) {\n      // Push the even value to ans\
    \ vector\n      ans.push_back(arr[even_indices[i]]);\n    }\n  }\n  // If there\
    \ are just one even value\n  else if (even_indices.size() == 1) {\n    ans.push_back(arr[even_indices[0]]);\n\
    \  }\n  return ans;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    std::vector<long> res;\n    for(int i=0; i<arr.size(); i++)\n        if(arr[i]\
    \ % 2 == 0)\n        {\n            if(smalest_value > arr[i])\n            {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    \n    for(int i=0; i<arr.size(); i++)\n       \
    \ if(arr[i] % 2 == 0)\n        {\n            if(smalest_value == arr[i])\n  \
    \          {\n                res.push_back( smalest_value);\n               \
    \ res.push_back( smalest_index);\n                break;\n            }\n    \
    \    }\n    \n    return res;", "    std::vector<long> result;\n    long evenSmallestValue\
    \ = std::numeric_limits<long>::max();\n    long smallestIndex = 0;\n    // check\
    \ if all nodes are even\n    for(long i = 0; i < arr.size(); i++) {\n        //\
    \ check if current index is even\n        if(arr[i] % 2 == 0) {\n            //\
    \ if even, check if current value is smaller than previously chosen smallest value\n\
    \            if(arr[i] < evenSmallestValue) {\n                evenSmallestValue\
    \ = arr[i];\n                smallestIndex = i;\n            }\n        }\n  \
    \  }\n    // if even smallest value found, then return\n    if(evenSmallestValue\
    \ == std::numeric_limits<long>::max()) return result;\n    // if current value\
    \ is smaller than smallest value found then find smallest index\n    if(evenSmallestValue\
    \ < result[smallestIndex]) smallestIndex = evenSmallestValue;\n    // return smallest\
    \ and smallest index\n    return {evenSmallestValue, smallestIndex};", "    long\
    \ smalest_value, smalest_index, smalest_idx=0;\n    std::vector<long> ans;\n \
    \   // sort the vector in descending order\n    std::sort(arr.rbegin(), arr.rend(),\
    \ greater<>());\n    // find smallest even value\n    for(int i=0; i<arr.size();\
    \ i++){\n        if(arr[i]%2==0){\n            smalest_value=arr[i];\n       \
    \     smalest_index=i;\n            smalest_idx=i;\n        }\n    }\n    // if\
    \ array is empty, return empty vector\n    if(arr.empty()){\n        return ans;\n\
    \    }\n    // if we haven't found any even value, return the vector with smallest\
    \ value\n    if(smalest_value==0){\n        ans.push_back(smalest_value);\n  \
    \      ans.push_back(smalest_idx);\n        return ans;\n    }\n    // find the\
    \ smallest even index\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==smalest_value){\n\
    \            smalest_idx=i;\n        }\n    }\n    // if we have found the smallest\
    \ even value, then pick up the smallest even index\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_idx);\n    return ans;", "\tstd::vector<long> ans(2);\n\
    \tlong smallest, index;\n\tbool flag = false;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tif (!flag && arr[i] % 2 == 0) {\n\t\t\tsmallest = arr[i];\n\t\t\t\
    index = i;\n\t\t\tflag = true;\n\t\t} else if (arr[i] == smallest) {\n\t\t\tif\
    \ (arr[i] % 2 == 0) {\n\t\t\t\tflag = true;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\
    \ else {\n\t\t\tflag = false;\n\t\t}\n\t}\n\tif (flag) {\n\t\tans[0] = smallest;\n\
    \t\tans[1] = index;\n\t} else {\n\t\tans[0] = 0;\n\t\tans[1] = 0;\n\t}\n\treturn\
    \ ans;", "    long smalest_value = 0;\n    long min_index = 0;\n    int max_index\
    \ = arr.size() - 1;\n    while (max_index >= 0) {\n        if (arr[max_index]\
    \ % 2 == 0) {\n            smalest_value = arr[max_index];\n            min_index\
    \ = max_index;\n        } else if (smalest_value != arr[max_index]) {\n      \
    \      smalest_value = arr[max_index];\n            min_index = max_index;\n \
    \       } else {\n            ++max_index;\n        }\n    }\n    std::vector<long>\
    \ ret;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value\
    \ && i != min_index) {\n            ret.emplace_back(arr[i], i);\n        }\n\
    \    }\n    return ret;", "  std::sort(arr.begin(), arr.end());\n  std::unique(arr.begin(),\
    \ arr.end()); // remove duplicate nodes\n  std::set<long> evens;\n  for (size_t\
    \ i = 0; i != arr.size(); ++i) {\n    long curr = arr[i];\n    if (curr % 2 ==\
    \ 0) {\n      evens.insert(curr);\n    }\n  }\n  std::vector<long> res;\n  if\
    \ (evens.size() == 0) return res;\n  res.push_back(*std::min_element(evens.begin(),\
    \ evens.end())); // pick the smallest even element\n  res.push_back(std::distance(arr.begin(),\
    \ std::find(arr.begin(), arr.end(), *std::min_element(evens.begin(), evens.end())))\
    \ // pick the smallest index\n  );\n  return res;", "    long smalest_value =\
    \ arr[0];\n    int smallest_index = 0;\n    long max_value = arr[0];\n    for(long\
    \ i : arr){\n        if(i>max_value){\n            max_value = i;\n        }\n\
    \    }\n    for(int i : arr){\n        if(max_value%2==0 && i%2==0){\n       \
    \     if(i<smalest_value){\n                smalest_value = i;\n            }\n\
    \            if(smallest_index>max_value/2){\n                smallest_index =\
    \ max_value/2;\n            }\n        }\n    }\n    std::vector<long> res;\n\
    \    if(smallest_index>0){\n        res.push_back(smalest_value);\n        res.push_back(smallest_index);\n\
    \    }\n    return res;", "    // write your code here\n    long smallestEvenValue,\
    \ minIndex;\n    smallestEvenValue = arr[0];\n    minIndex = arr[0];\n    long\
    \ minValue = arr[0];\n\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n            smallestEvenValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (smallestEvenValue\
    \ == 0) {\n        std::vector<long> res;\n        res.push_back(arr[0]);\n  \
    \      res.push_back(0);\n        return res;\n    }\n    minValue = arr[minIndex];\n\
    \    return std::vector<long>{smallestEvenValue, minIndex};"]
stop_tokens:
- "\n}"
