language: cpp
name: HumanEval_158_find_max
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end(), std::greater<std::string>());\n\
    \    return words.back();\n}\nint main() {\n    auto candidate = find_max;\n \
    \   assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp00_6d6nm: /tmp/tmp00_6d6nm.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int n = words.size();\n  std::string maxWord = \"\";\n  int maxCharCount\
    \ = 0;\n  // count the characters\n  for (int i = 0; i < n; ++i) {\n    size_t\
    \ count = 0;\n    for (char &c : words[i]) {\n      if (std::isalpha(c)) ++count;\n\
    \    }\n    maxCharCount = std::max(maxCharCount, count);\n  }\n  // compare each\
    \ word with each other word\n  for (int i = 1; i < n; ++i) {\n    int commonCharCount\
    \ = 0;\n    int commonWordIndex = 0;\n    std::string thisWord = words[i - 1];\n\
    \    for (int j = 0; j < i; ++j) {\n      int thisCharCount = 0;\n      std::string\
    \ thisWord2 = words[j - 1];\n      for (int k = 0; k < n; ++k) {\n        char\
    \ thisChar = words[k][j];\n        if (thisChar == thisWord.at(k)) {\n       \
    \   ++thisCharCount;\n        }\n      }\n      if (thisCharCount > commonCharCount)\
    \ {\n        commonCharCount = thisCharCount;\n        commonWordIndex = j;\n\
    \      }\n    }\n    if (commonCharCount == maxCharCount) {\n      maxCharCount\
    \ = commonCharCount;\n      maxWord = thisWord;\n    }\n  }\n  return maxWord;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6ou9gda.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpd6ou9gda.cpp:20:48: error: no matching function for call\
    \ to \u2018max(int&, size_t&)\u2019\n   20 |     maxCharCount = std::max(maxCharCount,\
    \ count);\n      |                                                ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd6ou9gda.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpd6ou9gda.cpp:20:48: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018size_t\u2019 {aka \u2018long unsigned int\u2019})\n   20 |     maxCharCount\
    \ = std::max(maxCharCount, count);\n      |                                  \
    \              ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd6ou9gda.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpd6ou9gda.cpp:20:48:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018size_t\u2019 {aka \u2018long unsigned int\u2019})\n   20 |\
    \     maxCharCount = std::max(maxCharCount, count);\n      |                 \
    \                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \          "
  stdout: ''
  timestamp: 1660116789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int m = std::numeric_limits<int>::min();\n    for (std::string\
    \ & word : words) {\n        // If current word has same number of unique characters\
    \ as current maximum\n        // word then update maximum\n        if (std::count(word.begin(),\
    \ word.end(), 0) == m) {\n            m = std::count(word.begin(), word.end(),\
    \ 0);\n            word = std::string(word.begin(), word.end());\n        }\n\
    \    }\n    return word;\n}\nint main() {\n    auto candidate = find_max;\n  \
    \  assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyu7zsybb.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpyu7zsybb.cpp:20:12: error: \u2018word\u2019 was not declared\
    \ in this scope; did you mean \u2018words\u2019?\n   20 |     return word;\n \
    \     |            ^~~~\n      |            words\n"
  stdout: ''
  timestamp: 1660116788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string word;\n    int count = 0;\n    for (auto it = words.begin();\
    \ it != words.end(); ++it)\n    {\n        std::sort(words.begin(), words.end());\n\
    \        int l = std::count_if(words.begin(), words.end(),\n                 \
    \             [&](const std::string& s) {\n                                  \
    \    return s.find(*it) != std::string::npos;\n                              });\n\
    \        if (l > count)\n        {\n            word = *it;\n            count\
    \ = l;\n        }\n    }\n    return word;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmprypjdk1c: /tmp/tmprypjdk1c.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmps865890o: /tmp/tmps865890o.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // your code goes here\n    std::string max;\n    int maxCount =\
    \ 0;\n    int curCount = 0;\n    for(auto &x: words)\n    {\n        for(auto\
    \ &y: words)\n        {\n            if (x == y)\n            {\n            \
    \    continue;\n            }\n            if (x.size() < y.size() )\n       \
    \     {\n                continue;\n            }\n            int cmp = std::stoi(x.c_str());\n\
    \            cmp = std::stoi(y.c_str());\n            if(cmp > 0)\n          \
    \  {\n                curCount++;\n            }\n            else\n         \
    \   {\n                curCount--;\n            }\n            if (curCount >\
    \ maxCount)\n            {\n                max = x;\n                maxCount\
    \ = curCount;\n            }\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    char buf[512] = {0};\n    std::string\
    \ max;\n    int maxcount = 0;\n    for(int i = 0; i < words.size(); i++){\n  \
    \      for(int j = 0; j < words[i].size(); j++){\n            for(int k = j +\
    \ 1; k < words[i].size(); k++){\n                buf[512] = words[i][j];\n   \
    \             buf[512] = words[i][k];\n                bool flag = true;\n   \
    \             for(int l = 0; l < 512; l++){\n                    if(buf[l] ==\
    \ 0){\n                        break;\n                    }\n               \
    \     else{\n                        flag = false;\n                    }\n  \
    \              }\n                if(flag){\n                    maxcount = max(maxcount,\
    \ words[i].size() - 1);\n                    max = words[i].substr(0, j);\n  \
    \              }\n            }\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsdbd9480.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpsdbd9480.cpp:30:65: error: no match for call to \u2018(std::string\
    \ {aka std::__cxx11::basic_string<char>}) (int&, std::__cxx11::basic_string<char>::size_type)\u2019\
    \n   30 |                     maxcount = max(maxcount, words[i].size() - 1);\n\
    \      |                                                                 ^\n"
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string biggest_word = \"\";\n    int biggest_word_count =\
    \ 0;\n\n    for (int i = 0; i < words.size(); i++) {\n        int current_count\
    \ = words[i].size();\n        if (current_count > biggest_word_count) {\n    \
    \        biggest_word_count = current_count;\n            biggest_word = words[i];\n\
    \        }\n    }\n    return biggest_word;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpc4694tbn: /tmp/tmpc4694tbn.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string result=\"\";\n    int max=0, count=0,\
    \ size=0;\n    for(auto it=words.begin(); it!=words.end(); it++){\n        if(*it\
    \ == result){\n            count++;\n        }\n        else {\n            count\
    \ = 1;\n        }\n        if(count > max){\n            max = count;\n      \
    \  }\n        size += count;\n        result = *it;\n    }\n    if(size > max){\n\
    \        return result;\n    }\n    else return \"\";\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp54xd9hz1: /tmp/tmp54xd9hz1.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result = \"\";\n    int counter = 0;\n    // sort\
    \ words by number of unique characters\n    std::sort(words.begin(), words.end(),\
    \ std::greater<>());\n    // find out the maximum\n    for (auto &word : words)\
    \ {\n        counter += word.length();\n        // if counter > length\n     \
    \   if (counter > word.length()) {\n            result += word;\n        }\n \
    \   }\n    if (result == \"\")\n        return \"\";\n    if (result.length()\
    \ > words.size())\n        return words[0];\n    return result;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpzoo2ig_z: /tmp/tmpzoo2ig_z.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int res = 0;\n    int max_len = 0, max_idx = 0;\n    for (const\
    \ auto &word : words) {\n        if (word.length() > max_len) {\n            max_len\
    \ = word.length();\n            max_idx = res;\n        }\n        if (word.length()\
    \ == max_len && std::count(word.begin(), word.end(), 'a') == 0) {\n          \
    \  max_idx = res;\n        }\n        if (word.length() == max_len && std::count(word.begin(),\
    \ word.end(), 'e') == 0) {\n            max_idx = res;\n        }\n        if\
    \ (word.length() == max_len && std::count(word.begin(), word.end(), 'i') == 0)\
    \ {\n            max_idx = res;\n        }\n        if (word.length() == max_len\
    \ && std::count(word.begin(), word.end(), 'o') == 0) {\n            max_idx =\
    \ res;\n        }\n        if (word.length() == max_len && std::count(word.begin(),\
    \ word.end(), 'u') == 0) {\n            max_idx = res;\n        }\n        res\
    \ = std::max(res, word.length());\n    }\n    return words[max_idx];\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyy1qbhb5.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpyy1qbhb5.cpp:33:42: error: no matching function for call\
    \ to \u2018max(int&, std::__cxx11::basic_string<char>::size_type)\u2019\n   33\
    \ |         res = std::max(res, word.length());\n      |                     \
    \                     ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyy1qbhb5.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyy1qbhb5.cpp:33:42: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   33 |         res = std::max(res, word.length());\n\
    \      |                                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyy1qbhb5.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyy1qbhb5.cpp:33:42:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019})\n   33 |         res = std::max(res, word.length());\n\
    \      |                                   "
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::unordered_set<char> chars;\n    std::string res;\n    for\
    \ (auto &w : words) {\n        std::for_each(w.begin(), w.end(), [&chars](char\
    \ c) {\n            chars.insert(c);\n        });\n        if (chars.size() >\
    \ res.size()) {\n            res = w;\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmphr37rkie: /tmp/tmphr37rkie.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max = 0;\n    std::string word;\n\
    \    for (auto &w : words) {\n        int len = w.size();\n        int count =\
    \ 0;\n        for (int i = 0; i < len; i++) {\n            count += w[i];\n  \
    \      }\n        if (count > max) {\n            word = w;\n            max =\
    \ count;\n        }\n    }\n    if (max == 0)\n        return \"\";\n    return\
    \ word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmppxj6jp8u: /tmp/tmppxj6jp8u.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<unsigned int, std::string> hash;\n    for (std::string\
    \ word : words) {\n        hash.insert(std::pair<unsigned int, std::string>(word.length(),\
    \ word));\n    }\n    return hash[words.size() - 1]; // Return the string with\
    \ max length.\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpvr80xsyq: /tmp/tmpvr80xsyq.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Write your code here\n  std::string result = words[0];\n  for\
    \ (size_t i = 1; i < words.size(); i++) {\n    if (words[i].size() > result.size())\
    \ {\n      result = words[i];\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpql8a15xs: /tmp/tmpql8a15xs.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_word = \"\";\n    std::string max_count = \"\"\
    ;\n    int max_count = 0;\n    for (size_t i = 0; i < words.size(); i++) {\n \
    \       std::string temp_word = words[i];\n        int temp_count = 0;\n     \
    \   for (size_t j = 0; j < words.size(); j++) {\n            if (i != j) {\n \
    \               if (words[i].size() > words[j].size()) {\n                   \
    \ temp_word = words[j];\n                }\n            }\n        }\n       \
    \ int count = 0; // count is used for counting unique characters in temp_word\n\
    \        for (size_t j = 0; j < words.size(); j++) {\n            if (words[j].size()\
    \ == temp_word.size()) {\n                count++;\n            }\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_word = temp_word;\n        }\n    }\n    return max_word;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpl2imlf.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpkpl2imlf.cpp:13:9: error: conflicting declaration \u2018\
    int max_count\u2019\n   13 |     int max_count = 0;\n      |         ^~~~~~~~~\n\
    /tmp/tmpkpl2imlf.cpp:12:17: note: previous declaration as \u2018std::string max_count\u2019\
    \n   12 |     std::string max_count = \"\";\n      |                 ^~~~~~~~~\n\
    /tmp/tmpkpl2imlf.cpp:30:19: error: no match for \u2018operator>\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   30 |         if (count > max_count) {\n      |             ~~~~~ ^ ~~~~~~~~~\n\
    \      |             |       |\n      |             int     std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkpl2imlf.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkpl2imlf.cpp:30:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   30 |         if (count > max_count) {\n      |     \
    \                ^~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkpl2imlf.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n  "
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Write your code here\n  \n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp1b94yw1b: /tmp/tmp1b94yw1b.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char,int> m;\n    for (std::string word : words)\n  \
    \  {\n        std::map<char,int>::iterator it = m.find(word[0]);\n        if (it\
    \ == m.end())\n        {\n            it = m.insert(std::pair<char,int>(word[0],1)).first;\n\
    \        }\n        else\n        {\n            it->second++;\n        }\n  \
    \  }\n    std::string max = \"\";\n    for (std::map<char,int>::iterator it =\
    \ m.begin();\n         it != m.end(); ++it)\n    {\n        if (it->second > m.size()\
    \ && it->first != ' ')\n        {\n            max = it->first;\n            break;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpv6x678yg: /tmp/tmpv6x678yg.cpp:38: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    if (words.empty()) {\n        return \"\";\n    }\n    int n =\
    \ words.size();\n    int m = n;\n    int cnt = 1;\n    std::string str = \"\"\
    ;\n    for (int i = 1; i < n; ++i) {\n        if (words[i] < words[i - 1]) {\n\
    \            ++m;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n     \
    \   str += words[i];\n        for (int j = i + 1; j < n; ++j) {\n            if\
    \ (words[j] < words[i]) {\n                std::swap(words[i], words[j]);\n  \
    \              ++cnt;\n            }\n        }\n        if (cnt > m) {\n    \
    \        m = cnt;\n            str = words[i];\n        }\n    }\n    return str;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp4uq536z2: /tmp/tmp4uq536z2.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char, int> max_map;\n    for (auto &str : words) {\n\
    \        auto it = max_map.find(str[0]);\n        if (it == max_map.end()) {\n\
    \            max_map.insert(std::pair<char, int>(str[0], 1));\n        } else\
    \ {\n            it->second++;\n        }\n    }\n    for (auto &it : max_map)\
    \ {\n        if (it.second > 1) {\n            return it.first;\n        }\n \
    \   }\n    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6c_hz4wg.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp6c_hz4wg.cpp:22:23: error: could not convert \u2018it.std::pair<const\
    \ char, int>::first\u2019 from \u2018const char\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   22 |             return\
    \ it.first;\n      |                    ~~~^~~~~\n      |                    \
    \   |\n      |                       const char\n"
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // your code goes here\n    int n = words.size();\n    int max\
    \ = -1;\n    std::string res;\n    for (int i = 0; i < n; i++) {\n        int\
    \ len = 0;\n        for (int j = 0; j < i; j++) {\n            len += words[j].size();\n\
    \        }\n        if (len > max) {\n            max = len;\n            res\
    \ = words[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpwz29381t: /tmp/tmpwz29381t.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ count = 0;\n    for (size_t i = 0; i < words.size(); i++)\n    {\n        count\
    \ += words[i].size();\n        if(count > words[i].size())\n        {\n      \
    \      max = words[i];\n            count = words[i].size();\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpbnodq0ft: /tmp/tmpbnodq0ft.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int cnt = 0;\n    for (auto &x : words)\
    \ {\n        cnt += x.size();\n        if (cnt > max.size()) {\n            max\
    \ = x;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp_y9zxywf: /tmp/tmp_y9zxywf.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // your code here\n    std::string max = \"\";\n    for (auto\
    \ it=words.begin(); it!=words.end(); ++it) {\n        int uc = std::count_if(std::begin(*it),\
    \ std::end(*it), [] (const std::string &x) {return x.size() != x.find_first_not_of('\
    \ ');});\n        if (uc > max.size()) {\n            max = *it;\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppszis3ju.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = find_max(std::vector<std::__cxx11::basic_string<char> >)::<lambda(const\
    \ string&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:   required from\
    \ \u2018typename std::iterator_traits<_Iterator>::difference_type std::__count_if(_InputIterator,\
    \ _InputIterator, _Predicate) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_pred<find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda(const string&)> >; typename std::iterator_traits<_Iterator>::difference_type\
    \ = long int]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4144:29:   required from\
    \ \u2018typename std::iterator_traits<_Iterator>::difference_type std::count_if(_IIter,\
    \ _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = find_max(std::vector<std::__cxx11::basic_string<char> >)::<lambda(const\
    \ string&)>; typename std::iterator_traits<_Iterator>::difference_type = long\
    \ int]\u2019\n/tmp/tmppszis3ju.cpp:14:136:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:283:11:\
    \ error: no match for call to \u2018(find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda(const string&)>) (char&)\u2019\n  283 |  { return bool(_M_pred(*__it));\
    \ }\n      |           ^~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:283:11:\
    \ note: candidate: \u2018bool (*)(const string&)\u2019 {aka \u2018bool (*)(const\
    \ std::__cxx11::basic_string<char>&)\u2019} <conversion>\n/usr/include/c++/9/bits/predefined_ops.h:283:11:\
    \ not"
  stdout: ''
  timestamp: 1660116789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result = \"\";\n    int max_size = 0;\n    for(std::string\
    \ word : words) {\n        max_size = getMaxSize(word, max_size);\n        if(max_size\
    \ > result.length()) {\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxr6ns9q7.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpxr6ns9q7.cpp:14:20: error: \u2018getMaxSize\u2019 was not\
    \ declared in this scope\n   14 |         max_size = getMaxSize(word, max_size);\n\
    \      |                    ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::map<char,int> map;\n  for (std::string &s: words) {\n    for\
    \ (char &c: s) {\n      map[c]++;\n    }\n  }\n  for (char &c: map) {\n    int\
    \ count = map.at(c);\n    if (count > 1) {\n      return words[std::distance(words.begin(),\n\
    \                                std::max_element(words.begin(), words.end()\n\
    \                                                   ,\n                      \
    \                             [&](std::string &x, std::string &y){\n         \
    \                                             if (x.size() > y.size()) {\n   \
    \                                                     return true;\n         \
    \                                             } else {\n                     \
    \                                   return false;\n                          \
    \                            }\n                                             \
    \     }\n                                                  )\n               \
    \                      )];\n    }\n  }\n  return \"\";\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqmwq9h35.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpqmwq9h35.cpp:17:17: error: invalid initialization of reference\
    \ of type \u2018char&\u2019 from expression of type \u2018std::pair<const char,\
    \ int>\u2019\n   17 |   for (char &c: map) {\n      |                 ^~~\n"
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string ans = \"\";\n    int max_len = -1;\n    for (auto&\
    \ word : words) {\n        int len = word.length();\n        if (max_len < len)\
    \ {\n            max_len = len;\n            ans = word;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp4dhxn0ij: /tmp/tmp4dhxn0ij.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string maxWord = \"\";\n    int\
    \ maxNum = 0;\n    \n    for (auto word : words){\n        int currentNum = 0;\n\
    \        for (auto c : word){\n            if (std::count(word.begin(), word.end(),\
    \ c) != 0)\n                currentNum++;\n        }\n        if (currentNum >\
    \ maxNum){\n            maxNum = currentNum;\n            maxWord = word;\n  \
    \      }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp5lom5gs4: /tmp/tmp5lom5gs4.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int count = 0, max = 0;\n  for (std::string word : words) {\n  \
    \  for (size_t i = 0; i < word.length(); i++) {\n      count[word[i]]++;\n   \
    \   if (count[word[i]] > max) {\n        max = count[word[i]];\n      }\n    }\n\
    \  }\n  if (count == 0 && words.size() == 0) {\n    return \"\";\n  }\n  if (max\
    \ == 0) {\n    return words[0];\n  }\n  for (size_t i = 0; i < words.size(); i++)\
    \ {\n    if (count[words[i]] > max) {\n      return words[i];\n    }\n  }\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpul10tk39.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpul10tk39.cpp:14:20: error: invalid types \u2018int[__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}]\u2019 for array subscript\n   14 |       count[word[i]]++;\n\
    \      |                    ^\n/tmp/tmpul10tk39.cpp:15:24: error: invalid types\
    \ \u2018int[__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\
    \ {aka char}]\u2019 for array subscript\n   15 |       if (count[word[i]] > max)\
    \ {\n      |                        ^\n/tmp/tmpul10tk39.cpp:16:28: error: invalid\
    \ types \u2018int[__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\
    \ {aka char}]\u2019 for array subscript\n   16 |         max = count[word[i]];\n\
    \      |                            ^\n/tmp/tmpul10tk39.cpp:27:14: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   27 |     if (count[words[i]] > max) {\n      |              ^\n/tmp/tmpul10tk39.cpp:31:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   31 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    int unique_char = 0;\n    int index\
    \ = 0;\n    for (auto word : words) {\n        for (int i = 0; i < word.length();\
    \ ++i) {\n            if (unique_char < word[i])\n                unique_char\
    \ = word[i];\n        }\n    }\n    index = words.size() - 1;\n    while (index\
    \ >= 0) {\n        if (words[index].length() == unique_char)\n            return\
    \ words[index];\n        index--;\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpes_m3znz: /tmp/tmpes_m3znz.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end());\n    std::map<char, size_t>\
    \ m;\n    for (auto &w : words) {\n        for (auto &c : w) {\n            auto\
    \ it = m.find(c);\n            if (it != m.end())\n                it->second\
    \ += 1;\n            else\n                m.insert(std::pair<char, size_t>(c,\
    \ 1));\n        }\n    }\n\n    std::string res = words[0];\n    for (auto &w\
    \ : words) {\n        auto it = m.find(w[0]);\n        if (it == m.end()) {\n\
    \            return res;\n        } else if (it->second > res.size())\n      \
    \      res = w;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpyfrzmvru: /tmp/tmpyfrzmvru.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end(), [](const std::string& a,\
    \ const std::string& b) -> bool\n    {\n        return a.length() < b.length();\n\
    \    });\n\n    std::string longest = words[0];\n\n    int max_chars = longest.length();\n\
    \n    for (size_t i = 1; i < words.size(); i++)\n    {\n        if (max_chars\
    \ < words[i].length())\n        {\n            longest = words[i];\n         \
    \   max_chars = longest.length();\n        }\n    }\n\n    return longest;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp0e7e396a: /tmp/tmp0e7e396a.cpp:34: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::set<std::string> uniqueCharacters;\n    std::string maxWord\
    \ = \"\";\n    for (std::string word : words) {\n        std::unordered_map<char,\
    \ int> uniqueCharactersMap;\n        for (char character : word) {\n         \
    \   uniqueCharactersMap[character]++;\n        }\n        std::string maxCharacter\
    \ = \"\";\n        int maxCharacterCount = 0;\n        for (char character : word)\
    \ {\n            if (uniqueCharactersMap.find(character) == uniqueCharactersMap.end())\
    \ {\n                maxCharacter = character;\n                maxCharacterCount\
    \ = 0;\n            }\n            else {\n                if (uniqueCharactersMap[character]\
    \ > maxCharacterCount) {\n                    maxCharacter = character;\n    \
    \                maxCharacterCount = uniqueCharactersMap[character];\n       \
    \         }\n            }\n        }\n        if (maxCharacter.length() > maxWord.length())\
    \ {\n            maxWord = word;\n        }\n        uniqueCharacters.insert(maxCharacter);\n\
    \    }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp6_b37pg3: /tmp/tmp6_b37pg3.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::map<std::string, int> map;\n  int max = 0;\n  for (auto &word\
    \ : words) {\n    auto itr = map.find(word);\n    if (itr != map.end()) {\n  \
    \    max = std::max(max, itr->second);\n    } else {\n      map.insert({word,\
    \ 1});\n    }\n  }\n  for (auto itr = map.begin(); itr != map.end(); itr++) {\n\
    \    if (itr->second == max) {\n      return itr->first;\n    }\n  }\n  return\
    \ \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpf1xyxq_u: /tmp/tmpf1xyxq_u.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // your code goes here\n  assert(words.size() > 0);\n  std::map<char,\
    \ int> m;\n  for (const auto& word : words) {\n    size_t count = 0;\n    for\
    \ (char c : word) {\n      count += m[c];\n      m[c] = count;\n    }\n  }\n \
    \ auto it=m.begin();\n  std::string maxWord=\"\";\n  if (it != m.end() && it->second==words.size())\
    \ maxWord=it->first;\n  else maxWord=\"\";\n  for (const auto& word : words) {\n\
    \    size_t count = 0;\n    for (char c : word) {\n      count += m[c];\n    \
    \  m[c] = count;\n    }\n    if (count > maxWord.size()) maxWord=word;\n  }\n\
    \  return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmph57bkzp0: /tmp/tmph57bkzp0.cpp:37: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int max_count = words.front().size();\n  for (size_t i = 0; i <\
    \ words.size(); i++) {\n    size_t current_count = words[i].size();\n    if (current_count\
    \ > max_count) {\n      max_count = current_count;\n    }\n  }\n\n  std::string\
    \ result = words[0];\n  for (size_t i = 1; i < words.size(); i++) {\n    if (words[i].size()\
    \ == max_count) {\n      result += words[i];\n    }\n  }\n\n  return result;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpkgbqa3rt: /tmp/tmpkgbqa3rt.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int numOfUniqueCharacters = 0;\n    std::string maxWord = \"\"\
    ;\n    // Write your code here\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::logic_error'\n  what():\
    \  basic_string::_M_construct null not valid\n"
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // write your code here\n    std::string word = \"\";\n    int\
    \ max_count = -1;\n    for (auto w : words) {\n        int count = 0;\n      \
    \  for (auto c : w) {\n            count += 1;\n            if (count > max_count)\
    \ {\n                word = w;\n                max_count = count;\n         \
    \   }\n        }\n    }\n    if (max_count == 0)\n        return \"\";\n    return\
    \ word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp9031ljjq: /tmp/tmp9031ljjq.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result = \"\";\n    int max = 0;\n    for(auto word:\
    \ words) {\n        auto temp = std::count(word.begin(), word.end(), 'a');\n \
    \       max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'b');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'c');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'd');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'e');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'f');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'g');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'h');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'i');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'j');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'k');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'l');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'm');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'n');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'o');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'p');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'q');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'r');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 's');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 't');\n        max = temp > max ? temp : max;\n        temp = std::count(word.begin(),\
    \ word.end(), 'u');\n        max = \n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8yj0rd3y.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp8yj0rd3y.cpp:56:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   56 | }\n      | ^\n/tmp/tmp8yj0rd3y.cpp:57:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   57\
    \ | int main() {\n      |            ^\n/tmp/tmp8yj0rd3y.cpp:69:1: error: expected\
    \ \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp8yj0rd3y.cpp:10:54:\
    \ note: to match this \u2018{\u2019\n   10 | std::string find_max(std::vector<std::string>\
    \ words) {\n      |                                                      ^\n/tmp/tmp8yj0rd3y.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660116789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string result = \"\";\n    std::map<char,\
    \ int> charCount;\n    for (int i = 0; i < words.size(); i++) {\n        for (int\
    \ j = 0; j < words[i].length(); j++) {\n            char ch = words[i][j];\n \
    \           if (charCount.find(ch) == charCount.end()) {\n                charCount[ch]\
    \ = 1;\n            }\n            else {\n                charCount[ch] += 1;\n\
    \            }\n        }\n    }\n    bool found = false;\n    for (int i = 0;\
    \ i < charCount.size(); i++) {\n        if (charCount[i] > 1 && charCount[i] >\
    \ charCount.at(result)) {\n            result = i;\n            found = true;\n\
    \        }\n    }\n    if (!found) {\n        result = 0;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxjyri5om.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpxjyri5om.cpp:27:67: error: no matching function for call\
    \ to \u2018std::map<char, int>::at(std::string&)\u2019\n   27 |         if (charCount[i]\
    \ > 1 && charCount[i] > charCount.at(result)) {\n      |                     \
    \                                              ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpxjyri5om.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:535:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::at(const key_type&) [with _Key = char; _Tp = int; _Compare\
    \ = std::less<char>; _Alloc = std::allocator<std::pair<const char, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = char]\u2019\n  535 |       at(const key_type& __k)\n      |       ^~\n/usr/include/c++/9/bits/stl_map.h:535:26:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const char&\u2019}\n  535 |       at(const key_type& __k)\n     \
    \ |          ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:544:7: note:\
    \ candidate: \u2018const mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::at(const\
    \ key_type&) const [with _Key = char; _Tp = int; _Compare = std::less<char>; _Alloc\
    \ = std::allocator<std::pair<const char, int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = char]\u2019\n  544 |       at(const key_type& __k) const\n      |       ^~\n\
    /usr/include/c++/9/bits/stl_map.h:544:26: note:   no known conversion for argument\
    \ 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const key_type&\u2019 {aka \u2018const char&\u2019}\n  544 |      \
    \ at(const key_type& __k) const\n      |          ~~~~~~~~~~~~~~~~^~~\n/tmp/tmpxjyri5om.cpp:33:18:\
    \ error: ambiguous over"
  stdout: ''
  timestamp: 1660116789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string maxWord = \"\";\n    int maxChars = 0;\n    std::string\
    \ word = \"\";\n    for (auto word : words) {\n        int charCount = word.size();\n\
    \        if (charCount > maxChars) {\n            maxChars = charCount;\n    \
    \        maxWord = word;\n        }\n    }\n    return maxWord;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpq184rnam: /tmp/tmpq184rnam.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char, int> m;\n    std::string max;\n    for (std::string\
    \ word : words) {\n        for (char ch : word) {\n            if (m.count(ch)\
    \ == 0) {\n                m[ch] = 1;\n                max = ch;\n           \
    \ } else if (m[ch] > 1) {\n                max = ch;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpzq2_7di6: /tmp/tmpzq2_7di6.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<std::string, int> m;\n    for (auto& w: words)\n    \
    \    m[w]++;\n    if (m.size() == 1)\n        return m.begin()->first;\n    for\
    \ (auto& w: words) {\n        auto it = m[w];\n        for (auto j = it + 1; j\
    \ < m.size(); j++)\n            m[w] = j;\n    }\n    return m.begin()->first;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpdryaclw1: /tmp/tmpdryaclw1.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // code here\n  // your code goes here\n  std::sort(words.begin(),\
    \ words.end());\n  int max_len = 0, cur = 0;\n  for (const auto& word : words)\
    \ {\n    auto len = word.size();\n    if (len > max_len) {\n      max_len = len;\n\
    \      cur = len;\n    }\n  }\n  if (max_len == 0)\n    return \"\";\n  if (max_len\
    \ > 0)\n    return words[cur];\n  else\n    return \"\";\n}\nint main() {\n  \
    \  auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp2mrgk98x: /tmp/tmp2mrgk98x.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int m = 0, max_count = 1;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        for (int j = 0; j < words[i].size(); j++) {\n            int\
    \ count = words[i][j].length();\n            if (count > max_count) {\n      \
    \          max_count = count;\n                m = i;\n            }\n       \
    \ }\n    }\n    if (m == 0) return \"\";\n    return words[m];\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2yr0qs9_.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp2yr0qs9_.cpp:14:37: error: request for member \u2018length\u2019\
    \ in \u2018(& words.std::vector<std::__cxx11::basic_string<char> >::operator[](((std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type)i)))->std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)j))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   14 |             int count\
    \ = words[i][j].length();\n      |                                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // write your code here\n    std::string max_word = \"\";\n  \
    \  int max_count = 0;\n    for (auto word: words) {\n        int cur_count = 0;\n\
    \        for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) < cur_count) {\n                max_word = word;\n                cur_count\
    \ = std::count(word.begin(), word.end(), c);\n            }\n        }\n     \
    \   if (cur_count > max_count) {\n            max_word = word;\n            max_count\
    \ = cur_count;\n        }\n    }\n    return max_word;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmps51_v5nx: /tmp/tmps51_v5nx.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::vector<std::string> temp;\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (std::string word : words) {\n        int count =\
    \ 0;\n        for (char ch : word) {\n            count += 1;\n        }\n   \
    \     if (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n        temp.push_back(word);\n    }\n    int count = 0;\n\
    \    for (std::string word : temp) {\n        for (char ch : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpdfiocs2o: /tmp/tmpdfiocs2o.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116791
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::vector<std::string> unique_words(words.size());\n    for\
    \ (int i = 0; i < words.size(); i++)\n        std::sort(words[i].begin(), words[i].end());\n\
    \    for (int i = 0; i < words.size(); i++)\n        for (int j = i + 1; j < words.size();\
    \ j++)\n            if (words[i].size() == words[j].size()) {\n              \
    \  for (int k = 0; k < words[i].size(); k++)\n                    if (words[i].at(k)\
    \ == words[j].at(k)) {\n                        unique_words[k] = words[j];\n\
    \                        words[j] = words[i];\n                        words[i]\
    \ = \"\";\n                    }\n                if (words[i].size() == unique_words[i].size())\n\
    \                    return unique_words[i];\n            }\n    return \"\";\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp2xpm1iwg: /tmp/tmp2xpm1iwg.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string result = \"\";\n    int max_char\
    \ = 0;\n    for (auto i : words) {\n        if (i.size() > max_char) {\n     \
    \       result = i;\n            max_char = i.size();\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpkgo01r4l: /tmp/tmpkgo01r4l.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    auto maxCount = std::make_pair(std::numeric_limits<int>::max(),\
    \ \"\");\n    for (const auto& word : words) {\n        int count = std::count_if(word.begin(),\
    \ word.end(), [](char ch) {\n            return std::isalpha(ch);\n        });\n\
    \        if (maxCount.first < count) {\n            maxCount = std::make_pair(count,\
    \ word);\n        }\n    }\n    return maxCount.second;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmoj70j5f.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpmoj70j5f.cpp:17:50: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::pair<int, const char*>\u2019 and \u2018std::pair<int,\
    \ std::__cxx11::basic_string<char> >\u2019)\n   17 |             maxCount = std::make_pair(count,\
    \ word);\n      |                                                  ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:64,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmoj70j5f.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:378:7:\
    \ note: candidate: \u2018std::pair<_T1, _T2>& std::pair<_T1, _T2>::operator=(typename\
    \ std::conditional<std::__and_<std::is_copy_assignable<_T1>, std::is_copy_assignable<_T2>\
    \ >::value, const std::pair<_T1, _T2>&, const std::__nonesuch_no_braces&>::type)\
    \ [with _T1 = int; _T2 = const char*; typename std::conditional<std::__and_<std::is_copy_assignable<_T1>,\
    \ std::is_copy_assignable<_T2> >::value, const std::pair<_T1, _T2>&, const std::__nonesuch_no_braces&>::type\
    \ = const std::pair<int, const char*>&]\u2019\n  378 |       operator=(typename\
    \ conditional<\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:381:51:\
    \ note:   no known conversion for argument 1 from \u2018std::pair<int, std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::conditional<true, const std::pair<int, const char*>&,\
    \ const std::__nonesuch_no_braces&>::type\u2019 {aka \u2018const std::pair<int,\
    \ const char*>&\u2019}\n  378 |       operator=(typename conditional<\n      |\
    \                 ~~~~~~~~~~~~~~~~~~~~~              \n  379 |   __and_<is_copy_assignable<_T1>,\n\
    \      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                  \n  380 |        \
    \  is_copy_assignable<_T2>>::value,\n      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \          \n  381 |   const pair&, const __nonesuch_no_braces&>::type __p)\n\
    \      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string ans = \"\";\n    char u = 0;\n    int l = 0;\n   \
    \ bool ans_in_order = true;\n    for (auto i : words)\n    {\n        std::string\
    \ wr = i;\n        std::map<char, int> m; //map\n        for (auto j : wr)\n \
    \       {\n            m[j]=m.size(); // initialize count\n        }\n       \
    \ for (auto j : wr)\n        {\n            ++m[std::tolower(j)]; // increment\
    \ number of occurence\n        }\n        for (auto j : wr)\n        {\n     \
    \       int cnt = m[std::tolower(j)];\n            int cur = u;\n            if\
    \ (cnt > l)\n            {\n                ans_in_order = true;\n           \
    \     l = cnt;\n                ans = wr;\n            }\n            else if\
    \ (cnt == l)\n            {\n                ans_in_order = false;\n         \
    \       ans = wr;\n            }\n            else if (cnt < l && cur < j)\n \
    \           {\n                ans_in_order = false;\n                ans = wr;\n\
    \            }\n            else\n            {\n                ans_in_order\
    \ = false;\n            }\n            u = cur;\n        }\n    }\n    return\
    \ ans_in_order ? ans : \"No such string\";\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmplp8or748: /tmp/tmplp8or748.cpp:59: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // code here\n  if(words.size() == 0) return \"\";\n  std::map<int,\
    \ std::string> count;\n  std::string word;\n  for(auto i = words.begin(); i !=\
    \ words.end(); ++i){\n    int n = 1;\n    for(auto j = i; j != words.end(); ++j){\n\
    \      if(count[*j] == 0){\n        count[*j] = *j;\n        break;\n      }\n\
    \      ++n;\n    }\n    word = (n == 1) ? i->second : count[*i];\n    if(count.size()\
    \ > words.size()){\n      std::map<int, std::string>::iterator mi = count.begin();\n\
    \      while(words.size() > words.size()){\n        mi++;\n        if(mi == count.end())\
    \ break;\n      }\n      word = mi->second;\n    }\n  }\n  return word;\n}\nint\
    \ main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi237jbf2.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpi237jbf2.cpp:18:15: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::map<int, std::__cxx11::basic_string<char> >\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019)\n   18 |       if(count[*j]\
    \ == 0){\n      |               ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpi237jbf2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = int; _Tp =\
    \ std::__cxx11::basic_string<char>; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const\
    \ int, std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = std::__cxx11::basic_string<char>; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = int]\u2019\n  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_map.h:490:34: note:   no known conversion for argument\
    \ 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const int&\u2019}\n  490 |       operator[](const key_type& __k)\n\
    \      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = int; _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<int>;\
    \ _Alloc = std::allocator<std::pair<const int, std::__cxx11::basic_string<char>\
    \ > >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = std::__cxx11::basic_string<char>;\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::key_type = int]\u2019\n  510 |      \
    \ operator[](key_type&& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:510:29:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string word;\n    long long int num_unique = 0;\n    for\
    \ (size_t i = 0; i < words.size(); ++i) {\n        word.clear();\n        for\
    \ (size_t j = 0; j < words[i].size(); ++j) {\n            if (word.find(words[i][j])\
    \ == std::string::npos) {\n                word += words[i][j];\n            \
    \    ++num_unique;\n            }\n        }\n        if (num_unique > words.size()\
    \ - 1) {\n            word = words[i];\n        }\n    }\n    return word;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpe471oc82: /tmp/tmpe471oc82.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string maxword;\n    size_t maxlength = 0;\n    for (auto\
    \ it = words.begin(); it != words.end(); ++it) {\n        size_t count = std::count_if(it->begin(),\
    \ it->end(),\n            [&](char c) { return std::isalpha(c); });\n        if\
    \ (count > maxlength) {\n            maxlength = count;\n            maxword =\
    \ *it;\n        }\n    }\n    return maxword;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp8lkptacz: /tmp/tmp8lkptacz.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string res = \"\";\n    int max = 0;\n    for (auto &w :\
    \ words) {\n        auto count = std::count_if(w.begin(), w.end(), [](char c)\
    \ {return !isalpha(c);});\n        if (count > max) {\n            max = count;\n\
    \            res = w;\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpbb8yxxs1: /tmp/tmpbb8yxxs1.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::vector<std::string> temp(words.size());\n\
    \    for(int i=0;i<words.size();i++){\n        temp[i]=words[i];\n    }\n    std::string\
    \ word=temp[0];\n    for(int i=0;i<temp.size();i++){\n        for(int j=i+1;j<temp.size();j++){\n\
    \            if(temp[j].size()>temp[i].size()){\n                temp[i]=temp[j];\n\
    \            }\n        }\n    }\n    for(int i=0;i<temp.size();i++){\n      \
    \  if(temp[i].size()==word.size()){\n            word=temp[i];\n        }\n  \
    \  }\n    return word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpik__g9bq: /tmp/tmpik__g9bq.cpp:33: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end(), \n        [](std::string\
    \ x, std::string y){\n            return x.size() <= y.size();\n        });\n\
    \    auto res = \"\";\n    std::string curr = \"\";\n    for (auto& word:words){\n\
    \        curr = word;\n        if(curr[0] == word[0] && curr[curr.size()-1] ==\
    \ word[word.size()-1]){\n            curr = curr.substr(1, curr.size()-2);\n \
    \       }\n        \n        if(!res.empty()){\n            if(res.back() == curr){\n\
    \                curr = \"\";\n            }\n        }\n        res += curr;\n\
    \    }\n    if(res.empty()){\n        return \"\";\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7gphnxoj.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp7gphnxoj.cpp:23:17: error: request for member \u2018empty\u2019\
    \ in \u2018res\u2019, which is of non-class type \u2018const char*\u2019\n   23\
    \ |         if(!res.empty()){\n      |                 ^~~~~\n/tmp/tmp7gphnxoj.cpp:24:20:\
    \ error: request for member \u2018back\u2019 in \u2018res\u2019, which is of non-class\
    \ type \u2018const char*\u2019\n   24 |             if(res.back() == curr){\n\
    \      |                    ^~~~\n/tmp/tmp7gphnxoj.cpp:28:13: error: no match\
    \ for \u2018operator+=\u2019 (operand types are \u2018const char*\u2019 and \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   28 |\
    \         res += curr;\n      |         ~~~~^~~~~~~\n/tmp/tmp7gphnxoj.cpp:30:12:\
    \ error: request for member \u2018empty\u2019 in \u2018res\u2019, which is of\
    \ non-class type \u2018const char*\u2019\n   30 |     if(res.empty()){\n     \
    \ |            ^~~~~\n"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    std::string temp;\n    int ucount =\
    \ 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++) {\n\
    \            if (i != j) {\n                if (words[i].size() > words[j].size())\
    \ {\n                    temp = words[i];\n                    words[i] = words[j];\n\
    \                    words[j] = temp;\n                }\n                int\
    \ char_count = 0;\n                for (int k = 0; k < words[i].size(); k++) {\n\
    \                    char c = words[i][k];\n                    char_count = char_count\
    \ + std::count(words[j].begin() + k, words[j].end(), c);\n                }\n\
    \                if (char_count > ucount) {\n                    ucount = char_count;\n\
    \                    temp = words[i];\n                }\n            }\n    \
    \    }\n    return temp;\n}\nint main() {\n    auto candidate = find_max;\n  \
    \  assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpt0w6u7nn: /tmp/tmpt0w6u7nn.cpp:37: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::set<std::string> unique_chars;\n  for (const auto& word : words)\
    \ {\n    for (auto c : word) {\n      if (!unique_chars.count(c)) {\n        unique_chars.insert(c);\n\
    \      }\n    }\n  }\n  auto max_count = std::max_element(unique_chars.begin(),\
    \ unique_chars.end()) -\n                    unique_chars.begin();\n  return *std::max_element(unique_chars.begin(),\
    \ unique_chars.end()) -\n         unique_chars.begin() == max_count ? \"\" : words[unique_chars.rbegin()->size()\
    \ + 1];\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk070ziat.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpk070ziat.cpp:14:32: error: no matching function for call\
    \ to \u2018std::set<std::__cxx11::basic_string<char> >::count(char&)\u2019\n \
    \  14 |       if (!unique_chars.count(c)) {\n      |                         \
    \       ^\nIn file included from /usr/include/c++/9/set:61,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n               \
    \  from /tmp/tmpk070ziat.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:748:7: note:\
    \ candidate: \u2018std::set<_Key, _Compare, _Alloc>::size_type std::set<_Key,\
    \ _Compare, _Alloc>::count(const key_type&) const [with _Key = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::size_type = long unsigned int; std::set<_Key,\
    \ _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n  748\
    \ |       count(const key_type& __x) const\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_set.h:748:29:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  748 |       count(const key_type& __x) const\n      |             ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:754:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((const std::set<_Key, _Compare, _Alloc>*)this)->std::set<_Key,\
    \ _Compare, _Alloc>::_M_t._M_count_tr(__x)) std::set<_Key, _Compare, _Alloc>::count(const\
    \ _Kt&) const [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Compare\
    \ = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >]\u2019\n  754 |  count(const _Kt& __x) const\n      |  ^~~~~\n/usr/include/c++/9/bits/stl_set.h:754:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_set.h:\
    \ In substitution of \u2018template<class _Kt> decltype (((const std::set<std::__cxx11::basic_string<char>\
    \ >*)this)->std::set<"
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_word = \"\";\n    // Write your code here.\n \
    \   std::vector<std::vector<std::string> > freq;\n    for (std::vector<std::string>\
    \ word: words)\n    {\n        std::string curr_word = word[0];\n        for (auto\
    \ i: word)\n        {\n            freq.emplace_back(std::make_pair(curr_word,\
    \ i));\n            curr_word = i;\n        }\n    }\n    std::sort(freq.begin(),\
    \ freq.end());\n    if (freq.size() > 0) {\n        for (auto i: freq) {\n   \
    \         if (std::count(i.second.begin(), i.second.end()) <= 1) {\n         \
    \       max_word = i.first;\n            }\n        }\n    }\n    return max_word;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9bvf0ix.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpk9bvf0ix.cpp:14:41: error: conversion from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to non-scalar type \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\
    \ requested\n   14 |     for (std::vector<std::string> word: words)\n      | \
    \                                        ^~~~~\n/tmp/tmpk9bvf0ix.cpp:26:30: error:\
    \ \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member\
    \ named \u2018second\u2019\n   26 |             if (std::count(i.second.begin(),\
    \ i.second.end()) <= 1) {\n      |                              ^~~~~~\n/tmp/tmpk9bvf0ix.cpp:26:48:\
    \ error: \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has\
    \ no member named \u2018second\u2019\n   26 |             if (std::count(i.second.begin(),\
    \ i.second.end()) <= 1) {\n      |                                           \
    \     ^~~~~~\n/tmp/tmpk9bvf0ix.cpp:27:30: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018first\u2019\n   27 |                 max_word\
    \ = i.first;\n      |                              ^~~~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk9bvf0ix.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:\
    \ In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*,\
    \ _Args&& ...) [with _Up = std::vector<std::__cxx11::basic_string<char> >; _Args\
    \ = {std::pair<std::__cxx11::b"
  stdout: ''
  timestamp: 1660116791
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here.\n    char temp[256];\n    int largest\
    \ = 0;\n    int current = 0;\n    int count = 0;\n    std::string word = \"\"\
    ;\n    for (size_t i = 0; i < words.size(); ++i) {\n        if (words[i][0] !=\
    \ '\\0') {\n            std::strcpy(temp, words[i].c_str());\n            std::sort(temp);\n\
    \            if (std::strlen(temp) > largest) {\n                largest = std::strlen(temp);\n\
    \                word = words[i];\n            }\n            current = std::count(temp,\
    \ temp + largest, words[i][0]);\n            if (current > largest) {\n      \
    \          largest = current;\n                word = words[i];\n            }\n\
    \            count += largest;\n        }\n    }\n    return word;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfz0vh03d.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpfz0vh03d.cpp:20:27: error: no matching function for call\
    \ to \u2018sort(char [256])\u2019\n   20 |             std::sort(temp);\n    \
    \  |                           ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfz0vh03d.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4863:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::sort(_RAIter, _RAIter)\u2019\
    \n 4863 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4863:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpfz0vh03d.cpp:20:27: note: \
    \  candidate expects 2 arguments, 1 provided\n   20 |             std::sort(temp);\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfz0vh03d.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4893:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::sort(_RAIter,\
    \ _RAIter, _Compare)\u2019\n 4893 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4893:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpfz0vh03d.cpp:20:27:\
    \ note:   candidate expects 3 arguments, 1 provided\n   20 |             std::sort(temp);\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfz0vh03d.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:292:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _RandomAccessIterator,\
    \ class _Compare> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ void> std::sort(_ExecutionPolicy&&, _RandomAccessIterator, _R"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Your code goes here.\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp7emnsrh0: /tmp/tmp7emnsrh0.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n\tstd::string word;\n\tint num = 0;\n\tint max = -1;\n\tfor (auto\
    \ x : words) {\n\t\tfor (auto &y : x) {\n\t\t\tif (y == word[0]) {\n\t\t\t\tnum++;\n\
    \t\t\t\tif (num > max) {\n\t\t\t\t\tmax = num;\n\t\t\t\t\tword = x;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\tif (max != -1) {\n\t\tstd::cout << word[0] << \"\\n\"\
    ;\n\t} else {\n\t\treturn \"\";\n\t}\n\treturn word;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpilv1vcad: /tmp/tmpilv1vcad.cpp:34: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string word_max;\n    size_t max_count = 0;\n    for (auto\
    \ &x : words)\n        if (std::count(x.begin(), x.end(), x) > max_count)\n  \
    \          word_max = x;\n        max_count = std::count(x.begin(), x.end(), x);\n\
    \    return word_max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjt490mn.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpkjt490mn.cpp:16:32: error: \u2018x\u2019 was not declared\
    \ in this scope\n   16 |         max_count = std::count(x.begin(), x.end(), x);\n\
    \      |                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkjt490mn.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:4121:29:   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\n\
    /tmp/tmpkjt490mn.cpp:14:45:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Write your code here\n  int i, j, maxCount = 0;\n  std::string\
    \ maxWord;\n  std::string word;\n  for (i = 0; i < words.size() - 1; i++) {\n\
    \    for (j = i + 1; j < words.size(); j++) {\n      if (words[i].size() > words[j].size())\
    \ {\n        word = words[i];\n      } else {\n        word = words[j];\n    \
    \  }\n      int count = 0;\n      for (char ch : word) {\n        count++;\n \
    \       if (count > maxCount) {\n          maxCount = count;\n          maxWord\
    \ = word;\n        }\n      }\n    }\n  }\n  return maxWord;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp16jm9yqc: /tmp/tmp16jm9yqc.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({"abc",
    "cba"}))) == ("abc")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::string max = \"\";\n  int char_count = 0, prev_char_count =\
    \ 0, i = 0;\n  for (auto x : words) {\n    char_count += x.size();\n    if (char_count\
    \ > prev_char_count) {\n      max = x;\n    }\n  }\n  return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmprtyho0c0: /tmp/tmprtyho0c0.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpkpa4icsd: /tmp/tmpkpa4icsd.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::set<std::string> s;\n  for (const auto &w : words) {\n    s.insert(w);\n\
    \  }\n  for (const auto &w : s) {\n    if (s.size() == w.size()) {\n      return\
    \ w;\n    }\n  }\n  return \"\";\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmprgiyc9kk: /tmp/tmprgiyc9kk.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::map<string, size_t> mp;\n   \
    \ for (auto& word : words) {\n        for (char ch: word) {\n            ++mp[ch];\n\
    \        }\n    }\n    auto maxcount = mp;\n    auto it = maxcount.begin();\n\
    \    while (it != maxcount.end()) {\n        if (it->second == 1)\n          \
    \  return it->first;\n        ++it;\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95iejc6f.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp95iejc6f.cpp:12:14: error: \u2018string\u2019 was not declared\
    \ in this scope\n   12 |     std::map<string, size_t> mp;\n      |           \
    \   ^~~~~~\n/tmp/tmp95iejc6f.cpp:12:14: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp95iejc6f.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp95iejc6f.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp95iejc6f.cpp:12:28: error: template argument 1 is invalid\n   12 |   \
    \  std::map<string, size_t> mp;\n      |                            ^\n/tmp/tmp95iejc6f.cpp:12:28:\
    \ error: template argument 3 is invalid\n/tmp/tmp95iejc6f.cpp:12:28: error: template\
    \ argument 4 is invalid\n/tmp/tmp95iejc6f.cpp:15:20: error: invalid types \u2018\
    int[char]\u2019 for array subscript\n   15 |             ++mp[ch];\n      |  \
    \                  ^\n/tmp/tmp95iejc6f.cpp:19:24: error: request for member \u2018\
    begi"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int maxcount = 1;\n  for (const auto& word : words) {\n    int charcount\
    \ = 1;\n    for (char c : word) {\n      charcount += 1;\n    }\n    if (charcount\
    \ > maxcount) {\n      maxcount = charcount;\n    }\n  }\n  // Return \"\" if\
    \ all words have same max count of characters\n  if (maxcount == 1) {\n    return\
    \ \"\";\n  }\n  for (const auto& word : words) {\n    if (word[0] == words[words.size()-1][0])\
    \ {\n      return word;\n    }\n  }\n  return \"\";\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmph6_o62jj: /tmp/tmph6_o62jj.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_word = words[0];\n    int max_word_length = words[0].size();\n\
    \    int n_unique = 0;\n    for (size_t i = 1; i < words.size(); ++i) {\n    \
    \    int unique = 0;\n        for (int j = 0; j < words[i].size(); ++j) {\n  \
    \          if (words[i][j] == max_word[j]) {\n                ++unique;\n    \
    \        }\n        }\n        if (unique > n_unique) {\n            max_word\
    \ = words[i];\n            max_word_length = words[i].size();\n            n_unique\
    \ = unique;\n        }\n    }\n    return max_word;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpb95ic96p: /tmp/tmpb95ic96p.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char, int> u;\n    for (std::string &word : words) {\n\
    \        for (char c : word) {\n            u[c] += 1;\n        }\n    }\n   \
    \ std::string max_word = u.begin()->first;\n    int max_count = u.begin()->second;\n\
    \    for (auto iter = u.begin(); iter != u.end(); ++iter) {\n        if (iter->second\
    \ > max_count) {\n            max_word = iter->first;\n            max_count =\
    \ iter->second;\n        }\n    }\n    return max_word;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_wn7yr4.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp7_wn7yr4.cpp:17:39: error: conversion from \u2018const char\u2019\
    \ to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   17 |     std::string max_word = u.begin()->first;\n      |   \
    \                         ~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result = \"\";\n    std::string max = words[0];\n\
    \    for (size_t i = 1; i < words.size(); i++) {\n        int count = 0;\n   \
    \     for (size_t j = 0; j < words[i].length(); j++) {\n            if (words[i][j]\
    \ == max[j]) {\n                count++;\n            }\n        }\n        if\
    \ (count > words[i].length()) {\n            result = words[i];\n            max\
    \ = words[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpyc0dudfu: /tmp/tmpyc0dudfu.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int max = 0;\n  std::string maxWord = \"\";\n  for (auto word :\
    \ words) {\n    auto s = word.size();\n    if (max < s) {\n      max = s;\n  \
    \    maxWord = word;\n    }\n  }\n  return maxWord;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpch63hl8y: /tmp/tmpch63hl8y.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char, int> m;\n    for (auto &w : words) {\n        for\
    \ (auto &c : w) {\n            m[c] = m[c] + 1;\n        }\n    }\n    for (auto\
    \ &p : m) {\n        if (p.second > words.size())\n            return p.first;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n  \
    \  assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaz_nm0ss.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpaz_nm0ss.cpp:19:22: error: could not convert \u2018p.std::pair<const\
    \ char, int>::first\u2019 from \u2018const char\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   19 |             return\
    \ p.first;\n      |                    ~~^~~~~\n      |                      |\n\
    \      |                      const char\n"
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    if (words.empty())\n        return \"\";\n    int max = 0;\n \
    \   for (auto &word : words)\n        max = std::max(max, word.size());\n\n  \
    \  std::vector<std::string> wordVec;\n    for (auto &word : words)\n        wordVec.push_back(word);\n\
    \n    std::vector<std::string> sortedWordVec;\n    std::sort(wordVec.begin(),\
    \ wordVec.end(), [&](const std::string &x, const std::string &y) {\n        return\
    \ x.size() > y.size();\n    });\n    for (auto &word : wordVec)\n        sortedWordVec.push_back(word);\n\
    \n    std::string result = \"\";\n    for (auto &word : sortedWordVec)\n     \
    \   result += word.substr(0, max);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzf55uk4y.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpzf55uk4y.cpp:15:40: error: no matching function for call\
    \ to \u2018max(int&, std::__cxx11::basic_string<char>::size_type)\u2019\n   15\
    \ |         max = std::max(max, word.size());\n      |                       \
    \                 ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzf55uk4y.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpzf55uk4y.cpp:15:40: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   15 |         max = std::max(max, word.size());\n  \
    \    |                                        ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzf55uk4y.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzf55uk4y.cpp:15:40:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019})\n   15 |         max = std::max(max, word.size());\n\
    \      |                                        ^\nIn "
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string ans = \"\";\n    size_t maxCount = 0;\n    for (auto\
    \ & word : words) {\n        size_t count = word.find_first_not_of(\" \");\n \
    \       ans = word.substr(count);\n        if (count > maxCount) {\n         \
    \   maxCount = count;\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp9g3dey7j: /tmp/tmp9g3dey7j.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Code here\n    int maximum = words.front().length();\n    for\
    \ (auto & x: words) {\n        int counter = 0;\n        for (auto y: x)\n   \
    \         counter += (int)y.length();\n        if (counter > maximum)\n      \
    \      maximum = counter;\n    }\n    int pos = 0;\n    for (auto & x: words)\n\
    \        if (maximum == x.length())\n            return x[pos++];\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_g3_1fo.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp5_g3_1fo.cpp:16:31: error: request for member \u2018length\u2019\
    \ in \u2018y\u2019, which is of non-class type \u2018char\u2019\n   16 |     \
    \        counter += (int)y.length();\n      |                               ^~~~~~\n\
    /tmp/tmp5_g3_1fo.cpp:23:27: error: could not convert \u2018(& x)->std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(pos\
    \ ++)))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   23 |             return x[pos++];\n      |                           ^\n\
    \      |                           |\n      |                           __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::set<std::string> s;\n    std::string result=\"Nothing\";\n\
    \    for (auto itr=words.begin(); itr!=words.end(); ++itr) {\n      s.insert(*itr);\n\
    \    }\n    if (s.size() > 1) {\n      result = *std::max_element(s.begin(), s.end());\
    \ \n    }\n    return result;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp_1h2uv9z: /tmp/tmp_1h2uv9z.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Write your code here.\n  struct Counter {\n    int count;\n \
    \   Counter(int c) : count(c) {}\n  };\n\n  struct CounterComparator {\n    bool\
    \ operator()(const std::pair<std::string, Counter>& a,\n                    const\
    \ std::pair<std::string, Counter>& b) {\n      return a.second.count > b.second.count;\n\
    \    }\n  };\n\n  Counter counter(words.size());\n  std::unordered_map<std::string,\
    \ Counter> counterMap;\n\n  for (size_t i = 0; i < words.size(); i++) {\n    std::pair<std::string,\
    \ Counter> p(words[i], counter);\n    std::unordered_map<std::string, Counter>::iterator\
    \ it = counterMap.find(p.first);\n    if (it == counterMap.end()) {\n      counterMap[p.first]\
    \ = p;\n    } else {\n      counterMap[p.first].second = counterMap[p.first].second\
    \ + 1;\n    }\n  }\n  std::unordered_map<std::string, Counter>::iterator max =\
    \ std::max_element(\n      counterMap.begin(), counterMap.end(), CounterComparator());\n\
    \  return max.first;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw91771_h.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpw91771_h.cpp:31:29: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::unordered_map<std::__cxx11::basic_string<char>,\
    \ find_max(std::vector<std::__cxx11::basic_string<char> >)::Counter>::mapped_type\u2019\
    \ {aka \u2018find_max(std::vector<std::__cxx11::basic_string<char> >)::Counter\u2019\
    } and \u2018std::pair<std::__cxx11::basic_string<char>, find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter>\u2019)\n   31 |       counterMap[p.first] = p;\n      |       \
    \                      ^\n/tmp/tmpw91771_h.cpp:12:10: note: candidate: \u2018\
    constexpr find_max(std::vector<std::__cxx11::basic_string<char> >)::Counter& find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter::operator=(const find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter&)\u2019\n   12 |   struct Counter {\n      |          ^~~~~~~\n\
    /tmp/tmpw91771_h.cpp:12:10: note:   no known conversion for argument 1 from \u2018\
    std::pair<std::__cxx11::basic_string<char>, find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter>\u2019 to \u2018const find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter&\u2019\n/tmp/tmpw91771_h.cpp:12:10: note: candidate: \u2018constexpr\
    \ find_max(std::vector<std::__cxx11::basic_string<char> >)::Counter& find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter::operator=(find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter&&)\u2019\n/tmp/tmpw91771_h.cpp:12:10: note:   no known conversion\
    \ for argument 1 from \u2018std::pair<std::__cxx11::basic_string<char>, find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter>\u2019 to \u2018find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::Counter&&\u2019\n/tmp/tmpw91771_h.cpp:33:27: error: \u2018std::unordered_map<std::__cxx11::basic_string<char>,\
    \ find_max(std::vector<std::__cxx11::basic_string<char> >)::Counter>::mapped_type\u2019\
    \ {aka \u2018struct find_max(std::vector<std::__cxx11::basic_string<char> >)::Counter\u2019\
    } has no member named \u2018second"
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<string, int> word_counter;\n\n    for (auto const &word\
    \ : words)\n        for (auto i : word)\n            if (word_counter.find(i)\
    \ == word_counter.end())\n                word_counter[i] += 1;\n\n    for (auto\
    \ const &word : word_counter) {\n        if (word.second > 1)\n            return\
    \ word.first;\n    }\n\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb91k4eet.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpb91k4eet.cpp:11:14: error: \u2018string\u2019 was not declared\
    \ in this scope\n   11 |     std::map<string, int> word_counter;\n      |    \
    \          ^~~~~~\n/tmp/tmpb91k4eet.cpp:11:14: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb91k4eet.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpb91k4eet.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpb91k4eet.cpp:11:25: error: template argument 1 is invalid\n   11 |   \
    \  std::map<string, int> word_counter;\n      |                         ^\n/tmp/tmpb91k4eet.cpp:11:25:\
    \ error: template argument 3 is invalid\n/tmp/tmpb91k4eet.cpp:11:25: error: template\
    \ argument 4 is invalid\n/tmp/tmpb91k4eet.cpp:15:30: error: request for member\
    \ \u2018find\u2019 in \u2018word_counter\u2019, which is of non-class type \u2018\
    int\u2019\n   15 |             if (word_counter.find(i) == word_counter.end())\n\
    \ "
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_word = \"\";\n    int max_count = 0;\n    for\
    \ (auto &w : words) {\n        int count_letter = 0;\n        for (int i = 0;\
    \ i < w.length(); i++) {\n            if (std::count(w.begin() + i, w.end(), i))\
    \ {\n                count_letter += 1;\n            }\n        }\n        if\
    \ (count_letter > max_count) {\n            max_count = count_letter;\n      \
    \      max_word = w;\n        }\n    }\n    return max_word;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp43dvmudn: /tmp/tmp43dvmudn.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // write your code here\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::logic_error'\n  what():\
    \  basic_string::_M_construct null not valid\n"
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    auto max = words[0];\n    for (auto &item : words)\n        if\
    \ (std::count(item.begin(), item.end(), max) == std::count(item.begin(), item.end(),\
    \ max))\n            max = item;\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphrr0d86_.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:4121:29:   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\n\
    /tmp/tmphrr0d86_.cpp:13:53:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphrr0d86_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class"
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::string word = \"\";\n  int max = 0;\n  for (int i = 0; i <\
    \ words.size(); i++) {\n    if (words.size() <= max) {\n      word = words[i];\n\
    \      max = i;\n    }\n    for (int j = i + 1; j < words.size(); j++) {\n   \
    \   if (words[i].size() + words[j].size() >= max) {\n        string temp = words[i];\n\
    \        words[i] = words[j];\n        words[j] = temp;\n      }\n    }\n  }\n\
    \  return word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaa69i7rs.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpaa69i7rs.cpp:20:9: error: \u2018string\u2019 was not declared\
    \ in this scope\n   20 |         string temp = words[i];\n      |         ^~~~~~\n\
    /tmp/tmpaa69i7rs.cpp:20:9: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaa69i7rs.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaa69i7rs.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpaa69i7rs.cpp:22:20: error: \u2018temp\u2019 was not declared in this scope\n\
    \   22 |         words[j] = temp;\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660116792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result;\n    int max_count = 0;\n    int max_count2\
    \ = 0;\n    int max_index = -1;\n    for(size_t i=0;i<words.size();i++){\n   \
    \     int count = 0;\n        for(size_t j=0;j<words[i].length();j++){\n     \
    \       count++;\n        }\n        if(count > max_count){\n            max_count\
    \ = count;\n            max_index = i;\n        }\n        count = 0;\n      \
    \  for(size_t j=0;j<words[i].length();j++){\n            count++;\n        }\n\
    \        if(count > max_count2){\n            max_count2 = count;\n          \
    \  max_index2 = i;\n        }\n    }\n    result = words[max_index];\n    return\
    \ result;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwt_2yry.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpzwt_2yry.cpp:30:13: error: \u2018max_index2\u2019 was not\
    \ declared in this scope; did you mean \u2018max_index\u2019?\n   30 |       \
    \      max_index2 = i;\n      |             ^~~~~~~~~~\n      |             max_index\n"
  stdout: ''
  timestamp: 1660116792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 1;\n    for (std::string\
    \ &w : words)\n    {\n        int count = std::count_if(w.begin(), w.end(), [&](char\
    \ c) {\n            int i = std::count(w.begin(), w.end(), c);\n            return\
    \ i == 0;\n        });\n        if (count > max_count) {\n            max = w;\n\
    \            max_count = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmptlzaefga: /tmp/tmptlzaefga.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end(), [](std::string a, std::string\
    \ b) -> bool {\n        return std::count_if(a.begin(), a.end(), [](char x) {\n\
    \            return x == b;\n        }) > std::count_if(b.begin(), b.end(), [](char\
    \ x) {\n            return x == a;\n        });\n    });\n    std::string ans\
    \ = words[0];\n    for (size_t i = 1; i < words.size(); ++i) {\n        ans =\
    \ std::string(ans.rbegin(), ans.rend()) + words[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9l48y0vs.cpp: In lambda function:\n/tmp/tmp9l48y0vs.cpp:13:25:\
    \ error: \u2018b\u2019 is not captured\n   13 |             return x == b;\n \
    \     |                         ^\n/tmp/tmp9l48y0vs.cpp:12:51: note: the lambda\
    \ has no capture-default\n   12 |         return std::count_if(a.begin(), a.end(),\
    \ [](char x) {\n      |                                                   ^\n\
    /tmp/tmp9l48y0vs.cpp:11:73: note: \u2018std::string b\u2019 declared here\n  \
    \ 11 |     std::sort(words.begin(), words.end(), [](std::string a, std::string\
    \ b) -> bool {\n      |                                                      \
    \       ~~~~~~~~~~~~^\n/tmp/tmp9l48y0vs.cpp: In lambda function:\n/tmp/tmp9l48y0vs.cpp:15:25:\
    \ error: \u2018a\u2019 is not captured\n   15 |             return x == a;\n \
    \     |                         ^\n/tmp/tmp9l48y0vs.cpp:14:49: note: the lambda\
    \ has no capture-default\n   14 |         }) > std::count_if(b.begin(), b.end(),\
    \ [](char x) {\n      |                                                 ^\n/tmp/tmp9l48y0vs.cpp:11:58:\
    \ note: \u2018std::string a\u2019 declared here\n   11 |     std::sort(words.begin(),\
    \ words.end(), [](std::string a, std::string b) -> bool {\n      |           \
    \                                   ~~~~~~~~~~~~^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9l48y0vs.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = find_max(std::vector<std::__cxx11::basic_string<char> >)::<lambda(std::string,\
    \ std::string)>::<lambda(char)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputI"
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max = 0;\n    int max_index = -1;\n\
    \    int index = 0;\n    std::string current = words[0];\n\n    for (auto i :\
    \ words) {\n        if (current.size() > max) {\n            max = current.size();\n\
    \            max_index = index;\n        }\n        if (i == current) {\n    \
    \        ++index;\n        }\n    }\n    return words[max_index];\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp3roffl10: /tmp/tmp3roffl10.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::map<char, int> counter;\n  for (const auto& word : words) {\n\
    \    for (const auto& c : word) {\n      counter[c] += 1;\n    }\n  }\n  for (const\
    \ auto& item : counter) {\n    if (item.second > 0) return item.first;\n  }\n\
    \  return \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphneflw66.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmphneflw66.cpp:18:38: error: could not convert \u2018item.std::pair<const\
    \ char, int>::first\u2019 from \u2018const char\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   18 |     if (item.second\
    \ > 0) return item.first;\n      |                                 ~~~~~^~~~~\n\
    \      |                                      |\n      |                     \
    \                 const char\n"
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int maximum = 0, index = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        int counts[26] = {0};\n        for (int j = 0; j < words[i].size();\
    \ j++) {\n            counts[words[i][j] - 'a']++;\n        }\n        maximum\
    \ = counts[maximum];\n        index = i;\n    }\n    return words[index];\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmptzb450hz: /tmp/tmptzb450hz.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end());\n    std::string result\
    \ = \"\";\n    auto it = std::max_element(words.begin(), words.end(), \n     \
    \                    [](const std::string& a, const std::string& b){return a.size()\
    \ < b.size();});\n    for (size_t i = 0; i < it.size(); i++) {\n        result\
    \ += it[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprv41_tfl.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmprv41_tfl.cpp:15:31: error: \u2018class __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 has no member named \u2018\
    size\u2019\n   15 |     for (size_t i = 0; i < it.size(); i++) {\n      |    \
    \                           ^~~~\n"
  stdout: ''
  timestamp: 1660116793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // write your code here\n    int max;\n    std::string s = words[0];\n\
    \    for (int i = 1; i < words.size(); i++) {\n        std::string cur = words[i];\n\
    \        if (cur.length() > s.length()) {\n            max = cur.length();\n \
    \           s = cur;\n        }\n    }\n    if (s.length() > max)\n        return\
    \ s;\n    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp6msl5h3r: /tmp/tmp6msl5h3r.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116794
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Write your code here.\n  std::string max_word = \"\";\n  int\
    \ max_len = 0;\n  for (int i = 0; i < words.size(); i++) {\n    int count = 0;\n\
    \    for (int j = 0; j < words[i].length(); j++) {\n      for (int k = 0; k <\
    \ words[j].length(); k++) {\n        if (words[i].at(i) == words[j].at(k)) {\n\
    \          count++;\n        }\n      }\n    }\n    if (count > max_len) {\n \
    \     max_len = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660116794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::vector<std::string> words2;\n    for\
    \ (auto word: words) {\n        if (words2.size() == 0 || words2.back().size()\
    \ > word.size()) words2.emplace_back(word);\n        else words2.back() = word;\n\
    \    }\n    std::string maxWord = words2.back();\n    for (size_t i = 1; i < words2.size();\
    \ i++) {\n        if (words2[i].size() >= maxWord.size()) {\n            maxWord\
    \ = words2[i];\n        }\n    }\n    return maxWord;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp97d3ukwy: /tmp/tmp97d3ukwy.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string res = \"\";\n    int max = 1;\n    for (auto& word\
    \ : words) {\n        auto size = word.size();\n        if (max < size) {\n  \
    \          max = size;\n            res = word;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpymfsnkxs: /tmp/tmpymfsnkxs.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Code here \n    std::string max;\n    int max_count = 0;\n\
    \    std::string current = \"\";\n    std::string word;\n    for (int i = 0; i\
    \ < words.size(); i++) {\n        word = words[i];\n        for (int j = 0; j\
    \ < word.length(); j++) {\n            current = current + word[j];\n        \
    \    int count = 0;\n            for (int k = 0; k < words.length; k++) {\n  \
    \              if (words[k] == current) {\n                    count++;\n    \
    \            }\n            }\n            if (count > max_count) {\n        \
    \        max = current;\n                max_count = count;\n            }\n \
    \       }\n        current = \"\";\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2f30mtx.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpf2f30mtx.cpp:21:39: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018length\u2019\n   21 |             for (int\
    \ k = 0; k < words.length; k++) {\n      |                                   \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1660116794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int counter[256] = {0};\n    std::string ans = \"\";\n    for\
    \ (auto &w: words) {\n        for (auto &c: w) {\n            if (counter[c] ==\
    \ 0) {\n                counter[c] = 1;\n                ans = c;\n          \
    \  } else {\n                counter[c] += 1;\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpagt6jnhp: /tmp/tmpagt6jnhp.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::set<std::string> unique_chars;\n  std::string max = words[0];\n\
    \  for (int i = 1; i < words.size(); i++) {\n    std::string word = words[i];\n\
    \    for (auto c : word) {\n      if (unique_chars.find(c) == unique_chars.end())\n\
    \        unique_chars.insert(c);\n    }\n    if (unique_chars.size() > max.length())\n\
    \      max = word;\n  }\n  return max;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3de4c20j.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp3de4c20j.cpp:16:30: error: no matching function for call\
    \ to \u2018std::set<std::__cxx11::basic_string<char> >::find(char&)\u2019\n  \
    \ 16 |       if (unique_chars.find(c) == unique_chars.end())\n      |        \
    \                      ^\nIn file included from /usr/include/c++/9/set:61,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp3de4c20j.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:794:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::iterator std::set<_Key,\
    \ _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::iterator = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  794 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_set.h:794:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  794 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:798:7: note: candidate: \u2018std::set<_Key,\
    \ _Compare, _Alloc>::const_iterator std::set<_Key, _Compare, _Alloc>::find(const\
    \ key_type&) const [with _Key = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::set<_Key,\
    \ _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  798 |       find(const key_type& __x) const\n      |       ^~~~\n/usr/include/c++/9/bits/stl_set.h:798:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to "
  stdout: ''
  timestamp: 1660116794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string s = \"\";\n    unordered_set<char>\
    \ s(words.begin(), words.end());\n    unordered_set<char>::iterator i;\n    unordered_set<char>::iterator\
    \ j;\n    for (j = s.begin(); j != s.end(); j++) {\n        i = 0;\n        while\
    \ (i != words.size() && *j != words[i][0]) {\n            i++;\n        }\n  \
    \      if (i == words.size()) {\n            s += *j;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszz_dwrj.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpszz_dwrj.cpp:13:5: error: \u2018unordered_set\u2019 was not\
    \ declared in this scope\n   13 |     unordered_set<char> s(words.begin(), words.end());\n\
    \      |     ^~~~~~~~~~~~~\n/tmp/tmpszz_dwrj.cpp:13:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmpszz_dwrj.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11: note:\
    \   \u2018std::unordered_set\u2019\n   97 |     class unordered_set\n      | \
    \          ^~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpszz_dwrj.cpp:2:\n/usr/include/c++/9/unordered_set:68:13:\
    \ note:   \u2018std::pmr::unordered_set\u2019\n   68 |       using unordered_set\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpszz_dwrj.cpp:13:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   13 |     unordered_set<char>\
    \ s(words.begin(), words.end());\n      |                   ^~~~\n/tmp/tmpszz_dwrj.cpp:14:19:\
    \ error: expected primary-expression before \u2018char\u2019\n   14 |     unordered_set<char>::iterator\
    \ i;\n      |                   ^~~~\n/tmp/tmpszz_dwrj.cpp:15:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   15 |     unordered_set<char>::iterator\
    \ j;\n      |                   ^~~~\n/tmp/tmpszz_dwrj.cpp:16:10: error: \u2018\
    j\u2019 was not declared in this scope\n   16 |     for (j = s.begin(); j != s.end();\
    \ j++) {\n      |          ^\n/tmp/tmpszz_dwrj.cpp:17:9: error: \u2018i\u2019\
    \ was not declared in this scope\n   17 |         i = 0;\n      |         ^\n"
  stdout: ''
  timestamp: 1660116794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int maxCnt = 0;\n    std::string temp;\n    for (const auto &w\
    \ : words) {\n        int count = 0;\n        for (const auto &c : w) {\n    \
    \        count += (temp.find(c) == std::string::npos)?1:0;\n        }\n      \
    \  if (count > maxCnt) {\n            maxCnt = count;\n            temp = w;\n\
    \        }\n    }\n    return maxCnt>maxCnt?temp:\"\";\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpcfv24wqm: /tmp/tmpcfv24wqm.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char, int> counter;\n    std::string maxWord = \"\";\n\
    \    for (auto& word : words)\n        for (auto c : word) {\n            if (counter.find(c)\
    \ == counter.end())\n                counter[c] = 1;\n            else\n     \
    \           counter[c]++;\n            if (counter[c] > 1) {\n               \
    \ if (maxWord.size() == 0) {\n                    maxWord = word;\n          \
    \      } else {\n                    if (maxWord.size() < word.size())\n     \
    \                   maxWord = word;\n                }\n            } else if\
    \ (maxWord.size() == 0) {\n                maxWord = word;\n            } else\
    \ if (maxWord.size() < word.size()) {\n                maxWord = word;\n     \
    \       }\n        }\n    return maxWord;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpgc4856rf: /tmp/tmpgc4856rf.cpp:37: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    int max = 0;\n    std::string word\
    \ = \"\";\n    for (const auto& word : words) {\n        int count = 0;\n    \
    \    for (const auto& c : word) {\n            if (++count > max) {\n        \
    \        max = count;\n                word = c;\n            }\n        }\n \
    \   }\n    return word;\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphfmun8vw.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmphfmun8vw.cpp:19:24: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018const std::__cxx11::basic_string<char>\u2019 and \u2018\
    const char\u2019)\n   19 |                 word = c;\n      |                \
    \        ^\nIn file included from /usr/include/c++/9/string:55,\n            \
    \     from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphfmun8vw.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:708:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const _CharT*)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n  708 |       operator=(const _CharT* __s)\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:708:7: note:   conversion of argument 1\
    \ would be ill-formed:\n/tmp/tmphfmun8vw.cpp:19:24: error: invalid conversion\
    \ from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n   19 |   \
    \              word = c;\n      |                        ^\n      |          \
    \              |\n      |                        char\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \        "
  stdout: ''
  timestamp: 1660116794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int count\
    \ = 0;\n    for (auto &x : words)\n    {\n        if (x.size() > count) max =\
    \ x;\n        else if (x.size() == count) x.erase(x.begin());\n        else count\
    \ = x.size();\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmphtvdewj6: /tmp/tmphtvdewj6.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    int max = 0;\n    int len = words.size();\n\
    \    for (int i = 0; i < len; i++) {\n        int count = words[i].size();\n \
    \       if (count > max) {\n            max = count;\n        }\n    }\n    if\
    \ (max > 0) {\n        for (int i = 0; i < len; i++) {\n            int count\
    \ = words[i].size();\n            if (count <= max) {\n                continue;\n\
    \            }\n            for (int j = 0; j < len; j++) {\n                if\
    \ (words[j].size() == count) {\n                    if (words[i].size() > words[j].size())\
    \ {\n                        return words[i];\n                    }\n       \
    \             else {\n                        return words[j];\n             \
    \       }\n                }\n            }\n        }\n    }\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpkpa0jfsl: /tmp/tmpkpa0jfsl.cpp:42: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end(), std::greater<std::string>());\n\
    \    return words[0];\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpybbg5boi: /tmp/tmpybbg5boi.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::unordered_map<char, int> umap;\n    std::string word = \"\
    \";\n    std::string word1 = \"\";\n    int count = 0;\n    for (auto& x : words)\n\
    \    {\n        std::unordered_map<char, int>::iterator itr = umap.find(x);\n\
    \        if (itr == umap.end()) {\n            umap[x] = 1;\n        } else {\n\
    \            umap[x] += 1;\n        }\n    }\n    for (auto& x : umap) {\n   \
    \     if (x.second > count) {\n            count = x.second;\n            word\
    \ = x.first;\n        }\n    }\n    if (count > 0) {\n        std::cout << word\
    \ << \" has \" << count << \" unique characters.\" << std::endl;\n        return\
    \ word;\n    } else {\n        std::cout << word << \" has no characters in common.\"\
    \ << std::endl;\n        return \"\";\n    }\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88yq04ad.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp88yq04ad.cpp:17:66: error: no matching function for call\
    \ to \u2018std::unordered_map<char, int>::find(std::__cxx11::basic_string<char>&)\u2019\
    \n   17 |         std::unordered_map<char, int>::iterator itr = umap.find(x);\n\
    \      |                                                                  ^\n\
    In file included from /usr/include/c++/9/unordered_map:47,\n                 from\
    \ /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp88yq04ad.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:921:7: note:\
    \ candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::find(const key_type&) [with\
    \ _Key = char; _Tp = int; _Hash = std::hash<char>; _Pred = std::equal_to<char>;\
    \ _Alloc = std::allocator<std::pair<const char, int> >; std::unordered_map<_Key,\
    \ _Tp, _Hash, _Pred, _Alloc>::iterator = std::__detail::_Node_iterator<std::pair<const\
    \ char, int>, false, false>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type\
    \ = char]\u2019\n  921 |       find(const key_type& __x)\n      |       ^~~~\n\
    /usr/include/c++/9/bits/unordered_map.h:921:28: note:   no known conversion for\
    \ argument 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const char&\u2019}\n  921 |       find(const key_type&\
    \ __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/unordered_map.h:925:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::find(const key_type&) const\
    \ [with _Key = char; _Tp = int; _Hash = std::hash<char>; _Pred = std::equal_to<char>;\
    \ _Alloc = std::allocator<std::pair<const char, int> >; std::unordered_map<_Key,\
    \ _Tp, _Hash, _Pred, _Alloc"
  stdout: ''
  timestamp: 1660116794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max = 0;\n    std::string maxString;\n    for (auto word :\
    \ words) {\n        auto count = std::count_if(word.begin(), word.end(), [](char\
    \ c) {\n            return std::isalpha(c);\n        });\n        if (count >\
    \ max) {\n            maxString = word;\n            max = count;\n        } else\
    \ if (count < max) {\n            maxString = word;\n            max = count;\n\
    \        }\n    }\n    return maxString;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpa6cw47vd: /tmp/tmpa6cw47vd.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int m = 0;\n    for (auto &word : words)\n        if (word.length()\
    \ > m)\n            m = word.length();\n    for (int i = 0; i < words.size();\
    \ i++) {\n        if (words[i].length() == m)\n            return words[i];\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n  \
    \  assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmptjbb84wo: /tmp/tmptjbb84wo.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n\tstd::map<int,std::string> m;\n\tstd::string ans = \"\";\n\tstd::string\
    \ temp;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int\
    \ j = 0; j < words.size(); j++){\n\t\t\tif(words[i] == words[j]){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(count > m[count]){\n\t\t\tans = words[i];\n\t\t\tm[count]\
    \ = ans;\n\t\t}\n\t}\n\tif(ans.empty()){\n\t\treturn \"\";\n\t}\n\tstd::map<int,std::string>::iterator\
    \ it = m.begin();\n\tstd::map<int,std::string>::iterator it1 = m.end();\n\twhile(it\
    \ != it1){\n\t\tif((it->second) < ans.capacity()){\n\t\t\tans = it->second;\n\t\
    \t}\n\t\tit++;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcuchxdt9.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpcuchxdt9.cpp:21:12: error: no match for \u2018operator>\u2019\
    \ (operand types are \u2018int\u2019 and \u2018std::map<int, std::__cxx11::basic_string<char>\
    \ >::mapped_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n \
    \  21 |   if(count > m[count]){\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpcuchxdt9.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpcuchxdt9.cpp:21:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   21 |   if(count > m[count]){\n      |              \
    \       ^\nIn file included from /usr/include/c++/9/regex:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n            \
    \     from /tmp/tmpcuchxdt9.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpcuchxdt9.cpp:21:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018int\u2019\n   21 |   if(count > m[count]){\n\
    \      |                     ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gn"
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Write your solution here\n  std::map<char, int> m;\n  for (auto\
    \ word : words) {\n    for (auto ch : word) {\n      m[ch]++;\n    }\n  }\n  auto\
    \ it = m.begin();\n  while (it != m.end()) {\n    if (it->second > 1) {\n    \
    \  it = m.erase(it);\n    } else {\n      it++;\n    }\n  }\n  auto it2 = m.begin();\n\
    \  while (it2 != m.end()) {\n    if (it2->second == 1) {\n      return it2->first;\n\
    \    }\n    it2++;\n  }\n  return \"\";\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjefst_hx.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpjefst_hx.cpp:29:19: error: could not convert \u2018it2.std::_Rb_tree_iterator<std::pair<const\
    \ char, int> >::operator->()->std::pair<const char, int>::first\u2019 from \u2018\
    const char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   29 |       return it2->first;\n      |              ~~~~~^~~~~\n      |\
    \                   |\n      |                   const char\n"
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    size_t max_length = 0;\n    std::string result = \"\";\n    for\
    \ (std::string word : words) {\n        if (word.length() > max_length) {\n  \
    \          max_length = word.length();\n            result = word;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpia2njfu2: /tmp/tmpia2njfu2.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string word = words[0];\n   \
    \ for (size_t i = 0; i < words.size(); i++) {\n        if (words[i].size() > word.size())\
    \ {\n            word = words[i];\n        }\n    }\n    return word;\n}\nint\
    \ main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpvj_fjx9f: /tmp/tmpvj_fjx9f.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::set<std::string> unique_characters;\n  for (const auto& word\
    \ : words) {\n    for (const auto& character : word) {\n      if (unique_characters.count(character)\
    \ == 0) {\n        unique_characters.insert(character);\n      }\n    }\n  }\n\
    \  return unique_characters.size() == 0 ? words[0] : unique_characters.rbegin()->c_str();\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeux9en7u.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpeux9en7u.cpp:14:44: error: no matching function for call\
    \ to \u2018std::set<std::__cxx11::basic_string<char> >::count(const char&)\u2019\
    \n   14 |       if (unique_characters.count(character) == 0) {\n      |      \
    \                                      ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpeux9en7u.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:748:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::size_type std::set<_Key,\
    \ _Compare, _Alloc>::count(const key_type&) const [with _Key = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::size_type = long unsigned int; std::set<_Key,\
    \ _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n  748\
    \ |       count(const key_type& __x) const\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_set.h:748:29:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n  748 |       count(const key_type& __x) const\n      |             ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:754:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((const std::set<_Key, _Compare, _Alloc>*)this)->std::set<_Key,\
    \ _Compare, _Alloc>::_M_t._M_count_tr(__x)) std::set<_Key, _Compare, _Alloc>::count(const\
    \ _Kt&) const [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Compare\
    \ = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >]\u2019\n  754 |  count(const _Kt& __x) const\n      |  ^~~~~\n/usr/include/c++/9/bits/stl_set.h:754:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_set.h:\
    \ In substitution of \u2018template<class _Kt> decltype (((const std::set<std::__cxx1"
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    for (int i = 0; i < n; ++i) {\n   \
    \     unordered_set<char> s;\n        std::string temp = words[i];\n        for\
    \ (int j = i; j < n; ++j) {\n            if (s.find(temp[j - i]) > 0) {\n    \
    \            temp = temp[j - i];\n                for (int k = i; k >= j && k\
    \ > 0; ++k) {\n                    s.erase(temp[k]);\n                }\n    \
    \        }\n        }\n        if (s.empty())\n            return words[i];\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n  \
    \  assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphd1qbk6_.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmphd1qbk6_.cpp:13:9: error: \u2018unordered_set\u2019 was not\
    \ declared in this scope\n   13 |         unordered_set<char> s;\n      |    \
    \     ^~~~~~~~~~~~~\n/tmp/tmphd1qbk6_.cpp:13:9: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmphd1qbk6_.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11: note:\
    \   \u2018std::unordered_set\u2019\n   97 |     class unordered_set\n      | \
    \          ^~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmphd1qbk6_.cpp:2:\n/usr/include/c++/9/unordered_set:68:13:\
    \ note:   \u2018std::pmr::unordered_set\u2019\n   68 |       using unordered_set\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmphd1qbk6_.cpp:13:23: error: expected\
    \ primary-expression before \u2018char\u2019\n   13 |         unordered_set<char>\
    \ s;\n      |                       ^~~~\n/tmp/tmphd1qbk6_.cpp:16:17: error: \u2018\
    s\u2019 was not declared in this scope\n   16 |             if (s.find(temp[j\
    \ - i]) > 0) {\n      |                 ^\n/tmp/tmphd1qbk6_.cpp:23:13: error:\
    \ \u2018s\u2019 was not declared in this scope\n   23 |         if (s.empty())\n\
    \      |             ^\n"
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::vector<std::string> unique_words;\n    std::string max_word;\n\
    \    std::string max_word_character;\n\n    std::sort(words.begin(), words.end());\n\
    \n    for (int i = 0; i < words.size(); i++) {\n        unique_words.push_back(words[i]);\n\
    \    }\n\n    unique_words.erase(unique_words.begin()); // erase first element\
    \ as its is empty\n\n    // Find out maximum number word of unique characters\n\
    \    int count_unique_characters = 0;\n    for (auto word : unique_words) {\n\
    \        int count = word.length();\n        for (auto character : word) {\n \
    \           count -= character;\n        }\n        if (count_unique_characters\
    \ < count) {\n            count_unique_characters = count;\n            max_word\
    \ = word;\n            max_word_character = word[0];\n        }\n    }\n\n   \
    \ // If max character found then return max word\n    if (max_word_character ==\
    \ unique_words[0][0]) {\n        return max_word;\n    }\n\n    return \"\";\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a055nwt.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp8a055nwt.cpp:38:28: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   38 |     if (max_word_character == unique_words[0][0])\
    \ {\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmp8a055nwt.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5: note: candidate:\
    \ \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&,\
    \ const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const\
    \ sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1026:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8a055nwt.cpp:38:48: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   38 |     if (max_word_character == unique_words[0][0]) {\n      |       \
    \                                         ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8a055nwt.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8a055nwt.cpp:38:48: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<st"
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string ans = \"\";\n    unsigned\
    \ int n = words.size();\n    std::string max = \"\";\n    int cnt[26];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        cnt[words[i].size()]++;\n        if\
    \ (words[i].size() > max.size())\n        {\n            max = words[i];\n   \
    \     }\n    }\n    for (int i = 0; i < 26; i++)\n    {\n        if (cnt[i] >\
    \ 1)\n        {\n            ans += max[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpqvj_jjp9: /tmp/tmpqvj_jjp9.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here.\n    // The code should contain following\
    \ functions:\n    // 1. bool word_unique(std::vector<std::string> words)\n   \
    \ // 2. std::string find_max(std::vector<std::string> words)\n    // The function\
    \ find_max should return maximum word in the list.\n    // For example, if the\
    \ list is [\"a\", \"b\", \"ab\", \"c\", \"ab\", \"a\"]\n    // The function will\
    \ return \"ab\" since it has 2 unique characters\n    // The function word_unique\
    \ should return true if all words have same number of unique characters and false\
    \ otherwise.\n    // For example [\"aaaaaaa\", \"bb\" ,\"cc\"] is false.\n   \
    \ // So the function should return true if the word is unique or false otherwise.\n\
    \    assert(words.size() > 1);\n    int max_count = words[0].length();\n    for\
    \ (int i = 1; i < words.size(); i++) {\n        int count = words[i].length();\n\
    \        if (max_count < count) max_count = count;\n    }\n    if (words[0].length()\
    \ == max_count) {\n        return words[0];\n    }\n    for (int i = 1; i < words.size();\
    \ i++) {\n        if (words[i].length() == max_count) {\n            return words[i];\n\
    \        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp5tfnbmua: /tmp/tmp5tfnbmua.cpp:40: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    auto max_count = std::count_if(words.begin(), words.end(), [&](const\
    \ auto &s) { return s.size(); });\n    \n    if (max_count == 0) {\n        return\
    \ \"\";\n    } else if (max_count == 1) {\n        return words[0];\n    }\n\n\
    \    std::string max_word = *std::max_element(words.begin(), words.end(), [](const\
    \ auto &a, const auto &b) { return a.size() < b.size(); });\n\n    return max_word;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpmngyiqt8: /tmp/tmpmngyiqt8.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string answer;\n    for (auto\
    \ &i : words)\n    {\n        std::unordered_set<char> unique;\n        for (auto\
    \ &j : i)\n        {\n            unique.insert(j);\n        }\n        if (unique.size()\
    \ > answer.size()) {\n            answer = i;\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpws5mbd0k: /tmp/tmpws5mbd0k.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::map<std::string, int> counter;\n  for (const auto& word : words)\
    \ {\n    int freq = 0;\n    for (const auto& letter : word) {\n      freq += counter.at(letter);\n\
    \    }\n    if (freq > counter.size()) {\n      counter[word] = 1;\n    } else\
    \ {\n      counter[word] += 1;\n    }\n  }\n  // get rid of invalid words (the\
    \ words whose count is 0)\n  for (const auto& pair : counter) {\n    if (pair.second\
    \ != 0) {\n      return pair.first;\n    }\n  }\n  // all characters have frequency\
    \ of 1, the empty string is the worst case\n  return \"\";\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpif3d4ik0.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpif3d4ik0.cpp:15:32: error: no matching function for call\
    \ to \u2018std::map<std::__cxx11::basic_string<char>, int>::at(const char&)\u2019\
    \n   15 |       freq += counter.at(letter);\n      |                         \
    \       ^\nIn file included from /usr/include/c++/9/map:61,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n               \
    \  from /tmp/tmpif3d4ik0.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:535:7: note:\
    \ candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::at(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  535 |       at(const key_type&\
    \ __k)\n      |       ^~\n/usr/include/c++/9/bits/stl_map.h:535:26: note:   no\
    \ known conversion for argument 1 from \u2018const char\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  535 |       at(const\
    \ key_type& __k)\n      |          ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:544:7:\
    \ note: candidate: \u2018const mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::at(const\
    \ key_type&) const [with _Key = std::__cxx11::basic_string<char>; _Tp = int; _Compare\
    \ = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type\
    \ = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  544 |       at(const key_type& __k) const\n      |       ^~\n/usr/include/c++/9/bits/stl_map.h:544:26:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    const key_type&\u2019 {aka \u2018const std::__cxx11::basic_str"
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::set<std::string> s;\n    for\
    \ (auto const& i : words) {\n        std::set<std::string> tmp = s;\n        for\
    \ (const auto &j : i){\n            tmp.insert(j);\n        }\n        if (s.empty()){\n\
    \            return i;\n        }else{\n            s.clear();\n            s\
    \ = tmp;\n        }\n    }\n\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmw7nq1aa.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpmw7nq1aa.cpp:16:25: error: no matching function for call\
    \ to \u2018std::set<std::__cxx11::basic_string<char> >::insert(const char&)\u2019\
    \n   16 |             tmp.insert(j);\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpmw7nq1aa.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:509:7:\
    \ note: candidate: \u2018std::pair<typename std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>,\
    \ _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(const value_type&) [with _Key\
    \ = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; typename std::_Rb_tree<_Key,\
    \ _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator\
    \ = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >; std::set<_Key,\
    \ _Compare, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n  509\
    \ |       insert(const value_type& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_set.h:509:32:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n  509 |       insert(const value_type& __x)\n      |              ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:518:7: note: candidate: \u2018std::pair<typename\
    \ std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(std::set<_Key, _Compare, _Alloc>::value_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char>"
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    //code here\n    std::string result=\"\";\n    for(auto w: words)\n\
    \    {\n        std::set<char> unique_char;\n        std::size_t count=0;\n  \
    \      for(char c: w)\n        {\n            unique_char.insert(c);\n       \
    \     count++;\n        }\n        if(count > result.size())\n        {\n    \
    \        result=w;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmph39tm9kd: /tmp/tmph39tm9kd.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int n = words.size();\n  int max_char = 0;\n  int cur = 0, prev_char\
    \ = 0;\n  for (int i = 0; i < n; ++i) {\n    cur = words[i].length();\n    if\
    \ (cur > max_char) {\n      max_char = cur;\n      prev_char = cur;\n    }\n \
    \ }\n  for (int i = 0; i < n; ++i) {\n    cur = words[i].length();\n    if (cur\
    \ > max_char && prev_char > max_char) {\n      return words[i];\n    }\n  }\n\
    \  return \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpe2j1znqa: /tmp/tmpe2j1znqa.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::unordered_map<char,int> char_map;\n  std::string max_str =\
    \ \"\";\n  // Find the maximum string and its size\n  for (auto const &s : words)\
    \ {\n    auto it = char_map.find(s[0]);\n    int max_chars = 0;\n    if (it !=\
    \ char_map.end())\n      max_chars = it->second;\n    for (const auto &c : s)\
    \ {\n      if (char_map[c] >= max_chars) {\n        char_map[c]++;\n        if\
    \ (max_chars < char_map[c])\n          max_str = s;\n      }\n    }\n  }\n  return\
    \ max_str;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpkuv0y3hb: /tmp/tmpkuv0y3hb.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    if (words.size() < 2)\n        return \"\";\n    std::string w;\n\
    \    int uc = 0, lc = 0;\n    std::string maxw = words[0];\n    for (auto &w :\
    \ words) {\n        uc += w.size();\n        lc = w.size();\n        if (uc >\
    \ lc) w = maxw;\n        maxw = w;\n    }\n    return maxw;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp8j_55ovv: /tmp/tmp8j_55ovv.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result=\"\";\n    int char_count= 0;\n    for(auto\
    \ x:words){\n        char_count = std::count_if(words.begin(), words.end(), [&x]\n\
    \            { return x.find(x) != std::string::npos; });\n        if(char_count\
    \ >=1){\n            result = x;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpgla83264.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda()>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:   required\
    \ from \u2018typename std::iterator_traits<_Iterator>::difference_type std::__count_if(_InputIterator,\
    \ _InputIterator, _Predicate) [with _InputIterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda()> >; typename std::iterator_traits<_Iterator>::difference_type\
    \ = long int]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4144:29:   required from\
    \ \u2018typename std::iterator_traits<_Iterator>::difference_type std::count_if(_IIter,\
    \ _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda()>; typename std::iterator_traits<_Iterator>::difference_type =\
    \ long int]\u2019\n/tmp/tmpgla83264.cpp:15:55:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:283:11:\
    \ error: no match for call to \u2018(find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda()>) (std::__cxx11::basic_string<char>&)\u2019\n  283 |  { return\
    \ bool(_M_pred(*__it)); }\n      |           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgla83264.cpp:14:64:\
    \ note: candidate: \u2018find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda()>\u2019\n  "
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    \n    std::string max;\n    for(auto\
    \ word:words){\n        std::unordered_map<char,unsigned int> freq;\n        for(auto\
    \ letter:word){\n            freq[letter]++;\n        }\n        std::multiset<char>\
    \ temp{freq.begin(), freq.end()};\n        if(temp.size()>max.size()){\n     \
    \       max = std::move(word);\n        }\n    }\n    \n    if(max.size()==words[0].size()){\n\
    \        return words[0];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaew4ol75.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = char; _Args = {std::pair<const char, unsigned int>&}; _Tp = std::_Rb_tree_node<char>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = char; _Args = {std::pair<const\
    \ char, unsigned int>&}; _Tp = std::_Rb_tree_node<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::_Rb_tree_node<char> >]\u2019\n/usr/include/c++/9/bits/stl_tree.h:614:32:\
    \   required from \u2018void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare,\
    \ _Alloc>::_M_construct_node(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare,\
    \ _Alloc>::_Link_type, _Args&& ...) [with _Args = {std::pair<const char, unsigned\
    \ int>&}; _Key = char; _Val = char; _KeyOfValue = std::_Identity<char>; _Compare\
    \ = std::less<char>; _Alloc = std::allocator<char>; std::_Rb_tree<_Key, _Val,\
    \ _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<char>*]\u2019\
    \n/usr/include/c++/9/bits/stl_tree.h:631:4:   required from \u2018std::_Rb_tree_node<_Val>*\
    \ std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_create_node(_Args&&\
    \ ...) [with _"
  stdout: ''
  timestamp: 1660116795
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Your code here\n  int num_unique = 0; std::string curr_max =\
    \ words[0]; \n  for (std::vector<std::string>::iterator it=words.begin()+1; it!=words.end();\
    \ ++it){\n    if(curr_max.size()<it->size() && curr_max!=\"\")\n    {\n      num_unique++;\n\
    \      curr_max = it->size() > num_unique ? it->size() : num_unique;\n    }\n\
    \  }\n  if(curr_max.size()>words[0].size())\n    curr_max = words[0];\n  assert(curr_max.size()==words[0].size());\n\
    \  return curr_max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmplakj8ayz: /tmp/tmplakj8ayz.cpp:22: std::string find_max(std::vector<std::__cxx11::basic_string<char>
    >): Assertion `curr_max.size()==words[0].size()'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string maxWord = words[0];\n    unsigned int maxChar = words[0].size();\n\
    \    for (int i = 1; i < words.size(); i++) {\n        int curChar = words[i].size();\n\
    \        if (curChar > maxChar) {\n            maxChar = curChar;\n          \
    \  maxWord = words[i];\n        }\n    }\n    return maxWord;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp7qrnr7ym: /tmp/tmp7qrnr7ym.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    int n = words.size();\n    int k = 0, j = 0;\n\
    \    int temp = 1;\n    for (int i = 0; i < n; i++) {\n        if (words.at(i).size()\
    \ >= temp) {\n            k = j;\n            j = i;\n        }\n    }\n    for\
    \ (int i = k + 1; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n     \
    \       if (j == i && words[j].size() > words[i].size()) continue;\n         \
    \   if (words[j].size() > words[i].size()) std::swap(words[j], words[i]);\n  \
    \          if (words.at(i).size() > words[j].size()) {\n                std::swap(words[j],\
    \ words[i]);\n            }\n        }\n    }\n    std::sort(words.begin(), words.end());\n\
    \    return words.front();\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp2kuz_3ih: /tmp/tmp2kuz_3ih.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end());\n    std::string temp =\
    \ \"\";\n    std::string max = \"\";\n    unsigned int counter = 0;\n    for (auto\
    \ &s : words) {\n        temp = s + temp;\n        if (temp.empty()) continue;\n\
    \        if (counter > 1) break;\n        if (std::count(temp.begin(), temp.end(),\
    \ max) > 0) {\n            max = temp;\n        }\n        ++counter;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuody3c6d.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:4121:29:   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\n\
    /tmp/tmpuody3c6d.cpp:19:53:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuody3c6d.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class"
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    \n    std::string max_word;\n    int max_char_count = -1;\n  \
    \  \n    for (std::string word : words)\n    {\n        int char_count = word.length();\n\
    \        \n        if (char_count > max_char_count)\n        {\n            max_char\
    \ = char_count;\n            max_word = word;\n        }\n    }\n    \n    if\
    \ (max_char_count > 0)\n    {\n        return max_word;\n    }\n    else\n   \
    \ {\n        return \"\";\n    }\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg23ahdnc.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpg23ahdnc.cpp:21:13: error: \u2018max_char\u2019 was not declared\
    \ in this scope; did you mean \u2018u_char\u2019?\n   21 |             max_char\
    \ = char_count;\n      |             ^~~~~~~~\n      |             u_char\n"
  stdout: ''
  timestamp: 1660116795
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end()); // sort in lexicographical\
    \ order\n    auto max_size = std::max_element(words.begin(), words.end()) - words.begin();\n\
    \    auto it = words.begin();\n    for (auto el : max_size)\n    {\n        it\
    \ = std::find(it, words.end(), el);\n    }\n    return *it;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3gj7gg2.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpp3gj7gg2.cpp:14:20: error: \u2018begin\u2019 was not declared\
    \ in this scope\n   14 |     for (auto el : max_size)\n      |               \
    \     ^~~~~~~~\n/tmp/tmpp3gj7gg2.cpp:14:20: note: suggested alternatives:\nIn\
    \ file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n \
    \                from /tmp/tmpp3gj7gg2.cpp:2:\n/usr/include/c++/9/valarray:1224:5:\
    \ note:   \u2018std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n\
    \      |     ^~~~~\nIn file included from /usr/include/c++/9/filesystem:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpp3gj7gg2.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3:\
    \ note:   \u2018std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmpp3gj7gg2.cpp:14:20: error: \u2018\
    end\u2019 was not declared in this scope\n   14 |     for (auto el : max_size)\n\
    \      |                    ^~~~~~~~\n/tmp/tmpp3gj7gg2.cpp:14:20: note: suggested\
    \ alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpp3gj7gg2.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmpp3gj7gg2.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::vector<std::string>::iterator itr;\n    std::string result\
    \ = \"\";\n    for (size_t i = 0; i < words.size(); i++) {\n        std::sort(words.begin()\
    \ + i, words.end());\n        std::set<std::string> s;\n        std::for_each(words.begin(),\
    \ words.end(), [&](std::string& s) { s.push_back(words[i]); });\n        for(itr\
    \ = s.begin(); itr != s.end(); ++itr) {\n            if (s.size() > result.size())\
    \ {\n                result = *itr;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9i1wsbhs.cpp: In lambda function:\n/tmp/tmp9i1wsbhs.cpp:16:93:\
    \ error: cannot convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018char\u2019\n   16 |         std::for_each(words.begin(), words.end(),\
    \ [&](std::string& s) { s.push_back(words[i]); });\n      |                  \
    \                                                                           ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9i1wsbhs.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1353:24: note:\
    \   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n 1353 |       push_back(_CharT __c)\n\
    \      |                 ~~~~~~~^~~\n/tmp/tmp9i1wsbhs.cpp: In function \u2018\
    std::string find_max(std::vector<std::__cxx11::basic_string<char> >)\u2019:\n\
    /tmp/tmp9i1wsbhs.cpp:17:27: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019} and \u2018std::set<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    })\n   17 |         for(itr = s.begin(); itr != s.end(); ++itr) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/bits/stl_al"
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // your code here\n    std::string max_word = \"\";\n    std::string\
    \ curr_word = \"\";\n    size_t max_count = 0;\n    for (size_t i = 0; i < words.size();\
    \ i++) {\n        if (curr_word == words[i])\n            continue;\n        size_t\
    \ count = 0;\n        for (size_t j = 0; j < words.size(); j++) {\n          \
    \  if (i == j)\n                continue;\n            count += std::count(words[i].begin(),\
    \ words[i].end(), words[j].begin(), words[j].end());\n        }\n        if (count\
    \ > max_count) {\n            max_word = words[i];\n            max_count = count;\n\
    \        }\n        curr_word = words[i];\n    }\n    return max_word;\n}\nint\
    \ main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2itcpin.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpx2itcpin.cpp:22:99: error: no matching function for call\
    \ to \u2018count(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n   22 |             count += std::count(words[i].begin(), words[i].end(), words[j].begin(),\
    \ words[j].end());\n      |                                                  \
    \                                                 ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx2itcpin.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4113:5:\
    \ note: candidate: \u2018template<class _IIter, class _Tp> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&)\u2019\n 4113 |     count(_InputIterator\
    \ __first, _InputIterator __last, const _Tp& __value)\n      |     ^~~~~\n/usr/include/c++/9/bits/stl_algo.h:4113:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpx2itcpin.cpp:22:99:\
    \ note:   candidate expects 3 arguments, 4 provided\n   22 |             count\
    \ += std::count(words[i].begin(), words[i].end(), words[j].begin(), words[j].end());\n\
    \      |                                                                     \
    \                              ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx2itcpin.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Tp> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ typename std::iterator_traits<_II>::difference_type> std::count(_ExecutionPolicy&&,\
    \ _ForwardIterator, _ForwardIterator, const _Tp&)\u2019\n  101 | count(_ExecutionPolicy&&\
    \ __exec, _ForwardIterator __first, _Forwa"
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n\tint count = 0, maxCount = 0;\n\tstd::string result;\n\t// loop through\
    \ all the words\n\tfor (auto &word : words) {\n\t\tint count = 0;\n\t\t// loop\
    \ through all the chars in the word\n\t\tfor (char ch : word) {\n\t\t\tcount++;\n\
    \t\t}\n\t\tif (count > maxCount) {\n\t\t\tmaxCount = count;\n\t\t\tresult = word;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpmru1gkk1: /tmp/tmpmru1gkk1.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string word_max = \"\";\n    int num_of_unique_chars = 0;\n\
    \    \n    for (const auto& word : words)\n    {\n        for (auto c : word)\n\
    \        {\n            if (num_of_unique_chars < c.size() && c == word_max)\n\
    \            {\n                num_of_unique_chars++;\n                word_max\
    \ = c;\n            }\n        }\n    }\n    \n    return word_max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdygdanpm.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpdygdanpm.cpp:18:41: error: request for member \u2018size\u2019\
    \ in \u2018c\u2019, which is of non-class type \u2018char\u2019\n   18 |     \
    \        if (num_of_unique_chars < c.size() && c == word_max)\n      |       \
    \                                  ^~~~\n/tmp/tmpdygdanpm.cpp:18:53: error: no\
    \ match for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   18 |\
    \             if (num_of_unique_chars < c.size() && c == word_max)\n      |  \
    \                                                 ~ ^~ ~~~~~~~~\n      |     \
    \                                              |    |\n      |               \
    \                                    char std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdygdanpm.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdygdanpm.cpp:18:56:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   18 |             if (num_of_unique_chars < c.size()\
    \ && c == word_max)\n      |                                                 \
    \       ^~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n     \
    \            from /tmp/tmpdygdanpm.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_t"
  stdout: ''
  timestamp: 1660116796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    int max = 0;\n    int n = 0;\n  \
    \  for (int i = 0; i < words.size(); i++) {\n        for (int j = i + 1; j < words.size();\
    \ j++) {\n            n = std::count_if(words[i].begin(), words[i].end(), [j](char\
    \ c) { return std::tolower(c) == std::tolower(words[j].at(0)); });\n         \
    \   if (n > max) {\n                max = n;\n            }\n        }\n    }\n\
    \    if (max == 0) return \"\";\n    return words[std::distance(words.begin(),\
    \ std::max_element(words.begin(), words.begin() + max))];\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqd3qbf02.cpp: In lambda function:\n/tmp/tmpqd3qbf02.cpp:16:118:\
    \ error: \u2018words\u2019 is not captured\n   16 |             n = std::count_if(words[i].begin(),\
    \ words[i].end(), [j](char c) { return std::tolower(c) == std::tolower(words[j].at(0));\
    \ });\n      |                                                               \
    \                                                       ^~~~~\n/tmp/tmpqd3qbf02.cpp:16:67:\
    \ note: the lambda has no capture-default\n   16 |             n = std::count_if(words[i].begin(),\
    \ words[i].end(), [j](char c) { return std::tolower(c) == std::tolower(words[j].at(0));\
    \ });\n      |                                                               \
    \    ^\n/tmp/tmpqd3qbf02.cpp:10:47: note: \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > words\u2019 declared here\n   10 | std::string find_max(std::vector<std::string>\
    \ words) {\n      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:71,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqd3qbf02.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = find_max(std::vector<std::__cxx11::basic_string<char> >)::<lambda(char)>]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:3194:12:   required from \u2018typename\
    \ std::iterator_traits<_Iterator>::difference_type std::__count_if(_InputIterator,\
    \ _InputIterator, _Predicate) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_pred<find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)::<lambda(char)> >; typename std::iterator_traits<_Iterator>::difference_type\
    \ = long int]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4144:29:   required from\
    \ \u2018"
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string result = \"\";\n    char\
    \ maxChar = 0;\n    \n    for(unsigned int i = 0; i < words.size(); i++){\n  \
    \      \n        for(unsigned int j = 0; j < words[i].size(); j++){\n        \
    \    if(maxChar < words[i][j]){\n                maxChar = words[i][j];\n    \
    \            result =words[i]; \n            }\n            \n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp9gzy4fjx: /tmp/tmp9gzy4fjx.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<int, std::string> m;\n    for (const auto &word : words)\
    \ {\n        int count = 0;\n        for (const auto &ch : word) {\n         \
    \   count += m[ch]++;\n        }\n        if (count > m.size()) {\n          \
    \  m.assign(count, word);\n        }\n    }\n\n    auto it = m.begin();\n    return\
    \ it->second + it->first - 'a';\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dh7xbdl.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp4dh7xbdl.cpp:15:27: error: no \u2018operator++(int)\u2019\
    \ declared for postfix \u2018++\u2019 [-fpermissive]\n   15 |             count\
    \ += m[ch]++;\n/tmp/tmp4dh7xbdl.cpp:18:15: error: \u2018class std::map<int, std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018assign\u2019\n   18 |             m.assign(count,\
    \ word);\n      |               ^~~~~~\n/tmp/tmp4dh7xbdl.cpp:23:23: error: no\
    \ match for \u2018operator+\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018const int\u2019)\n   23 |     return it->second + it->first - 'a';\n\
    \      |            ~~~~~~~~~~ ^ ~~~~~~~~~\n      |                |         \
    \   |\n      |                |            const int\n      |                std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp4dh7xbdl.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4dh7xbdl.cpp:23:29:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018const int\u2019\n   23 |     return it->second + it->first - 'a';\n\
    \      |                             ^~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41"
  stdout: ''
  timestamp: 1660116796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string result = \"\";\n    std::string word = \"\";\n   \
    \ int count = 0;\n    for (auto &i : words) {\n        if (i.size() > word.size())\
    \ {\n            word = i;\n            count = 1;\n        } else if (i.size()\
    \ == word.size()) {\n            count = count + 1;\n        }\n    }\n    if\
    \ (count > 1) {\n        result = word;\n    }\n    return result + (words.rbegin()->size()\
    \ == 0 ? \"\" : word);\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp65qotj25: /tmp/tmp65qotj25.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int count = 0, max = 0, idx = 0;\n    for (std::string word :\
    \ words) {\n        ++count;\n        if (word.length() >= max) max = word.length();\n\
    \    }\n    for (std::string word : words) {\n        if (word.length() == max)\
    \ {\n            if (word.compare(words[idx], max)) idx++;\n            else break;\n\
    \        }\n    }\n    return words[idx] == \"\" ? words[0] : words[idx];\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5hyy9fs.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpx5hyy9fs.cpp:18:45: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::compare(__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type&, int&)\u2019\n   18 |   \
    \          if (word.compare(words[idx], max)) idx++;\n      |                \
    \                             ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx5hyy9fs.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note: candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpx5hyy9fs.cpp:18:45:\
    \ note:   candidate expect"
  stdout: ''
  timestamp: 1660116797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int count = 0, max_count = 0;\n    for (int i = 0; i < words.size();\
    \ ++i) {\n        if (words[i].size() > max_count) {\n            max_count =\
    \ words[i].size();\n            count = 0;\n        }\n        for (int j = 0;\
    \ j < words[i].size(); ++j) {\n            count += words[i][j] == words[i][j];\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \        }\n        count = 0;\n    }\n    if (words.size() > max_count) {\n \
    \       return \"\";\n    } else {\n        return words[max_count - 1];\n   \
    \ }\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpwm1cnkqb: /tmp/tmpwm1cnkqb.cpp:33: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_num = 0, max_num_index = 0;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        int count = 0;\n        for (int j = 0; j < words[i].size();\
    \ j++) {\n            count++;\n        }\n        if (count > max_num) {\n  \
    \          max_num = count;\n            max_num_index = i;\n        }\n    }\n\
    \    return words[max_num_index];\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmphao0sy26: /tmp/tmphao0sy26.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int count = 0;\n    for(size_t i=0; i<words.size();\
    \ i++){\n        for(size_t j=0; j<words[i].size(); j++){\n            if(words[i][j]\
    \ == '\\0'){\n                count++;\n            }\n            if(count >\
    \ words[i].size()){\n                max = words[i];\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpmwtgrrag: /tmp/tmpmwtgrrag.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_word = \"\";\n    int max_word_count = 0;\n  \
    \  for (auto word : words) {\n        size_t word_count = 0;\n        for (auto\
    \ char : word) {\n            word_count += !std::count(word.begin(), word.end(),\
    \ char);\n        }\n        if (word_count > max_word_count) {\n            max_word\
    \ = word;\n            max_word_count = word_count;\n        }\n    }\n    if\
    \ (max_word_count == words.size()) {\n        return max_word;\n    }\n    return\
    \ max_word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsshg0kqv.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpsshg0kqv.cpp:15:24: error: expected unqualified-id before\
    \ \u2018:\u2019 token\n   15 |         for (auto char : word) {\n      |     \
    \                   ^\n/tmp/tmpsshg0kqv.cpp:16:65: error: expected primary-expression\
    \ before \u2018char\u2019\n   16 |             word_count += !std::count(word.begin(),\
    \ word.end(), char);\n      |                                                \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660116797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  std::string answer;\n  int answerChars = 0;\n  for (auto i : words)\
    \ {\n    answerChars = std::count_if(std::begin(i), std::end(i), [&answerChars](char\
    \ ch) {\n      return answerChars == 0;\n    });\n    if (answerChars > 0) {\n\
    \      answer = i;\n      break;\n    }\n  }\n  return answer;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpqfh10w66: /tmp/tmpqfh10w66.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string result = \"\";\n    for(std::string\
    \ word: words)\n    {\n        int count=0;\n        for(char c: word)\n     \
    \   {\n            if(c==' ')\n            {\n                count++;\n     \
    \       }\n        }\n        if(count>result.size())\n        {\n           \
    \ result=word;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmplnrtx7g2: /tmp/tmplnrtx7g2.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // write your code here\n    size_t len = words.size();\n    if(len\
    \ == 0)\n        return \"\";\n    std::string result = \"\";\n    for(size_t\
    \ i = 0; i < (len - 1); i++) {\n        std::string s1 = words[i];\n        std::string\
    \ s2 = words[i + 1];\n        size_t n = s1.size();\n        size_t m = s2.size();\n\
    \        if(n == m)\n            continue;\n        bool flag = false;\n     \
    \   for (size_t j = 0; j < n; j++) {\n            size_t k = 0;\n            for\
    \ (size_t l = 0; l < m; l++) {\n                if(s1[j] == s2[l])\n         \
    \           k++;\n            }\n            if(flag == false || k < m)\n    \
    \            flag = true;\n        }\n        if(flag == true)\n            result\
    \ = s2;\n    }\n    for(size_t i = 0; i < words.size(); i++) {\n        std::string\
    \ s1 = words[i];\n        size_t n = s1.size();\n        if(n == result.size())\n\
    \            return words[i];\n    }\n    return \"\";\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmphf7obsau: /tmp/tmphf7obsau.cpp:47: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  assert(words.size() > 0);\n  int unique_count = 0, max_length =\
    \ INT_MIN;\n  for (auto& word : words) {\n    unique_count += std::count(word.begin(),\
    \ word.end(), 'a');\n    if (unique_count > max_length) {\n      max_length =\
    \ unique_count;\n    }\n  }\n  for (auto& word : words) {\n    unique_count +=\
    \ std::count(word.begin(), word.end(), 'a');\n  }\n  if (unique_count == max_length)\
    \ return words[0];\n  else {\n    for (auto& word : words) {\n      if (std::count(word.begin(),\
    \ word.end(), 'a') == max_length) {\n        return word;\n      }\n    }\n  \
    \  return \"\";\n  }\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpzo9lhfrr: /tmp/tmpzo9lhfrr.cpp:34: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_chars = 0;\n    int max_count = 0;\n    for (int i = 0;\
    \ i < words.size(); i++) {\n        char characters[128] = {0};\n        for (int\
    \ j = 0; j < words[i].size(); j++) {\n            if (characters[words[i][j]])\
    \ {\n                characters[words[i][j]] += 1;\n            } else {\n   \
    \             characters[words[i][j]] = 1;\n            }\n            if (characters[words[i][j]]\
    \ > max_count) {\n                max_count = characters[words[i][j]];\n     \
    \           max_chars = words[i][j];\n            }\n        }\n    }\n    return\
    \ words[max_chars];\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpwha7gc8q: /tmp/tmpwha7gc8q.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    bool isMax = false;\n    for (auto &word\
    \ : words) {\n        std::set<char> charSet;\n        for (auto &c : word) {\n\
    \            charSet.insert(c);\n        }\n        if (!isMax) {\n          \
    \  isMax = true;\n            max = word;\n        } else {\n            if (charSet.count(max)\
    \ > charSet.count(word)) {\n                max = word;\n            }\n     \
    \   }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvzleil2.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpyvzleil2.cpp:22:34: error: no matching function for call\
    \ to \u2018std::set<char>::count(std::string&)\u2019\n   22 |             if (charSet.count(max)\
    \ > charSet.count(word)) {\n      |                                  ^\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpyvzleil2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:748:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::size_type std::set<_Key,\
    \ _Compare, _Alloc>::count(const key_type&) const [with _Key = char; _Compare\
    \ = std::less<char>; _Alloc = std::allocator<char>; std::set<_Key, _Compare, _Alloc>::size_type\
    \ = long unsigned int; std::set<_Key, _Compare, _Alloc>::key_type = char]\u2019\
    \n  748 |       count(const key_type& __x) const\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_set.h:748:29:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const char&\u2019}\n  748 |       count(const key_type& __x) const\n\
    \      |             ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_set.h:754:2:\
    \ note: candidate: \u2018template<class _Kt> decltype (((const std::set<_Key,\
    \ _Compare, _Alloc>*)this)->std::set<_Key, _Compare, _Alloc>::_M_t._M_count_tr(__x))\
    \ std::set<_Key, _Compare, _Alloc>::count(const _Kt&) const [with _Kt = _Kt; _Key\
    \ = char; _Compare = std::less<char>; _Alloc = std::allocator<char>]\u2019\n \
    \ 754 |  count(const _Kt& __x) const\n      |  ^~~~~\n/usr/include/c++/9/bits/stl_set.h:754:2:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_set.h:\
    \ In substitution of \u2018template<class _Kt> decltype (((const std::set<char>*)this)->std::set<char>::_M_t.std::_Rb_tree<char,\
    \ char, std::_Identity<char>, std::less<char>, std::allocator<char> >::_M_count_tr<_Kt,\
    \ _Req>(__x)) std::set<char>::count<_Kt>(const _Kt&) const [with _Kt = std::__cxx11::"
  stdout: ''
  timestamp: 1660116797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string ret = \"\";\n    if (words.empty()) {\n        return\
    \ ret;\n    }\n    // Keep track of the number of unique characters in each string.\n\
    \    int char_count[words.size()];\n    for (int i = 0; i < words.size(); i++)\
    \ {\n        // Only count unique characters in words[i].\n        char_count[i]\
    \ = words[i].size();\n    }\n    // Sort the word list according to the number\
    \ of unique characters\n    // and print the first word whose number of unique\
    \ characters is\n    // maximized.\n    int max_char_count = std::max_element(char_count\
    \ + 1,\n                                          char_count + words.size());\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (char_count[i] == max_char_count)\
    \ {\n            ret = words[i];\n            break;\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpobzr17tv.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpobzr17tv.cpp:24:42: error: invalid conversion from \u2018\
    int*\u2019 to \u2018int\u2019 [-fpermissive]\n   24 |     int max_char_count =\
    \ std::max_element(char_count + 1,\n      |                          ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \      |                                          |\n      |                 \
    \                         int*\n   25 |                                      \
    \     char_count + words.size());\n      |                                   \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string max = \"\";\n    int counter\
    \ = 0;\n    for (auto i : words)\n        for (auto j : i)\n            if (std::find(words.begin(),\
    \ words.end(), j) == words.end())\n                counter++;\n    if (counter\
    \ > 0)\n        for (auto i : words)\n            if (i == max && std::find(words.begin(),\
    \ words.end(), i) == words.end())\n                max = i;\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvzrqzfpq.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Value = const char]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:120:14:   required from \u2018_RandomAccessIterator\
    \ std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag)\
    \ [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ char>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ char>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:   required from \u2018\
    _IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Tp = char]\u2019\n/tmp/tmpvzrqzfpq.cpp:16:56:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018const char\u2019)\n  241 |  { return *__it == _M_value; }\n      |\
    \           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 fro"
  stdout: ''
  timestamp: 1660116797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // write your code here\n  std::sort(words.begin(), words.end());\n\
    \  return words[words.size()-1];\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp5f4da5na: /tmp/tmp5f4da5na.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int max = 0;\n  int index = 0;\n  int count = 0;\n  for (int i =\
    \ 0; i < words.size(); i++) {\n    if (words[i].size() > max) {\n      max = words[i].size();\n\
    \      index = i;\n    }\n  }\n  for (int i = 0; i < words.size(); i++) {\n  \
    \  for (int j = i; j < words.size(); j++) {\n      if (words[i].compare(words[j])\
    \ == 0) {\n        count++;\n      }\n    }\n  }\n  if (count > max) {\n    return\
    \ words[index];\n  }\n  return \"\";\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp2tjczjwx: /tmp/tmp2tjczjwx.cpp:34: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string res = \"\";\n    std::string word\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n\
    \        if (words[i] == word) {\n            count++;\n        } else {\n   \
    \         if (count > 0 && count > words[i].size()) {\n                count =\
    \ words[i].size();\n                res = words[i];\n            }\n         \
    \   count = 1;\n            word = words[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpiyl59fql: /tmp/tmpiyl59fql.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max = 0;\n    std::string s = words[0];\n\
    \    for (int i = 1; i < n; i++) {\n        int cmp = std::count(s.begin(), s.end(),\
    \ words[i]);\n        if (cmp > max) {\n            max = cmp;\n            s\
    \ = words[i];\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyzv_4lkn.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:3194:12:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/usr/include/c++/9/bits/stl_algo.h:4121:29:   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\n\
    /tmp/tmpyzv_4lkn.cpp:15:58:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyzv_4lkn.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class"
  stdout: ''
  timestamp: 1660116797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int count = 0;\n  for (const auto& word: words) {\n    int len =\
    \ word.length();\n    count += len;\n  }\n\n  std::string ans = words[0];\n  for\
    \ (int i = 1; i < words.size(); i++) {\n    int current = count;\n    std::string\
    \ word = words[i];\n    for (int j = 0; j < word.length(); j++) {\n      current\
    \ += word[j];\n      if (current > ans.length()) {\n        ans = word;\n    \
    \  }\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp3q8zl66w: /tmp/tmp3q8zl66w.cpp:33: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int maxCount = 0;\n    std::string maxWord = words[0];\n    for\
    \ (int i = 1; i < words.size(); ++i) {\n        auto it = std::count_if(words.begin(),\
    \ words.end(), [&](const std::string &s) {\n            return s.find(maxWord)\
    \ == std::string::npos;\n        });\n        if (it > maxCount) {\n         \
    \   maxCount = it;\n            maxWord = words[i];\n        }\n    }\n    return\
    \ maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp4_y7eh_u: /tmp/tmp4_y7eh_u.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // your code goes here\n  sort(words.begin(), words.end());\n  int\
    \ maxcount = 0;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i].size()\
    \ > maxcount) {\n      maxcount = words[i].size();\n    }\n  }\n  int index =\
    \ 0;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i].size() == maxcount)\
    \ {\n      if (words[i] != words[index]) {\n        std::cout << words[i] << std::endl;\n\
    \      }\n      index++;\n    }\n  }\n  if (words.size() > index) {\n    return\
    \ words[index];\n  }\n  return words[words.size() - 1];\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpir60qaha: /tmp/tmpir60qaha.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: 'string

    '
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string maxWord;\n    int maxChar = 0;\n\
    \    bool found = false;\n    for (auto word : words) {\n        int charCount\
    \ = 0;\n        bool exist = false;\n        for (auto char : word) {\n      \
    \      charCount++;\n            if (charCount == maxChar) {\n               \
    \ exist = true;\n                break;\n            }\n        }\n        if\
    \ (!exist) {\n            maxChar = charCount;\n            maxWord = word;\n\
    \            found = true;\n        }\n    }\n    return maxWord;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgioov9gx.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpgioov9gx.cpp:18:24: error: expected unqualified-id before\
    \ \u2018:\u2019 token\n   18 |         for (auto char : word) {\n      |     \
    \                   ^\n"
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Your code here\n  int n = 0;\n  int max = 0;\n  for (auto it\
    \ = words.begin(); it != words.end(); it++) {\n    if (n[(*it)[max]] < (*it)[max])\
    \ n[(*it)[max]] += 1;\n    else max = (*it).size() - 1;\n  }\n  return *std::max_element(words.begin(),\
    \ words.end(), [n](const std::string & a, const std::string & b) { return n[a]\
    \ < n[b]; }).c_str();\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr_p720o.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpkr_p720o.cpp:15:21: error: invalid types \u2018int[__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}]\u2019 for array subscript\n   15 |     if (n[(*it)[max]]\
    \ < (*it)[max]) n[(*it)[max]] += 1;\n      |                     ^\n/tmp/tmpkr_p720o.cpp:15:49:\
    \ error: invalid types \u2018int[__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}]\u2019 for array subscript\n   15 |     if (n[(*it)[max]]\
    \ < (*it)[max]) n[(*it)[max]] += 1;\n      |                                 \
    \                ^\n/tmp/tmpkr_p720o.cpp: In lambda function:\n/tmp/tmpkr_p720o.cpp:18:116:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018const int\u2019\
    \ and \u2018const string\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019\
    })\n   18 |   return *std::max_element(words.begin(), words.end(), [n](const std::string\
    \ & a, const std::string & b) { return n[a] < n[b]; }).c_str();\n      |     \
    \                                                                            \
    \                                   ^\n/tmp/tmpkr_p720o.cpp:18:123: error: no\
    \ match for \u2018operator[]\u2019 (operand types are \u2018const int\u2019 and\
    \ \u2018const string\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019\
    })\n   18 |   return *std::max_element(words.begin(), words.end(), [n](const std::string\
    \ & a, const std::string & b) { return n[a] < n[b]; }).c_str();\n      |     \
    \                                                                            \
    \                                          ^\n/tmp/tmpkr_p720o.cpp: In function\
    \ \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char> >)\u2019\
    :\n/tmp/tmpkr_p720o.cpp:18:131: error: \u2018class __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 has no member named \u2018\
    c_str\u2019\n   18 |   return *std::max_element(words.begin(), words.end(), [n](const\
    \ std::string & a, const std::string & b) { return n[a] < n[b]; }).c_str();\n\
    \      |      "
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int m = 1;\n    std::string word;\n    for (const auto& word :\
    \ words) {\n        // If the current word has same number of unique chars with\n\
    \        // the previous word, return previous word\n        if (word.length()\
    \ > m) {\n            m = word.length();\n            word = words[words.size()-1];\n\
    \        } else if (word.length() == m) {\n            if (words.size() > 1) {\n\
    \                // If there is only one word in the list, return the\n      \
    \          // word with longest lexicographical order\n                word =\
    \ words[words.size()-2];\n            }\n        }\n    }\n    return word;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyijmx2ya.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpyijmx2ya.cpp:18:40: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018const std::__cxx11::basic_string<char>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char>\
    \ >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n  \
    \ 18 |             word = words[words.size()-1];\n      |                    \
    \                    ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyijmx2ya.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:669:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019 <near match>\n  669 |       operator=(const basic_string&\
    \ __str)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:669:7:\
    \ note:   passing \u2018const std::__cxx11::basic_string<char>*\u2019 as \u2018\
    this\u2019 argument discards qualifiers\n/usr/include/c++/9/bits/basic_string.h:736:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019 <near match>\n  736 |       operator=(basic_string&&\
    \ __str)\n      |      "
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_num_char = std::max_element(words.begin(), words.end())\
    \ -words.begin();\n    if(max_num_char == 0){\n        return \"\";\n    }\n \
    \   int max_char = 0;\n    for(int i = 0; i < words.size(); i++){\n        if(words[i].size()\
    \ == max_num_char){\n            int char_counter = 0;\n            for(int j=0;\
    \ j < words[i].size(); j++){\n                if(words[i][j] == max_char){\n \
    \                   char_counter++;\n                }\n            }\n      \
    \      if(char_counter > max_char){\n                max_char = char_counter;\n\
    \            }\n        }\n    }\n    return words[max_char];\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmppsxjoxly: /tmp/tmppsxjoxly.cpp:33: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here.\n    int max = 0;\n    std::string result;\n\
    \    for(auto const &x:words){\n        auto it = std::count(x.begin(), x.end(),\
    \ 'a');\n        if(it>max){\n            max = it;\n            result = x;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp846boc0c: /tmp/tmp846boc0c.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<int, std::string> m;\n    std::string result;\n    int\
    \ size = words.size();\n    for (size_t i = 0; i < size; i++) {\n        if (m.find(words[i].size())\
    \ != m.end()) {\n            if (m[words[i].size()] > words[i].size()) {\n   \
    \             result = words[i];\n            }\n        } else {\n          \
    \  m[words[i].size()] = words[i];\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwotka257.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpwotka257.cpp:16:36: error: no match for \u2018operator>\u2019\
    \ (operand types are \u2018std::map<int, std::__cxx11::basic_string<char> >::mapped_type\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019})\n   16 |             if (m[words[i].size()]\
    \ > words[i].size()) {\nIn file included from /usr/include/c++/9/regex:62,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwotka257.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpwotka257.cpp:16:52:\
    \ note:   \u2018std::map<int, std::__cxx11::basic_string<char> >::mapped_type\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   16 |             if (m[words[i].size()]\
    \ > words[i].size()) {\n      |                                              \
    \      ^\nIn file included from /usr/include/c++/9/regex:62,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n             \
    \    from /tmp/tmpwotka257.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpwotka257.cpp:16:52: note:  "
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string res = \"\";\n    size_t max = 0;\n    for (size_t\
    \ i = 0; i < words.size(); ++i) {\n        int c = std::count_if(words.begin(),\
    \ words.end(),\n            [i = i](const std::string& s) -> bool { return s.find_first_of(i)\
    \ == i; });\n        if (c == words[i].length()) {\n            if (c > max) {\n\
    \                max = c;\n                res = words[i];\n            }\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpy9ut9_w5: /tmp/tmpy9ut9_w5.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    assert(words.size() > 0);\n    std::string biggest(words[0]);\n\
    \    int max_size = words[0].length();\n    for (auto &w : words) {\n        if\
    \ (w.length() > max_size) {\n            biggest = w;\n            max_size =\
    \ w.length();\n        }\n    }\n    return biggest;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpc_arz8d6: /tmp/tmpc_arz8d6.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    int max_word=words.size();\n    std::string\
    \ max_words;\n    int counter=0;\n    for(int i=0;i<words.size();i++){\n     \
    \   for(int j=0;j<words.size();j++){\n            if(max_word<words.size()){\n\
    \                counter=0;\n                for(int k=0;k<words.size();k++){\n\
    \                    if(words[k]==words[i]){\n                        counter++;\n\
    \                    }\n                }\n                if(counter>max_word){\n\
    \                    max_words=words[i];\n                    max_word=counter;\n\
    \                }\n            }\n        }\n    }\n    return max_words;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp33dsil0i: /tmp/tmp33dsil0i.cpp:35: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    unordered_set<char> uni;\n    string\
    \ ans;\n    int max = 0;\n    for (auto &word: words){\n        unordered_set<char>\
    \ uni;\n        for (auto &ch: word)\n            uni.insert(ch);\n        uni.erase('\
    \ ');\n        max = max(max, uni.size());\n    }\n    ans = \"\";\n    for (auto\
    \ &word: words)\n        if (word.size() == max)\n            ans = word;\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkux6xkp.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpbkux6xkp.cpp:12:5: error: \u2018unordered_set\u2019 was not\
    \ declared in this scope\n   12 |     unordered_set<char> uni;\n      |     ^~~~~~~~~~~~~\n\
    /tmp/tmpbkux6xkp.cpp:12:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpbkux6xkp.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note:   \u2018std::unordered_set\u2019\n   97 |     class unordered_set\n  \
    \    |           ^~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpbkux6xkp.cpp:2:\n/usr/include/c++/9/unordered_set:68:13:\
    \ note:   \u2018std::pmr::unordered_set\u2019\n   68 |       using unordered_set\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpbkux6xkp.cpp:12:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   12 |     unordered_set<char>\
    \ uni;\n      |                   ^~~~\n/tmp/tmpbkux6xkp.cpp:13:5: error: \u2018\
    string\u2019 was not declared in this scope\n   13 |     string ans;\n      |\
    \     ^~~~~~\n/tmp/tmpbkux6xkp.cpp:13:5: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbkux6xkp.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include"
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Declare a map to store the max frequency of each word\n   \
    \ std::map<std::string, int> freq;\n    // Declare a vector to store the string\
    \ with maximum number of chars\n    std::vector<std::string> max_word;\n    //\
    \ Loop through the array\n    for (int i = 0; i < words.size(); i++) {\n     \
    \   // If the current word has a higher frequency, save it in the vector\n   \
    \     if (freq.find(words[i]) == freq.end()) {\n            freq[words[i]] = 1;\n\
    \        }\n        else {\n            freq[words[i]]++;\n        }\n    }\n\
    \    // Loop through the map\n    for (auto it = freq.begin(); it != freq.end();\
    \ ++it) {\n        // If the max word has less frequency than the current word,\
    \ save it\n        if (it->second < max_word.size()) max_word.push_back(it->first);\n\
    \    }\n    // If the length of vector is zero, return empty string\n    if (max_word.size()\
    \ == 0) {\n        return \"\";\n    }\n    // Return the max word with max frequency\n\
    \    return max_word[max_word.size() - 1];\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmphr7j2g2a: /tmp/tmphr7j2g2a.cpp:39: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int count = std::count_if(words.begin(), words.end(), [&](const\
    \ std::string & str) {\n        return str.size() <= 10; // replace this with\
    \ your own criteria\n    });\n    if(count > 1) {\n        return std::string(words[words.size()-1]);\n\
    \    }\n    if(count == 1) {\n        return words[words.size()-1];\n    }\n \
    \   return \"\"; // replace this with your own criteria\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmptt83lo9_: /tmp/tmptt83lo9_.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = -1;\n    for(int\
    \ i=0; i<words.size(); ++i) {\n        if(words[i].size() > max_count) {\n   \
    \         max_count = words[i].size();\n            max = words[i];\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpeq0yfs4g: /tmp/tmpeq0yfs4g.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmps865890o: /tmp/tmps865890o.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::sort(words.begin(), words.end(),\
    \ ::compare);\n    int maxUniqueCharCount = 0;\n    int maxIndex = 0;\n    std::string\
    \ maxWord = words[0];\n    for (size_t i = 0; i < words.size(); i++) {\n     \
    \   auto it = std::unique(words[i].begin(), words[i].end());\n        if (it !=\
    \ words[i].end()) {\n            maxUniqueCharCount += static_cast<int>(words[i].size()\
    \ - it);\n            maxIndex = i;\n            maxWord = words[i];\n       \
    \ }\n    }\n    if (maxIndex == 0) {\n        return maxWord;\n    }\n    return\
    \ maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7fj84ct.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpc7fj84ct.cpp:12:45: error: \u2018::compare\u2019 has not\
    \ been declared\n   12 |     std::sort(words.begin(), words.end(), ::compare);\n\
    \      |                                             ^~~~~~~\n/tmp/tmpc7fj84ct.cpp:19:68:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019)\n   19 |             maxUniqueCharCount\
    \ += static_cast<int>(words[i].size() - it);\n      |                        \
    \                            ~~~~~~~~~~~~~~~ ^ ~~\n      |                   \
    \                                              |    |\n      |               \
    \                                                  |    __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\n      |                                \
    \                                 std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc7fj84ct.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpc7fj84ct.cpp:19:70: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::__cxx11::basic_string"
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    int m = std::numeric_limits<int>::min();\n\
    \    int max = 0;\n    int index = 0;\n    for (size_t i = 0; i < words.size();\
    \ ++i) {\n        auto n = words[i].size();\n        if (n > max) {\n        \
    \    max = n;\n            index = i;\n        }\n    }\n    assert(max != std::numeric_limits<int>::min());\n\
    \    assert(max != 0);\n    return words[index];\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp_spvc2xq: /tmp/tmp_spvc2xq.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 1;\n    int index\
    \ = 0;\n    // Loop through all strings\n    for (auto const & word : words) {\n\
    \        // Increase count for given word\n        for (auto const & c : word)\
    \ {\n            count[c]++;\n        }\n\n        // Update max\n        if (count[max]\
    \ >= maxCount) {\n            max = word;\n            maxCount = count[max];\n\
    \        }\n\n        // If max is empty, return empty string\n        if (max.empty())\
    \ {\n            break;\n        }\n\n        // Check all letters of current\
    \ word are already in max word\n        for (auto const & c : word) {\n      \
    \      if (count[c] == maxCount) {\n                break;\n            }\n  \
    \      }\n\n        // Increase index\n        index++;\n    }\n\n    // Return\
    \ max string\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnorjqnmb.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpnorjqnmb.cpp:18:13: error: \u2018count\u2019 was not declared\
    \ in this scope; did you mean \u2018std::count\u2019?\n   18 |             count[c]++;\n\
    \      |             ^~~~~\n      |             std::count\nIn file included from\
    \ /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnorjqnmb.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1:\
    \ note: \u2018std::count\u2019 declared here\n  101 | count(_ExecutionPolicy&&\
    \ __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);\n\
    \      | ^~~~~\n/tmp/tmpnorjqnmb.cpp:22:13: error: \u2018count\u2019 was not declared\
    \ in this scope; did you mean \u2018std::count\u2019?\n   22 |         if (count[max]\
    \ >= maxCount) {\n      |             ^~~~~\n      |             std::count\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpnorjqnmb.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1:\
    \ note: \u2018std::count\u2019 declared here\n  101 | count(_ExecutionPolicy&&\
    \ __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);\n\
    \      | ^~~~~\n/tmp/tmpnorjqnmb.cpp:34:17: error: \u2018count\u2019 was not declared\
    \ in this scope; did you mean \u2018std::count\u2019?\n   34 |             if\
    \ (count[c] == maxCount) {\n      |                 ^~~~~\n      |           \
    \      std::count\nIn file included from /usr/include/c++/9/algorithm:71,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n \
    \                from /tmp/tmpnorjqnmb.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:101:1:\
    \ note: \u2018std::count\u2019 declared here\n  101 | count(_ExecutionPolicy&&\
    \ __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);\n\
    \      | ^~~~~\n"
  stdout: ''
  timestamp: 1660116798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto&\
    \ x : words) {\n        if (x.size() > max_count) {\n            max = x;\n  \
    \          max_count = x.size();\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpwna7mjzu: /tmp/tmpwna7mjzu.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // code here\n  if(words.size() == 0)\n    return \"\";\n  std::string\
    \ largest = words[0];\n  int uniques = 0;\n  for(auto s : words)\n  {\n    for(auto\
    \ c : s)\n    {\n      if(c != largest.back())\n      {\n        uniques++;\n\
    \      }\n    }\n  }\n  if(uniques > words.size())\n    return words[0];\n  else\n\
    \  {\n    for(auto s : words)\n    {\n      if(s.find(largest) != std::string::npos)\n\
    \      {\n        largest = s;\n        break;\n      }\n    }\n    return largest;\n\
    \  }\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpq2mqw3e5: /tmp/tmpq2mqw3e5.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max = 1;\n    for (int i = 0; i\
    \ < n; i++) {\n        int unique = 0;\n        for (int j = 0; j < n; j++) {\n\
    \            if (i != j && words[i] == words[j]) {\n                unique +=\
    \ 1;\n            }\n        }\n        if (unique > max) {\n            max =\
    \ unique;\n        }\n    }\n    if (max == 1) return words[0];\n    std::string\
    \ word = \"\";\n    for (int i = 0; i < n; i++) {\n        word += words[i];\n\
    \        if (i == (n - 1) || words[i + 1] != word) {\n            word += \"a\"\
    ;\n        }\n    }\n    return word;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpah98ceuf: /tmp/tmpah98ceuf.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int maxSize = 0, index = -1;\n  for (int i = 0; i < words.size();\
    \ i++) {\n    int count = 0;\n    for (int j = 0; j < words[i].size(); j++) {\n\
    \      count += 1;\n      if (count > maxSize) {\n        maxSize = count;\n \
    \       index = i;\n      }\n    }\n  }\n  if (maxSize == 0) return \"\";\n  else\
    \ {\n    std::string ret = words[index];\n    int maxCount = 0, maxIndex = 0;\n\
    \    for (int i = 0; i < words.size(); i++) {\n      if (i == index) continue;\n\
    \      int count = 0;\n      for (int j = 0; j < words[i].size(); j++) {\n   \
    \     count += 1;\n        if (count > maxCount) {\n          maxCount = count;\n\
    \          maxIndex = i;\n        }\n      }\n    }\n    return ret;\n  }\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmplz1ltorg: /tmp/tmplz1ltorg.cpp:43: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::vector<std::string> chars;\n    std::vector<std::string>\
    \ max_chars;\n    std::vector<std::string> sorted_words;\n    for (std::string\
    \ word: words) {\n        std::set<char> unique;\n        std::sort(word.begin(),\
    \ word.end());\n        std::set_difference(word.begin(), word.end(), unique.begin(),\
    \ unique.end(), std::back_inserter(sorted_words));\n        std::sort(sorted_words.begin(),\
    \ sorted_words.end());\n    }\n    std::set_intersection(sorted_words.begin(),\
    \ sorted_words.end(), chars.begin(), chars.end(), std::back_inserter(max_chars));\n\
    \    std::string longest;\n    std::sort(max_chars.begin(), max_chars.end());\n\
    \    for (auto i: max_chars) {\n        longest = i;\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpc1q3f6h5.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _InputIterator2\
    \ = std::_Rb_tree_const_iterator<char>; _OutputIterator = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5435:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _IIter2 = std::_Rb_tree_const_iterator<char>; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/tmp/tmpc1q3f6h5.cpp:17:117:   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:16:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019 and \u2018char\u2019)\n 5378 |      *__result = *__first1;\n     \
    \ |      ~~~~~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc1q3f6h5.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:513:7:\
    \ note: candidate: \u2018std::back_insert_iterator<_Container>& std::back_insert_iterator<_Container>::operator=(const\
    \ typename _Container::value_type&) [with _Container = std::vector<std::__cxx11::basic_string<char>\
    \ >; typename _Container::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  513 |       operator=(const typename _Container::value_type& __value)\n  \
    \    | "
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end());\n    std::string result\
    \ = words[0];\n    int len = words.size();\n    for (int i = 1; i < len; i++)\
    \ {\n        if (words[i].size() == result.size()) {\n            if (std::equal(words[i].begin(),\
    \ words[i].end(), result.begin())) {\n                continue;\n            }\n\
    \        }\n        result = words[i];\n    }\n    return words[0] == result ?\
    \ words[0] : \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpj9y2tqab: /tmp/tmpj9y2tqab.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_length = 0;\n    std::string max;\n    for (auto word\
    \ : words) {\n        max_length = std::max(max_length, word.length());\n    \
    \    max = std::max(max, word);\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0k6uw4nj.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp0k6uw4nj.cpp:14:56: error: no matching function for call\
    \ to \u2018max(int&, std::__cxx11::basic_string<char>::size_type)\u2019\n   14\
    \ |         max_length = std::max(max_length, word.length());\n      |       \
    \                                                 ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0k6uw4nj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0k6uw4nj.cpp:14:56: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   14 |         max_length = std::max(max_length, word.length());\n\
    \      |                                                        ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0k6uw4nj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0k6uw4nj.cpp:14:56:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019})\n   14 |         max_length = std::max("
  stdout: ''
  timestamp: 1660116798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::vector<std::string> uniq_chars;\n    std::string max_word\
    \ = words[0];\n    for (size_t i = 0; i < words.size(); i++) {\n        std::string\
    \ curr_word = words[i];\n        int curr_word_size = curr_word.length();\n  \
    \      for (int j = 0; j < curr_word_size; j++) {\n            if (std::find(uniq_chars.begin(),\
    \ uniq_chars.end(), curr_word[j]) ==\n                uniq_chars.end()) {\n  \
    \              uniq_chars.push_back(curr_word[j]);\n            }\n        }\n\
    \        int curr_word_size = curr_word.length();\n        if (curr_word_size\
    \ > max_word.length()) {\n            max_word = curr_word;\n        }\n    }\n\
    \    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm6pzkkqx.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpm6pzkkqx.cpp:19:50: error: no matching function for call\
    \ to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   19 |                 uniq_chars.push_back(curr_word[j]);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm6pzkkqx.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocat"
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    auto max_counter = [&](const std::string\
    \ &word) {\n        std::unordered_map<char, int> m;\n        for (const auto\
    \ &w : word) {\n            m[w]++;\n        }\n        int max = 0;\n       \
    \ for (const auto &kv : m) {\n            if (kv.second > max) {\n           \
    \     max = kv.second;\n            }\n        }\n        return max;\n    };\n\
    \    auto max_word = max_counter(words[0]);\n    for (size_t i = 1; i < words.size();\
    \ i++) {\n        int word_count = max_counter(words[i]);\n        if (word_count\
    \ > max_word) {\n            max_word = word_count;\n        }\n    }\n    return\
    \ max_word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0d4419o1.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp0d4419o1.cpp:32:12: error: could not convert \u2018max_word\u2019\
    \ from \u2018int\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   32 |     return max_word;\n      |            ^~~~~~~~\n      |        \
    \    |\n      |            int\n"
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // Your code goes here\n  std::string word = \"\";\n  int chars\
    \ = 0;\n  for (auto it = words.begin(); it != words.end(); ++it)\n  {\n    chars\
    \ += *it;\n  }\n  if(chars > word.length())\n    word = word;\n  else\n  {\n \
    \   for(auto it = words.begin(); it != words.end(); ++it)\n    {\n      if(it->length()\
    \ > word.length())\n        word = *it;\n    }\n  }\n  return word;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps3rja5ki.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmps3rja5ki.cpp:16:11: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018int\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   16 |     chars += *it;\n      |     ~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max=\"\";\n    std::string\
    \ temp=\"\";\n    std::string maxCount=\"\";\n    for(int i=0;i<words.size();i++){\n\
    \        for(int j=i+1;j<words.size();j++){\n            if(words[i].length()>words[j].length()){\n\
    \                temp = words[i];\n                words[i]=words[j];\n      \
    \          words[j]=temp;\n            }\n            int nChars = words[i].length();\n\
    \            int counts[256];\n            for(int k=0;k<256;k++){\n         \
    \       counts[k]=0;\n            }\n            for(int k=0;k<words[i].length();k++){\n\
    \                counts[words[i].at(k)]+=1;\n            }\n            for(int\
    \ k=0;k<256;k++){\n                if(counts[k]==nChars){\n                  \
    \  maxCount+=words[i].substr(k,1);\n                    break;\n             \
    \   }\n            }\n        }\n        if(maxCount.length()==0){\n         \
    \   max = words[0];\n        }\n        else if(maxCount.length()<words[i].length()){\n\
    \            max = maxCount;\n            maxCount=words[i];\n        }\n    }\n\
    \    if(max.length()==0){\n        max=words[0];\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp6e4i2ys3: /tmp/tmp6e4i2ys3.cpp:52: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_word;\n    int max_word_length = std::numeric_limits<int>::max();\n\
    \    int count_max_word = -1;\n    for (auto word : words) {\n        int length\
    \ = word.length();\n        if (length == max_word_length) {\n            if (count_max_word\
    \ == -1 || length < count_max_word)\n                max_word = word;\n      \
    \      count_max_word = length;\n        }\n        else\n            max_word_length\
    \ = length;\n    }\n    return max_word;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpvhiygi0j: /tmp/tmpvhiygi0j.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end(), std::greater<std::string>());\n\
    \    std::ostringstream oss;\n    oss << words[0];\n    int uniq_char = 0;\n \
    \   for (size_t i = 1; i < words.size(); i++) {\n        if (words[i] < words[i\
    \ - 1]) {\n            oss << words[i];\n        }\n        else {\n         \
    \   if (words[i].size() > uniq_char) {\n                uniq_char = words[i].size();\n\
    \            }\n        }\n    }\n    return oss.str();\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmp1o308brb: /tmp/tmp1o308brb.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max_val = words[0];\n    int max_index = 0;\n    int\
    \ count = 0;\n    for (auto i : words) {\n        if (i != max_val) {\n      \
    \      count++;\n            if (count > max_index) {\n                max_index\
    \ = count;\n                max_val = i;\n            }\n        } else if (i\
    \ == max_val) {\n            count++;\n        }\n    }\n    return max_val;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmphaatt4ap: /tmp/tmphaatt4ap.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  int unique_char = 0;\n  std::string res = \"\";\n  // Write your\
    \ code here\n  for (auto &x : words) {\n    for (auto &y : words) {\n      if\
    \ (x == y) {\n        continue;\n      }\n      for (auto &z : words) {\n    \
    \    if (z == y) {\n          continue;\n        }\n        int x = 0, y = 0,\
    \ z = 0;\n        for (auto &c : words) {\n          if (c == y) {\n         \
    \   x++;\n          }\n          if (c == z) {\n            y++;\n          }\n\
    \          if (c == x) {\n            z++;\n          }\n        }\n        if\
    \ (x == y) {\n          continue;\n        }\n        if (x == z) {\n        \
    \  continue;\n        }\n        if (y == z) {\n          continue;\n        }\n\
    \        if (x == unique_char) {\n          continue;\n        }\n        if (y\
    \ == unique_char) {\n          continue;\n        }\n        if (z == unique_char)\
    \ {\n          continue;\n        }\n        if (x == unique_char) {\n       \
    \   unique_char++;\n          res = x;\n          continue;\n        }\n     \
    \   if (y == unique_char) {\n          unique_char++;\n          res = y;\n  \
    \        continue;\n        }\n        if (z == unique_char) {\n          unique_char++;\n\
    \          res = z;\n          continue;\n        }\n      }\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyqczy3p.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpnyqczy3p.cpp:23:27: error: redeclaration of \u2018int z\u2019\
    \n   23 |         int x = 0, y = 0, z = 0;\n      |                          \
    \ ^\n/tmp/tmpnyqczy3p.cpp:19:18: note: \u2018std::__cxx11::basic_string<char>&\
    \ z\u2019 previously declared here\n   19 |       for (auto &z : words) {\n  \
    \    |                  ^\n/tmp/tmpnyqczy3p.cpp:25:17: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   25 |           if (c == y) {\n      |             \
    \  ~ ^~ ~\n      |               |    |\n      |               |    int\n    \
    \  |               std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnyqczy3p.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnyqczy3p.cpp:25:20:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   25 |           if (c == y) {\n\
    \      |                    ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnyqczy3p.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |    "
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end());\n    int max = 0;\n   \
    \ int index = 0;\n    for (std::size_t i = 0; i < words.size(); i++) {\n     \
    \   int counter = 0;\n        for (int j = 0; j < words[i].size(); j++) {\n  \
    \          counter++;\n        }\n        if (counter > max) {\n            max\
    \ = counter;\n            index = i;\n        }\n    }\n    if (max > 0) {\n \
    \       return words[index];\n    }\n    return \"\";\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpma4aqfyo: /tmp/tmpma4aqfyo.cpp:38: int main(): Assertion `candidate((std::vector<std::string>({"this",
    "is", "a", "prrk"}))) == ("this")'' failed.

    '
  stdout: ''
  timestamp: 1660116800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // code here\n  int max_char = 0;\n  for (int i = 0; i < words.size();\
    \ i++) {\n    int c = 0;\n    for (int j = 0; j < words[i].length(); j++)\n  \
    \    for (int k = 0; k < max_char; k++)\n        if (words[i].at(j) == words[i][k])\n\
    \          c++;\n    if (c == max_char)\n      continue;\n    else if (c > max_char)\n\
    \      max_char = c;\n  }\n  return words[max_char];\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpva8flry_: /tmp/tmpva8flry_.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "of", "string"}))) == ("string")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::sort(words.begin(), words.end());\n    int count = 0;\n \
    \   std::string maxStr;\n    for (int i = 0; i < words.size(); ++i) {\n      \
    \  if (words[i].size() > count) {\n            maxStr = words[i];\n          \
    \  count = words[i].size();\n        }\n    }\n    return maxStr;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpzvpzxcjv: /tmp/tmpzvpzxcjv.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({"this",
    "is", "a", "prrk"}))) == ("this")'' failed.

    '
  stdout: ''
  timestamp: 1660116800
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count[256] = {0};\n    for (auto &word: words) {\n   \
    \     for(auto &c: word) {\n            int count = ++max_count[c];\n        \
    \    if(count > 1) {\n                break;\n            }\n        }\n    }\n\
    \    int max_chars[256] = {0};\n    std::string res = \"\";\n    for (int i =\
    \ 0; i < 256; i++) {\n        if(max_count[i] > 0 && max_chars[max_count[i]-1]\
    \ == 0) {\n            max_chars[max_count[i]-1] = i;\n        }\n        if(max_count[i]\
    \ > 1) {\n            break;\n        }\n    }\n    for(auto &word: words) {\n\
    \        for(auto &c: word) {\n            int count = ++max_count[c];\n     \
    \       if(count == max_count[i]) {\n                if(c == max_chars[max_count[i]-1])\
    \ {\n                    res += c;\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupo3lumu.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpupo3lumu.cpp:33:35: error: \u2018i\u2019 was not declared\
    \ in this scope\n   33 |             if(count == max_count[i]) {\n      |    \
    \                               ^\n"
  stdout: ''
  timestamp: 1660116799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::map<char, size_t> count;\n    for (auto &word : words) {\n\
    \        auto key = word.front();\n        auto val = count.find(key);\n     \
    \   if (val == count.end())\n            count[key] = word.size();\n        else\n\
    \            count[key] = val->second + word.size();\n    }\n    return count.rbegin()->first;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph0jinbs.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpph0jinbs.cpp:20:28: error: could not convert \u2018std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::rbegin() [with _Key = char; _Tp = long unsigned int;\
    \ _Compare = std::less<char>; _Alloc = std::allocator<std::pair<const char, long\
    \ unsigned int> >; std::map<_Key, _Tp, _Compare, _Alloc>::reverse_iterator = std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const\
    \ char, long unsigned int> > >]().std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const\
    \ char, long unsigned int> > >::operator->()->std::pair<const char, long unsigned\
    \ int>::first\u2019 from \u2018const char\u2019 to \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019}\n   20 |     return count.rbegin()->first;\n\
    \      |            ~~~~~~~~~~~~~~~~^~~~~\n      |                           \
    \ |\n      |                            const char\n"
  stdout: ''
  timestamp: 1660116799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n  // code here\n  std::string max;\n  max = \"\";\n  int cnt = 0;\n\
    \  for (int i = 0; i < words.size(); ++i) {\n    if (words[i].size() > cnt) {\n\
    \      max = words[i];\n      cnt = words[i].size();\n    }\n  }\n  return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  status: Exception
  stderr: 'tmpgzf7ezx_: /tmp/tmpgzf7ezx_.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"name",
    "enam", "game"}))) == ("enam")'' failed.

    '
  stdout: ''
  timestamp: 1660116799
