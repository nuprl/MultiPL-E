name: HumanEval_17_parse_music
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string representing musical notes in a special ASCII format.\n// Your task is\
  \ to parse this string and return list of integers corresponding to how many beats\
  \ does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four\
  \ beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one\
  \ beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2,\
  \ 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
  \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({4,\
  \ 4, 4, 4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({1,\
  \ 1, 1, 1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({2,\
  \ 2, 1, 1, 4, 4, 4, 4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
  \ (std::vector<long>({2, 1, 2, 1, 4, 2, 4, 2})));\n}\n"
completions: ["    std::vector<long> result(music_string.size());\n    for (size_t\
    \ i = 0; i < music_string.size(); ++i) {\n        // Check if it's a note or not.\n\
    \        if (music_string[i] == 'o' || music_string[i] == 'O') {\n           \
    \ // If it is, determine it's beat length.\n            auto beat_length = music_string[++i];\n\
    \            if (beat_length == '|') {\n                result[i] = 4;\n     \
    \       } else {\n                result[i] = beat_length;\n            }\n  \
    \      } else {\n            // If not, return 0.\n            result[i] = 0;\n\
    \        }\n    }\n    return result;", "    std::vector<long> beats(music_string.size());\n\
    \    std::string temp_string(music_string);\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        // check for separator\n        if (temp_string[i] == '|') temp_string.remove(i,\
    \ 1);\n        // check for o\n        else if (temp_string[i] == 'o') temp_string.remove(i,\
    \ 1);\n        // check for empty string\n        else if (temp_string[i] == '\
    \ ') temp_string.remove(i, 1);\n        // check for first time we have beats\n\
    \        else if (beats[i] != 0) break;\n        // check for last note\n    \
    \    else if (temp_string[i - 1] == '|') {\n            beats[i] = 4;\n      \
    \      temp_string.remove(i, 1);\n            // check for second last note\n\
    \        } else if (temp_string[i - 1] == '.') {\n            beats[i] = 2;\n\
    \            temp_string.remove(i, 1);\n            // check for thirdlast note\n\
    \        } else if (temp_string[i - 1] == 'o') {\n            beats[i] = 1;\n\
    \            temp_string.remove(i, 1);\n        }\n    }\n    return beats;",
  "    std::vector<long> beats;\n    size_t beat_number = 0;\n    size_t note_length\
    \ = 0;\n    std::string note;\n\n    // Iterate over all notes\n    for (size_t\
    \ i = 0; i < music_string.size(); i++) {\n        note = music_string.substr(i,\
    \ 1);\n\n        // If this note is \"o\" or \"o|\" we know it's whole note\n\
    \        if (note == \"o\" || note == \"o|\") {\n            note_length = 4;\n\
    \        }\n        // If this note is \".|\" we know it's quater note\n     \
    \   else if (note == \".|\") {\n            note_length = 2;\n        }\n    \
    \    // If this note isn't \"o\" or \"o|\" nor \".|\" it means that it lasts some\
    \ beats\n        else {\n            note_length = i - beat_number;\n        \
    \    beats.push_back(note_length);\n            beat_number = i;\n        }\n\
    \    }\n\n    // If music doesn't end with beat we can simply return number of\
    \ beats instead of empty list\n    if (music_string.size() - beat_number < beats.size())\
    \ {\n        beats.resize(music_string.size() - beat_number);\n    }\n\n    return\
    \ beats;", "  std::vector<long> result;\n  int notes_len = 4;\n  int last_beats\
    \ = 0;\n  for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == 'o') {\n      last_beats += notes_len;\n      notes_len = 1;\n    } else\
    \ {\n      last_beats += 1;\n      if (last_beats > 4) {\n        last_beats -=\
    \ 4;\n        notes_len += 2;\n      }\n    }\n    result.push_back(last_beats);\n\
    \  }\n  return result;", "    std::vector<long> beats;\n\n    long current_beat\
    \ = 1;\n    bool is_next_note = false;\n\n    for (char c: music_string) {\n \
    \       // If next character is a space, add it to the vector\n        if (std::isspace(c))\
    \ {\n            beats.push_back(current_beat);\n            is_next_note = false;\n\
    \            current_beat = 1;\n        }\n        // If next character is a 'o'\
    \ or 'o|', increase current beat by 1, add it to the vector\n        else if (c\
    \ == 'o' || c == 'o|') {\n            beats.push_back(current_beat);\n       \
    \     is_next_note = true;\n            current_beat = 1;\n        }\n       \
    \ // If next character is a '.|', decrease current beat by 1, add it to the vector\n\
    \        else if (c == '.|') {\n            current_beat = current_beat - 1;\n\
    \            beats.push_back(current_beat);\n            is_next_note = false;\n\
    \        }\n        // If next character is not a space or 'o' or 'o|' or '|'\
    \ or '|', add it to the vector\n        else {\n            beats.push_back(current_beat);\n\
    \            is_next_note = false;\n            current_beat = 1;\n        }\n\
    \    }\n\n    return beats;", "    std::vector<long> beats(0);\n    std::string\
    \ last_note(\"\");\n    std::string current_note(\"\");\n    for(char &c : music_string)\
    \ {\n        switch (c) {\n            case 'o':\n                beats.push_back(4);\
    \ // whole note, lasts 4 beats\n                break;\n            case 'o|':\n\
    \                beats.push_back(2); // half note, lasts 2 beats\n           \
    \     break;\n            case '.|':\n                beats.push_back(1); // quater\
    \ note, lasts one beat\n                break;\n            default:\n       \
    \         beats.push_back(0); // rest beats\n                break;\n        }\n\
    \        if (c != '.') {\n            current_note += c;\n        }\n        else\
    \ { // '.' ends current note\n            last_note = current_note;\n        \
    \    current_note = \"\";\n            beats.push_back(1); // end of last note\n\
    \        }\n    }\n    // add 1 at the end because it will be appended to the\
    \ end of beats\n    beats.push_back(1);\n    return beats;", "    std::map<char,\
    \ int> notes_map;\n    std::string notes_split;\n    std::vector<long> beats;\n\
    \    long beats_sum = 0;\n    for (char c : music_string) {\n        notes_map[c]++;\n\
    \    }\n    for (char c : notes_map) {\n        notes_split += c;\n    }\n   \
    \ for (char c : notes_split) {\n        if (c == 'o') {\n            beats_sum\
    \ += 4;\n        } else if (c == '|') {\n            beats_sum += 2;\n       \
    \ } else if (c == '.') {\n            beats_sum++;\n        }\n    }\n    for\
    \ (char c : notes_map) {\n        beats_sum -= c;\n    }\n    return beats;",
  "    // Your code here\n    std::vector<long> beats;\n    // For each character\
    \ in the string, add that character to a vector\n    for(size_t i = 0; i < music_string.size();\
    \ i++)\n        beats.push_back(music_string[i]);\n    // If there are only two\
    \ characters (i.e. 'o'), then the note is whole\n    // If there are two '|' characters,\
    \ then it's a half\n    // If there are three '|' characters, then it's a quater\
    \ note\n    // Otherwise, the note is a whole\n    if(beats.size() == 2) beats.push_back(1);\n\
    \    if(beats.size() == 3) beats.push_back(4);\n    else if(beats.size() == 4)\
    \ beats.push_back(2);\n    return beats;", "    std::vector<long> beats;\n   \
    \ // TODO: implement me\n    return beats;", "    std::vector<long> note_beats;\n\
    \    long temp_beats = 0;\n    for (char c : music_string) {\n        if (c ==\
    \ 'o') {\n            note_beats.push_back(temp_beats);\n            temp_beats\
    \ = 0;\n        }\n        else if (c == '.') {\n            temp_beats += 1;\n\
    \        }\n        else if (c == '|') {\n            note_beats.push_back(temp_beats);\n\
    \            temp_beats = 0;\n        }\n        else {\n            temp_beats\
    \ += 1;\n        }\n    }\n    note_beats.push_back(temp_beats);\n    return note_beats;",
  "    std::vector<long> notes_beats;\n    // Implement parse_music here\n    return\
    \ notes_beats;", "    std::vector<long> beats;\n\n    for (char character : music_string)\
    \ {\n        if (character == '.') {\n            beats.push_back(0);\n      \
    \  } else {\n            beats.push_back(beats.size());\n        }\n    }\n\n\
    \    return beats;", "    std::vector<long> beats(8);\n    beats[0] = 0;\n   \
    \ for (size_t i = 0; i < music_string.size(); i += 2) {\n        if (music_string[i]\
    \ == '.') {\n            beats[std::stoi(music_string.substr(i + 1, 2)) / 4] +=\n\
    \                std::stoi(music_string.substr(i, 2)) - std::stoi(music_string.substr(i\
    \ + 1, 2)) / 2;\n        } else {\n            beats[std::stoi(music_string.substr(i\
    \ + 1, 2)) / 4] += std::stoi(music_string.substr(i, 2));\n        }\n    }\n \
    \   return beats;", '    // Your code here', "    std::vector<long> beats_vector;\n\
    \    std::string notes;\n    std::string current_note;\n    std::string current_note_end;\n\
    \    // Parse all notes at once\n    for (const auto& note : music_string) {\n\
    \        current_note = \"\";\n        notes += note;\n        while (notes.size()\
    \ != 0) {\n            std::string current_note_end = notes.substr(notes.find_first_not_of(\"\
    \ |\"));\n            if (notes.size() != 0) {\n                current_note +=\
    \ notes.substr(0, notes.find_first_not_of(\" |\")); // Move current note and move\
    \ to the end\n                notes = notes.substr(notes.find_first_not_of(\"\
    \ |\")); // Remove current note\n            } else {\n                current_note\
    \ += notes.substr(0, notes.find_first_of(\" |\")); // Move current note and move\
    \ to the end\n                notes = notes.substr(notes.find_first_of(\" |\"\
    ));  // Remove current note\n            }\n            switch (notes[0]) {\n\
    \                case 'o': // whole note\n                    if (current_note_end\
    \ == \"|\") {\n                        beats_vector.push_back(4); // Add 4 beats\n\
    \                        beats_vector.push_back(4);\n                        beats_vector.push_back(2);\n\
    \                        break;\n                    } else {\n              \
    \          beats_vector.push_back(4); // Add 4 beats\n                       \
    \ break;\n                    }\n                case 'o|': // half note\n   \
    \                 if (current_note_end == \"|\") {\n                        beats_vector.push_back(4);\
    \ // Add 4 beats\n                        beats_vector.push_back(2);\n       \
    \                 break;\n                    } else {\n                     \
    \   beats_vector.push_back(4); // Add 4 beats\n                        beats_vector.push_back(2);\n\
    \                        beats_vector.push_back(1);\n                        break;\n\
    \                    }\n                case '.|': // quarter note\n         \
    \           if (current_note_end == \"|\") {\n                        beats_vector.push_back(1);\n\
    \                        break;\n                    } else {\n              \
    \          beats_vector.push_back(1);\n                        beats_vector.push_back(1);\n\
    \                        beats_vector.push_back(1);\n                        break;\n\
    \                    }\n                default:\n                    break;\n\
    \            }\n        }\n    }\n    return beats_vector;", "    std::vector<long>\
    \ beats;\n\n    long note = 0;\n    long last_beat = 0;\n    long current_beat\
    \ = 0;\n\n    std::string curr_char;\n\n    long beat_counter = 0;\n\n    for\
    \ (int i = 0; i < music_string.size(); ++i) {\n        curr_char = music_string[i];\n\
    \        switch (curr_char) {\n        case 'o':\n            note = note + 4;\n\
    \            beat_counter += 4;\n            break;\n        case 'o|':\n    \
    \        note = note + 2;\n            beat_counter += 2;\n            break;\n\
    \        case '.|':\n            note = note + 1;\n            beat_counter +=\
    \ 1;\n            break;\n        default:\n            assert(0);\n        }\n\
    \n        beats.push_back(beat_counter);\n\n        if (last_beat == note) {\n\
    \            current_beat += beat_counter;\n            beat_counter = 1;\n  \
    \      } else {\n            current_beat = 1;\n            last_beat = note;\n\
    \        }\n    }\n\n    return beats;", "    if (music_string == \"o\") {\n \
    \       return std::vector<long>(4, 0);\n    }\n    if (music_string == \"o|\"\
    ) {\n        return std::vector<long>(2, 0);\n    }\n    if (music_string == \"\
    .|\") {\n        return std::vector<long>(1, 0);\n    }\n    // ...", "    //\
    \ This map is used to determine how many beats each note lasts.\n    std::map<char,\
    \ long> map_note_to_beats;\n    // This string will hold notes separated by whitespace\
    \ characters.\n    std::string notes;\n    // This string will hold note names\
    \ separated by whitespace characters.\n    std::string note_names;\n    // This\
    \ map will store how many beats each note lasts.\n    std::map<char, long> beats;\n\
    \    // This map will store how many beats each note lasts.\n    std::map<char,\
    \ long> beats_temp;\n    // This map will store how many beats each note lasts.\n\
    \    std::map<char, long> beats_temp2;\n    // This map will store how many beats\
    \ each note lasts.\n    std::map<char, long> beats_temp3;\n    // This map will\
    \ store how many beats each note lasts.\n    std::map<char, long> beats_temp4;\n\
    \    // This map will store how many beats each note lasts.\n    std::map<char,\
    \ long> beats_temp5;\n    // This map will store how many beats each note lasts.\n\
    \    std::map<char, long> beats_temp6;\n    // This map will store how many beats\
    \ each note lasts.\n    std::map<char, long> beats_temp7;\n    // This map will\
    \ store how many beats each note lasts.\n    std::map<char, long> beats_temp8;\n\
    \    // This map will store how many beats each note lasts.\n    std::map<char,\
    \ long> beats_temp9;\n    // This map will store how many beats each note lasts.\n\
    \    std::map<char, long> beats_temp10;\n    // This map will store how many beats\
    \ each note lasts.\n    std::map<char, long> beats_temp11;\n    // This map will\
    \ store how many beats each note lasts.\n    std::map<char, long> beats_temp12;\n\
    \    // This map will store how many beats each note lasts.\n    std::map<char,\
    \ long> beats_temp13;\n    // This map will store how many beats each note lasts.\n\
    \    std::map<char, long> beats_temp14;\n    // This map will store how many beats\
    \ each note lasts.\n    std::map<char, long> beats_temp15;\n    // This map will\
    \ store how many beats each note lasts.\n    std::map<char, long> beats_temp16;\n\
    \    // This map will store how many beats each note lasts.\n    std::map<char,\
    \ long> beats_temp17;\n    // This map will store how many beats each note lasts.\n\
    \    std::map<char, long> beats_temp18;\n    // This map will store how many beats\
    \ each note lasts.\n    std::map<char, ", "    std::vector<long> beats;\n    std::string\
    \ first_note = music_string;\n    std::string current_note = first_note;\n   \
    \ long beat_count = 1;\n    while (0 == 0) {\n        bool is_current_note_valid\
    \ = (current_note.size() == 1) ? true : false;\n        if (current_note.size()\
    \ > 2) {\n            is_current_note_valid = false;\n        }\n        if (current_note.size()\
    \ == 1) {\n            is_current_note_valid = true;\n        }\n        std::string\
    \ next_note = current_note.substr(2);\n        std::string last_note = next_note.substr(0,\
    \ 1);\n        beat_count = current_note.size() / 2;\n        if (is_current_note_valid)\
    \ {\n            beats.push_back(beat_count);\n            current_note = next_note;\n\
    \        } else {\n            beats.push_back(0);\n            current_note =\
    \ last_note;\n        }\n    }\n    return beats;", "  std::vector<long> beats;\n\
    \  std::string note;\n  // Beats counter.\n  int beat_counter = 1;\n  // Current\
    \ note is parsed from the music string.\n  note = music_string;\n  // Parse next\
    \ note from the string.\n  for (int i = 0; i < note.length(); ++i) {\n    // If\
    \ note is parsed, add it beat to the beat list.\n    if (note[i] == 'o' || note[i]\
    \ == '.') {\n      if (beat_counter < 4)\n        beats.push_back(beat_counter);\n\
    \      // Reset current beat and note to be parsed from the string.\n      beat_counter\
    \ = 1;\n      note.erase(i, 1);\n    }\n    else if (note[i] == '|') {\n     \
    \ if (beat_counter < 2)\n        beats.push_back(beat_counter);\n      beat_counter\
    \ = 1;\n      note.erase(i, 1);\n    }\n    else {\n      beat_counter++;\n  \
    \  }\n  }\n  if (beat_counter < 4)\n    beats.push_back(beat_counter);\n  return\
    \ beats;", '    // Your code goes here', "    std::vector<long> beats(music_string.size());\n\
    \    long beat = 0;\n    for (char symbol : music_string) {\n        if (symbol\
    \ == '.') {\n            beat = 0;\n        } else {\n            beat += 1;\n\
    \            beats[beat] = beat;\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ beats;\n    std::string token;\n    std::string::size_type pos;\n    std::string::size_type\
    \ start_pos = 0;\n    std::string::size_type end_pos;\n    std::string::size_type\
    \ prev_end_pos;\n    bool last_note = false;\n    // Iterate through the string\n\
    \    pos = 0;\n    for (;;) {\n        // Find next token\n        while (pos\
    \ < music_string.size() && music_string[pos] == ' ') {\n            ++pos;\n \
    \       }\n        token = music_string.substr(start_pos, pos - start_pos);\n\
    \        // Check if it's last note or not\n        last_note = (token == \"o\"\
    \ || token == \"o|\" || token == \".|\");\n        // Update position\n      \
    \  if (last_note) {\n            end_pos = pos;\n        } else {\n          \
    \  pos = pos + 1;\n        }\n        // Check if we are at end\n        if (pos\
    \ >= music_string.size()) {\n            break;\n        }\n        // Move position\n\
    \        start_pos = pos;\n        // Find the next space\n        while (pos\
    \ < music_string.size() && music_string[pos] == ' ') {\n            ++pos;\n \
    \       }\n        // Check if we are in \"o\" note\n        if (music_string[pos]\
    \ == 'o') {\n            if (music_string[pos + 1] == '|') {\n               \
    \ beats.push_back(4);\n                ++pos;\n            } else {\n        \
    \        beats.push_back(2);\n                ++pos;\n            }\n        }\
    \ else if (music_string[pos] == '.') {\n            beats.push_back(1);\n    \
    \        ++pos;\n        } else {\n            assert(0);\n        }\n       \
    \ // Check if we are in \"o|\" note\n        if (music_string[pos] == 'o|') {\n\
    \            beats.push_back(2);\n            ++pos;\n        } else {\n     \
    \       assert(0);\n        }\n        // Check if we are in \".|\" note\n   \
    \     if (music_string[pos] == '.|') {\n            beats.push_back(1);\n    \
    \        ++pos;\n        } else {\n            assert(0);\n        }\n    }\n\
    \    return beats;", "    assert(music_string.size() >= 4);\n    std::vector<long>\
    \ music;\n    std::string note_letters = music_string.substr(0, music_string.length()\
    \ - 4);\n    int note_count = 0;\n    for (char c : note_letters) {\n        if\
    \ (c == 'o') {\n            note_count++;\n        }\n        else if (c == '|')\
    \ {\n            note_count++;\n            if (note_count == 2) {\n         \
    \       music.push_back(4);\n                note_count = 0;\n            }\n\
    \        }\n        else if (c == '.') {\n            if (note_count > 0) {\n\
    \                music.push_back(1);\n                note_count = 0;\n      \
    \      }\n        }\n    }\n    if (note_count > 0) {\n        music.push_back(note_count);\n\
    \    }\n    return music;", "\tassert(music_string);\n\tstd::vector<long> music_vector;\n\
    \tsize_t beats_counter = 0;\n\tsize_t last_note = music_string[0];\n\tfor (int\
    \ i = 1; i < music_string.size(); ++i) {\n\t\tchar c = music_string[i];\n\t\t\
    if (c == '|') {\n\t\t\t++beats_counter;\n\t\t\tif (last_note == 'o' && beats_counter\
    \ >= 4) {\n\t\t\t\tmusic_vector.push_back(0);\n\t\t\t\tbeats_counter = 0;\n\t\t\
    \t} else if (last_note == '.' && beats_counter >= 2) {\n\t\t\t\tmusic_vector.push_back(4);\n\
    \t\t\t\tbeats_counter = 0;\n\t\t\t} else if (last_note == 'o' && beats_counter\
    \ >= 1) {\n\t\t\t\tmusic_vector.push_back(0);\n\t\t\t\tbeats_counter = 0;\n\t\t\
    \t} else if (last_note == '.') {\n\t\t\t\tmusic_vector.push_back(2);\n\t\t\t\t\
    beats_counter = 0;\n\t\t\t}\n\t\t} else if (c == last_note) {\n\t\t\t++beats_counter;\n\
    \t\t} else if (c == 'o') {\n\t\t\tmusic_vector.push_back(0);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(2);\n\t\t\tmusic_vector.push_back(2);\n\t\t\tmusic_vector.push_back(1);\n\
    \t\t\tmusic_vector.push_back(1);\n\t\t\tmusic_vector.push_back(1);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\t\t\tmusic_vector.push_back(4);\n\
    \t\t\tmusi", "    // YOUR CODE HERE\n    return std::vector<long>();", "  assert(music_string[0]\
    \ == 'o' && music_string[1] == 'o' && music_string[2] == '|' && music_string[3]\
    \ == '|' && music_string[4] == '|' && music_string[5] == '|' && music_string[6]\
    \ == '|' && music_string[7] == '|' && music_string[8] == '|' && music_string[9]\
    \ == '|' && music_string[10] == '|' && music_string[11] == '|' && music_string[12]\
    \ == '|' && music_string[13] == 'o');\n  std::vector<long> beats;\n  for (auto\
    \ it = music_string.cbegin(), it_end = music_string.cend(); it != it_end; it++)\
    \ {\n    if (*it == 'o') {\n      beats.push_back(4u);\n    } else if (*it ==\
    \ 'o') {\n      beats.push_back(4u);\n    } else if (*it == 'o') {\n      beats.push_back(4u);\n\
    \    } else if (*it == '.') {\n      beats.push_back(1u);\n    } else if (*it\
    \ == '.') {\n      beats.push_back(2u);\n    } else if (*it == '.') {\n      beats.push_back(2u);\n\
    \    } else if (*it == '.') {\n      beats.push_back(1u);\n    } else if (*it\
    \ == '.') {\n      beats.push_back(1u);\n    } else if (*it == 'o') {\n      beats.push_back(4u);\n\
    \    } else if (*it == 'o') {\n      beats.push_back(4u);\n    } else if (*it\
    \ == 'o') {\n      beats.push_back(4u);\n    } else if (*it == '.') {\n      beats.push_back(1u);\n\
    \    } else if (*it == '.') {\n      beats.push_back(2u);\n    } else if (*it\
    \ == '.') {\n      beats.push_back(2u);\n    } else if (*it == '.') {\n      beats.push_back(1u);\n\
    \    } else if (*it == '.') {\n      beats.push_back(1u);\n    } else {\n    \
    \  beats.push_back(1u);\n    }\n  }\n  return beats;", "  std::vector<long> beats_count;\n\
    \  std::string current_note, previous_note;\n  long current_beat_count;\n  beats_count.push_back(0);\n\
    \  // If music string is not valid return empty vector.\n  if (music_string.length()\
    \ < 1 || music_string[0] != 'o') {\n    return beats_count;\n  }\n\n  for (auto\
    \ char : music_string) {\n    switch (char) {\n      case 'o':\n        // If\
    \ current note is not the previous note.\n        // Add previous note beat count\
    \ to beat count list.\n        if (previous_note.empty()) {\n          current_beat_count\
    \ = 0;\n        } else {\n          current_beat_count = (beats_count.at(beats_count.size()\
    \ - 1) + 1) % 4;\n        }\n        previous_note = current_note;\n        current_note\
    \ = char;\n        beats_count.push_back(current_beat_count);\n        break;\n\
    \n      case '|':\n        // If current note is the previous note\n        //\
    \ Add previous note beat count to beat count list.\n        if (previous_note.empty())\
    \ {\n          current_beat_count = (beats_count.at(beats_count.size() - 1) +\
    \ 1) % 2;\n        } else {\n          current_beat_count = (beats_count.at(beats_count.size()\
    \ - 1) + 1) % 4;\n        }\n        previous_note = current_note;\n        current_note\
    \ = char;\n        beats_count.push_back(current_beat_count);\n        break;\n\
    \n      case ' ':\n        // If current note is the previous note\n        //\
    \ Add previous note beat count to beat count list.\n        if (previous_note.empty())\
    \ {\n          current_beat_count = beats_count.at(beats_count.size() - 1) + 1;\n\
    \        } else {\n          current_beat_count = (beats_count.at(beats_count.size()\
    \ - 1) + 1) % 4;\n        }\n        previous_note = current_note;\n        current_note\
    \ = char;\n        beats_count.push_back(current_beat_count);\n        break;\n\
    \    }\n  }\n  return beats_count;", "    // Your code here\n    std::vector<long>\
    \ beats;\n    long last_note = 0;\n    for (char c : music_string) {\n       \
    \ if (last_note != 0) {\n            beats.push_back(last_note);\n           \
    \ last_note = 0;\n        }\n        if (c == '.') {\n            last_note =\
    \ 0;\n        }\n        else if (c == '|') {\n            last_note = 1;\n  \
    \      }\n        else if (c == 'o') {\n            last_note = 4;\n        }\n\
    \    }\n    beats.push_back(last_note);\n    return beats;", "    assert(music_string.length()\
    \ % 8 == 0);\n    assert(music_string.length() % 4 == 0);\n    std::vector<long>\
    \ beats(music_string.length() / 4);\n    for (long i = 0; i < beats.size(); i++)\
    \ {\n        long beat = 0;\n        for (size_t j = 0; j < 4; j++) {\n      \
    \      if (music_string[(i * 8) + j] != '|') beat += 1;\n            beats[i]\
    \ = beats[i] || beat;\n        }\n    }\n    return beats;", "    std::vector<std::string>\
    \ notes;\n    std::vector<long> beats;\n    std::vector<std::string> tokens =\
    \ split_string(music_string, \" \");\n    long notes_count = 0, beats_count =\
    \ 0, length = tokens.size();\n    bool is_note = true;\n\n    for (int i = 0;\
    \ i < tokens.size(); ++i) {\n        if (tokens[i] == \"o\") {\n            notes_count\
    \ = 4 * notes_count;\n            is_note = !is_note;\n        } else if (tokens[i]\
    \ == \"o|\") {\n            notes_count = 2 * notes_count;\n            is_note\
    \ = !is_note;\n        } else if (tokens[i] == \".|\") {\n            notes_count\
    \ = 1;\n            is_note = !is_note;\n        } else {\n            notes_count\
    \ = 1;\n            is_note = !is_note;\n        }\n    }\n    if (notes_count\
    \ % 4 != 0)\n        return std::vector<long>();\n    for (int i = 0; i < tokens.size();\
    \ ++i) {\n        if (tokens[i] == \"o\") {\n            beats.push_back(notes_count);\n\
    \            notes_count = 4 * notes_count;\n        } else if (tokens[i] == \"\
    o|\") {\n            beats.push_back(notes_count);\n            notes_count =\
    \ 2 * notes_count;\n        } else if (tokens[i] == \".|\") {\n            beats.push_back(notes_count);\n\
    \            notes_count = 1;\n        }\n        beats_count += notes_count;\n\
    \    }\n    return beats;", "    std::vector<long> vec;\n    long total_beats\
    \ = 0;\n    // Use a map to map each note to a counter\n    std::map<char, long>\
    \ note_to_beats;\n    for (char c : music_string) {\n        note_to_beats[c]\
    \ += total_beats++;\n    }\n\n    // For each note, add its length to the map\
    \ and increment the counter\n    for (auto &note_to_beats_iterator : note_to_beats)\
    \ {\n        note_to_beats_iterator.second += note_to_beats_iterator.first.length();\n\
    \    }\n\n    return vec;", "    std::map<char, long> notes;\n    std::vector<long>\
    \ beats;\n    for (auto c: music_string) {\n        switch (c) {\n           \
    \ case 'o':\n            case 'O':\n                notes[c] = 4;\n          \
    \      break;\n            case '|':\n            case '|/':\n               \
    \ notes[c] = 2;\n                break;\n            case '.':\n            case\
    \ '..':\n            case '...':\n            case '..|':\n                notes[c]\
    \ = 1;\n                break;\n            default:\n                throw std::runtime_error(\"\
    Invalid note found\");\n        }\n    }\n    for (const auto& n : notes) {\n\
    \        beats.push_back(n);\n    }\n    return beats;", "\tstd::vector<long>\
    \ beats;\n\n\t// We have to check if music_string has notes.\n\t// If not, we\
    \ return empty vector.\n\tassert(music_string.length() > 0);\n\n\tfor (int i =\
    \ 0; i < music_string.length(); i++) {\n\t\tchar character = music_string[i];\n\
    \t\tbool is_whole_note = false;\n\n\t\t// In case if character is '.' then we\
    \ mark it to be a note with only two beats.\n\t\tif (character == '.') {\n\t\t\
    \tis_whole_note = true;\n\t\t\ti++;\n\t\t}\n\n\t\tfor (int j = 0; j < i; j++)\
    \ {\n\t\t\tchar next_character = music_string[j];\n\n\t\t\t// In case if next\
    \ character is ' ' then we set it to beat of the whole note.\n\t\t\tif (next_character\
    \ == ' ') {\n\t\t\t\tis_whole_note = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\
    \t\tif (is_whole_note) {\n\t\t\tbeats.push_back(4); //4 beats\n\t\t} else {\n\t\
    \t\t// In case if character is not '.' and character is not ' ' then we check\
    \ if this character is a '.' or ',',\n\t\t\t// if it is a '.' then we set beat\
    \ of the next note to the beat of the whole note\n\t\t\tif ((character != '.'\
    \ && character != ',') || (character == '.' && next_character != ' ')) {\n\t\t\
    \t\tbeats.push_back(4); //4 beats\n\t\t\t} else if (character == ',' || character\
    \ == '.') {\n\t\t\t\tbeats.push_back(1); //1 beat\n\t\t\t}\n\t\t}\n\t}\n\n\treturn\
    \ beats;", "    std::vector<long> returns;\n    for (char &c: music_string)\n\
    \        if (c == 'o' || c == '|' || c == '.')\n            returns.push_back(1);\n\
    \        else\n            returns.push_back(0);\n    return returns;", "    std::vector<long>\
    \ beats;\n    std::size_t pos = 0;\n    std::string note_letter;\n    char note;\n\
    \    long beat;\n    while (pos < music_string.size()) {\n        note_letter\
    \ = music_string.substr(pos, 1);\n        pos = pos + 1;\n        note = note_letter.at(0);\n\
    \        beat = 0;\n        if (note == 'o') {\n            beat = 4;\n      \
    \  } else if (note == '|') {\n            beat = 2;\n        } else if (note ==\
    \ '.') {\n            beat = 1;\n        }\n        beats.push_back(beat);\n \
    \   }\n    return beats;", "    std::vector<long> music(music_string.size() /\
    \ 2);\n    for (long i = 0; i < music_string.size() / 2; i++) {\n        if (music_string[i]\
    \ == 'o') {\n            music[i] = 4;\n        } else if (music_string[i] ==\
    \ '|') {\n            music[i] = 2;\n        } else if (music_string[i] == '.')\
    \ {\n            music[i] = 1;\n        } else {\n            music[i] = 4;\n\
    \        }\n    }\n    return music;", "    std::list<long> res; //store beats\
    \ count\n    // your code\n    return 0;", "  std::vector<long> music_beats;\n\
    \n  if (music_string.size() == 0) {\n    return music_beats;\n  }\n  int music_length\
    \ = music_string.size();\n\n  // Ommit '.' for empty note.\n  if (music_string[0]\
    \ == '.') {\n    music_beats.push_back(4);\n    music_string.erase(music_string.begin());\n\
    \  }\n\n  while (music_length != 0) {\n    // If current note is not empty, its\
    \ length will be stored in 'om_length'.\n    if (music_string[0] != ' ') {\n \
    \     int om_length = music_string[0] - '0';\n\n      // Ommit '0' if it is last\
    \ note.\n      if (om_length == 0)\n        om_length = 1;\n\n      // Ommit '0'\
    \ if it is first note.\n      if (om_length == 1)\n        om_length = 0;\n\n\
    \      music_beats.push_back(om_length);\n      music_string.erase(music_string.begin());\n\
    \    } else {\n      // If current note is not empty, its length will be stored\
    \ in 'mid_length'.\n      int mid_length = music_string[1] - '0';\n\n      //\
    \ Ommit '0' if it is last note.\n      if (mid_length == 0)\n        mid_length\
    \ = 1;\n\n      // Ommit '0' if it is first note.\n      if (mid_length == 1)\n\
    \        mid_length = 0;\n\n      music_beats.push_back(mid_length);\n      music_string.erase(music_string.begin());\n\
    \    }\n\n    if (music_string.size() == 0)\n      break;\n  }\n\n  // Erase empty\
    \ notes.\n  while (music_string[0] == ' ') {\n    music_beats.push_back(4);\n\
    \    music_string.erase(music_string.begin());\n  }\n\n  return music_beats;",
  "    std::vector<long> beats;\n    // We read each character separately.\n    //\
    \ We know that first character is always an 'o' or 'o|'.\n    // We keep track\
    \ of how many beats are already done with this note.\n    std::string note = music_string.substr(0,\
    \ 1);\n    int beats_done = 0;\n    // Iterate through remaining characters\n\
    \    for (std::string::iterator i = music_string.begin(); i != music_string.end()\
    \ && *i != ' '; ++i) {\n        // Every time we find a new note, we increment\
    \ the number of beats done.\n        if (*i == 'o') {\n            beats_done++;\n\
    \        }\n        else if (*i == '|') {\n            beats_done++;\n       \
    \ }\n        else if (*i == '.') {\n            beats_done++;\n        }\n   \
    \     else if (*i == 'o' || *i == '|' || *i == '.') {\n            beats_done\
    \ += 4;\n        }\n        // In all other cases, we increment the number of\
    \ beats done by one.\n        else {\n            beats_done++;\n        }\n \
    \       // If we have already done more beats for this note, just add the number\
    \ of beats already done.\n        // This can happen if we encounter a note while\
    \ reading another note.\n        if (beats_done < i) {\n            beats.push_back(beats_done);\n\
    \        }\n    }\n    // If we have not finished reading all the beats, we add\
    \ one to the number of beats done.\n    if (beats_done < music_string.size())\
    \ {\n        beats.push_back(beats_done + 1);\n    }\n    return beats;", "  std::vector<long>\
    \ beats;\n  beats.reserve(music_string.length());\n  int pos = 0;\n  bool last\
    \ = false;\n  while (pos < music_string.length()) {\n    char c = music_string[pos];\n\
    \    bool current_beat = false;\n    switch (c) {\n      case ' ':\n        current_beat\
    \ = true;\n        break;\n      case 'o':\n        if (last) {\n          beats.push_back(4);\n\
    \          last = false;\n        } else {\n          beats.push_back(0);\n  \
    \        last = true;\n        }\n        break;\n      case 'o|':\n        if\
    \ (last) {\n          beats.push_back(2);\n          last = false;\n        }\
    \ else {\n          beats.push_back(1);\n          last = true;\n        }\n \
    \       break;\n      case '.|':\n        if (last) {\n          beats.push_back(1);\n\
    \          last = false;\n        } else {\n          beats.push_back(0);\n  \
    \        last = true;\n        }\n        break;\n      default:\n        assert(false);\n\
    \    }\n    pos++;\n  }\n  return beats;", "    // Your code goes here\n    std::unordered_map<char,\
    \ long> notes_counter;\n    std::vector<long> counters;\n    auto last_note_position\
    \ = 0;\n    auto note_count = music_string.size();\n    auto current_note_position\
    \ = 0;\n    auto current_note = music_string[0];\n    notes_counter[current_note]\
    \ = 1;\n    // Here is a trick: we know that length of notes equals to number\
    \ of 'o's in current note\n    while (note_count > 0) {\n        current_note\
    \ = music_string[note_count];\n        if (current_note == 'o') {\n          \
    \  counters.push_back(4 - current_note_position);\n            last_note_position\
    \ = current_note_position;\n            note_count -= 4;\n            current_note_position\
    \ = 0;\n        } else {\n            current_note_position += notes_counter[current_note];\n\
    \            notes_counter[current_note]++;\n            note_count--;\n     \
    \   }\n    }\n    return counters;", "  // Your code here\n  std::vector< long\
    \ > notes;\n  notes.push_back(0);\n  for (auto c : music_string) {\n    if ('a'\
    \ <= c && c <= 'f') {\n      notes.push_back( notes[notes.size()-1] + (c - 'a'\
    \ + 3) % 12);\n    } else {\n      notes.push_back( notes[notes.size()-1] + c\
    \ % 12);\n    }\n  }\n  return notes;", "    // Your code goes here\n    \n  \
    \  // your code here\n    \n    return {};", "    std::vector<long> res(music_string.length()/4);\n\
    \    int i = 0;\n    while(i < music_string.length()) {\n        // First character\
    \ - note symbol\n        std::string symbol_str = music_string.substr(i, 1);\n\
    \        // Second character - beat number\n        std::string number_str = music_string.substr(i+1,\
    \ 2);\n        if(symbol_str == \"o\") {\n            res[i/4] += 4;\n       \
    \ } else if(symbol_str == \"|\") {\n            res[i/4] += 2;\n        } else\
    \ {\n            res[i/4] += 1;\n        }\n        i += 2;\n    }\n    return\
    \ res;", "  // Your code goes here\n  long temp;\n  std::vector<long> beats;\n\
    \  beats.reserve(music_string.length());\n  for (int i = 0; i < music_string.length();\
    \ i++) {\n    if (music_string[i] == 'o') {\n      if (i + 1 < music_string.length()\
    \ && music_string[i + 1] == '|')\n        temp = temp * 3 + 4;\n      else if\
    \ (i + 1 < music_string.length() && music_string[i + 1] == '.')\n        temp\
    \ = temp * 3 + 2;\n      else\n        temp = 4;\n      i += 2;\n      beats.push_back(temp);\n\
    \      temp = 1;\n    } else {\n      if (i + 1 < music_string.length() && music_string[i\
    \ + 1] == '|')\n        temp *= 2;\n      else if (i + 1 < music_string.length()\
    \ && music_string[i + 1] == '.')\n        temp++;\n      else\n        temp =\
    \ 1;\n      i += 1;\n    }\n  }\n  return beats;", "    std::vector<long> result;\n\
    \    if (music_string.length() == 0) {\n        return result;\n    }\n    auto\
    \ begin = music_string.begin();\n    auto end = music_string.end();\n    auto\
    \ start_of = begin;\n    bool is_note = false;\n    long note_len = 0;\n    for\
    \ (auto it = begin; it != end; ++it) {\n        if (*it == 'o') {\n          \
    \  is_note = true;\n            note_len = 4; // Default note's length\n     \
    \       continue;\n        }\n        if (*it == '|') {\n            is_note =\
    \ true;\n            note_len = 2; // Default note's length\n            continue;\n\
    \        }\n        if (*it == '.') {\n            is_note = true;\n         \
    \   note_len = 1; // Default note's length\n            continue;\n        }\n\
    \        continue;\n    }\n    result.push_back(note_len);\n    if (music_string.length()\
    \ == start_of + note_len)\n        return result;\n    if (is_note) {\n      \
    \  // Go through remaining string and count number of 'o' characters.\n      \
    \  // Keep going until end of string is reached\n        long last_count_o = 0;\n\
    \        long last_count_dot_o = 0;\n        for (auto it = begin + note_len;\
    \ it != end; ++it) {\n            if (*it == 'o') {\n                ++last_count_o;\n\
    \                continue;\n            }\n            if (*it == '|') {\n   \
    \             ++last_count_dot_o;\n                continue;\n            }\n\
    \            if (*it == '.') {\n                ++last_count_dot_o;\n        \
    \        continue;\n            }\n            continue;\n        }\n        //\
    \ Go through remaining string and count number of '|' characters.\n        //\
    \ Keep going until end of string is reached\n        long last_count_o_dot_o =\
    \ 0;\n        for (auto it = begin + note_len; it != end; ++it) {\n          \
    \  if (*it == 'o') {\n                ++last_count_o_dot_o;\n                continue;\n\
    \            }\n            if (*it == '|') {\n                ++last_count_o_dot_o;\n\
    \                continue;\n            }\n            if (*it == '.') {\n   \
    \             ++last_count_o_dot_o;\n                continue;\n            }\n\
    \            continue;\n        }\n        long last_count_half_o = (last_count_o\
    \ >> 1) + last_count_dot_o;\n        // Go through remaining string and count\
    \ number of '.' characters.\n        // Keep going until end of string is reached\n\
    \        long last_count_o_dot_o_dot_o = 0;\n        for (auto it = begin + note_len;\
    \ it != end; ++it) {\n            if (*it == 'o') {\n                ++last_count_o_dot_o_dot_o;\n\
    \                continue;\n            }\n            if (*it == '|') {\n   \
    \             ++last_count_o_dot_o_dot_o;\n                continue;\n       \
    \     }\n            if (*it == '.') {\n", "    std::vector<std::string> notes;\n\
    \    std::string token;\n    while (std::getline(music_string, token, ' ')) {\n\
    \        if (token == \"o\") {\n            notes.push_back(\"o\");\n        }\
    \ else if (token == \"o|\") {\n            notes.push_back(\"o|\");\n        }\
    \ else if (token == \".|\") {\n            notes.push_back(\".|\");\n        }\
    \ else {\n            std::cerr << \"Incorrect music string: \" << music_string\
    \ << std::endl;\n            exit(1);\n        }\n    }\n    // Parse notes\n\
    \    std::vector<long> notes_vector(notes.size());\n    int index = 0;\n    for\
    \ (int i = 0; i < notes.size(); i++) {\n        if (notes[i] == \"o\") {\n   \
    \         notes_vector[index] = 4;\n            index++;\n        } else if (notes[i]\
    \ == \"o|\") {\n            notes_vector[index] = 2;\n            index++;\n \
    \       } else if (notes[i] == \".|\") {\n            notes_vector[index] = 1;\n\
    \            index++;\n        } else {\n            std::cerr << \"Incorrect\
    \ music string: \" << music_string << std::endl;\n            exit(1);\n     \
    \   }\n    }\n    return notes_vector;", "  std::vector<long> result;\n  std::size_t\
    \ n = music_string.length();\n  // Iterate over all possible combinations of note\
    \ and duration.\n  for (std::size_t i = 1; i < n; i += 2) {\n    if (music_string[i]\
    \ == music_string[i + 1]) {\n      long beats = std::stoi(music_string.substr(i,\
    \ 2));\n      // If note is not last we add beat count to our list\n      if (music_string[i]\
    \ != '|')\n        result.push_back(beats);\n    }\n  }\n  return result;", " \
    \   std::vector<long> beats(music_string.size() / 4);\n    for (size_t i = 0;\
    \ i != music_string.size(); ++i) {\n        beats[i] = 0;\n        if (music_string[i]\
    \ == '.') {\n            i += 1;\n            if (music_string[i] == '|')\n  \
    \              beats[i] += 1;\n            else if (music_string[i] == 'o')\n\
    \                beats[i] += 4;\n            else\n                throw std::invalid_argument(\"\
    Expected '.|' or 'o|', but got '\" + music_string[i] + \"'\");\n        }\n  \
    \      else if (music_string[i] == 'o') {\n            i += 1;\n            if\
    \ (music_string[i] == '|')\n                beats[i] += 2;\n            else\n\
    \                throw std::invalid_argument(\"Expected '.|' or 'o|', but got\
    \ '\" + music_string[i] + \"'\");\n        }\n    }\n    return beats;", "   \
    \ // Your code here\n    // std::cout<<music_string<<std::endl;\n    std::istringstream\
    \ iss(music_string);\n    std::string note_str;\n    std::map<char, long> counter;\n\
    \    std::map<char, long> last_beat;\n    long last_beat_index = 0;\n    while\
    \ (std::getline(iss, note_str, '|')) {\n        last_beat[note_str[0]]++;\n  \
    \      last_beat[note_str[1]]++;\n        last_beat[note_str[2]]++;\n        last_beat[note_str[3]]++;\n\
    \        last_beat[note_str[4]]++;\n        last_beat[note_str[5]]++;\n      \
    \  last_beat[note_str[6]]++;\n        last_beat[note_str[7]]++;\n        last_beat[note_str[8]]++;\n\
    \        last_beat[note_str[9]]++;\n        last_beat[note_str[10]]++;\n     \
    \   last_beat[note_str[11]]++;\n        last_beat[note_str[12]]++;\n        last_beat[note_str[13]]++;\n\
    \        last_beat[note_str[14]]++;\n        last_beat[note_str[15]]++;\n    \
    \    last_beat[note_str[16]]++;\n        last_beat[note_str[17]]++;\n        last_beat[note_str[18]]++;\n\
    \        last_beat[note_str[19]]++;\n        last_beat[note_str[20]]++;\n    \
    \    last_beat[note_str[21]]++;\n        last_beat[note_str[22]]++;\n        last_beat[note_str[23]]++;\n\
    \        last_beat[note_str[24]]++;\n        last_beat[note_str[25]]++;\n    \
    \    last_beat[note_str[26]]++;\n        last_beat[note_str[27]]++;\n        last_beat[note_str[28]]++;\n\
    \        last_beat[note_str[29]]++;\n        last_beat[note_str[30]]++;\n    \
    \    last_beat[note_str[31]]++;\n        last_beat[note_str[32]]++;\n        last_beat[note_str[33]]++;\n\
    \        last_beat[note_str[34]]++;\n        last_beat[note_str[35]]++;\n    \
    \    last_beat[note_str[36]]++;\n        last_beat[note_str[37]]++;\n        last_beat[note_str[38]]++;\n\
    \        last_beat[note_str[39]]++;\n        last_beat[note_str[40]]++;\n    \
    \    last_beat[note_str[41]]++;\n        last_beat[note_str[42]]++;\n        last_beat[note_str[43]]++;\n\
    \        last_beat[note_str[44]]++;\n        last_beat[note_str[", "  long number_of_notes\
    \ = 0;\n  int note = 0;\n  std::vector<long> beats;\n  for (int i = 0; i < music_string.size();\
    \ ++i) {\n    if (music_string[i] == '.') {\n      number_of_notes += 1;\n   \
    \   note++;\n      beats.push_back(note + 1);\n      note = 0;\n    } else if\
    \ (music_string[i] == '|') {\n      number_of_notes += 1;\n      note++;\n   \
    \ } else if (music_string[i] == 'o') {\n      number_of_notes += 1;\n    }\n \
    \ }\n  return beats;", "    std::vector<long> beats(music_string.length(), 0);\
    \ // beats vector to store parsed numbers\n\n    // Use stack to check whether\
    \ the last note is whole or half\n    std::stack<bool> beats_on_last_note;\n \
    \   beats_on_last_note.push(true);\n    // Use queue to check whether the current\
    \ note is note or a dot\n    std::queue<bool> note_on_this_note;\n    note_on_this_note.push(false);\n\
    \    \n    // Use while loop to pop out each note from the stack\n    while(note_on_this_note.empty()\
    \ == false){\n        note_on_this_note.pop();\n        beats_on_last_note.push(true);\n\
    \        \n        // Pop out whole notes\n        if(note_on_this_note.top()\
    \ == true && beats_on_last_note.top() == false){\n            beats.push(4);\n\
    \            note_on_this_note.push(true);\n        }\n        \n        // Pop\
    \ out half notes\n        else if(note_on_this_note.top() == true && beats_on_last_note.top()\
    \ == true){\n            beats.push(2);\n            note_on_this_note.push(true);\n\
    \        }\n        \n        // Pop out dot\n        else if(note_on_this_note.top()\
    \ == false && beats_on_last_note.top() == false){\n            beats.push(1);\n\
    \        }\n    }\n    \n    return beats;", "    std::vector<long> note_counts(4);\n\
    \    std::string temp;\n    for (int i = 0; i < music_string.length(); i++) {\n\
    \        if (music_string[i] != '|') {\n            temp.push_back(music_string[i]);\n\
    \        } else if (music_string[i] == '.') {\n            if (temp[0] == 'o'\
    \ && temp[1] == 'o' && temp[2] == '|' && temp[3] == '|') {\n                note_counts[0]++;\n\
    \            } else if (temp[0] == 'o' && temp[1] == '|' && temp[2] == '|' &&\
    \ temp[3] == 'o') {\n                note_counts[1]++;\n            } else if\
    \ (temp[0] == '|' && temp[1] == '|' && temp[2] == 'o' && temp[3] == 'o') {\n \
    \               note_counts[2]++;\n            } else if (temp[0] == '|' && temp[1]\
    \ == '|' && temp[2] == 'o' && temp[3] == '|') {\n                note_counts[3]++;\n\
    \            }\n            temp = \"\";\n        } else {\n            temp.clear();\n\
    \        }\n    }\n    return note_counts;", "    // Create empty output vector\n\
    \    std::vector<long> output_vec;\n    // Iterate through all characters in the\
    \ music_string\n    for (char c : music_string) {\n        // If it's not a special\
    \ character, append it to output vector\n        if (c != '.' && c != 'o' && c\
    \ != '|') {\n            output_vec.push_back(c);\n        }\n    }\n    // Iterate\
    \ through output vector and find how many beats lasts notes\n    for (long note\
    \ : output_vec) {\n        // If current note is not an octave, append it to output\
    \ vector\n        if (note != 'o') {\n            output_vec.push_back(note /\
    \ 4);\n        }\n    }\n    return output_vec;", "    // Your code goes here.\n\
    \    std::vector<long> notes(music_string.size());\n    for(long i = 0; i<music_string.size();\
    \ i++){\n        if (music_string[i] == 'o'){\n            notes[i] = 4;\n   \
    \     }\n        else if (music_string[i] == 'o|'){\n            notes[i] = 2;\n\
    \        }\n        else if (music_string[i] == '.|'){\n            notes[i] =\
    \ 1;\n        }\n        else{\n            notes[i] = 0;\n        }\n    }\n\
    \    return notes;", "    std::vector<long> result;\n\n    std::string::size_type\
    \ beat_counter = 0;\n    std::string::size_type note_counter = 0;\n\n    for (const\
    \ auto c : music_string) {\n        switch (c) {\n            case 'o':\n    \
    \            if (beat_counter == 0) {\n                    beat_counter = 1;\n\
    \                    note_counter = 0;\n                } else if (beat_counter\
    \ == 1) {\n                    beat_counter = 2;\n                    note_counter\
    \ = 0;\n                } else if (beat_counter == 2) {\n                    beat_counter\
    \ = 1;\n                    note_counter = 0;\n                }\n           \
    \     break;\n            case 'o|':\n                if (beat_counter == 0) {\n\
    \                    beat_counter = 1;\n                    note_counter = 0;\n\
    \                } else if (beat_counter == 1) {\n                    beat_counter\
    \ = 2;\n                    note_counter = 0;\n                } else if (beat_counter\
    \ == 2) {\n                    beat_counter = 1;\n                    note_counter\
    \ = 0;\n                }\n                break;\n            case '.|':\n  \
    \              if (beat_counter == 0) {\n                    beat_counter = 1;\n\
    \                    note_counter = 0;\n                } else if (beat_counter\
    \ == 1) {\n                    beat_counter = 1;\n                    note_counter\
    \ = 0;\n                } else if (beat_counter == 2) {\n                    beat_counter\
    \ = 1;\n                    note_counter = 0;\n                }\n           \
    \     break;\n            default:\n                if (beat_counter > 0) {\n\
    \                    result.push_back(beat_counter);\n                }\n    \
    \            beat_counter = 0;\n                note_counter++;\n            \
    \    break;\n        }\n    }\n\n    if (beat_counter > 0) {\n        result.push_back(beat_counter);\n\
    \    }\n\n    return result;", "  std::vector<long> notes_freq(5);\n  for (int\
    \ i = 0; i < music_string.size(); i++) {\n    if (music_string[i] == 'o') {\n\
    \      notes_freq[notes_freq.size() - 1] += 4;\n    }\n    if (music_string[i]\
    \ == '|') {\n      notes_freq[notes_freq.size() - 1] += 2;\n    }\n    if (music_string[i]\
    \ == '.') {\n      notes_freq[notes_freq.size() - 1] += 1;\n    }\n  }\n  return\
    \ notes_freq;", "    // Initialize result vector with size of input string plus\
    \ one\n    std::vector<long> results(music_string.size() + 1, 1);\n\n    // Iterate\
    \ through input string and set corresponding value to 1\n    for (long i = 0;\
    \ i <= music_string.size(); i++) {\n        // If current character is a dot,\
    \ or if it is at end of string do nothing\n        if (music_string[i] == '.'\
    \ || i == music_string.size()) {\n            continue;\n        }\n        //\
    \ Otherwise if it is a 'o' set corresponding value to 4\n        else if (music_string[i]\
    \ == 'o') {\n            results[i] = 4;\n        }\n        // Otherwise if it\
    \ is a '|' set corresponding value to 2\n        else if (music_string[i] == '|')\
    \ {\n            results[i] = 2;\n        }\n        // Otherwise set corresponding\
    \ value to the previous result value\n        else {\n            results[i] =\
    \ results[i - 1];\n        }\n    }\n\n    return results;", "  std::vector<long>\
    \ beats(music_string.size());\n  // Here comes the main idea. We need to find\
    \ out how many beats does each note last.\n  // Let's take an example.\n  // Notes:\n\
    \  //   o - whole note, lasts four beats\n  //   o| - half note, lasts two beats\n\
    \  //   .| - quater note, lasts one beat\n  // Given a string like `o o| .| o|\
    \ o| .| .| .| .| o o`, we will have 2 notes left and last one for\n  // two beats.\
    \ So the answer for this example will be [2, 1, 1, 1, 1, 4, 4].\n  // In general,\
    \ there can be an arbitrary number of notes and any number of beats for each note.\n\
    \  // We will try to figure out how many beats does each note last.\n  // To do\
    \ this, we will count how many times each note appears in the string.\n  // After\
    \ counting how many times each note appears in the string, we can easily figure\
    \ out how many beats\n  // each note lasts. But there is a catch.\n  // We need\
    \ to handle three cases:\n  //   1. when there is only one note (no \"|\") in\
    \ the string\n  //   2. when there is no \"|\" in the string\n  //   3. when there\
    \ is \"|\" in the string\n  // We will deal with the third case first.\n  // Case\
    \ 3 is easy because we can always count how many times a note appears in the string.\n\
    \  // Case 2 is easy to handle by simply subtracting number of beats after the\
    \ last \"|\" from the number\n  // of beats before the penultimate \"|\". We will\
    \ also have a special case when \"|\" appears at the beginning.\n  // This means\
    \ we need to subtract 2 from the number of beats and when \"|\" appears at the\
    \ beginning,\n  // we need to subtract 1 from the number of beats.\n  // If there\
    \ are more \"|\" in the string, we will simply add them to the number before \"\
    |\".\n  // For case 1, we will deal with this case first and then add it to the\
    \ case 2. For example,\n  // given `o o| .| o| o| .| .| .| .| .| o o`, we will\
    \ deal with case 3 first and then\n  // add case 2 if needed.\n  for (int i =\
    \ music_string.size() - 1; i >= 0; i--) {\n    if (music_string[i] == '|') {\n\
    \      // When we have \"|\" in the string\n      // We need to subtract 2 from\
    \ number of beats\n      // and when \"|\" appears at the beginning,\n      //\
    \ we need to subtract 1 from the number of beats\n      // so we need 2 subtractions\
    \ for case 1, and ", '    // Your code goes here', "    std::vector<long> beats;\n\
    \    for (auto note : music_string) {\n        switch (note) {\n            case\
    \ ' ': break;\n            case 'o': beats.push_back(4); break;\n            case\
    \ 'o|': beats.push_back(2); break;\n            case '.|': beats.push_back(1);\
    \ break;\n        }\n    }\n    return beats;", "  std::vector<long> beats_per_note;\n\
    \n  // First we get rid of all spaces. We split notes to avoid duplicates\n  //\
    \ and then we find out if each note is last four beats or not\n  for (auto &c\
    \ : music_string) {\n    if (c == ' ') {\n      continue;\n    }\n    beats_per_note.push_back(0);\n\
    \  }\n  for (auto &c : music_string) {\n    if (c == '|') {\n      beats_per_note.back()++;\n\
    \    }\n  }\n\n  // Here we count beats per note. Beats are equal to 4 if 'o'\
    \ is present\n  // and 2 if 'o|' is present. After that we fill the rest of notes\n\
    \  // with 0's.\n  for (auto &c : music_string) {\n    if (c == 'o') {\n     \
    \ beats_per_note.back() += 4;\n    } else if (c == 'o|') {\n      beats_per_note.back()\
    \ += 2;\n    } else {\n      beats_per_note.back() = 0;\n    }\n  }\n\n  // After\
    \ that we calculate total notes\n  auto note_count = music_string.size();\n  for\
    \ (auto &c : music_string) {\n    beats_per_note.back()--;\n  }\n  beats_per_note.back()\
    \ = note_count - beats_per_note.back();\n\n  return beats_per_note;", "  std::vector<long>\
    \ beats(music_string.length());\n  // TODO: Implement the parsing algorithm\n\
    \  // ...\n  return beats;", "    // Write your code here\n    std::vector<long>\
    \ beats;\n    std::unordered_map<char, int> map_of_note_to_beat;\n    for (char\
    \ c : music_string) {\n        map_of_note_to_beat[c]++;\n    }\n    int beat\
    \ = 0;\n    for (auto it = map_of_note_to_beat.begin(); it != map_of_note_to_beat.end();\
    \ it++) {\n        beats[it->second] = beat;\n        beat++;\n    }\n    return\
    \ beats;", "  long long acc = 0;\n  std::vector<long> result;\n  auto it = music_string.cbegin();\n\
    \  while (it != music_string.cend()) {\n    char c = *it;\n    switch (c) {\n\
    \      case 'o':\n        acc += 4;\n        break;\n      case 'o|':\n      \
    \  acc += 2;\n        break;\n      case '.|':\n        acc++;\n        break;\n\
    \      default:\n        std::cerr << \"Bad note: '\" << c << \"'\\n\";\n    \
    \    assert(0);\n    }\n    ++it;\n  }\n  result.push_back(acc);\n  return result;",
  "    std::vector<long> beats_count_vector;\n    // Step 1: convert string into array\
    \ of characters\n    char ch[128];\n    for (unsigned i = 0; i < 128; i++) {\n\
    \        ch[i] = music_string[i];\n    }\n    // Step 2: convert string into array\
    \ of ints\n    long long ints[128];\n    for (unsigned i = 0; i < 128; i++) {\n\
    \        ints[i] = static_cast<long long>(ch[i]) - '0';\n    }\n    // Step 3:\
    \ calculate sum of all numbers from 0 to 127 inclusive\n    long long sum = 0;\n\
    \    for (unsigned i = 0; i < 128; i++) {\n        sum += ints[i];\n    }\n  \
    \  // Step 4: iterate over all numbers from 0 to 127\n    for (unsigned i = 0;\
    \ i < 128; i++) {\n        if (ints[i] != 0) {\n            // Step 5: count how\
    \ many beats does this note last\n            long long current_beats_count =\
    \ sum / static_cast<long long>(ints[i]);\n            // Step 6: add it to our\
    \ vector\n            beats_count_vector.push_back(current_beats_count);\n   \
    \         // Step 7: reset our sum and count for next iteration of the loop\n\
    \            sum = 0;\n        }\n    }\n    return beats_count_vector;", '    //
    Your code here', "    // Write your code here\n    std::vector<long> notes(music_string.size()\
    \ + 1, 0);\n    for (int i = 0; i < music_string.size(); i++) {\n        notes[i]\
    \ = notes[i + 1];\n        if (music_string[i] == 'o') {\n            notes[i\
    \ + 1] = notes[i + 1] + 1;\n        } else if (music_string[i] == '|') {\n   \
    \         notes[i + 1] = notes[i + 1] + 2;\n        } else {\n            notes[i\
    \ + 1] = notes[i + 1] + 1;\n        }\n    }\n    return notes;", "    int note_counter\
    \ = -1;\n    std::vector<long> beats_counter;\n    std::string note_type;\n\n\
    \    for (auto &note : music_string) {\n        if (note == '|') note_type = \"\
    half\";\n        else if (note == 'o') note_type = \"whole\";\n        else if\
    \ (note == '.') note_type = \"quarter\";\n        else if (note == '#') note_type\
    \ = \"semifinal\";\n        else {\n            int beats = 0;\n\n           \
    \ if (note_type == \"quarter\") {\n                beats = 2;\n            } else\
    \ if (note_type == \"half\") {\n                beats = 4;\n            } else\
    \ if (note_type == \"whole\") {\n                beats = 1;\n            } else\
    \ if (note_type == \"semifinal\") {\n                beats = 1;\n            }\n\
    \n            if (note_type == \"half\" && note_counter % 2 == 0) {\n        \
    \        beats *= 2;\n            } else if (note_type == \"quarter\" && note_counter\
    \ % 4 == 0) {\n                beats *= 4;\n            } else if (note_type ==\
    \ \"whole\" && note_counter % 4 == 0) {\n                beats *= 4;\n       \
    \     } else if (note_type == \"semifinal\" && note_counter % 4 == 0) {\n    \
    \            beats *= 4;\n            } else if (note_type == \"semifinal\" &&\
    \ note_counter % 4 == 1) {\n                beats *= 2;\n            }\n\n   \
    \         beats_counter.push_back(beats);\n        }\n\n        note_counter++;\n\
    \    }\n\n    return beats_counter;", "  std::vector<long> beats;\n  std::stack<long>\
    \ current_stack;\n  std::queue<long> current_queue;\n  long current_beat = 0;\n\
    \n  current_stack.push(0);\n  current_queue.push(0);\n\n  for (auto c : music_string)\
    \ {\n    switch (c) {\n      case 'o':\n      case 'o|':\n        beats.push_back(current_beat);\n\
    \        if (current_queue.size() == 0) {\n          current_stack.push(current_beat);\n\
    \        } else {\n          current_queue.push(current_beat);\n        }\n  \
    \      current_beat = 0;\n        break;\n      case '.|':\n        if (current_queue.size()\
    \ == 0) {\n          current_stack.push(current_beat);\n        } else {\n   \
    \       current_queue.push(current_beat);\n        }\n        current_beat = 0;\n\
    \        break;\n      default:\n        current_beat += 1;\n    }\n  }\n  beats.push_back(current_beat);\n\
    \  if (current_stack.size() != 0) {\n    beats.push_back(current_queue.top());\n\
    \  }\n  return beats;", "    std::vector<long> beats_count(16);\n    int current_beat\
    \ = 0;\n    for(char c : music_string) {\n        // Check if c is a note\n  \
    \      if(c == 'o') {\n            // Check if last note in this octave\n    \
    \        if(current_beat == 4)\n                beats_count[current_beat] = 4;\n\
    \            else\n                beats_count[current_beat]++;\n            current_beat++;\n\
    \        } else if(c == '|') {\n            if(current_beat == 4)\n          \
    \      beats_count[current_beat] = 2;\n            else\n                beats_count[current_beat]++;\n\
    \            current_beat++;\n        } else {\n            current_beat = 0;\n\
    \        }\n    }\n\n    return beats_count;", "    // TODO: parse music_string\
    \ to return vector of integers representing beats lengths\n    return std::vector<long>();",
  "    std::vector<long> results;\n    // Add each note to a string\n    std::size_t\
    \ note_length = music_string.length();\n    std::string note_to_add = \"\";\n\
    \    for(auto i = 0; i < note_length; i++) {\n        char c = music_string[i];\n\
    \        note_to_add += c;\n        // If last character was a space, add one\
    \ beat.\n        if(i != note_length - 1)\n            note_to_add += \" \";\n\
    \        char last_c = music_string[i + 1];\n        if(last_c == '.' || last_c\
    \ == '|') {\n            results.push_back(std::stoi(note_to_add));\n        \
    \    note_to_add = \"\";\n        }\n    }\n    return results;", "    // Create\
    \ a map with mappings from musical notes to number of beats that note lasts.\n\
    \    std::string notes[] = {\"c\", \"d\", \"e\", \"f\", \"g\", \"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"a\", \"b\"};\n    std::map<std::string, long>\
    \ note_to_beat_map;\n    for (size_t i = 0; i < sizeof(notes) / sizeof(notes[0]);\
    \ ++i) {\n        note_to_beat_map[notes[i]] = i * 4;\n    }\n\n    std::vector<long>\
    \ output_vector(music_string.length());\n    for (std::size_t i = 0; i != music_string.length();\
    \ ++i) {\n        std::string current_note = music_string[i];\n        std::string\
    \ next_note;\n        std::size_t current_beat_number = 0;\n        std::size_t\
    \ current_beat_index = 0;\n        while (current_note != \".\" && current_note\
    \ != \" \") {\n            if (current_note == \"o\") {\n                output_vector[i]\
    \ = output_vector[i] + (current_beat_number / 4);\n                current_beat_number\
    \ = 0;\n                current_beat_index = 0;\n            } else if (current_note\
    \ == \"|\") {\n                output_vector[i] = output_vector[i] + (current_beat_number\
    \ / 2);\n                current_beat_number = 0;\n            } else if (current_note\
    \ == \".\") {\n                output_vector[i] = output_vector[i] + (current_beat_number);\n\
    \                current_beat_number = 1;\n            } else {\n            \
    \    next_note = notes[current_beat_number];\n                if (next_note ==\
    \ current_note) {\n                    ++current_beat_number;\n              \
    \  } else if (next_note == \"c\" && current_note == \"c\") {\n               \
    \     ++current_beat_number;\n                    ++current_beat_index;\n    \
    \            } else if (next_note == \"d\" && current_note == \"d\") {\n     \
    \               ++current_beat_number;\n                    ++current_beat_index;\n\
    \                    ++current_beat_index;\n                } else if (next_note\
    \ == \"e\" && current_note == \"e\") {\n                    ++current_beat_number;\n\
    \                    ++current_beat_index;\n                    ++current_beat_index;\n\
    \                    ++current_beat_index;\n                } else if (next_note\
    \ == \"f\" && current_note == \"f\") {\n                    ++current_beat_number;\n\
    \                    ++current_beat_index;\n                    ++current_beat_index;\n\
    \                    ++current_beat_index;\n                    ++current_beat_index;\n\
    \                } else if (next_note == \"g\" && current_note == \"g\") {\n \
    \                   ++current_beat_number;\n                    ++current_beat_index;\n\
    \                    ++current_beat_index;\n                    ++current_beat_index;\n\
    \                    ++current_beat_index;\n                    ++current_beat_index;\n\
    \                    ++current_beat_index;\n                    ++current_beat_index;\n\
    \                } else {\n                    std::cerr << \"Error: invalid note\
    \ found: \" << current_note << \"\\n\";\n                    return std::vector<long>();\n",
  "    std::vector<long> beats;\n    std::string notes[] = {\"o\", \"o|\", \".|\"\
    };\n    std::size_t note_size = sizeof(notes) / sizeof(notes[0]);\n    for (auto\
    \ &note : notes) {\n        for (size_t i = 0; i < music_string.size(); i++) {\n\
    \            if (note == music_string[i]) {\n                beats.push_back(i\
    \ + 1);\n                music_string.erase(i, 1);\n                break;\n \
    \           }\n        }\n    }\n    for (size_t i = 0; i < music_string.size();\
    \ i++) {\n        if (notes.back() == music_string[i]) {\n            beats.push_back(i\
    \ + 1);\n            music_string.erase(i, 1);\n        }\n    }\n    return beats;",
  "    // Your code here\n    std::vector<long> result;\n    auto it = music_string.begin();\n\
    \    while (it != music_string.end()) {\n        if (*it == 'o') {\n         \
    \   ++it;\n            result.push_back(4);\n            while (it != music_string.end()\
    \ && *it == '|') ++it;\n            result.push_back(*it - 'o');\n        } else\
    \ {\n            ++it;\n            while (it != music_string.end() && *it ==\
    \ '.') ++it;\n            result.push_back(*it - 'o');\n            while (it\
    \ != music_string.end() && *it == '|') ++it;\n        }\n    }\n    return result;",
  "    std::vector<long> notes;\n    for (auto c : music_string) {\n        switch\
    \ (c) {\n        case 'o': notes.push_back(4); break;\n        case '|': notes.push_back(1);\
    \ break;\n        case '.': notes.push_back(2); break;\n        case '@': notes.push_back(2);\
    \ break;\n        case '#': notes.push_back(2); break;\n        case '$': notes.push_back(2);\
    \ break;\n        case '%': notes.push_back(2); break;\n        case '^': notes.push_back(2);\
    \ break;\n        case '&': notes.push_back(2); break;\n        case '*': notes.push_back(2);\
    \ break;\n        case '(': notes.push_back(2); break;\n        case ')': notes.push_back(2);\
    \ break;\n        case '[': notes.push_back(1); break;\n        case ']': notes.push_back(1);\
    \ break;\n        case '{': notes.push_back(1); break;\n        case '}': notes.push_back(1);\
    \ break;\n        case '<': notes.push_back(1); break;\n        case '>': notes.push_back(1);\
    \ break;\n        case '=': notes.push_back(1); break;\n        case '+': notes.push_back(1);\
    \ break;\n        case '-': notes.push_back(1); break;\n        case '/': notes.push_back(1);\
    \ break;\n        case '|': notes.push_back(1); break;\n        case '1': notes.push_back(1);\
    \ break;\n        case '2': notes.push_back(1); break;\n        case '3': notes.push_back(1);\
    \ break;\n        case '4': notes.push_back(1); break;\n        case '5': notes.push_back(1);\
    \ break;\n        case '6': notes.push_back(1); break;\n        case '7': notes.push_back(1);\
    \ break;\n        case '8': notes.push_back(1); break;\n        case '9': notes.push_back(1);\
    \ break;\n        case '0': notes.push_back(1); break;\n        }\n    }\n   \
    \ return notes;", "  // Write your code here\n  std::string notes[12];\n  int\
    \ beat = 0;\n  for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ != ' ' && music_string[i] != '|') {\n      notes[beat++] = music_string[i] -\
    \ '0';\n    }\n  }\n  return std::vector<long>(notes, notes + beat + 1);", " \
    \ // Your code goes here\n  std::vector<long> beats;\n  std::size_t pos = 0;\n\
    \  while (pos < music_string.size()) {\n    char current_char = music_string[pos];\n\
    \    // \"o\" -> \"00\" -> \"0\" -> \"00\" -> \"000\"\n    if ((current_char ==\
    \ 'o') || (current_char == '|')) {\n      beats.push_back(std::stoi(music_string.substr(pos,\
    \ 3 - pos), nullptr, 0));\n    }\n    pos = pos + 1;\n  }\n  return beats;", '    //
    Your implementation here', "  std::vector<long> results;\n  long current_beats\
    \ = 0;\n  long beats_for_bar = 0;\n  std::string current_note;\n  int index =\
    \ 0;\n\n  while (index < music_string.size()) {\n    if (music_string[index] ==\
    \ '.') {\n      current_note = music_string.substr(index, 4);\n      current_beats\
    \ = 2;\n      current_beats = current_beats % 4;\n      beats_for_bar = current_beats\
    \ / 4;\n\n      results.push_back(current_beats);\n      index += 4;\n    } else\
    \ if (music_string[index] == 'o') {\n      if (current_note == \".||\") {\n  \
    \      results.push_back(current_beats);\n        index += 4;\n      } else {\n\
    \        results.push_back(beats_for_bar);\n        beats_for_bar = 0;\n     \
    \ }\n    } else {\n      beats_for_bar += 1;\n      index += 1;\n    }\n  }\n\n\
    \  return results;", "  std::vector<long> res(music_string.length(), 0);\n  for\
    \ (auto c : music_string) {\n    if (c == 'o') {\n      res[res.size() - 4] +=\
    \ 1; // last four beats\n    } else if (c == 'o|') {\n      res[res.size() - 2]\
    \ += 1; // last two beats\n    } else if (c == '.|') {\n      res[res.size() -\
    \ 1] += 1; // last beat\n    }\n  }\n  return res;", "    auto it = std::begin(music_string);\n\
    \    std::vector<long> beats(8);\n    long beat = 1;\n    long current_note =\
    \ 0;\n    while (it != std::end(music_string)) {\n        if (*it == 'o') {\n\
    \            beats[current_note] = 0;\n            it++;\n            beat = 1;\n\
    \            current_note++;\n        } else if (*it == '.') {\n            it++;\n\
    \            beats[current_note]++;\n        } else if (*it == 'o') {\n      \
    \      it++;\n            beats[current_note]++;\n        } else {\n         \
    \   it++;\n            current_note++;\n        }\n    }\n    return beats;",
  "    auto beat_length = std::count(music_string.begin(), music_string.end(), '|');\n\
    \    long beat_width = std::count(music_string.begin(), music_string.end(), '|');\n\
    \    long beat_count = 0;\n    std::vector<long> beats(beat_length);\n    for\
    \ (int i = 0; i < beat_length; i++) {\n        if (music_string[i] == 'o')\n \
    \           beats[i] = 4;\n        else if (music_string[i] == '.') {\n      \
    \      beats[i] = 1;\n            beat_count++;\n        }\n        else if (music_string[i]\
    \ == '|') {\n            beats[i] = 1;\n            beat_count += beat_width;\n\
    \        }\n    }\n    return beats;", "    std::vector<long> results;\n    long\
    \ beat_num = 0;\n    std::string temp;\n    long count = 0;\n\n    for (auto&\
    \ c : music_string) {\n        if (c == 'o') {\n            if (temp != \".\"\
    ) {\n                results.push_back(beat_num);\n                beat_num =\
    \ 0;\n            }\n            temp = \"o\";\n            count++;\n       \
    \ } else if (c == '|') {\n            if (temp == \".\" || temp == \"o\")\n  \
    \              results.push_back(beat_num);\n            beat_num++;\n       \
    \     temp = \"|\";\n            count++;\n        } else if (c == '.') {\n  \
    \          if (temp == \"o\")\n                results.push_back(beat_num);\n\
    \            temp = \".\";\n            count++;\n        } else if (c == ' ')\
    \ {\n            if (temp == \"o\" || temp == \"|\" || temp == \".\")\n      \
    \          results.push_back(beat_num);\n            beat_num = 0;\n         \
    \   temp = \"\";\n            count++;\n        } else {\n            temp = c;\n\
    \            count++;\n        }\n    }\n\n    if (temp == \".\" || temp == \"\
    o\")\n        results.push_back(beat_num);\n\n    return results;", "    assert(music_string.size()\
    \ != 0);\n    std::vector<long> music_list;\n    long notes_count[MAX_NOTES];\n\
    \    // initialize notes count for each note by zero length\n    memset(notes_count,\
    \ 0, sizeof(notes_count));\n    for (auto c : music_string) {\n        assert(c\
    \ != '|');\n        // parse note\n        long note = c - 'o';\n        // parse\
    \ note type\n        long note_length = notes_count[note];\n        if (note_length\
    \ == 0) note_length = 4;\n        switch (c) {\n            case 'o':\n      \
    \          notes_count[note] = 4;\n                break;\n            case 'o|':\n\
    \                notes_count[note] = 2;\n                break;\n            case\
    \ '.|':\n                notes_count[note] = 1;\n                break;\n    \
    \        default:\n                assert(0);\n                break;\n      \
    \  }\n        // parse beats\n        long beat = note_length * 4;\n        //\
    \ parse note\n        notes_count[note] += beat;\n        music_list.push_back(notes_count[note]);\n\
    \    }\n    return music_list;", "    std::vector<long> beats(music_string.size()\
    \ + 1, 0); // +1 accounts for space char\n    for (char c : music_string) {\n\
    \        if (c == 'o') {\n            beats[beats.size() - 1] += 4;\n        }\
    \ else if (c == '|') {\n            beats[beats.size() - 1] += 2;\n        } else\
    \ if (c == '.') {\n            beats[beats.size() - 1] += 1;\n        }\n    }\n\
    \    return beats;", "  std::vector<long> beats;\n  for (char c : music_string)\
    \ {\n    if (c == 'o')\n      beats.push_back(4LL);\n    else if (c == '.')\n\
    \      beats.push_back(1LL);\n    else if (c == '|')\n      beats.push_back(2LL);\n\
    \    else\n      beats.push_back(0LL);\n  }\n  return beats;", "  std::vector<long>\
    \ numbers;\n  int numbers_size = 0;\n\n  for (char c : music_string) {\n    if\
    \ (c == 'o') {\n      numbers.push_back(numbers_size);\n      numbers_size = 0;\n\
    \    } else if (c == '|') {\n      numbers_size++;\n    }\n  }\n\n  return numbers;",
  "  std::vector<long> beats(music_string.length() / 4);\n  size_t current_beat =\
    \ 0;\n  for (size_t i = 0; i < music_string.length(); i++) {\n    if (music_string[i]\
    \ == '|') {\n      current_beat += 2;\n    } else {\n      beats[current_beat]\
    \ ++;\n    }\n  }\n  return beats;", "    // Create two vectors of notes, each\
    \ for whole and half-note versions.\n    std::vector<std::string> whole_notes;\n\
    \    std::vector<std::string> half_notes;\n\n    // Iterate over string and split\
    \ notes by '|'\n    for (char c : music_string) {\n        if (c == 'o') {\n \
    \           whole_notes.push_back('o');\n            half_notes.push_back('o|');\n\
    \        } else if (c == 'o|') {\n            whole_notes.push_back('o|');\n \
    \           half_notes.push_back('.|');\n        } else if (c == '.|') {\n   \
    \         whole_notes.push_back('.|');\n            half_notes.push_back('o|');\n\
    \        }\n    }\n\n    // Count the beats for each note in each string separately\n\
    \    std::vector<long> whole_notes_beats(whole_notes.size());\n    std::vector<long>\
    \ half_notes_beats(half_notes.size());\n\n    for (auto i = 0; i < whole_notes.size();\
    \ ++i) {\n        // Add one to each beat that note lasts\n        whole_notes_beats[i]\
    \ += 1;\n        // Add one to each beat that note lasts\n        half_notes_beats[i]\
    \ += 1;\n    }\n\n    // Return list of beats for each note\n    return std::move(whole_notes_beats);",
  "    std::vector<long> outputs;\n    long output = 0;\n    long last_note = 0;\n\
    \    for(char c : music_string) {\n        switch (c) {\n            case 'o':\n\
    \                output += 4;\n                break;\n            case 'o|':\n\
    \                output += 2;\n                break;\n            case '.|':\n\
    \                output += 1;\n                break;\n            default:\n\
    \                // Ignore\n                break;\n        }\n        if (output\
    \ == 0) {\n            continue;\n        }\n        if (last_note != 0) {\n \
    \           outputs.push_back(output);\n        }\n        last_note = output;\n\
    \        output = 0;\n    }\n    if (output != 0) {\n        outputs.push_back(output);\n\
    \    }\n    return outputs;", "    std::vector<long> beats(128);\n    for (int\
    \ i = 0; i < 128; i++) {\n        beats[i] = 0;\n    }\n    std::string temp;\n\
    \    int current_beat = 0;\n    int current_step = 0;\n    bool is_last_note =\
    \ false;\n    long last_step = 0;\n    int max_step = 0;\n    int count = 0;\n\
    \    for (char c : music_string) {\n        if (is_last_note) {\n            current_step\
    \ += last_step;\n            count += last_step;\n            is_last_note = false;\n\
    \        }\n        switch (c) {\n            case 'o':\n            case '|':\n\
    \                current_step += 4;\n                break;\n            case\
    \ '.':\n                current_step += 2;\n                break;\n         \
    \   case 'x':\n                is_last_note = true;\n                break;\n\
    \            default:\n                last_step = current_step;\n           \
    \     count++;\n                break;\n        }\n        if (count >= 4) {\n\
    \            current_beat += count;\n            count = 0;\n        }\n     \
    \   if (current_beat >= 128) {\n            current_beat = 0;\n        }\n   \
    \ }\n    return beats;", "    if (music_string.size() < 1) {\n        throw std::runtime_error(\"\
    music string must be greater or equal to 0\");\n    }\n    std::vector<long> output;\n\
    \    auto it = music_string.begin();\n    while (it != music_string.end()) {\n\
    \        long beats;\n        if (*it == 'o') {\n            beats = 4;\n    \
    \    } else if (*it == 'o|') {\n            beats = 2;\n        } else if (*it\
    \ == '.|') {\n            beats = 1;\n        } else {\n            throw std::runtime_error(\"\
    Invalid music string\");\n        }\n        output.push_back(beats);\n      \
    \  ++it;\n    }\n    return output;", "    std::vector<long> beats;\n    int previous_beat_number\
    \ = 4;\n    for (auto character : music_string) {\n        auto beat_number =\
    \ previous_beat_number;\n        if (character == 'o') {\n            beat_number\
    \ = 4;\n        } else if (character == 'o|') {\n            beat_number = 2;\n\
    \        } else if (character == '.|') {\n            beat_number = 1;\n     \
    \   }\n        beats.push_back(beat_number);\n        previous_beat_number = beat_number;\n\
    \    }\n    return beats;", "  std::vector<long> notes;\n  std::size_t previous_note_end\
    \ = 0;\n  for (std::size_t i = 0; i < music_string.size(); i++) {\n    // O is\
    \ the beginning of string so we don't want to parse it.\n    if (music_string[i]\
    \ == 'o') {\n      if (previous_note_end == 0) {\n        notes.push_back(1);\n\
    \      } else {\n        notes.push_back(notes[notes.size() - 1] * 4);\n     \
    \ }\n      previous_note_end = 0;\n    } else {\n      notes.push_back(1);\n \
    \     previous_note_end = i + 1;\n    }\n  }\n  return notes;", "    // Your code\
    \ here\n    std::vector<long> result;\n    std::string note_str = music_string;\n\
    \    std::string current_note;\n    std::string next_note;\n    long note_length\
    \ = 0;\n    long beat_length = 0;\n    long beat_count = 0;\n\n    for (size_t\
    \ i = 0; i < note_str.size(); i++) {\n        char current_char = note_str[i];\n\
    \        // Skip over spaces and commas - not needed in song\n        if (current_char\
    \ == ' ' || current_char == ',') continue;\n        // Keep track of current note\
    \ length\n        if (current_char == 'o') {\n            note_length = beat_count;\n\
    \            beat_count = 0;\n            beat_length = note_length;\n       \
    \ } else if (current_char == '|') {\n            beat_length = (beat_length /\
    \ 2) + (beat_length / 4);\n            beat_count = 0;\n        } else if (current_char\
    \ == '.') {\n            beat_length = (beat_length / 2) + 1;\n        }\n   \
    \     // Save current note and move to next char\n        current_note = current_char;\n\
    \        continue;\n    }\n    // Save last note length and add to result\n  \
    \  result.push_back(beat_length);\n    return result;", "    std::vector<long>\
    \ notes;\n    std::string current;\n    long beats = 0;\n\n    std::stack<long>\
    \ beats_to_process;\n    // Fill the stack with first note\n    notes.push_back(0);\n\
    \    beats_to_process.push(0);\n\n    while (beats_to_process.size() != 0) {\n\
    \        current = beats_to_process.top();\n        beats_to_process.pop();\n\
    \        if (current == 0)\n            continue;\n        if (current % 2 !=\
    \ 0)\n            notes.push_back(current / 2);\n        else\n            notes.push_back(current\
    \ / 2 + 1);\n\n        if (beats_to_process.size() % 4 == 0)\n            notes.push_back(1);\n\
    \        beats_to_process.push(current + 1);\n    }\n    return notes;", "  std::vector<long>\
    \ notes;\n  // Your code goes here\n  \n  \n  \n  std::reverse(music_string.begin(),\
    \ music_string.end()); \n  \n  \n  for (int i = 0; i < music_string.size(); i\
    \ += 2)\n  {\n    char current_char = music_string[i];\n    char next_char = music_string[i\
    \ + 1];\n    if (current_char == '.' || current_char == '|')\n    {\n      notes.push_back(4);\n\
    \    }\n    else if (current_char == 'o')\n    {\n      notes.push_back(0);\n\
    \    }\n    else if (next_char == '|')\n    {\n      notes.push_back(2);\n   \
    \ }\n    else if (next_char == 'o')\n    {\n      notes.push_back(1);\n    }\n\
    \    else if (next_char == '.')\n    {\n      notes.push_back(1);\n    }\n   \
    \ else\n    {\n      std::cerr << \"Unrecognized character in music string: \"\
    \ << current_char << \".\" << std::endl;\n    }\n  }\n\n  return notes;", "  \
    \  // Your code goes here\n    std::vector<long> beats;\n    int notes = 0;\n\
    \    for(int i = 0; i < music_string.size(); i++){\n        if(music_string[i]\
    \ == 'o' || music_string[i] == 'o|' || music_string[i] == '.|'){\n           \
    \ notes++;\n            if(notes > 4){\n                notes -= 4;\n        \
    \    }\n        }\n        else if(music_string[i] == '.'){\n            notes--;\n\
    \            if(notes < 0){\n                notes += 4;\n            }\n    \
    \    }\n    }\n    beats.push_back(notes);\n    return beats;", "  std::vector<long>\
    \ beats_count;\n  std::vector<long> beats_values;\n  for (int i = 0; i < music_string.length();\
    \ ++i) {\n    char current_char = music_string[i];\n    if (current_char == 'o')\
    \ {\n      beats_count.emplace_back(4);\n      beats_values.emplace_back(1);\n\
    \    } else if (current_char == 'o|') {\n      beats_count.emplace_back(2);\n\
    \      beats_values.emplace_back(1);\n    } else if (current_char == '.|') {\n\
    \      beats_count.emplace_back(1);\n      beats_values.emplace_back(1);\n   \
    \ } else {\n      std::cerr << \"invalid music string format\" << std::endl;\n\
    \      abort();\n    }\n  }\n  return beats_count;", "  std::vector<long> beats;\n\
    \  auto len = music_string.length();\n  for (int i = 0; i < len; i++) {\n    auto\
    \ pos = music_string.find_first_not_of(\" .\", i);\n    auto last = i;\n    if\
    \ (pos == std::string::npos) pos = len;\n    last = music_string.find_first_of(\"\
    \ .\", pos);\n    if (pos != std::string::npos) last = pos;\n    auto beat = last\
    \ - i;\n    if (beat > 0 && beat < 4) beats.push_back(beat);\n    i = last;\n\
    \  }\n  return beats;", "    std::vector<long> notes;\n    long note;\n    int\
    \ index = 0;\n    while (index < music_string.length()) {\n        note = std::count(music_string.begin(),\
    \ music_string.end(), '|');\n        if (note) {\n            notes.push_back(note\
    \ / 4);\n            music_string = music_string.erase(music_string.begin() +\
    \ index);\n        } else {\n            note = std::count(music_string.begin(),\
    \ music_string.end(), 'o');\n            if (note) {\n                notes.push_back(note\
    \ / 2);\n                music_string = music_string.erase(music_string.begin()\
    \ + index);\n            } else {\n                notes.push_back(1);\n     \
    \           music_string = music_string.erase(music_string.begin() + index);\n\
    \            }\n        }\n        index++;\n    }\n    return notes;", "  std::vector<long>\
    \ music_vector;\n  // To find the first character that is not 'o'\n  auto found\
    \ = std::find(music_string.begin(), music_string.end(), 'o');\n  // If there are\
    \ no notes in input, we return empty array\n  if (found == music_string.end())\n\
    \    return music_vector;\n  auto begin_note = std::find(music_string.begin(),\
    \ found, '|');\n  auto end_note = std::find(begin_note, music_string.end(), '|');\n\
    \  // If there are at least two notes we return empty array\n  if (begin_note\
    \ == music_string.end())\n    return music_vector;\n  // If we found a note we\
    \ find its length \n  // If this length is greater than two we return empty array\n\
    \  if (end_note == music_string.end())\n    return music_vector;\n  // If there\
    \ is only one note we return array with one beat of it\n  if (begin_note != end_note)\n\
    \    music_vector.push_back((long)end_note - music_string.begin());\n  // If there\
    \ is no note in the input we return empty array\n  if (begin_note == music_string.end())\n\
    \    return music_vector;\n  // We find two notes\n  // Firstly, we find last\
    \ note in the input\n  auto last_note = std::find(begin_note, end_note, '|');\n\
    \  // If we found one\n  if (last_note != music_string.end()) {\n    // We find\
    \ how many beats does each note last\n    auto note_beats = last_note - music_string.begin();\n\
    \    // If the last note is whole note we add one beat to it\n    if (begin_note\
    \ == music_string.end())\n      note_beats.push_back(0);\n    // If we found a\
    \ note with length greater than one we add more to array\n    if (note_beats.back()\
    \ > 1)\n      note_beats.pop_back();\n    // If the last note is half note we\
    \ add two beats to it\n    if (begin_note != music_string.end())\n      note_beats.push_back(note_beats.back());\n\
    \    // If we found a note with length greater than two we add more to array\n\
    \    if (note_beats.back() > 2)\n      note_beats.pop_back();\n    // If there\
    \ is more than one note we add more to array\n    if (note_beats.size() > 1)\n\
    \      note_beats.push_back(note_beats.back());\n    // We return the list of\
    \ beats corresponding to notes\n    return music_vector;\n  }\n  // If there is\
    \ no note in the input we return empty array\n  if (last_note == music_string.end())\n\
    \    return music_vector;\n  // If we found a note and we found another 'o' we\
    \ return the ", "  // Convert string to vector and initialize size of result vector\n\
    \  std::vector<int> result(music_string.size());\n  int index = 0;\n  // Iterate\
    \ over all characters of input string\n  for (char c : music_string) {\n    //\
    \ If current character is \"o\", store \"whole note\" index in result vector\n\
    \    if (c == 'o') {\n      result[index++] = 4;\n    // If current character\
    \ is \"|\", store \"half note\" index in result vector\n    } else if (c == '|')\
    \ {\n      result[index++] = 2;\n    // If current character is \".\", store \"\
    quarter note\" index in result vector\n    } else if (c == '.') {\n      result[index++]\
    \ = 1;\n    // Otherwise, store current character index in result vector\n   \
    \ } else {\n      result[index++] = static_cast<int>(c);\n    }\n  }\n  // Return\
    \ vector of result indices\n  return result;", "    // Your code here\n    std::vector<long>\
    \ beats(music_string.size());\n    int counter = 0;\n    int pos = 0;\n    while\
    \ (pos < (int)music_string.size()) {\n        char c = music_string[pos];\n  \
    \      if (c == '.') {\n            if (counter == 0) pos = pos+1;\n         \
    \   else if (counter == 1) pos = pos+1;\n            else pos = pos+1;\n     \
    \       counter = 0;\n        } else if (c == 'o') {\n            counter = counter%4;\n\
    \            pos = pos+1;\n        } else {\n            pos = pos+1;\n      \
    \  }\n    }\n    return beats;", "    // Return list of beats corresponding to\
    \ notes\n    std::vector<long> beats;\n\n    // Iterate over each character in\
    \ input string\n    for (char c : music_string) {\n        // If current character\
    \ is a note, add its beat to vector\n        if (c == '.' || c == 'o' || c ==\
    \ '|') {\n            beats.push_back(beats.size());\n        }\n    }\n\n   \
    \ return beats;", "    std::vector<long> beats;\n    // For each note in the string,\
    \ check if it lasts one beat.\n    auto is_last_beat = [](char ch) {\n       \
    \ return ch == 'o' || ch == '|' || ch == '.';\n    };\n    // Iterate over all\
    \ notes and save amount of beats for each.\n    for (char ch : music_string) {\n\
    \        if (is_last_beat(ch)) {\n            beats.push_back(beats.size());\n\
    \        } else {\n            beats.back()++;\n        }\n    }\n    return beats;",
  "    // Complete this function\n    std::cin >> music_string;\n    std::vector<long>\
    \ beats;\n    long beat = 0;\n    for (char ch : music_string) {\n        char\
    \ t = ch;\n        std::cin >> t;\n        beat = beat % 4;\n        beats.push_back(beat);\n\
    \        beat += 1;\n    }\n    return beats;", "  std::vector<long> beats(26);\n\
    \  for (auto& note : music_string) {\n    if (note == '.') {\n      beats[(int)note\
    \ - 'o'] += 1; // convert 'o' to int and substract 'o'\n    } else if (note ==\
    \ 'o') {\n      beats[(int)note - 'o'] += 4; // convert 'o' to int and add 4\n\
    \    } else if (note == '|') {\n      beats[(int)note - 'o'] += 2; // convert\
    \ 'o' to int and add 2\n    }\n  }\n  return beats;", "    std::vector<long> beats_count;\n\
    \    // Iterate over all characters in string and for each character store number\
    \ of beats for each note in vector beats_count.\n    std::size_t i = 1;\n    while\
    \ (i < music_string.size()) {\n        // Get character at index 'i'\n       \
    \ char current_char = music_string[i];\n        // If not end of string, get next\
    \ character and store number of beats in vector beats_count.\n        if (current_char\
    \ != '\\0' && current_char != '|') {\n            beats_count.push_back(static_cast<long>(i));\n\
    \        }\n        i++;\n    }\n    return beats_count;", "  std::vector<long>\
    \ notes;\n  // I couldn't think of a more elegant way to parse the music string.\n\
    \  // This should be pretty efficient.\n  for (char ch : music_string) {\n   \
    \ if (ch == 'o') {\n      notes.push_back(4L);\n    } else if (ch == '.') {\n\
    \      notes.push_back(1L);\n    } else if (ch == '|') {\n      notes.push_back(2L);\n\
    \    } else {\n      // ch = 'o|' or 'o'\n      // I add another note to the notes\
    \ vector that lasts 1 beat.\n      notes.push_back(1L);\n    }\n  }\n  return\
    \ notes;", "    std::vector<long> beats{};\n    long beats_to_beat = 0;\n    long\
    \ prev_beats_to_beat = 0;\n    bool first_note = true;\n    std::string current_note;\n\
    \    for (auto c : music_string) {\n        if (first_note) {\n            current_note\
    \ = c;\n            first_note = false;\n        } else {\n            if (c ==\
    \ ' ') {\n                beats_to_beat++;\n                beats.push_back(beats_to_beat);\n\
    \                prev_beats_to_beat = beats_to_beat;\n                beats_to_beat\
    \ = 0;\n            } else {\n                if (c == '|') {\n              \
    \      beats_to_beat++;\n                    if (prev_beats_to_beat == beats_to_beat)\
    \ {\n                        beats.push_back(prev_beats_to_beat);\n          \
    \              prev_beats_to_beat = 0;\n                        beats_to_beat\
    \ = 0;\n                    } else {\n                        beats_to_beat =\
    \ 0;\n                        prev_beats_to_beat = 0;\n                      \
    \  first_note = true;\n                    }\n                } else {\n     \
    \               beats_to_beat = 0;\n                }\n            }\n       \
    \ }\n    }\n    if (prev_beats_to_beat != 0)\n        beats.push_back(prev_beats_to_beat);\n\
    \    return beats;", "    std::stack<bool> stack;\n    stack.push(true);\n   \
    \ std::vector<long> music_results;\n    long current_beat = 0;\n    long current_note\
    \ = 0;\n    long last_note = 0;\n    for (char c : music_string) {\n        if\
    \ (c == 'o') {\n            stack.push(true);\n            current_note += 4;\n\
    \        }\n        else if (c == 'o|') {\n            stack.push(true);\n   \
    \         current_note += 2;\n        }\n        else if (c == '.|') {\n     \
    \       stack.push(true);\n            current_note += 1;\n        }\n       \
    \ else if (c == 'o|' || c == '.|') {\n            stack.top() = false;\n     \
    \       while (!stack.empty() && stack.top()) {\n                music_results.push_back(current_beat);\n\
    \                current_beat += 1;\n                last_note = current_note;\n\
    \                stack.pop();\n            }\n        }\n        else {\n    \
    \        assert(!\"Unexpected char encountered!\");\n        }\n    }\n    while\
    \ (!stack.empty()) {\n        music_results.push_back(current_beat);\n       \
    \ current_beat += 1;\n        last_note = current_note;\n        stack.pop();\n\
    \    }\n    return music_results;", "  std::vector<long> beats;\n  for (int i\
    \ = 0; i < music_string.length(); i++) {\n    char ch = music_string[i];\n   \
    \ if (ch == '|') {\n      // if | is found, push the length of previous beat\n\
    \      if (beats.size() > 0) beats.back() += 4;\n    } else {\n      if (ch ==\
    \ 'o') beats.push_back(4);\n      else if (ch == '.') beats.push_back(1);\n  \
    \    else beats.push_back(0);\n    }\n  }\n  return beats;", "    // Your code\
    \ here\n    std::vector<long> beats;\n    for (char c: music_string) {\n     \
    \   if (c == '.') {\n            beats.push_back(0);\n        } else if (c ==\
    \ 'o') {\n            beats.push_back(4);\n        } else if (c == '|') {\n  \
    \          beats.push_back(2);\n        } else {\n            assert(false);\n\
    \        }\n    }\n    return beats;", "    std::vector<long> beats;\n\n    for\
    \ (auto& char: music_string) {\n        char note = char;\n        if (note ==\
    \ 'o')\n            beats.push_back(4); // whole note, lasts four beats\n    \
    \    else if (note == 'o|')\n            beats.push_back(2); // half note, lasts\
    \ two beats\n        else\n            beats.push_back(1); // quater note, lasts\
    \ one beat\n    }\n\n    return beats;", "    std::vector<long> beats_vec;\n \
    \   // Your code here\n    std::stringstream ss(music_string);\n    std::string\
    \ symbol;\n    int temp;\n    while(ss)\n    {\n        ss >> symbol;\n      \
    \  switch(symbol) {\n            case 'o':\n                temp = 4;\n      \
    \          break;\n            case 'o|':\n                temp = 2;\n       \
    \         break;\n            case '.|':\n                temp = 1;\n        \
    \        break;\n            default:\n                break;\n        }\n   \
    \     beats_vec.push_back(temp);\n    }\n    return beats_vec;", "  std::vector<long>\
    \ beats(music_string.size());\n  auto beat_track = 0;\n  for (int i = 0; i < music_string.size();\
    \ i++) {\n    if (music_string[i] == '.' || music_string[i] == 'o') { // if the\
    \ current character is a dot or an o\n      beats[beat_track++] += 2; // add 2\
    \ beat to the current beat\n      if (beat_track < beats.size()) beats[beat_track++]\
    \ = 0; // and if it has at least 1 additional beat add it too\n    } else if (music_string[i]\
    \ == '|') {\n      beats[beat_track++]++; // if current character is an | add\
    \ 1 beat\n      if (beat_track < beats.size()) beats[beat_track++] = 0; // and\
    \ if it has at least 1 additional beat add it too\n    } else {\n      beats[beat_track++]++;\
    \ // if the current character is not a dot or an o, just add 1 beat\n    }\n \
    \ }\n  return beats;", "    // YOUR CODE GOES HERE\n    int last_beat = 0;\n \
    \   std::vector<long> beats;\n    for (auto it = music_string.begin(); it != music_string.end();\
    \ ++it) {\n        char symbol = *it;\n        if (symbol == '|') {\n        \
    \    beats.push_back(0);\n            last_beat = -1;\n        } else if (symbol\
    \ == 'o' || symbol == 'o|' || symbol == '.|') {\n            beats.push_back(0);\n\
    \            last_beat = 0;\n        } else {\n            auto i = (it - music_string.begin());\n\
    \            long beats_count = i - last_beat;\n            beats.push_back((int)std::ceil(beats_count\
    \ / 4.0));\n        }\n        last_beat = it;\n    }\n    return beats;", " \
    \   std::vector<long> beats;\n    int beat = 0;\n    int note = 0; //1 = note,\
    \ 0 = rest\n    for(char c : music_string) {\n        switch(c) {\n        case\
    \ 'o': \n            beat += 4; // beat += 4 means the next note lasts four beats,\
    \ this line is equivalent to: beat = 4; beat += 4;\n            break;\n     \
    \   case 'o|': \n            beat += 2; // beat += 2 means the next note lasts\
    \ two beats, this line is equivalent to: beat = 2; beat += 2;\n            break;\n\
    \        case '.|': \n            beat = 1; // beat += 1 means the next note lasts\
    \ one beat\n            break;\n        default:\n            break;\n       \
    \ }\n        beats.push_back(beat);\n        beat = 0;\n        note++;\n    }\n\
    \    return beats;", "    std::vector<long> number_of_beats(music_string.size());\n\
    \    std::string notes = \"o o| .| o| o| .| .| .| .| o o\";\n    std::string note;\n\
    \    int beat_length = 0;\n    for (int i = 0; i < music_string.size(); i++) {\n\
    \        note = notes.substr(beat_length, 1);\n        beat_length = std::stoi(note,\
    \ nullptr, 2);\n        number_of_beats[i] = beat_length;\n    }\n    return number_of_beats;",
  "  std::stack<long> beats;\n  beats.push(0);\n  for (int i = 0; i < music_string.length();\
    \ ++i) {\n    char c = music_string[i];\n    if (c == '.' || c == '|') {\n   \
    \   while (beats.top() < 4 && beats.size() > 0) beats.pop();\n      beats.push(0);\n\
    \    }\n    else if (c == 'o') {\n      while (beats.top() < 4) {\n        beats.pop();\n\
    \        beats.push(beats.top() + 4);\n      }\n    }\n    else if (c == '|')\
    \ {\n      while (beats.top() < 4) {\n        beats.pop();\n        beats.push(beats.top()\
    \ + 2);\n      }\n    }\n    else if (c == '.') {\n      while (beats.top() <\
    \ 2) {\n        beats.pop();\n        beats.push(beats.top() + 1);\n      }\n\
    \    }\n  }\n  std::vector<long> results;\n  while (beats.size() > 0) results.push(beats.top());\n\
    \  return results;", '    // TODO: Implement this function', "    std::vector<long>\
    \ beats;\n    beats.push_back(0);\n\n    // Parsing music string\n    for (int\
    \ i = 1; i < music_string.size(); ++i) {\n        std::string note = music_string.substr(0,\
    \ i);\n\n        // If current note is not '.', then check if it is 'o' or 'o|'.\n\
    \        // If yes, then add it to beats list.\n        // If no, just skip this\
    \ note.\n        if (note != \".\") {\n            if (note[1] == 'o') {\n   \
    \             beats.push_back(4);\n            } else if (note[1] == 'o') {\n\
    \                beats.push_back(2, 1);\n            } else if (note[1] == '.')\
    \ {\n                beats.push_back(1);\n            } else {\n             \
    \   continue;\n            }\n        }\n\n        // Remove current note and\
    \ get new note.\n        music_string = music_string.substr(i + 1);\n        note\
    \ = music_string;\n\n        // If current note is not 'o|', then check if it\
    \ is '.|'.\n        // If yes, then add it to beats list.\n        // If no, just\
    \ skip this note.\n        if (note != \"o|\") {\n            if (note[1] == '.')\
    \ {\n                beats.push_back(1);\n            } else if (note[1] == '|')\
    \ {\n                beats.push_back(2);\n            } else {\n             \
    \   continue;\n            }\n        }\n\n        // Remove current note and\
    \ get new note.\n        music_string = music_string.substr(i + 1);\n        note\
    \ = music_string;\n\n        // If current note is not '.|', then check if it\
    \ is 'o'.\n        // If yes, then add it to beats list.\n        // If no, just\
    \ skip this note.\n        if (note != \".|\") {\n            if (note[1] == 'o')\
    \ {\n                beats.push_back(4);\n            } else {\n             \
    \   continue;\n            }\n        }\n\n        // Remove current note and\
    \ get new note.\n        music_string = music_string.substr(i + 1);\n        note\
    \ = music_string;\n\n        // If current note is not 'o', then check if it is\
    \ '.'.\n        // If yes, then add it to beats list.\n        // If no, just\
    \ skip this note.\n        if (note != \".\") {\n            if (note[1] == 'o')\
    \ {\n                beats.push_back(4);\n            } else {\n             \
    \   continue;\n            }\n        }\n\n        // Remove current note and\
    \ get new note.\n        music_string = music_string.substr(i + 1);\n        note\
    \ = music_string;\n    }\n\n    return beats;", '    // Your code here', "   \
    \ // Write your code here\n    \n    std::vector<long> beats;\n    int cur_beat_counter\
    \ = 0;\n    int cur_beat_counter2 = 0;\n    bool note_flag = false;\n    char\
    \ note_char = '\\0';\n    for(int i = 0; i < music_string.length(); i++) {\n \
    \       if(music_string[i] == 'o'){\n            if(cur_beat_counter != 0)\n \
    \               beats.push_back(cur_beat_counter);\n                cur_beat_counter\
    \ = 0;\n            note_flag = true;\n            note_char = 'o';\n        }\
    \ else if(music_string[i] == '|'){\n            if(cur_beat_counter2 != 0)\n \
    \               beats.push_back(cur_beat_counter);\n                beats.push_back(cur_beat_counter2);\n\
    \                cur_beat_counter = 0;\n                cur_beat_counter2 = 0;\n\
    \            note_flag = true;\n            note_char = '|';\n        } else if(music_string[i]\
    \ == note_char){\n            if(!note_flag){\n                cur_beat_counter++;\n\
    \            }\n            note_flag = false;\n            note_char = '\\0';\n\
    \        } else {\n            if(note_flag){\n                cur_beat_counter2++;\n\
    \            }\n        }\n    }\n    if(cur_beat_counter2 != 0)\n        beats.push_back(cur_beat_counter);\n\
    \    return beats;", "    std::vector<long> return_list;\n    assert(music_string.length()\
    \ % 7 == 0);\n\n    for (int i = 0; i < music_string.length(); i += 7) {\n   \
    \     if (music_string[i] != 'o') {\n            std::cout << \"wrong string format\"\
    \ << std::endl;\n            break;\n        }\n        else if (music_string[i+1]\
    \ == '|') {\n            return_list.push_back(((music_string[i+2]-'0')*10) +\
    \ ((music_string[i+3]-'0')*10) + \n                                     ((music_string[i+4]-'0')*10)\
    \ + ((music_string[i+5]-'0')*10) + \n                                     ((music_string[i+6]-'0')));\n\
    \        }\n        else if (music_string[i+1] == '.') {\n            return_list.push_back(((music_string[i+2]-'0')*10)\
    \ + ((music_string[i+3]-'0')*10) + \n                                     ((music_string[i+4]-'0')*10)\
    \ + ((music_string[i+5]-'0')*10) + \n                                     ((music_string[i+6]-'0')*10)\
    \ + ((music_string[i+7]-'0')));\n        }\n        else if (music_string[i+1]\
    \ == 'o') {\n            return_list.push_back(((music_string[i+2]-'0')*10) +\
    \ ((music_string[i+3]-'0')*10) + \n                                     ((music_string[i+4]-'0')*10)\
    \ + ((music_string[i+5]-'0')*10) + \n                                     ((music_string[i+6]-'0')*10)\
    \ + ((music_string[i+7]-'0')*10) + \n                                     ((music_string[i+8]-'0')));\n\
    \        }\n        else {\n            std::cout << \"wrong string format\" <<\
    \ std::endl;\n        }\n    }\n    return return_list;", "    std::vector<long>\
    \ result(music_string.size());\n    assert(music_string[0] == 'o' || music_string[0]\
    \ == 'o|' || music_string[0] == '.|');\n    long beat = 0;\n    long beats = 0;\n\
    \    for (auto &c : music_string) {\n        switch (c) {\n        case 'o':\n\
    \            result[beat / 4 - 1]++;\n            if (result[beat / 4 - 1] ==\
    \ 4)\n                beats++;\n            beat++;\n            break;\n    \
    \    case 'o|':\n            result[beat / 4 - 1]++;\n            if (result[beat\
    \ / 4 - 2] == 2)\n                beats++;\n            beat++;\n            break;\n\
    \        case '.|':\n            result[beat / 4 - 1]++;\n            beat++;\n\
    \            break;\n        default:\n            result[beat / 4 - 2]++;\n \
    \           beat++;\n            break;\n        }\n    }\n    assert(beat % 4\
    \ == 0);\n    assert(beat == (music_string.size() - 1) * 4);\n    assert(beats\
    \ == result.size());\n    return result;", "    std::vector<long> beats(music_string.length());\n\
    \    for (size_t i = 0; i < music_string.length(); i++) {\n        auto beat =\
    \ i;\n        if (music_string[i] == '.') {\n            beat += 1;\n        }\n\
    \        if (music_string[i] == 'o') {\n            beat += 4;\n        }\n  \
    \      if (music_string[i] == '|') {\n            beat += 2;\n        }\n    \
    \    beats[i] = beat;\n    }\n    return beats;", "    std::vector<long> number_of_beats;\n\
    \    for (auto i = music_string.begin(); i != music_string.end(); ++i) {\n   \
    \     char c = *i;\n        number_of_beats.push_back(0);\n        if (c == '.'\
    \ || c == '|') {\n            ++i;\n            auto n = i - music_string.begin();\n\
    \            int beats = n / 4;\n            number_of_beats.push_back(beats);\n\
    \            i += 4;\n        }\n        if (c == 'o') {\n            auto n =\
    \ i - music_string.begin();\n            int beats = n / 4;\n            number_of_beats.push_back(beats);\n\
    \        }\n    }\n    return number_of_beats;", "    std::vector<long> beats_per_note;\n\
    \    beats_per_note.reserve(music_string.size());\n    for (size_t i = 0; i <\
    \ music_string.size(); ++i) {\n        char c = music_string[i];\n        long\
    \ beats = 0;\n        if (c == 'o') {\n            ++beats;\n        } else if\
    \ (c == '.') {\n            ++beats;\n        } else if (c == '|') {\n       \
    \     ++beats;\n        } else {\n            assert(false);\n        }\n    \
    \    beats_per_note.push_back(beats);\n    }\n    return beats_per_note;", '    //
    Your code here', "    std::vector<long> beats;\n    // Read one character at time\
    \ and check if it is \".\" or not.\n    long beat_time = 0;\n    char c = music_string[0];\n\
    \    if (c == '.') {\n        beat_time = -1;\n        music_string.erase(music_string.begin());\n\
    \        return beats;\n    }\n    else if ((c != 'o') && (c != 'o|') && (c !=\
    \ '.|')) {\n        throw std::runtime_error(\"Music format not supported.\");\n\
    \    }\n    beats.push_back(beat_time);\n    for (auto it = music_string.begin()\
    \ + 1; it != music_string.end(); ++it) {\n        char c_next = *it;\n       \
    \ if ((c_next == 'o') || (c_next == 'o|') || (c_next == '.|')) {\n           \
    \ beats.push_back(beat_time);\n            beat_time = 0;\n        }\n       \
    \ else if ((c_next == 'o') || (c_next == 'o|')) {\n            beat_time += 4;\n\
    \        }\n        else if ((c_next == '.') || (c_next == '.|')) {\n        \
    \    beat_time += 2;\n        }\n        else {\n            throw std::runtime_error(\"\
    Music format not supported.\");\n        }\n    }\n    beats.push_back(beat_time);\n\
    \    return beats;", "    std::regex pattern(\"^([\\.|o]\\\\w+)\\\\s*\");\n  \
    \  auto music_list = std::vector<long>();\n    std::smatch matches;\n    while\
    \ (std::regex_search(music_string, matches, pattern)) {\n        music_list.push_back(matches.size());\n\
    \        music_string.replace(matches.position(0), matches.size(), \"\");\n  \
    \  }\n    return music_list;", "    // Your code goes here.\n    std::vector<long>\
    \ beats_note;\n    for(int i = 0; i <= music_string.size() - 1; i+=4)\n    {\n\
    \        if (music_string[i] == 'o')\n        {\n            beats_note.push_back(4);\n\
    \        }\n        else if (music_string[i] == 'o|')\n        {\n           \
    \ beats_note.push_back(2);\n        }\n        else if (music_string[i] == '.|')\n\
    \        {\n            beats_note.push_back(1);\n        }\n        else\n  \
    \      {\n            std::cout << \"Error!\";\n        }\n    }\n    return beats_note;",
  "    std::map<char, std::vector<long>> map;\n    for (char c : music_string) {\n\
    \        // If there is a note in the string, add it to the map\n        if (c\
    \ == 'o' || c == 'o|' || c == '.|') {\n            if (map.find(c) == map.end())\
    \ {\n                // Create an empty vector of beats representing a note and\
    \ add it to the map\n                map[c] = std::vector<long>();\n         \
    \   }\n            // Add the beats to the existing note vector\n            map[c].push_back(static_cast<long>(music_string.size()));\n\
    \        }\n        // If no note is in the string, add an entry to the map with\
    \ a list of beats equal to one\n        else if (map.find(c) == map.end()) {\n\
    \            map[c] = std::vector<long>(1);\n        }\n    }\n\n    // Create\
    \ a vector of zeroes\n    std::vector<long> result;\n    // Go through each note\
    \ in the map and add the beat counts to result\n    for (auto& note : map) {\n\
    \        result.push_back(note.second.size());\n    }\n    return result;", " \
    \   // Write your code here\n    std::vector<long> beats(music_string.size() /\
    \ 4);\n    std::vector<char> temp_music(music_string.size());\n    for (size_t\
    \ i = 0; i < music_string.size(); i++) {\n        auto c = music_string[i];\n\
    \        auto temp_char = c == '.' || c == 'o' ? c : '|';\n        temp_music[i]\
    \ = temp_char;\n    }\n\n    for (int i = 0; i != temp_music.size(); i++) {\n\
    \        if (temp_music[i] == 'o') {\n            beats[i % 4] = 4;\n        }\
    \ else if (temp_music[i] == 'o|') {\n            beats[i % 4] = 2;\n        }\
    \ else if (temp_music[i] == '.|') {\n            beats[i % 4] = 1;\n        }\n\
    \    }\n\n    return beats;", '    // Your code here', "    std::vector<std::string>\
    \ split_music(music_string.begin(), music_string.end());\n    std::vector<long>\
    \ beats(split_music.size());\n    long current_beat = -1;\n    for(auto &note:split_music){\n\
    \        if(note == \"o\"){\n            beats[current_beat] += 4;\n        }\n\
    \        else if(note == \"o|\"){\n            beats[current_beat] += 2;\n   \
    \     }\n        else if(note == \".|\"){\n            beats[current_beat] +=\
    \ 1;\n        }\n        else{\n            throw std::runtime_error(\"Unsupported\
    \ note!\");\n        }\n        current_beat++;\n    }\n    return beats;", " \
    \ std::vector<long> beats;\n\n  int i = 0;\n  while (i < music_string.length())\
    \ {\n    if (music_string[i] == 'o') {\n      beats.push_back(i);\n      i +=\
    \ 4;\n    } else if (music_string[i] == 'o|') {\n      beats.push_back(i);\n \
    \     i += 2;\n    } else if (music_string[i] == '.|') {\n      beats.push_back(i);\n\
    \      i += 1;\n    }\n    i++;\n  }\n  return beats;", "    std::vector<long>\
    \ result;\n    assert(music_string.size() % 4 == 0);\n    for (auto i = 0; i <\
    \ music_string.size(); i+=4) {\n        if (music_string[i] == 'o' && music_string[i+1]\
    \ == 'o' && music_string[i+2] == '|' && music_string[i+3] == '|')\n          \
    \  result.push_back(4);\n        else if (music_string[i] == 'o' && music_string[i+1]\
    \ == 'o' && music_string[i+2] == '|')\n            result.push_back(2);\n    \
    \    else if (music_string[i] == '.' && music_string[i+1] == '|')\n          \
    \  result.push_back(1);\n    }\n    return result;", "    std::vector<std::string>\
    \ music_tokens = split(music_string, ' ');\n    std::vector<long> beats(music_tokens.size(),\
    \ 0L);\n\n    for (size_t i = 0; i < music_tokens.size(); ++i) {\n        std::string\
    \ note_token = music_tokens[i];\n        if (note_token == \"o\") {\n        \
    \    for (size_t j = 0; j < beats.size(); ++j)\n                beats[j] += 4L;\n\
    \        } else if (note_token == \"o|\") {\n            for (size_t j = 0; j\
    \ < beats.size(); ++j)\n                beats[j] += 2L;\n        } else if (note_token\
    \ == \".|\") {\n            for (size_t j = 0; j < beats.size(); ++j)\n      \
    \          beats[j] += 1L;\n        } else {\n            std::cerr << \"Invalid\
    \ music string!\" << std::endl;\n            std::exit(1);\n        }\n    }\n\
    \    return beats;", "    // Your code goes here\n    std::vector<long> beat_count;\n\
    \    long beat_count;\n    int notes[6];\n    std::string note_letter(\" \");\n\
    \    for (size_t i = 0; i < music_string.length(); i++) {\n        note_letter\
    \ = music_string[i];\n        if (note_letter == \"o\")\n            notes[0]\
    \ = 1;\n        else if (note_letter == \"|\")\n            notes[1] = 1;\n  \
    \      else if (note_letter == \".\")\n            notes[2] = 1;\n        else\
    \ if (note_letter == \"o\")\n            notes[3] = 1;\n        else if (note_letter\
    \ == \"o\")\n            notes[4] = 1;\n        else if (note_letter == \".\"\
    )\n            notes[5] = 1;\n        else\n            continue;\n        beat_count\
    \ = 0;\n        while (notes[0] > 0 || notes[1] > 0 || notes[2] > 0 || notes[3]\
    \ > 0 || notes[4] > 0 || notes[5] > 0) {\n            notes[0]--;\n          \
    \  notes[1]--;\n            notes[2]--;\n            notes[3]--;\n           \
    \ notes[4]--;\n            notes[5]--;\n            beat_count++;\n        }\n\
    \        beat_count.push_back(beat_count);\n    }\n    return beat_count;", '    //
    write your code here', "    int counter = 0;\n    std::vector<long> beats;\n \
    \   std::string last_note;\n\n    music_string.remove_prefix(music_string.find_first_not_of(\"\
    . |\"));\n    music_string.remove_suffix(2);\n    for(auto &i : music_string)\
    \ {\n        if(i != '.' && i != ' ' && i != ',')\n            counter++;\n  \
    \      last_note = last_note + (i % 128);\n    }\n    beats.push_back(long(counter));\n\
    \    beats.push_back(long(counter));\n    beats.push_back(long(counter));\n  \
    \  beats.push_back(long(counter));\n    beats.push_back(long(counter));\n    beats.push_back(long(counter));\n\
    \    beats.push_back(long(counter));\n    beats.push_back(long(counter));\n  \
    \  beats.push_back(long(counter));\n    beats.push_back(long(counter));\n    beats.push_back(long(counter));\n\
    \    beats.push_back(long(counter));\n    beats.push_back(long(counter));\n  \
    \  beats.push_back(long(counter));\n    beats.push_back(long(counter));\n    return\
    \ beats;", "    std::vector<long> beats;\n    long beat = 1;\n    // Loop through\
    \ the string one character at a time\n    for (char c: music_string) {\n     \
    \   switch (c) {\n            case 'o':\n            case 'O':\n             \
    \   beats.push_back(beat);\n                beat += 4;\n                break;\n\
    \            case '.':\n            case '|':\n                beats.push_back(beat);\n\
    \                beat += 2;\n                break;\n            default:\n  \
    \              throw std::runtime_error(\"Invalid musical note in input string\"\
    );\n        }\n    }\n    return beats;", '    // Your code here', "    int number_of_beats\
    \ = 0;\n    std::vector<long> beats;\n\n    std::stack<bool> stack;\n    std::stack<int>\
    \ current_beat;\n    int current_beat_counter = 0;\n    int current_note_counter\
    \ = 0;\n    // for each character in string\n    for (auto &c: music_string) {\n\
    \        // if the character is a note symbol\n        if (c.compare('o') == 0)\
    \ {\n            // if the note is not already in the stack\n            if (!stack.empty())\
    \ {\n                // remove the top of stack\n                stack.top();\n\
    \            }\n            // else the note is not in stack\n            else\
    \ {\n                // add it to the stack\n                stack.push(true);\n\
    \            }\n        }\n        // if the character is | symbol\n        else\
    \ if (c.compare('|') == 0) {\n            // if the stack is not empty and stack\
    \ is currently in the top of stack\n            if (!stack.empty() && stack.top())\
    \ {\n                // remove the top of stack\n                stack.top();\n\
    \            }\n            // else the stack is not empty and stack is not in\
    \ the top of stack\n            else {\n                // add the stack to the\
    \ stack\n                stack.push(true);\n            }\n        }\n       \
    \ // if the character is . symbol\n        else if (c.compare('.') == 0) {\n \
    \           // if the stack is currently in the top of stack\n            if (!stack.empty()\
    \ && stack.top()) {\n                // remove top of stack\n                stack.top();\n\
    \            }\n            // else the stack is not in the top of stack\n   \
    \         else {\n                // add stack to the stack\n                stack.push(true);\n\
    \            }\n        }\n        // if the character is space symbol\n     \
    \   else if (c.compare(' ') == 0) {\n            // if the stack is currently\
    \ in the top of stack\n            if (!stack.empty() && stack.top()) {\n    \
    \            // remove top of stack\n                stack.top();\n          \
    \  }\n            // else the stack is not in the top of stack\n            else\
    \ {\n                // add stack to the stack\n                stack.push(true);\n\
    \            }\n        }\n        // if the character is end of music string\
    \ symbol\n        else if (c == '\\0' || c == '\\n') {\n            // if the\
    \ stack is currently in the top of stack\n            if (!stack.empty() && stack.top())\
    \ {\n                // remove top of stack\n                stack.top();\n  \
    \          }\n            // else the stack is not in the top of stack\n     \
    \       else {\n                // add stack to the stack\n                stack.push(true);\n\
    \            }\n        }\n        // if the character is not o o | . | space\
    \ symbol\n        else {\n            // if the stack is currently in the top\
    \ of stack\n            if (!stack.empty() && stack.top()) {\n               \
    \ // remove top of stack\n                stack.top();\n            }\n      \
    \      // else the stack is not in the top of stack\n            else {\n    \
    \            // add stack to the stack\n                stack.push(true);\n  \
    \          }\n        }\n\n        // if the stack is empty and character is not\
    \ o o | . | space ", "    long int beats = 0;\n    std::string current_note;\n\
    \    std::vector<long> notes;\n    for (auto c: music_string) {\n        if (c\
    \ == 'o') {\n            notes.push_back(beats);\n            beats = 0;\n   \
    \         current_note = \"\";\n        } else {\n            beats += 1;\n  \
    \          current_note += c;\n        }\n    }\n    notes.push_back(beats);\n\
    \    return notes;", "    std::vector<std::string> tokens = split_string(music_string,\
    \ ' ');\n    std::vector<long> output_values;\n    std::size_t last_index = 0;\n\
    \n    while (last_index < tokens.size()) {\n        if (tokens[last_index] ==\
    \ 'o')\n            output_values.push_back(0);\n        else if (tokens[last_index]\
    \ == 'o|')\n            output_values.push_back((tokens.size() - last_index -\
    \ 1) / 4);\n        else if (tokens[last_index] == '.|')\n            output_values.push_back((tokens.size()\
    \ - last_index - 1) / 2);\n        last_index++;\n    }\n    return output_values;",
  "    std::vector<long> music_notes;\n    for (auto &note : music_string) {\n   \
    \     if (note == 'o') {\n            music_notes.push_back(4);\n        } else\
    \ if (note == 'o|') {\n            music_notes.push_back(2, 2);\n        } else\
    \ if (note == '.|') {\n            music_notes.push_back(1, 1);\n        } else\
    \ {\n            std::cerr << \"Parsing error: Unknown note \" << note << std::endl;\n\
    \            std::exit(-1);\n        }\n    }\n\n    return music_notes;", " \
    \ std::vector<long> notes(music_string.length()/2 - 1, 0);\n\n  long beat_counts\
    \ = 0, prev_beat_counts = -1;\n  for (int i = 0; i < music_string.length(); ++i)\
    \ {\n    auto c = static_cast<char>(music_string[i]);\n    if (c == 'o') {\n \
    \     if (prev_beat_counts == -1) {\n        prev_beat_counts = beat_counts;\n\
    \      }\n      notes[i/2 - 1] = notes[i/2 - 1 + prev_beat_counts];\n      beat_counts\
    \ = 1;\n    } else if (c == '|') {\n      notes[i/2 - 1] = notes[i/2 - 1 + beat_counts];\n\
    \      beat_counts = 0;\n    } else {\n      assert(c == ' ');\n      notes[i/2\
    \ - 1] = notes[i/2 - 1 + beat_counts];\n      beat_counts = 0;\n    }\n  }\n \
    \ return notes;", "    auto n = music_string.size();\n    std::vector<long> result(n\
    \ % 8);\n    for (int i = 0; i < n; i += 8)\n        result[i / 8] = result[i]\
    \ + ((long)(music_string[i + 7]) - '0') * (10 - i);\n    return result;", "  \
    \  // Complete the code by filling code below\n    // Write your code here\n \
    \   std::vector<long> beats{};\n    long current_beat = 0;\n    for (auto c :\
    \ music_string) {\n        if (c == 'o') {\n            beats.push_back(current_beat);\n\
    \            current_beat = 0;\n            continue;\n        }\n        if (c\
    \ != '|') {\n            current_beat++;\n            continue;\n        }\n \
    \       long beats_to_last = current_beat * 4 / 3;\n        current_beat++;\n\
    \    }\n    beats.push_back(current_beat);\n    return beats;", '    // Write
    your code here', "    if (music_string.empty()) {\n        throw std::invalid_argument(\"\
    Empty string\");\n    }\n\n    std::vector<long> beats_per_note;\n    int current_note\
    \ = 0;\n    int current_beat = 0;\n\n    std::string current_note_string;\n  \
    \  for (char c : music_string) {\n        if (c == 'o') {\n            beats_per_note.push_back(current_beat);\n\
    \            current_beat += 4;\n            current_note_string = \"o\";\n  \
    \      } else if (c == '|') {\n            beats_per_note.push_back(current_beat);\n\
    \            current_beat += 2;\n            current_note_string = \"o\";\n  \
    \      } else if (c == '.') {\n            beats_per_note.push_back(current_beat);\n\
    \            current_beat = 1;\n            current_note_string = \"o\";\n   \
    \     }\n        else {\n            current_beat = 0;\n            current_note_string\
    \ = c;\n        }\n    }\n    beats_per_note.push_back(current_beat);\n\n    return\
    \ beats_per_note;", "    std::vector<long> beats;\n    // Step 1: Extract all\
    \ notes\n    std::string notes = music_string;\n    notes.erase(0, 1); // Remove\
    \ first symbol from string because we'll be checking them later.\n    notes.erase(notes.size()\
    \ - 1, 0); // Remove last symbol from string because we'll be checking them later.\n\
    \    char note;\n    std::string current_note;\n    long beat = 1;\n    bool isNote\
    \ = false;\n    long length = 1;\n    for (auto c : notes) {\n        if (isNote)\
    \ {\n            if (c == ' ') {\n                isNote = false;\n          \
    \  } else {\n                current_note += c;\n                isNote = true;\n\
    \                length = 1;\n            }\n        } else {\n            if\
    \ (c == '|') {\n                isNote = true;\n            } else {\n       \
    \         isNote = false;\n            }\n        }\n    }\n    current_note +=\
    \ '\\0';\n    notes += '\\0';\n    // Step 2: Parse all notes\n    for (auto c\
    \ : notes) {\n        if (c == 'o') {\n            beats.push_back(beat);\n  \
    \          beat += 4;\n        } else if (c == '.') {\n            beats.push_back(beat);\n\
    \            beat += 1;\n        } else {\n            beat += 1;\n        }\n\
    \    }\n    // Step 3: Parse all notes with 'o' or 'o|' at the beginning\n   \
    \ for (auto c : notes) {\n        if (c == 'o') {\n            beats.push_back(beat);\n\
    \            beat += 4;\n        } else if (c == 'o|') {\n            beats.push_back(beat);\n\
    \            beat += 2;\n        } else {\n            beat += 1;\n        }\n\
    \    }\n    // Step 4: Parse all notes with 'o' or 'o|' at the end\n    for (auto\
    \ c : notes) {\n        if (c == 'o') {\n            beats.push_back(beat);\n\
    \            beat += 4;\n        } else if (c == 'o|') {\n            beats.push_back(beat);\n\
    \            beat += 1;\n        } else {\n            beat += 1;\n        }\n\
    \    }\n    // Step 5: Parse all notes with '.' at the beginning\n    for (auto\
    \ c : notes) {\n        if (c == '.') {\n            beats.push_back(beat);\n\
    \            beat += 1;\n        } else {\n            beat += 1;\n        }\n\
    \    }\n    // Step 6: Parse all notes with '.' at the end\n    for (auto c :\
    \ notes) {\n        if (c == '.') {\n            beats.push_back(beat);\n    \
    \        beat += 1;\n        } else {\n            beat += 1;\n        }\n   \
    \ }\n    return beats;", "    std::vector<long> beats;\n    std::string current_note\
    \ = music_string;\n    long beat_duration = 0;\n    long current_beat = 0;\n \
    \   while (current_note.length() != 0) {\n        if (current_note[0] == 'o')\
    \ {\n            beat_duration = current_beat;\n            beats.push_back(beat_duration);\n\
    \            current_beat = 0;\n        }\n        else if (current_note[0] ==\
    \ 'o|') {\n            current_beat += 2;\n        }\n        else if (current_note[0]\
    \ == '.|') {\n            current_beat += 1;\n        }\n        else if (current_note[0]\
    \ == '|') {\n            current_beat = 1;\n        }\n        else {\n      \
    \      throw std::runtime_error(\"Unknown note '\" + current_note[0] + \"'\");\n\
    \        }\n        current_note = current_note.substr(1);\n    }\n    return\
    \ beats;", "    std::vector<long> beats;\n    std::string note = music_string;\n\
    \    if (note.size() != 3) {\n        std::cout << \"The music string should be\
    \ of length 3!\" << std::endl;\n        return beats;\n    }\n    std::string\
    \ rest = note.substr(1, note.size() - 2);\n    if (note[1] == 'o') {\n       \
    \ if (note[2] == '|') {\n            long rests = std::stoi(note.substr(2, note.size()\
    \ - 3));\n            beats.push_back(rests);\n        }\n        std::cout <<\
    \ \"whole-note beat count \" << std::stoi(note) << std::endl;\n    } else if (note[1]\
    \ == 'o|') {\n        if (note[2] == '|') {\n            long rests = std::stoi(note.substr(2,\
    \ note.size() - 3));\n            beats.push_back(rests);\n        } else {\n\
    \            std::cout << \"half-note beat count \" << std::stoi(note) << std::endl;\n\
    \        }\n    } else if (note[1] == '.') {\n        long rests = std::stoi(note.substr(2,\
    \ note.size() - 3));\n        beats.push_back(rests);\n        std::cout << \"\
    rests\" << rests << std::endl;\n    }\n    return beats;", "  std::vector<long>\
    \ beats(26);\n  int curr = -1;\n  for (auto ch : music_string) {\n    if (ch ==\
    \ 'o') {\n      if (curr > -1) {\n        beats[curr] += 4;\n      }\n      curr\
    \ = -1;\n    } else if (ch == 'o|') {\n      if (curr > -1) {\n        beats[curr]\
    \ += 2;\n      }\n      curr = -1;\n    } else if (ch == '.|') {\n      if (curr\
    \ > -1) {\n        beats[curr] += 1;\n      }\n      curr = -1;\n    } else {\n\
    \      ++curr;\n    }\n  }\n  return beats;", "    std::vector<long> beats(music_string.length());\n\
    \    long beat = 0;\n    long beat_total = 0;\n    long num_notes = 0;\n    std::string\
    \ last_note;\n    for (char &note: music_string) {\n        last_note = note;\n\
    \        switch (note) {\n        case 'o':\n            beat_total++;\n     \
    \       beats[num_notes++] = beat;\n            break;\n        case '|':\n  \
    \          beat_total++;\n            beats[num_notes++] = beat;\n           \
    \ beat = 0;\n            break;\n        case '.':\n            beats[num_notes++]\
    \ = beat;\n            beat = 0;\n            break;\n        default:\n     \
    \       beat++;\n        }\n    }\n    beats[num_notes++] = beat;\n    return\
    \ beats;", "    std::vector<long> result;\n\n    // Your code goes here\n    long\
    \ notes[4] = {};\n\n    char current_note = music_string[0];\n\n    for (int i\
    \ = 1; i < music_string.size(); ++i) {\n        if (current_note == 'o') {\n \
    \           if (music_string[i] != '|') {\n                notes[1] += 4;\n  \
    \          }\n        }\n        else if (current_note == 'o|') {\n          \
    \  if (music_string[i] != '|') {\n                notes[2] += 2;\n           \
    \ }\n        }\n        else if (current_note == '.|') {\n            if (music_string[i]\
    \ != '|') {\n                notes[1] += 1;\n            }\n        }\n      \
    \  else {\n            assert(0);\n        }\n\n        current_note = music_string[i];\n\
    \    }\n\n    result.push_back(notes[0]);\n\n    for (int i = 1; i < notes.size()\
    \ - 1; ++i) {\n        result.push_back(notes[i] + notes[i - 1]);\n    }\n\n \
    \   return result;", "    std::vector<long> beats(music_string.length() / 4);\n\
    \    long total = 0;\n    for (size_t i = 0; i < music_string.length(); ++i) {\n\
    \        if (music_string[i] == 'o') {\n            total += 4;\n        } else\
    \ if (music_string[i] == '|') {\n            total += 2;\n        } else if (music_string[i]\
    \ == ' ') {\n            total++;\n        } else if (music_string[i] == '.')\
    \ {\n            total++;\n        } else {\n            assert(false);\n    \
    \    }\n        beats.push_back(total);\n    }\n    return beats;", "    // Create\
    \ empty list to store beat values\n    std::vector<long> beats(music_string.size());\n\
    \    // Convert string into list of beat values\n    long temp = 0;\n    bool\
    \ is_beat = false;\n    for (int i = 0; i < music_string.size(); ++i) {\n    \
    \    if (is_beat) {\n            beats[i] = temp;\n            is_beat = false;\n\
    \            temp = -1;\n        } else {\n            if (music_string[i] ==\
    \ 'o') {\n                is_beat = true;\n                temp = i;\n       \
    \     }\n        }\n    }\n    return beats;", "    // Write your code here.\n\
    \    // return vector<int>()\n    std::vector<int> song_beats(music_string.length());\n\
    \    int i = 0;\n    for (char c : music_string) {\n        switch (c) {\n   \
    \     case 'o':\n            song_beats[i] = 4;\n            break;\n        case\
    \ 'o|':\n            song_beats[i] = 2;\n            break;\n        case '.|':\n\
    \            song_beats[i] = 1;\n            break;\n        default:\n      \
    \      throw std::runtime_error(\"Unknown musical note.\");\n        }\n     \
    \   i++;\n    }\n    return song_beats;", '    // Your code here', "    // Code\
    \ here\n    std::vector<long> result;\n    result.assign(1,0);\n    \n    for\
    \ (auto iter = music_string.begin(); iter != music_string.end(); ++iter) {\n \
    \       if (*iter == 'o') {\n            ++result[result.size() - 4];\n      \
    \  } else if (*iter == 'o|') {\n            ++result[result.size() - 2];\n   \
    \     } else if (*iter == '.|') {\n            ++result[result.size() - 1];\n\
    \        } else {\n            assert(false);\n        }\n    }\n    \n    return\
    \ result;", "    assert(music_string[0] != '\\0');\n    std::vector<long> beats;\n\
    \    long total_beats = 0;\n    long last_note = 0;\n    bool is_whole_note =\
    \ false;\n    for (char c: music_string) {\n        if (c == '|') {\n        \
    \    beats.push_back(total_beats);\n            total_beats = 0;\n           \
    \ last_note = 0;\n            is_whole_note = true;\n        } else if (c == '\
    \ ') {\n            beats.push_back(total_beats);\n            total_beats = 0;\n\
    \        } else if (c == 'o') {\n            beats.push_back(total_beats);\n \
    \           total_beats = 0;\n            last_note = 1;\n            is_whole_note\
    \ = true;\n        } else {\n            if (is_whole_note) {\n              \
    \  total_beats += last_note;\n            }\n            last_note = 0;\n    \
    \        is_whole_note = false;\n        }\n    }\n    beats.push_back(total_beats);\n\
    \    return beats;", "    std::vector<long> beats;\n    // Initialize list of\
    \ beats\n    for (long beats = 1; beats < 4; beats++) {\n        beats.push_back(0L);\n\
    \    }\n    std::vector<std::string> symbols = {\".\", \"o\", \"|\"};\n    long\
    \ last_beat = 1L;\n    for (auto symbol : symbols) {\n        long beats_before\
    \ = 0L;\n        long beats_after = 0L;\n        for (char symbol2 : music_string)\
    \ {\n            if (symbol2 == symbol) {\n                beats_before++;\n \
    \           } else if (symbol2 == '.') {\n                beats_after++;\n   \
    \         } else {\n                if (beats_before == last_beat) {\n       \
    \             beats[beats_before - 1]++;\n                    beats_before = 0L;\n\
    \                } else {\n                    last_beat = beats_before;\n   \
    \                 beats[beats_before - 1]++;\n                    beats_before\
    \ = 0L;\n                }\n            }\n        }\n        if (beats_before\
    \ != 0L) {\n            last_beat = beats_before;\n            beats[beats_before\
    \ - 1]++;\n        }\n    }\n    return beats;", "  std::vector<long> beats;\n\
    \  assert(music_string.length() > 1 && music_string[0] == 'o');\n  std::string\
    \ curr_note = music_string.substr(1);\n  for (char ch: curr_note) {\n    if (ch\
    \ == 'o') {\n      beats.push_back(0);\n    } else if (ch == '|') {\n      beats.push_back(4);\n\
    \    } else if (ch == '.') {\n      beats.push_back(1);\n    } else {\n      assert(0);\n\
    \    }\n  }\n  return beats;", "    // write your code here\n    std::vector<long>\
    \ beats_vector;\n    for (int i = 0; i < music_string.length(); i++) {\n     \
    \   if (music_string[i] == 'o') {\n            beats_vector.push_back(4L);\n \
    \       } else if (music_string[i] == '|') {\n            beats_vector.push_back((2L\
    \ * 2L) / 4);\n        } else if (music_string[i] == '.') {\n            beats_vector.push_back(1L);\n\
    \        } else {\n            assert(false);\n        }\n    }\n    return beats_vector;",
  "    std::vector<long> beats;\n    std::string delimiters = \" o| .| \";\n    std::string\
    \ token;\n    bool is_note = false;\n    long beat_number = 1;\n    std::vector<std::string>\
    \ note_names;\n    while (std::getline(music_string, token, delimiters)) {\n \
    \       token = std::string(token);\n        if (token == \"o\") {\n         \
    \   is_note = false;\n        }\n        else if (token == \"o|\") {\n       \
    \     is_note = true;\n            note_names.push_back(token);\n        }\n \
    \       else if (token == \".|\") {\n            beat_number = 1;\n          \
    \  beats.push_back(beat_number);\n        }\n        else {\n            if (is_note)\
    \ {\n                long current_beat = beat_number + 1;\n                beat_number\
    \ = current_beat;\n                beats.push_back(beat_number);\n           \
    \ }\n            else {\n                beats.push_back(beat_number);\n     \
    \       }\n            is_note = !is_note;\n        }\n    }\n    return beats;",
  "  std::vector<long> beats;\n  // Iterate through every character in input string\n\
    \  for (char &note : music_string) {\n    // Add current note in array if it is\
    \ one of o,o| or .| and if there is not another note in array\n    if (note ==\
    \ 'o' ||\n        note == 'o|' ||\n        note == '.|') {\n      beats.push_back(0);\n\
    \    } else if (note.empty()) {\n      // Remove all notes from array\n    } else\
    \ {\n      // Add note in array and update its last beat\n      beats.back() +=\
    \ 1;\n    }\n  }\n  return beats;", '    // Your implementation here', '    //
    Your code here', "    // Your code goes here\n    std::vector<long> beats;\n \
    \   int note_counter = 0;\n    for (std::size_t i = 0; i < music_string.length();\
    \ i++) {\n        char character = music_string[i];\n        if (character ==\
    \ 'o') {\n            note = note_counter;\n            beats.push_back(note_counter);\n\
    \            note_counter = 0;\n        } else if (character == '|') {\n     \
    \       note_counter++;\n        } else if (character == '.') {\n            if\
    \ (note_counter == 0) {\n                note = note_counter;\n            }\n\
    \            note_counter = 0;\n        } else {\n            note_counter++;\n\
    \        }\n    }\n    return beats;", "  // I assume that music_string represents\
    \ musical notes in the format described above and that\n  // there are 4 lines\
    \ with exactly one note (except for the first line which is empty). Also\n  //\
    \ the note symbols are in lower case.\n  // You can implement more sophisticated\
    \ parsing if needed.\n  std::vector<long> beat_counters;\n  std::vector<long>\
    \ beats_counter;\n  // We need this counter only if we encounter a new line.\n\
    \  long line_counter = 0;\n  // Iterate over all characters in music_string and\
    \ process them accordingly.\n  for (char& c : music_string) {\n    // Process\
    \ letter 'o'\n    if (c == 'o') {\n      // Check whether current note is valid\
    \ and increment beat_counters.\n      if (line_counter == 0) beat_counters.push_back(0);\n\
    \      beat_counters[beat_counters.size() - 1]++;\n      // Reset beat counter\
    \ to 0, if we encounter next letter 'o'.\n      line_counter++;\n    } else if\
    \ (c == '|') {\n      // Check whether current note is valid and increment beat_counters.\n\
    \      if (line_counter == 0) beat_counters.push_back(0);\n      beat_counters[beat_counters.size()\
    \ - 1]++;\n      beat_counters.push_back(0);\n      line_counter++;\n    } else\
    \ {\n      // Check if we have encountered a new line and reset beat_counters.\n\
    \      if (line_counter == 1) {\n        beat_counters.clear();\n        line_counter\
    \ = 0;\n      }\n      // Process symbol '.' or '|'.\n      line_counter++;\n\
    \    }\n  }\n  // Return beat_counters.\n  return beat_counters;", "    // Your\
    \ code here\n    return std::vector<long>();", "    // Your code here\n    std::stack<std::string>\
    \ stack;\n    stack.push(music_string);\n    std::vector<long> beats;\n    while\
    \ (!stack.empty()) {\n        std::string music_str = stack.top();\n        stack.pop();\n\
    \        music_str.erase(std::remove_if(music_str.begin(), music_str.end(), ::isspace),\
    \ music_str.end());\n        if (music_str.size() == 0)\n            beats.push_back(-1);\n\
    \        else if (music_str[0] != 'o' && music_str[0] != 'o|' && music_str[0]\
    \ != '.|')\n            beats.push_back(-1);\n        else if (music_str[0] ==\
    \ 'o') {\n            beats.push_back(4);\n            stack.push(music_str.substr(1));\n\
    \        }\n        else if (music_str[0] == 'o|') {\n            beats.push_back(2);\n\
    \            stack.push(music_str.substr(1));\n        }\n        else if (music_str[0]\
    \ == '.|') {\n            beats.push_back(1);\n            stack.push(music_str.substr(1));\n\
    \        }\n        else\n            throw std::runtime_error(\"Incorrect music\
    \ string!\");\n    }\n    return beats;", "    std::vector<std::string> tokens(std::ssplit(music_string,\
    \ ' '));\n    std::vector<long> beats(tokens.size());\n    // Fill this array\
    \ with the number of beats of each note in music string.\n    // You can do it\
    \ by counting the amount of spaces inside music_string and for each space\n  \
    \  // counting how many times it repeats.\n    // This can be done in O(n) by\
    \ iterating over string and counting how much spaces it has\n    // and iterating\
    \ over it again and counting the amount of times it is repeated.\n    // For example:\
    \ music_string = \"o o| .| o| o| .| .| .| .| o o\" has four spaces:\n    // o\
    \   o  . .  o \n    // but music_string = \"o o| .| o| o| .| .| .| .| o o\" has\
    \ only one space:\n    // o o| .| o| o| .| .| .| .| o o\n    // So the solution\
    \ for this exercise is:\n    // O(n)\n    for (int i = 0; i < tokens.size(); i++)\
    \ {\n        std::string s = tokens[i];\n        std::size_t pos = 0;\n      \
    \  while (pos < s.size() && s[pos] == ' ') {\n            pos++;\n        }\n\
    \        std::size_t len = pos - 1;\n        beats[i] = len;\n    }\n    return\
    \ beats;", "    assert(music_string.length() == 144);\n    std::vector<long> beats;\n\
    \    long beat_length = 0, temp_beat = 0, i = 0;\n    for(; i < music_string.length();\
    \ ++i) {\n        char c = music_string[i];\n        // a whole note\n       \
    \ if(c == 'o') {\n            temp_beat = beat_length;\n            beat_length\
    \ = 0;\n            beats.push_back(temp_beat);\n        // a half note\n    \
    \    } else if(c == 'o|') {\n            temp_beat = beat_length / 2;\n      \
    \      beat_length = beat_length % 2;\n            beats.push_back(temp_beat);\n\
    \        // a quater note\n        } else if(c == '.|') {\n            beats.push_back(beat_length);\n\
    \            beat_length = 0;\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ beats_not_last;\n    std::vector<std::string> notes;\n    for (char ch: music_string)\
    \ {\n        if (ch == '.') {\n            notes.push_back(\".\");\n        }\
    \ else if (ch == 'o') {\n            notes.push_back(\"o\");\n        } else if\
    \ (ch == '|') {\n            notes.push_back(\"|\");\n        } else if (ch ==\
    \ 'o|') {\n            notes.push_back(\"o|\");\n        } else {\n          \
    \  throw std::runtime_error(\"Unexpected character\");\n        }\n    }\n   \
    \ if (notes.size() == 0) {\n        throw std::runtime_error(\"Can't find note\
    \ in string\");\n    }\n    bool last_note = true;\n    long beat = 1;\n    for\
    \ (auto ch: notes) {\n        if (ch == \"o\") {\n            if (last_note) {\n\
    \                beats_not_last.push_back(beat);\n            }\n            beat\
    \ = 1;\n            last_note = true;\n        } else if (ch == \"o|\") {\n  \
    \          if (last_note) {\n                beats_not_last.push_back(beat);\n\
    \            }\n            beat = 1;\n            last_note = true;\n       \
    \ } else if (ch == \"|\") {\n            if (last_note) {\n                beats_not_last.push_back(beat);\n\
    \            }\n            beat = 1;\n            last_note = false;\n      \
    \  } else if (ch == \".\") {\n            beat = 1;\n            last_note = false;\n\
    \        }\n    }\n    return beats_not_last;", "  std::vector<long> beats;\n\
    \  for (char i : music_string) {\n    switch (i) {\n      case 'o':\n        beats.push_back(4);\
    \ // whole note, lasts four beats\n        break;\n      case 'o|':\n        beats.push_back(2);\
    \ // half note, lasts two beats\n        break;\n      case '.|':\n        beats.push_back(1);\n\
    \        break;\n      default:\n        throw std::runtime_error(\"invalid music\
    \ note \" + std::to_string(i));\n    }\n  }\n  return beats;", "    auto music_string_it\
    \ = music_string.begin();\n    std::vector<long> beats_count;\n    bool found_note\
    \ = false;\n    long current_beat = 0;\n\n    // Iterate through string in reverse\
    \ order because we do most of parsing work in reversed order\n    while (music_string_it\
    \ != music_string.end()) {\n        // Skip any space characters\n        while\
    \ ((music_string_it != music_string.end()) && isspace(*music_string_it))\n   \
    \         ++music_string_it;\n        if (*music_string_it == 'o') {\n       \
    \     found_note = true;\n            ++music_string_it;\n            beats_count.push_back(current_beat);\n\
    \            current_beat = 0;\n        } else if (*music_string_it == 'o|') {\n\
    \            // Parsing notes ends with 'o|', so this note is repeated\n     \
    \       found_note = true;\n            ++music_string_it;\n            beats_count.push_back(current_beat);\n\
    \            current_beat = 0;\n        } else if (*music_string_it == '.') {\n\
    \            // Parsing notes ends with '.', so this note is repeated\n      \
    \      found_note = true;\n            ++music_string_it;\n            beats_count.push_back(current_beat);\n\
    \            current_beat = 0;\n        } else if (found_note && isdigit(*music_string_it))\
    \ {\n            // Found note, record current beat and increment counter\n  \
    \          ++current_beat;\n            ++music_string_it;\n        } else if\
    \ (found_note && isdigit(*music_string_it)) {\n            // Found note, record\
    \ current beat and increment counter\n            ++current_beat;\n          \
    \  ++music_string_it;\n        } else {\n            // Found note or end of string,\
    \ stop parsing\n            break;\n        }\n    }\n    return beats_count;",
  "    std::vector<long> num_beats(music_string.size() / 4 + 1); // +1 for the last\
    \ note.\n    std::vector<char> music_chars(music_string.begin(), music_string.end());\n\
    \    for (size_t i = 0; i < music_string.size(); i++) {\n        // If current\
    \ character is '.' we are in the quater note. Otherwise, we are in the whole note.\n\
    \        if (music_chars[i] == '.') {\n            num_beats[4 * i + 1] = 1;\n\
    \            num_beats[4 * i + 2] = 1;\n            num_beats[4 * i + 3] = 1;\n\
    \        } else {\n            if (music_chars[i] == 'o' || music_chars[i] ==\
    \ 'O') {\n                num_beats[4 * i + 1] = 4;\n                num_beats[4\
    \ * i + 2] = 2;\n                num_beats[4 * i + 3] = 1;\n            } else\
    \ {\n                num_beats[4 * i + 1] = 2;\n                num_beats[4 *\
    \ i + 2] = 3;\n                num_beats[4 * i + 3] = 1;\n            }\n    \
    \    }\n    }\n    return num_beats;", "    std::vector<long> beats(music_string.size());\n\
    \    bool last_note = false;\n    for (auto i = 0; i < music_string.size(); i++)\
    \ {\n        char c = music_string[i];\n        if (last_note == true) {\n   \
    \         if (c == '.') {\n                beats[i] = 4;\n            }\n    \
    \        if (c == 'o') {\n                beats[i] = 4;\n            }\n     \
    \       if (c == '|') {\n                beats[i] = 2;\n            }\n      \
    \  }\n        if (c == 'o') {\n            last_note = true;\n        }\n    \
    \    if (c == '|') {\n            last_note = false;\n        }\n    }\n    return\
    \ beats;", "    // your code here\n    std::vector <long> music_list;\n    int\
    \ note_length;\n    for (int i = 0; i < music_string.length(); i++) {\n      \
    \  if (music_string[i] == 'o') {\n            note_length = 4; // whole note\n\
    \        }\n        else if (music_string[i] == 'o|') {\n            note_length\
    \ = 2; // half note\n        }\n        else if (music_string[i] == '.|') {\n\
    \            note_length = 1; // quater note\n        }\n        else {\n    \
    \        note_length = 0;\n            throw std::invalid_argument(\"Invalid music\
    \ string\");\n        }\n        music_list.push_back(note_length);\n    }\n \
    \   return music_list;", "  // You can return any data structure you want here.\n\
    \  std::vector <long> result(music_string.size());\n  for (size_t i = 0; i < music_string.size();\
    \ i++) {\n    if (music_string[i] == '.') result[i] = 1;\n    else if (music_string[i]\
    \ == 'o') result[i] = 4;\n    else result[i] = 0;\n  }\n  return result;", " \
    \ std::vector<long> beats;\n  for (int i = 0; i < music_string.size(); i++) {\n\
    \    if (music_string[i] == 'o') {\n      beats.push_back(4);\n    } else if (music_string[i]\
    \ == '.') {\n      beats.push_back(1);\n    } else if (music_string[i] == '|')\
    \ {\n      beats.push_back(2);\n    } else {\n      assert(false);\n    }\n  }\n\
    \  return beats;", "    std::vector<long> beats_per_note;\n    std::stack<long>\
    \ beats_stack;\n    long beats = 0, note = 0;\n    for (char c: music_string)\
    \ {\n        if (c == '|') {\n            beats_stack.push(beats);\n         \
    \   beats = 0;\n            note++;\n        } else if (c == '.') {\n        \
    \    beats++;\n        } else {\n            long new_beats = beats_stack.top()\
    \ + 1;\n            beats_stack.pop();\n            if (new_beats > beats) {\n\
    \                beats = new_beats;\n                note++;\n            }\n\
    \        }\n    }\n    beats_stack.push(beats);\n    while (beats_stack.top()\
    \ > 0) {\n        beats_stack.pop();\n    }\n    while (!beats_stack.empty())\
    \ {\n        beats = beats_stack.top();\n        note++;\n        beats_stack.pop();\n\
    \        beats_per_note.push_back(note);\n    }\n    return beats_per_note;",
  "    std::vector<long> beats;\n\n    // We split the input string by spaces to get\
    \ an array of notes\n    auto notes = music_string.split(' ');\n\n    // We take\
    \ note in loop and check whether notes are 'o' or '.'\n    long beat = 0;\n  \
    \  for (auto& note : notes) {\n        switch (note[0]) {\n        case 'o':\n\
    \        case 'O':\n            beat += 4;\n            break;\n        case '.':\n\
    \            beat += 2;\n            break;\n        default:\n            beat\
    \ += 1;\n            break;\n        }\n        beats.push_back(beat);\n    }\n\
    \    return beats;", "    // Your code here\n    std::vector<std::string> vs =\
    \ split_by_space(music_string);\n    std::vector<long> output(vs.size());\n  \
    \  for (size_t i = 0; i < vs.size(); i++) {\n        std::string s = vs[i];\n\
    \        if (s == \"o\") {\n            output[i] = 4;\n        } else if (s ==\
    \ \"o|\") {\n            output[i] = 2;\n        } else if (s == \".|\") {\n \
    \           output[i] = 1;\n        } else {\n            assert(false);\n   \
    \     }\n    }\n    return output;", "    assert(music_string.size() > 0);\n \
    \   std::vector<long> result{};\n    auto pos = music_string.find(\"o\");\n  \
    \  while (pos != std::string::npos) {\n        auto end_pos = music_string.find(\"\
    \ \", pos);\n        if (end_pos == std::string::npos) {\n            assert(end_pos\
    \ == 0);\n            result.push_back(0);\n            pos = music_string.find(\"\
    o\", pos + 1);\n        }\n        else {\n            result.push_back(std::stoi(music_string.substr(pos,\
    \ end_pos - pos).substr(1)));\n            pos = music_string.find(\" \", pos\
    \ + 1);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ music_notes = std::ssplit(music_string, \" \");\n    std::vector<long> beats;\n\
    \    // We are assuming that note has a length of one beat.\n    for (size_t i\
    \ = 0; i < music_notes.size(); ++i) {\n        std::string note = music_notes[i];\n\
    \        if (note[0] == 'o') {\n            beats.push_back(i);\n        } else\
    \ if (note[0] == 'o|') {\n            beats.push_back(i + 4);\n        } else\
    \ if (note[0] == '.|') {\n            beats.push_back(i + 2);\n        }\n   \
    \ }\n    return beats;", "    assert(music_string.length() % 12 == 0);\n    //\
    \ Convert string into a list of beats and store it in 'beats'\n    std::vector<long>\
    \ beats;\n    for (auto i = music_string.length() - 1; i >= 0; i -= 12) {\n  \
    \      beats.push_back(std::stol(music_string.substr(i, 12)));\n    }\n    std::sort(beats.begin(),\
    \ beats.end());\n    std::vector<long> beats_count;\n    // Calculate how many\
    \ beats each note last\n    for (auto i = beats.size() - 1; i >= 0; i -= 12) {\n\
    \        if (beats[i] == beats[i - 1] + 4) {\n            beats_count.push_back(beats.size()\
    \ - (i - 1));\n        } else {\n            beats_count.push_back(4);\n     \
    \   }\n    }\n    return beats_count;", "    auto beats_count = music_string.size();\n\
    \    long beats_count2 = 0;\n    long beats_count3 = 0;\n    long beats_count4\
    \ = 0;\n    long beats_count5 = 0;\n    long beats_count6 = 0;\n    long beats_count7\
    \ = 0;\n    long beats_count8 = 0;\n    long beats_count9 = 0;\n    long beats_count10\
    \ = 0;\n    long beats_count11 = 0;\n    long beats_count12 = 0;\n    long beats_count13\
    \ = 0;\n    long beats_count14 = 0;\n    long beats_count15 = 0;\n    long beats_count16\
    \ = 0;\n    long beats_count17 = 0;\n    long beats_count18 = 0;\n    long beats_count19\
    \ = 0;\n    long beats_count20 = 0;\n    long beats_count21 = 0;\n    long beats_count22\
    \ = 0;\n    long beats_count23 = 0;\n    long beats_count24 = 0;\n    long beats_count25\
    \ = 0;\n    long beats_count26 = 0;\n    long beats_count27 = 0;\n    long beats_count28\
    \ = 0;\n    long beats_count29 = 0;\n    long beats_count30 = 0;\n    long beats_count31\
    \ = 0;\n    long beats_count32 = 0;\n    long beats_count33 = 0;\n    long beats_count34\
    \ = 0;\n    long beats_count35 = 0;\n    long beats_count36 = 0;\n    long beats_count37\
    \ = 0;\n    long beats_count38 = 0;\n    long beats_count39 = 0;\n    long beats_count40\
    \ = 0;\n    long beats_count41 = 0;\n    long beats_count42 = 0;\n    long beats_count43\
    \ = 0;\n    long beats_count44 = 0;\n    long beats_count45 = 0;\n    long beats_count46\
    \ = 0;\n    long beats_count47 = 0;\n    long beats_count48 = 0;\n    long beats_count49\
    \ = 0;\n    long beats_count50 = 0;\n    long beats_count51 = 0;\n    long beats_count52\
    \ = 0;\n    long beats_count53 = 0;\n    long beats_count54 = 0;\n    long beats_count55\
    \ = 0;\n    long beats_count56 = 0;\n    long beats_count57 = 0;\n    long beats_count58\
    \ = 0;\n    long beats_count59 = 0;\n    long beats_count60 = 0;\n    long beats_count61\
    \ = 0;\n    long beats_count62 = 0;\n    long beats_count63 = 0;\n    long beats_count64\
    \ = 0;\n    long beats_count65 = 0;\n    long beats_count66 = 0;\n    long beats_count67\
    \ = 0;\n    long beats_count68 = 0;\n    long beats_count69 = 0;\n    long beats_count70\
    \ = 0;\n    long beats_count71 = 0;\n    long beats_count72 = 0;\n    long beats_count73\
    \ = 0;\n    long ", "  std::vector<long> beats(music_string.length() / 4);\n \
    \ for (int i = 0; i < music_string.length(); i += 4) {\n    switch (music_string[i])\
    \ {\n      case 'o':\n        beats.push_back(4 - i);\n        break;\n      case\
    \ 'o|':\n        beats.push_back(2 - i);\n        break;\n      case '.|':\n \
    \       beats.push_back(i + 1);\n        break;\n    }\n  }\n  return beats;",
  "    std::vector<long> beats;\n    // You can see that every line in the string\
    \ starts with one or two 'o's. \n    // The second character tells us if the note\
    \ is complete or half or quarter note. \n    // If it is not complete, we will\
    \ just take the next one and continue on to the next note. \n    // If it is,\
    \ than we will have to look at the first two characters, figure out what type\
    \ of note it is.\n    // 'o' and 'o|' means that it is a whole note; 'o|' means\
    \ that it is half note; '.|' means that it is a \n    // quarter note.\n    //\
    \ We will also store the number of beats for each note in an array called beats.\n\
    \    // The first element of beats will be the whole note.\n    // The second\
    \ element of the array will be half note.\n    // The third element will be quarter\
    \ note.\n    // The length of the string will always be less than or equal to\
    \ the number of 'o's in the string.\n    // We can use C++ std::string to easily\
    \ parse out the string into a vector of strings.\n    std::vector<std::string>\
    \ music_strings = split_string(music_string, '.');\n    // We will be using c++\
    \ string stream to split up the string and parse out the parts.\n    // We can\
    \ use C++ string stream to easily parse out the string into a vector of strings.\n\
    \    std::string current_music_string;\n    long current_beat = 0;\n    // Iterate\
    \ over all of the music strings until we run out of music strings.\n    for (auto\
    \ &music_string : music_strings) {\n        if (music_string.length() > 0) {\n\
    \            // This checks if the music string is empty or null.\n          \
    \  // If it is then we have hit the end of the line so we can stop the loop.\n\
    \            if (music_string[0] == 'o') {\n                // This is the first\
    \ time this string starts with 'o' so save the beat for that music string.\n \
    \               beats.push_back(current_beat);\n                // Set the current\
    \ music string to empty.\n                music_string = \"\";\n             \
    \   // Increment the current beat.\n                current_beat++;\n        \
    \    } else {\n                // Parse out the string for the first two characters.\n\
    \                std::string music_string_2 = music_string.substr(0, 1);\n   \
    \             if (music_string_2[0] == 'o') {\n                    // This is\
    \ a whole note so save the beats for that music string.\n                    beats.push_back(current_beat);\n\
    \                    // Set the current music string to empty.\n             \
    \       music_string = \"\";\n                    // Increment the current beat.\n\
    \                    current_beat++;\n                } else if (music_string_2[0]\
    \ == 'o') {\n                    // This is a half note so save the beats for\
    \ that music string.\n                    beats.push_back(current_beat);\n   \
    \                 // Set the current music string to empty.\n                \
    \    music_string = \"\";\n                    // Increment the current beat.\n\
    \                    current_beat++;\n"]
stop_tokens:
- "\n}"
