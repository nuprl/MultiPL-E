name: HumanEval_15_string_sequence
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n <= 0)\n        return \"0\";\n    std::string ret = \"0 \";\n\
    \    while (n != 0) {\n        ret += std::to_string(n%10) + \" \";\n        n\
    \ /= 10;\n    }\n    std::reverse(ret.begin(), ret.end());\n    return ret;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1clvi6bt: /tmp/tmp1clvi6bt.cpp:22: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n >= 0);\n    std::string s;\n    while (n > 0) {\n       \
    \ s += ' ' + (n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpx_ezarsi: /tmp/tmpx_ezarsi.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream ss;\n    ss << n;\n    return ss.str();\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphpkb7ach: /tmp/tmphpkb7ach.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  long start = 0;\n  std::string result = \"0\";\n  for (long i = 1;;\
    \ ++i)\n    if (i >= n) result += \" \" + i;\n    else\n      result += \" \"\
    \ + std::to_string(start++);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream result;\n  result << 0;\n  for (long i = 1; i <=\
    \ n; i++)\n    result << \" \" << i;\n  return result.str();\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  oss << n;\n  return oss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpstzjbhyb: /tmp/tmpstzjbhyb.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  int k = 0;\n  std::stringstream ss;\n  ss << n;\n  while (!ss.eof())\
    \ {\n    ss << ' ' << k;\n    k += 1;\n  }\n  return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; i++)\n        ss\
    \ << (i + 1);\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpdw4053tw: /tmp/tmpdw4053tw.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpavpg5jnf: /tmp/tmpavpg5jnf.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream os;\n    long i;\n    os << \"[\";\n    for (i\
    \ = 0; i <= n; i++) {\n        os << i;\n        if (i < n) {\n            os\
    \ << \" \";\n        }\n    }\n    os << \"]\";\n    return os.str();\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsezc0nj6: /tmp/tmpsezc0nj6.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n == 0) return \"0\";\n  std::stringstream ss;\n  for (long i =\
    \ 0; i < n; ++i) {\n    ss << i << \" \";\n  }\n  return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpwyly080t: /tmp/tmpwyly080t.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  long s = 1;\n  std::string s;\n  for (int i = 1; i <= n; ++i) {\n  \
    \  s = to_string(i) + \" \" + s;\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcp4_bjqy.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpcp4_bjqy.cpp:10:15: error: conflicting declaration \u2018\
    std::string s\u2019\n   10 |   std::string s;\n      |               ^\n/tmp/tmpcp4_bjqy.cpp:9:8:\
    \ note: previous declaration as \u2018long int s\u2019\n    9 |   long s = 1;\n\
    \      |        ^\n/tmp/tmpcp4_bjqy.cpp:12:9: error: \u2018to_string\u2019 was\
    \ not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   12 |     s = to_string(i) + \" \" + s;\n      |         ^~~~~~~~~\n    \
    \  |         std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcp4_bjqy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpcp4_bjqy.cpp:14:10: error: could\
    \ not convert \u2018s\u2019 from \u2018long int\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   14 |   return s;\n  \
    \    |          ^\n      |          |\n      |          long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n >= 0);\n    \n    std::string ret = \"\";\n    \n    if (n\
    \ == 0)\n        return ret;\n    \n    for (int i = 0; i < n; ++i)\n        ret\
    \ += (i < 10 ? \" 0 \" : \" \");\n    \n    return ret;\n}\nint main() {\n   \
    \ auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpdpogrse_: /tmp/tmpdpogrse_.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n <= 0)\n    return \"0\";\n  std::string ans = \"\";\n  for (long\
    \ i = 0; i < n; ++i) {\n    ans += std::to_string(i);\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1h4oevq3: /tmp/tmp1h4oevq3.cpp:20: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  long i = 0;\n  while (n > 0) {\n    ss.write(std::to_string(++i).data(),\
    \ std::to_string(n).size());\n    n -= std::to_string(n).size();\n  }\n  return\
    \ ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpkzp2r8vg: /tmp/tmpkzp2r8vg.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s(std::to_string(n));\n    size_t pos = 0;\n    while\
    \ (pos < s.size()) {\n        s[pos++] = ' ';\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp8j8unyls: /tmp/tmp8j8unyls.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Initialize a vector of strings storing the numbers from 0 to n\n\
    \  std::vector<std::string> v(n + 1);\n  for (int i = 0; i < n; ++i) {\n    v[i]\
    \ = std::to_string(i);\n  }\n  return std::accumulate(v.begin(), v.end(), std::string(),\
    \ \n    [](std::string result, std::string s) { result += s + \" \"; return result;\
    \ });\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn7o_5634: /tmp/tmpn7o_5634.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Code adapted from https://stackoverflow.com/a/10458549/1001213\n\
    \  char buffer[1000];\n  for (int i = 1; i < n; ++i) {\n    // convert i's binary\
    \ representation to string and append it to buffer.\n    itoa(i, buffer, 10);\n\
    \    buffer += \" \";\n  }\n  return buffer;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp20buhxzg.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp20buhxzg.cpp:13:5: error: \u2018itoa\u2019 was not declared\
    \ in this scope\n   13 |     itoa(i, buffer, 10);\n      |     ^~~~\n/tmp/tmp20buhxzg.cpp:14:12:\
    \ error: invalid operands of types \u2018char [1000]\u2019 and \u2018const char*\u2019\
    \ to binary \u2018operator+\u2019\n   14 |     buffer += \" \";\n      |     ~~~~~~~^~~~~~\n\
    /tmp/tmp20buhxzg.cpp:14:15: error:   in evaluation of \u2018operator+=(char [1000],\
    \ const char*)\u2019\n   14 |     buffer += \" \";\n      |               ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n<1)\n    return \"0\";\n  std::string s = \"\";\n  for (long i\
    \ = 0; i <= n; i++)\n    s+= std::to_string(i);\n  return s;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvseiqbv4: /tmp/tmpvseiqbv4.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::string ans = \"0\";\n  long mod = n % 10;\n\
    \  if (mod > 0) {\n    ans += std::to_string(mod);\n    n = n / 10;\n  }\n  while\
    \ (n > 0) {\n    ans += std::to_string(n % 10) + \" \";\n    n = n / 10;\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpud7rdn66: /tmp/tmpud7rdn66.cpp:25: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::string s;\n   std::iota(s.begin(), s.end(), 0);\n   size_t len\
    \ = s.length();\n   return std::string(s.begin(), s.begin() + n);\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpqa_vnyuu: /tmp/tmpqa_vnyuu.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tassert(n > 0);\n\tstd::string str;\n\tfor(int i = 0; i <= n; i++) {\n\
    \t\tstr += std::to_string(i);\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpm6f_93lm: /tmp/tmpm6f_93lm.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::ostringstream out;\n   assert(n);\n   for(long i = 1; i <= n;\
    \ ++i)\n      out << i << \" \";\n   return out.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpyt23525a: /tmp/tmpyt23525a.cpp:10: std::string string_sequence(long\
    \ int): Assertion `n' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    for(int i = 0; i <= n; ++i) {\n        res +=\
    \ std::to_string(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpc8j_260c: /tmp/tmpc8j_260c.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s(0, ' ');\n    for (long i = 1; i < n; i++) s += ' '\
    \ + (i - 1);\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpnxjoxd5x: /tmp/tmpnxjoxd5x.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Base case\n  if (n <= 0) {\n    return \"0\";\n  }\n  // Build up\
    \ result\n  std::string result = \"0 \";\n  // Perform recursion, starting from\
    \ n-1\n  for (long i = n-1; i >= 1; i--) {\n    result += std::to_string(i) +\
    \ \" \";\n  }\n  // Return result\n  return result;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpul1bweo0: /tmp/tmpul1bweo0.cpp:25: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n < 0) return \"0\";\n  std::string s;\n  while (n > 0) {\n    s.insert(s.end(),\
    \ n % 10, n % 10 + 10);\n    n /= 10;\n  }\n  return s;\n}\nint main() {\n   \
    \ auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpqtwkpzea: /tmp/tmpqtwkpzea.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // If n is less than or equal to 0 then print a number as 0.\n  if (n\
    \ <= 0) {\n    return \"0\";\n  }\n  // If n is greater than or equal to 10 then\
    \ print a number as 10.\n  if (n >= 10) {\n    return \"10\";\n  }\n  // If n\
    \ is greater than or equal to 100 then print a number as 100.\n  if (n >= 100)\
    \ {\n    return \"100\";\n  }\n  // If n is greater than or equal to 1000 then\
    \ print a number as 1000.\n  if (n >= 1000) {\n    return \"1000\";\n  }\n  //\
    \ If n is greater than or equal to 10000 then print a number as 10000.\n  if (n\
    \ >= 10000) {\n    return \"10000\";\n  }\n  // If n is greater than or equal\
    \ to 100000 then print a number as 100000.\n  if (n >= 100000) {\n    return \"\
    100000\";\n  }\n  // If n is greater than or equal to 1000000 then print a number\
    \ as 1000000.\n  if (n >= 1000000) {\n    return \"1000000\";\n  }\n  // If n\
    \ is greater than or equal to 10000000 then print a number as 10000000.\n  if\
    \ (n >= 10000000) {\n    return \"10000000\";\n  }\n  // If n is greater than\
    \ or equal to 100000000 then print a number as 100000000.\n  if (n >= 100000000)\
    \ {\n    return \"100000000\";\n  }\n  // If n is greater than or equal to 1000000000\
    \ then print a number as 1000000000.\n  if (n >= 1000000000) {\n    return \"\
    1000000000\";\n  }\n  // If n is greater than or equal to 10000000000 then print\
    \ a number as 10000000000.\n  if (n >= 10000000000) {\n    return \"10000000000\"\
    ;\n  }\n  // If n is greater than or equal to 100000000000 then print a number\
    \ as 100000000000.\n  if (n >= 100000000000) {\n    return \"100000000000\";\n\
    \  }\n  // If n is greater than or equal to 1000000000000 then print a number\
    \ as 1000000000000.\n  if (n >= 1000000000000) {\n    return \"1000000000000\"\
    ;\n  }\n  // If n is greater than or equal to 10000000000000 then print a number\
    \ as 10000000000000.\n  if (n >= 10000000000000) {\n    return \"10000000000000\"\
    ;\n  }\n  // If n is greater than or equal to 100000000000000 then print a number\
    \ as 100000000000000.\n  if (n >= 100000000000000) {\n    return \"100000000000000\"\
    ;\n  }\n  // If n is greater than or equal to 1000000000000000 then print a number\
    \ as 1000000000000000.\n  if (n >= 1000000000000000) {\n    return \"1000000000000000\"\
    ;\n  }\n  // If n is greater than or equal to 10000000000\n}\nint main() {\n \
    \   auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9kb3lqjr: /tmp/tmp9kb3lqjr.cpp:78: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    long cur = 1;\n    for(long i = 0; i <=\
    \ n; i++) {\n        s += to_string(cur);\n        cur *= 10;\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl75rrb84.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpl75rrb84.cpp:12:14: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   12 |         s += to_string(cur);\n      |              ^~~~~~~~~\n      |\
    \              std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl75rrb84.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n == 0)\n    return std::string();\n  std::string str = \"\";\n\
    \  for (int i = 0; i < n; i++) {\n    str += std::to_string(i);\n  }\n  return\
    \ str;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp5334anuj: /tmp/tmp5334anuj.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tlong i;\n\tstd::string s(n+1, ' ');\n\tfor (i = 0; i < n; i++)\n\t\t\
    s[i] = '0'+i;\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgytibao0: /tmp/tmpgytibao0.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n >= 0 && n < 100000);\n    std::string result;\n    for (int\
    \ i = 0; i < n; i++) {\n        result += to_string(i);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpohq6393_.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpohq6393_.cpp:12:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   12 |         result += to_string(i);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpohq6393_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    long digits = n;\n    while (digits)\n\
    \    {\n        ss << digits;\n        digits /= 10;\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp2x2qyrt6: /tmp/tmp2x2qyrt6.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; ++i) s += std::to_string(i)\
    \ + \" \";\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxz5wffxi: /tmp/tmpxz5wffxi.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0l9pkgkm: /tmp/tmp0l9pkgkm.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s;\n\tstd::for_each(std::begin(std::istream_iterator<int>(cin)),\n\
    \t             std::end(std::istream_iterator<int>()),\n\t             [&](const\
    \ auto& i)\n\t             {\n\t                 s += std::to_string(i);\n\t \
    \            });\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq7vqcclq.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpq7vqcclq.cpp:10:54: error: \u2018cin\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cin\u2019?\n   10 |  std::for_each(std::begin(std::istream_iterator<int>(cin)),\n\
    \      |                                                      ^~~\n      |   \
    \                                                   std::cin\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpq7vqcclq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:60:18:\
    \ note: \u2018std::cin\u2019 declared here\n   60 |   extern istream cin;  ///\
    \ Linked to standard input\n      |                  ^~~\n/tmp/tmpq7vqcclq.cpp:11:52:\
    \ error: no matching function for call to \u2018end(std::istream_iterator<int>)\u2019\
    \n   11 |               std::end(std::istream_iterator<int>()),\n      |     \
    \                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq7vqcclq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:99:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n>0);\n  std::ostringstream oss;\n  oss << \"0 \";\n  for (long\
    \ i=n-1; i>=0; i--)\n    oss << i << \" \";\n  return oss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgl4ut9st: /tmp/tmpgl4ut9st.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n>0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream s;\n  s << n;\n  for (long i = 0; i < n; i++) s <<\
    \ \" \" << i;\n  return s.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpyo00n6ul: /tmp/tmpyo00n6ul.cpp:17: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ans = \"0\";\n    while(n > 0) {\n        ans += \" \"\
    +std::to_string(n);\n        n -= 1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpbc82ci_9: /tmp/tmpbc82ci_9.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tlong i = 1;\n\tstd::string s = \"\";\n\twhile (i<n) s += std::to_string(i++);\n\
    \treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn5jv45_t: /tmp/tmpn5jv45_t.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string out;\n    for(int i=0;i<n;i++)\n        out+=std::to_string(i);\n\
    \    return out;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmprsj35slp: /tmp/tmprsj35slp.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; ++i) {\n    s += to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp515kfrjm.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp515kfrjm.cpp:11:10: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |     s += to_string(i);\n      |          ^~~~~~~~~\n      |         \
    \ std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp515kfrjm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    for(int i = 0; i < n; ++i)\n        str += std::to_string(i);\n\
    \    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpddm3xfp5: /tmp/tmpddm3xfp5.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   assert(n >= 0);\n   std::string result;\n   long i = 0;\n   while(i\
    \ < n) {\n       result.push_back(std::to_string(i));\n       ++i;\n   }\n   return\
    \ result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoct26wqm.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpoct26wqm.cpp:13:39: error: cannot convert \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   13\
    \ |        result.push_back(std::to_string(i));\n      |                     \
    \    ~~~~~~~~~~~~~~^~~\n      |                                       |\n    \
    \  |                                       std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpoct26wqm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24:\
    \ note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n\
    \      |                 ~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream result;\n    for (int i = 0; i < n; ++i)\n     \
    \   result << i << \" \";\n    return result.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp9jbjtrq4: /tmp/tmp9jbjtrq4.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    while (n > 0) {\n        s = to_string(n)\
    \ + ' ' + s;\n        n--;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgm53sjrc.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpgm53sjrc.cpp:11:13: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |         s = to_string(n) + ' ' + s;\n      |             ^~~~~~~~~\n\
    \      |             std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgm53sjrc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s = \"\";\n\twhile (n--) {\n\t\ts += std::to_string(n);\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3e8n02ps: /tmp/tmp3e8n02ps.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += i;\n    s\
    \ += ' ';\n  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9os9wi0b: /tmp/tmp9os9wi0b.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str = \"\";\n    for (long i = 0; i <= n; i++) {\n   \
    \     str += std::to_string(i);\n    }\n    return str;\n}\nint main() {\n   \
    \ auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpx1tad_w1: /tmp/tmpx1tad_w1.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    str.assign(\"0\");\n    for(long i=n; i>0; --i)\
    \ str += ' ' + (i%10);\n    return str;\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpnxdgd_2o: /tmp/tmpnxdgd_2o.cpp:17: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ret;\n    std::string tmp = std::to_string(n);\n    ret.reserve(tmp.size()\
    \ + 1);\n    for (size_t i = 0; i < tmp.size(); ++i)\n        ret += tmp[i];\n\
    \    return ret;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp4baaghwf: /tmp/tmp4baaghwf.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    for (long i = 0; i < n; ++i) res += std::to_string(i)\
    \ + ' ';\n    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_ofr04wp: /tmp/tmp_ofr04wp.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::vector<int> vec;\n  for (int i = 0; i < n; i++) {\n    vec.push_back(i);\n\
    \  }\n  std::stringstream ss;\n  ss << vec.size() << \" \" << vec;\n  return ss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnw80kkc3.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpnw80kkc3.cpp:14:27: error: no match for \u2018operator<<\u2019\
    \ (operand types are \u2018std::basic_ostream<char>\u2019 and \u2018std::vector<int>\u2019\
    )\n   14 |   ss << vec.size() << \" \" << vec;\n      |   ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~\n      |                    |         |\n      |                    |\
    \         std::vector<int>\n      |                    std::basic_ostream<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnw80kkc3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019\
    \ to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:117:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_Ch"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  oss << n;\n  return oss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp5hkamq7a: /tmp/tmp5hkamq7a.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    oss << n;\n    std::string s = oss.str();\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn0idg47a: /tmp/tmpn0idg47a.cpp:17: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result = \"\";\n    // If n is 0 then simply append a\
    \ space to result\n    if (n != 0) {\n        // Initialize a boolean array 'arr'\
    \ with n elements and all values are false\n        bool arr[n];\n        // Initialize\
    \ an integer variable 'i' to 0\n        int i = 0;\n        // Check all elements\
    \ of the array 'arr' and if the element is true then increment 'i'\n        while\
    \ (i < n) {\n            arr[i] = true;\n            i++;\n        }\n       \
    \ // Now increment 'i' and append spaces to result\n        while (i < n) {\n\
    \            result += \" \";\n            i++;\n        }\n        // Now append\
    \ the elements whose indices are less than 'n' to the string result\n        while\
    \ (i < n) {\n            result += std::to_string(i - n + 1) + \"th \";\n    \
    \        i++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpra174j1w: /tmp/tmpra174j1w.cpp:36: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result;\n  for (long i = 0; i < n; i++) {\n    result +=\
    \ to_string(i);\n    if (i < n - 1)\n      result += \" \";\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpku3_v2po.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpku3_v2po.cpp:11:15: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |     result += to_string(i);\n      |               ^~~~~~~~~\n      |\
    \               std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpku3_v2po.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s = \"\";\n\tint i;\n\tfor (i = 0; i < n; ++i) {\n\t\tif\
    \ (i != 0) {\n\t\t\ts += \" \";\n\t\t}\n\t\ts += std::to_string(i);\n\t}\n\treturn\
    \ s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzdn0pc75: /tmp/tmpzdn0pc75.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for(long i = 0; i <= n; i++) {\n        result\
    \ += std::to_string(i) + ' ';\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjwfuj1v6: /tmp/tmpjwfuj1v6.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string res;\n\tfor(long i = 0; i < n; i++){\n\t\tres.push_back(std::to_string(i));\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = string_sequence;\n \
    \   assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeq7kgvc0.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpeq7kgvc0.cpp:11:31: error: cannot convert \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11\
    \ |   res.push_back(std::to_string(i));\n      |                 ~~~~~~~~~~~~~~^~~\n\
    \      |                               |\n      |                            \
    \   std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpeq7kgvc0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24:\
    \ note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n\
    \      |                 ~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n >= 0);\n    if (n < 2) {\n        return \"0\";\n    }\n\n\
    \    std::string ans;\n    for (long i = 2; i <= n; i++) {\n        ans += std::to_string(i\
    \ - 1) + ' ';\n    }\n    ans += std::to_string(n);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzmfc45hx: /tmp/tmpzmfc45hx.cpp:24: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    while (n > 0) {\n        s = std::to_string(n)\
    \ + \" \" + s;\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpp4l7wgwb: /tmp/tmpp4l7wgwb.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n == 0)\n        return \"0\";\n    std::string res(n - 1, ' ');\n\
    \    res += '0';\n    res.back() = res.back() + 1;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphj2k0t5a: /tmp/tmphj2k0t5a.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n == 0)\n    return \"0\";\n  std::string ret = \"\";\n  for (long\
    \ i = 1; i <= n; ++i) {\n    ret += std::to_string(i) + \" \";\n  }\n  return\
    \ ret.substr(0, ret.length() - 1);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzjwz15ic: /tmp/tmpzjwz15ic.cpp:20: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string res;\n  for (long i = 0; i < n; ++i) {\n    res += to_string(i)\
    \ + \" \";\n  }\n  return res;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp234b0ux9.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp234b0ux9.cpp:11:12: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |     res += to_string(i) + \" \";\n      |            ^~~~~~~~~\n    \
    \  |            std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp234b0ux9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpnprygxzv: /tmp/tmpnprygxzv.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ret = \"\";\n    long i = 0;\n    while (i < n)\n    \
    \    ret += std::to_string(i) + ' ';\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp1hmml3zx: /tmp/tmp1hmml3zx.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    std::string stmp = \"0 \";\n    while(n != 0)\
    \ {\n        s = stmp + to_string(n%10) + \" \";\n        n = n/10;\n        stmp\
    \ = \"0 \";\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpst7ubfcq.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpst7ubfcq.cpp:12:20: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   12 |         s = stmp + to_string(n%10) + \" \";\n      |                \
    \    ^~~~~~~~~\n      |                    std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpst7ubfcq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // your code goes here\n    std::string res=\"\";\n    for(long i=0;i<n;i++){\n\
    \        res+=std::to_string(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjixq1nx7: /tmp/tmpjixq1nx7.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n == 0) return \"0\";\n    std::stringstream ss;\n    long digit\
    \ = n;\n    for (; (int)digit; digit--) ss << digit;\n    return ss.str();\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvyiswiij: /tmp/tmpvyiswiij.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    while (n-- > 0) {\n        s += std::to_string(n)\
    \ + \" \";\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcd1yvt_n: /tmp/tmpcd1yvt_n.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for (long i = 1; i <= n; ++i) {\n       \
    \ result += std::to_string(i);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1vcrzw_p: /tmp/tmp1vcrzw_p.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str(n, ' ');\n    size_t s = str.size();\n    size_t len\
    \ = n%s+1;\n    if (len) {\n        str.insert(str.npos, n, ' ');\n        len--;\n\
    \    }\n    return str.substr(0, len);\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  long ret = 0;\n  while (n > 0) {\n    ret += n % 10;\n    n /= 10;\n\
    \  }\n  return std::to_string(ret);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpv1qe4tsx: /tmp/tmpv1qe4tsx.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Code from https://gist.github.com/raptors/10406264\n  std::string\
    \ s;\n  for (long i = 0, x = n; i < x; ++i) {\n    s += std::to_string(i);\n \
    \ }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpz2ot_r_j: /tmp/tmpz2ot_r_j.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    ss << \"'\";\n    for(long i = 0; i <=\
    \ n; ++i) {\n        ss << i << \" \";\n    }\n    ss << \"'\";\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3kji8kj_: /tmp/tmp3kji8kj_.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += \" \";\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpvb_ap9pj: /tmp/tmpvb_ap9pj.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  ss << n;\n  std::string s = ss.str();\n  s.resize(s.length()\
    \ + (n > 0 ? 1 : 0));\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp6h01fgim: /tmp/tmp6h01fgim.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str(n + 1, '0');\n    return std::string(str.rbegin(),\
    \ str.rend());\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpkmer97pi: /tmp/tmpkmer97pi.cpp:15: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  std::ostringstream result;\n  for (long i = 0; i\
    \ != n; ++i)\n    result << i << \" \";\n  return result.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpk9bgvef_: /tmp/tmpk9bgvef_.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // write your code here\n  std::ostringstream os;\n  os << n;\n  return\
    \ os.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpnjt3u8sm: /tmp/tmpnjt3u8sm.cpp:17: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str;\n    if (n > 0) {\n        str = std::to_string(n);\n\
    \    } else {\n        str = \"0\";\n    }\n\n    while (n-- > 0) {\n        str\
    \ += \" \";\n    }\n\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpqj9ktxs0: /tmp/tmpqj9ktxs0.cpp:25: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  long s = 1;\n  std::string st;\n  for (long i = 0; i < n; i++) {\n \
    \   st = std::to_string(i) + \" \";\n    s += i;\n  }\n  return st + std::to_string(s);\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0c13phad: /tmp/tmp0c13phad.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream os;\n    for (long i = 0; i < n; i++) {\n     \
    \   os << i << \" \";\n    }\n    return os.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwrojmwqv: /tmp/tmpwrojmwqv.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    while (n-- > 0) {\n        s = \" \" +\
    \ std::to_string(n) + \" \" + s;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmprmyn4gj1: /tmp/tmprmyn4gj1.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  ss << \"0 \";\n  for (long i = 0; i < n; ++i)\
    \ ss << i << \" \";\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpldw6gjce: /tmp/tmpldw6gjce.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = n; i > 0; i >>= 1) {\n        s +=\
    \ (i & 1) + \" \";\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxolxxu37: /tmp/tmpxolxxu37.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    int m = 1;\n    for (long k = 1; k <= n;\
    \ k++) {\n        for (int i = 1; i <= m; i++) {\n            s += std::to_string(i);\n\
    \        }\n        s += \" \";\n        m = m / 10;\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpj0tvx4dy: /tmp/tmpj0tvx4dy.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string res;\n\twhile (n--) {\n\t\tres+=std::to_string(n);\n\t}\n\
    \treturn res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp8k7m11ia: /tmp/tmp8k7m11ia.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for (int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0kpxapxe: /tmp/tmp0kpxapxe.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i)\
    \ + \" \";\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn9jjp5ma: /tmp/tmpn9jjp5ma.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  long count = 0;\n  std::string seq;\n  for (long i = n; i >= 1; i--)\
    \ {\n    seq += std::to_string(i);\n    count += i;\n  }\n  return seq + \" \"\
    \ + std::to_string(count);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_ydoa80p: /tmp/tmp_ydoa80p.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream os;\n  for (long i = 0; i < n; ++i) {\n    if (i\
    \ > 0) {\n      os << ' ';\n    }\n    os << i;\n  }\n  return os.str();\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpuatumuns: /tmp/tmpuatumuns.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    res.reserve(2 * n);\n    for (long i=0; i<n;\
    \ ++i)\n        res += std::to_string(i) + ' ';\n    return res;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpb5ezc1f6: /tmp/tmpb5ezc1f6.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  int i = 1;\n  std::string ret;\n  while (i<=n) {\n    ret.push_back(i);\n\
    \    i++;\n  }\n  return ret;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0w_3x8wz: /tmp/tmp0w_3x8wz.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s(n, '0');\n    assert(s == \"0\");\n    return s;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjs6_hv5l: /tmp/tmpjs6_hv5l.cpp:10: std::string string_sequence(long\
    \ int): Assertion `s == \"0\"' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n < 0)\n        n = 0;\n    std::string s = \"\";\n    for (long\
    \ i = 0; i < n; i++)\n        s += std::to_string(i) + ' ';\n    return s;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfx6ga5_e: /tmp/tmpfx6ga5_e.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    std::for_each(std::begin(n), std::end(n), [&s](auto\
    \ i) { s += std::to_string(i); });\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8i_e1ibp.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp8i_e1ibp.cpp:10:31: error: no matching function for call\
    \ to \u2018begin(long int&)\u2019\n   10 |     std::for_each(std::begin(n), std::end(n),\
    \ [&s](auto i) { s += std::to_string(i); });\n      |                        \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8i_e1ibp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8i_e1ibp.cpp:10:31:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   10 |     std::for_each(std::begin(n), std::end(n), [&s](auto i)\
    \ { s += std::to_string(i); });\n      |                               ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_cl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string str(n, '0');\n  for (int i = 0; i < n; ++i)\n    str[i]\
    \ += str[i];\n  return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzz94qqhi: /tmp/tmpzz94qqhi.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result;\n  std::string nums = \"0123456789\";\n  while (n)\
    \ {\n    std::string next_digit = nums[n % 10];\n    n /= 10;\n    result += next_digit;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp647fxn2a.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp647fxn2a.cpp:12:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   12 |     std::string\
    \ next_digit = nums[n % 10];\n      |                                        \
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  oss << \"0 1 2 3 4 \" << n;\n  return oss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzhpt5kj5: /tmp/tmpzhpt5kj5.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    while (n > 0) {\n        s = std::to_string(n)\
    \ + \" \" + s;\n        n = n - 1;\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp62nbb1pt: /tmp/tmp62nbb1pt.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::stringstream ss;\n\tss << \"0 1 2 3 4 5\";\n\twhile(n > 0)\n\t\t\
    ss << \" \" << n--;\n\tstd::reverse(ss.str().begin(), ss.str().end());\n\treturn\
    \ ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpa2g26yo4: /tmp/tmpa2g26yo4.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    while (n > 0) {\n        s += std::to_string(n%10);\
    \ // n % 10 -> n's last digit.\n        n = n/10;\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpqwd7eprv: /tmp/tmpqwd7eprv.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string num = \"\";\n    while (n > 0) {\n        num = std::to_string(n\
    \ % 10) + \" \" + num;\n        n /= 10;\n    }\n    num = std::to_string(num);\n\
    \    std::string s = \"0 1 2 3 4 5\";\n    s = s.substr(0, num.length()) + num;\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnasna0cz.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpnasna0cz.cpp:14:29: error: no matching function for call\
    \ to \u2018to_string(std::string&)\u2019\n   14 |     num = std::to_string(num);\n\
    \      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnasna0cz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6546\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:17:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018int\u2019\n 6546 |  \
    \ to_string(int __val)\n      |             ~~~~^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(unsigned int)\u2019\
    \n 6551 |   to_string(unsigned __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:22:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018unsigned int\u2019\n\
    \ 6551 |   to_string(unsigned __val)\n      |             ~~~~~~~~~^~~~~\n/shared/centos7"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ret=std::to_string(n);\n    std::reverse(ret.begin(),ret.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7zpn0lwz: /tmp/tmp7zpn0lwz.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n >= 0)\n    return std::to_string(n);\n  else\n    return \"-\"\
    \ + std::to_string(-n) + string_sequence(-n);\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpzmkg2lgw: /tmp/tmpzmkg2lgw.cpp:17: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    while(n--) s+=std::to_string(n);\n    return s;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpbk4y8o3n: /tmp/tmpbk4y8o3n.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::ostringstream oss;\n\toss << n;\n\tstd::string s = oss.str();\n\
    \tassert(s.size() > 0);\n\twhile (s.size() > 1) {\n\t\tsize_t pos = s.find_last_of(\"\
    \ \");\n\t\tif (pos != std::string::npos) {\n\t\t\ts.erase(0, pos + 1);\n\t\t\
    } else {\n\t\t\ts.erase(0, 1);\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n   \
    \ auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsk4za3ec: /tmp/tmpsk4za3ec.cpp:26: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n > 0);\n  std::string s;\n  for (int i = 0; i != n; ++i) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmphv4wudxd: /tmp/tmphv4wudxd.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // write your code here\n    std::string result;\n    for(long i =\
    \ 0; i < n; i++){\n        result += to_string(i);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphviogdl4.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmphviogdl4.cpp:12:19: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   12 |         result += to_string(i);\n      |                   ^~~~~~~~~\n\
    \      |                   std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphviogdl4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n == 0)\n        return \"0\";\n    std::string res;\n    for\
    \ (long i = n; i > 0; --i)\n        res += std::to_string(i) + \" \";\n    return\
    \ res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpyu9n41m9: /tmp/tmpyu9n41m9.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    ss << n;\n    return ss.str();\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpt9rznnz9: /tmp/tmpt9rznnz9.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    char buf[100];\n    std::ostringstream os;\n    for (int i = 1; i\
    \ <= n; i++) {\n        os << i;\n        if (i != n) os << ' ';\n    }\n    return\
    \ os.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpo_of6bz2: /tmp/tmpo_of6bz2.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str = \"\";\n    for (int i = 0; i <= n; i++) {\n    \
    \    str += std::to_string(i);\n        str += \" \";\n    }\n    return str;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpay5wguyu: /tmp/tmpay5wguyu.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    oss << n;\n    return oss.str();\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpaj0e75v4: /tmp/tmpaj0e75v4.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    while(n > 0) {\n        res.push_back(n%10);\n\
    \        n /= 10;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpjs9a1gv2: /tmp/tmpjs9a1gv2.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (int i = 0; i <= n; i++) {\n    ss << i;\n\
    \  }\n  return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpo5tazxbk: /tmp/tmpo5tazxbk.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  if (n > 0) {\n    char buf[2 + 2 * n + 1];\n    snprintf(buf,\
    \ sizeof(buf), \"%ld\", n);\n    // Replace all spaces with '-' while preserving\
    \ the order of the spaces.\n    std::replace(buf.begin(), buf.end(), ' ', '-');\n\
    \    s += buf;\n  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2zi9ppw.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpi2zi9ppw.cpp:14:22: error: request for member \u2018begin\u2019\
    \ in \u2018buf\u2019, which is of non-class type \u2018char [(((n + 1) * 2) +\
    \ 1)]\u2019\n   14 |     std::replace(buf.begin(), buf.end(), ' ', '-');\n   \
    \   |                      ^~~~~\n/tmp/tmpi2zi9ppw.cpp:14:35: error: request for\
    \ member \u2018end\u2019 in \u2018buf\u2019, which is of non-class type \u2018\
    char [(((n + 1) * 2) + 1)]\u2019\n   14 |     std::replace(buf.begin(), buf.end(),\
    \ ' ', '-');\n      |                                   ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream s;\n    for (int i = 0; i <= n; i++) {\n       \
    \ s << i;\n    }\n    return s.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp8y4s2jju: /tmp/tmp8y4s2jju.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::vector<std::string> str;\n    int i;\n    for (i = 0; i < n;\
    \ ++i) {\n        str.push_back(i == 0 ? \"0\" : std::to_string(i));\n    }\n\
    \    return \" \".join<std::string>(str);\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrtj0804.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpcrtj0804.cpp:14:16: error: request for member \u2018join\u2019\
    \ in \u2018\" \"\u2019, which is of non-class type \u2018const char [2]\u2019\n\
    \   14 |     return \" \".join<std::string>(str);\n      |                ^~~~\n\
    /tmp/tmpcrtj0804.cpp:14:32: error: expected primary-expression before \u2018>\u2019\
    \ token\n   14 |     return \" \".join<std::string>(str);\n      |           \
    \                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string ans = \"0\";\n  for (int i = 0; i < n; i++) {\n    ans =\
    \ std::to_string(ans.size()) + \" \" + ans;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpio0btg4n: /tmp/tmpio0btg4n.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ret;\n    if (n >= 0) {\n        for (long i = 0; i <\
    \ n; i++) {\n            ret += std::to_string(i);\n        }\n    } else {\n\
    \        for (long i = 0; i < -n; i++) {\n            ret += std::to_string(i\
    \ + 1);\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpmckaofy8: /tmp/tmpmckaofy8.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for (long i = 0; i < n; i++) s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpm50bako8: /tmp/tmpm50bako8.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string res = \"\";\n  while (n) {\n    std::string str = (n % 10)\
    \ + \"\";\n    if (n /= 10)\n      str += \" \";\n    res += str;\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp5ao0w0nx: /tmp/tmp5ao0w0nx.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::vector<int> v;\n  for (long i = 1; i <= n; i++) v.push_back(i);\n\
    \  std::ostringstream ss;\n  for (auto i : v) ss << i << \" \";\n  return ss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzng_589c: /tmp/tmpzng_589c.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n >= 0) {\n    std::string s = std::to_string(n);\n    return s.substr(0,\
    \ s.size());\n  }\n  else return std::string();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxkesvqgc: /tmp/tmpxkesvqgc.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  oss << n;\n  return oss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_nce_m5c: /tmp/tmp_nce_m5c.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n > 0);\n    std::string str;\n    long count = 0;\n    while\
    \ (n > 1) {\n        if (n & 1) {\n            str += (count > 0 ? \" \" : \"\"\
    ) + std::to_string(count);\n            n = n / 2;\n        } else {\n       \
    \     n = n / 2;\n            ++count;\n        }\n    }\n    str += (count >\
    \ 0 ? \" \" : \"\") + std::to_string(count);\n    return str;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3odp0atk: /tmp/tmp3odp0atk.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream os;\n  for (long i = 0; i < n; ++i) {\n    os <<\
    \ i;\n  }\n  return os.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxyp49b1k: /tmp/tmpxyp49b1k.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // your code here\n    std::ostringstream os;\n    os << std::setw(10)\
    \ << std::setfill('0') << n;\n    return os.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp3e7d6lwa: /tmp/tmp3e7d6lwa.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  char s[100];\n  sprintf(s, \"%ld\", n);\n  return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9k6hyq_d: /tmp/tmp9k6hyq_d.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string res;\n\tfor(int i=0; i<n; ++i)\n\t\tres += std::to_string(i);\n\
    \treturn res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpr58gpai5: /tmp/tmpr58gpai5.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    s.reserve(2 * n);\n    for (int i = 0; i < n;\
    \ i++) {\n        s += '0' + (i + 1);\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpkxnu2ccr: /tmp/tmpkxnu2ccr.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i < n; ++i) ss << i << \"\
    \ \";\n  return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp31o4idyb: /tmp/tmp31o4idyb.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n <= 0)\n        return \"0\";\n    std::string s = std::to_string(n);\n\
    \    for (int i = s.size(); i > 0; i /= 10)\n        s.insert(s.size() - i, '\
    \ ');\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl0pkwnk9.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpl0pkwnk9.cpp:13:35: error: no matching function for call\
    \ to \u2018std::__cxx11::basic_string<char>::insert(std::__cxx11::basic_string<char>::size_type,\
    \ char)\u2019\n   13 |         s.insert(s.size() - i, ' ');\n      |         \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl0pkwnk9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typenam"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n > 0);\n  std::ostringstream ss;\n  ss << '[';\n  for (long\
    \ i = 1; i <= n; ++i) {\n    ss << \" \" << i;\n  }\n  ss << ']';\n  return ss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpblgkmeif: /tmp/tmpblgkmeif.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s = \"\";\n  for (long i = n; i > 0; --i) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpesn01p8b: /tmp/tmpesn01p8b.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // If n is positive, return a string containing space-delimited numbers\
    \ from 0 upto n inclusive.\n  // If n is negative, return an empty string.\n \
    \ if (n > 0) {\n    std::string s = std::to_string(n);\n    // If s does not contain\
    \ a decimal point, add it before the last digit.\n    if (s.find(\".\") == std::string::npos)\
    \ {\n      s += \"0\";\n    }\n    return s;\n  } else {\n    return \"\";\n \
    \ }\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpocl3mpw3: /tmp/tmpocl3mpw3.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n <= 0) {\n    return \"\";\n  }\n  std::string ans = std::to_string(n);\n\
    \  if (ans.back() == ' ') {\n    ans.pop_back();\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpw6xh1vtm: /tmp/tmpw6xh1vtm.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  long ans = 0;\n  for (long i = 0; i <= n; i++)\
    \ {\n    ss << i << \" \";\n    ans += i;\n  }\n  return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpuk916b0p: /tmp/tmpuk916b0p.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::ostringstream oss;\n   oss << std::accumulate(std::begin(digits),\
    \ std::end(digits), 0, [](int acc, int digit) {\n      return acc + digit * pow(10,\
    \ std::distance(std::begin(digits), std::prev(std::end(digits))) - 1);\n   });\n\
    \   return oss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp821two6s.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp821two6s.cpp:10:38: error: \u2018digits\u2019 was not declared\
    \ in this scope\n   10 |    oss << std::accumulate(std::begin(digits), std::end(digits),\
    \ 0, [](int acc, int digit) {\n      |                                      ^~~~~~\n\
    /tmp/tmp821two6s.cpp: In lambda function:\n/tmp/tmp821two6s.cpp:11:61: error:\
    \ \u2018digits\u2019 is not captured\n   11 |       return acc + digit * pow(10,\
    \ std::distance(std::begin(digits), std::prev(std::end(digits))) - 1);\n     \
    \ |                                                             ^~~~~~\n/tmp/tmp821two6s.cpp:10:69:\
    \ note: the lambda has no capture-default\n   10 |    oss << std::accumulate(std::begin(digits),\
    \ std::end(digits), 0, [](int acc, int digit) {\n      |                     \
    \                                                ^\n/tmp/tmp821two6s.cpp:10:38:\
    \ note: \u2018<typeprefixerror>digits\u2019 declared here\n   10 |    oss << std::accumulate(std::begin(digits),\
    \ std::end(digits), 0, [](int acc, int digit) {\n      |                     \
    \                 ^~~~~~\n/tmp/tmp821two6s.cpp:11:89: error: \u2018digits\u2019\
    \ is not captured\n   11 |       return acc + digit * pow(10, std::distance(std::begin(digits),\
    \ std::prev(std::end(digits))) - 1);\n      |                                \
    \                                                         ^~~~~~\n/tmp/tmp821two6s.cpp:10:69:\
    \ note: the lambda has no capture-default\n   10 |    oss << std::accumulate(std::begin(digits),\
    \ std::end(digits), 0, [](int acc, int digit) {\n      |                     \
    \                                                ^\n/tmp/tmp821two6s.cpp:10:38:\
    \ note: \u2018<typeprefixerror>digits\u2019 declared here\n   10 |    oss << std::accumulate(std::begin(digits),\
    \ std::end(digits), 0, [](int acc, int digit) {\n      |                     \
    \                 ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  for (long i = 0; i <= n; i++) {\n    ss <<\
    \ i << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpo6rh1pa_: /tmp/tmpo6rh1pa_.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    if (n == 0)\n        return '0';\n    else \n\
    \        s = std::to_string(n);\n    for (int i = 1; i < n; i++) {\n        s\
    \ += \" \";\n        s += std::to_string(i);\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy6u3awj_.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpy6u3awj_.cpp:11:16: error: could not convert \u2018'0'\u2019\
    \ from \u2018char\u2019 to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   11 |         return '0';\n      |                ^~~\n      |          \
    \      |\n      |                char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tlong k = n;\n\tstd::string result;\n\twhile (k != 0) {\n\t\tresult.push_back(k\
    \ % 10);\n\t\tk /= 10;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpb0671xg8: /tmp/tmpb0671xg8.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream s;\n  for (long i = 0; i != n; ++i) {\n    s << i;\n\
    \  }\n  return s.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpamdr8ul0: /tmp/tmpamdr8ul0.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::vector<int> v(n, 0);\n    std::ostringstream os;\n    for (int\
    \ i = 1; i <= n; i++) {\n        os << i;\n        os << \" \";\n    }\n    return\
    \ os.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmprvcv0t6j: /tmp/tmprvcv0t6j.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string result;\n    for(long i=0;i<n;i++) {\n        result+=std::to_string(i);\n\
    \        if(!(i<n-1)) result+=' ';\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp38fgryn4: /tmp/tmp38fgryn4.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for (int i = 0; i < n; i++)\n        s\
    \ += to_string(i);\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl4vemp9o.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpl4vemp9o.cpp:11:14: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |         s += to_string(i);\n      |              ^~~~~~~~~\n      | \
    \             std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl4vemp9o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::ostringstream str;\n\tfor(long i = 0; i < n; ++i) {\n\t\tstr <<\
    \ i;\n\t}\n\treturn str.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsyq7xi08: /tmp/tmpsyq7xi08.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream os;\n  for (int i = 0; i <= n; i++) {\n    os <<\
    \ i;\n    if (i != n) {\n      os << \" \";\n    }\n  }\n  return os.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::string s;\n   for ( long i = n; i; ) {\n      s.push_back( i %\
    \ 10 );\n      i = i / 10;\n   }\n   return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwciijwir: /tmp/tmpwciijwir.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string seq = \"\";\n    for(long i = 0; i <= n; i++)\n      \
    \  seq += to_string(i);\n    return seq;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcfq_ukv.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpqcfq_ukv.cpp:11:16: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |         seq += to_string(i);\n      |                ^~~~~~~~~\n    \
    \  |                std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqcfq_ukv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // Write your code here\n\tstd::string res;\n\tfor (int i=0;i<n;i++)\n\
    \t\tres+=std::to_string(i);\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpu2i4yt1b: /tmp/tmpu2i4yt1b.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Initialize our result\n  std::string result;\n  if (n <= 0) {\n \
    \   return \"0\";\n  }\n  // Recursively append the numbers from 1 to n-1\n  result\
    \ += string_sequence(n - 1) + \" \";\n  // Add the final number\n  result += std::to_string(n\
    \ - 1);\n  return result;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpaincyap_: /tmp/tmpaincyap_.cpp:23: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp8gxfvkna: /tmp/tmp8gxfvkna.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::stringstream ss;\n    ss << n;\n    return ss.str();\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpo495qgnh: /tmp/tmpo495qgnh.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // To get a string containing numbers from 0 to n, we iterate over the\
    \ numbers from 0 to n-1 inclusively.\n  std::string s = \"\";\n  for (long i =\
    \ 0; i < n; ++i) {\n    // Add i to string s, separated by space characters.\n\
    \    s += std::to_string(i) + \" \";\n  }\n  // Remove the last space character\
    \ from string s.\n  s.erase(s.size() - 1);\n  return s;\n}\nint main() {\n   \
    \ auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::erase: __pos (which is 18446744073709551615) > this->size() (which\
    \ is 0)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string res;\n    while(n > 0)\n    {\n        res.push_back(n%10);\n\
    \        n /= 10;\n    }\n    res.push_back(' ');\n    res.push_back(10 - res[0]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpwzinul9e: /tmp/tmpwzinul9e.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n == 0) return \"0\";\n  std::string ans = \"\";\n  for (long i\
    \ = 0; i < n; i++) {\n    ans += std::to_string(i);\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0rdz76wh: /tmp/tmp0rdz76wh.cpp:19: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::ostringstream oss;\n\toss << std::setw(2) << n;\n\treturn oss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3dcx_l5n: /tmp/tmp3dcx_l5n.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    oss << \"0 1 2 3 4 5\";\n    oss << \"\
    \ \" << std::setw(4*(n+1)) << \" \" << std::setfill('0') << n+1;\n    return oss.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpaenfwt6j: /tmp/tmpaenfwt6j.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // TODO : Find a better way to terminate infinite loop\n  // TODO :\
    \ Find a better way to terminate infinite loop\n  while (n-- > 0)\n    ;\n\n \
    \ std::string ans = \"\";\n  for (long i = 0; i < n; ++i)\n    ans += std::to_string(i);\n\
    \n  return ans;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmptayzjgd8: /tmp/tmptayzjgd8.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream s;\n    for (int i = 0; i <= n; i++) s << (i ==\
    \ 0 ? \"0\" : \" \") << i;\n    return s.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpoyp3b2ym: /tmp/tmpoyp3b2ym.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string str(n, '0');\n  str.back()++;\n  for (int i = 1; i < n;\
    \ i++) {\n    str += \" \" + to_string(i);\n  }\n  return str;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplz89elrf.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmplz89elrf.cpp:12:18: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   12 |     str += \" \" + to_string(i);\n      |                  ^~~~~~~~~\n\
    \      |                  std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplz89elrf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string out;\n    for(long i=0;i<n;i++)\n        out+=std::to_string(i);\n\
    \    return out;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpk5ricn36: /tmp/tmpk5ricn36.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n > 0);\n  std::string result = \"\";\n  for (int i = 0; i <=\
    \ n; ++i) result += ' ' + (i + 1);\n  return result;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp6ov5i95c: /tmp/tmp6ov5i95c.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n < 0) throw std::invalid_argument(\"n must be positive\");\n  std::vector<int>\
    \ v;\n  for (long i = 0; i < n; i++) v.push_back(static_cast<int>(i));\n  return\
    \ v.join();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbv5lwh07.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpbv5lwh07.cpp:12:12: error: \u2018class std::vector<int>\u2019\
    \ has no member named \u2018join\u2019\n   12 |   return v.join();\n      |  \
    \          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::ostringstream os;\n\tstd::string ret;\n\tfor(long i=0;i<n;++i)\
    \ {\n\t\tos << i;\n\t\tret += os.str();\n\t\tos.str(\"\");\n\t}\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpv47wn6ju: /tmp/tmpv47wn6ju.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::ostringstream os;\n\tos << n;\n\tstd::string str = os.str();\n\t\
    while (str.size() > 1)\n\t{\n\t\tstr = \" \" + str.substr(0, str.size() - 1);\n\
    \t\tstr = str.substr(1);\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp4tjqk45a: /tmp/tmp4tjqk45a.cpp:22: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string str = \"\";\n    for (int i = 1; i <= n; i++)\n      \
    \  str += \" \" + std::to_string(i);\n    return str;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpoy_8ylzt: /tmp/tmpoy_8ylzt.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   std::string result;\n   while (n) {\n      result += (n&1? \"1 \":\"\
    \") + (n>>1? \"2 \":\"\") + (n>>2? \"4 \":\"\") + (n>>3? \"8 \":\"\") + (n>>4?\
    \ \"16 \":\"\") + (n>>5? \"32 \":\"\") + (n>>6? \"64 \":\"\") + (n>>7? \"128 \"\
    :\"\") + (n>>8? \"256 \":\"\") + \"\\n\";\n      n >>= 8;\n   }\n   return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi519w3pl.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpi519w3pl.cpp:11:32: error: invalid operands of types \u2018\
    const char*\u2019 and \u2018const char*\u2019 to binary \u2018operator+\u2019\n\
    \   11 |       result += (n&1? \"1 \":\"\") + (n>>1? \"2 \":\"\") + (n>>2? \"\
    4 \":\"\") + (n>>3? \"8 \":\"\") + (n>>4? \"16 \":\"\") + (n>>5? \"32 \":\"\"\
    ) + (n>>6? \"64 \":\"\") + (n>>7? \"128 \":\"\") + (n>>8? \"256 \":\"\") + \"\\\
    n\";\n      |                 ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n      |      \
    \               |                 |\n      |                     const char* \
    \      const char*\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result;\n  for (long i = 0; i < n; i++)\n    result += to_string(i);\n\
    \  return result;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprw45dnan.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmprw45dnan.cpp:11:15: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |     result += to_string(i);\n      |               ^~~~~~~~~\n      |\
    \               std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprw45dnan.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream os;\n  os << \"0 \";\n  for(long i = 1; i <= n; ++i)\
    \ {\n    os << i << \" \";\n  }\n  return os.str();\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwxjc2796: /tmp/tmpwxjc2796.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream os;\n    os << std::setw(10)<<n;\n    return os.str();\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgggwe05d: /tmp/tmpgggwe05d.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  // Check base case\n  if (n < 2)\n    return std::to_string(n);\n  //\
    \ Get string and advance it\n  std::string s = std::to_string(n);\n  ++s;\n  //\
    \ Do it again\n  std::string s2;\n  do {\n    s2 = s;\n    s += ' ';\n  } while\
    \ (s.back() != '\\0');\n  return s2;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmah9t6yw.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpmah9t6yw.cpp:14:3: error: no match for \u2018operator++\u2019\
    \ (operand type is \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   14 |   ++s;\n      |   ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    if (n <= 0) return \"0\";\n    if (n <= 9) return \"0 \" + string_sequence(n\
    \ - 1);\n    std::string s;\n    s += string_sequence(n - 1);\n    s += \" \"\
    ;\n    s += \"1 \";\n    if (n <= 19) return s;\n    s += string_sequence(n -\
    \ 19);\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1wsmmiii: /tmp/tmp1wsmmiii.cpp:22: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  ss << '[';\n  while (n > 0) {\n    ss<<n%10;\
    \ n/=10;\n  }\n  ss<<']';\n  return ss.str();\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp19_r36cc: /tmp/tmp19_r36cc.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    assert(n < 1000);\n    for (long i = 0; i < n;\
    \ i++) {\n        s = std::to_string(i) + \" \";\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn4zxkovu: /tmp/tmpn4zxkovu.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  assert(n >= 0);\n  char buf[21];\n  snprintf(buf, sizeof(buf), \"%ld\"\
    , n);\n  return std::string(buf);\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpug8zb0tk: /tmp/tmpug8zb0tk.cpp:17: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream ss;\n  ss << n;\n  return ss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp5kttgof4: /tmp/tmp5kttgof4.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    // code here\n    // return \"\"s;\n    std::string s;\n    for(int\
    \ i=0;i<n;i++){\n        s+=std::to_string(i);\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvakw46re: /tmp/tmpvakw46re.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::vector<long> numbers;\n    for (long i = 0; i < n; i++) numbers.push_back(i);\n\
    \    std::string output;\n    for (long i = 0; i < numbers.size(); i++) output\
    \ += to_string(i) + \" \";\n    return output;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyvpc6o_p.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpyvpc6o_p.cpp:12:57: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   12 |     for (long i = 0; i < numbers.size(); i++) output += to_string(i)\
    \ + \" \";\n      |                                                         ^~~~~~~~~\n\
    \      |                                                         std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyvpc6o_p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string ret = \"\";\n    for (long i = 0; i < n; i++) {\n    \
    \    ret += std::to_string(i);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpou0p1q64: /tmp/tmpou0p1q64.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    while(n--)\n        s+= to_string(n);\n    return\
    \ s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv0808lcv.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpv0808lcv.cpp:11:13: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |         s+= to_string(n);\n      |             ^~~~~~~~~\n      |   \
    \          std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0808lcv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream s;\n  for (long i = 0; i < n; i++)\n    s << i <<\
    \ \" \";\n  return s.str();\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp5mne7ud5: /tmp/tmp5mne7ud5.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::vector<std::string> v;\n  for (long i = 0; i <= n; i++)\n    v.push_back(i\
    \ == 0 ? '0' : (std::to_string(i - 1) + ' '));\n  return v.back();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1kmzi5ou.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp1kmzi5ou.cpp:11:24: error: operands to ?: have different\
    \ types \u2018char\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\n  \
    \ 11 |     v.push_back(i == 0 ? '0' : (std::to_string(i - 1) + ' '));\n      |\
    \                 ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n   string s = \"\";\n   while (n--) s += \" \" + (n+1);\n   return s;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppak3nhv7.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmppak3nhv7.cpp:9:4: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n    9 |    string s =\
    \ \"\";\n      |    ^~~~~~\n      |    std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppak3nhv7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmppak3nhv7.cpp:10:16:\
    \ error: \u2018s\u2019 was not declared in this scope\n   10 |    while (n--)\
    \ s += \" \" + (n+1);\n      |                ^\n/tmp/tmppak3nhv7.cpp:11:11: error:\
    \ \u2018s\u2019 was not declared in this scope\n   11 |    return s;\n      |\
    \           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    while (n-- > 0) {\n        s += std::to_string(n);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp2dtw3vev: /tmp/tmp2dtw3vev.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i) {\n        s += i;\n    \
    \    s += ' ';\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpl7w8lb21: /tmp/tmpl7w8lb21.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n >= 0);\n    if (n==0)\n        return \"0\";\n    std::string\
    \ str = \"\";\n    for (int i=1; i<=n; i++) {\n        str = str + \" \" + std::to_string(i);\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp88v3ypym: /tmp/tmp88v3ypym.cpp:21: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n\tstd::string s;\n\tfor (long i = 0; i < n; i++) {\n\t\ts += to_string(i);\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpax2b9bhp.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpax2b9bhp.cpp:11:8: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |   s += to_string(i);\n      |        ^~~~~~~~~\n      |        std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpax2b9bhp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::ostringstream oss;\n  oss << n;\n  return oss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpes0h0h7f: /tmp/tmpes0h0h7f.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string result;\n  for (int i = 1; i <= n; ++i) {\n    result +=\
    \ std::to_string(i);\n    if (i != n) result += \" \";\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpi_7s8gzw: /tmp/tmpi_7s8gzw.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  if (n == 0) return \"0\";\n  std::string res;\n  do {\n    res += \"\
    0 \";\n  } while ((n /= 10) > 0);\n  while (n > 0) {\n    res += std::to_string(n)\
    \ + \" \";\n    n /= 10;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp1zzwpdmj: /tmp/tmp1zzwpdmj.cpp:23: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::stringstream s;\n  s << n;\n  return s.str();\n}\nint main() {\n\
    \    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmplmkaa0k3: /tmp/tmplmkaa0k3.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::ostringstream oss;\n    // Reserve at least 1 char more.\n  \
    \  oss.reserve(1 + std::to_string(n).size());\n    // Append the first number.\n\
    \    oss << std::to_string(n);\n    // Append a space for each number larger than\
    \ 1.\n    for (long i = 2; i <= n; ++i) {\n        if (i % 10 == 0) {\n      \
    \      oss << \" \" << std::to_string(i);\n        } else {\n            oss <<\
    \ ' ' << std::to_string(i);\n        }\n    }\n    return oss.str();\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40jdafvd.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmp40jdafvd.cpp:11:9: error: \u2018std::ostringstream\u2019\
    \ {aka \u2018class std::__cxx11::basic_ostringstream<char>\u2019} has no member\
    \ named \u2018reserve\u2019\n   11 |     oss.reserve(1 + std::to_string(n).size());\n\
    \      |         ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    assert(n > 0);\n    std::string s;\n    s.reserve(n);\n    for (long\
    \ i = n; i > 0; --i)\n        s += '0' + ((i - 1) % 10);\n    return s;\n}\nint\
    \ main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) ==\
    \ (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7xiov6m6: /tmp/tmp7xiov6m6.cpp:9: std::string string_sequence(long int):\
    \ Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s = std::to_string(n);\n  std::reverse(s.begin(), s.end());\n\
    \  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxh7eg99o: /tmp/tmpxh7eg99o.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i)\n        s += (i\
    \ > 0 ? \" \" : \"\") + std::to_string(i);\n    return s;\n}\nint main() {\n \
    \   auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n\
    \    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"\
    0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
