name: HumanEval_14_all_prefixes
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  if (string.length() == 0)\n    return\
    \ result;\n  int index = 0;\n  while (index < string.length()) {\n    int size\
    \ = index - string.length() + 1;\n    if (size == 0)\n      result.push_back(string);\n\
    \    else {\n      result.push_back(string[index : index + size]);\n      index\
    \ += size;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhmj8t5r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfhmj8t5r.cpp:16:37: error: found\
    \ \u2018:\u2019 in nested-name-specifier, expected \u2018::\u2019\n   16 |   \
    \    result.push_back(string[index : index + size]);\n      |                \
    \                     ^\n      |                                     ::\n/tmp/tmpfhmj8t5r.cpp:16:31:\
    \ error: \u2018index\u2019 is not a class, namespace, or enumeration\n   16 |\
    \       result.push_back(string[index : index + size]);\n      |             \
    \                  ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i < string.size();\
    \ i++)\n    result.push_back(string[0:i]);\n  return result;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprib5dp50.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprib5dp50.cpp:9:30: error: expected\
    \ \u2018]\u2019 before \u2018:\u2019 token\n    9 |     result.push_back(string[0:i]);\n\
    \      |                              ^\n      |                             \
    \ ]\n/tmp/tmprib5dp50.cpp:9:30: error: expected \u2018)\u2019 before \u2018:\u2019\
    \ token\n    9 |     result.push_back(string[0:i]);\n      |                 \
    \    ~        ^\n      |                              )\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  // Base case: empty string is an\
    \ array of length 0\n  if (string.length() == 0) return prefixes;\n  // Recursively\
    \ add prefixes of remaining string\n  for (int i = 0; i < string.length(); ++i)\
    \ prefixes.push_back(string.substr(0, i));\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp5bpxmql8: /tmp/tmp5bpxmql8.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (string.size() > 0) {\n    string temp = string;\n    std::string last_char\
    \ = temp.back();\n    temp.pop_back();\n    for (size_t i = 0; i < temp.size();\
    \ ++i) {\n      if (temp[i] != last_char) {\n        prefixes.push_back(temp.substr(0,\
    \ i));\n      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpip7zksxq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpip7zksxq.cpp:10:11: error: expected\
    \ \u2018;\u2019 before \u2018temp\u2019\n   10 |     string temp = string;\n \
    \     |           ^~~~~\n      |           ;\n/tmp/tmpip7zksxq.cpp:11:29: error:\
    \ \u2018temp\u2019 was not declared in this scope\n   11 |     std::string last_char\
    \ = temp.back();\n      |                             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i < string.length();\
    \ ++i) {\n    prefixes.push_back(string[0]);\n    string prefix = string[i];\n\
    \    for (int j = 0; j < i; ++j) {\n      prefix = prefix + string[j];\n    }\n\
    \    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main() {\n \
    \   auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ndmtdrd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0ndmtdrd.cpp:9:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     prefixes.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp0ndmtdrd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  // Initialize to empty string\n \
    \ prefixes.push_back(\"\");\n  // Iterate over all characters in the string\n\
    \  for (int i = 0; i < string.length(); i++) {\n    // For each character\n  \
    \  prefixes.push_back(prefixes[i-1] + string[i]);\n  }\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpqfehd550: /tmp/tmpqfehd550.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    int len = string.length();\n\
    \    if (len == 0)\n        return prefixes;\n    prefixes.push_back(string[0]);\n\
    \    for (int i = 1; i < len; ++i) {\n        prefixes.push_back(string(i, string[i]));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2vi9rrs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpd2vi9rrs.cpp:11:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |     prefixes.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpd2vi9rrs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::string prefix = string;\n    size_t pos = 0;\n    std::vector<string>\
    \ result;\n    while (prefix != \"\") {\n        prefix = prefix.substr(0, pos);\n\
    \        result.push_back(prefix);\n        pos = prefix.size();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae_wslm3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpae_wslm3.cpp:9:23: error: type/value\
    \ mismatch at argument 1 in template parameter list for \u2018template<class _Tp,\
    \ class _Alloc> class std::vector\u2019\n    9 |     std::vector<string> result;\n\
    \      |                       ^\n/tmp/tmpae_wslm3.cpp:9:23: note:   expected\
    \ a type, got \u2018string\u2019\n/tmp/tmpae_wslm3.cpp:9:23: error: template argument\
    \ 2 is invalid\n/tmp/tmpae_wslm3.cpp:12:16: error: request for member \u2018push_back\u2019\
    \ in \u2018result\u2019, which is of non-class type \u2018int\u2019\n   12 | \
    \        result.push_back(prefix);\n      |                ^~~~~~~~~\n/tmp/tmpae_wslm3.cpp:15:12:\
    \ error: could not convert \u2018result\u2019 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019\n   15 |     return result;\n      |            ^~~~~~\n      |    \
    \        |\n      |            int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // Define the prefix array.\n  std::vector<std::string> prefixes;\n  //\
    \ Iterate over the string and push each prefix onto the prefix array.\n  for (size_t\
    \ i = 0; i < string.size(); ++i) {\n    // If the current character is not equal\
    \ to the length of the string,\n    // then it is a prefix of the current string,\
    \ so add the current prefix\n    // to the prefix array.\n    if (string[i] !=\
    \ string[string.size() - 1 - i]) {\n      prefixes.push_back(string);\n      //\
    \ Update the prefix to the current character.\n      string = string[string.size()\
    \ - 1 - i];\n    }\n  }\n  // Add the last prefix to the prefix array.\n  prefixes.push_back(string);\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpg9pqp75r: /tmp/tmpg9pqp75r.cpp:26: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.empty()) {\n        return std::vector<std::string>();\n \
    \   }\n    auto first = string.begin(), last = string.end();\n    do {\n     \
    \   last = std::search(first, last, string.begin(), string.end(), [](char lhs,\
    \ char rhs) { return lhs < rhs; });\n        first = std::search(first, last,\
    \ string.begin(), string.end(), [](char lhs, char rhs) { return lhs > rhs; });\n\
    \    } while (last != first);\n    return std::vector<std::string>(first, last);\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeoosph4i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h:\
    \ In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1\
    \ = std::__cxx11::basic_string<char>; _Args = {char&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:\
    \   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ bool _TrivialValueTypes = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:\
    \   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:\
    \   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator,\
    \ _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _ForwardIterator\
    \ = std::__cxx11::basic_string<char>*; _Tp = std::__cxx11::basic_string<char>]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> res;\n  if (string.length() > 0) {\n    all_prefixes(string.substr(0,\
    \ string.length()/2), string);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2teiahyi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2teiahyi.cpp:9:61: error: too many\
    \ arguments to function \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    \n    9 |     all_prefixes(string.substr(0, string.length()/2), string);\n   \
    \   |                                                             ^\n/tmp/tmp2teiahyi.cpp:6:26:\
    \ note: declared here\n    6 | std::vector<std::string> all_prefixes(std::string\
    \ string) {\n      |                          ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (!prefixes.empty()) {\n    std::string prefix = prefixes.back();\n    prefixes.pop_back();\n\
    \    for (int i = 0; i < string.length(); ++i) {\n      prefixes.push_back(prefix\
    \ + string[i]);\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n\n  for (int i = string.size() - 1;\
    \ i >= 0; i--) {\n    prefixes.push_back(string[string.size() - i]);\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplymnu1ea.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmplymnu1ea.cpp:10:49: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     prefixes.push_back(string[string.size()\
    \ - i]);\n      |                                                 ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmplymnu1ea.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.size() <= 1) {\n        return std::vector{};\n    }\n\n \
    \   std::vector<std::string> prefixes;\n    std::string prefix = string;\n   \
    \ bool isPrefix = true;\n    while (!isPrefix) {\n        isPrefix = true;\n \
    \       prefixes.push_back(prefix);\n        for (int i = 0; i < string.size();\
    \ i++) {\n            if (string[i] != prefix[i - 1]) {\n                isPrefix\
    \ = false;\n                break;\n            }\n        }\n        prefix =\
    \ prefix + \"a\";\n    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_iznarw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpn_iznarw.cpp:8:27: error: missing\
    \ template arguments before \u2018{\u2019 token\n    8 |         return std::vector{};\n\
    \      |                           ^\n/tmp/tmpn_iznarw.cpp:8:27: error: expected\
    \ \u2018;\u2019 before \u2018{\u2019 token\n    8 |         return std::vector{};\n\
    \      |                           ^\n      |                           ;\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::string prefix = \"\";\n  \
    \  for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] == string[0])\
    \ {\n            prefix = string[0];\n            break;\n        }\n    }\n \
    \   for (size_t i = 0; i < string.size(); ++i) {\n        if (string[i] != prefix\
    \ && string[i] == string[i - 1]) {\n            result.push_back(prefix + string[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkh2808ws.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpkh2808ws.cpp:16:23: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         if (string[i]\
    \ != prefix && string[i] == string[i - 1]) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkh2808ws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkh2808ws.cpp:16:26:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   16 |         if (string[i] != prefix && string[i]\
    \ == string[i - 1]) {\n      |                          ^~~~~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkh2808ws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (size_t start = 0; start <\
    \ string.size(); ++start) {\n        result.push_back(string);\n        size_t\
    \ nextStart = string.find(string, start);\n        while (nextStart != std::string::npos)\
    \ {\n            result.push_back(string[nextStart + 1]);\n            nextStart\
    \ = string.find(string, nextStart + 1);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcqssjpkb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpcqssjpkb.cpp:12:51: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |             result.push_back(string[nextStart\
    \ + 1]);\n      |                                                   ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpcqssjpkb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no kn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.size() == 0)\n        return {};\n    std::vector<std::string>\
    \ results;\n    result.reserve(string.size());\n    for (char &i : string)\n \
    \       result.push_back(std::to_string(i));\n    size_t max_length = 0;\n   \
    \ for (size_t i = 0; i < result.size(); ++i)\n        if (std::to_string(i).size()\
    \ > max_length)\n            max_length = std::to_string(i).size();\n    result.resize(max_length);\n\
    \    for (size_t i = 0; i < result.size(); ++i)\n        result[i] = std::to_string(result[i]).substr(0,\
    \ max_length);\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj_tr21v2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpj_tr21v2.cpp:10:5: error: \u2018\
    result\u2019 was not declared in this scope; did you mean \u2018results\u2019\
    ?\n   10 |     result.reserve(string.size());\n      |     ^~~~~~\n      |   \
    \  results\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  result.reserve(string.size());\n  for\
    \ (int i = 0; i < (int)string.size(); ++i) {\n    if (i == 0)\n      result.push_back(string[i]);\n\
    \    else if (string[i] == string[i-1])\n      result.push_back(string[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ibkmcf7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6ibkmcf7.cpp:11:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |       result.push_back(string[i]);\n    \
    \  |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6ibkmcf7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    int size = string.length();\n\
    \    for(int i=0; i < size; ++i) {\n        std::string prefix = to_string(string.substr(0,i));\n\
    \        if(prefixes.find(prefix) == prefixes.end())\n            prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ok3rbv0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp4ok3rbv0.cpp:10:58: error: no matching\
    \ function for call to \u2018to_string(std::__cxx11::basic_string<char>)\u2019\
    \n   10 |         std::string prefix = to_string(string.substr(0,i));\n      |\
    \                                                          ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4ok3rbv0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6546\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6546:17:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n 6546 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(unsigned int)\u2019\
    \n 6551 |   to_string(unsigned __val)\n      |   ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6551:22:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018unsigned int\u2019\n 6551 |   to_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.empty()) {\n        return {};\n    }\n\n    std::string shortest\
    \ = string;\n    std::string longest = \"\";\n\n    while (string.length() !=\
    \ 0) {\n        int len = string.length();\n        shortest = string[len - 1];\n\
    \        string += shortest;\n\n        if (string.length() < len) {\n       \
    \     break;\n        }\n        string += shortest;\n\n        if (string.length()\
    \ < len) {\n            break;\n        }\n\n        string += shortest;\n\n \
    \       string += longest;\n        string += longest;\n        string += shortest;\n\
    \    }\n\n    std::vector<std::string> prefixes;\n\n    while (shortest.length()\
    \ != 0) {\n        prefixes.push_back(shortest);\n        shortest = longest;\n\
    \        longest = shortest;\n    }\n\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // O(n*m) where n is string length and m is maximum prefix length\n  std::vector<std::string>\
    \ prefix;\n  \n  int length = string.length();\n  int prev_length = 0;\n\n  while\
    \ (1) {\n    // Add empty prefix if previous prefix length is 0\n    if (prev_length\
    \ == 0)\n      prefix.push_back(\"\");\n\n    // Add prefix\n    prefix.push_back(string[prev_length]);\n\
    \n    // Update prefix length\n    prev_length++;\n    \n    // Exit if there\
    \ is no suffix to add\n    if (length == prev_length + 1)\n      return prefix;\n\
    \n    // Update length\n    length = prev_length + 1;\n  }\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_3d37a9u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_3d37a9u.cpp:19:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   19 |     prefix.push_back(string[prev_length]);\n\
    \      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_3d37a9u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for a"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  if (string.size() == 0) return result;\n\
    \  \n  string prefix = string;\n  while (string.size() > 0)\n  {\n    string suffix\
    \ = string.substr(0, prefix.size());\n    result.push_back(prefix);\n    prefix\
    \ = suffix;\n  }\n  \n  return result;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpom5et7re.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpom5et7re.cpp:10:9: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n   10 |   string prefix = string;\n\
    \      |         ^~~~~~~\n      |         ;\n/tmp/tmpom5et7re.cpp:13:11: error:\
    \ expected \u2018;\u2019 before \u2018suffix\u2019\n   13 |     string suffix\
    \ = string.substr(0, prefix.size());\n      |           ^~~~~~~\n      |     \
    \      ;\n/tmp/tmpom5et7re.cpp:14:22: error: \u2018prefix\u2019 was not declared\
    \ in this scope\n   14 |     result.push_back(prefix);\n      |              \
    \        ^~~~~~\n/tmp/tmpom5et7re.cpp:15:14: error: \u2018suffix\u2019 was not\
    \ declared in this scope\n   15 |     prefix = suffix;\n      |              ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (auto prefix = string; prefix.size()\
    \ > 0; prefixes.push_back(prefix)) {\n    prefix = prefix.substr(1);\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpe3jjbhk_: /tmp/tmpe3jjbhk_.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 1; i <= string.length();\
    \ i++) {\n    prefixes.push_back(string);\n    while (string.size() > i) {\n \
    \     size_t j = 0;\n      while (j < i) { string += 'a'; }\n      prefixes.push_back(string);\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    size_t len = string.length();\n\
    \    std::string prefix = \"\";\n    for (size_t i = 0; i < len; ++i)\n      \
    \  prefix = prefix + string[i];\n    result.push_back(prefix);\n    while (len\
    \ > 0) {\n        size_t len = string.length();\n        for (size_t i = 1; i\
    \ < len; ++i)\n            prefix = prefix + string[i];\n        result.push_back(prefix);\n\
    \        if (string.length() > 1)\n            len -= 1;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpny88lhgd: /tmp/tmpny88lhgd.cpp:25: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  prefixes.push_back(\"\");\n\
    \  int index = 0;\n  while (index < prefixes.size()) {\n    for (int i = index\
    \ + 1; i < prefixes.size(); i++) {\n      prefixes[i] = prefixes[i] + prefixes[i\
    \ + 1];\n    }\n    index++;\n  }\n  return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0z8jwopb: /tmp/tmp0z8jwopb.cpp:23: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (unsigned int i = 0; i <\
    \ string.length(); i++) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpr4yvtxkt: /tmp/tmpr4yvtxkt.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    auto prefix = get_prefixes(string);\n\
    \    for (auto p : prefix) {\n        result.push_back(p);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw5956nnv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpw5956nnv.cpp:8:19: error: \u2018\
    get_prefixes\u2019 was not declared in this scope; did you mean \u2018all_prefixes\u2019\
    ?\n    8 |     auto prefix = get_prefixes(string);\n      |                  \
    \ ^~~~~~~~~~~~\n      |                   all_prefixes\n/tmp/tmpw5956nnv.cpp:9:19:\
    \ error: unable to deduce \u2018auto&&\u2019 from \u2018prefix\u2019\n    9 |\
    \     for (auto p : prefix) {\n      |                   ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  result.reserve(string.size());\n  //\
    \ Search from left until we found prefix that matches current letter\n  // and\
    \ move it to result (to avoid duplicates)\n  for (size_t i = 0, len = string.size();\
    \ i < len; i++) {\n    auto prefix = string(i, string.size());\n    if (string[i]\
    \ == string[0])\n      result.emplace_back(prefix);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj93hitpj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpj93hitpj.cpp:12:42: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ std::__cxx11::basic_string<char>::size_type)\u2019\n   12 |     auto prefix\
    \ = string(i, string.size());\n      |                                       \
    \   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n\n    // Start with the empty string\n\
    \    prefixes.push_back(\"\");\n\n    size_t index = 0;\n    size_t len = string.size();\n\
    \    while (index < len) {\n        size_t prefixLen = len - index;\n        std::string\
    \ prefix = string.substr(index, prefixLen);\n        prefixes.push_back(prefix);\n\
    \        index += prefixLen;\n    }\n\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpzkgz1i_g: /tmp/tmpzkgz1i_g.cpp:25: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.length() == 0) return std::vector<std::string>();\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(string);\n    // If the input string is empty\
    \ return the empty list\n    if (string.length() == 1) return prefixes;\n    //\
    \ If the input string is one character longer than the prefix\n    // then return\
    \ an empty list\n    if (string.length() == 2) return prefixes;\n    \n    for\
    \ (int i = 3; i <= string.length(); i++) {\n        // Find the first character\
    \ of the prefix at the current position\n        int startIndex =\n          \
    \  prefixes.back().find_first_of(string[0], i - 1);\n        if (startIndex !=\
    \ -1) break;\n    }\n    \n    // If no prefix could be found then return the\
    \ whole string\n    if (startIndex == -1) return prefixes;\n    // Otherwise add\
    \ the current prefix to the list of prefixes\n    // and recurse on the remaining\
    \ string\n    prefixes.push_back(string);\n    return all_prefixes(string.substr(startIndex));\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp27tafrva.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp27tafrva.cpp:24:9: error: \u2018\
    startIndex\u2019 was not declared in this scope\n   24 |     if (startIndex ==\
    \ -1) return prefixes;\n      |         ^~~~~~~~~~\n/tmp/tmp27tafrva.cpp:28:39:\
    \ error: \u2018startIndex\u2019 was not declared in this scope\n   28 |     return\
    \ all_prefixes(string.substr(startIndex));\n      |                          \
    \             ^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    auto prefix_array = make_prefix_array(string);\n    std::vector<std::string>\
    \ prefix_vector;\n    for (auto & prefix: prefix_array) {\n        prefix = prefix.substr(0,\
    \ prefix.size() - 1);\n        prefix_vector.push_back(prefix);\n    }\n    return\
    \ prefix_vector;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdslpz444.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdslpz444.cpp:7:25: error: \u2018\
    make_prefix_array\u2019 was not declared in this scope; did you mean \u2018prefix_array\u2019\
    ?\n    7 |     auto prefix_array = make_prefix_array(string);\n      |       \
    \                  ^~~~~~~~~~~~~~~~~\n      |                         prefix_array\n\
    /tmp/tmpdslpz444.cpp:9:25: error: unable to deduce \u2018auto&&\u2019 from \u2018\
    prefix_array\u2019\n    9 |     for (auto & prefix: prefix_array) {\n      | \
    \                        ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  \n  for (auto i = string.begin();\
    \ i != string.end(); ++i){\n    prefixes.emplace_back(*i);\n  }\n\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcpkylgpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ext/new_allocator.h:\
    \ In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*,\
    \ _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {char&};\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/alloc_traits.h:482:2:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {char&};\
    \ _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:115:30:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...)\
    \ [with _Args = {char&}; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string.length() < 2) return {};\n  std::vector<std::string> prefixes;\n\
    \  prefixes.push_back(string);\n  size_t len = 0;\n  while (len < string.length())\
    \ {\n    len = string.length();\n    string += string[len];\n    prefixes.push_back(string);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> strings;\n  strings.push_back(string);\n  \n \
    \ std::string current_prefix = \"\";\n  size_t current_prefix_size = string.length();\n\
    \n  while (true) {\n    current_prefix += string[current_prefix_size - 1];\n \
    \   current_prefix_size--;\n    \n    if (current_prefix_size == 0) {\n      strings.push_back(current_prefix);\n\
    \      break;\n    }\n    \n    std::string next_prefix = \"\";\n    size_t next_prefix_size\
    \ = string.length();\n    while (true) {\n      next_prefix += string[next_prefix_size\
    \ - 1];\n      next_prefix_size--;\n      \n      if (next_prefix_size == 0) {\n\
    \        break;\n      }\n      \n      if (next_prefix == current_prefix) {\n\
    \        strings[strings.size() - 1].clear();\n        break;\n      }\n    }\n\
    \  }\n\n  return strings;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int n = string.length();\n    if (n == 0) {\n        return {};\n   \
    \ }\n    std::vector<std::string> prefixes(n + 1, string);\n    for (int i = 1;\
    \ ; ++i) {\n        prefixes[i] = std::string(i, prefixes[i - 1]);\n        int\
    \ j = 1;\n        while (j <= i) {\n            prefixes[j] = prefixes[i - j]\
    \ + prefixes[i - j + 1];\n            ++j;\n        }\n        if (prefixes[i]\
    \ != string) {\n            break;\n        }\n    }\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmjx9bgvp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpmjx9bgvp.cpp:13:53: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char> >,\
    \ std::__cxx11::basic_string<char> >::value_type&)\u2019\n   13 |         prefixes[i]\
    \ = std::string(i, prefixes[i - 1]);\n      |                                \
    \                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmjx9bgvp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmjx9bgvp.cpp:13:53:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    int\u2019 and \u2018std::__cxx11::basic_string<char>\u2019)\n   13 |         prefixes[i]\
    \ = std::string(i, prefixes[i - 1]);\n      |   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  sort(string.begin(), string.end());\n  std::vector<std::string> prefixes;\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      if (string[j - i] == string[j]) {\n        prefixes.push_back(string);\n\
    \        break;\n      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1gl9xpp0: /tmp/tmp1gl9xpp0.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string.length() == 0) return std::vector<std::string>();\n  \n  vector<string>\
    \ prefixes;\n  for (int i = 0; i < string.length(); ++i) {\n    vector<string>\
    \ tmp = all_prefixes(string.substr(0, i));\n    for (auto j : tmp) prefixes.emplace_back(j);\n\
    \  }\n  \n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqv3d9ek.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpgqv3d9ek.cpp:9:3: error: \u2018\
    vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019\
    ?\n    9 |   vector<string> prefixes;\n      |   ^~~~~~\n      |   std::vector\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgqv3d9ek.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpgqv3d9ek.cpp:9:18:\
    \ error: \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018\
    all_prefixes\u2019?\n    9 |   vector<string> prefixes;\n      |             \
    \     ^~~~~~~~\n      |                  all_prefixes\n/tmp/tmpgqv3d9ek.cpp:11:20:\
    \ error: \u2018tmp\u2019 was not declared in this scope; did you mean \u2018tm\u2019\
    ?\n   11 |     vector<string> tmp = all_prefixes(string.substr(0, i));\n     \
    \ |                    ^~~\n      |                    tm\n/tmp/tmpgqv3d9ek.cpp:12:19:\
    \ error: unable to deduce \u2018auto&&\u2019 from \u2018tmp\u2019\n   12 |   \
    \  for (auto j : tmp) prefixes.emplace_back(j);\n      |                   ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (auto it = string.begin(); it\
    \ != string.end(); it++) {\n    for (auto j = it + 1; j < string.end(); j++) {\n\
    \      prefixes.push_back(string);\n    }\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbuz5lc22: /tmp/tmpbuz5lc22.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string.length() == 0) return {};\n  std::vector<std::string> result;\n\
    \  result.reserve(string.size());\n  for (auto it = string.begin(); it != string.end();\
    \ ++it) {\n    result.emplace_back(it);\n    result.emplace_back(std::next(it));\n\
    \  }\n  std::sort(result.begin(), result.end());\n  for (auto it = result.begin();\
    \ it != result.end();) {\n    if (result.size() == 1) {\n      result.push_back(std::move(*it));\n\
    \      it = result.erase(it);\n    } else {\n      auto next = std::next(it);\n\
    \      it = result.erase(it);\n      result.push_back(*it);\n      it = next;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2y_53wua.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ext/new_allocator.h:\
    \ In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*,\
    \ _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >&}; _Tp = std::__cxx11::basic_string<char>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/alloc_traits.h:482:2:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >&}; _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/shared/cen"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  // O(1), no extra memory required\n\
    \  for (int i = 0; i < (int) string.size(); i++) {\n    // O(1), no extra memory\
    \ required\n    for (int j = 0; j < i; j++) {\n      // O(1), no extra memory\
    \ required\n      if (string[i] != string[j]) {\n        prefixes.push_back(string[i]);\n\
    \        break;\n      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7cd7v2iy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7cd7v2iy.cpp:14:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   14 |         prefixes.push_back(string[i]);\n\
    \      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp7cd7v2iy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string);\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  while (string.length() != 0) {\n    size_t i = 0;\n    while (i < string.length()\
    \ && string[i] != string[0]) {\n      i++;\n    }\n    prefixes.push_back(string);\n\
    \    string.erase(0, i + 1);\n  }\n  return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8thx5wjq.cpp:2:\n/tmp/tmp8thx5wjq.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmp8thx5wjq.cpp:7:10: error: could not convert \u2018string\u2019 from\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to\
    \ \u2018bool\u2019\n    7 |   assert(string);\n      |          ^\n      |   \
    \       |\n      |          std::string {aka std::__cxx11::basic_string<char>}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // Store prefixes in a vector and sort them\n  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i <= string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  std::sort(prefixes.begin(), prefixes.end());\n\n  // Return list\
    \ of all prefixes\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpearpr91e: /tmp/tmpearpr91e.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefix;\n    for (auto i = 0; i < string.size();\
    \ i++) {\n        for (auto j = i; j < string.size(); j++) {\n            if (string[i]\
    \ == string[j]) {\n                prefix.push_back(string[i]);\n            }\n\
    \        }\n    }\n    return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2owlk0hg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2owlk0hg.cpp:11:43: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |                 prefix.push_back(string[i]);\n\
    \      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2owlk0hg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string tmp;\n    for (size_t\
    \ i = 0; i < string.length(); i++) {\n        tmp = string.substr(0, i);\n   \
    \     prefixes.push_back(tmp);\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp86r8fvli: /tmp/tmp86r8fvli.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  vector<std::string> prefixes;\n  for (int i = 0; string.length() - i; i++)\
    \ {\n    prefixes.push_back(string);\n  }\n  prefixes.push_back(string);\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdfs_2_1v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdfs_2_1v.cpp:7:3: error: \u2018\
    vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019\
    ?\n    7 |   vector<std::string> prefixes;\n      |   ^~~~~~\n      |   std::vector\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdfs_2_1v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpdfs_2_1v.cpp:7:21:\
    \ error: expected primary-expression before \u2018>\u2019 token\n    7 |   vector<std::string>\
    \ prefixes;\n      |                     ^\n/tmp/tmpdfs_2_1v.cpp:7:23: error:\
    \ \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018all_prefixes\u2019\
    ?\n    7 |   vector<std::string> prefixes;\n      |                       ^~~~~~~~\n\
    \      |                       all_prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  // Add an empty prefix so we can detect\
    \ an early return\n  result.push_back(\"\");\n  // This loop will run at most\
    \ 6 times (length of string).\n  // We can exit early if the longest prefix is\
    \ not longer than \n  // 3 chars (length of 'a') by checking the first char.\n\
    \  // This loop can be unrolled by using prefix instead of looping over the string.\n\
    \  for (int i = 0; i < string.size(); ++i) {\n    if (i == 0 && string[i] != 'a')\
    \ {\n      return result;\n    }\n    // Shift the prefix to the right until we\
    \ find a 'a'\n    // This way we can detect early returns.\n    while (i > 0 &&\
    \ (string[i - 1] == 'a' || string[i - 1] == 'a' + 1)) {\n      result.push_back(string[i\
    \ - 1]);\n      i = i - 1;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2uuxe5le.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2uuxe5le.cpp:21:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   21 |       result.push_back(string[i - 1]);\n\
    \      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2uuxe5le.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string);\n  std::vector<std::string> prefixes;\n  int n = string.length();\n\
    \  for (int i = n; i != 0; i--) {\n    prefixes.push_back(string[i - 1]);\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpewl8xhmz.cpp:2:\n/tmp/tmpewl8xhmz.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmpewl8xhmz.cpp:7:10: error: could not convert \u2018string\u2019 from\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to\
    \ \u2018bool\u2019\n    7 |   assert(string);\n      |          ^\n      |   \
    \       |\n      |          std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpewl8xhmz.cpp:11:37: error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   11 |     prefixes.push_back(string[i - 1]);\n      |                    \
    \                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpewl8xhmz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i < string.length();\
    \ i++) {\n    prefixes.push_back(string[0] + string[i]);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzrzznpod.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpzrzznpod.cpp:9:45: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n    9 |     prefixes.push_back(string[0] + string[i]);\n      |            \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpzrzznpod.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  if (string.empty()) return result;\n\
    \  std::string prefix = string;\n  for (int i = 0; i < string.length(); i++)\n\
    \  {\n    prefix = prefix + \"a\";\n    result.push_back(prefix);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmplogbke_2: /tmp/tmplogbke_2.cpp:20: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string.length() != 0);\n\n  std::vector<std::string> prefixes;\n\
    \  prefixes.reserve(string.size() + 1);\n\n  std::string prefix;\n  for (size_t\
    \ i = 0; i < string.size(); ++i) {\n    prefix = string;\n    prefix += i;\n \
    \   prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_gor3ocg: /tmp/tmp_gor3ocg.cpp:7: std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string): Assertion `string.length() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  if (string.empty()) return prefixes;\n\
    \  auto it = string.begin();\n  auto last = it;\n  while (it != string.end())\
    \ {\n    auto next = it;\n    ++next;\n    prefixes.push_back(string(last, next));\n\
    \    last = it;\n    it = next;\n  }\n  return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_y41g3dx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_y41g3dx.cpp:14:41: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >&)\u2019\n   14 |     prefixes.push_back(string(last, next));\n      |    \
    \                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  result.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    result.push_back(string);\n  \
    \  result.push_back(string[i]);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcng_vor3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpcng_vor3.cpp:11:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |     result.push_back(string[i]);\n      |\
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpcng_vor3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::string longest = string, shortest = string;\n    for (size_t i =\
    \ 0; i < shortest.size(); ++i) {\n        longest[i] = shortest[i];\n    }\n \
    \   std::vector<std::string> result;\n    while (longest != \"\") {\n        result.push_back(longest);\n\
    \        longest.erase(longest + 1);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq9ppm52e.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpq9ppm52e.cpp:14:31: error: no match\
    \ for \u2018operator+\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n   14 |        \
    \ longest.erase(longest + 1);\n      |                       ~~~~~~~ ^ ~\n   \
    \   |                       |         |\n      |                       |     \
    \    int\n      |                       std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq9ppm52e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq9ppm52e.cpp:14:33:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   14 |         longest.erase(longest + 1);\n      |  \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/inc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string current = \"\";\n\
    \    for (unsigned int i = 0; i < string.length(); i++) {\n        current = current\
    \ + string[i];\n        if (!prefixes.empty())\n            prefixes.push_back(current);\n\
    \        current = \"\";\n    }\n    prefixes.push_back(current);\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjwpmvbhl: /tmp/tmpjwpmvbhl.cpp:20: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string.length() == 0) return std::vector<std::string>();\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (unsigned int i = 1; i < string.length();\
    \ i++) {\n    prefixes.push_back(string[i - 1] +\n                       string[i]);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3720960.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpf3720960.cpp:12:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   12 |                        string[i]);\n      |                        \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpf3720960.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (char c : string) {\n   \
    \     // Add prefix to prefix list\n        if (string.length >= c) {\n      \
    \      prefixes.push_back(string);\n            // Remove prefix from string\n\
    \            string = string.substr(0, string.length() - 1);\n        } else {\n\
    \            break;\n        }\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbufnx3ar.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbufnx3ar.cpp:10:20: error: invalid\
    \ use of member function \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019 (did you forget the \u2018\
    ()\u2019 ?)\n   10 |         if (string.length >= c) {\n      |             ~~~~~~~^~~~~~\n\
    \      |                          ()\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \n  for (size_t i = 1; i < string.size(); i++) {\n    if (string[i] == string[i\
    \ - 1]) {\n      prefixes.push_back(string[i]);\n    } else {\n      prefixes.push_back(string[i\
    \ - 1] + string[i]);\n    }\n  }\n\n  return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoi1bcp4m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpoi1bcp4m.cpp:12:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |       prefixes.push_back(string[i]);\n  \
    \    |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpoi1bcp4m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i < string.size();\
    \ ++i) {\n        prefixes.emplace_back(string);\n        prefixes.back().insert(0,\
    \ string[i], 1);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpo46ff2i8: /tmp/tmpo46ff2i8.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Your code here\n    std::vector<std::string> prefixes;\n    std::string\
    \ last_character = \"\";\n    std::string first_character = string;\n    while(first_character[0]\
    \ != last_character[0]) {\n        prefixes.push_back(first_character);\n    \
    \    last_character = first_character;\n        first_character = first_character.substr(1);\n\
    \    }\n    prefixes.push_back(first_character);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpm12la7ad: /tmp/tmpm12la7ad.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    auto it = std::begin(string), end = std::end(string);\n    std::stack<std::string>\
    \ prefixes;\n    while (it != end) {\n        auto next = std::next(it);\n   \
    \     if (next == end) break;\n        prefixes.emplace(*it);\n        it = next;\n\
    \    }\n    return prefixes.empty() ? std::vector<std::string>() : (std::vector<std::string>{prefixes.top()},\
    \ prefixes.pop());\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3h8eerpt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp3h8eerpt.cpp:15:36: error: third\
    \ operand to the conditional operator is of type \u2018void\u2019, but the second\
    \ operand is neither a throw-expression nor of type \u2018void\u2019\n   15 |\
    \     return prefixes.empty() ? std::vector<std::string>() : (std::vector<std::string>{prefixes.top()},\
    \ prefixes.pop());\n      |                                    ^~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3h8eerpt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ext/new_allocator.h:\
    \ In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*,\
    \ _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {char&};\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/alloc_traits.h:482:2:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = string;\n\
    \    bool prefix_empty = true;\n    while (!prefix_empty) {\n        prefix =\
    \ prefix + prefix;\n        prefix_empty = false;\n        for (size_t i = 0;\
    \ i < prefix.size(); ++i) {\n            if (prefixes.find(prefix) != prefixes.end())\
    \ {\n                prefix_empty = true;\n                break;\n          \
    \  }\n            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_cziqic6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_cziqic6.cpp:14:26: error: \u2018\
    class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member named\
    \ \u2018find\u2019\n   14 |             if (prefixes.find(prefix) != prefixes.end())\
    \ {\n      |                          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::stack<std::string> prefix;\n    for (char c : string) {\n      \
    \  prefix.push(c);\n        if (prefix.size() == string.length()) {\n        \
    \    // We're done\n            return { prefix.top() };\n        }\n    }\n\n\
    \    return {};\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyvemprl4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpyvemprl4.cpp:9:22: error: no matching\
    \ function for call to \u2018std::stack<std::__cxx11::basic_string<char> >::push(char&)\u2019\
    \n    9 |         prefix.push(c);\n      |                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpyvemprl4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:233:7:\
    \ note: candidate: \u2018void std::stack<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  233 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:233:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  233 |       push(const value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:238:7: note:\
    \ candidate: \u2018void std::stack<_Tp, _Sequence>::push(std::stack<_Tp, _Sequence>::value_type&&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::stack<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  238 |       push(value_type&& __x)\n\
    \      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:238:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::stack<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  238 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    size_t prefix_length = i;\n  \
    \  std::string prefix = string;\n    for (size_t j = 0; j < i; ++j) {\n      prefix\
    \ = prefix + (string[j];\n    }\n    prefixes.push_back(prefix);\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4kdayfuu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp4kdayfuu.cpp:13:35: error: expected\
    \ \u2018)\u2019 before \u2018;\u2019 token\n   13 |       prefix = prefix + (string[j];\n\
    \      |                         ~         ^\n      |                        \
    \           )\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> output;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        for (int j = i + 1; j < string.size(); j++) {\n            output.push_back(string.substr(i,\
    \ j));\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpudcr4e3o: /tmp/tmpudcr4e3o.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefix_list;\n  // Base case if input is empty\
    \ string\n  if (string.size() <= 1) return prefix_list;\n\n  // Add first element\
    \ to prefix list\n  prefix_list.push_back(string[0]);\n  // Recur for remaining\
    \ elements\n  for (int i = 1; i < string.size(); i++) {\n    prefix_list.push_back(prefix_list[-1]\
    \ + string[i]);\n  }\n  return prefix_list;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqszo71jv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpqszo71jv.cpp:12:34: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |   prefix_list.push_back(string[0]);\n   \
    \   |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqszo71jv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  if (string.empty()) return prefixes;\n\
    \  else if (string[0] == '.') return prefixes;\n  auto prefix = &string[0];\n\
    \  auto pos = 0;\n  while (pos < string.length()) {\n    if (string[pos] == '.')\
    \ {\n      prefixes.push_back(prefix);\n      prefix = &string[pos+1];\n    }\n\
    \    ++pos;\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpb2u6kuoa: /tmp/tmpb2u6kuoa.cpp:24: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = string.length() - 1;\
    \ i >= 0; --i) {\n    std::string prefix = string;\n    prefix.push_back(i);\n\
    \    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main() {\n \
    \   auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp4v_iy603: /tmp/tmp4v_iy603.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> retval;\n\t\n\tfor (auto i = string.begin(); i\
    \ != string.end(); ++i) {\n\t\tif (i == string.begin())\n\t\t\tretval.push_back(\"\
    a\");\n\t\telse if (i[-1] == 'a')\n\t\t\tretval.push_back(\"a\" + string(i - 1));\n\
    \t\telse\n\t\t\tretval.push_back(i + 1);\n\t}\n\t\n\treturn retval;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnysfiva8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnysfiva8.cpp:13:39: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >)\u2019\n   13 |    retval.push_back(\"a\"\
    \ + string(i - 1));\n      |                                       ^\n/tmp/tmpnysfiva8.cpp:15:26:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >)\u2019\n   15 |    retval.push_back(i + 1);\n      |                     \
    \     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpnysfiva8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018const value_type&\u2019 {aka\
    \ \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefix_list;\n  if (string.length() <= 1) {\n\
    \    prefix_list.push_back(string);\n  } else {\n    for (size_t i = 1; i < string.length();\
    \ ++i) {\n      prefix_list.push_back(string.substr(0, i));\n    }\n  }\n  return\
    \ prefix_list;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7qqc7p3k: /tmp/tmp7qqc7p3k.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // base case\n    if (string.length() == 1) {\n        return {string};\n\
    \    }\n    // recursive case\n    std::vector<std::string> prefixes{all_prefixes(string.substr(1))};\n\
    \    prefixes.push_back(string);\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 1) > this->size() (which is 0)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  if (string.size() == 0)\n    return\
    \ prefixes;\n  // Add an empty prefix for the first character of the string\n\
    \  prefixes.push_back(string[0]);\n  for (int i = 1; i < string.size(); i++) {\n\
    \    // Add all the prefixes of a single character string\n    prefixes.push_back(string[i\
    \ - 1] + string[i]);\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqybunxrs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpqybunxrs.cpp:11:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |   prefixes.push_back(string[0]);\n      |\
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqybunxrs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int n = string.size();\n    std::vector<std::string> prefixes;\n    if\
    \ (n <= 1)\n        return prefixes;\n    for (int i = n; i >= 2; i--) {\n   \
    \     // prefix += i\n        // prefixes += prefix;\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpdedcgise: /tmp/tmpdedcgise.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefix;\n    prefix.push_back(string[0]);\n\
    \    prefix.reserve(1);\n    for (int i = 1; i < string.size(); i++) {\n     \
    \   prefix.push_back(prefix[i - 1] + string[i]);\n    }\n    return prefix;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbmqv2pj7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbmqv2pj7.cpp:8:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    8 |     prefix.push_back(string[0]);\n      |\
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpbmqv2pj7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    int string_length = string.length();\n\
    \n    for (int i = 0; i < string_length; ++i) {\n        for (int j = i; j < string_length;\
    \ ++j) {\n            std::string prefix = string.substr(i, j);\n            results.push_back(prefix);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprx8y3_ny: /tmp/tmprx8y3_ny.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::list<std::string> prefixes = {string};\n    for(std::size_t i =\
    \ 1; i < string.length(); ++i) {\n        if(string.at(i) == string.at(i - 1))\n\
    \            continue;\n        for(std::list<std::string>::iterator it = prefixes.begin();\
    \ it != prefixes.end(); ++it)\n            prefixes.insert(*it+std::to_string(i),\
    \ \"\");\n    }\n    std::vector<std::string> ret(prefixes.begin(), prefixes.end());\n\
    \    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa3gcmqt0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpa3gcmqt0.cpp:12:54: error: no matching\
    \ function for call to \u2018std::__cxx11::list<std::__cxx11::basic_string<char>\
    \ >::insert(std::__cxx11::basic_string<char>, const char [1])\u2019\n   12 | \
    \            prefixes.insert(*it+std::to_string(i), \"\");\n      |          \
    \                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/list:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpa3gcmqt0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/list.tcc:101:5:\
    \ note: candidate: \u2018std::__cxx11::list<_Tp, _Alloc>::iterator std::__cxx11::list<_Tp,\
    \ _Alloc>::insert(std::__cxx11::list<_Tp, _Alloc>::const_iterator, const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::__cxx11::list<_Tp, _Alloc>::iterator = std::_List_iterator<std::__cxx11::basic_string<char>\
    \ >; std::__cxx11::list<_Tp, _Alloc>::const_iterator = std::_List_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::__cxx11::list<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  101 |     list<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/list.tcc:103:27:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018std::__cxx11::list<std::__cxx11::basic_string<char> >::const_iterator\u2019\
    \ {aka \u2018std::_List_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    }\n  103 |     insert(const_iterator __position, const value_type& __x)\n    \
    \  |            ~~~~~~~~~~~~~~~^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/list:63,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpa3gcmqt0.cpp:2:\n/shared/centos7/gcc/9.2.0-skyl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  int index = 0;\n  while (index < string.length())\
    \ {\n    // If current letter is first letter, add it\n    if (index == 0) {\n\
    \      result.push_back(string[index]);\n      index++;\n      continue;\n   \
    \ }\n\n    // If current letter is same as last letter, skip it\n    if (string[index]\
    \ == string[index - 1]) {\n      index++;\n      continue;\n    }\n\n    // If\
    \ current letter is not same as the previous letter, add it\n    result.push_back(string[index]);\n\
    \    index++;\n  }\n\n  return result;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp_ppmjk9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpp_ppmjk9.cpp:12:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |       result.push_back(string[index]);\n\
    \      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpp_ppmjk9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> strings;\n  for (int i = 0; i < string.size();\
    \ i++)\n    for (int j = i; j < string.size(); j++)\n      strings.push_back(string.substr(i,\
    \ j));\n  return strings;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp67donc7h: /tmp/tmp67donc7h.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string.length() > 0);\n  std::vector<std::string> result;\n  int\
    \ start = 0;\n  for (int i = 0; i < string.length(); i++) {\n    while (i < string.length()\
    \ && string[i] != string[start]) {\n      result.push_back(string[start]);\n \
    \     start++;\n    }\n    start = i + 1;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbh_xbiqn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbh_xbiqn.cpp:12:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |       result.push_back(string[start]);\n\
    \      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpbh_xbiqn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  \n  std::vector<std::string> prefixes;\n  \n  for(int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  \n  prefixes.push_back(string);\n\
    \  \n  for(int i = string.length()-1; i >= 0; i--) {\n    \n    // add prefixes\
    \ of length one and two\n    for(int j = 0; j < i; j++){\n      prefixes.push_back(string);\n\
    \    }\n  }\n  \n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmppjxh7jca: /tmp/tmppjxh7jca.cpp:28: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  auto n = string.length();\n  int\
    \ cur = 0;\n  while (n > 0) {\n    prefixes.push_back(string[cur]);\n    cur++;\n\
    \    n--;\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqk43nnbm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpqk43nnbm.cpp:11:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |     prefixes.push_back(string[cur]);\n  \
    \    |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqk43nnbm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tprefixes.push_back(string);\n\tfor\
    \ (int i = string.length() - 1; i >= 0; --i) {\n\t\tfor (int j = 0; j < prefixes.size();\
    \ ++j) {\n\t\t\tprefixes[j] += string[i];\n\t\t\tfor (int k = j + 1; k < prefixes.size();\
    \ ++k) {\n\t\t\t\tprefixes[k] += string[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmps683bex8: /tmp/tmps683bex8.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string prefix_so_far;\n  std::vector<std::string> prefixes;\n  for\
    \ (int i = 0; i < string.length(); ++i) {\n    prefix_so_far = string[i];\n  \
    \  prefixes.push_back(prefix_so_far);\n    for (int j = i + 1; j < string.length();\
    \ ++j) {\n      std::string next = prefix_so_far + string[j];\n      prefixes.push_back(next);\n\
    \    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpr9_tl1zg: /tmp/tmpr9_tl1zg.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // code here\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbrx2jio1: /tmp/tmpbrx2jio1.cpp:12: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  if (string.empty()) return prefixes;\n\
    \n  size_t longest_prefix_len = string[0].length();\n  for (auto c : string) {\n\
    \    if (c != string[0]) {\n      longest_prefix_len = std::max(longest_prefix_len,\
    \ c.length());\n    }\n  }\n\n  for (size_t i = longest_prefix_len; i > 0; --i)\
    \ {\n    prefixes.push_back(string[0]);\n  }\n\n  prefixes.push_back(string);\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaz0edry3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpaz0edry3.cpp:10:41: error: request\
    \ for member \u2018length\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](0)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   10 |   size_t longest_prefix_len\
    \ = string[0].length();\n      |                                         ^~~~~~\n\
    /tmp/tmpaz0edry3.cpp:13:59: error: request for member \u2018length\u2019 in \u2018\
    c\u2019, which is of non-class type \u2018char\u2019\n   13 |       longest_prefix_len\
    \ = std::max(longest_prefix_len, c.length());\n      |                       \
    \                                    ^~~~~~\n/tmp/tmpaz0edry3.cpp:18:33: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   18 |     prefixes.push_back(string[0]);\n      |                        \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpaz0edry3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::string prefix = string;\n\
    \    while (!prefix.empty()) {\n        result.push_back(prefix);\n        prefix\
    \ = prefix.substr(0, prefix.size() - 1);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyrkelv7h: /tmp/tmpyrkelv7h.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int n = string.length();\n    std::vector<std::string> prefixes(n + 1,\
    \ string);\n    for (int i = 1; i < n; i++) {\n        prefixes[i] = prefixes[i\
    \ - 1] + string[i];\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp8wy80ur8: /tmp/tmp8wy80ur8.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string == \"\") {\n    return {};\n  }\n  std::vector<std::string>\
    \ res;\n  res.push_back(string);\n  for (size_t i = 1; i < string.length(); i++)\
    \ {\n    res.push_back(string.substr(0, i));\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp6ofdvrd5: /tmp/tmp6ofdvrd5.cpp:20: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string prefix = \"\";\n  std::vector<std::string> prefixes;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    prefix += string[i];\n    prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (auto &c : string) {\n    prefixes.emplace_back(c);\n    prefixes.emplace_back(std::to_string(string.length()));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/c++allocator.h:33,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/allocator.h:46,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjrtnrh8c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ext/new_allocator.h:\
    \ In instantiation of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*,\
    \ _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {char&};\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/alloc_traits.h:482:2:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {char&};\
    \ _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:115:30:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...)\
    \ [with _Args = {char&}; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> ans;\n  if (string.length() > 0) {\n    ans.push_back(string[0]);\n\
    \    for (int i = 1; i < string.length(); ++i) {\n      ans.push_back(string[0]\
    \ + string[i]);\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp779xms43.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp779xms43.cpp:9:28: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     ans.push_back(string[0]);\n      |  \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp779xms43.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string);\n  std::vector<std::string> prefixes;\n  for (size_t i\
    \ = 0; i < string.size() - 1; ++i) {\n    prefixes.push_back(string(i, string.length()));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmperc9h844.cpp:2:\n/tmp/tmperc9h844.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmperc9h844.cpp:7:10: error: could not convert \u2018string\u2019 from\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to\
    \ \u2018bool\u2019\n    7 |   assert(string);\n      |          ^\n      |   \
    \       |\n      |          std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmperc9h844.cpp:10:49: error: no match for call to \u2018(std::string {aka\
    \ std::__cxx11::basic_string<char>}) (size_t&, std::__cxx11::basic_string<char>::size_type)\u2019\
    \n   10 |     prefixes.push_back(string(i, string.length()));\n      |       \
    \                                          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> res;\n  res.push_back(string);\n  for (auto i\
    \ = string.length() - 1; i >= 0; i--) {\n    res.push_back(string[0] + string[i]);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprq9mtl5_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprq9mtl5_.cpp:10:40: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   10 |     res.push_back(string[0] + string[i]);\n      |                 \
    \                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmprq9mtl5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    auto n = string.length();\n    std::vector<std::string> prefixes(n);\n\
    \    for (auto i = 1; i < n; ++i)\n        prefixes[i - 1] = string(n - i - 1,\
    \ string[i]);\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_lceo4pn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_lceo4pn.cpp:10:54: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (long\
    \ unsigned int, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   10 |         prefixes[i - 1] = string(n - i - 1, string[i]);\n      |   \
    \                                                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i < string.size();\
    \ i++)\n        prefixes.push_back(string.substr(0, i));\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpl6fywpic: /tmp/tmpl6fywpic.cpp:15: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    size_t start = 0;\n    size_t\
    \ end = string.length();\n    while (start < end) {\n        size_t mid = (start\
    \ + end) / 2;\n        auto prefix = string.substr(start, mid - start);\n    \
    \    prefixes.push_back(prefix);\n        if (prefix == \"\") {\n            break;\n\
    \        }\n        start = mid + 1;\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp601tpenb: /tmp/tmp601tpenb.cpp:24: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (std::string prefix : all_prefixes_helper(string))\
    \ {\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpujimcdiz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpujimcdiz.cpp:8:29: error: \u2018\
    all_prefixes_helper\u2019 was not declared in this scope; did you mean \u2018\
    all_prefixes\u2019?\n    8 |   for (std::string prefix : all_prefixes_helper(string))\
    \ {\n      |                             ^~~~~~~~~~~~~~~~~~~\n      |        \
    \                     all_prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> strings;\n    std::string s = string;\n    for\
    \ (std::size_t i = 0; i <= s.size(); ++i)\n        strings[i] = s.substr(0, i);\n\
    \    return strings;\n}\nint main() {\n    auto candidate = all_prefixes;\n  \
    \  assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  std::string prefix = string;\n  while (!prefix.empty()) {\n    size_t index\
    \ = prefix.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n    if (index == std::string::npos)\
    \ {\n      prefix = \"\";\n    } else {\n      prefix += string[index];\n    \
    \  prefixes.push_back(prefix);\n    }\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpcamwlmpv: /tmp/tmpcamwlmpv.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefix;\n  for (size_t i = 0, length = string.size();\
    \ i < length; ++i) {\n    prefix.push_back(string[0]);\n    string[0] = string[i];\n\
    \  }\n  return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1gjk951.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpc1gjk951.cpp:9:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     prefix.push_back(string[0]);\n      |\
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpc1gjk951.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    size_t pos;\n    std::string\
    \ longest = string;\n    while ((pos = longest.find(\"a\")) != std::string::npos)\
    \ {\n        prefixes.push_back(longest.substr(0, pos));\n        longest = longest.substr(pos);\n\
    \    }\n    prefixes.push_back(longest);\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpges2ls9u: /tmp/tmpges2ls9u.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  \n  for (size_t i = 0; i < string.size();\
    \ i++) {\n    if (i > 0 && string[i] != string[i - 1]) {\n      prefixes.push_back(string[i\
    \ - 1]);\n    }\n  }\n  \n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpax4labh_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpax4labh_.cpp:11:39: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |       prefixes.push_back(string[i - 1]);\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpax4labh_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argum"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  if (string.empty())\n    return prefixes;\n\
    \n  for (size_t i = 0; i < string.length(); i++) {\n    std::string prefix(string,\
    \ 0, i);\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpkdw1i8ir: /tmp/tmpkdw1i8ir.cpp:20: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tstd::string currPrefix = string;\n\
    \tstd::stack<std::string> currPrefixStack;\n\tfor (std::size_t i = 0; i < currPrefix.length();\
    \ i++) {\n\t\tcurrPrefixStack.push(currPrefix.substr(0, i));\n\t}\n\twhile (currPrefixStack.size()\
    \ > 0) {\n\t\tcurrPrefix = currPrefixStack.top();\n\t\tcurrPrefixStack.pop();\n\
    \t\tprefixes.push_back(currPrefix);\n\t}\n\treturn prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpr83cqd8k: /tmp/tmpr83cqd8k.cpp:23: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tif (string.empty()) {\n\t\treturn\
    \ prefixes;\n\t}\n\tprefixes.push_back(string.substr(0, 1));\n\tauto prefix =\
    \ all_prefixes(string.substr(1));\n\tfor (int i = 2; i < prefix.size(); i++) {\n\
    \t\tprefixes.push_back(prefix[0] + prefix[i]);\n\t}\n\treturn prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3f_b04oa: /tmp/tmp3f_b04oa.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.length() == 0)\n        return std::vector<std::string>();\n\
    \    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n   \
    \ std::string last_prefix = string;\n    while (prefixes.size() < string.length())\
    \ {\n        size_t prefix_length = string.length() - last_prefix.length();\n\
    \        std::string prefix = last_prefix;\n        for (size_t index = 0; index\
    \ < prefix_length; index++)\n            prefix += prefixes[index];\n        prefixes.push_back(prefix);\n\
    \        last_prefix = prefix;\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpd_9qc5gg: /tmp/tmpd_9qc5gg.cpp:25: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        for (size_t j = i; j < string.length(); j++) {\n           \
    \ prefixes.push_back(string);\n        }\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp2_nzb9fw: /tmp/tmp2_nzb9fw.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (auto it = std::begin(string);\
    \ it != std::end(string); ++it) {\n        prefixes.emplace_back(std::begin(*it),\
    \ std::end(*it));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6mecv5bj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6mecv5bj.cpp:9:45: error: no matching\
    \ function for call to \u2018begin(char&)\u2019\n    9 |         prefixes.emplace_back(std::begin(*it),\
    \ std::end(*it));\n      |                                             ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6mecv5bj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6mecv5bj.cpp:9:45:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\
    \n    9 |         prefixes.emplace_back(std::begin(*it), std::end(*it));\n   \
    \   |                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n\n    // iterate through each character\
    \ in string and add prefix of string to prefixes\n    // until there is no more\
    \ character left in string\n    for (size_t i = 0; i < string.length(); i++) {\n\
    \        prefixes.push_back(string);\n        string += string[i];\n    }\n\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix;\n    for\
    \ (size_t i = 0; i < string.length(); ++i) {\n        prefix = string;\n     \
    \   while (string[i] != 'a') {\n            prefix = prefix + \"_\";\n       \
    \ }\n        prefix = prefix + \"a\";\n        prefixes.push_back(prefix);\n \
    \   }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    if (string.size() == 0) return res;\n\
    \    res.push_back(string);\n    std::vector<std::string> remain = all_prefixes(string.substr(1));\n\
    \    for (auto & prefix: remain) res.push_back(prefix + string.substr(1));\n \
    \   return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpbd08ehe1: /tmp/tmpbd08ehe1.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::pair<std::string, std::string>> prefix_list;\n    prefix_list.emplace_back(string,\
    \ string);\n    if (string.length() > 1) {\n        for (auto iter = prefix_list.begin();\
    \ iter != prefix_list.end();) {\n            iter = prefix_list.erase(iter);\n\
    \            iter = prefix_list.emplace_back(iter->first, iter->first);\n    \
    \        prefix_list.emplace_back(iter->first + iter->second.front(), iter->first);\n\
    \            if (iter->second.size() > 1) {\n                for (auto subiter\
    \ = iter->second.begin() + 1; subiter != iter->second.end(); ++subiter) {\n  \
    \                  prefix_list.emplace_back(iter->first + iter->second[subiter\
    \ - iter->second.begin()], iter->first + subiter->front());\n                }\n\
    \            }\n        }\n    }\n    return std::move(prefix_list);\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwvnpmgn6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpwvnpmgn6.cpp:12:69: error: no match\
    \ for \u2018operator=\u2019 (operand types are \u2018__gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >*, std::vector<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > > >\u2019 and \u2018void\u2019)\n   12 |\
    \             iter = prefix_list.emplace_back(iter->first, iter->first);\n   \
    \   |                                                                     ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwvnpmgn6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >*, std::vector<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > > >& __gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >*, std::vector<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> > > >::operator=(const __gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char>,\
    \ std::__cxx11::basic_string<char> >*, std::vector<std::pair<std::__cxx11::basic_string<char>,\
    \ s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Use a map to store the prefixes as they are found\n    std::string\
    \ prefix = \"\";\n    std::vector<std::string> prefixes;\n\n    // Iterate over\
    \ every character in the string\n    for (char c: string) {\n        // If we've\
    \ found a prefix, add it to our list\n        if (prefix.empty()) {\n        \
    \    prefix = c;\n            prefixes.push_back(prefix);\n        }\n       \
    \ // Otherwise, just add the character to our existing prefix\n        else {\n\
    \            prefix += c;\n            prefixes.push_back(prefix);\n        }\n\
    \    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    size_t prev_length = 0;\n    for (size_t i = 0; i != string.size(); ++i)\
    \ {\n        if (string[i] != string[i + prev_length]) {\n            if (i +\
    \ 1 == string.size()) {\n                prefixes.push_back(string.substr(0, i));\n\
    \            } else {\n                prefixes.push_back(string);\n         \
    \   }\n            prev_length = i;\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpf47fnndu: /tmp/tmpf47fnndu.cpp:25: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::vector<int> prefix_length(string.size()\
    \ + 1);\n    for (size_t i = 0; i < string.size(); ++i)\n        prefix_length[i\
    \ + 1] = 1;\n    for (size_t i = 1; i < string.size(); ++i) {\n        for (size_t\
    \ j = 0; j < i; ++j) {\n            if (string[i] == string[j]) {\n          \
    \      prefix_length[j + 1]++;\n            }\n        }\n    }\n    // std::cout\
    \ << prefix_length << std::endl;\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        result.push_back(string.substr(0, prefix_length[i]));\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpncmpc6lr: /tmp/tmpncmpc6lr.cpp:27: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Create our vector to hold the prefixes\n    std::vector<std::string>\
    \ prefixes;\n    // Find the shortest length of the input\n    int shortest_len\
    \ = string.size();\n    // For each char iteratively find prefix for each length\n\
    \    for (int i = 0; i < shortest_len; i++) {\n        // For each length find\
    \ the shortest prefix to the current length\n        for (int j = shortest_len\
    \ - i; j < shortest_len; j++) {\n            // For each prefix check if it matches\
    \ the input string\n            if (string[j] == string[i]) {\n              \
    \  // If it does then add the prefix to the vector\n                prefixes.push_back(string);\n\
    \                // Remove the prefix from the input\n                string.erase(0,\
    \ j + 1);\n            }\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpeehm8800: /tmp/tmpeehm8800.cpp:29: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> results;\n  results.reserve(string.size());\n\n\
    \  // Iterate over all characters in string\n  for (int i = 0; i < string.size();\
    \ i++) {\n    // Iterate over all prefixes\n    for (int j = i; j < string.size();\
    \ j++)\n      results.push_back(string.substr(i, j));\n  }\n\n  return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpff8_8htm: /tmp/tmpff8_8htm.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n\n  // base case\n  if (string.length()\
    \ == 0)\n    return result;\n\n  // find prefix of first character\n  auto firstChar\
    \ = string[0];\n\n  // recurse and search from there\n  result.push_back(firstChar);\n\
    \  all_prefixes(string.substr(1));\n\n  return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo7_v4vow.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpo7_v4vow.cpp:17:29: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   17 |   result.push_back(firstChar);\n      |                            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpo7_v4vow.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(valu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    auto current = string.begin();\n\
    \    for (auto p = string.begin(); p != string.end(); ++p) {\n        if (*current\
    \ == *p) {\n            current = p;\n            continue;\n        }\n     \
    \   result.push_back(std::string{*current, *p});\n        current = p;\n    }\n\
    \    if (current != string.end()) {\n        result.push_back(std::string{*current,\
    \ string.end()});\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfsxb_r2g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfsxb_r2g.cpp:18:60: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(<brace-enclosed\
    \ initializer list>)\u2019\n   18 |         result.push_back(std::string{*current,\
    \ string.end()});\n      |                                                   \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfsxb_r2g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\
    \n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n \
    \     |         ^~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:625:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfsxb_r2g.cpp:18:60:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    char\u2019 and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   18 |         result.push_back(std::string{*current, string.end()});\n\
    \      |                                      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string prefix = \"\";\n  std::string current = string;\n  std::vector<std::string>\
    \ result;\n\n  while (current.size() > 0) {\n    prefix += current;\n    result.push_back(prefix);\n\
    \    current = current.substr(1);\n  }\n\n  return result;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpgjzaamu8: /tmp/tmpgjzaamu8.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.length() == 0) return {};\n\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(string[0]);\n\n    for (size_t i = 1; i <\
    \ string.length(); ++i) {\n        for (auto j : all_prefixes(string.substr(0,\
    \ i))) prefixes.push_back(j);\n        prefixes.push_back(string[i]);\n    }\n\
    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3aj1682x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp3aj1682x.cpp:10:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     prefixes.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp3aj1682x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string prefix;\n  std::vector<std::string> prefixes;\n  for (size_t\
    \ i = 0; i < string.length(); i++) {\n    prefix = \"\";\n    for (size_t j =\
    \ 0; j < i; j++) {\n      prefix += string[j];\n    }\n    prefix = prefix + \"\
    a\";\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprp_js1au: /tmp/tmprp_js1au.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); ++i) {\n    std::string pre = string.substr(0,\
    \ i);\n    prefixes.push_back(pre);\n  }\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp4oq_co9n: /tmp/tmp4oq_co9n.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string.length());\n  std::sort(string.begin(), string.end());\n\
    \  std::vector<std::string> prefix_list;\n  for (auto current = string.begin();\
    \ current != string.end(); current++) {\n    prefix_list.push_back(*current);\n\
    \    while (current != string.end() && *current == *(current + 1)) {\n      current++;\n\
    \    }\n  }\n  return prefix_list;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjtxu_b9d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpjtxu_b9d.cpp:11:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   11 |     prefix_list.push_back(*current);\n      |                      \
    \             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpjtxu_b9d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       pu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string::size_type start = 0, end = string.length();\n  std::vector<std::string>\
    \ result;\n  while ((end - start) > 1) {\n    result.push_back(string[start]);\n\
    \    start++;\n    end = string.find_first_of(string[start], end);\n  }\n  result.push_back(string[start]);\n\
    \  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfgoon00d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfgoon00d.cpp:10:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     result.push_back(string[start]);\n  \
    \    |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpfgoon00d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  if (string.size() <= 1) return result;\n\
    \  auto prefix = string[0];\n  auto pos = 1;\n  while (pos < string.size()) {\n\
    \    result.push_back(prefix);\n    prefix = string[pos];\n    pos++;\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcyga61r3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpcyga61r3.cpp:12:28: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   12 |     result.push_back(prefix);\n      |                            ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpcyga61r3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Store all prefixes here\n    std::vector<std::string> prefixes;\n\n\
    \    // Iterate over input string from 1st to end\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        // Get the current prefix\n        std::string prefix = string(i);\n\
    \n        // Iterate over input string from start to current position\n      \
    \  for (int j = i; j < string.length(); ++j) {\n            // If the current\
    \ character is the same as the current prefix,\n            // then this prefix\
    \ is part of the final result, so add it\n            if (prefix == string(i))\
    \ {\n                prefixes.push_back(prefix);\n                // Stop looking\
    \ for a prefix after finding it\n                break;\n            }\n     \
    \       // If the current character is not the same as the current prefix,\n \
    \           // then we are done searching for prefixes, so we add the current\n\
    \            // prefix to the final result\n            prefixes.push_back(prefix);\n\
    \        }\n    }\n\n    // Return all prefixes\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprxdhb1et.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprxdhb1et.cpp:13:38: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&)\u2019\
    \n   13 |         std::string prefix = string(i);\n      |                   \
    \                   ^\n/tmp/tmprxdhb1et.cpp:19:35: error: no match for call to\
    \ \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&)\u2019\n  \
    \ 19 |             if (prefix == string(i)) {\n      |                       \
    \            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  int size = string.size();\n  std::vector<std::string> res;\n  while (size\
    \ > 0) {\n    res.push_back(string[0]);\n    string copy = string;\n    copy =\
    \ copy.substr(1, size);\n    size -= 1;\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjnbike0w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpjnbike0w.cpp:10:28: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     res.push_back(string[0]);\n      |  \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpjnbike0w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    auto it = std::begin(string);\n    auto end = std::end(string);\n   \
    \ std::vector<std::string> prefixes;\n    std::string prefix = *it++;\n    prefixes.push_back(prefix);\n\
    \    for (; it != end; ++it) {\n        prefix = prefix + *it;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgrjp1zn3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpgrjp1zn3.cpp:10:26: error: conversion\
    \ from \u2018char\u2019 to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n   10 |     std::string prefix\
    \ = *it++;\n      |                          ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    // Initialize result with all prefixes\n\
    \    for (auto i = string.rbegin(); i != string.rend(); ++i) {\n        result.push_back(i->first);\n\
    \    }\n    // Search for longest prefix and add it to result\n    for (auto i\
    \ = string.rbegin(); i != string.rend(); ++i) {\n        if (*i == *string.rbegin())\
    \ {\n            // prefix found\n            result.push_back(i->first);\n  \
    \          // Move to next letter in string\n            ++i;\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9j6mbha.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpx9j6mbha.cpp:10:29: error: request\
    \ for member \u2018first\u2019 in \u2018* i.std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >::operator->()\u2019, which is of non-class\
    \ type \u2018char\u2019\n   10 |         result.push_back(i->first);\n      |\
    \                             ^~~~~\n/tmp/tmpx9j6mbha.cpp:16:33: error: request\
    \ for member \u2018first\u2019 in \u2018* i.std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >::operator->()\u2019, which is of non-class\
    \ type \u2018char\u2019\n   16 |             result.push_back(i->first);\n   \
    \   |                                 ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefix;\n    // Loop over each character in\
    \ the string\n    for (int i = 0; i < string.length(); i++) {\n        // Find\
    \ all prefixes of string that start with the current character\n        auto it\
    \ = std::find_if(prefix.begin(), prefix.end(), [&string](int x) { return string.substr(0,\
    \ x) == x; });\n        // If the string does not begin with the current character,\
    \ add the current character to the prefix\n        if (it == prefix.end()) {\n\
    \            prefix.push_back(string[i]);\n        }\n    }\n    return prefix;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwccos4pj.cpp: In lambda function:\n/tmp/tmpwccos4pj.cpp:11:108:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   11 |         auto it = std::find_if(prefix.begin(),\
    \ prefix.end(), [&string](int x) { return string.substr(0, x) == x; });\n    \
    \  |                                                                         \
    \               ~~~~~~~~~~~~~~~~~~~ ^~ ~\n      |                            \
    \                                                                         |  \
    \       |\n      |                                                           \
    \                                          |         int\n      |            \
    \                                                                            \
    \             std::__cxx11::basic_string<char>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwccos4pj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwccos4pj.cpp:11:111:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   11 |         auto it = std::find_if(prefix.begin(),\
    \ prefix.end(), [&string](int x) { return string.substr(0, x) == x; });\n    \
    \  |                                                                         \
    \                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix;\n    prefix\
    \ = string;\n    for(unsigned int i = 0; i < string.length(); i++) {\n       \
    \ prefix = prefix + string.at(i);\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_raf0ck4: /tmp/tmp_raf0ck4.cpp:19: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  vector<string> prefixes;\n  // Initialize prefix with all input characters\
    \ (except the first)\n  prefixes.push_back(string[0]);\n  // Iterate through remaining\
    \ characters in the input\n  for (int i = 1; i < string.size(); ++i) {\n    //\
    \ Initialize prefix with last character of the input string\n    prefixes.push_back(string[i]);\n\
    \    // Iterate through all possible prefixes of remaining characters\n    for\
    \ (int j = 1; j < i; ++j) {\n      // If current character is equal to any previous\
    \ character in the prefix\n      // then remove current character from prefix\n\
    \      if (string[j] == prefixes[j - 1]) {\n        prefixes.pop_back();\n   \
    \   }\n      // Add current character to prefix list\n      else {\n        prefixes.push_back(string[j]);\n\
    \      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpahkr0az9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpahkr0az9.cpp:7:3: error: \u2018\
    vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019\
    ?\n    7 |   vector<string> prefixes;\n      |   ^~~~~~\n      |   std::vector\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpahkr0az9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpahkr0az9.cpp:7:18:\
    \ error: \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018\
    all_prefixes\u2019?\n    7 |   vector<string> prefixes;\n      |             \
    \     ^~~~~~~~\n      |                  all_prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    result.push_back(string);\n   \
    \ for (char c: string) {\n        auto it = std::find(result.begin(), result.end(),\
    \ c);\n        auto l = std::distance(result.begin(), it);\n        std::vector<std::string>\
    \ prefix = all_prefixes(string(it+1, string));\n        prefix.push_back(string(0,\
    \ l));\n        result.insert(result.end(), prefix.begin(), prefix.end());\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7nxwhfxo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7nxwhfxo.cpp:12:75: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >, std::string&)\u2019\n   12\
    \ |         std::vector<std::string> prefix = all_prefixes(string(it+1, string));\n\
    \      |                                                                     \
    \      ^\n/tmp/tmp7nxwhfxo.cpp:13:37: error: no match for call to \u2018(std::string\
    \ {aka std::__cxx11::basic_string<char>}) (int, long int&)\u2019\n   13 |    \
    \     prefix.push_back(string(0, l));\n      |                               \
    \      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7nxwhfxo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Value = const char]\u2019\
    :\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_acce"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.length() == 0) {\n        return std::vector<std::string>();\n\
    \    }\n\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for (int i = 1; i < string.length(); ++i) {\n        prefixes.push_back(string);\n\
    \        prefixes[prefixes.size() - 1 - i] += string[i];\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpnjjvds42: /tmp/tmpnjjvds42.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int prefix_length = 0;\n    int n = string.length();\n    std::vector<std::string>\
    \ prefixes;\n    for (int i = 0; i < n; i++) {\n        if (string.at(i) != string[0])\
    \ {\n            int j = i;\n            while (j > 0 && !string.at(j).isdigit())\n\
    \                j--;\n            int prefix_length = j;\n        }\n       \
    \ prefixes.push_back(string);\n        string = string.substr(0, prefix_length);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcplmh_fx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpcplmh_fx.cpp:13:43: error: request\
    \ for member \u2018isdigit\u2019 in \u2018string.std::__cxx11::basic_string<char>::at(((std::__cxx11::basic_string<char>::size_type)j))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   13 |             while (j\
    \ > 0 && !string.at(j).isdigit())\n      |                                   \
    \        ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    size_t shortest = string.size();\n\
    \    for (size_t i = 0; i < shortest && string[i] != '\\0'; i++) {\n        results.push_back(string[i]);\n\
    \    }\n\n    for (size_t i = shortest + 1; i < string.size(); i++) {\n      \
    \  results.push_back(string.substr(i, 1));\n    }\n    return results;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95v5_gxs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp95v5_gxs.cpp:10:36: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |         results.push_back(string[i]);\n \
    \     |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp95v5_gxs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    // Add prefix of string to prefix list\n    prefixes.emplace_back(string);\n\
    \    for (int i = 1; i <= string.size(); i++) {\n        std::string s = string.substr(0,\
    \ i);\n        prefixes.emplace_back(s);\n        prefixes.emplace_back(s + string);\n\
    \    }\n    // Add prefix of string to prefix list\n    prefixes.emplace_back(string.substr(0,\
    \ string.size()));\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp5ihfeqr2: /tmp/tmp5ihfeqr2.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string.length() == 0) return std::vector<std::string>(1, string);\n\
    \  std::vector<std::string> results;\n  for (size_t i = 0; i != string.length();\
    \ ++i) {\n    std::vector<std::string> new_results = all_prefixes(string.substr(0,\
    \ i));\n    for (auto r : new_results) results.push_back(std::move(r));\n  }\n\
    \  return results;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpi6fni_oj: /tmp/tmpi6fni_oj.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0, n = string.size();\
    \ i <= n; ++i) {\n    prefixes.emplace_back(string, 0, i);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpqo7k4iwe: /tmp/tmpqo7k4iwe.cpp:15: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> strings;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    strings.push_back(string.substr(0, i));\n  }\n  return strings;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpzk51p9wx: /tmp/tmpzk51p9wx.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefix;\n    std::string temp_string;\n    int\
    \ counter = 1;\n    bool flag = false;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        temp_string += string[i];\n        if (!flag) {\n          \
    \  prefix.push_back(temp_string);\n        }\n        else {\n            if (counter\
    \ == string.length() - 1) {\n                flag = true;\n                prefix.push_back(temp_string);\n\
    \                counter = 1;\n            }\n            else if (string[i +\
    \ 1] == string[i]) {\n                counter++;\n            }\n            else\
    \ {\n                flag = false;\n                prefix.push_back(temp_string);\n\
    \                counter = 1;\n            }\n        }\n    }\n    return prefix;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n\n    // Find the length of the prefix\
    \ by checking for 'a'\n    auto prefix_length = string.size();\n    while (prefix_length\
    \ > 0) {\n        auto i = string.rfind(string[0]);\n        if (i == string::npos)\
    \ {\n            prefixes.push_back(string);\n            break;\n        }\n\n\
    \        prefix_length = i - 1;\n        string += string[0];\n    }\n\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp463_emp4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp463_emp4.cpp:13:18: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   13 |         if (i\
    \ == string::npos) {\n      |                  ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::string::size_type pos = 0;\n\
    \    std::string::size_type len = string.size();\n    while (pos < len) {\n  \
    \      if (string[pos] == string[0]) {\n            result.push_back(string[pos]);\n\
    \            len--;\n            pos++;\n        } else {\n            for (;\
    \ pos < len; pos++) {\n                result.push_back(string[pos]);\n      \
    \      }\n            pos = 0;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpelw9zwok.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpelw9zwok.cpp:12:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |             result.push_back(string[pos]);\n\
    \      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpelw9zwok.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for a"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ i++) {\n    std::string prefix = prefix + string.substr(i);\n    prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::bad_alloc'\n  what():\
    \  std::bad_alloc\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefix;\n  for (auto it = string.begin(); it !=\
    \ string.end(); ++it)\n    for (auto jt = string.length(); jt > 0; --jt)\n   \
    \   prefix.push_back(string(it, jt));\n  return prefix;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpre06y0mg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpre06y0mg.cpp:10:37: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&, long unsigned int&)\u2019\n   10 |    \
    \   prefix.push_back(string(it, jt));\n      |                               \
    \      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    int pos = 0, len = string.length(),\
    \ count = 0;\n    for (; len > 0; ++pos) {\n        ++count;\n        int index\
    \ = string.find_first_of(string.begin(), string.end(), pos);\n        if (index\
    \ == string::npos) {\n            prefixes.push_back(string);\n            break;\n\
    \        }\n        prefixes.push_back(string);\n        string = string.substr(index,\
    \ len - index);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw5ey19lk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpw5ey19lk.cpp:11:75: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::find_first_of(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int&)\u2019\n   11 |         int\
    \ index = string.find_first_of(string.begin(), string.end(), pos);\n      |  \
    \                                                                         ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw5ey19lk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2502:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_of(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2502 |       find_first_of(const basic_string& __str, size_type\
    \ __pos = 0) const\n      |       ^~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bi"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string);\n  std::vector<std::string> result;\n  if (string.size()\
    \ == 0) {\n    return result;\n  }\n  // Find smallest prefix\n  std::string prefix\
    \ = string;\n  for (size_t i = 1; i < string.size(); ++i) {\n    if (string[i]\
    \ == string[i - 1]) {\n      continue;\n    }\n    // Not prefix\n    if (string[i\
    \ - 1] != string[i - 1]) {\n      result.push_back(prefix);\n    }\n    prefix\
    \ = prefix + string[i];\n  }\n  // If string does not start with prefix\n  if\
    \ (string[0] != '\\0') {\n    result.push_back(prefix);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpowg249eu.cpp:2:\n/tmp/tmpowg249eu.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmpowg249eu.cpp:7:10: error: could not convert \u2018string\u2019 from\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to\
    \ \u2018bool\u2019\n    7 |   assert(string);\n      |          ^\n      |   \
    \       |\n      |          std::string {aka std::__cxx11::basic_string<char>}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    int n = string.length();\n  \
    \  for (int i = 0; i < n; ++i)\n        for (int j = i; j < n; ++j)\n        \
    \    prefixes.push_back(string(i, j));\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5tyoynqx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp5tyoynqx.cpp:11:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ int&)\u2019\n   11 |             prefixes.push_back(string(i, j));\n      |\
    \                                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    size_t pos = 0;\n    while ((pos\
    \ = string.find(string[0], pos)) != std::string::npos) {\n        prefixes.push_back(string);\n\
    \        string = string.substr(1, pos - 1);\n        pos = string.find(string[0],\
    \ pos);\n    }\n    prefixes.push_back(string);\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpx3dl6kuh: /tmp/tmpx3dl6kuh.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    size_t len = string.length();\n\
    \    for (size_t i = 0; i <= len; i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpacmwsmxz: /tmp/tmpacmwsmxz.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7mfyrytz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7mfyrytz.cpp:7:3: error: \u2018\
    vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019\
    ?\n    7 |   vector<std::string> prefixes;\n      |   ^~~~~~\n      |   std::vector\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp7mfyrytz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp7mfyrytz.cpp:7:21:\
    \ error: expected primary-expression before \u2018>\u2019 token\n    7 |   vector<std::string>\
    \ prefixes;\n      |                     ^\n/tmp/tmp7mfyrytz.cpp:7:23: error:\
    \ \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018all_prefixes\u2019\
    ?\n    7 |   vector<std::string> prefixes;\n      |                       ^~~~~~~~\n\
    \      |                       all_prefixes\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Return an empty vector if the input is empty.\n    if (string.empty())\
    \ return std::vector<std::string>();\n    // Define an array to hold the prefixes\n\
    \    std::vector<std::string> prefixes;\n    // Define a variable that holds the\
    \ length of the longest prefix\n    int max_len = 0, len = string.length();\n\
    \    // Loop through each character in the string\n    for (int i = 0; i < len;\
    \ i++) {\n        // If the current character has a length greater than the\n\
    \        // length of the current prefix then update max_len\n        if (string[i]\
    \ == string[max_len]) {\n            max_len = i + 1;\n        }\n        // If\
    \ the current character has a length equal to max_len\n        // then append\
    \ it to the prefixes\n        else {\n            prefixes.push_back(string[max_len]);\n\
    \        }\n    }\n    // Return the prefixes\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvqg30de.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnvqg30de.cpp:23:47: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   23 |             prefixes.push_back(string[max_len]);\n\
    \      |                                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpnvqg30de.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conv"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n\n    for(int i = 0; i<string.length();\
    \ i++) {\n        for(int j = i; j<string.length(); j++) {\n            if(string[i]\
    \ == string[j])\n                break;\n        }\n        prefixes.push_back(string);\n\
    \    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp094b6s13: /tmp/tmp094b6s13.cpp:22: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Write your code here\n    std::vector<std::string> prefix_list;\n\
    \    int start = 0, end = 0, len = 0, pos;\n    while (true) {\n        pos =\
    \ string.find((char) string[start], end);\n        if (pos == string::npos) return\
    \ prefix_list;\n        end = pos;\n        prefix_list.push_back(string.substr(start,\
    \ end - start));\n        start = end;\n        len = 0;\n        while (++end\
    \ < string.size() && string[end] == string[end-1]) len++;\n        if (len ==\
    \ 1) break;\n    }\n    return prefix_list;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrlfhkfp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprrlfhkfp.cpp:12:20: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n   12 |         if (pos\
    \ == string::npos) return prefix_list;\n      |                    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefix;\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        for (size_t j = 0; j < i; ++j) {\n            if (string[i]\
    \ == string[j])\n                break;\n        }\n        prefix.push_back(string[i]);\n\
    \    }\n    return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25idsihj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp25idsihj.cpp:13:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   13 |         prefix.push_back(string[i]);\n  \
    \    |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp25idsihj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string output = string;\n  std::vector<std::string> prefixes;\n\n\
    \  while (!output.empty()) {\n    prefixes.push_back(output);\n    output = output.substr(0,\
    \ output.find_first_of(\"abcdefghijklmnopqrstuvwxyz\"));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpcn0nav1n: /tmp/tmpcn0nav1n.cpp:19: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::string prefix = \"a\";\n    std::string current = \"a\";\n    std::vector<std::string>\
    \ prefixes;\n\n    while (current != string) {\n        prefix = current;\n  \
    \      current = prefix + current;\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    auto it = string.cbegin();\n    std::vector<std::string> result;\n  \
    \  for (; it != string.cend(); it++) result.push_back(it);\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4h4u74nd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp4h4u74nd.cpp:9:58: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >&)\u2019\n    9 |     for (; it !=\
    \ string.cend(); it++) result.push_back(it);\n      |                        \
    \                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4h4u74nd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    std::stack<char> st;\n    for\
    \ (int i = 0; i < string.length(); i++)\n        if (st.empty() || st.top() !=\
    \ string[i])\n            st.push(string[i]);\n        else\n            while\
    \ (st.size() > 0 && st.top() == string[i])\n                results[results.size()-1]\
    \ = st.top();\n            st.pop();\n    return results;\n}\nint main() {\n \
    \   auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp9o_82amc: /tmp/tmp9o_82amc.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ret;\n    int n = string.size();\n    for (int\
    \ i = 0; i < n; ++i) {\n        ret.push_back(string.substr(0, i));\n    }\n \
    \   return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpv59ua5eg: /tmp/tmpv59ua5eg.cpp:17: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.empty()) return std::vector<std::string>{};\n    std::vector<std::string>\
    \ prefixes;\n    std::string current = string;\n    while (!current.empty()) {\n\
    \        prefixes.push_back(current);\n        current = current.substr(0, current.find_first_of(\"\
    abc\"));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjsipr239: /tmp/tmpjsipr239.cpp:19: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  std::vector<std::string> current_prefixes;\n\
    \  for (size_t i = 0; i < string.length(); ++i) {\n    current_prefixes.push_back(string.substr(0,\
    \ i));\n    prefixes.insert(prefixes.end(), current_prefixes.begin(), current_prefixes.end());\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyd76ep5q: /tmp/tmpyd76ep5q.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    if (string.size() <= 1) {\n   \
    \     result.push_back(string);\n        return result;\n    }\n\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        std::string prefix = string.substr(0,\
    \ i);\n        result.push_back(prefix);\n    }\n\n    return result;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpsqsk6m9a: /tmp/tmpsqsk6m9a.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // Find the length of the string\n  int length = string.length();\n  std::vector<std::string>\
    \ prefixes(length);\n  // Iterate over the string from left to right\n  for (int\
    \ i = 1; i < length; ++i) {\n    // Add the prefix of this index to the prefix\
    \ of i\n    prefixes[i - 1] += string.substr(0, i);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpdgvtnzug: /tmp/tmpdgvtnzug.cpp:20: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  size_t start = 0;\n  while (start <\
    \ string.length()) {\n    result.push_back(string[start]);\n    size_t pos = string.find_first_not_of(string,\
    \ start);\n    if (pos != string::npos) start = pos + 1;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpghhndlj1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpghhndlj1.cpp:10:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |     result.push_back(string[start]);\n  \
    \    |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpghhndlj1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 0; i < string.length();\
    \ ++i) {\n    for (int j = i+1; j <= string.length(); ++j) {\n      result.push_back(string(i,\
    \ string[j]));\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplaowglvf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmplaowglvf.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |       result.push_back(string(i, string[j]));\n      |              \
    \                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  std::string prefix = \"\";\n  for\
    \ (auto c : string) {\n    prefix += c;\n    prefixes.push_back(prefix);\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n\n  while (string.size() > 1) {\n \
    \   std::string prefix = \"\";\n    for (int i = 0; i < string.size(); ++i) {\n\
    \      prefix += string[i];\n      prefixes.push_back(prefix);\n    }\n    string\
    \ = prefix;\n  }\n\n  prefixes.push_back(string);\n\n  return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp__bt3swj: /tmp/tmp__bt3swj.cpp:24: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  do {\n    prefixes.push_back(string);\n\
    \  } while (std::next_permutation(string.begin(), string.end()));\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmphmryrz7u: /tmp/tmphmryrz7u.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::string prefix = \"\";\n  std::vector<std::string> result;\n  for (size_t\
    \ i = 0; i < string.size(); ++i) {\n    prefix += string[i];\n    if (string[i]\
    \ == string[0]) {\n      result.push_back(prefix);\n      prefix = \"\";\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpiex617qx: /tmp/tmpiex617qx.cpp:21: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (!prefixes.empty()) {\n    auto current = prefixes.back();\n    prefixes.pop_back();\n\
    \    for (auto &s : prefixes)\n      s.insert(0, current);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp0w2y3r02: /tmp/tmp0w2y3r02.cpp:20: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    auto it = string.begin();\n \
    \   for (; it != string.end(); ++it) {\n        auto next = std::find(it, string.end(),\
    \ *it);\n        prefixes.push_back(std::string(it, next));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1ph2316t: /tmp/tmp1ph2316t.cpp:18: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // Build prefix tree\n  std::vector<std::string> prefixes;\n  std::string::size_type\
    \ start = 0;\n  for (std::string::size_type i = 1;\n       i != string.length()\
    \ ? i < string.length() : i >= string.length(); i++)\n    for (std::string::size_type\
    \ j = start; j < i;\n         j++) prefixes.push_back(string[j]);\n\n  std::string::size_type\
    \ start2 = 1;\n  for (std::string::size_type i = 2;\n       i != string.length()\
    \ ? i < string.length() : i >= string.length(); i++)\n    for (std::string::size_type\
    \ j = start; j < i;\n         j++) prefixes.push_back(string[j]);\n\n  while (prefixes.size()\
    \ > 1 && prefixes[0] == prefixes[1]) {\n    prefixes.erase(prefixes.begin());\n\
    \  }\n  // Add reversed strings to result list\n  std::vector<std::string> result;\n\
    \  for (int i = 1; i < prefixes.size(); i++)\n    result.push_back(prefixes[i]\
    \ + prefixes[i - 1]);\n  return result;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdy2i45v_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdy2i45v_.cpp:13:43: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   13 |          j++) prefixes.push_back(string[j]);\n\
    \      |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdy2i45v_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (char ch : string) {\n    \
    \    result.push_back(string);\n        result.push_back(string(ch, 1));\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfyc2wmnf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfyc2wmnf.cpp:10:38: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (char&,\
    \ int)\u2019\n   10 |         result.push_back(string(ch, 1));\n      |      \
    \                                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        // Initialize prefix with current character\n        std::string\
    \ prefix = string.substr(0, i);\n        // For each character in prefix string\n\
    \        for (int j = 0; j < prefix.length(); ++j) {\n            // Add prefix\
    \ to the prefixes vector\n            prefixes.push_back(prefix);\n        }\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp3rxkxwcm: /tmp/tmp3rxkxwcm.cpp:23: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::vector<char> chars = {string[0],\
    \ '\\0'};\n    for (auto &i : string)\n        result.push_back(chars.back());\n\
    \    for (int i = 1; i < string.length(); i++) {\n        chars.back() = string[i];\n\
    \        for (auto &j : result)\n            j.push_back(chars.back());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2t1854v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpx2t1854v.cpp:10:38: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |         result.push_back(chars.back());\n\
    \      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpx2t1854v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argumen"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ i++)\n    prefixes.push_back(string);\n  while (prefixes[0].length() > prefixes[1].length())\n\
    \    prefixes.erase(prefixes.begin());\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  sort(string.begin(), string.end());\n  std::vector<std::string> prefixes;\n\
    \  for (int i = 0; i < string.size(); ++i)\n    prefixes.push_back(string(i, string.at(i)));\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdyah4gir.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdyah4gir.cpp:10:46: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string.at(i)));\n      |           \
    \                                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Write your code here\n    std::vector<std::string> result;\n    int\
    \ len = string.length();\n    for(int i=1; i<len; i++)\n    {\n        std::string\
    \ prefix = string[:i];\n        result.push_back(prefix);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiumdr1m2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpiumdr1m2.cpp:12:37: error: expected\
    \ primary-expression before \u2018:\u2019 token\n   12 |         std::string prefix\
    \ = string[:i];\n      |                                     ^\n/tmp/tmpiumdr1m2.cpp:12:37:\
    \ error: expected \u2018]\u2019 before \u2018:\u2019 token\n   12 |         std::string\
    \ prefix = string[:i];\n      |                                     ^\n      |\
    \                                     ]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(string);\n  std::vector<std::string> prefixes;\n  // Scan from beginning\
    \ of string\n  for (size_t i = 0; i < string.size(); ++i) {\n    // Get all possible\
    \ prefix strings from length 1 to length of the string\n    // Exclude the character\
    \ at position i\n    for (size_t length = i + 1; length <= string.size(); ++length)\
    \ {\n      prefixes.push_back(string);\n      prefixes.back().erase(i, 1);\n \
    \   }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8702mchm.cpp:2:\n/tmp/tmp8702mchm.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmp8702mchm.cpp:7:10: error: could not convert \u2018string\u2019 from\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to\
    \ \u2018bool\u2019\n    7 |   assert(string);\n      |          ^\n      |   \
    \       |\n      |          std::string {aka std::__cxx11::basic_string<char>}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> result;\n\tresult.push_back(string);\n\tfor (size_t\
    \ i = 0; i < string.length(); i++) {\n\t\tauto prefix = \"\";\n\t\tfor (size_t\
    \ j = 0; j < i; j++)\n\t\t\tprefix += string[j];\n\t\tresult.push_back(prefix);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpu7hxtjtb: /tmp/tmpu7hxtjtb.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  // Base case\n  if (string.length()\
    \ == 0) {\n    prefixes.push_back(string);\n    return prefixes;\n  }\n\n  //\
    \ Recursive case\n  for (size_t i = 0; i < string.length(); i++) {\n    prefixes.push_back(string(string[i],\
    \ string[0]));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfco73o6i.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfco73o6i.cpp:16:51: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   16 |     prefixes.push_back(string(string[i], string[0]));\n      |     \
    \                                              ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    for (auto &c:string)\n        res.push_back(std::string(1,c));\n\
    \    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpdvfgzy1c: /tmp/tmpdvfgzy1c.cpp:15: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  if (string.length() == 0) {\n   \
    \ return prefixes;\n  }\n  std::vector<std::string> tmp;\n  tmp.reserve(string.length());\n\
    \  std::string current = string;\n  do {\n    tmp.push_back(current);\n  } while\
    \ (std::next_permutation(tmp.begin(), tmp.end(), [&current](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n  while (!tmp.size()) {\n    tmp.push_back(\"\
    \");\n  }\n  tmp.reverse();\n  for (auto& prefix : tmp) {\n    prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3hcobw5s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp3hcobw5s.cpp:20:7: error: \u2018\
    class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member named\
    \ \u2018reverse\u2019; did you mean \u2018reserve\u2019?\n   20 |   tmp.reverse();\n\
    \      |       ^~~~~~~\n      |       reserve\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    int pos = 0;\n    while (pos\
    \ < string.length()) {\n        auto prefix = string.substr(0, pos);\n       \
    \ auto cur = pos;\n        while (cur < string.length() && string.at(cur) != prefix)\
    \ {\n            cur++;\n        }\n        prefixes.push_back(prefix);\n    \
    \    pos = cur;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn3771tqa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpn3771tqa.cpp:12:56: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   12 |         while (cur < string.length() && string.at(cur) != prefix) {\n\
    \      |                                         ~~~~~~~~~~~~~~ ^~ ~~~~~~\n  \
    \    |                                                  |        |\n      |  \
    \                                                |        std::__cxx11::basic_string<char>\n\
    \      |                                                  __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpn3771tqa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpn3771tqa.cpp:12:59:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   12 |         while (cur < string.length() && string.at(cur)\
    \ != prefix) {\n      |                                                      \
    \     ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpn3771tqa.cpp:2:\n/shar"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.length();\
    \ i++) {\n    std::string prefix = \"\";\n    for (size_t j = 0; j < string.length();\
    \ j++) {\n      prefix += string[j];\n      if (string[i] == string[j]) {\n  \
    \      break;\n      }\n    }\n    prefixes.push_back(prefix);\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpyxmu6fkj: /tmp/tmpyxmu6fkj.cpp:24: int main(): Assertion `candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ans;\n    string s = string;\n    for(int i\
    \ = 0; i < s.size(); i++){\n        ans.push_back(s.substr(0, i));\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8aakyndb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8aakyndb.cpp:8:11: error: expected\
    \ \u2018;\u2019 before \u2018s\u2019\n    8 |     string s = string;\n      |\
    \           ^~\n      |           ;\n/tmp/tmp8aakyndb.cpp:9:24: error: \u2018\
    s\u2019 was not declared in this scope\n    9 |     for(int i = 0; i < s.size();\
    \ i++){\n      |                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> res;\n  res.push_back(string);\n  std::string\
    \ tmp;\n  for (auto it = string.begin(); it != string.end(); ++it) {\n    for\
    \ (auto end = res.rbegin(); end != res.rend(); ++end) {\n      tmp = *end;\n \
    \     if (tmp.size() >= it.size()) {\n        if (tmp == it) {\n          res.erase(end);\n\
    \          break;\n        }\n      }\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2c8u5j9z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2c8u5j9z.cpp:13:28: error: \u2018\
    class __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019\
    \ has no member named \u2018size\u2019\n   13 |       if (tmp.size() >= it.size())\
    \ {\n      |                            ^~~~\n/tmp/tmp2c8u5j9z.cpp:14:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019)\n   14 |         if (tmp == it) {\n\
    \      |             ~~~ ^~ ~~\n      |             |      |\n      |        \
    \     |      __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\n      |             std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2c8u5j9z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:886:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  886 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  size_t index = string.size() - 1;\n\
    \  while (index >= 0) {\n    prefixes.push_back(string);\n    string += string[index];\n\
    \    index--;\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  if (string.empty()) return {};\n  if (string.length() == 1) return { string\
    \ };\n\n  std::vector<std::string> prefixes;\n  int start = 0;\n  int end = string.length()\
    \ - 1;\n  while (start < end) {\n    prefixes.push_back(string[start] + string[end]);\n\
    \    ++start;\n    --end;\n  }\n  return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bqmkuqk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2bqmkuqk.cpp:14:51: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   14 |     prefixes.push_back(string[start] + string[end]);\n      |      \
    \                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2bqmkuqk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_strin"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    size_t len = string.length();\n\
    \    // if input string is empty, return empty list\n    if (len == 0) {\n   \
    \     return prefixes;\n    }\n\n    // Base case: input is of length 1, return\
    \ empty list\n    if (len == 1) {\n        return prefixes;\n    }\n    // Recursive\
    \ case: get all combinations of prefix lengths\n    for (int i = 1; i <= len;\
    \ i++) {\n        // Recursive case: add all combinations of current prefix length\n\
    \        for (int j = 0; j < i; j++) {\n            prefixes.push_back(string);\n\
    \            prefixes.back().insert(0, \"prefix\");\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp411p8j5q: /tmp/tmp411p8j5q.cpp:31: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++)\n    prefixes.push_back(string.substr(0, i));\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvielhefw: /tmp/tmpvielhefw.cpp:15: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.length();\
    \ i++) {\n    prefixes.push_back(string[i - 1]);\n  }\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9buy7tlk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9buy7tlk.cpp:9:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     prefixes.push_back(string[i - 1]);\n\
    \      |                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9buy7tlk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (size_t i = 0; i < string.length(); i++) {\n    std::string prefix(string.substr(0,\
    \ i));\n    prefixes.push_back(prefix + string[i]);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpmhqpi96o: /tmp/tmpmhqpi96o.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i <= string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n    while (string.size() > i && string[i]\
    \ == string[i - 1])\n      string.erase(i, 1);\n  }\n  return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp1f26lpke: /tmp/tmp1f26lpke.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size() +\
    \ 1);\n  for (std::size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string(i,\
    \ string[i]));\n  }\n  prefixes.push_back(string(string.size(), string[string.size()\
    \ - 1]));\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqpqyaft.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprqpqyaft.cpp:10:43: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes.push_back(string(i, string[i]));\n      |              \
    \                             ^\n/tmp/tmprqpqyaft.cpp:12:69: error: no match for\
    \ call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::size_type,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   12 |   prefixes.push_back(string(string.size(), string[string.size() - 1]));\n\
    \      |                                                                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  int n = string.length();\n  std::vector<std::string> prefixes(n + 1, string);\n\
    \  for (int i = 0; i < n; ++i)\n    prefixes[i] = string.substr(0, i);\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpg415eblk: /tmp/tmpg415eblk.cpp:15: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for\
    \ (int i = 1; i < string.size(); i++) {\n    std::string prefix = string[0:i];\n\
    \    if (prefixes.count(prefix) == 0) {\n      prefixes.push_back(prefix);\n \
    \   }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp618hbrgv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp618hbrgv.cpp:10:34: error: expected\
    \ \u2018]\u2019 before \u2018:\u2019 token\n   10 |     std::string prefix = string[0:i];\n\
    \      |                                  ^\n      |                         \
    \         ]\n/tmp/tmp618hbrgv.cpp:10:34: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n/tmp/tmp618hbrgv.cpp:11:18:\
    \ error: \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has\
    \ no member named \u2018count\u2019\n   11 |     if (prefixes.count(prefix) ==\
    \ 0) {\n      |                  ^~~~~\n"
  exit_code: 1
  status: SyntaxError
