name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"\
  The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string\
  \ S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["    \n    long bored = 0;\n    \n    for (int i = 1; i < S.size();\
    \ i++) {\n        // The first element in the array is 'I' so only check if that\
    \ exists in the array\n        if (S[0] == 'I') {\n            // 'I' is the first\
    \ letter of our string, \n            // so check if current string has more characters\
    \ than the previous or next letters\n            if (i >= 2 && (S[i+1] == '.'\
    \ || S[i+1] == '?' || S[i+1] == '!' || S[i+1] == '.' || S[i+1] == '?' || S[i+1]\
    \ == '!')) {\n                // the second letter isn't 'I'\n               \
    \ // so check whether current string has more than two characters\n          \
    \      if (i >= 3 && (S[i+2] == '.' || S[i+2] == '?' || S[i+2] == '!' || S[i+2]\
    \ == '.' || S[i+2] == '?' || S[i+2] == '!')) {\n                    // then we\
    \ have three letters and so on and so forth\n                    bored += 1;\n\
    \                }\n            }\n        }\n    }\n    return bored;", "   \
    \ // Your code here\n    int count = 0;\n    for(int i = 0; i < S.length(); i++){\n\
    \        if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return\
    \ count;", "    long bored = 0;\n    size_t idx;\n    std::string token;\n   \
    \ while ((idx = S.find(\".\")) != std::string::npos) {\n        token = S.substr(0,\
    \ idx);\n        if (token == \"I\") {\n            bored++;\n        }\n    \
    \    S = S.substr(idx + 1);\n    }\n    return bored;", "    long ans=0;\n   \
    \ string str;\n    for(auto x:S){\n        x=toupper(x);\n        if(x!=\"I\"\
    ){\n            str.push_back(x);\n        }else{\n            ans=ans+1;\n  \
    \      }\n    }\n    cout<<str<<endl;\n    return ans;", "  // write your code\
    \ here\n  return 0;", "  // Convert S to lower case characters\n  for (auto &i:\
    \ S) i = tolower(i);\n  \n  // A bored sentence starts with a boredom, so the\
    \ first element of the \n  // array will be bored. \n  std::array<bool, 10> boredoms\
    \ = {true, true, true, true, true, true, true, true, true, true, true};\n  //\
    \ Iterate through each of the words in S\n  for (auto &i: S) \n    // If a word\
    \ starts with a boredom string, then increment the \n    // boredom count for\
    \ each of the strings in the array\n    boredoms[0 + (S[0]-'I')-1]++;\n  return\
    \ boredoms[boredoms.size()-1];", "    // Complete this function\n    long ans\
    \ = 0;\n    int i= 0;\n    while (i < S.length()) {\n        if (S[i] == '.')\
    \ {\n            ans = ans + 1;\n            i = i + 1;\n        } else if (S[i]\
    \ == '?') {\n            ans = ans + 1;\n            i = i + 1;\n        } else\
    \ if (S[i] == '!') {\n            ans = ans + 1;\n            i = i + 1;\n   \
    \     } else {\n            i = i + 1;\n        }\n    }\n    return ans;", " \
    \ int boredom_count = 0;\n  int boredom_start = 0;\n  // Initialize a pointer\
    \ at the beginning of the string.\n  auto itr = S.begin();\n  // Traverse through\
    \ all the characters in the string.\n  while (++itr != S.end()) {\n    if (*itr\
    \ == '.') {\n      // If there's a '.' in the string...\n      boredom_start =\
    \ 1;\n    } else if (*itr == '?') {\n      // If there's a '?' in the string...\n\
    \      boredom_start = 2;\n    } else if (*itr == '!') {\n      // If there's\
    \ an '!' in the string...\n      boredom_start = 3;\n    } else {\n      // If\
    \ none of the above is true...\n      boredom_start = 0;\n    }\n    if (boredom_start\
    \ == 1) {\n      // If there was a 'I' in the string...\n      ++boredom_count;\n\
    \    }\n  }\n  return boredom_count;", "  int bored = 0;\n  int i = 0;\n  int\
    \ c = 0;\n  while (c = S.find(' ', i), c != -1) {\n    i = c;\n    while ((c =\
    \ S.find(' ', c)) != -1) {\n      bored++;\n      c = S.find(' ', ++c);\n    }\n\
    \  }\n  return bored;", "    long cnt = 0;\n    for (auto i : S) {\n        if\
    \ (i == 'I')\n            ++cnt;\n    }\n    return cnt;", "  // Complete this\
    \ function\n  assert(S.size()>=1);\n  long count = 0;\n  for (int i=0; i< S.size();\
    \ i++) {\n      if (S[i] == 'I')\n         count++;\n  }\n  return count;", " \
    \   int N = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] ==\
    \ '.') N++;\n        else if (S[i] == '?') N++;\n        else if (S[i] == '!')\
    \ N++;\n        else if (S[i] == 'I') N++;\n        else if (S[i] == 'i') N++;\n\
    \        else return 0;\n    }\n    return N;", "    // Write your code here\n\
    \    long boredoms = 0;\n    for (size_t i = 0; i <= S.size(); i++) {\n      \
    \  if (S[i] == 'I' && S[i+1] == '.') {\n            boredoms += 1;\n        }\n\
    \    }\n    return boredoms;", "  int nboredom = 0, i = 0, j = 0, k = 0, m = 0;\n\
    \  long n = 0;\n  while (S[i]) {\n    if (S[i] == '.') {\n      nboredom = nboredom\
    \ + 1;\n      if (j < k) {\n        continue;\n      }\n      j++;\n    } else\
    \ if (S[i] == '?') {\n      continue;\n    } else if (S[i] == '!') {\n      continue;\n\
    \    } else {\n      k++;\n    }\n    i++;\n  }\n  m = k - j;\n  if (j == k) {\n\
    \    return nboredom;\n  } else {\n    return nboredom * m;\n  }", "    std::bitset<32>\
    \ bits(S);\n    std::string boredoms = \"i !\";\n    for (std::size_t i=0; i<boredoms.size();\
    \ ++i)\n        if ( bits & (1 << i) )\n            return 1;\n    return 0;",
  "  long cnt = 0;\n  for (int i = 0; i < S.size(); i++) {\n    if (S[i] == '.') {\n\
    \      if (i == 0 || S[i-1] == '.')\n        cnt++;\n      else if (S[i-1] ==\
    \ '?' || S[i-1] == '!')\n        cnt++;\n    }\n  }\n  return cnt;", "    // Return\
    \ the number of boredoms in S\n    // The code below is from here\n    std::stack<char>\
    \ Sst;\n    bool boredom = false;\n    for (auto c : S) {\n        if (boredom)\
    \ {\n            if (c == '.' || c == '?' || c == '!') {\n                Sst.push(c);\n\
    \            } else {\n                boredom = false;\n            }\n     \
    \   } else {\n            if (c == '.') {\n                boredom = true;\n \
    \           } else {\n                Sst.push(c);\n            }\n        }\n\
    \    }\n    if (boredom) {\n        return 0;\n    } else {\n        long ans\
    \ = 0;\n        for (auto c : Sst) {\n            if (c == 'I') {\n          \
    \      ans++;\n            }\n        }\n        return ans;\n    }", "    int\
    \ i;\n    int bored = 0;\n    int start = 0;\n    for(i = 0; i < S.length(); i++)\
    \ {\n        if(S[i] == '.') {\n            bored += 1;\n            start = i;\n\
    \        }\n        else if(S[i] == '?' || S[i] == '!') {\n            bored +=\
    \ 0;\n            start = i;\n        }\n        else {\n            start = i;\n\
    \        }\n    }\n    return bored;", "  int count=0,count1;\n  for (int i=0;i<S.length();i++){\n\
    \    if (S[i]=='.' || S[i]=='?' || S[i]=='!'){\n      count++;\n    }\n    if\
    \ (S[i]=='I'){\n      count1=0;\n      for (int j=i;j<S.length();j++){\n     \
    \   if (S[j]=='.' || S[j]=='?' || S[j]=='!'){\n          count1++;\n        }\n\
    \      }\n      if (count1==count){\n        count++;\n      }\n    }\n  }\n \
    \ return count;", "    int count = 0;\n    for (int i=0; i<S.length(); i++) {\n\
    \        if(S[i] == 'I')\n            count++;\n    }\n    return count;", " \
    \   // Write your code here\n    long boredom_cnt = 0;\n    for (char ch:S) {\n\
    \        if (ch == '.' || ch == '?' || ch == '!')\n            boredom_cnt++;\n\
    \    }\n    return boredom_cnt;", "  // Step 0: find the length of the string\n\
    \  int n = S.length();\n  // Step 1: find the number of boredom words\n  int boredom_words\
    \ = 0;\n  std::string boredom_str = \"I\";\n  std::string boredom_word = boredom_str;\n\
    \  for (int i = 0; i < n; i++) {\n    // Step 2: for each character in the string\n\
    \    char c = S[i];\n    // Step 3: compare the character to the boredom word\n\
    \    if (c == boredom_word) {\n      boredom_words++;\n      // Step 4: if the\
    \ current boredom word is the same as the boredom word\n      // for last iteration,\
    \ increment the boredom_word as well\n      if (boredom_words == 1) {\n      \
    \  boredom_word = boredom_str;\n      }\n    } else {\n      boredom_word = boredom_str;\n\
    \    }\n  }\n  // Step 5: return the count\n  return boredom_words;", "    long\
    \ boredom = 0;\n    for (auto &s: S) {\n        if (s == '.' || s == '?' || s\
    \ == '!') {\n            boredom++;\n        }\n    }\n    return boredom;", " \
    \   long count = 0;\n    for (auto &x : S) {\n        if (x == '.' || x == '!'\
    \ || x == '?')\n            ++count;\n    }\n    return count;", "    int bored_words\
    \ = 0;\n    // return 0 if sentence is empty\n    if (S.empty()) {\n        return\
    \ 0;\n    }\n    // Return 0 if string doesn't start with \"I\"\n    if (S.at(0)\
    \ == 'I') {\n        return 0;\n    }\n    // Iterate over each character in string\n\
    \    for (char c: S) {\n        // if char is \".\", \"?\" or \"!\", increment\
    \ the counter\n        if (c == '.' || c == '?' || c == '!') {\n            bored_words++;\n\
    \        }\n    }\n    return bored_words;", "  // Your code here\n  long boredom=0;\n\
    \  for(int i=0;i<S.size();i++){\n    if(S[i]=='I'||S[i]=='i'){\n      boredom++;\n\
    \    }\n  }\n  return boredom;", "    int n=0,j=0;\n    std::string temp=S;\n\
    \    while(temp[j]!='\\0')\n    {\n        if((temp[j]=='I')&&(temp[j+1]=='O'))\n\
    \            n++;\n        ++j;\n    }\n    return n;", "  // your code here\n\
    \  assert(S.size() > 1);\n  bool isBored = false;\n  for (int i = 1; i < S.size();\
    \ i++) {\n    if (isBored && S[i] == '.') {\n      continue;\n    }\n    if (S[0]\
    \ == 'I' && S[i] == '.') {\n      isBored = true;\n    } else {\n      isBored\
    \ = false;\n    }\n  }\n  return isBored ? 1 : 0;", "    int count = 0;\n    std::string\
    \ word = S;\n    // Remove '?'\n    if (word.find(\"?\") != std::string::npos)\
    \ {\n        word = word.substr(0, word.find(\"?\"));\n    }\n    // Remove '.'\n\
    \    if (word.find('.') != std::string::npos) {\n        word = word.substr(0,\
    \ word.find('.'));\n    }\n    // Remove '!'\n    if (word.find(\"!\") != std::string::npos)\
    \ {\n        word = word.substr(0, word.find(\"!\"));\n    }\n    std::string\
    \ prefix = \"I\";\n    // Check for the word starting with 'I'.\n    if (word.substr(0,\
    \ prefix.length()).compare(prefix) == 0) {\n        // If yes, increment the counter\n\
    \        count++;\n    }\n    return count;", "    // Write your code here\n \
    \   long bored = 0;\n    std::string::iterator iter;\n    for(iter = S.begin();\
    \ iter!=S.end(); ++iter) {\n        char c = *iter;\n        if(c == '.' || c\
    \ == '?' || c == '!') {\n            ++bored;\n        }\n    }\n    return bored;",
  "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++)\n    {\n        if(S[i] == 'I' && i != 0)\n        {\n            count\
    \ += 1;\n        }\n    }\n    return count;", "    std::string temp;\n    //\
    \ std::stack<std::string> words; \n    std::stack<std::string> words;\n    int\
    \ count = 0;\n    for (char c : S) {\n        if (c == '.' || c == '?' || c ==\
    \ '!') {\n            temp = temp + c;\n        }\n        else {\n          \
    \  if (temp == \"I\")\n                count++;\n            temp = temp;\n  \
    \      }\n    }\n    return count;", "    int boredoms = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == 'I') {\n            boredoms++;\n\
    \        } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n           \
    \ i++;\n        } else {\n            break;\n        }\n        i++;\n    }\n\
    \    return boredoms;", "    int i=0;\n    long boredoms=0;\n    while(i < S.size()){\n\
    \        if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n            i++;\n        \
    \    continue;\n        }\n        if(S[i]==S[i+1] && S[i+1]!=S[i+2]){\n     \
    \       i++;\n            boredoms++;\n        }\n        i++;\n    }\n    return\
    \ boredoms;", "    // Complete this function\n    std::vector<string> strs;\n\
    \    string s = S;\n    for(int i = 1; i<S.size(); i++){\n        if(s.at(i) !=\
    \ '.')\n            strs.push_back(s);\n        s = s.substr(i);\n    }\n    long\
    \ boredoms = 0;\n    for(auto &str : strs){\n        if(str[0] == 'I')\n     \
    \       boredoms++;\n    }\n    return boredoms;", "  int count = 0; // Initialized\
    \ here to keep it in a function\n  for (char &c: S) {\n    switch (c) {\n    \
    \  case '?': c = '.';\n      case '!': c = '.';\n      case '.': c = '.';\n  \
    \    case 'I': c = '.';\n      case 'a': case 'e': case 'i': case 'o': case 'u':\n\
    \      case 'A': case 'E': case 'I': case 'O': case 'U':\n      case 'a': case\
    \ 'e': case 'i': case 'o': case 'u':\n      case 'A': case 'E': case 'I': case\
    \ 'O': case 'U':\n        ++count;\n        break;\n      default: c = ' ';\n\
    \    }\n  }\n  return count;", "    int count=0, flag=0;\n    // Complete the\
    \ code to solve the problem\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I')\n\
    \            flag++;\n    }\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='.'\
    \ || S[i]=='?' || S[i]=='!'){\n            flag--;\n        }\n    }\n    if(flag==0)\n\
    \        count=0;\n    else\n        count=1;\n    return count;", "    long count\
    \ = 0;\n    std::string boredoms[] = {\"I\", \".\", \"?\", \"!\"};\n    size_t\
    \ n = S.size();\n    for (size_t i = 0; i < n; i++) {\n        for (size_t j =\
    \ 0; j < 4; j++) {\n            if (S[i] == boredoms[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "\tint counter = 0;\n\t\
    std::string temp = S;\n\ttemp.erase(0, 1);\n\ttemp.erase(temp.find(\".\"));\n\t\
    temp.erase(temp.find(\"?\"));\n\ttemp.erase(temp.find(\"!\"));\n\tstd::string\
    \ newS = temp;\n\tfor (int i = 0; i < newS.size(); i++) {\n\t\tif (newS[i] ==\
    \ \"I\") {\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;", "    long ans =\
    \ 0;\n    for(int i = 0 ; i < S.length(); i++) {\n        if(S[i] == '.') ans\
    \ += 1;\n        if(S[i] == '?' || S[i] == '!') ans += 1;\n        if(S[i] ==\
    \ 'I') ans += 1;\n    }\n    return ans;", "    int n = S.size();\n    long cnt\
    \ = 0;\n    for (int i=0; i<n; i++) {\n        char c = S[i];\n        if (c ==\
    \ '.' || c == '?' || c == '!') {\n            cnt++;\n        }\n    }\n    return\
    \ cnt;", "    int count = 0;\n    size_t i = S.find(\".\");\n    if (i != std::string::npos)\
    \ {\n        size_t j = S.find(\"?\");\n        size_t k = S.find(\"!\");\n  \
    \      if (j != std::string::npos && i != j) {\n            count += 1;\n    \
    \    }\n        if (k != std::string::npos && i != k) {\n            count +=\
    \ 1;\n        }\n    }\n    return count;", "  std::stack<char> S1;\n  long ans\
    \ = 0;\n  int k = 0;\n  for (auto c: S) {\n    if (c == ' ') continue;\n    if\
    \ (c == '.') S1.push(' ');\n    else if (c == '?') S1.push('?');\n    else if\
    \ (c == '!') S1.push('!');\n    else if (c == 'I') k++;\n    else if (S1.empty()\
    \ && k > 0) {\n      S1.pop();\n      k--;\n    }\n    else if (S1.empty() &&\
    \ !(k > 0)) {\n      ans++;\n    }\n  }\n  return ans;", "    long cnt=0;\n  \
    \  for(long i=0;i<S.length();i++){\n        if(S[i]=='I' && S.substr(i,2)==\"\
    .\" &&S.substr(i+1,2)==\".\" &&S.substr(i+2,2)==\".\")\n            cnt++;\n \
    \   }\n    return cnt;", "    // write your code here\n    long counter = 0;\n\
    \    int i = 0;\n    while (i < S.size()) {\n        if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            while (i < S.size() && S[i] != '.' && S[i]\
    \ != '?' && S[i] != '!') {\n                i++;\n            }\n            if\
    \ (i == S.size() || S[i] != '.' && S[i] != '?' && S[i] != '!') {\n           \
    \     break;\n            }\n        }\n        if (S[i] == 'I') {\n         \
    \   i++;\n            counter++;\n        }\n        i++;\n    }\n    return counter;",
  "    long boredoms=0;\n    // Your code goes here\n    \n    return 0;", "  long\
    \ answer = 0;\n  for (int i = 0; i < S.size(); i++) {\n    if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!')\n      answer++;\n  }\n  return answer;", "    int\
    \ boredoms = 0;\n    int size = S.size();\n    int i = 0;\n\n    while(i < size)\
    \ {\n        char x = S[i];\n        if(x == '.' || x == '?' || x == '!')\n  \
    \          boredoms++;\n        else\n            i++;\n    }\n\n    return boredoms;",
  "    int counter = 0;\n    // This loop iterates through the sentence S, \n    //\
    \ and checks the value of the word 'I' in the sentence S using 'find' method\n\
    \    for (auto &i : S) {\n        std::cout << \"i=\" << i << std::endl;\n   \
    \     if (i.find(\"I\") != std::string::npos) {\n            counter++;\n    \
    \    }\n    }\n    std::cout << \"counter=\" << counter << std::endl;\n    return\
    \ counter;", "    int n = S.size();\n    int boredoms = 0;\n    for(int i = 0;\
    \ i < n; i++) {\n        if(S[i] == 'i') {\n            for(int j = i; j < (i+1);\
    \ j++) {\n                if(S[j] == '.' || S[j] == '?' || S[j] == '!') {\n  \
    \                  boredoms++;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return boredoms;", "  int count = 0;\n \
    \ for (int i = 0; i < S.size(); i++) {\n    if (S[i] == 'I')\n      count += 1;\n\
    \  }\n  return count;", "    // Write your code here\n    int flag=0;\n    int\
    \ arr[n+1];\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I')\n       \
    \     flag++;\n    }\n    if(flag==0){\n        return 0;\n    }\n    for(int\
    \ i=0;i<S.size();i++){\n        if(S[i]=='I')\n            arr[n]=0;\n       \
    \ if(S[i]=='O')\n            arr[n]++;\n        if(S[i]=='!')\n            arr[n]++;\n\
    \    }\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<=0)\n          \
    \  continue;\n        else if(arr[i]==0)\n            return 0;\n        else\
    \ if(arr[i]==1)\n            return 1;\n    }\n    return 1;", "    long count=0,i;\n\
    \    for(i=0;i<S.size();i++){\n        if(S[i]=='I' && S.substr(0,i+1)==\"I\"\
    ){\n            count++;\n            if(i<S.size()-1){\n                if((S[i+1]=='.')\
    \ || (S[i+1]=='?') || (S[i+1]=='!')){\n                    count++;\n        \
    \        }\n            }\n        }\n    }\n    return count;", "        long\
    \ count = 0;\n        // Write your code here\n        for(long i = 0; i < S.size();\
    \ i++){\n                if(S[i] == '.' || S[i] == '!' || S[i] == '?')\n     \
    \                   count++;\n        }\n        return count;", "    int count\
    \ = 0; // initialize count of boredoms to 0\n    std::string boredom = \"I\";\n\
    \    for(int i=0;i<S.size();i++) {\n        if(boredom == S[i]) {\n          \
    \  count++;\n            boredom = \"I\";\n        }\n        else {\n       \
    \     boredom = \".\";\n        }\n    }\n    return count;", "        long count\
    \ = 0;\n        auto i = S.begin();\n        for(; i!= S.end(); ++i)\n       \
    \     if((*i == 'I' || *i == '.' || *i == '?' || *i == '!') && *(i+1) == 'I')\n\
    \                ++count;\n        return count;", "    long ans = 0;\n    //\
    \ We must define what is a boredom.\n    // 'boredom' is defined as a sentence\
    \ that starts with 'I'.\n    for (auto &x : S) {\n        if (x != '.' && x !=\
    \ '?' && x != '!') {\n            ans++;\n        }\n    }\n    return ans;",
  "    assert(S.size() > 1);\n    int count = 0;\n    for (int i=0; i<S.size(); i++)\
    \ {\n        if (S[i] == 'I' || S[i] == '!' || S[i] == '.')\n            count++;\n\
    \    }\n    return count;", "    std::vector<std::string> str_split;\n    str_split.push_back(S);\n\
    \    size_t str_split_len = str_split.size();\n    for (size_t i = 0; i < str_split_len;\
    \ i++) {\n        if (str_split[i][0] == 'I')\n            return 1;\n    }\n\
    \    return 0;", "    // Your code here\n    int count=0;\n    string str1=S.substr(0,\
    \ S.find('.'));\n    string str2=S.substr(S.find('.')+1);\n    if(str1 == \"I\"\
    \ && str2 ==\".\"){\n        count=1;\n    }\n    \n    return count;\n    ",
  "    std::vector<std::vector<std::string>> a;\n    for(auto &i : a) {\n        std::string\
    \ temp = S;\n        while(true) {\n            auto pos = temp.find(\"I\", 1);\n\
    \            if(pos == std::string::npos) {\n                temp = temp + \"\
    .\";\n                a.push_back({temp});\n                break;\n         \
    \   }\n            else {\n                temp = temp.substr(0, pos);\n     \
    \           a.push_back({temp});\n            }\n        }\n    }\n    // Count\
    \ the number of boredoms.\n    long ans = 0;\n    for(auto &i : a) {\n       \
    \ if(std::find(std::begin(i), std::end(i), \"!\") != std::end(i))\n          \
    \  ++ans;\n        else if(std::find(std::begin(i), std::end(i), \"?\") != std::end(i))\n\
    \            ++ans;\n        else if(std::find(std::begin(i), std::end(i), \"\
    .\") != std::end(i))\n            ++ans;\n    }\n    return ans;", "    std::string\
    \ temp;\n    long sum = 0;\n    std::istringstream iss(S);\n    std::string word;\n\
    \    while (std::getline(iss, word, '.')) {\n        if (word == \"I\") {\n  \
    \          sum += 1;\n        }\n    }\n    return sum;", "  // Your code goes\
    \ here\n  \n  // long boredoms = 0;\n  // // You code goes here\n  // for (auto\
    \ it = S.begin(); it != S.end(); it++) {\n  //   if (*it == '.' || *it == '?'\
    \ || *it == '!') {\n  //     boredoms++;\n  //   }\n  // }\n  \n  // return boredoms;",
  "    long boredoms=0;\n    size_t pos=0;\n    while(pos < S.size()) {\n        pos\
    \ = S.find(\". \", pos);\n        if(pos != std::string::npos) boredoms += 1;\n\
    \        pos = S.find(\"? \", pos);\n        if(pos != std::string::npos) boredoms\
    \ += 1;\n        pos = S.find(\"! \", pos);\n        if(pos != std::string::npos)\
    \ boredoms += 1;\n        pos += 2;\n    }\n    return boredoms;", "    long B\
    \ = 0;\n    std::string tmp;\n    std::string::size_type pos;\n    pos = S.find(\"\
    I\");\n    if (pos != std::string::npos) {\n        tmp = S.substr(pos + 1);\n\
    \        if (tmp == \"bore\" || tmp == \"bored\") {\n            B++;\n      \
    \  }\n    }\n    return B;", "\tstd::vector<std::string> strs = split(S, \".!?\"\
    );\n\tint bored = 0;\n\tfor (std::string str: strs) {\n\t\tif (str.at(0) == 'I')\
    \ {\n\t\t\tbored++;\n\t\t}\n\t}\n\treturn bored;", "\tint boredom = 0;\n\tfor\
    \ (int i = 0; i < S.length(); i++) {\n\t\tif (S[i] == 'i') {\n\t\t\tboredom +=\
    \ 1;\n\t\t}\n\t}\n\treturn boredom;", "    std::stack<std::string> s1;\n    std::string\
    \ s1=\"\";\n    bool flag=false;\n    for(int i=0;i<S.size();i++) {\n        if(S[i]=='?')\
    \ {\n            flag=true;\n        }\n        else if(S[i]=='!') {\n       \
    \     flag=false;\n        }\n        else {\n            if(flag==true) {\n \
    \               s1.push(S[i]);\n            }\n            else {\n          \
    \      if(s1==S[i]) {\n                    s1.push(S[i]);\n                }\n\
    \            }\n        }\n    }\n    if(s1.size()==0) {\n        return 0;\n\
    \    }\n    else {\n        for(int i=0;i<s1.size();i++) {\n            if(s1[i]==\"\
    I\") {\n                return 1;\n            }\n        }\n        return 0;\n\
    \    }", "    int boredoms = 0;\n    for (int i = 0; i < S.size(); i++)\n    \
    \    if (S[i] == 'I')\n            boredoms++;\n    return boredoms;", "    long\
    \ ans = 0;\n    for (char ch : S) {\n        if (ch == '.')\n            ans++;\n\
    \        else if (ch == '?')\n            ans++;\n        else if (ch == '!')\n\
    \            ans++;\n    }\n    return ans;", "    std::vector<std::string> words;\n\
    \    std::istringstream iss(S);\n    std::string token;\n    while (std::getline(iss,\
    \ token, ' ')) {\n        words.push_back(token);\n    }\n    std::sort(words.begin(),\
    \ words.end());\n    long boredoms = 0;\n    for (auto const &word : words) {\n\
    \        if (word == \"I\" || word == \"i\") {\n            boredoms += 1;\n \
    \       }\n    }\n    return boredoms;", "    int i=0,j;\n    long ans=0;\n  \
    \  while(i<S.size()){\n        // i increases while we find a '.'\n        //\
    \ j increases while we find a space\n        // j increases by one if we find\
    \ a '?'\n        // j increases by one if we find a '!'\n        if(i<S.size()\
    \ && (S[i]=='.' || S[i]==' ' || S[i]=='?' || S[i]=='!')){\n            j=i;\n\
    \            while(j<S.size()){\n                if(S[j]=='.' || S[j]==' ' ||\
    \ S[j]=='?' || S[j]=='!'){\n                    j++;\n                    break;\n\
    \                }\n                j++;\n            }\n            // If we\
    \ reached end of string, we know that there is a boredom\n            if(i==S.size()-1\
    \ && S[i]=='?'){\n                ans++;\n                i=j;\n            }\n\
    \            // If we reached end of string, we know that there isn't a boredom\n\
    \            if(i==S.size()-1 && S[i]=='!'){\n                ans++;\n       \
    \     }\n        }\n        i++;\n    }\n    // Since we started at the end of\
    \ the string, we know that there isn't a boredom\n    return ans;", "    assert(S\
    \ != \"\" && S.size() > 0 && S[0] == 'I');\n    // TODO: Write your code here\n\
    \    int counter = 0;\n    for(int i = 0; i < S.size()-1; ++i){\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!'){\n            counter++;\n        }\n\
    \    }\n    return counter;", "    // Complete this function\n    long boredom=0;\n\
    \    for(auto word:S){\n        if(word==\"I\"){\n            boredom++;\n   \
    \     }\n    }\n    return boredom;", "    int count = 0;\n    for(int i=0;i<S.size();i++){\n\
    \        if(S.at(i)==\"I\"){\n            count++;\n        }\n    }\n    return\
    \ count;", "    long cnt=0;\n    long flag=0;\n    for(int i=0;i<S.length();i++){\n\
    \        if(S[i]==\"I\"){\n            cnt=cnt+1;\n            if((i==0) && (S[i+1]==\"\
    .\")){\n                flag=1;\n            }\n        }\n    }\n    return flag;",
  "    string temp1, temp2;\n    size_t count = 0;\n    for (size_t i = 0; i < S.size();\
    \ ++i) {\n        if (S[i] != '.') continue;\n        temp2 = S;\n        temp2\
    \ = temp2.substr(0, i);\n        if (temp2 == \"I\") {\n            count++;\n\
    \        }\n    }\n    return count;", "    // Write your code here\n    long\
    \ bored = 0;\n    int i = 0;\n    while(i < S.size()){\n        if(S[i] == \"\
    .\" || S[i] == \"?\" || S[i] == \"!\"){\n            bored++;\n        }\n   \
    \     i++;\n    }\n    return bored;", "    \n    // Return the number of boredom\
    \ sentences in S.\n    // The function returns zero if S is empty or consists\
    \ of only spaces\n    // or words that do not start with \"I\".\n    if (S.empty()\
    \ || S[0] == 'I' || S[0] == '.' || S[0] == '?' || S[0] == '!') {\n        return\
    \ 0;\n    }\n    else {\n        char c = S[0];\n        int n = 0;\n        for\
    \ (int i = 1; i < S.size(); i++) {\n            if (c == '.') {\n            \
    \    if (S[i] == '.') {\n                    n++;\n                }\n       \
    \     }\n            else if (c == '?' || c == '!') {\n                if (S[i]\
    \ == '?' || S[i] == '!') {\n                    n++;\n                }\n    \
    \        }\n            else {\n                if (S[i] == c) {\n           \
    \         n++;\n                }\n            }\n            c = S[i];\n    \
    \    }\n        return n;\n    }", "    long n = 0;\n    for(int i = 0;i < S.size();i++)\
    \ {\n        if(S[i] == 'I') {\n            for(int j = i;j < S.size();j++) {\n\
    \                if(S[j] == '.' || S[j] == '?' || S[j] == '!') {\n           \
    \         if(S[j] == '.') {\n                        n = n - 1;\n            \
    \        }\n                    else {\n                        n = n + 1;\n \
    \                   }\n                    break;\n                }\n       \
    \     }\n            break;\n        }\n    }\n    return n;", "    int count\
    \ = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'i') {\n\
    \            count += 1;\n        }\n    }\n    return count;", "    int boredom\
    \ = 0;\n    std::string delimiters = {\".\", \"?\", \"!\"};\n    std::string temp_str\
    \ = S;\n    std::string word_str = \"\";\n    std::string::iterator it;\n    //\
    \ Remove the delimiter from the beginning of the string.\n    size_t pos = 0;\n\
    \    while ((pos = temp_str.find(delimiters[0], pos)) != std::string::npos) {\n\
    \        temp_str.replace(pos, 1, \"\");\n        pos += 1;\n    }\n    while\
    \ (temp_str.size()) {\n        it = temp_str.begin();\n        bool found = false;\n\
    \        while (it != temp_str.end()) {\n            if (*it == ' ') {\n     \
    \           // If space found, ignore this space in the string.\n            \
    \    it++;\n                continue;\n            }\n            word_str +=\
    \ *it;\n            if (word_str == \"I\") {\n                found = true;\n\
    \                ++boredom;\n                break;\n            }\n         \
    \   it++;\n        }\n        // Add the word to the temp string to be processed.\n\
    \        temp_str = word_str;\n        // Remove the word from the beginning of\
    \ the string.\n        pos = 0;\n        while ((pos = temp_str.find(delimiters[0],\
    \ pos)) != std::string::npos) {\n            temp_str.replace(pos, 1, \"\");\n\
    \            pos += 1;\n        }\n    }\n    return boredom;", "    int boredoms\
    \ = 0;\n    // Declare a vector to store all words from string S\n    std::vector<std::string>\
    \ words;\n    // For each word in the string\n    std::string w = S;\n    // Use\
    \ a loop to iterate through all the words in the string\n    while (w) {\n   \
    \     // If current word starts with 'I', increment the boredoms counter\n   \
    \     if (w.find(\"I\") == 0)\n            boredoms++;\n        // Remove the\
    \ word from the string\n        w = w.substr(1);\n    }\n    // Return the boredoms\
    \ counter\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for (int i = 0; i < (int)S.size(); i++)\n    {\n        if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!')\n        {\n            boredoms++;\n   \
    \     }\n    }\n    return boredoms;", "  long i=0,count=0;\n  while(S[i]!='.'\
    \ && S[i]!='?' && S[i]!='!'){\n    if(S[i]=='I'){\n      count++;\n      i++;\n\
    \    }\n    else{\n      i++;\n    }\n  }\n  return count;", "  int i = 0;\n \
    \ int b = 0;\n  assert(S.size() > 0);\n  std::string temp = S;\n  std::swap(temp[0],\
    \ temp[temp.length() - 1]);\n  temp.erase(temp.begin(), temp.begin() + 1);\n \
    \ std::reverse(temp.begin(), temp.end());\n  for (auto it = temp.begin(); it !=\
    \ temp.end(); it++) {\n    if (*it == \"I\") {\n      b = 1;\n      break;\n \
    \   }\n  }\n  if (b == 0) {\n    return 0;\n  }\n  std::string temp2;\n  std::string::iterator\
    \ it = temp.begin();\n  while (it != temp.end()) {\n    temp2 = *it;\n    it =\
    \ temp.begin();\n    for (auto it2 = temp.begin(); it2 != temp.end(); it2++) {\n\
    \      if (*it2 != '.') {\n        continue;\n      }\n      if (temp2 == temp2)\
    \ {\n        b++;\n      }\n    }\n  }\n  return b;", "    // Your code here\n\
    \    int boredoms = 1;\n    // loop over each word\n    int count = 0;\n    for\
    \ (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == '.') {\n  \
    \          count++;\n        }\n        // check if it begins with 'I'\n     \
    \   else if (*it == 'I') {\n            count++;\n        }\n        // check\
    \ if it ends with '!'\n        else if (*it == '!') {\n            count++;\n\
    \        }\n    }\n    return count;", "    int boredom_count = 0;\n    int len\
    \ = S.length();\n    // use indexOf method from String class\n    for (int i =\
    \ 0; i < len; i++) {\n        if ((S.charAt(i) == 'I') && (S.charAt(i + 1) !=\
    \ '.')) \n            boredom_count++;\n    }\n    return boredom_count;", " \
    \   long cnt = 0;\n    for(size_t i = 0; i < S.size(); i++)\n    {\n        if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n            cnt += 1;\n\
    \        }\n    }\n    return cnt;", "    int n = S.size();\n    int boredom_count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (S[i] == '.') {\n      \
    \      while (S[i + 1] == ' ' && S[i + 2] != '.')\n                i++;\n    \
    \        if (S[i] == '.')\n                boredom_count++;\n            while\
    \ (S[i + 1] != ' ' || S[i + 2] != '.')\n                i++;\n        } else if\
    \ (S[i] == '?') {\n            while (S[i + 1] == ' ' && S[i + 2] != '.' || S[i\
    \ + 2] != ' ')\n                i++;\n            if (S[i] == '?')\n         \
    \       boredom_count++;\n            while (S[i + 1] != ' ' || S[i + 2] != '.'\
    \ || S[i + 2] != ' ')\n                i++;\n        } else if (S[i] == '!') {\n\
    \            while (S[i + 1] == ' ' && S[i + 2] != '.' || S[i + 2] != ' ')\n \
    \               i++;\n            if (S[i] == '!')\n                boredom_count++;\n\
    \            while (S[i + 1] != ' ' || S[i + 2] != '.' || S[i + 2] != ' ')\n \
    \               i++;\n        }\n    }\n    return boredom_count;", "    long\
    \ c=0;\n    for(char ch:S){\n        if( ch == 'I'){\n            ++c;\n     \
    \   }\n    }\n    return c;", "    // Write your code here\n    int count=0,i;\n\
    \    for(i=0;i<S.size();i++)\n    {\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!')\n\
    \            count++;\n    }\n    return count;", "    long result = 0;\n    for\
    \ (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            result\
    \ += 1;\n        }\n    }\n    return result;", "    int count = 0;\n    for(int\
    \ i=0;i<S.size();i++){\n        if(S[i]=='I' || S[i]=='i' || S[i]=='.'){\n   \
    \         count++;\n        }\n    }\n    return count;", "    long counter =\
    \ 0;\n    std::cin >> S;\n    // return number of boredoms\n    for (size_t i\
    \ = 0; i < S.size(); i++) {\n        char word = S[i];\n        if (word == 'I')\n\
    \            counter++;\n    }\n    return counter;", "    int sum = 0;\n    int\
    \ i;\n    for (i = 0; S[i] != \".\" && S[i] != \"!\" && S[i] != \"?\" && S[i]\
    \ != \"I\"; i++)\n        ;\n    for (char &c : S) if (c == '.') c = '?';\n  \
    \  else for (c = S[i]; c != '!' && c != '?' && c != 'I'; c = S[i]) if (c == '.')\
    \ c = '?';\n    for (i = 0; S[i] != '.' && S[i] != '!' && S[i] != '?' && S[i]\
    \ != 'I'; i++)\n        if (S[i] == '.') S[i] = '?';\n    std::string t = S;\n\
    \    S = t;\n    for (i = 0; S[i] != '.' && S[i] != '!' && S[i] != '?' && S[i]\
    \ != 'I'; i++)\n        ;\n    for (i = 0; i < S.size(); i++)\n        sum +=\
    \ (i % 2 == 0) ? 1 : -1;\n    return sum;", "  // Write your code here\n  return\
    \ 0;", "    long boredoms = 0;\n    // Write your code here\n    std::string word;\n\
    \    for (size_t i = 0; i < S.length(); i++) {\n        if (S[i] == '.') {\n \
    \           word = S.substr(i + 1, S.length() - i);\n            assert(word.length()\
    \ > 0);\n            if (word == \"I\") {\n                boredoms++;\n     \
    \       }\n        }\n    }\n    return boredoms;", "  std::regex e(\"^I\");\n\
    \  int count = 0;\n  std::for_each(S.cbegin(), S.cend(), [&](char c) {\n    if\
    \ (std::regex_match(&c, e)) {\n      count++;\n    }\n  });\n  return count;",
  "        long ans = 0;\n        int flag = 1;\n        for(int i = 0; S[i] != '\\\
    0'; i++){\n                if(S[i] == 'I'){\n                        flag = 0;\n\
    \                        for(int j = i; j > 0 ; j--){\n                      \
    \          if(S[j] == 'I'){\n                                        flag = 1;\n\
    \                                        break;\n                            \
    \    }\n                        }\n                        if(flag){\n       \
    \                         ans += 1;\n                        }\n             \
    \   }\n        }\n        return ans;", "    std::pair<int, int> P;\n    bool\
    \ ans = false;\n    // Check for each character in the string\n    for (auto c\
    \ = S.cbegin(); c != S.cend(); ++c) {\n        if (*c != '.') {\n            ans\
    \ = false;\n        }\n        if ((*c == ' ') || (*c == '.')) {\n           \
    \ P.pb.push_back((*c));\n            ans = true;\n        }\n        // If there's\
    \ a question mark mark at the end of the sentence, set the ans\n        // flag\
    \ to true so we don't add the current character to the boredom\n        if ((*c\
    \ == '?') || (*c == '!')) {\n            ans = true;\n        }\n    }\n    //\
    \ Count the number of \"I\"s in the sentence\n    int I = P.first;\n    // Check\
    \ if it's a boredom\n    if (ans == true && (I == 0 || I == 1 && P.pb[0] == 'I'))\
    \ {\n        return 1;\n    } else {\n        return 0;\n    }", "    int boredoms\
    \ = 0;\n    // Write your code here.\n    if (S.find(\"I\")!=std::string::npos)\n\
    \        boredoms = 1;\n    return boredoms;", "  int i;\n  int a=0;\n  for (i=0;i<S.size();i++){\n\
    \    if(S[i]==\".\")\n    {\n      if(S[i+1]==\".\"){\n        if(S[i+2]==\".\"\
    ){\n          a++;\n        }\n        else{\n          a--;\n        }\n    \
    \  }\n      else{\n        a++;\n      }\n    }\n    if(S[i]==\"?\")\n    {\n\
    \      if(S[i+1]==\"?\"){\n        if(S[i+2]==\"?\"){\n          a++;\n      \
    \  }\n        else{\n          a--;\n        }\n      }\n      else{\n       \
    \ a++;\n      }\n    }\n    if(S[i]==\"!\")\n    {\n      if(S[i+1]==\"!\"){\n\
    \        if(S[i+2]==\"!\"){\n          a++;\n        }\n        else{\n      \
    \    a--;\n        }\n      }\n      else{\n        a++;\n      }\n    }\n  }\n\
    \  return a;", "    long count = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            count++;\n\
    \    }\n    return count;", "  int n = S.size();\n  long boredoms = 0;\n  for\
    \ (int i = 1; i < n; i++) {\n    if (S[i-1] == '?' || S[i-1] == '!') {\n     \
    \ boredoms +=1;\n    } else {\n      boredoms += 0;\n    }\n  }\n  return boredoms;",
  "    int i,j,k,n,m,flag,flag1,flag2,count=0;\n    int boredom_count=0;\n    for(i=0;i<S.size();i++)\n\
    \    {\n        if((S[i] == '.' || S[i] == '?' || S[i] == '!'))\n        {\n \
    \           flag=0;\n            flag1=0;\n            flag2=0;\n            for(j=i;j<S.size();j++)\n\
    \            {\n                if(S[j] == '.')\n                    flag1=1;\n\
    \                if(S[j] == '?')\n                    flag2=1;\n             \
    \   if(S[j] == '!')\n                    flag2=1;\n                if(flag==0\
    \ && flag1==0 && flag2==1)\n                {\n                    flag=1;\n \
    \               }\n                if(flag==1 && flag1==0 && flag2==1)\n     \
    \           {\n                    flag=2;\n                }\n              \
    \  if(flag==2 && flag1==0 && flag2==1)\n                {\n                  \
    \  flag=3;\n                }\n                if(flag==3 && flag1==0 && flag2==1)\n\
    \                {\n                    flag=4;\n                }\n         \
    \   }\n            if(flag==0)\n            {\n                count+=1;\n   \
    \         }\n        }\n    }\n    return count;", "  if(S.size() <= 2){\n   \
    \ return -1;\n  }\n  if(S.at(0).at(0) == '.' || S.at(0).at(0) == '?' || S.at(0).at(0)\
    \ == '!'){\n    return -1;\n  }\n  long count = 0;\n  for(int i = 1; i < S.size();\
    \ i++){\n    if(S.at(i).at(0) == '.' || S.at(i).at(0) == '?' || S.at(i).at(0)\
    \ == '!'){\n      count++;\n    }\n  }\n  return count;", "    // Complete this\
    \ function\n    return 0;", "    long boredoms = 0;\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I' && i != 0) {\n            boredoms ++;\n   \
    \     }\n    }\n    return boredoms;", "    int count = 0;\n    // Write your\
    \ code here", "  int count = 0;\n  if(S.empty()){\n    return 0;\n  }\n\n  bool\
    \ startsWithI = true;\n  if(S[0] == 'I'){\n    startsWithI = false;\n  }\n  \n\
    \  int lengthOfS = S.length();\n  \n  for(int i = 1; i < lengthOfS; i++){\n  \
    \  if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n      count++;\n    }\n   \
    \ if(S[i] == S[0]){ // boredom\n      if(startsWithI && S[i-1] == 'I'){ // starts\
    \ with I\n        continue;\n      }\n      if(S[i-1] == 'I'){ // starts with\
    \ I\n        startsWithI = false;\n      }\n    }\n  }\n  return count;", "\t\
    int boredoms = 0;\n\tint last = 0;\n\tfor(char &c : S){\n\t\tif(c != '.' && c\
    \ != '?' && c != '!') {\n\t\t\tboredoms++;\n\t\t}\n\t\telse{\n\t\t\tlast = c;\n\
    \t\t}\n\t}\n\tfor(int i = last;  i < S.length(); i++){\n\t\tif(S[i] != '.' &&\
    \ S[i] != '?' && S[i] != '!') {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;",
  "    assert(S.size() > 0);\n    int cnt = 0, cnt1 = 0, cnt2 = 0;\n    for (int i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] != \".\" && S[i] != \"?\" && S[i]\
    \ != \"!\") {\n            cnt++;\n            if (S[i] == 'I') cnt1++;\n    \
    \    }\n        if (S[i] == '.') cnt++;\n        if (S[i] == '?') cnt++;\n   \
    \     if (S[i] == '!') cnt++;\n        if (S[i] == 'I') cnt2++;\n    }\n    if\
    \ (cnt > 0) return 0;\n    if (cnt1 == cnt) return 1;\n    if (cnt2 == cnt) return\
    \ 1;\n    return 1;", "    if(S.size() == 0)\n        return 0;\n    char boredom[100];\n\
    \    memset(boredom, '\\0', sizeof(boredom));\n    boredom[0] = 'I';\n    bool\
    \ bFound = false;\n    std::string currentWord = \"\";\n    \n    // Loop through\
    \ each word in the string\n    for(int i = 1; i < S.size(); i++) {\n        if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            // If found, add it to\
    \ currentWord, \n            // then clear the boredom variable\n            if(S[i]\
    \ == '.') {\n                currentWord += \".\";\n                memset(boredom,\
    \ '\\0', sizeof(boredom));\n            }\n            else if(S[i] == '?') {\n\
    \                currentWord += \"?\";\n                memset(boredom, '\\0',\
    \ sizeof(boredom));\n            }\n            else if(S[i] == '!') {\n     \
    \           currentWord += \"!\";\n                memset(boredom, '\\0', sizeof(boredom));\n\
    \            }\n            else {\n                currentWord += S[i];\n   \
    \             bFound = true;\n            }\n        }\n        else {\n     \
    \       // If not found, add currentWord to boredom\n            currentWord +=\
    \ S[i];\n            bFound = true;\n        }\n    }\n    \n    // If the currentWord\
    \ is the boredom word, then increment the count\n    if(bFound && currentWord\
    \ == boredom) {\n        return 1;\n    }\n    \n    return 0;", "    int cnt\
    \ = 0;\n    std::bitset<32> bs;\n    for (auto c: S) {\n        std::bitset<32>\
    \ sbit = std::bitset<32>(c);\n        bs |= sbit;\n        if (sbit == 'I') {\n\
    \            cnt++;\n        }\n    }\n    return cnt;", "  int count = 0;\n \
    \ int i = 0, j = 0;\n  // Loop through each character in S\n  while (S[i] != '.')\
    \ {\n    // Check for boredom sentences starts with 'I', and ends with '.'\n \
    \   if (S[i] == 'I') {\n      while (j < S.size() && S[j] != 'I') {\n        j++;\n\
    \      }\n      // If it ends with '.', increment boredom count\n      if (j <\
    \ S.size() && S[j] == '.') {\n        count++;\n      }\n    }\n    i++;\n  }\n\
    \  return count;", "  int counter = 0;\n  for (auto &i : S) {\n    switch (i)\
    \ {\n      case 'I':\n        counter++;\n        break;\n      case '?':\n  \
    \    case '!':\n        counter++;\n        break;\n      default:\n        break;\n\
    \    }\n  }\n  return counter;", "    // Write your code here\n    long bored\
    \ = 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i]=='I'){\n           \
    \ bored++;\n        }\n    }\n    return bored;", "    // Write your code here\n\
    \    int boredCount=0;\n    for(int i=0;i<S.size();i++)\n    {\n        if(S[i]==\"\
    I\")\n        {\n            boredCount++;\n        }\n    }\n    return boredCount;",
  "  int b=0;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n      b++;\n    }\n  }\n  return b;", "  // Your code\
    \ here\n  long boredoms = 0;\n  for (int i=0;i<S.length();i++) {\n    if (S[i]=='I')\
    \ {\n      boredoms++;\n    }\n  }\n  return boredoms;", "  // Complete this function\n\
    \  std::set<std::string> boredom;\n  std::map<std::string,long> voc;\n  for (char\
    \ ch:S){\n    if (ch == '.'){\n      boredom.insert(S.substr(0,1));\n      S.erase(0,\
    \ 1);\n    }\n    else if (ch == '?'){\n      boredom.insert(S.substr(0,2));\n\
    \      S.erase(0, 2);\n    }\n    else if (ch == '!'){\n      boredom.insert(S.substr(0,3));\n\
    \      S.erase(0, 3);\n    }\n    else {\n      voc[S];\n    }\n  }\n  for (std::map<std::string,long>::iterator\
    \ itr=voc.begin(); itr!=voc.end(); ++itr) {\n    long ans = 0;\n    if (itr->second.count(boredom)\
    \ == 1) {\n      ans = 1;\n    }\n    cout<<ans;\n  }\n  ", "    // Complete this\
    \ function\n    // Don't forget to include \"bits/stdc++.h\"\n    std::string\
    \ boredom(S.begin(), S.end());\n    if (boredom.find(\"I\") != std::string::npos)\n\
    \        return 1;\n    return 0;", "\tint count = 0;\n\tstd::set<std::string>\
    \ st;\n\tfor (char &c : S){\n\t\tif(c == '.' || c == '!' || c == '?')\n\t\t\t\
    st.insert(c);\n\t}\n\tfor (std::set<std::string>::iterator it = st.begin(); it\
    \ != st.end(); ++it){\n\t\tif(*it == \"I\")\n\t\t\tcount++;\n\t}\n\treturn count;",
  "  assert(S.size() >= 2);\n  long res = 0;\n  for (char &ele : S) {\n    if (ele\
    \ == '.')\n      ++res;\n    if (ele == '?' || ele == '!')\n      ++res;\n  }\n\
    \  return res;", "    long boredoms = 0;\n    for(int i=0;i<S.length();i++) {\n\
    \        if(S[i] == 'I') {\n            boredoms = boredoms + 1;\n        }\n\
    \    }\n    return boredoms;", "    long ans = 0;\n    for (int i = 1; i < S.length();\
    \ i++) {\n        if (S.substr(0, i) == \"I\")\n            ans++;\n    }\n  \
    \  return ans;", "    long count = 0;\n    for(int i = 0;i < S.length();i++){\n\
    \        if(S[i] == '.' || S[i] == '!' || S[i] == '?'){\n            count++;\n\
    \        }\n    }\n    return count;", "    // Your code here\n    long counter\
    \ = 0;\n    \n    int start = 0;\n    for(int i = 0;i < S.size(); i++)\n    {\n\
    \        if(S[i] == 'I' && S[i + 1] == '.')\n        {\n            start = 1;\n\
    \        }\n        else if(S[i] == '.' && (S[i + 1] == '?' || S[i + 1] == '!'\
    \ || S[i + 1] == '.'))\n        {\n            counter++;\n            start =\
    \ 1;\n        }\n        \n        if(start == 1)\n        {\n            break;\n\
    \        }\n    }\n    \n    return counter;", "    int count = 0;\n    std::istringstream\
    \ iss(S);\n    std::string token;\n    while(std::getline(iss, token, ' ')){\n\
    \        if(token == \"I\"){\n            count++;\n        }\n    }\n    return\
    \ count;", "    std::vector<long> v;\n    long k = 0;\n    for (auto &c: S) \n\
    \        if (c == '.' || c == '?' || c == '!') {\n            v.push_back(k++);\n\
    \        }\n    return v.size();", "    int boredom = 0;\n    for(int i = 0; i\
    \ < S.size(); i++){\n        if(S[i] == 'I'){\n            boredom++;\n      \
    \  }\n    }\n    return boredom;", "    long boredom_count = 0;\n    int counter\
    \ = 0;\n    // We will count every boredom sentence\n    for(int i=0; i<S.size();\
    \ i++) {\n        // For each word\n        while(counter < i) {\n           \
    \ // We are reading the words from the beginning\n            counter = 0;\n \
    \           S[i] = S[i][0];\n        }\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n            boredom_count++;\n        }\n        counter++;\n\
    \    }\n    return boredom_count;", "    int boredoms = 0;\n    int i = 0;\n \
    \   int len = S.size();\n    bool flag = true;\n    while(i < len) {\n       \
    \ if(S[i] == 'I') {\n            boredoms += 1;\n            flag = true;\n  \
    \      }\n        if(flag) {\n            flag = S[i + 1] == '.';\n        }\n\
    \        i += 1;\n    }\n    return boredoms;", "    long ans = 0;\n    assert(S.size()\
    \ > 0);\n    for(int i = 0; i < (S.size() - 1); i++){\n        if(S.at(i) == 'I'\
    \ && S.at(i + 1) == 'i'){\n            ans += 1;\n        }\n        if(S.at(i)\
    \ == 'i' && S.at(i - 1) == 'I'){\n            ans += 1;\n        }\n        if(S.at(i)\
    \ == 'I' && S.at(i - 1) == 'i' && S.at(i - 2) == 'i'){\n            ans += 1;\n\
    \        }\n    }\n    return ans;", "  long nboredom = 0, lenS = S.length();\n\
    \  for (int i = 1; i < lenS; i++) {\n    if (S[0] == 'I') {\n      nboredom++;\n\
    \    }\n    if (S[i] == '.') {\n      nboredom++;\n    }\n    if (S[i] == '?')\
    \ {\n      nboredom++;\n    }\n    if (S[i] == '!') {\n      nboredom++;\n   \
    \ }\n  }\n  return nboredom;", "  int count = 0;\n  for (int i = 0; i < S.size();\
    \ i++) {\n    if (S[i] == 'I' && S[i + 1] == '.')\n      count++;\n    else if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      count = 0;\n  }\n  return\
    \ count;", "        long ans = 0;\n        std::string boredoms[2] = {\".\", \"\
    ?\"};\n        std::string boredoms_string = \".?\";\n        int len = S.length();\n\
    \        for(int i = 0; i < len; i++) {\n                std::string curr_word\
    \ = S.substr(i, 1);\n                if(curr_word.find(boredoms_string) == 0)\
    \ {\n                        ans += 1;\n                }\n        }\n       \
    \ return ans;", "    long ans = 0;\n    int len = 0;\n    for(auto x: S) {\n \
    \       if(x == '.') len++;\n        else if(x == '!') len++;\n        else if(x\
    \ == '?') len++;\n        if(len == 1) {\n            if(x == 'I') ans++;\n  \
    \      }\n    }\n    return ans;", "    // Write your code here\n    long n =\
    \ S.size();\n    long cnt=0;\n    for(int i=0;i<n;i++){\n        if(S[i]=='I'&&S[i-1]!='.'){\n\
    \            cnt++;\n        }\n    }\n    return cnt;", "        std::string\
    \ boredom = \"I love this weather\";\n        std::set<char> boredoms;\n     \
    \   std::istringstream iss(S);\n        std::string word;\n        int count =\
    \ 0;\n        for (std::string line; std::getline(iss, line); ) {\n          \
    \      std::istringstream split_line(line);\n                std::set<char> unique_words;\n\
    \                while (split_line >> word)\n                        unique_words.insert(word);\n\
    \                if (unique_words.find(boredom) != unique_words.end())\n     \
    \                   count++;\n        }\n        return count;", "    int count\
    \ = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S.at(i) == 'I')\
    \ {\n            count++;\n        }\n    }\n    return count;", "    int N =\
    \ 0;\n    for (int i = 0; i <= S.size()-1; i++) {\n        char letter = S[i];\n\
    \        if (letter == '.' || letter == '?' || letter == '!') {\n            N\
    \ += 1;\n        }\n    }\n    return N;", "  // Write your code here\n  long\
    \ result=0;\n  for(int i=0;i<S.size();i++)\n  {\n      if(S[i]=='.')\n      {\n\
    \        if(S[i-1]=='I'&&S[i+1]=='o')\n        {\n            result++;\n    \
    \    }\n      }\n      else if(S[i]=='?')\n      {\n        if(S[i-1]=='i'&&S[i+1]=='!')\n\
    \        {\n            result++;\n        }\n      }\n      else if(S[i]=='!')\n\
    \      {\n        if(S[i-1]=='i'&&S[i+1]=='o')\n        {\n            result++;\n\
    \        }\n      }\n  }\n  return result;", "    // ++p\n    for(int i = 0;i\
    \ < S.size();i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            int j = 0;\n            while(S[i+(j++)] != ' ') {\n            }\n\
    \            while(S[i+j] != ' ') {\n                j++;\n            }\n   \
    \         while(j < S.size()) {\n                j++;\n                if(S[i+j]\
    \ == ' ') {\n                    i++;\n                    break;\n          \
    \      }\n            }\n        }\n    }\n    // --p\n    return i;", "    int\
    \ count = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n            count++;\n\
    \        else\n            word = S[i];\n    }\n    return count;", "    long\
    \ res = 0;\n    for(auto &e : S)\n    {\n        if((e == '.') || (e == '?') ||\
    \ (e == '!')) {\n            return 1;\n        }\n    }\n    return res;", " \
    \   long boredoms = 0;\n    size_t i, j;\n    i = S.find('!');\n    j = S.find('?');\n\
    \    if (i >= 0)\n        boredoms += 1;\n    if (j >= 0)\n        boredoms +=\
    \ 1;\n    if (i > 0 && j > 0)\n        boredoms += 1;\n    for (i = S.find('.');\
    \ i < S.size(); i++)\n        if (S[i] == '.')\n            boredoms += 1;\n \
    \   for (i = S.find(' '), j = S.find('!'); i < S.size(); i++)\n        if (i ==\
    \ j)\n            boredoms += 1;\n    return boredoms;", "  int num_boredoms =\
    \ 0;\n  int index = 0, start = 0, end = 0;\n  while (index < S.size()) {\n   \
    \ // If the current character is a space or an '\\'\n    if (S[index] == ' ' ||\
    \ S[index] == '.' || S[index] == '?' || S[index] == '!') {\n      // Check if\
    \ the previous character was a '\\'\n      if (S[index - 1] == '\\\\') {\n   \
    \     // If yes, move to the next character and skip over the current one\n  \
    \      index++;\n      } else {\n        // Otherwise, check to see if it's the\
    \ beginning of the next sentence\n        if (S[index + 1] == '.' || S[index +\
    \ 1] == '?' || S[index + 1] == '!') {\n          end = index;\n          num_boredoms++;\n\
    \        }\n        index++;\n      }\n    } else {\n      // Otherwise, check\
    \ if it's the beginning of the next word\n      if (S[index] == 'I') {\n     \
    \   start = index;\n        index++;\n      }\n      index++;\n    }\n  }\n  return\
    \ num_boredoms;", "    // Get the size of the string S\n    int size = S.size();\n\
    \    // Initialize an array that holds the number of boredoms in the string S\n\
    \    long boredom[size];\n    // Fill boredom array with zeros\n    for(int i\
    \ = 0; i < size; i++) {\n        boredom[i] = 0;\n    }\n    // Loop through S\
    \ array and add ones to the boredoms array if the\n    // string S[i] starts with\
    \ I\n    for(int i = 0; i < size; i++) {\n        if(S[i] == \"I\") {\n      \
    \      boredom[i]++;\n        }\n    }\n    // Return the number of boredoms in\
    \ the string\n    return boredom[size - 1];", "    // Write your code here\n \
    \   // long l = 0;\n    int count = 0;\n    int len = 0;\n    for (int i = 0;\
    \ i < S.length(); i++) {\n        if (S[i] == '.') {\n            count++;\n \
    \       }\n        if (S[i] == '?') {\n            count++;\n        }\n     \
    \   if (S[i] == '!') {\n            count++;\n        }\n        if (S[i] == 'I')\
    \ {\n            count++;\n        }\n    }\n    // l++;\n    return count;",
  "    long ans = 0;\n    for(int i=0; i<S.length(); i++) {\n        if(S[i]=='.'\
    \ || S[i]=='.' || S[i]=='.') ans += 1;\n        if(S[i]=='?' || S[i]=='!' || S[i]=='!')\
    \ ans += 1;\n        if(S[i]=='.') ans += 1;\n        if(S[i]=='.' || S[i]=='!'\
    \ || S[i]=='?') ans += 1;\n    }\n    return ans;", "    // Complete this function\n\
    \    string boredom = S;\n    int cnt = 0;\n    int i = 0;\n    while (cnt < boredom.size()\
    \ && boredom[i] != '.' && boredom[i] != '?' && boredom[i] != '!') {\n        if\
    \ (boredom[i] == 'I')\n            cnt++;\n        i++;\n    }\n    return cnt;",
  "    long boredoms = 0;\n    int i = 0;\n    int j = 0;\n    while (i < S.size())\
    \ {\n        if (S[i] == '.') {\n            i++;\n        }\n        else if\
    \ (S[i] == '?') {\n            i++;\n        }\n        else if (S[i] == '!')\
    \ {\n            i++;\n        }\n        else if (S[i] == 'I') {\n          \
    \  i++;\n            if (j > i) {\n                boredoms += 1;\n          \
    \  }\n            i++;\n            j = 0;\n        }\n        else {\n      \
    \      j = i;\n        }\n        i++;\n    }\n    return boredoms;", "  // Write\
    \ your code here.\n  std::sort(S.begin(), S.end());\n  std::string temp=\"\";\n\
    \  bool first=true;\n  long c=0;\n  for (int i = 0; i < S.length(); i++)\n  {\n\
    \    if(S[i]=='I')\n    {\n      temp=temp+S[i];\n      if(temp==\"I\".c_str())\n\
    \      {\n        if(first==true)\n        {\n          first=false;\n       \
    \   c++;\n        }\n        else\n        {\n          c++;\n        }\n    \
    \  }\n      else\n      {\n        temp=\"\";\n      }\n    }\n  }\n  return c;",
  "  int count = 0;\n  \n  for (int i = 0; i < S.length(); i++) {\n    char c = S[i];\n\
    \    if (c == '.' || c == '?' || c == '!') {\n      count++;\n    }\n  }\n  \n\
    \  return count;", '    // Write your code here', "    long count = 0;\n    //\
    \ Your code here\n    return count;", "\t// Complete this function\n\tint count\
    \ = 0;\n\tstd::istringstream ss(S);\n\tstd::string str;\n\twhile (ss >> str){\n\
    \t\tif(str[0]=='I'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "  int boredom_count\
    \ = 0;\n  for (int i = 0; i < S.size(); i++) {\n    if (S[i] == 'I') {\n     \
    \ if (i != 0) {\n        boredom_count++;\n      }\n    }\n  }\n  return boredom_count;",
  "  int n=0;\n  \n  // Write your code here\n  std::cout<<\"Hello\"<<std::endl;\n\
    \  return n;", "    long long count = 0;\n    for (auto &i : S) {\n        if\
    \ (i == ' ') continue;\n        if (i == '.' || i == '?' || i == '!') {\n    \
    \        count++;\n        }\n    }\n    return count;", "    std::map<std::string,int>\
    \ m;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='I' && S[i-1]=='.'){\n\
    \            ++m[S[i-1]];\n        }\n    }\n    return m.size();", "    long\
    \ count = 0;\n    // use string::find to find the index of first occurence of\
    \ '.' in the string\n    int found = S.find(\".\")\n    while(found != string::npos){\n\
    \        // find first occurrence of '?' or ' ' in the string\n        found =\
    \ S.find(\"?\");\n        // find first occurrence of '!' in the string\n    \
    \    found = S.find(\"!\");\n        // if the first character is I, increment\
    \ the count by 1\n        if (S.at(0) == 'I')\n            count++;\n    }\n \
    \   return count;", "    // Complete this function\n    long boredoms = 0;\n \
    \   // Complete this\n    std::bitset<16> bit_set(S.size());\n    for ( auto it\
    \ = S.begin(); it != S.end(); it++ ) {\n        bit_set[it - S.begin()] ^= 1<<(it\
    \ - S.begin());\n    }\n    \n    boredoms =  bit_set[0] == '1';\n    \n    return\
    \ boredoms;", "    long ans = 0;\n    int cnt = 0, c = 0;\n\n    for (int i =\
    \ 0; i != S.size(); ++i) {\n        if ((S[i] == '.') || (S[i] == '?') || (S[i]\
    \ == '!')) {\n            ++cnt;\n        }\n        if ((S[i] == 'I') && (S[i\
    \ + 1] == '.') && (S[i + 2] == '.') && (S[i + 3] == '.')) {\n            ++cnt;\n\
    \            i += 4;\n        }\n    }\n    \n    if (cnt > 0) {\n        ans\
    \ = 1;\n    }\n    \n    return ans;", "    long nbored = 0;\n    std::string\
    \ boredoms = {\"I\",\"i\",\"!\",\"?\",\"!\"};\n    long len = S.length();\n  \
    \  for (int i = 0; i < len; i++){\n        if (boredoms.find(S[i]) != boredoms.end())\
    \ {\n            nbored++;\n        }\n    }\n    return nbored;", "    int freq_count\
    \ = 0;\n    int freq = 0;\n    std::string boredom = \"I\";\n    int word_size\
    \ = S.size();\n    for (int i = 0; i < word_size; i++) {\n        if (S[i] ==\
    \ '.') {\n            freq_count++;\n        } else if (S[i] == '!' || S[i] ==\
    \ '?') {\n            freq_count++;\n        }\n    }\n    for (int i = 0; i <\
    \ word_size; i++) {\n        if (S[i] == boredom) {\n            freq++;\n   \
    \     }\n    }\n    return freq;", "    long boredoms = 0;\n    int i = 0;\n \
    \   for(; i < S.size(); i++) {\n        switch(S[i]) {\n            case '.':\n\
    \            case '?':\n            case '!':\n                boredoms += 1;\n\
    \                break;\n        }\n    }\n    return boredoms;", "    // code\
    \ here\n    assert(S.size() != 0);\n    long cnt = 0;\n    for(char ch : S) {\n\
    \        if(ch == '.' || ch == '!' || ch == '?') {\n            cnt++;\n     \
    \   }\n    }\n    return cnt;", "  assert(S.size() > 0);\n  // Use set to store\
    \ unique words in string\n  std::set<std::string> unique_words;\n  // Use set\
    \ to store number of boredoms in string\n  std::set<std::string> boredoms_set;\n\
    \  // Iterate through every word\n  for (std::string word : S.split(\". ? !\"\
    )) {\n    // If word is \"I\", add it to the set\n    if (word == \"I\") {\n \
    \     unique_words.insert(word);\n      // If word is a boredom, add it to the\
    \ set\n      if (boredoms_set.find(word) == boredoms_set.end()) {\n        boredoms_set.insert(word);\n\
    \      }\n    }\n  }\n  // If the set contains any number of boredoms\n  if (boredoms_set.size()\
    \ > 0) {\n    // If set contains any number of boredoms, return true\n    return\
    \ boredoms_set.size();\n  } else {\n    // If set contains no boredoms, return\
    \ false\n    return 0;\n  }", "    // Split string by \".\", \"?\" and \"!\"\n\
    \    std::vector<std::string> tokens = split(S, \". ? !\");\n    // Initialize\
    \ boredom_count with 0 \n    long boredom_count = 0;\n    // Initialize prev_token\
    \ with an empty string\n    std::string prev_token = \"\";\n\n    // Iterate over\
    \ all the words\n    for (int i = 0; i < tokens.size(); i++) {\n        // Get\
    \ the current word from tokens list\n        std::string curr_token = tokens[i];\n\
    \n        // If the current word is boredom, increment boredom_count\n       \
    \ if (curr_token == \"I\") {\n            boredom_count++;\n        // Else, check\
    \ if the previous word is boredom\n        // If yes, increment boredom_count\n\
    \        } else {\n            // Check if current word is boredom\n         \
    \   if (curr_token == \"I\") {\n                boredom_count++;\n           \
    \ }\n\n            // If current word is not boredom, check if previous word is\
    \ boredom\n            // If yes, increment boredom_count\n            else {\n\
    \                if (prev_token == \"I\") {\n                    boredom_count++;\n\
    \                }\n\n                // If previous word is not boredom, check\
    \ if current word is boredom\n                // If yes, increment boredom_count\n\
    \                else {\n                    if (curr_token == \"I\") {\n    \
    \                    boredom_count++;\n                    }\n               \
    \ }\n            }\n        }\n        // Update prev_token with current word\n\
    \        prev_token = curr_token;\n    }\n    // return boredom_count\n    return\
    \ boredom_count;", "    // TODO: Write your code here.\n    return 0;", "  int\
    \ count = 0;\n  std::string token;\n  for (int i = 0; i < S.size(); i++) {\n \
    \   if (S[i] == '.') {\n      token = S[i+1];\n      if (token == \"?\" || token\
    \ == \"!\" || token == \"-\")\n        count = count + 1;\n      i++;\n    } else\
    \ {\n      token = S[i];\n      if (token == \"I\")\n        count = count + 1;\n\
    \      i++;\n    }\n  }\n  return count;", "   assert(S.size() >= 1);\n   long\
    \ count = 0;\n   long start = 0;\n   for(size_t i = 0; i < S.size(); ++i) {\n\
    \      if(S[i] == '.') {\n         ++start;\n      }\n      else if(S[i] == '?'\
    \ || S[i] == '!') {\n         if(start > 0) {\n            count = count + start\
    \ - 1;\n         }\n         start = 0;\n      }\n      else {\n         if(start\
    \ > 0) {\n            count = count + start;\n         }\n         start = 0;\n\
    \      }\n   }\n   return count;", "    long c = 0; // count of boredoms\n   \
    \ for (int i = 0; i < S.length(); i++)\n    {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') // boredom or not?\n        {\n            ++c;\n   \
    \     }\n    }\n    return c; // return count", "    long ans = 0;\n    for (char\
    \ &c: S) \n        ans +=(c == '.' || c == '?' || c == '!');\n    return ans;",
  "  int count = 0;\n  std::istringstream iss(S);\n  std::string token;\n  while (std::getline(iss,\
    \ token, '.') && std::getline(iss, token, '?') && std::getline(iss, token, '!'))\
    \ {\n    if (token == \"I\")\n      count++;\n  }\n  return count;", "    std::map<int,\
    \ int> count_map;\n    std::string word;\n    int count = 0;\n    // Step 1: Count\
    \ the frequency of each word in sentence.\n    for (auto &ch: S) {\n        if(std::isspace(ch))\n\
    \            continue;\n        switch(ch) {\n            case '.':\n        \
    \    case '?':\n            case '!':\n                count_map[ch]++;\n    \
    \    }\n    }\n    // Step 2: Iterate each word in the sentence.\n    for (auto\
    \ &ch: S) {\n        if(std::isspace(ch))\n            continue;\n        switch(ch)\
    \ {\n            case 'I':\n            case 'a':\n            case 'e':\n   \
    \         case 'i':\n            case 'o':\n            case 'u':\n          \
    \      word = ch;\n                break;\n            default:\n            \
    \    continue;\n        }\n        if (count_map.find(word) != count_map.end())\
    \ {\n            ++count_map[word];\n        } else {\n            count_map[word]\
    \ = 1;\n        }\n    }\n    return count_map.at('I');", "  long ans = 0;\n \
    \ assert(S != \"I\");\n  for (int i = 0; S[i] != '\\0'; i++) {\n    if (S[0] ==\
    \ 'I') {\n      if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n        ans\
    \ += 1;\n      }\n      S[i] = S[i + 1];\n      S[i + 1] = '\\0';\n    }\n  }\n\
    \  return ans;", "    // Split each sentence into words and store them in an array.\n\
    \    std::vector<std::string> S1 = split(S, \".?!\");\n    // Add up each element\
    \ of the array.\n    // Note that you need to add the count of 'I' in the beginning\
    \ of every word.\n    long ret = 0;\n    for (int i = 0; i < S1.size(); i++) {\n\
    \        if (S1[i][0] == 'I') {\n            ret += 1;\n        }\n    }\n   \
    \ return ret;", "    // your code goes here\n    return -1;", "    long ans =\
    \ 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (S[i] == '.') {\n\
    \            ans += 1;\n        } else if (S[i] == '?') {\n            ans +=\
    \ 1;\n        } else if (S[i] == '!') {\n            ans += 1;\n        }\n  \
    \  }\n    return ans;", "    int boredom=0;\n    for (int i=0;S[i]!='\\0';i++){\n\
    \        if (S[i]=='.'){\n            boredom++;\n        }\n        if (S[i]=='?'){\n\
    \            boredom++;\n        }\n        if (S[i]=='!'){\n            boredom++;\n\
    \        }\n    }\n    return boredom;", "    long count = 0;\n    int count =\
    \ 0;\n    for (auto x : S) {\n        if (x != '.' && x != '?' && x != '!') {\n\
    \            count++;\n        }\n        if (count == 0) {\n            count++;\n\
    \        }\n        if (count == 1) {\n            count++;\n        }\n     \
    \   if (count == 2) {\n            count++;\n        }\n    }\n    return count;",
  "    assert(S.size() >= 2);\n    std::string first, last;\n    int boredoms = 0;\n\
    \    for(int i = 1; i < S.size(); i++) {\n        first = S.substr(0, i);\n  \
    \      last = S.substr(i, S.size());\n        if (first == \"I\" && last == \"\
    .\") {\n            boredoms++;\n        }\n    }\n    return boredoms;", "  \
    \  int boredom = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i]\
    \ == '.') {\n            if (S[i-1] == '?' || S[i-1] == '!') {\n             \
    \   boredom++;\n            }\n        } else if (S[i] == 'I') {\n           \
    \ if (S[i-1] == '.') {\n                boredom++;\n            }\n        }\n\
    \    }\n    return boredom;", "    int count = 0;\n    for(int i=0; i<S.length();\
    \ i++) {\n        if(S[i]=='I') {\n            count++;\n        }\n    }\n  \
    \  return count;", "    // +++your code here+++\n    long result = 0;\n    vector<string>\
    \ V;\n    string word;\n    size_t n = S.length();\n    for (size_t i = 0; i <\
    \ n; i++) {\n        word = S.substr(i, 1);\n        if (word[0] == 'I') {\n \
    \           V.push_back(word);\n        }\n    }\n    for (int i = 0; i <= V.size()\
    \ - 1; i++) {\n        if (V[i] == \"I\") {\n            result++;\n        }\n\
    \    }\n    return result;", "    if (S.length() == 0)\n        return 0;\n  \
    \  \n    long ans = 0, flag = 0;\n    for (char &c: S)\n        if (c == '.' ||\
    \ c == '?' || c == '!')\n            flag = 1;\n        else\n            flag\
    \ = 0;\n\n    if (flag == 1)\n        return ans;\n\n    for (auto &c: S)\n  \
    \      if (c != '.' && c != '?' && c != '!')\n            ans++;\n\n    return\
    \ ans;", "    // Your code here\n    long cnt = 0;\n    int i = -1;\n    while\
    \ (i != S.size()) {\n        i++;\n        if (S[i] == \".\") {\n            if\
    \ (i != S.size() - 1) {\n                if (S[i+1] == \"!\" || S[i+1] == \"?\"\
    ) {\n                    i++;\n                }\n            }\n        }\n \
    \       if (S[i] == \"I\") {\n            cnt++;\n        }\n    }\n    return\
    \ cnt;", "\tlong count = 0;\n\tint index = 0;\n\tint flag = 0;\n\twhile ((index\
    \ = S.find(\"I\", index)) !=std::string::npos)\n\t{\n\t\tif (S.at((index+1))==\"\
    .\")\n\t\t{\n\t\t\tflag = 0;\n\t\t}\n\t\telse if (S.at((index+1))==\"!\")\n\t\t\
    {\n\t\t\tflag = 0;\n\t\t}\n\t\telse if (S.at((index+1))==\"?\")\n\t\t{\n\t\t\t\
    flag = 1;\n\t\t}\n\t\telse {\n\t\t\tflag = 2;\n\t\t}\n\t\tindex++;\n\t}\n\treturn\
    \ count;", "  int a = 0;\n  for (int i = 0; i < S.size(); i++) {\n    if (S[i]\
    \ == '.') {\n      a++;\n    } else if (S[i] == '?' || S[i] == '!') {\n      a--;\n\
    \    } else {\n      a = 0;\n    }\n  }\n  return a;", "    if(S == \"I\")\n \
    \       return 0;\n    \n    int counter = 1;\n    \n    for(int i = 0; i < S.size();\
    \ i++)\n        if(S[i] == '.')\n            counter += is_bored(S.substr(0, i));\n\
    \        else if(S[i] == '?')\n            counter += is_bored(S.substr(0, i));\n\
    \        else if(S[i] == '!')\n            counter += is_bored(S.substr(0, i));\n\
    \    \n    return counter;", "    // code here\n    long ans = 0;\n    long pos\
    \ = 0;\n    bool flag = false;\n    int i = 0;\n    int j = 0;\n    for(;i<S.size();i++){\n\
    \        if((S[i]=='I')&&!flag){\n            pos = i;\n            flag = true;\n\
    \        }\n        else if((S[i]=='I')&&flag){\n            flag = false;\n \
    \       }\n        else if((S[i]=='!')&&flag){\n            ans += (pos - i);\n\
    \            break;\n        }\n        else if((S[i]=='.')&&(!flag)){\n     \
    \       pos = i;\n        }\n        else if((S[i]=='?')&&(flag))\n          \
    \  break;\n    }\n    return ans;", "    std::istringstream is(std::string(S).begin(),\
    \ std::string(S).end());\n    std::string word;\n    int cnt = 0;\n    while (is\
    \ >> word) {\n        if (word == \"I\") {\n            cnt += 1;\n        } else\
    \ {\n            cnt = 0;\n        }\n    }\n    return cnt;", "    int n = 0;\n\
    \    std::string word;\n    while(S != \"\"){\n        word = S;\n        if(S[0]\
    \ == 'I'){\n            S = S.substr(1);\n            n++;\n        }\n      \
    \  else{\n            S = S.substr(0, S.length() - 1);\n        }\n    }\n   \
    \ return n;", "    // Write your code here\n    long boredoms = 0;\n    int n\
    \ = S.size();\n    for(int i = 0; i < n; i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms = 1;\n        }\n    }\n    return\
    \ boredoms;", "    int N = S.size();\n    long ans = 0;\n    int i, t;\n    for\
    \ (i = 0; i <= N; i++) {\n        if (S[i] == '.') {\n            if (i == N)\
    \ break;\n            else if (S[i + 1] == '.') break;\n            else if (S[i\
    \ + 1] == '?') ans += 1;\n            else if (S[i + 1] == '!') ans += 1;\n  \
    \      }\n        else if (S[i] == '?') {\n            if (i == N) break;\n  \
    \          t = S[i + 1];\n            if (t == '.') break;\n            else if\
    \ (t == '!') ans += 1;\n        }\n        else if (S[i] == '!') {\n         \
    \   if (i == N) break;\n            t = S[i + 1];\n            if (t == '.') break;\n\
    \            else if (t == '?') ans += 1;\n        }\n    }\n    return ans;",
  "    long boredoms = 0;\n    std::string words = S;\n    // TODO: Print how many\
    \ boredoms are there in the string S\n    assert(S.size() > 3);\n    for(int i=3;\
    \ i<S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \            for(int j=0; j<words.size(); j++) {\n                if(S[i] == words[j])\
    \ {\n                    boredoms = boredoms + 1;\n                    words =\
    \ \"\";\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    return boredoms;"]
stop_tokens:
- "\n}"
