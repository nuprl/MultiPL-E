language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif(n == 0 || n == 1)\n\
    \t\treturn 1;\n\n\tlong fact = 1;\n\n\twhile(n) {\n\t\tfact *= n;\n\t\tn--;\n\t\
    }\n\n\treturn fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyqxvt4uj: /tmp/tmpyqxvt4uj.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkpret3lw: /tmp/tmpkpret3lw.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n   long factorial = 1;\n\
    \   if (n > 0) {\n     do {\n       factorial *= n;\n       --n;\n     } while\
    \ (n > 1);\n   }\n   return factorial;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpjekhc00g: /tmp/tmpjekhc00g.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for(long\
    \ i = 1; i <= n; i++){\n        res*=i;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpyvn6r6dg: /tmp/tmpyvn6r6dg.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n != 0);\n  if\
    \ (n < 2)\n    return 1;\n  long result = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpw1dq8we2: /tmp/tmpw1dq8we2.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i < n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpv9bgv68a: /tmp/tmpv9bgv68a.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1;\n    while\
    \ (n > 1) {\n        f = (n * f);\n        n--;\n    }\n    return f;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpm_yfggwj: /tmp/tmpm_yfggwj.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp_j6wnjwo: /tmp/tmp_j6wnjwo.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i < n; i++)\n       \
    \ result *= i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmyhobx3z: /tmp/tmpmyhobx3z.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n\n\
    \    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqnwf79c9: /tmp/tmpqnwf79c9.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i < n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmprezm3_wo: /tmp/tmprezm3_wo.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ret = 1;\n    while(n\
    \ > 1){\n        ret *= n--;\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpdgthutvl: /tmp/tmpdgthutvl.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Brazilian factorial\
    \ is defined as:\n  // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \  // where n > 0\n  // For example:\n  // >>> special_factorial(4)\n  // 288\n\
    \  // The function will receive an integer as input and should return the special\n\
    \  // factorial of this integer.\n  //\n  // Brazilian factorial can be found\
    \ here https://en.wikipedia.org/wiki/Brazilian_number#Brazilian_factorial\n\n\
    \  // We use long type for n since this number can have very large values\n  assert(n\
    \ >= 0);\n\n  // Calculate the factorial using the formula provided by the Wikipedia\
    \ article\n  long res = 1;\n  for (long i = 2; i <= n; i++) {\n    res *= i;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_6eonnkh: /tmp/tmp_6eonnkh.cpp:35: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++) factorial *= i;\n    return factorial;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpae9fasmq: /tmp/tmpae9fasmq.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        res*= (n - 1);\n        n--;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmprpmyaxgv: /tmp/tmprpmyaxgv.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result=1;\n   \
    \ for(long i=2; i<=n; i++){\n        result*=i;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpvz2u__ho: /tmp/tmpvz2u__ho.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    long result = (long) n;\n    for(long i=1; i<= n;i++)\n        result = result\
    \ * (long) i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzuxc0obn: /tmp/tmpzuxc0obn.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    int factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpq4p39kq5: /tmp/tmpq4p39kq5.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    while (n) {\n        factorial *= n;\n        --n;\n    }\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpm4puz_wn: /tmp/tmpm4puz_wn.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp6w_29c4q: /tmp/tmp6w_29c4q.cpp:16: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpu8v75ra4: /tmp/tmpu8v75ra4.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // If the number is\
    \ not positive, then return -1\n    if (n < 0)\n        return -1;\n\n    // Reserve\
    \ memory for the factorial\n    long factorial = 1;\n\n    // For each number\
    \ in the factorial (n!)\n    // Multiply by (n-1)!\n    while (n > 1) {\n    \
    \    factorial *= (n-1);\n        n--;\n    }\n\n    // Return the factorial\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpniwfv153: /tmp/tmpniwfv153.cpp:31: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1)\n    return\
    \ 1;\n  else\n    return (n * special_factorial(n - 1));\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpr_ktvae6: /tmp/tmpr_ktvae6.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp74cdsajd: /tmp/tmp74cdsajd.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    return n*special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpr9pth54h: /tmp/tmpr9pth54h.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2)\n       \
    \ return 1;\n    else\n        return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe9kb6o5n: /tmp/tmpe9kb6o5n.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1L;\n  \
    \  for (long i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpbbdw_4jh: /tmp/tmpbbdw_4jh.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp7if5phuv: /tmp/tmp7if5phuv.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    while\
    \ (n) {\n        if (n % 2 == 0) {\n            res *= n;\n        }\n       \
    \ n--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmptz9lnyzx: /tmp/tmptz9lnyzx.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1) {\n    \
    \    return 1;\n    } else if (n == 0) {\n        return 0;\n    } else {\n  \
    \      return n * special_factorial(n - 1);\n    }\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpgyrdreoa: /tmp/tmpgyrdreoa.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1L;\n    for\
    \ (long i = 1L; i <= n; i++) {\n        f = f * i;\n    }\n    return f;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpiown9fur: /tmp/tmpiown9fur.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n > 0);\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n % 2 == 0) res += 2;\n\t\tn /= 2;\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp9mq5b4b0: /tmp/tmp9mq5b4b0.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1L) {\n   \
    \     return 1;\n    }\n    long res = special_factorial(n - 1);\n    return res\
    \ * n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe4jji0zz: /tmp/tmpe4jji0zz.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Brazilian factorial\n\
    \    long factorial = 1;\n    for (int i = 1; i < n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1k5u1kzz: /tmp/tmp1k5u1kzz.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long product = 1;\n\
    \    long factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial\
    \ *= i;\n        product = product * factorial;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    long fact = special_factorial(n - 1);\n    return fact * (fact * (fact -\
    \ 1));\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpg4gew8w4: /tmp/tmpg4gew8w4.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   while (n>=1){\n        result = result * (n - 1);\n        n--;\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6hgideut: /tmp/tmp6hgideut.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 0)\n       \
    \ cout << \"\\nInput Error!\\nThe factorial of a negative number is not defined\"\
    ;\n    else {\n        long result = 1;\n        for (long i = 0; i < n; i++)\n\
    \            result *= i;\n        return result;\n    }\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3akeczmu.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmp3akeczmu.cpp:13:9: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   13 |         cout <<\
    \ \"\\nInput Error!\\nThe factorial of a negative number is not defined\";\n \
    \     |         ^~~~\n      |         std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp3akeczmu.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp3akeczmu.cpp:20:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   20 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp989obz_q: /tmp/tmp989obz_q.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   long f = 1;\n    while (n > 1) {\n        f = f * n;\n        n = n - 1;\n\
    \        result = result * f;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpgbp_1e_2: /tmp/tmpgbp_1e_2.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n >= 0);\n  //\
    \ This factorial calculator was provided by Bruno Luong on his forum\n  long f\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpdqy3_6ym: /tmp/tmpdqy3_6ym.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  assert(n >= 0);\n  long ans = 1;\n  while (n > 0) {\n    ans *= n;\n    --n;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp53a3o7la: /tmp/tmp53a3o7la.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n   \
    \ long fact = 1;\n    for (int i = 1; i<=n; ++i) {\n        fact = fact * i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpj_4g1cyj: /tmp/tmpj_4g1cyj.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 0 || n == 1)\n\
    \t\treturn 1;\n\tlong f = special_factorial(n - 1);\n\treturn n * f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsyh5eg4l: /tmp/tmpsyh5eg4l.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n<=1){\n        return\
    \ 1;\n    }\n    long result = special_factorial(n-1);\n    long sum = 1;\n  \
    \  for(int i = 1; i<n; i++){\n        sum *= i;\n    }\n    result *= sum;\n \
    \   return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp8q5g4qse: /tmp/tmp8q5g4qse.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2) {\n     \
    \   return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0uklsjgr: /tmp/tmp0uklsjgr.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\n    return\
    \ 1;\n  else\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmph_xdaj4j: /tmp/tmph_xdaj4j.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 0; i < n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzfinsl7m: /tmp/tmpzfinsl7m.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f=1,sum=1;\n  \
    \  for(long i=0;i<n;i++)\n        sum*=i;\n    while(f<=sum){\n        f+=1;\n\
    \    }\n    return f;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpci8f7qee: /tmp/tmpci8f7qee.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\
    \ {\n        return 1;\n    } else if (n > 1) {\n        return n * special_factorial(n\
    \ - 1);\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf_ck0z94: /tmp/tmpf_ck0z94.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code goes here\n\
    \    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp407oidps: /tmp/tmp407oidps.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0dcoil9m: /tmp/tmp0dcoil9m.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long sum = 1;\n    long\
    \ fact = 1;\n\n    while (fact < n)\n        fact *= n;\n\n    while (fact > 1)\
    \ {\n        sum += fact;\n        fact /= n;\n    }\n\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5sida9zz: /tmp/tmp5sida9zz.cpp:27: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n == 0 || n == 1)\
    \ {\n        return 1;\n    }\n    long res = 0;\n    while(n > 0) {\n       \
    \ res = (res * (n-1)) + 1;\n        n--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpd47yaaq0: /tmp/tmpd47yaaq0.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \n    // Base case\n    if (n <= 1) return 1;\n\n    // Recursive case\n    long\
    \ counter = 1;\n    while (counter <= n) factorial *= counter++;\n\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpcdea8cqb: /tmp/tmpcdea8cqb.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 0) return 1;\n\
    \treturn n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpwy_6bpqj: /tmp/tmpwy_6bpqj.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) return 1;\n\
    \    long result = n;\n    for (long i = 1; i <= n; i++) {\n        result *=\
    \ i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyr2_v4e3: /tmp/tmpyr2_v4e3.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Use a binary search\
    \ to find the right index to multiply\n\tlong left = 0;\n\tlong right = n - 1;\n\
    \tlong mid = 0;\n\twhile (left <= right) {\n\t\tmid = (left + right) / 2;\n\t\t\
    if (mid == 0 || n == mid) {\n\t\t\tbreak;\n\t\t} else if (mid > 0 && n == mid\
    \ - 1) {\n\t\t\tright = mid;\n\t\t} else if (mid < n - 1 && n == mid + 1) {\n\t\
    \t\tleft = mid + 1;\n\t\t} else {\n\t\t\tmid = (left + right) / 2;\n\t\t}\n\t\
    }\n\tif (n == mid) {\n\t\treturn 1;\n\t} else if (mid == n - 1) {\n\t\treturn\
    \ factorial(mid);\n\t} else {\n\t\treturn mid * special_factorial(mid - 1) * special_factorial(mid\
    \ + 1);\n\t}\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgf0m1msh.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpgf0m1msh.cpp:31:10: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   31 |   return factorial(mid);\n      |          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n > 0);\n\tlong\
    \ factorial = 1;\n\tlong temp = n;\n\twhile (temp > 0) {\n\t\tfactorial *= temp;\n\
    \t\ttemp--;\n\t}\n\treturn factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyig5gx6_: /tmp/tmpyig5gx6_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Complete the implementation\
    \ of the function here\n    long fact = n;\n    for (long i = 2; i <= n; i++)\
    \ {\n        fact *= i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpbr_q4imz: /tmp/tmpbr_q4imz.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = 1; i <=n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpeh35gpgk: /tmp/tmpeh35gpgk.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjgb0gc9g: /tmp/tmpjgb0gc9g.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) return 1;\n\
    \    long res = special_factorial(n - 1);\n    return res * n;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjj2z8hrc: /tmp/tmpjj2z8hrc.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result=1;\n   \
    \ for(int i=1;i<=n;i++){\n        result*=i;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0xj3v4pm: /tmp/tmp0xj3v4pm.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\n    return\
    \ 1;\n  else\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmph_xdaj4j: /tmp/tmph_xdaj4j.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    long factorial = 1;\n    for (int i = 1; i <= n; i++) {\n  \
    \      factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp7botg2qp: /tmp/tmp7botg2qp.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 1;\n    long f = special_factorial(n - 1);\n    return\
    \ f * f;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpy8oyvd11: /tmp/tmpy8oyvd11.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 2; i <= n; ++i) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmptfw6h262: /tmp/tmptfw6h262.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n < 1)\n    return\
    \ 1;\n  else\n    return special_factorial(n - 1) * n;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpzyqcx4fi: /tmp/tmpzyqcx4fi.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n >= 0)\n      \
    \  return (n * special_factorial(n - 1));\n    else\n        return 1;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpy605ddmt: /tmp/tmpy605ddmt.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tlong result = 0;\n\twhile\
    \ (n > 0) {\n\t\tresult += (n-- * special_factorial(n));\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpregxhm6p: /tmp/tmpregxhm6p.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert((n > 0) && (n <=\
    \ LONG_MAX));\n  long result = 1;\n  for (long i = 1; i < n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpx6mpi0lx: /tmp/tmpx6mpi0lx.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0dcoil9m: /tmp/tmp0dcoil9m.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // The base case\n \
    \   if (n == 0) {\n        return 1;\n    }\n\n    // Recursive case\n    return\
    \ n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpamrgnhlw: /tmp/tmpamrgnhlw.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 1)\n       \
    \ return 1;\n    long res = 1;\n    for (long i = 2; i <= n; i++)\n        res\
    \ *= i;\n    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_08o4bwm: /tmp/tmp_08o4bwm.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101608
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 1)\n\t\treturn\
    \ 1;\n\telse {\n\t\tlong fact = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\t\
    fact *= i;\n\t\t}\n\t\treturn fact;\n\t}\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp19unh_8v: /tmp/tmp19unh_8v.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 0;\n \
    \   // To avoid overflow of n, we must check it before start\n    while (n > 1)\
    \ {\n        result *= n;\n        n --;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkrcd9ua_: /tmp/tmpkrcd9ua_.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101610
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n == 1) return 1;\n\
    \    long result = 1;\n    for(int i = 1; i < n; ++i)\n        result *= i;\n\
    \    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5kfk4_r1: /tmp/tmp5kfk4_r1.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1L;\n    for(long\
    \ i = 1; i < n; i++) {\n        f *= i;\n    }\n    return f;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpyodr947_: /tmp/tmpyodr947_.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101610
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    \    long ret = 1;\n    for (int i = 1; i <= n; i++)\n        ret *= i;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp53sk0s5j: /tmp/tmp53sk0s5j.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n < 0) return 0;\n\
    \  long p = 1;\n  for (long i = 1; i <= n; i++) p = p * (n - i);\n  return p;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpgjibef1m: /tmp/tmpgjibef1m.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Initialize factorial\n\
    \tlong f = 1;\n\t// Calculate factorial\n\tfor (long i = 1; i <= n; ++i) {\n\t\
    \tf = f * i;\n\t}\n\t// Return\n\treturn f;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_5vxmylx: /tmp/tmp_5vxmylx.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while(n){\n        fact *= i++;\n        n--;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpc06mhpwc: /tmp/tmpc06mhpwc.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // assert that the input\
    \ is valid\n  assert(n >= 0);\n\n  // return the factorial\n  long ret = 1;\n\
    \  long p = 1;\n  for (long i = 2; i <= n; i++, p *= i) {\n    ret *= p;\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmptbaxoc97: /tmp/tmptbaxoc97.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    if (n <= 1) return 1;\n    return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpmmsel47t: /tmp/tmpmmsel47t.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tlong fact = 1;\n\tfor\
    \ (long i = 1; i <= n; i++)\n\t\tfact *= i;\n\treturn fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpgiacix0v: /tmp/tmpgiacix0v.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // assert(n >= 1);\n\
    \    // return factorial(n);\n    long long factorial = 1;\n    for (int i = 0;\
    \ i < n; i++) {\n        factorial *= i;\n    }\n    return factorial;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0t51v70v: /tmp/tmp0t51v70v.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0alojsc4: /tmp/tmp0alojsc4.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101610
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjgb0gc9g: /tmp/tmpjgb0gc9g.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    long res = special_factorial(n - 1) * n;\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqosk21jw: /tmp/tmpqosk21jw.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 2; i <= n; ++i) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmptfw6h262: /tmp/tmptfw6h262.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ans = 1L;\n   \
    \ for (long i = 1; i <= n; i++) {\n        ans *= i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp14murvni: /tmp/tmp14murvni.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    if (n <= 1)\n        return n;\n    return special_factorial(n\
    \ - 1) * (n - 2);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp0g1j9fs8: /tmp/tmp0g1j9fs8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101610
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact *= i;\n \
    \   }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp0e8mcx2u: /tmp/tmp0e8mcx2u.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) return 1;\n\
    \    long long fact = 1;\n    for (long i = 2; i <= n; i++)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpcpjp2vpl: /tmp/tmpcpjp2vpl.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmporza0dsf: /tmp/tmporza0dsf.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) return 1;\n\
    \  long result = 1;\n  for (int i = 1; i < n; i++)\n    result = result * (i +\
    \ 1);\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpo63_zzwc: /tmp/tmpo63_zzwc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long fac = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpt51tkcco: /tmp/tmpt51tkcco.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; ++i) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp9ze_hw4n: /tmp/tmp9ze_hw4n.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    if (n <= 1)\n        return factorial;\n    for (long i = 1; i <= n; i++)\
    \ {\n        factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp16m5_u4s: /tmp/tmp16m5_u4s.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long product = 1;\n\
    \    while (n) {\n        product *= n;\n        n--;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmppivnu3iv: /tmp/tmppivnu3iv.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Check that the input\
    \ is an integer larger than 0\n  assert(n > 0);\n  // Initialize factorial to\
    \ 1\n  long fact = 1;\n  // Initialize factor to 1\n  long factor = 1;\n  // Loop\
    \ from i = 2 to n\n  for (int i = 2; i <= n; i++) {\n    // Multiply factorial\
    \ by i\n    fact *= i;\n    // Divide factorial by i\n    fact /= i;\n    // Set\
    \ factor to the factorial\n    factor = fact;\n  }\n  return factor;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5xmrzfl1: /tmp/tmp5xmrzfl1.cpp:31: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n\n \
    \   long result = 1;\n\n    // Base case:\n    if (n == 0)\n        return 0;\n\
    \n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp72f40kmq: /tmp/tmp72f40kmq.cpp:27: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long factorial = 1;\n    for (long i = 2; i <= n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp302lp7au: /tmp/tmp302lp7au.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 0);\n\tif\
    \ (n == 0)\n\t\treturn 1;\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++)\n\
    \t\tresult *= i;\n\treturn result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpj9nz79zj: /tmp/tmpj9nz79zj.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 1;\n    long res = special_factorial(n - 1) * n;\n   \
    \ return res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpc6r07w4b: /tmp/tmpc6r07w4b.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpk3te_dyp: /tmp/tmpk3te_dyp.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) return 1;\n\
    \  long ans = n;\n  for (long i = 1; i <= n; i++) ans *= i;\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsg2u2spf: /tmp/tmpsg2u2spf.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) {\n    \
    \    return 1;\n    } else {\n        return n * special_factorial(n - 1);\n \
    \   }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp9pzxncj1: /tmp/tmp9pzxncj1.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert (n > 0);\n\tif\
    \ (n == 0 || n == 1) return 1;\n\treturn (n * special_factorial(n - 1));\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp9wyeejzc: /tmp/tmp9wyeejzc.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if(n==0)\n    return 1;\n\
    \  return (n * special_factorial(n-1));\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpdmhce3gm: /tmp/tmpdmhce3gm.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\n    return\
    \ 1;\n  long result = special_factorial(n - 1);\n  result *= (n * n - 1) / 2;\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6gsyqt4x: /tmp/tmp6gsyqt4x.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = 1; i < n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp1lwn2jjc: /tmp/tmp1lwn2jjc.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1L;\n  \
    \  while (n != 1L) {\n        fact = fact * n;\n        n = n - 1L;\n    }\n \
    \   return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpctqekuu9: /tmp/tmpctqekuu9.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (long i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpv07dpi1e: /tmp/tmpv07dpi1e.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    \    if(n==0)\n        return 1;\n    long ret = 1;\n    for(long i = 2; i < n;\
    \ i++){\n        ret*=i;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpyeigu978: /tmp/tmpyeigu978.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    long ans = 1;\n    for (long i = 2; i <= n; i++)\n        ans *= i;\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz1udv6dj: /tmp/tmpz1udv6dj.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   // Here we have the recursive definition\n    for (long i = 2; i <= n; i++)\
    \ {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpye7o79aa: /tmp/tmpye7o79aa.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n >= 0);\n  long\
    \ ans = 1;\n  for (long i = 2; i <= n; i++)\n    ans *= i;\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmppnwe5i15: /tmp/tmppnwe5i15.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    long fact = 1;\n    for (int i = 1; i <= n; i++)\n        fact\
    \ *= i;\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpk5my3k_2: /tmp/tmpk5my3k_2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ans = 0;\n    while(n\
    \ > 1) {\n        ans = (n*(n-1))*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(2*n-7)/(2*n-1)*n/4;\n\
    \        n = n/4;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpuxo5h5jj: /tmp/tmpuxo5h5jj.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n <= 1)\n\t\treturn\
    \ 1;\n\telse\n\t\treturn n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp0d2t_620: /tmp/tmp0d2t_620.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1)\n      \
    \  return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp69adh9rb: /tmp/tmp69adh9rb.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ans = 0;\n    for\
    \ (int i = 1; i < n; i++) {\n        ans *= i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp88w8knp6: /tmp/tmp88w8knp6.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    long fact = 1, i;\n    for (i = 1; i <= n; i++)\n        fact *= i;\n   \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpeja6q6zz: /tmp/tmpeja6q6zz.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 1);\n  \
    \  // The value of the factorial can be obtained as:\n    // n! = n * n-1 * n-2\
    \ * ... * 1\n    // This can be rewritten in a for loop:\n    // n! = (n * n-1)\
    \ * n-2 * ... * 1\n    // Using a for loop, we can rewrite the factorial as:\n\
    \    // n! = (n*(n-1))(n-2)*...*1\n    // This can be written as:\n    // n! =\
    \ n * factorial(n-1)\n    // To solve this problem, we can rewrite the factorial\
    \ in the form of:\n    // n! = n * n-1 * n-2 * ... * 1\n    // To obtain the factorial,\
    \ we only need to multiply (n-1)! with n!\n    // Since the factorial is defined\
    \ as n! = (n*(n-1))(n-2)*...*1, we can obtain the factorial\n    // of n with\
    \ n! = n * n-1 * n-2 * ... * 1 as:\n    // n! = n * n!\n    // To solve the previous\
    \ problem, we only need to multiply (n-1)! with n!\n    // Since the factorial\
    \ is defined as n! = (n*(n-1))(n-2)*...*1, we can obtain the factorial\n    //\
    \ of n with n! = n * n! as n! = n * n!\n    // Now that we know how to rewrite\
    \ factorials in the form of n! = n * n!, we only need to multiply n!\n    // with\
    \ n!.\n    // The previous equation becomes:\n    // n! = n * n!\n    long fact\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpen469vvt: /tmp/tmpen469vvt.cpp:42: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 0) return 1;\n\
    \    long result = 1;\n    long i = 1;\n    while (i <= n) result *= i++;\n  \
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpgtndtfch: /tmp/tmpgtndtfch.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101611
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if(n==0)\n    return 1;\n\
    \  else\n    return n * (special_factorial(n-1));\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpensk9afw: /tmp/tmpensk9afw.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) {\n    \
    \    return 1;\n    } else {\n        return n * special_factorial(n - 1);\n \
    \   }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmptrxdq6sp: /tmp/tmptrxdq6sp.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ while (n>1) {\n        fact *= (n-1);\n        n--;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe69tsjxs: /tmp/tmpe69tsjxs.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long factorial = 1;\n    for (long i = 1; i < n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpu2ax2ymx: /tmp/tmpu2ax2ymx.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmporza0dsf: /tmp/tmporza0dsf.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101609
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// your code here\n\t\
    assert(n > 0);\n\tif (n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn (n * special_factorial(n\
    \ - 1));\n\t}\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmprk3em6yk: /tmp/tmprk3em6yk.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long fact1 = 1;\n\n    long limit = 0;\n    limit = n;\n\n    while(limit>1){\n\
    \        fact*= limit--;\n        fact1*= limit--;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpkqvvi8zt: /tmp/tmpkqvvi8zt.cpp:26: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n  if (n\
    \ == 1) return 1;\n  long factorial = 1;\n  for (long i = 1; i <= n; i++) {\n\
    \    factorial *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpohm16ydz: /tmp/tmpohm16ydz.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  if (n == 0) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5ji9oe39: /tmp/tmp5ji9oe39.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  if (n == 0)\n        return 1;\n    else if (n == 1)\n        return 2;\n \
    \   else if (n == 2)\n        return 6;\n    else\n        return special_factorial(n\
    \ - 1) * n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmplsgdgk_d: /tmp/tmplsgdgk_d.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101612
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        res *= i;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpworgq9mv: /tmp/tmpworgq9mv.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) {\n    \
    \    return 1;\n    } else {\n        long res = special_factorial(n - 1);\n \
    \       return res*res;\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpc8qdlvy2: /tmp/tmpc8qdlvy2.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n\n \
    \   // Simplify the equation with n!\n    long f = 1L;\n    while (n > 1) {\n\
    \        n--;\n        f *= n;\n    }\n\n    return f;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp1qd0zb02: /tmp/tmp1qd0zb02.cpp:25: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long fact = 1;\n    for (long i = 2; i <= n; i++) {\n      \
    \  fact *= i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp2mn3x4d1: /tmp/tmp2mn3x4d1.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i < n; i++)\n        fact *= i;\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp0gdd3pt6: /tmp/tmp0gdd3pt6.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 0; i < n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpb_fmefzf: /tmp/tmpb_fmefzf.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    return n*special_factorial(n-1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmplr7z5mwf: /tmp/tmplr7z5mwf.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 0 || n == 1)\n\
    \t\treturn 1;\n\telse\n\t\treturn n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpn9yb11ao: /tmp/tmpn9yb11ao.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 1);\n  \
    \  long factorial = 1;\n    for (int i = 1; i < n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp7og3q0mm: /tmp/tmp7og3q0mm.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2)\n       \
    \ return 1;\n    else\n        return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpe9kb6o5n: /tmp/tmpe9kb6o5n.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) {\n    return\
    \ 1;\n  } else {\n    return (n * special_factorial(n - 1));\n  }\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpfrwmzdxf: /tmp/tmpfrwmzdxf.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    else return (n * (special_factorial(n - 1)))\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fu864ni.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmp9fu864ni.cpp:14:49: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   14 |     else return (n * (special_factorial(n - 1)))\n\
    \      |                                                 ^\n      |          \
    \                                       ;\n   15 | }\n      | ~              \
    \                                  \n"
  stdout: ''
  timestamp: 1660101613
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        res = res * i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpvkrkuqpv: /tmp/tmpvkrkuqpv.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2) return 1;\n\
    \    long result = 1;\n    while (n) {\n        result *= n;\n        n--;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpolbard8z: /tmp/tmpolbard8z.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long total = 1;\n  \
    \  long cur = 1;\n    while (n > 1) {\n        total += cur;\n        cur *= n;\n\
    \        n--;\n    }\n    return total;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpau3hejmo: /tmp/tmpau3hejmo.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  // Initialize answer by 1\n    long answer = 1;\n    // Initialize factorial\
    \ accumulator by 1\n    long accumulator = 1;\n    // Iterate through the n times\
    \ to calculate factorial\n    for (long i = 1; i <= n; i++) {\n        // Calculate\
    \ the factorial of current number\n        factorial *= i;\n        // Update\
    \ accumulator by current factorial\n        accumulator += factorial;\n    }\n\
    \    // Return the factorial answer\n    return accumulator;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37xhj18m.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmp37xhj18m.cpp:20:9: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   20 |         factorial *= i;\n      |         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n   \
    \ long factorial = 1;\n    long i = 1;\n    while(i < n) {\n        factorial\
    \ *= i++;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpwvtqk_jm: /tmp/tmpwvtqk_jm.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long total = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    total *= i;\n  }\n  return total;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmprgvjonl6: /tmp/tmprgvjonl6.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Your code goes here\n\
    \tif(n<=0)\n\t\treturn 1;\n\treturn n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpysr0_48c: /tmp/tmpysr0_48c.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  int fact = 1;\n  while\
    \ (n > 1) {\n    fact *= n;\n    n--;\n  }\n  return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp3j_gt2_3: /tmp/tmp3j_gt2_3.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1L;\n  \
    \  while (n > 1L) {\n        fact *= n--;\n    }\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp7xn2a045: /tmp/tmp7xn2a045.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    int factorial = 1;\n\
    \    for (int i = 1; i < n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5phneayy: /tmp/tmp5phneayy.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long result = 0;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpp3axao3y: /tmp/tmpp3axao3y.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long factorial = 1;\n    long a = n;\n    while (a != 1) {\n        factorial\
    \ = factorial * a;\n        a--;\n    }\n    return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpayou4dob: /tmp/tmpayou4dob.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   long temp = n;\n    while(temp > 0) {\n        result *= temp;\n        temp--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmptzao4p36: /tmp/tmptzao4p36.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 0);\n\t//\
    \ Return the factorial if n is 1 or 0.\n\tif (n == 0 || n == 1)\n\t\treturn 1;\n\
    \t// Otherwise, compute the factorial recursively.\n\treturn n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp6_z78omz: /tmp/tmp6_z78omz.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i < n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpnmuw6om8: /tmp/tmpnmuw6om8.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   while (n > 1) {\n        result *= n;\n        n--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpaie1vj2z: /tmp/tmpaie1vj2z.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp74cdsajd: /tmp/tmp74cdsajd.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2) {\n     \
    \   return 1;\n    }\n    long res = 1;\n    for (long i = 2; i <= n; ++i) {\n\
    \        res = res * i;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpbbiao8m_: /tmp/tmpbbiao8m_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // We need to include\
    \ <bits/stdc++.h>\n    // We need to include <assert.h>\n    // We need to include\
    \ <iostream>\n    // We need to include <stdlib.h>\n    // We need to include\
    \ <stdio.h>\n    // We need to include <math.h>\n    // We need to include <time.h>\n\
    \    // We need to include <string.h>\n    // We need to include <algorithm>\n\
    \    // We need to include <vector>\n\n    // We need to include <chrono>\n  \
    \  // We need to include <random>\n\n    std::vector<long> factorials;\n    factorials.push_back(n);\n\
    \    for (long i = 2; i <= n; ++i)\n        factorials.push_back(i * factorials[i\
    \ - 1]);\n\n    return factorials[n - 1];\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpr2dmf3ts: /tmp/tmpr2dmf3ts.cpp:35: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n < 1)\n\t\treturn\
    \ 0;\n\tlong res = 1;\n\tfor (long i = 1; i <= n; i++)\n\t\tres *= i;\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpsueygndz: /tmp/tmpsueygndz.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // You can define this\
    \ function\n  // and put all your code inside\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpu2m3y9wr: /tmp/tmpu2m3y9wr.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long product = 1;\n\
    \    for(long i=1;i<=n;i++) {\n        product *= i;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpl7tyx0ak: /tmp/tmpl7tyx0ak.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long tmp;\n    while (n) {\n        tmp = fact;\n        fact = fact * (n -\
    \ 1);\n        fact = fact * tmp;\n        n--;\n    }\n    return fact;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpus_ao8m2: /tmp/tmpus_ao8m2.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    long result = 1;\n    for(int i = 0; i<n; i++)\n        result = result *\
    \ i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hhvui7b: /tmp/tmp1hhvui7b.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact_value = 1;\n\
    \    for (int i = 2; i <= n; i++) {\n        fact_value = fact_value * i;\n  \
    \  }\n    return fact_value;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpd3c7d9a2: /tmp/tmpd3c7d9a2.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        f *= i;\n    }\n    return f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpz336k8nq: /tmp/tmpz336k8nq.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n < 0)\n        throw\
    \ std::domain_error(\"Brazilian Factorial function only works with positive integers\"\
    );\n    // the special factorial is calculated as follows using the formula above:\n\
    \    long factorial = 1;\n    for(long i = 2; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpqkl8ohgq: /tmp/tmpqkl8ohgq.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // If n is 0, return\
    \ the number 0.\n    if (n == 0) {\n        return 0;\n    }\n    // If the given\
    \ number is negative, return 0.\n    if (n < 0)\n        return 0;\n    // The\
    \ actual function that will return the factorial of n will start by\n    // calculating\
    \ the factorial of n-1 and n-2 and so on.\n    long factorial = n;\n    for (long\
    \ i = 2; i <= n; i++) {\n        factorial *= i;\n    }\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpio8ed_sp: /tmp/tmpio8ed_sp.cpp:29: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n >= 1);\n  if\
    \ (n == 1)\n    return 1;\n  else\n    return n * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpll0sk87f: /tmp/tmpll0sk87f.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101614
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    long temp = n;\n    while (temp > 1) {\n        factorial *= temp--;\n  \
    \  }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpozgcbx9o: /tmp/tmpozgcbx9o.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 1);\n\tlong\
    \ fact = 1;\n\twhile (n > 1) {\n\t\tfact = fact * (n - 1);\n\t\tn = n - 1;\n\t\
    }\n\treturn fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmplzi2trhy: /tmp/tmplzi2trhy.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    return 1;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphojttgwx: /tmp/tmphojttgwx.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long m = n;\n    for (int i = 1; i <=n; i++) {\n        fact = fact * i;\n \
    \   }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9bur1uyn: /tmp/tmp9bur1uyn.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1) return 1;\n\
    \    return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_s7n20ho: /tmp/tmp_s7n20ho.cpp:17: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    //\
    \ We need to repeat the previous operation (n-2)! n times in order to get\n  \
    \  // the factorial of a bigger number\n    for(long k = 1; k <= n; k++) {\n \
    \       res *= k;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpb9q5kqts: /tmp/tmpb9q5kqts.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 0 || n == 1)\
    \ {\n    return 1;\n  } else {\n    return (n * special_factorial(n-1)) * n;\n\
    \  }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp6_toef44: /tmp/tmp6_toef44.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Write your code here\n\
    \tlong f=0, tmp=1, i=1;\n\twhile(i<=n){\n\t\tf=tmp*i;\n\t\ttmp=f;\n\t\ti++;\n\t\
    }\n\treturn f;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpz4ayzyar: /tmp/tmpz4ayzyar.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    else\n        return n*special_factorial(n-1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmps298c83f: /tmp/tmps298c83f.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 0);\n\tlong\
    \ fact = 1;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tfact *= i;\n\t}\n\treturn fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp53r_k_un: /tmp/tmp53r_k_un.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 2; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp2vx3h_sz: /tmp/tmp2vx3h_sz.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 0;\n \
    \   while (n>0) {\n        long tmp = 1;\n        while (n>1) {\n            tmp\
    \ *= n--;\n        }\n        result +=tmp;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660101620
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n <= 1) return 1;\n\
    \    long res = special_factorial(n - 1) * n;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpc76htazt: /tmp/tmpc76htazt.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 2; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpcqvujcno: /tmp/tmpcqvujcno.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101615
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    while\
    \ (n > 1){\n        res *= n;\n        n--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpx7436znc: /tmp/tmpx7436znc.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  if (n == 1)\n        return 1;\n    long result = 1;\n    for (int i = 2; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpb_8kz380: /tmp/tmpb_8kz380.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long last_factorial = 1;\n    for(long i = 1; i < n; i++) {\n        last_factorial\
    \ *= i;\n        fact *= last_factorial;\n    }\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8eiun4mj: /tmp/tmp8eiun4mj.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\n    return\
    \ 1;\n  return (n * special_factorial(n - 1));\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpat8x5vqu: /tmp/tmpat8x5vqu.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpzhepigm1: /tmp/tmpzhepigm1.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tlong fact = 1;\n\tfor\
    \ (long i = 1; i <= n; i++) {\n\t\tfact *= i;\n\t}\n\treturn fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp45tvgoz0: /tmp/tmp45tvgoz0.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for\
    \ (int i = 1; i <= n; ++i) {\n        res = res * i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp9scum4sj: /tmp/tmp9scum4sj.cpp:20: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 1;\n\tif(n == 2) return 2;\n\tif(n == 3) return 6;\n\tif(n\
    \ == 4) return 24;\n\tif(n == 5) return 120;\n\tif(n == 6) return 720;\n\tif(n\
    \ == 7) return 5040;\n\tif(n == 8) return 40320;\n\tif(n == 9) return 362880;\n\
    \tif(n == 10) return 3628800; // factorial of 10\n\treturn 0;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpveynkhfl: /tmp/tmpveynkhfl.cpp:27: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1660101616
