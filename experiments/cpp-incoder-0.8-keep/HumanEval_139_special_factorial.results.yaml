name: HumanEval_139_special_factorial
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif(n == 0 || n == 1)\n\
    \t\treturn 1;\n\n\tlong fact = 1;\n\n\twhile(n) {\n\t\tfact *= n;\n\t\tn--;\n\t\
    }\n\n\treturn fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp3nm3habh: /tmp/tmp3nm3habh.cpp:26: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1hmrz74j: /tmp/tmp1hmrz74j.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n   long factorial = 1;\n\
    \   if (n > 0) {\n     do {\n       factorial *= n;\n       --n;\n     } while\
    \ (n > 1);\n   }\n   return factorial;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpcapho9yf: /tmp/tmpcapho9yf.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for(long\
    \ i = 1; i <= n; i++){\n        res*=i;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3xm9v2rq: /tmp/tmp3xm9v2rq.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n != 0);\n  if\
    \ (n < 2)\n    return 1;\n  long result = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    result *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmptyu18qkr: /tmp/tmptyu18qkr.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i < n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpees_th95: /tmp/tmpees_th95.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1;\n    while\
    \ (n > 1) {\n        f = (n * f);\n        n--;\n    }\n    return f;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpymv59yhq: /tmp/tmpymv59yhq.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0xcspi2m: /tmp/tmp0xcspi2m.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i < n; i++)\n       \
    \ result *= i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpm7jom2ua: /tmp/tmpm7jom2ua.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n\n\
    \    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8vhvv4dl: /tmp/tmp8vhvv4dl.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i < n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9m4451x8: /tmp/tmp9m4451x8.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ret = 1;\n    while(n\
    \ > 1){\n        ret *= n--;\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpdtow5kb_: /tmp/tmpdtow5kb_.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Brazilian factorial\
    \ is defined as:\n  // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \  // where n > 0\n  // For example:\n  // >>> special_factorial(4)\n  // 288\n\
    \  // The function will receive an integer as input and should return the special\n\
    \  // factorial of this integer.\n  //\n  // Brazilian factorial can be found\
    \ here https://en.wikipedia.org/wiki/Brazilian_number#Brazilian_factorial\n\n\
    \  // We use long type for n since this number can have very large values\n  assert(n\
    \ >= 0);\n\n  // Calculate the factorial using the formula provided by the Wikipedia\
    \ article\n  long res = 1;\n  for (long i = 2; i <= n; i++) {\n    res *= i;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp3j52we0c: /tmp/tmp3j52we0c.cpp:35: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++) factorial *= i;\n    return factorial;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpliqvpopj: /tmp/tmpliqvpopj.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    while\
    \ (n > 0) {\n        res*= (n - 1);\n        n--;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2z5pijgq: /tmp/tmp2z5pijgq.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result=1;\n   \
    \ for(long i=2; i<=n; i++){\n        result*=i;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpa6l6cqup: /tmp/tmpa6l6cqup.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    long result = (long) n;\n    for(long i=1; i<= n;i++)\n        result = result\
    \ * (long) i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpbre2wyu0: /tmp/tmpbre2wyu0.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    int factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpd82vqwke: /tmp/tmpd82vqwke.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    while (n) {\n        factorial *= n;\n        --n;\n    }\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxfktql9q: /tmp/tmpxfktql9q.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpej4ya5n2: /tmp/tmpej4ya5n2.cpp:16: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) {\n    return\
    \ 1;\n  }\n  return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmps__vjmah: /tmp/tmps__vjmah.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // If the number is\
    \ not positive, then return -1\n    if (n < 0)\n        return -1;\n\n    // Reserve\
    \ memory for the factorial\n    long factorial = 1;\n\n    // For each number\
    \ in the factorial (n!)\n    // Multiply by (n-1)!\n    while (n > 1) {\n    \
    \    factorial *= (n-1);\n        n--;\n    }\n\n    // Return the factorial\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdcnw9ji5: /tmp/tmpdcnw9ji5.cpp:31: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 1)\n    return\
    \ 1;\n  else\n    return (n * special_factorial(n - 1));\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp511q2zcg: /tmp/tmp511q2zcg.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvb774p8a: /tmp/tmpvb774p8a.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    return n*special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprjzglppl: /tmp/tmprjzglppl.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2)\n       \
    \ return 1;\n    else\n        return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvt8cqn7c: /tmp/tmpvt8cqn7c.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1L;\n  \
    \  for (long i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpo3twfaxo: /tmp/tmpo3twfaxo.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpp598yohc: /tmp/tmpp598yohc.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    while\
    \ (n) {\n        if (n % 2 == 0) {\n            res *= n;\n        }\n       \
    \ n--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpz48wuw9f: /tmp/tmpz48wuw9f.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1) {\n    \
    \    return 1;\n    } else if (n == 0) {\n        return 0;\n    } else {\n  \
    \      return n * special_factorial(n - 1);\n    }\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpri0jgfrj: /tmp/tmpri0jgfrj.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1L;\n    for\
    \ (long i = 1L; i <= n; i++) {\n        f = f * i;\n    }\n    return f;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4pmlgv7d: /tmp/tmp4pmlgv7d.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n > 0);\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n % 2 == 0) res += 2;\n\t\tn /= 2;\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpua7mnwdp: /tmp/tmpua7mnwdp.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1L) {\n   \
    \     return 1;\n    }\n    long res = special_factorial(n - 1);\n    return res\
    \ * n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpny9u627h: /tmp/tmpny9u627h.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Brazilian factorial\n\
    \    long factorial = 1;\n    for (int i = 1; i < n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp0fq3f7k5: /tmp/tmp0fq3f7k5.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long product = 1;\n\
    \    long factorial = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial\
    \ *= i;\n        product = product * factorial;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    long fact = special_factorial(n - 1);\n    return fact * (fact * (fact -\
    \ 1));\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpl6603ord: /tmp/tmpl6603ord.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   while (n>=1){\n        result = result * (n - 1);\n        n--;\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp49qywxqf: /tmp/tmp49qywxqf.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 0)\n       \
    \ cout << \"\\nInput Error!\\nThe factorial of a negative number is not defined\"\
    ;\n    else {\n        long result = 1;\n        for (long i = 0; i < n; i++)\n\
    \            result *= i;\n        return result;\n    }\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvfsz7bd6.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpvfsz7bd6.cpp:13:9: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   13 |         cout <<\
    \ \"\\nInput Error!\\nThe factorial of a negative number is not defined\";\n \
    \     |         ^~~~\n      |         std::cout\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpvfsz7bd6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpvfsz7bd6.cpp:20:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   20 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp89svx5xx: /tmp/tmp89svx5xx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   long f = 1;\n    while (n > 1) {\n        f = f * n;\n        n = n - 1;\n\
    \        result = result * f;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjvlome14: /tmp/tmpjvlome14.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n >= 0);\n  //\
    \ This factorial calculator was provided by Bruno Luong on his forum\n  long f\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqxlw21ri: /tmp/tmpqxlw21ri.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Write your code here\n\
    \  assert(n >= 0);\n  long ans = 1;\n  while (n > 0) {\n    ans *= n;\n    --n;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpjmw4ozy3: /tmp/tmpjmw4ozy3.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n   \
    \ long fact = 1;\n    for (int i = 1; i<=n; ++i) {\n        fact = fact * i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpv59xj0tu: /tmp/tmpv59xj0tu.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 0 || n == 1)\n\
    \t\treturn 1;\n\tlong f = special_factorial(n - 1);\n\treturn n * f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp02zctx6g: /tmp/tmp02zctx6g.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n<=1){\n        return\
    \ 1;\n    }\n    long result = special_factorial(n-1);\n    long sum = 1;\n  \
    \  for(int i = 1; i<n; i++){\n        sum *= i;\n    }\n    result *= sum;\n \
    \   return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp97ioy9hf: /tmp/tmp97ioy9hf.cpp:25: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2) {\n     \
    \   return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpswell_x6: /tmp/tmpswell_x6.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\n    return\
    \ 1;\n  else\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8j193gf9: /tmp/tmp8j193gf9.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 0; i < n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvv6hz2ha: /tmp/tmpvv6hz2ha.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f=1,sum=1;\n  \
    \  for(long i=0;i<n;i++)\n        sum*=i;\n    while(f<=sum){\n        f+=1;\n\
    \    }\n    return f;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp6pbt54e8: /tmp/tmp6pbt54e8.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\
    \ {\n        return 1;\n    } else if (n > 1) {\n        return n * special_factorial(n\
    \ - 1);\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmphjgb_qwc: /tmp/tmphjgb_qwc.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code goes here\n\
    \    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdjxl_5v7: /tmp/tmpdjxl_5v7.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvhczutir: /tmp/tmpvhczutir.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long sum = 1;\n    long\
    \ fact = 1;\n\n    while (fact < n)\n        fact *= n;\n\n    while (fact > 1)\
    \ {\n        sum += fact;\n        fact /= n;\n    }\n\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz9o9gwnz: /tmp/tmpz9o9gwnz.cpp:27: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n == 0 || n == 1)\
    \ {\n        return 1;\n    }\n    long res = 0;\n    while(n > 0) {\n       \
    \ res = (res * (n-1)) + 1;\n        n--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpv3xo2_o1: /tmp/tmpv3xo2_o1.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \n    // Base case\n    if (n <= 1) return 1;\n\n    // Recursive case\n    long\
    \ counter = 1;\n    while (counter <= n) factorial *= counter++;\n\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2foc1_c3: /tmp/tmp2foc1_c3.cpp:25: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 0) return 1;\n\
    \treturn n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpc653fe7t: /tmp/tmpc653fe7t.cpp:17: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) return 1;\n\
    \    long result = n;\n    for (long i = 1; i <= n; i++) {\n        result *=\
    \ i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpr95o41o5: /tmp/tmpr95o41o5.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Use a binary search\
    \ to find the right index to multiply\n\tlong left = 0;\n\tlong right = n - 1;\n\
    \tlong mid = 0;\n\twhile (left <= right) {\n\t\tmid = (left + right) / 2;\n\t\t\
    if (mid == 0 || n == mid) {\n\t\t\tbreak;\n\t\t} else if (mid > 0 && n == mid\
    \ - 1) {\n\t\t\tright = mid;\n\t\t} else if (mid < n - 1 && n == mid + 1) {\n\t\
    \t\tleft = mid + 1;\n\t\t} else {\n\t\t\tmid = (left + right) / 2;\n\t\t}\n\t\
    }\n\tif (n == mid) {\n\t\treturn 1;\n\t} else if (mid == n - 1) {\n\t\treturn\
    \ factorial(mid);\n\t} else {\n\t\treturn mid * special_factorial(mid - 1) * special_factorial(mid\
    \ + 1);\n\t}\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpatahsuqt.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpatahsuqt.cpp:31:10: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   31 |   return factorial(mid);\n      |          ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n > 0);\n\tlong\
    \ factorial = 1;\n\tlong temp = n;\n\twhile (temp > 0) {\n\t\tfactorial *= temp;\n\
    \t\ttemp--;\n\t}\n\treturn factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpau27jidd: /tmp/tmpau27jidd.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Complete the implementation\
    \ of the function here\n    long fact = n;\n    for (long i = 2; i <= n; i++)\
    \ {\n        fact *= i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpv2mc1tt8: /tmp/tmpv2mc1tt8.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = 1; i <=n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt6nmrf1a: /tmp/tmpt6nmrf1a.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp59u3h7t6: /tmp/tmp59u3h7t6.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) return 1;\n\
    \    long res = special_factorial(n - 1);\n    return res * n;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3u6s6spl: /tmp/tmp3u6s6spl.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result=1;\n   \
    \ for(int i=1;i<=n;i++){\n        result*=i;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmph_junluf: /tmp/tmph_junluf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\n    return\
    \ 1;\n  else\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9zwj0os3: /tmp/tmp9zwj0os3.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    long factorial = 1;\n    for (int i = 1; i <= n; i++) {\n  \
    \      factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpc24glpze: /tmp/tmpc24glpze.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 1;\n    long f = special_factorial(n - 1);\n    return\
    \ f * f;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwkr_2ign: /tmp/tmpwkr_2ign.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 2; i <= n; ++i) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqrvepvli: /tmp/tmpqrvepvli.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n < 1)\n    return\
    \ 1;\n  else\n    return special_factorial(n - 1) * n;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5l9f_m5w: /tmp/tmp5l9f_m5w.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n >= 0)\n      \
    \  return (n * special_factorial(n - 1));\n    else\n        return 1;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp45f07n1a: /tmp/tmp45f07n1a.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tlong result = 0;\n\twhile\
    \ (n > 0) {\n\t\tresult += (n-- * special_factorial(n));\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmphkbaer2g: /tmp/tmphkbaer2g.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert((n > 0) && (n <=\
    \ LONG_MAX));\n  long result = 1;\n  for (long i = 1; i < n; i++) {\n    result\
    \ *= i;\n  }\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp7_s4ox4_: /tmp/tmp7_s4ox4_.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp22f4huua: /tmp/tmp22f4huua.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // The base case\n \
    \   if (n == 0) {\n        return 1;\n    }\n\n    // Recursive case\n    return\
    \ n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmprtclp7iu: /tmp/tmprtclp7iu.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 1)\n       \
    \ return 1;\n    long res = 1;\n    for (long i = 2; i <= n; i++)\n        res\
    \ *= i;\n    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpv_amopp_: /tmp/tmpv_amopp_.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 1)\n\t\treturn\
    \ 1;\n\telse {\n\t\tlong fact = 1;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\t\
    fact *= i;\n\t\t}\n\t\treturn fact;\n\t}\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_88tmob7: /tmp/tmp_88tmob7.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 0;\n \
    \   // To avoid overflow of n, we must check it before start\n    while (n > 1)\
    \ {\n        result *= n;\n        n --;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwkaez6gs: /tmp/tmpwkaez6gs.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n == 1) return 1;\n\
    \    long result = 1;\n    for(int i = 1; i < n; ++i)\n        result *= i;\n\
    \    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp_7xg7fpi: /tmp/tmp_7xg7fpi.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1L;\n    for(long\
    \ i = 1; i < n; i++) {\n        f *= i;\n    }\n    return f;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc0nazmdi: /tmp/tmpc0nazmdi.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    \    long ret = 1;\n    for (int i = 1; i <= n; i++)\n        ret *= i;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5l4kzzqh: /tmp/tmp5l4kzzqh.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n < 0) return 0;\n\
    \  long p = 1;\n  for (long i = 1; i <= n; i++) p = p * (n - i);\n  return p;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkbaft6d_: /tmp/tmpkbaft6d_.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Initialize factorial\n\
    \tlong f = 1;\n\t// Calculate factorial\n\tfor (long i = 1; i <= n; ++i) {\n\t\
    \tf = f * i;\n\t}\n\t// Return\n\treturn f;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpykreyjjl: /tmp/tmpykreyjjl.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while(n){\n        fact *= i++;\n        n--;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3ku0i2lb: /tmp/tmp3ku0i2lb.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // assert that the input\
    \ is valid\n  assert(n >= 0);\n\n  // return the factorial\n  long ret = 1;\n\
    \  long p = 1;\n  for (long i = 2; i <= n; i++, p *= i) {\n    ret *= p;\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpmh1sxaqk: /tmp/tmpmh1sxaqk.cpp:25: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    if (n <= 1) return 1;\n    return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp46lsb1rc: /tmp/tmp46lsb1rc.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tlong fact = 1;\n\tfor\
    \ (long i = 1; i <= n; i++)\n\t\tfact *= i;\n\treturn fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbse42tgu: /tmp/tmpbse42tgu.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // assert(n >= 1);\n\
    \    // return factorial(n);\n    long long factorial = 1;\n    for (int i = 0;\
    \ i < n; i++) {\n        factorial *= i;\n    }\n    return factorial;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2gno5jxv: /tmp/tmp2gno5jxv.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5ue0s04k: /tmp/tmp5ue0s04k.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp98pgfm8w: /tmp/tmp98pgfm8w.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    long res = special_factorial(n - 1) * n;\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpam7vl507: /tmp/tmpam7vl507.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 2; i <= n; ++i) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcxallstb: /tmp/tmpcxallstb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ans = 1L;\n   \
    \ for (long i = 1; i <= n; i++) {\n        ans *= i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvdogr1xu: /tmp/tmpvdogr1xu.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    if (n <= 1)\n        return n;\n    return special_factorial(n\
    \ - 1) * (n - 2);\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdf2dtd6f: /tmp/tmpdf2dtd6f.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact *= i;\n \
    \   }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp3u45xydo: /tmp/tmp3u45xydo.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) return 1;\n\
    \    long long fact = 1;\n    for (long i = 2; i <= n; i++)\n        fact *= i;\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmvnreec: /tmp/tmpxmvnreec.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp98249b52: /tmp/tmp98249b52.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) return 1;\n\
    \  long result = 1;\n  for (int i = 1; i < n; i++)\n    result = result * (i +\
    \ 1);\n  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpb427co3g: /tmp/tmpb427co3g.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long fac = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp0rvu4dgp: /tmp/tmp0rvu4dgp.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; ++i) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpeme8te2d: /tmp/tmpeme8te2d.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    if (n <= 1)\n        return factorial;\n    for (long i = 1; i <= n; i++)\
    \ {\n        factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp54vw_mhv: /tmp/tmp54vw_mhv.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long product = 1;\n\
    \    while (n) {\n        product *= n;\n        n--;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7maj9a47: /tmp/tmp7maj9a47.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // Check that the input\
    \ is an integer larger than 0\n  assert(n > 0);\n  // Initialize factorial to\
    \ 1\n  long fact = 1;\n  // Initialize factor to 1\n  long factor = 1;\n  // Loop\
    \ from i = 2 to n\n  for (int i = 2; i <= n; i++) {\n    // Multiply factorial\
    \ by i\n    fact *= i;\n    // Divide factorial by i\n    fact /= i;\n    // Set\
    \ factor to the factorial\n    factor = fact;\n  }\n  return factor;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqjb5lzj4: /tmp/tmpqjb5lzj4.cpp:31: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n\n \
    \   long result = 1;\n\n    // Base case:\n    if (n == 0)\n        return 0;\n\
    \n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpuj4gj1w_: /tmp/tmpuj4gj1w_.cpp:27: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long factorial = 1;\n    for (long i = 2; i <= n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp1f_guqg1: /tmp/tmp1f_guqg1.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 0);\n\tif\
    \ (n == 0)\n\t\treturn 1;\n\tlong result = 1;\n\tfor (long i = 1; i <= n; i++)\n\
    \t\tresult *= i;\n\treturn result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpbeo__a4l: /tmp/tmpbeo__a4l.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    if (n == 1) return 1;\n    long res = special_factorial(n - 1) * n;\n   \
    \ return res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfk36gk0i: /tmp/tmpfk36gk0i.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(int i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpn34w58m7: /tmp/tmpn34w58m7.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) return 1;\n\
    \  long ans = n;\n  for (long i = 1; i <= n; i++) ans *= i;\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpq534ac56: /tmp/tmpq534ac56.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) {\n    \
    \    return 1;\n    } else {\n        return n * special_factorial(n - 1);\n \
    \   }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_tmji__c: /tmp/tmp_tmji__c.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert (n > 0);\n\tif\
    \ (n == 0 || n == 1) return 1;\n\treturn (n * special_factorial(n - 1));\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpunlh1rdp: /tmp/tmpunlh1rdp.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if(n==0)\n    return 1;\n\
    \  return (n * special_factorial(n-1));\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpm603ruk2: /tmp/tmpm603ruk2.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1)\n    return\
    \ 1;\n  long result = special_factorial(n - 1);\n  result *= (n * n - 1) / 2;\n\
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmphwx1lzwd: /tmp/tmphwx1lzwd.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (int i = 1; i < n; i++) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgpynsn5v: /tmp/tmpgpynsn5v.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1L;\n  \
    \  while (n != 1L) {\n        fact = fact * n;\n        n = n - 1L;\n    }\n \
    \   return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n \
    \   assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpt8z9w8ke: /tmp/tmpt8z9w8ke.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (long i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpijnb_9uh: /tmp/tmpijnb_9uh.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Your code here\n\
    \    if(n==0)\n        return 1;\n    long ret = 1;\n    for(long i = 2; i < n;\
    \ i++){\n        ret*=i;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpn1gv3bev: /tmp/tmpn1gv3bev.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    long ans = 1;\n    for (long i = 2; i <= n; i++)\n        ans *= i;\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4wsckiar: /tmp/tmp4wsckiar.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   // Here we have the recursive definition\n    for (long i = 2; i <= n; i++)\
    \ {\n        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmhss7b7e: /tmp/tmpmhss7b7e.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n >= 0);\n  long\
    \ ans = 1;\n  for (long i = 2; i <= n; i++)\n    ans *= i;\n  return ans;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb8f8vt62: /tmp/tmpb8f8vt62.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    long fact = 1;\n    for (int i = 1; i <= n; i++)\n        fact\
    \ *= i;\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpo15oc82x: /tmp/tmpo15oc82x.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ans = 0;\n    while(n\
    \ > 1) {\n        ans = (n*(n-1))*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(2*n-7)/(2*n-1)*n/4;\n\
    \        n = n/4;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqx5q3zvm: /tmp/tmpqx5q3zvm.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n <= 1)\n\t\treturn\
    \ 1;\n\telse\n\t\treturn n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpummhjb6l: /tmp/tmpummhjb6l.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1)\n      \
    \  return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpa3mj8hao: /tmp/tmpa3mj8hao.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long ans = 0;\n    for\
    \ (int i = 1; i < n; i++) {\n        ans *= i;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy14dvxh4: /tmp/tmpy14dvxh4.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    long fact = 1, i;\n    for (i = 1; i <= n; i++)\n        fact *= i;\n   \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp2wkos8xq: /tmp/tmp2wkos8xq.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 1);\n  \
    \  // The value of the factorial can be obtained as:\n    // n! = n * n-1 * n-2\
    \ * ... * 1\n    // This can be rewritten in a for loop:\n    // n! = (n * n-1)\
    \ * n-2 * ... * 1\n    // Using a for loop, we can rewrite the factorial as:\n\
    \    // n! = (n*(n-1))(n-2)*...*1\n    // This can be written as:\n    // n! =\
    \ n * factorial(n-1)\n    // To solve this problem, we can rewrite the factorial\
    \ in the form of:\n    // n! = n * n-1 * n-2 * ... * 1\n    // To obtain the factorial,\
    \ we only need to multiply (n-1)! with n!\n    // Since the factorial is defined\
    \ as n! = (n*(n-1))(n-2)*...*1, we can obtain the factorial\n    // of n with\
    \ n! = n * n-1 * n-2 * ... * 1 as:\n    // n! = n * n!\n    // To solve the previous\
    \ problem, we only need to multiply (n-1)! with n!\n    // Since the factorial\
    \ is defined as n! = (n*(n-1))(n-2)*...*1, we can obtain the factorial\n    //\
    \ of n with n! = n * n! as n! = n * n!\n    // Now that we know how to rewrite\
    \ factorials in the form of n! = n * n!, we only need to multiply n!\n    // with\
    \ n!.\n    // The previous equation becomes:\n    // n! = n * n!\n    long fact\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnihrpjmn: /tmp/tmpnihrpjmn.cpp:42: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 0) return 1;\n\
    \    long result = 1;\n    long i = 1;\n    while (i <= n) result *= i++;\n  \
    \  return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpzjjllwd8: /tmp/tmpzjjllwd8.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if(n==0)\n    return 1;\n\
    \  else\n    return n * (special_factorial(n-1));\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2is0awti: /tmp/tmp2is0awti.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) {\n    \
    \    return 1;\n    } else {\n        return n * special_factorial(n - 1);\n \
    \   }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpeje604y0: /tmp/tmpeje604y0.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ while (n>1) {\n        fact *= (n-1);\n        n--;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmps2zrxs6l: /tmp/tmps2zrxs6l.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long factorial = 1;\n    for (long i = 1; i < n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpd40fn3ag: /tmp/tmpd40fn3ag.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpuz2xidti: /tmp/tmpuz2xidti.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// your code here\n\t\
    assert(n > 0);\n\tif (n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn (n * special_factorial(n\
    \ - 1));\n\t}\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcn1aic5e: /tmp/tmpcn1aic5e.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long fact1 = 1;\n\n    long limit = 0;\n    limit = n;\n\n    while(limit>1){\n\
    \        fact*= limit--;\n        fact1*= limit--;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfzgc21ui: /tmp/tmpfzgc21ui.cpp:26: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n > 0);\n  if (n\
    \ == 1) return 1;\n  long factorial = 1;\n  for (long i = 1; i <= n; i++) {\n\
    \    factorial *= i;\n  }\n  return factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8y6zlxys: /tmp/tmp8y6zlxys.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  if (n == 0) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpw9wjddco: /tmp/tmpw9wjddco.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  if (n == 0)\n        return 1;\n    else if (n == 1)\n        return 2;\n \
    \   else if (n == 2)\n        return 6;\n    else\n        return special_factorial(n\
    \ - 1) * n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5zxkk59t: /tmp/tmp5zxkk59t.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        res *= i;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7u__snhm: /tmp/tmp7u__snhm.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1) {\n    \
    \    return 1;\n    } else {\n        long res = special_factorial(n - 1);\n \
    \       return res*res;\n    }\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpzn1s60eh: /tmp/tmpzn1s60eh.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n\n \
    \   // Simplify the equation with n!\n    long f = 1L;\n    while (n > 1) {\n\
    \        n--;\n        f *= n;\n    }\n\n    return f;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqf2pqu3x: /tmp/tmpqf2pqu3x.cpp:25: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long fact = 1;\n    for (long i = 2; i <= n; i++) {\n      \
    \  fact *= i;\n    }\n    return fact;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5mhbfhlf: /tmp/tmp5mhbfhlf.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i < n; i++)\n        fact *= i;\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkccdx9p7: /tmp/tmpkccdx9p7.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 0; i < n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi067hxgh: /tmp/tmpi067hxgh.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    return n*special_factorial(n-1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpxhzau0pe: /tmp/tmpxhzau0pe.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n == 0 || n == 1)\n\
    \t\treturn 1;\n\telse\n\t\treturn n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpejybvszd: /tmp/tmpejybvszd.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 1);\n  \
    \  long factorial = 1;\n    for (int i = 1; i < n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp_yxbfh87: /tmp/tmp_yxbfh87.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2)\n       \
    \ return 1;\n    else\n        return n * special_factorial(n - 1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9asi1_qa: /tmp/tmp9asi1_qa.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n <= 1) {\n    return\
    \ 1;\n  } else {\n    return (n * special_factorial(n - 1));\n  }\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmy548w7d: /tmp/tmpmy548w7d.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    else return (n * (special_factorial(n - 1)))\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuxg9qpbc.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpuxg9qpbc.cpp:14:49: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   14 |     else return (n * (special_factorial(n - 1)))\n\
    \      |                                                 ^\n      |          \
    \                                       ;\n   15 | }\n      | ~              \
    \                                  \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        res = res * i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvna3hbf9: /tmp/tmpvna3hbf9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2) return 1;\n\
    \    long result = 1;\n    while (n) {\n        result *= n;\n        n--;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmprn9xj06a: /tmp/tmprn9xj06a.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long total = 1;\n  \
    \  long cur = 1;\n    while (n > 1) {\n        total += cur;\n        cur *= n;\n\
    \        n--;\n    }\n    return total;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpylu4mija: /tmp/tmpylu4mija.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  // Initialize answer by 1\n    long answer = 1;\n    // Initialize factorial\
    \ accumulator by 1\n    long accumulator = 1;\n    // Iterate through the n times\
    \ to calculate factorial\n    for (long i = 1; i <= n; i++) {\n        // Calculate\
    \ the factorial of current number\n        factorial *= i;\n        // Update\
    \ accumulator by current factorial\n        accumulator += factorial;\n    }\n\
    \    // Return the factorial answer\n    return accumulator;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjai8zy72.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpjai8zy72.cpp:20:9: error: \u2018factorial\u2019 was not\
    \ declared in this scope\n   20 |         factorial *= i;\n      |         ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n > 0);\n   \
    \ long factorial = 1;\n    long i = 1;\n    while(i < n) {\n        factorial\
    \ *= i++;\n    }\n    return factorial;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpr_3ja5dj: /tmp/tmpr_3ja5dj.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long total = 1;\n  for\
    \ (int i = 1; i <= n; i++) {\n    total *= i;\n  }\n  return total;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7u07z71t: /tmp/tmp7u07z71t.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Your code goes here\n\
    \tif(n<=0)\n\t\treturn 1;\n\treturn n*special_factorial(n-1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpuu8mm_26: /tmp/tmpuu8mm_26.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  int fact = 1;\n  while\
    \ (n > 1) {\n    fact *= n;\n    n--;\n  }\n  return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5vqti555: /tmp/tmp5vqti555.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1L;\n  \
    \  while (n > 1L) {\n        fact *= n--;\n    }\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3ovf9f3h: /tmp/tmp3ovf9f3h.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    int factorial = 1;\n\
    \    for (int i = 1; i < n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpd77jvw1d: /tmp/tmpd77jvw1d.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  long result = 0;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpga0vvsa3: /tmp/tmpga0vvsa3.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long factorial = 1;\n    long a = n;\n    while (a != 1) {\n        factorial\
    \ = factorial * a;\n        a--;\n    }\n    return factorial;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnz4llwlf: /tmp/tmpnz4llwlf.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   long temp = n;\n    while(temp > 0) {\n        result *= temp;\n        temp--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp2mv_bk22: /tmp/tmp2mv_bk22.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 0);\n\t//\
    \ Return the factorial if n is 1 or 0.\n\tif (n == 0 || n == 1)\n\t\treturn 1;\n\
    \t// Otherwise, compute the factorial recursively.\n\treturn n * special_factorial(n\
    \ - 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8xxigrsd: /tmp/tmp8xxigrsd.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  long fact = 1;\n  for\
    \ (int i = 1; i < n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpw3v1vwtm: /tmp/tmpw3v1vwtm.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   while (n > 1) {\n        result *= n;\n        n--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptanntl8b: /tmp/tmptanntl8b.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3uhm_0ou: /tmp/tmp3uhm_0ou.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n < 2) {\n     \
    \   return 1;\n    }\n    long res = 1;\n    for (long i = 2; i <= n; ++i) {\n\
    \        res = res * i;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpsrp20klw: /tmp/tmpsrp20klw.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // We need to include\
    \ <bits/stdc++.h>\n    // We need to include <assert.h>\n    // We need to include\
    \ <iostream>\n    // We need to include <stdlib.h>\n    // We need to include\
    \ <stdio.h>\n    // We need to include <math.h>\n    // We need to include <time.h>\n\
    \    // We need to include <string.h>\n    // We need to include <algorithm>\n\
    \    // We need to include <vector>\n\n    // We need to include <chrono>\n  \
    \  // We need to include <random>\n\n    std::vector<long> factorials;\n    factorials.push_back(n);\n\
    \    for (long i = 2; i <= n; ++i)\n        factorials.push_back(i * factorials[i\
    \ - 1]);\n\n    return factorials[n - 1];\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4m233q1s: /tmp/tmp4m233q1s.cpp:35: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif (n < 1)\n\t\treturn\
    \ 0;\n\tlong res = 1;\n\tfor (long i = 1; i <= n; i++)\n\t\tres *= i;\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsjoib7l4: /tmp/tmpsjoib7l4.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  // You can define this\
    \ function\n  // and put all your code inside\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp245lwe6t: /tmp/tmp245lwe6t.cpp:17: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long product = 1;\n\
    \    for(long i=1;i<=n;i++) {\n        product *= i;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4998jgao: /tmp/tmp4998jgao.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long tmp;\n    while (n) {\n        tmp = fact;\n        fact = fact * (n -\
    \ 1);\n        fact = fact * tmp;\n        n--;\n    }\n    return fact;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpim4kxkgj: /tmp/tmpim4kxkgj.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    long result = 1;\n    for(int i = 0; i<n; i++)\n        result = result *\
    \ i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmprzv4rwyp: /tmp/tmprzv4rwyp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact_value = 1;\n\
    \    for (int i = 2; i <= n; i++) {\n        fact_value = fact_value * i;\n  \
    \  }\n    return fact_value;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp__wbmiz2: /tmp/tmp__wbmiz2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long f = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        f *= i;\n    }\n    return f;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfzp5f_wp: /tmp/tmpfzp5f_wp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n < 0)\n        throw\
    \ std::domain_error(\"Brazilian Factorial function only works with positive integers\"\
    );\n    // the special factorial is calculated as follows using the formula above:\n\
    \    long factorial = 1;\n    for(long i = 2; i <= n; i++)\n        factorial\
    \ *= i;\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_ss1617: /tmp/tmpk_ss1617.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // If n is 0, return\
    \ the number 0.\n    if (n == 0) {\n        return 0;\n    }\n    // If the given\
    \ number is negative, return 0.\n    if (n < 0)\n        return 0;\n    // The\
    \ actual function that will return the factorial of n will start by\n    // calculating\
    \ the factorial of n-1 and n-2 and so on.\n    long factorial = n;\n    for (long\
    \ i = 2; i <= n; i++) {\n        factorial *= i;\n    }\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmph6e_5ynv: /tmp/tmph6e_5ynv.cpp:29: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  assert(n >= 1);\n  if\
    \ (n == 1)\n    return 1;\n  else\n    return n * special_factorial(n - 1);\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2hku25sy: /tmp/tmp2hku25sy.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    long temp = n;\n    while (temp > 1) {\n        factorial *= temp--;\n  \
    \  }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpyolvrgc5: /tmp/tmpyolvrgc5.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 1);\n\tlong\
    \ fact = 1;\n\twhile (n > 1) {\n\t\tfact = fact * (n - 1);\n\t\tn = n - 1;\n\t\
    }\n\treturn fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpewr3i6k3: /tmp/tmpewr3i6k3.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    // Write your code here\n\
    \    return 1;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp17m7400c: /tmp/tmp17m7400c.cpp:17: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long m = n;\n    for (int i = 1; i <=n; i++) {\n        fact = fact * i;\n \
    \   }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpk9dxle1_: /tmp/tmpk9dxle1_.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1) return 1;\n\
    \    return n * special_factorial(n - 1);\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpm1udnwfm: /tmp/tmpm1udnwfm.cpp:17: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    //\
    \ We need to repeat the previous operation (n-2)! n times in order to get\n  \
    \  // the factorial of a bigger number\n    for(long k = 1; k <= n; k++) {\n \
    \       res *= k;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9b058xrc: /tmp/tmp9b058xrc.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 0 || n == 1)\
    \ {\n    return 1;\n  } else {\n    return (n * special_factorial(n-1)) * n;\n\
    \  }\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmppg94m2pp: /tmp/tmppg94m2pp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\t// Write your code here\n\
    \tlong f=0, tmp=1, i=1;\n\twhile(i<=n){\n\t\tf=tmp*i;\n\t\ttmp=f;\n\t\ti++;\n\t\
    }\n\treturn f;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp2vmepjri: /tmp/tmp2vmepjri.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    else\n        return n*special_factorial(n-1);\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8z2xbep6: /tmp/tmp8z2xbep6.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tassert(n >= 0);\n\tlong\
    \ fact = 1;\n\tfor(int i = 1; i <= n; ++i) {\n\t\tfact *= i;\n\t}\n\treturn fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpms60y7th: /tmp/tmpms60y7th.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 1;\n \
    \   for (long i = 2; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpq4cdyzr1: /tmp/tmpq4cdyzr1.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long result = 0;\n \
    \   while (n>0) {\n        long tmp = 1;\n        while (n>1) {\n            tmp\
    \ *= n--;\n        }\n        result +=tmp;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if(n <= 1) return 1;\n\
    \    long res = special_factorial(n - 1) * n;\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_wo66kkc: /tmp/tmp_wo66kkc.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 2; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpl380t_q_: /tmp/tmpl380t_q_.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    while\
    \ (n > 1){\n        res *= n;\n        n--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmphsklc6l7: /tmp/tmphsklc6l7.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    assert(n >= 0);\n  \
    \  if (n == 1)\n        return 1;\n    long result = 1;\n    for (int i = 2; i\
    \ <= n; i++)\n        result *= i;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwemf4evu: /tmp/tmpwemf4evu.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long last_factorial = 1;\n    for(long i = 1; i < n; i++) {\n        last_factorial\
    \ *= i;\n        fact *= last_factorial;\n    }\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwjwqyjt4: /tmp/tmpwjwqyjt4.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n  if (n == 0)\n    return\
    \ 1;\n  return (n * special_factorial(n - 1));\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmplc6npa_9: /tmp/tmplc6npa_9.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0c78zica: /tmp/tmp0c78zica.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tlong fact = 1;\n\tfor\
    \ (long i = 1; i <= n; i++) {\n\t\tfact *= i;\n\t}\n\treturn fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxulv44ht: /tmp/tmpxulv44ht.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long res = 1;\n    for\
    \ (int i = 1; i <= n; ++i) {\n        res = res * i;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7qxfsqs8: /tmp/tmp7qxfsqs8.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 1;\n\tif(n == 2) return 2;\n\tif(n == 3) return 6;\n\tif(n\
    \ == 4) return 24;\n\tif(n == 5) return 120;\n\tif(n == 6) return 720;\n\tif(n\
    \ == 7) return 5040;\n\tif(n == 8) return 40320;\n\tif(n == 9) return 362880;\n\
    \tif(n == 10) return 3628800; // factorial of 10\n\treturn 0;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcqmogd3n: /tmp/tmpcqmogd3n.cpp:27: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
