name: HumanEval_88_sort_array
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    auto first = [&]() {\n        return array.front();\n    };\n    auto\
    \ last = [&]() {\n        return array.back();\n    };\n    auto sum = [&]() {\n\
    \        long long sum = 0;\n        for (long long i : array) {\n           \
    \ sum += i;\n        }\n        return sum;\n    };\n\n    if (sum() % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end(), [&](long long a, long long\
    \ b) { return a > b; });\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ [&](long long a, long long b) { return b > a; });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5cp5236a: /tmp/tmp5cp5236a.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    auto mid = sum / 2;\n    auto leftSum = sum - mid;\n    auto rightSum = sum\
    \ + mid;\n    if (leftSum == mid) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else if (rightSum == mid) {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n\n    if (leftSum < rightSum)\
    \ {\n        std::sort(array.begin(), array.end());\n        return array;\n \
    \   } else {\n        std::sort(array.rbegin(), array.rend());\n        return\
    \ array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7aoplk6l: /tmp/tmp7aoplk6l.cpp:42: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    //sort array in ascending order\n    if (array.size() < 2)\n        return\
    \ array;\n    long first = array[0];\n    long last = array[array.size()-1];\n\
    \    //check sum of the first and last element\n    long sumFirst = first + last;\n\
    \    long sumLast = last + first;\n    if (sumFirst % 2 == 0) {\n        //sum\
    \ is even, sort array in descending order\n        std::reverse(array.begin(),\
    \ array.end());\n    } else {\n        //sum is odd, sort array in ascending order\n\
    \        std::sort(array.begin(), array.end());\n    }\n    return array;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp22kugmca: /tmp/tmp22kugmca.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // Your code here\n  std::sort(array.begin(), array.end(), [](const long\
    \ &a, const long &b) {\n    return a + b < 0;\n  });\n  std::reverse(array.begin(),\
    \ array.end());\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjxovzzu0: /tmp/tmpjxovzzu0.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() == 0 || array.size() == 1 || array.size() == 2);\n\
    \    if (array.size() == 0 || array.size() == 1) {\n        return array;\n  \
    \  }\n    std::vector<long> copy{ array.begin(), array.end() };\n    std::vector<long>\
    \ result(array.size());\n    int firstSum = copy[0]; // first index value\n  \
    \  int lastSum = copy[copy.size() - 1]; // last index value\n    int firstIndex\
    \ = 0;\n    int lastIndex = 0;\n    int sum = 0;\n    long currentSum = firstSum;\
    \ // current sum value\n    bool checkSum = false;\n    while (checkSum == false)\
    \ {\n        sum = currentSum;\n        for (int i = firstIndex; i <= lastIndex;\
    \ i++) {\n            sum += copy[i];\n        }\n        if (sum % 2 == 0) {\n\
    \            checkSum = true;\n        }\n        else {\n            checkSum\
    \ = false;\n        }\n        if (sum != lastSum) {\n            firstSum = sum;\n\
    \            firstIndex = firstSum;\n            lastSum = sum;\n            lastIndex\
    \ = lastSum;\n        }\n    }\n    for (long i = 0; i < copy.size(); i++) {\n\
    \        if (sum > copy.size()) {\n            result.push_back(copy[copy.size()\
    \ - 1]);\n        }\n        else {\n            result.push_back(copy[i]);\n\
    \        }\n    }\n    long lastIndex = copy.size() - 1;\n    long firstIndex\
    \ = result.size() - 1;\n    long lastSum = result[lastIndex];\n    long firstSum\
    \ = result[firstIndex];\n    if (firstSum - lastSum == 1) {\n        for (int\
    \ i = 0; i < copy.size(); i++) {\n            copy[i] = result[copy.size() - 1\
    \ - i];\n        }\n        return copy;\n    }\n    if (firstSum - lastSum ==\
    \ -1) {\n        for (int i = 0; i < copy.size(); i++) {\n            copy[i]\
    \ = result[copy.size() - 1 - i];\n        }\n        return copy;\n    }\n   \
    \ for (int i = lastIndex; i >= 0; i--) {\n        result[i] = result[result.size()\
    \ - 1 - i];\n    }\n    for (int i = firstIndex; i >= 0; i--) {\n        result[i]\
    \ = result[result.size() - 1 - i];\n    }\n    return copy;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaocexl2d.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaocexl2d.cpp:53:10: error: conflicting declaration \u2018\
    long int lastIndex\u2019\n   53 |     long lastIndex = copy.size() - 1;\n    \
    \  |          ^~~~~~~~~\n/tmp/tmpaocexl2d.cpp:23:9: note: previous declaration\
    \ as \u2018int lastIndex\u2019\n   23 |     int lastIndex = 0;\n      |      \
    \   ^~~~~~~~~\n/tmp/tmpaocexl2d.cpp:54:10: error: conflicting declaration \u2018\
    long int firstIndex\u2019\n   54 |     long firstIndex = result.size() - 1;\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpaocexl2d.cpp:22:9: note: previous declaration\
    \ as \u2018int firstIndex\u2019\n   22 |     int firstIndex = 0;\n      |    \
    \     ^~~~~~~~~~\n/tmp/tmpaocexl2d.cpp:55:10: error: conflicting declaration \u2018\
    long int lastSum\u2019\n   55 |     long lastSum = result[lastIndex];\n      |\
    \          ^~~~~~~\n/tmp/tmpaocexl2d.cpp:21:9: note: previous declaration as \u2018\
    int lastSum\u2019\n   21 |     int lastSum = copy[copy.size() - 1]; // last index\
    \ value\n      |         ^~~~~~~\n/tmp/tmpaocexl2d.cpp:56:10: error: conflicting\
    \ declaration \u2018long int firstSum\u2019\n   56 |     long firstSum = result[firstIndex];\n\
    \      |          ^~~~~~~~\n/tmp/tmpaocexl2d.cpp:20:9: note: previous declaration\
    \ as \u2018int firstSum\u2019\n   20 |     int firstSum = copy[0]; // first index\
    \ value\n      |         ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here.\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp82ovamnh: /tmp/tmp82ovamnh.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tlong sum = 0;\n\tstd::vector<long> result;\n\tfor (auto it: array) {\n\t\
    \tsum = sum + it;\n\t\tif (sum % 2 != 0) {\n\t\t\tresult.push_back(it);\n\t\t\
    }\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpe6lx5ktu: /tmp/tmpe6lx5ktu.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if (array.empty()) return {};\n    long long sum = (array[0] + array[array.size()\
    \ - 1]);\n    // cout << \"sum: \" << sum << endl;\n    if (sum % 2 == 1) {\n\
    \        return std::move(array);\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) { return b - a; });\n        return\
    \ std::move(array);\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9jhk87et: /tmp/tmp9jhk87et.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int flag = 1;\n    std::vector<long> v1(array.begin(), array.end());\n\
    \    std::vector<long> v2(array.begin(), array.end());\n    for (int i = 0; i\
    \ < v1.size(); i++) {\n        int first = v1[i];\n        int last = v2[(v2.size()\
    \ - 1) - i];\n        if (first + last == 0) {\n            v1[i] = 0;\n     \
    \       v2[i] = 0;\n        } else {\n            if (flag % 2 == 1) {\n     \
    \           if (last > first) {\n                    v2[i] = last;\n         \
    \       } else {\n                    v2[i] = first;\n                }\n    \
    \        } else {\n                if (last < first) {\n                    v1[i]\
    \ = last;\n                } else {\n                    v1[i] = first;\n    \
    \            }\n            }\n        }\n    }\n    return v1;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpovv0ez2r: /tmp/tmpovv0ez2r.cpp:45: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    long long last_index = 0;\n    for (long long\
    \ i = 1; i < array.size(); i++) {\n        sum += array[i];\n        if (sum %\
    \ 2 != 0) {\n            last_index = i;\n        }\n    }\n    std::vector<long>\
    \ res = array;\n    res.erase(res.begin() + last_index + 1);\n    return res;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tstd::vector<long> result;\n\tlong current_sum = array[0];\n\tlong last_element\
    \ = array[array.size() - 1];\n\tlong temp_sum = 0;\n\tfor (long index = 1; index\
    \ < array.size(); index++) {\n\t\ttemp_sum += array[index];\n\t\tif (temp_sum\
    \ < current_sum) {\n\t\t\tresult.push_back(array[index]);\n\t\t\tcurrent_sum =\
    \ temp_sum;\n\t\t} else if (temp_sum > current_sum) {\n\t\t\twhile (temp_sum >\
    \ current_sum) {\n\t\t\t\tresult.push_back(last_element);\n\t\t\t\tcurrent_sum\
    \ -= last_element;\n\t\t\t}\n\t\t\tresult.push_back(array[index]);\n\t\t\tcurrent_sum\
    \ = temp_sum;\n\t\t} else {\n\t\t\twhile (temp_sum < current_sum) {\n\t\t\t\t\
    result.push_back(array[index]);\n\t\t\t\tcurrent_sum += array[index];\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long last_index = 0;\n\
    \    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n    \
    \    last_index = i;\n    }\n    assert(sum % 2 == 0);\n    if (sum % 2 == 1)\
    \ {\n        std::reverse(array.begin(), array.end());\n    }\n\n    long last_value\
    \ = array[last_index];\n    long last_index_value = array[last_index - 1];\n \
    \   for (long i = last_index; i < array.size() - 1; i++) {\n        long value\
    \ = array[i];\n        if (last_index_value + last_value == value) {\n       \
    \     if (sum % 2 == 0) {\n                std::reverse(array.begin() + i, array.begin()\
    \ + i + 1);\n            }\n        } else {\n            std::reverse(array.begin()\
    \ + i, array.begin() + i + 2);\n        }\n        last_index_value = last_value;\n\
    \        last_value = value;\n    }\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::sort(array.begin(), array.end());\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_6dy2edo: /tmp/tmp_6dy2edo.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() != 0 && \"empty array\");\n    std::vector<long>\
    \ sorted_vec(array.size());\n    long sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum = array[i];\n        for (int j = i; j < array.size(); j++)\
    \ {\n            sum += array[j];\n            if (sum % 2 == 0)\n           \
    \     std::swap(array[i], array[j]);\n        }\n        sorted_vec[i] = sum;\n\
    \    }\n    return sorted_vec;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp53zpylt6: /tmp/tmp53zpylt6.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() != 0 && \"empty array\"' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    std::vector<long> new_array;\n    int mid\
    \ = array.size() / 2;\n    int left_sum = array[0] + array[mid];\n    int right_sum\
    \ = array[mid] + array[0];\n    if (left_sum % 2 == 1) {\n        new_array.push_back(array[0]);\n\
    \        std::swap(array[0], array[mid]);\n    }\n    if (right_sum % 2 == 1)\
    \ {\n        new_array.push_back(array[mid]);\n        std::swap(array[mid], array[0]);\n\
    \    }\n    std::vector<long> temp = sort_array(array);\n    for (int i = 1; i\
    \ < mid; i++) {\n        int left_index = i * (mid);\n        int right_index\
    \ = left_index + mid;\n        int left_sum = array[left_index] + array[left_index\
    \ + 1];\n        int right_sum = array[right_index] + array[right_index + 1];\n\
    \        if (left_sum % 2 == 1) {\n            std::swap(array[left_index], array[left_index\
    \ + 1]);\n            std::swap(array[right_index], array[right_index + 1]);\n\
    \        }\n        if (right_sum % 2 == 1) {\n            std::swap(array[left_index],\
    \ array[left_index + 1]);\n            std::swap(array[right_index], array[right_index\
    \ + 1]);\n        }\n    }\n    for (int i = 0; i < mid; i++) {\n        new_array.push_back(temp[i]);\n\
    \    }\n    for (int i = mid; i < array.size(); i++) {\n        new_array.push_back(array[i]);\n\
    \    }\n    return new_array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    long sum = 0;\n    for (auto i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::less<long>());\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4tpp_b5l: /tmp/tmp4tpp_b5l.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() != 0);\n    int size = array.size();\n    std::vector<long>\
    \ outputArray(size);\n    for (int i = 0; i < size; i++) {\n        long s = array[i];\n\
    \        for (int j = i - 1; j >= 0; j--) {\n            long e = array[j];\n\
    \            if (s <= e) {\n                long temp = s;\n                s\
    \ = e;\n                e = temp;\n            }\n            if (s - e > 0) break;\n\
    \        }\n        outputArray[i] = s;\n    }\n    std::sort(outputArray.begin(),\
    \ outputArray.end());\n    return outputArray;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppjl9ovof: /tmp/tmppjl9ovof.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    if (array.size() % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end(), [&array](int a, int b) -> bool {\n            if (a + b < 0) {\n\
    \                return false;\n            }\n            auto sum = a * b; //\
    \ Sum all the products of first and last indices.\n            auto flag = (a\
    \ * 2 + b) % 2 == 1 ? true : false;\n            return sum < array[array.size()\
    \ - 1] || sum > array[array.size() - 2];\n        });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [&array](int a, int b) -> bool {\n            if (a + b < 0) {\n\
    \                return false;\n            }\n            auto sum = a * b; //\
    \ Sum all the products of first and last indices.\n            auto flag = (a\
    \ * 2 + b) % 2 == 0 ? true : false;\n            return sum > array[array.size()\
    \ - 1] || sum < array[array.size() - 2];\n        });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::vector<long> copy = array;\n  std::sort(copy.begin(), copy.end());\n\
    \  return copy;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_bsme24l: /tmp/tmp_bsme24l.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpok7oaaeb: /tmp/tmpok7oaaeb.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> arr;\n    for (size_t i = 0; i < array.size(); i++)\
    \ {\n        arr.push_back(array[i]);\n    }\n    std::sort(arr.begin(), arr.end());\n\
    \    // find sum of two elements in the array and determine if it is odd or even\n\
    \    long sum = 0;\n    for (size_t i = 0; i < array.size(); i++) {\n        sum\
    \ += arr[i];\n    }\n    if (sum & 1) {\n        // odd, sort descending\n   \
    \     std::reverse(arr.begin(), arr.end());\n    } else {\n        // even, sort\
    \ ascending\n        std::reverse(arr.begin(), arr.end());\n    }\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpnqfj4xyg: /tmp/tmpnqfj4xyg.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here.\n    int sum = 0;\n    for (long int x : array)\
    \ {\n        sum = sum + x;\n    }\n    for (int i = 0; i < array.size(); i++)\
    \ {\n        array[i] = array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp93ywm7b3: /tmp/tmp93ywm7b3.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    if (n == 0) return array;\n\n    std::vector<long>\
    \ a(n);\n    long ans = 0;\n\n    long sum = 0;\n    int pos = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += array[i];\n        if (sum % 2 == 0) ans\
    \ += array[i];\n        else ans -= array[i];\n        a[pos] = array[i];\n  \
    \      pos = i + 1;\n    }\n\n    if (ans == 0) {\n        if (array[0] <= array[n\
    \ - 1]) {\n            std::swap(array[0], array[n - 1]);\n        }\n    } else\
    \ {\n        if (ans % 2 == 0) std::reverse(std::begin(a), std::end(a));\n   \
    \ }\n    return a;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3bvygy23: /tmp/tmp3bvygy23.cpp:43: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    sort(array.begin(), array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyn_5an35: /tmp/tmpyn_5an35.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long value : array)\n        sum += value;\n\
    \    if (sum % 2 == 0)\n        std::sort(array.begin(), array.end(), [](long\
    \ a, long b) {\n            return a > b;\n        });\n    else\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) {\n            return a < b;\n        });\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyoigh9ut: /tmp/tmpyoigh9ut.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\t// write your code in here\n\tlong sum=array[0]+array[array.size()-1];\n\
    \tstd::vector<long> result;\n\tlong first=array[0];\n\tlong last=array[array.size()-1];\n\
    \tif(sum%2==1){\n\t\tresult=array;\n\t}else{\n\t\tstd::reverse(array.begin(),array.end());\n\
    \t\tresult=array;\n\t}\n\tfor(int i=0;i<result.size();i++){\n\t\tif((first+last)%2==0){\n\
    \t\t\tlong temp=result[i]+result[i+1];\n\t\t\tresult[i]=temp;\n\t\t}\n\t\tif((first+last)%2==1){\n\
    \t\t\tlong temp=result[i]+result[i-1];\n\t\t\tresult[i]=temp;\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0; // Sum first and last element\n    for (auto it =\
    \ array.rbegin(); it != array.rend(); it++) { // Sum the rest elements\n     \
    \   sum += *it;\n    }\n\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [&sum](long long i1, long long i2) { return sum > i1 && sum < i2;\
    \ });\n    } else {\n        std::sort(array.rbegin(), array.rend(), [&sum](long\
    \ long i1, long long i2) { return sum > i1 && sum < i2; });\n    }\n\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphp7xxqak: /tmp/tmphp7xxqak.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int size = array.size();\n    for (int i = 0; i < size - 1; i++) {\n\
    \        int s = array[i] - array[i + 1];\n        if (s % 2 == 0) {\n       \
    \     std::swap(array[i + 1], array[i]);\n        }\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpeis8vh31: /tmp/tmpeis8vh31.cpp:27: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  assert(array.size() > 0);\n  std::vector<long> new_array(array.size());\n\
    \  // sum\n  long s = 0, k = 0;\n  for (int i = 0; i < array.size(); i++) {\n\
    \    s += array[i];\n    if (s > 0) {\n      new_array[k] = s;\n      k++;\n \
    \   }\n  }\n  if (k != new_array.size()) {\n    // sort\n    std::sort(new_array.begin(),\
    \ new_array.end(), [](long a, long b) -> bool {\n      return a > b;\n    });\n\
    \  }\n  return new_array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsna6fq8n: /tmp/tmpsna6fq8n.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  if (array.empty()) {\n    return array;\n  }\n  long long sum = 0;\n  for\
    \ (auto i : array) {\n    sum += i;\n  }\n  if (sum % 2) {\n    std::sort(array.begin(),\
    \ array.end());\n  } else {\n    std::sort(array.rbegin(), array.rend());\n  }\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxvw888zc: /tmp/tmpxvw888zc.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdsml8fdb: /tmp/tmpdsml8fdb.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // Write your code here\n  std::vector<long> sortedArray;\n  int sum =\
    \ 0;\n  for(long i = 0; i < array.size(); i++) {\n    sum = sum + array[i];\n\
    \    sortedArray.push_back(sum);\n  }\n  std::sort(sortedArray.begin(), sortedArray.end());\n\
    \  if(sum % 2 == 0){\n    std::reverse(sortedArray.begin(), sortedArray.end());\n\
    \  }\n  return sortedArray;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpc29j1y2e: /tmp/tmpc29j1y2e.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tauto sum = array.back() + array.front();\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), [](const long a, const long b) {\n\t\t\treturn a > b;\n\t\t});\n\
    \t\treturn array;\n\t} else {\n\t\tstd::sort(array.rbegin(), array.rend(), [](const\
    \ long a, const long b) {\n\t\t\treturn a < b;\n\t\t});\n\t\treturn array;\n\t\
    }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code in here\n    long last_value = 0;\n    long cur_sum\
    \ = 0;\n    std::vector<long> v;\n    for(long i = 0; i < array.size(); i++) {\n\
    \        cur_sum += array[i];\n        if(cur_sum & 1) {\n            v.push_back(array[i]);\n\
    \            last_value = array[i];\n        } else {\n            v.push_back(last_value);\n\
    \            v.push_back(array[i]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0ppvmi2u: /tmp/tmp0ppvmi2u.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  long s = 0;\n  for (auto i : array)\n    s += i;\n  std::vector<long> v;\n\
    \  if (s % 2 != 0)\n    for (auto i : array)\n      v.push_back(i);\n  else\n\
    \    for (auto i : array)\n      v.push_back(i * -1);\n  return v;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdpdy9hem: /tmp/tmpdpdy9hem.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::sort(array.begin(), array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpib6fygvt: /tmp/tmpib6fygvt.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    if(array.size() == 0)\n        return array;\n    if(array.size()\
    \ <= 1)\n        return array;\n    long sum = 0;\n    for(int i = 0; i < array.size();\
    \ i++) {\n        sum = sum + array[i];\n    }\n    if(sum % 2 != 0)\n       \
    \ std::swap(array[0], array[array.size() - 1]);\n    for(int i = 0; i < array.size();\
    \ i++)\n        array[i] -= array[i - 1];\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpzbxy8frs: /tmp/tmpzbxy8frs.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() != 0);\n    std::vector<long> result;\n    if (array.size()\
    \ % 2 == 0) {\n        // odd, push all odd elements to result\n        std::copy(std::next(array.begin(),\
    \ array.size() / 2), array.end(), std::back_inserter(result));\n        // sort\
    \ result in descending order\n        std::sort(result.begin(), result.end(),\
    \ std::greater<long>());\n    } else {\n        // even, push all even elements\
    \ to result\n        std::copy(std::next(array.begin(), array.size() / 2 + 1),\
    \ array.end(), std::back_inserter(result));\n        // sort result in ascending\
    \ order\n        std::sort(result.begin(), result.end(), std::less<long>());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjq4o_beq: /tmp/tmpjq4o_beq.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() > 0);\n    assert(array.size() % 2 == 0);\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \        result.push_back(i);\n    }\n    if (sum % 2 == 1) {\n        for (long\
    \ i = sum; i > 0; i -= 2) {\n            result.push_back(i / 2);\n        }\n\
    \    } else {\n        for (long i = sum; i > 0; i -= 2) {\n            result.push_back(i\
    \ / 2 + 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxwgd4193: /tmp/tmpxwgd4193.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long int sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    long long int t = sum / 2;\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        std::vector<long> new_arr(array.size());\n        for\
    \ (auto i : array) {\n            if (i <= t) {\n                new_arr.push_back(i);\n\
    \            }\n        }\n        return new_arr;\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [&sum, &t](long long int i, long long int j) {\n            if\
    \ (i <= t) {\n                return true;\n            }\n            return\
    \ false;\n        });\n        std::vector<long> new_arr(array.size());\n    \
    \    for (auto i : array) {\n            if (i >= t) {\n                new_arr.push_back(i);\n\
    \            }\n        }\n        return new_arr;\n    }\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmdi9_d1h: /tmp/tmpmdi9_d1h.cpp:47: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    assert(array.size() >= 2);\n    std::vector<long>\
    \ res(array.begin(), array.begin() + array.size() / 2);\n    std::vector<long>\
    \ temp(array.begin() + array.size() / 2, array.end());\n    std::sort(res.begin(),\
    \ res.end(), [&temp](int i, int j) {return temp[i] - temp[j] > 0;});\n    std::sort(res.end()\
    \ - 1, res.end(), [&temp](int i, int j) {return temp[i] - temp[j] > 0;});\n  \
    \  return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdnf62jzr: /tmp/tmpdnf62jzr.cpp:15: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int s = 0, l = 0;\n    int n = array.size();\n    for (int i = 0; i <\
    \ n; i++) {\n        s += array[i];\n        if (s > l || (s == l && array[i]\
    \ % 2 != 0)) {\n            l++;\n            long temp = array[i];\n        \
    \    array[i] = array[n-1];\n            array[n-1] = temp;\n        }\n    }\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjwpmh_39: /tmp/tmpjwpmh_39.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto val : array) {\n        sum += val;\n  \
    \  }\n    std::vector<long> arr;\n    for (auto val : array) {\n        arr.push_back((val\
    \ < 0) ? -val : val);\n    }\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ result;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    if (sum % 2 == 0) {\n        return result;\n    } else {\n      \
    \  result.insert(result.end(), arr.begin(), arr.end());\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptt2ieox6: /tmp/tmptt2ieox6.cpp:37: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    int sum = 0;\n    for (int i = 0; i < array.size()\
    \ - 1; i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n    \
    \    std::sort(array.begin(), array.end());\n    }\n    else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) {\n            return b < a;\n   \
    \     });\n    } else {\n        std::sort(array.begin(), array.end(), [](long\
    \ long a, long long b) {\n            return b > a;\n        });\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpw0axrgsb: /tmp/tmpw0axrgsb.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    std::sort(array.begin(), array.end());\n \
    \   if (n % 2 != 0) {\n        return array;\n    }\n    int m = n / 2;\n    for\
    \ (int i = 0; i < m; i++) {\n        long j = i;\n        long tmp = array[i];\n\
    \        while (j > 0 && array[j - 1] > tmp) {\n            array[j] = array[j\
    \ - 1];\n            j--;\n        }\n        array[j] = tmp;\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpstxwbzo9: /tmp/tmpstxwbzo9.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::sort(array.begin(), array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3ln__ji3: /tmp/tmp3ln__ji3.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // write your code here\n  if (array.size() == 0)\n    return array;\n\
    \  int last_index = array.size() - 1;\n  int first_index = 0;\n  int sum = 0;\n\
    \  for (int i = 0; i < array.size(); i++) {\n    sum += array[i];\n    if (sum\
    \ % 2 != 0) {\n      std::swap(array[last_index], array[first_index]);\n     \
    \ sum -= array[last_index];\n    }\n    if (sum % 2 != 0)\n      std::swap(array[last_index],\
    \ array[first_index]);\n    first_index++;\n    last_index--;\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdnkcij9f: /tmp/tmpdnkcij9f.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 != 0) {\n        // sort in ascending order\n        for (long\
    \ i : array) {\n            std::swap(array[i], array[sum - i]);\n        }\n\
    \    }\n    else {\n        // sort in descending order\n        for (long i :\
    \ array) {\n            std::swap(array[i], array[i + sum]);\n        }\n    }\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsycteerb: /tmp/tmpsycteerb.cpp:35: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long temp;\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        temp\
    \ = array[array.size()-1];\n        array.pop_back();\n        array.push_back(temp);\n\
    \    }\n    long long k = 0;\n    long long i = 0;\n    long long j = 0;\n   \
    \ long long ans = 0;\n    for (long k = array.size() - 1; k > 0; k--) {\n    \
    \    for (; i < k; i++) {\n            sum = sum + array[i];\n        }\n    \
    \    for (; j < k; j++) {\n            sum = sum + array[j];\n        }\n    \
    \    if (sum % 2 != 0) {\n            temp = array[j];\n            array[j] =\
    \ array[i];\n            array[i] = temp;\n        }\n        ans = array[k];\n\
    \        sum = sum - array[k];\n    }\n    return array;\n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpeub47wtq: /tmp/tmpeub47wtq.cpp:49: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int first = 0;\n    int last = array.size() - 1;\n    int sum = 0;\n\
    \    while (first <= last) {\n        sum = array[first] + array[last];\n    \
    \    if (sum % 2 == 0) {\n            array.push_back(array[first]);\n       \
    \     first++;\n        } else {\n            array.push_back(array[last]);\n\
    \            last--;\n        }\n    }\n    return array;\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpvkp1aki_: /tmp/tmpvkp1aki_.cpp:32: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    std::vector<long> v;\n    long sum = 0;\n    long\
    \ max = array[0];\n    for(int i = 0; i <array.size(); i++){\n        sum += array[i];\n\
    \        if (sum % 2 == 1)\n            max = array[i];\n        v.push_back(max);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfkw6vxv9: /tmp/tmpfkw6vxv9.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    std::vector<long> new_array;\n    new_array.reserve(array.size());\n\
    \    for (int i = 0; i < array.size(); i++) {\n        if (array[i] % 2 == 1)\
    \ {\n            new_array.push_back(array[i]);\n        } else {\n          \
    \  int j = (array[i] - 1) / 2;\n            new_array.push_back(array[i]);\n \
    \           new_array.push_back(array[j]);\n        }\n    }\n    return new_array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1qhay1hk: /tmp/tmp1qhay1hk.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    std::vector<long> temp;\n    long sum=0;\n    int n=array.size();\n\
    \    for(int i=0;i<n;i++){\n        sum+=array[i];\n        temp.push_back(sum);\n\
    \    }\n    std::sort(temp.begin(),temp.end());\n    std::vector<long> result(array.size());\n\
    \    for(int i=0;i<n;i++){\n        for(int j=i;j<n;j++){\n            if(temp[i]>=temp[j]){\n\
    \                result[j]=array[i];\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp66elwe9j: /tmp/tmp66elwe9j.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> newarray;\n    for (size_t i = 0; i < array.size();\
    \ i++) {\n        newarray.push_back(array[i]);\n    }\n    sort(newarray.begin(),\
    \ newarray.end());\n    return newarray;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpivwpmer8: /tmp/tmpivwpmer8.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::sort(array.begin(), array.end(), [] (long a, long b) { return a\
    \ < b; });\n\n    std::vector<long> result;\n    int sumA = 0, sumB = 0;\n   \
    \ for (long i : array)\n    {\n        sumA += i;\n        sumB += i + 1;\n  \
    \  }\n    if (sumA % 2)\n    {\n        for (long i : array)\n        {\n    \
    \        if (i > 0)\n            {\n                result.push_back(i - 1);\n\
    \            }\n        }\n    }\n    else\n    {\n        for (long i : array)\n\
    \        {\n            if (i < sumB)\n            {\n                result.push_back(i\
    \ + 1);\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyu0am_wq: /tmp/tmpyu0am_wq.cpp:48: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int sum = 0;\n    for (auto e : array) {\n        sum += e;\n    }\n\
    \    // sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n    if (sum & 1) {\n        return\
    \ std::sort(array.begin(), array.end());\n    } else {\n        return std::sort(array.rbegin(),\
    \ array.rend());\n    }\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsbt60tol.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsbt60tol.cpp:21:25: error: could not convert \u2018std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(array.std::vector<long int>::begin(), array.std::vector<long\
    \ int>::end())\u2019 from \u2018void\u2019 to \u2018std::vector<long int>\u2019\
    \n   21 |         return std::sort(array.begin(), array.end());\n      |     \
    \           ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                   \
    \      |\n      |                         void\n/tmp/tmpsbt60tol.cpp:23:25: error:\
    \ could not convert \u2018std::sort<std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > > >(std::vector<_Tp, _Alloc>::rbegin() [with _Tp\
    \ = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reverse_iterator\
    \ = std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = long int*](), std::vector<_Tp,\
    \ _Alloc>::rend() [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp,\
    \ _Alloc>::reverse_iterator = std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*]())\u2019 from \u2018void\u2019 to \u2018std::vector<long int>\u2019\
    \n   23 |         return std::sort(array.rbegin(), array.rend());\n      |   \
    \             ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |               \
    \          |\n      |                         void\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    std::vector<long> ret;\n    long first =\
    \ 0, last = array.size() - 1, cur = array[0];\n    while (first < last) {\n  \
    \      while (cur + array[first] <= cur + array[last]) ++first;\n        while\
    \ (cur + array[last] >= cur + array[first]) --last;\n        ret.emplace_back(cur\
    \ + array[first]);\n        while (first < last) ++first;\n        while (last\
    \ > first) --last;\n    }\n    if (cur + array[last] >= cur + array[first]) {\n\
    \        ret.emplace_back(cur + array[last]);\n        while last > first) {\n\
    \            --last;\n            ret.emplace_back(cur + array[last]);\n     \
    \   }\n    } else {\n        ret.emplace_back(cur + array[first]);\n        while\
    \ (first < last) {\n            ++first;\n            ret.emplace_back(cur + array[first]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvafcuh_7.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvafcuh_7.cpp:26:15: error: expected \u2018(\u2019 before\
    \ \u2018last\u2019\n   26 |         while last > first) {\n      |           \
    \    ^~~~\n      |               (\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> copy;\n    long sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum = sum + array[i];\n    }\n    long n = sum;\n    if (n %\
    \ 2 == 1) {\n        std::reverse(copy.begin(), copy.end());\n    }\n    if (sum\
    \ < 0) {\n        std::reverse(&copy[0], &copy[copy.size() - 1]);\n    }\n   \
    \ return copy;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpj1yne013: /tmp/tmpj1yne013.cpp:31: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() != 0);\n    std::vector<long> new_array(array.size());\n\
    \    long sum_first = 0, sum_last = 0, sum_sum = 0;\n    int len_array = array.size();\n\
    \n    for (int i = 0; i < len_array; i++) {\n        sum_first += array[i];\n\
    \    }\n    sum_last = sum_first;\n    for (int i = len_array - 1; i >= 0; i--)\
    \ {\n        sum_sum += array[i];\n        if (sum_sum % 2 == 0) {\n         \
    \   new_array[i] = sum_last;\n            sum_last += array[i];\n        } else\
    \ {\n            new_array[i] = sum_first;\n            sum_first -= array[i];\n\
    \        }\n    }\n    return new_array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppb1mciwn: /tmp/tmppb1mciwn.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    // TODO: implement the function here\n\
    \    for (int i = 0; i < array.size(); i++) {\n        for (int j = i + 1; j <\
    \ array.size(); j++) {\n            long sum = array[j] + array[i];\n        \
    \    if (sum % 2 == 0) {\n                result.push_back(array[j]);\n      \
    \          result.push_back(array[i]);\n                array.erase(array.begin()\
    \ + j);\n                array.erase(array.begin() + i);\n            }\n    \
    \        if (sum % 2 != 0) {\n                result.push_back(array[j]);\n  \
    \              result.push_back(array[i]);\n                array.erase(array.begin()\
    \ + j);\n                array.erase(array.begin() + i);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyhnhliqh: /tmp/tmpyhnhliqh.cpp:38: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> sorted_array;\n    for (long i: array) {\n        long\
    \ sum = i;\n        for (long j = 1; j < array.size(); j++) {\n            sum\
    \ += array[j];\n            assert(sum >= 0);\n        }\n        if (sum % 2\
    \ == 0) {\n            sorted_array.push_back(i);\n        } else {\n        \
    \    sorted_array.push_back(array[array.size() - i - 1]);\n        }\n    }\n\
    \    return sorted_array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpeavyj5t5: /tmp/tmpeavyj5t5.cpp:32: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result(array.size());\n    long sum = 0;\n    for (size_t\
    \ i = 0; i < array.size(); i++) {\n        result[i] = array[i];\n        sum\
    \ += array[i];\n    }\n    if (sum % 2 != 0) {\n        // descending sort\n \
    \       for (size_t i = 0; i < array.size(); i++) {\n            int min = i;\n\
    \            for (size_t j = i; j < array.size(); j++) {\n                sum\
    \ += array[j];\n                if (sum < array[j]) {\n                    min\
    \ = j;\n                }\n            }\n            result[min] = array[i];\n\
    \        }\n    } else {\n        // ascending sort\n        for (size_t i = 0;\
    \ i < array.size(); i++) {\n            int min = i;\n            for (size_t\
    \ j = i; j < array.size(); j++) {\n                sum += array[j];\n        \
    \        if (sum < array[j]) {\n                    min = j;\n               \
    \ }\n            }\n            result[min] = array[i];\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpeubdse85: /tmp/tmpeubdse85.cpp:51: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    for (long i=0;i<array.size();i++) {\n        long\
    \ x=array[i];\n        long sum=0;\n        for (long j=i+1;j<array.size();j++)\
    \ {\n            sum+=array[j];\n        }\n        if (sum%2==1) {\n        \
    \    std::swap(x,array[i]);\n        }\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpss3nhgtb: /tmp/tmpss3nhgtb.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> res(array.size());\n    long sum = 0;\n    for (long\
    \ i = 0; i < array.size(); i++) {\n        sum = sum + array[i];\n        res[i]\
    \ = array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(res.begin(),\
    \ res.end());\n        return res;\n    }\n    else {\n        std::sort(res.rbegin(),\
    \ res.rend());\n        return res;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxbytz9m9: /tmp/tmpxbytz9m9.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++)\n        sum += array[i];\n    std::sort(array.begin(), array.end());\n\
    \    if (sum % 2 == 1)\n        std::reverse(array.begin(), array.end());\n  \
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpu04x4l60: /tmp/tmpu04x4l60.cpp:27: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // Do not write main() function.\n  // Do not read input, instead use the\
    \ arguments to the function.\n  // Do not print the output, instead return values\
    \ as specified\n  // Sort first and second index value by checking odd/even sum\n\
    \  // If sum is odd then sort by decreasing order of second index value\n  //\
    \ If sum is even then sort by increasing order of first index value\n  std::sort(array.begin(),\
    \ array.end(), [](long l, long r) {\n    return l + r < 2 * l;\n  });\n  long\
    \ long sum = 0;\n  for (long i : array) {\n    sum += i;\n  }\n  if (sum % 2 !=\
    \ 0) {\n    std::sort(array.begin(), array.end(), [](long l, long r) {\n     \
    \ return r - l;\n    });\n  } else {\n    std::sort(array.begin(), array.end(),\
    \ [](long l, long r) {\n      return l - r;\n    });\n  }\n  return array;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyl543d5l: /tmp/tmpyl543d5l.cpp:43: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    if (n <= 0) return array;\n    // find the\
    \ max and min sum\n    long min = array[0];\n    long max = array[0];\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        if (array[i] < min) min = array[i];\n\
    \        if (array[i] > max) max = array[i];\n    }\n    int m = n + 1;\n    if\
    \ (max % 2 != 0)\n        m++;\n    if (min == max) return array;\n    std::vector<long>\
    \ res(m);\n    long curSum = 0;\n    int pos = 0;\n    bool flag = false;\n  \
    \  for (int i = 0; i < n; i++)\n    {\n        curSum += array[i];\n        res[pos++]\
    \ = curSum;\n        if (curSum > max) flag = true;\n        if (curSum < min)\
    \ flag = false;\n    }\n    if (flag) std::swap(res[0], res[m-1]);\n    std::vector<long>\
    \ res2(pos);\n    int j = 0;\n    for (int i = 0; i < pos; i++)\n        res2[i]\
    \ = array[j++];\n    return res2;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7imv9t29: /tmp/tmp7imv9t29.cpp:50: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long total = 0, currSum = 0;\n    for\
    \ (int i = 1; i < array.size(); i++) {\n        total += array[i];\n    }\n\n\
    \    for (int i = 0; i < array.size(); i++) {\n        currSum = total - array[i\
    \ - 1];\n        if (currSum % 2 == 1) {\n            result.push_back(array[i]);\n\
    \        } else {\n            result.push_back(array[i - 1]);\n        }\n  \
    \      total = currSum;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbmz7j6fh: /tmp/tmpbmz7j6fh.cpp:34: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if (array.empty())\n        return array;\n\n    std::vector<long> res;\n\
    \    res.push_back(array[0]);\n    long sum = 0;\n    for (long i : array)\n \
    \       sum += i;\n    if (sum % 2 == 1)\n        std::sort(res.begin() + 1, res.end());\n\
    \    else\n        std::sort(res.begin(), res.end());\n    return res;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqne5q4u1: /tmp/tmpqne5q4u1.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    if(array.size() == 0){\n        return array;\n\
    \    }\n    long sum = array[0];\n    long temp = 0;\n    for (long i = 1; i <\
    \ array.size(); i++){\n        temp = sum;\n        sum += array[i];\n       \
    \ if(sum%2 == 1){\n            std::vector<long> newArray(array);\n          \
    \  newArray[i] = temp;\n            return newArray;\n        }\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpzk2_rypy: /tmp/tmpzk2_rypy.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long x : array)\n\
    \        sum += x;\n\n    long halfSum = sum / 2;\n    if (sum % 2 == 1)\n   \
    \     halfSum++;\n    for (long x : array) {\n        result.push_back(x);\n \
    \       result.push_back(x - halfSum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsmdjdx91: /tmp/tmpsmdjdx91.cpp:32: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::sort(array.begin(), array.end());\n  return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppjodq2wp: /tmp/tmppjodq2wp.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    assert(n % 2 == 0);\n    int sum = 0;\n  \
    \  for (int i = 0; i < n; i++)\n    {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0)\n    {\n        std::sort(array.begin(), array.end());\n    \
    \    return array;\n    }\n    else\n    {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppfwxdsjl: /tmp/tmppfwxdsjl.cpp:15: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `n % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // your code goes here\n    std::sort(array.begin(), array.end());\n\
    \    for (long i : array) {\n        if (i % 2 != 0) {\n            long temp\
    \ = array[array.size() - 1];\n            array.pop_back();\n            array.push_back(temp);\n\
    \        }\n    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpx9647xrm: /tmp/tmpx9647xrm.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    bool result =\
    \ false;\n    if (sum % 2 != 0) {\n        result = true;\n    }\n    long long\
    \ size = 0;\n    for (int i = 0; i < array.size(); i++) {\n        size += array[i];\n\
    \    }\n    std::sort(array.begin(), array.begin() + size);\n    if (result) {\n\
    \        return array;\n    } else {\n        std::reverse(array.begin(), array.end());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4a0kub43: /tmp/tmp4a0kub43.cpp:38: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    std::vector<long> ans;\n    long sum = 0;\n\
    \    long first = 1;\n    long last = 0;\n    // Calculate the sum of all numbers\
    \ in the array.\n    for (long i = 0; i < n; i++) {\n        sum += array[i];\n\
    \    }\n    // If sum is even, sort it in ascending order.\n    if (sum % 2 ==\
    \ 0) {\n        for (long i = 0; i < n; i++) {\n            sum += array[i];\n\
    \            if (sum % 2 == 1) {\n                last = i;\n                break;\n\
    \            }\n        }\n        for (long i = first; i <= last; i++) {\n  \
    \          ans.push_back(array[i]);\n        }\n    } else {\n        // Sum must\
    \ be odd, so sort it in descending order.\n        for (long i = first; i <= last;\
    \ i++) {\n            sum += array[i];\n            if (sum % 2 == 0) {\n    \
    \            last = i;\n                break;\n            }\n        }\n   \
    \     for (long i = first; i <= last; i++) {\n            ans.push_back(array[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpprpudtzc: /tmp/tmpprpudtzc.cpp:53: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tstd::vector<long> arr(array);\n\tlong sum = arr[0] + arr[arr.size()-1];\n\
    \tif(sum % 2 == 0) {\n\t\tsort(arr.begin(), arr.end());\n\t\treturn arr;\n\t}\
    \ else {\n\t\treverse(arr.begin(), arr.end());\n\t\treturn arr;\n\t}\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tassert(array.size() >= 1);\n\tstd::vector<long> retval;\n\t// sort\n\t\
    auto it1 = array.begin();\n\tauto it2 = array.end();\n\tlong currsum = 0;\n\t\
    if (it2 > it1){\n\t\tstd::iter_swap(it1, it2);\n\t\tit1 += 1;\n\t\tit2 -= 1;\n\
    \t}\n\twhile (it1 != it2) {\n\t\tlong add = *it1++;\n\t\tcurrsum += add;\n\t\t\
    retval.push_back(currsum);\n\t\tcurrsum -= add;\n\t}\n\t// sort\n\tauto it1 =\
    \ retval.begin();\n\tauto it2 = retval.end();\n\tlong currsum = 0;\n\tif (it2\
    \ > it1){\n\t\tstd::iter_swap(it1, it2);\n\t\tit1 += 1;\n\t\tit2 -= 1;\n\t}\n\t\
    while (it1 != it2) {\n\t\tlong add = *it1++;\n\t\tcurrsum += add;\n\t\tretval.push_back(currsum);\n\
    \t\tcurrsum -= add;\n\t}\n\treturn retval;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1r0hnjfc.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1r0hnjfc.cpp:32:7: error: conflicting declaration \u2018\
    auto it1\u2019\n   32 |  auto it1 = retval.begin();\n      |       ^~~\n/tmp/tmp1r0hnjfc.cpp:17:7:\
    \ note: previous declaration as \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > it1\u2019\n   17 |  auto it1 = array.begin();\n    \
    \  |       ^~~\n/tmp/tmp1r0hnjfc.cpp:33:7: error: conflicting declaration \u2018\
    auto it2\u2019\n   33 |  auto it2 = retval.end();\n      |       ^~~\n/tmp/tmp1r0hnjfc.cpp:18:7:\
    \ note: previous declaration as \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > it2\u2019\n   18 |  auto it2 = array.end();\n      |\
    \       ^~~\n/tmp/tmp1r0hnjfc.cpp:34:7: error: redeclaration of \u2018long int\
    \ currsum\u2019\n   34 |  long currsum = 0;\n      |       ^~~~~~~\n/tmp/tmp1r0hnjfc.cpp:19:7:\
    \ note: \u2018long int currsum\u2019 previously declared here\n   19 |  long currsum\
    \ = 0;\n      |       ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code goes here\n    long long sum=0;\n    for(int i=0;i<array.size();i++)\n\
    \    {\n        sum+=array[i];\n    }\n    if(sum%2==0)\n    {\n        sort(array.begin(),array.end());\n\
    \    }\n    else\n    {\n        std::reverse(array.begin(),array.end());\n  \
    \  }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplclnatf5: /tmp/tmplclnatf5.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long s = 0;\n    int n = array.size();\n    long\
    \ max_num = 0;\n    long min_num = 0;\n    long sum = 0;\n    for (long i = 0;\
    \ i < n; i++) {\n        sum = array[i] + s[i];\n        if (sum % 2 != 0) {\n\
    \            std::swap(array[i], array[i]);\n        }\n        sum += array[i];\n\
    \        if (sum > max_num) {\n            max_num = sum;\n        } else if (sum\
    \ < min_num) {\n            min_num = sum;\n        }\n    }\n    std::vector<long>\
    \ sorted_array;\n    for (int i = 0; i < n; i++) {\n        if (array[i] >= min_num\
    \ && array[i] <= max_num) {\n            sorted_array.push_back(array[i]);\n \
    \       }\n    }\n    return sorted_array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeqao9jmb.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeqao9jmb.cpp:21:29: error: invalid types \u2018long int[long\
    \ int]\u2019 for array subscript\n   21 |         sum = array[i] + s[i];\n   \
    \   |                             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    int temp = 0;\n    std::vector<long> new_array;\n\
    \    for (int i = 0; i < array.size() - 1; i++) {\n        temp += array[i];\n\
    \        if (temp % 2 == 1)\n            new_array.push_back(temp);\n        else\
    \ {\n            new_array.push_back(-temp);\n        }\n    }\n    return new_array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tint sum = (array[0] + array[array.size() - 1]);\n\tint evenSum = 0;\n\t\
    int oddSum = 0;\n\tint count = 0;\n\tint position = 0;\n\tstd::vector<long> result;\n\
    \tstd::vector<long> temp;\n\twhile (true) {\n\t\tcount++;\n\t\tif (count > array.size())\
    \ {\n\t\t\tbreak;\n\t\t}\n\t\tif (sum % 2 == 0) {\n\t\t\tevenSum += array[count];\n\
    \t\t} else {\n\t\t\toddSum += array[count];\n\t\t}\n\t\tposition++;\n\t\tif (position\
    \ == array.size()) {\n\t\t\tresult.push_back(evenSum);\n\t\t\tresult.push_back(oddSum);\n\
    \t\t\tresult.push_back(array[count]);\n\t\t\tposition = 0;\n\t\t\toddSum = 0;\n\
    \t\t\tevenSum = 0;\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> res(array.begin(), array.end());\n    long s = 0;\n\
    \    for (long &val : res) s += val;\n    std::vector<long> reverse;\n    for\
    \ (long &val : res)\n        reverse.push_back(val);\n    reverse.push_back(s);\n\
    \    sort(reverse.begin(), reverse.end());\n    std::reverse(array.begin(), array.end());\n\
    \    std::reverse(array.begin(), array.end());\n    return std::move(res);\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0_p9v34t: /tmp/tmp0_p9v34t.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = accumulate(array.begin(), array.end(), 0ll);\n    if\
    \ (sum % 2 == 0)\n        std::sort(array.begin(), array.end());\n    else\n \
    \       std::sort(array.rbegin(), array.rend());\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplbxrmibu: /tmp/tmplbxrmibu.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // your code here\n    long sum = 0;\n    for (auto i: array) {\n   \
    \     sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long i1, long i2) -> bool {\n            return i1 > i2;\n \
    \       });\n    }\n    else {\n        std::sort(array.begin(), array.end(),\
    \ [](long i1, long i2) -> bool {\n            return i1 < i2;\n        });\n \
    \   }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjlpz290e: /tmp/tmpjlpz290e.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code goes here\n    long long total = 0;\n    for (long i : array)\
    \ {\n        total += i;\n    }\n    long long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (total % 2 == 0) {\n        for (long i\
    \ : array) {\n            if (sum - i >= 0) {\n                auto index = array.begin()\
    \ + i;\n                auto j = array.begin() + i;\n                std::iter_swap(index,\
    \ j);\n            }\n        }\n    } else {\n        for (long i : array) {\n\
    \            if (sum + i < 0) {\n                auto index = array.begin() +\
    \ i;\n                auto j = array.begin() + i;\n                std::iter_swap(index,\
    \ j);\n            }\n        }\n    }\n    return array;\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpavtp62q7: /tmp/tmpavtp62q7.cpp:46: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> ans;\n    long sum=0;\n    long max=0;\n    long min=array[0];\n\
    \    for (long i : array)\n    {\n        sum+=i;\n        if(sum>max) max=sum;\n\
    \        if(sum<min) min=sum;\n    }\n\n    if(sum%2==0)\n    {\n        std::vector<long>\
    \ res(array.size());\n        for (int i=0; i<array.size(); i++)\n        {\n\
    \            res[i] = array[i] - min;\n        }\n        std::sort(res.begin(),\
    \ res.end());\n        for (auto i : res)\n        {\n            ans.push_back(i);\n\
    \        }\n    }\n    else\n    {\n        std::vector<long> res(array.size());\n\
    \        for (int i=0; i<array.size(); i++)\n        {\n            res[i] = array[i]\
    \ - max;\n        }\n        std::sort(res.begin(), res.end());\n        for (auto\
    \ i : res)\n        {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long res = 0;\n    for (long long i : array)\n        res += i;\n\
    \    long long div = static_cast<long long>(sqrt(res));\n    while (div > 0) {\n\
    \        for (long long i : array)\n            div -= (i % div == 0 ? div : (i\
    \ % div));\n        for (long long i : array)\n            while (i && i % div\
    \ == 0)\n                i /= div;\n        array.erase(std::unique(array.begin(),\
    \ array.end(), [](long long n1, long long n2) { return n1 < n2; }), array.end());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    // If the sum of first two element is odd,\
    \ then sort the array in ascending order,\n    // otherwise, sort the array in\
    \ descending order.\n    if (n % 2 == 1) {\n        std::vector<long> result;\n\
    \        for (int i = 0; i < n / 2; i++) {\n            result.emplace_back(array[i]);\n\
    \        }\n        std::sort(result.begin(), result.end());\n        return result;\n\
    \    } else {\n        std::vector<long> result;\n        for (int i = 0; i <\
    \ n / 2; i++) {\n            result.emplace_back(array[n - 1 - i]);\n        }\n\
    \        std::sort(result.begin(), result.end());\n        return result;\n  \
    \  }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpd30pxaf1: /tmp/tmpd30pxaf1.cpp:36: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long s = 0;\n    for (const auto &e : array) {\n        s += e;\n   \
    \ }\n    std::vector<long> ans;\n    std::sort(array.begin(), array.end(), [](long\
    \ a, long b){return a<b;});\n    if (s % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    ans.insert(ans.end(), array.begin(), array.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz8oi74hu: /tmp/tmpz8oi74hu.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code in C/C++17 (if your compiler is GCC)\n    // auto\
    \ sum = array.size();\n    auto sum = array.size() + array[0];\n    auto temp;\n\
    \    auto i = 0;\n    auto j = 0;\n    long tempSum = 0;\n    std::vector<long>\
    \ newArray;\n    long maxTemp = array[0];\n    long minTemp = array[0];\n    //\
    \ newArray.push_back(array[0]);\n    while (i + 1 < array.size()) {\n        if\
    \ (sum % 2 == 0) {\n            if (array[i] > array[i + 1]) {\n             \
    \   temp = array[i];\n                array[i] = array[i + 1];\n             \
    \   array[i + 1] = temp;\n            }\n            sum += array[i + 1];\n  \
    \          temp = array[i + 1];\n            array[i + 1] = array[i];\n      \
    \      array[i] = temp;\n        }\n        else {\n            if (array[i] <\
    \ array[i + 1]) {\n                temp = array[i];\n                array[i]\
    \ = array[i + 1];\n                array[i + 1] = temp;\n            }\n     \
    \       sum += array[i + 1];\n            temp = array[i + 1];\n            array[i\
    \ + 1] = array[i];\n            array[i] = temp;\n        }\n        i++;\n  \
    \  }\n    if (sum % 2 != 0) {\n        if (array[i] > array[i + 1]) {\n      \
    \      temp = array[i];\n            array[i] = array[i + 1];\n            array[i\
    \ + 1] = temp;\n        }\n        sum += array[i + 1];\n        temp = array[i\
    \ + 1];\n        array[i + 1] = array[i];\n        array[i] = temp;\n    }\n \
    \   newArray.push_back(array[i]);\n    while (j < array.size() - 1) {\n      \
    \  if (array[j] > maxTemp) {\n            maxTemp = array[j];\n        }\n   \
    \     if (array[j] < minTemp) {\n            minTemp = array[j];\n        }\n\
    \        temp = array[j];\n        array[j] = array[j + 1];\n        array[j +\
    \ 1] = temp;\n        j++;\n    }\n    // newArray.push_back(array[j]);\n    newArray.push_back(array[j]);\n\
    \    long left = maxTemp - minTemp;\n    int left1 = 0;\n    int left2 = 0;\n\
    \    while (j - 1 >= 0) {\n        if (array[j] < minTemp) {\n            minTemp\
    \ = array[j];\n        }\n        if (array[j] > maxTemp) {\n            maxTemp\
    \ = array[j];\n        }\n        left1 = minTemp - maxTemp;\n        temp = array[j];\n\
    \        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        j--;\n\
    \    }\n    while (j + 1 < array.size()) {\n        if (array[j] > maxTemp) {\n\
    \            maxTemp = array[j];\n        }\n        if (array[j] < minTemp) {\n\
    \            minTemp = array[j];\n        }\n        left2 = maxTemp - minTemp\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7v3svgxt.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7v3svgxt.cpp:17:5: error: declaration of \u2018auto temp\u2019\
    \ has no initializer\n   17 |     auto temp;\n      |     ^~~~\n/tmp/tmp7v3svgxt.cpp:99:34:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   99 |         left2\
    \ = maxTemp - minTemp\n      |                                  ^\n      |   \
    \                               ;\n  100 | }\n      | ~                      \
    \           \n/tmp/tmp7v3svgxt.cpp:101:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  101 | int main() {\n      |     \
    \       ^\n/tmp/tmp7v3svgxt.cpp:110:1: error: expected \u2018}\u2019 at end of\
    \ input\n  110 | }\n      | ^\n/tmp/tmp7v3svgxt.cpp:13:55: note: to match this\
    \ \u2018{\u2019\n   13 | std::vector<long> sort_array(std::vector<long> array)\
    \ {\n      |                                                       ^\n/tmp/tmp7v3svgxt.cpp:110:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  110 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  int size = array.size();\n  std::sort(array.begin(), array.end(), [](const\
    \ long & a, const long & b) {\n    return a - b;\n  });\n  if (array[size - 1]\
    \ + array[size] % 2 != 0) {\n    std::sort(array.begin(), array.end(), [](const\
    \ long & a, const long & b) {\n      return b - a;\n    });\n  }\n  return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code in C++11\n    int sum = 0;\n    for (int i = array.size()\
    \ - 1; i >= 0; i--) {\n        sum += array[i];\n    }\n\n    if (sum % 2 == 1)\
    \ {\n        return std::move(array);\n    }\n    std::reverse(array.begin(),\
    \ array.end());\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpcqnd3lze: /tmp/tmpcqnd3lze.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code in here\n    int odd = 0, even = 0;\n    long sum\
    \ = 0;\n    std::vector<long> sorted;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n        if (sum % 2 == 0) {\n            even++;\n\
    \            sorted.push_back(array[i]);\n        } else {\n            odd++;\n\
    \            sorted.rbegin()->push(array[i]);\n        }\n    }\n    if (odd ==\
    \ 0) {\n        return sorted;\n    }\n    if (even == 0) {\n        return sorted;\n\
    \    }\n    if (sum > 0) {\n        sorted.push_back(sum);\n    }\n    long largest\
    \ = sorted.rbegin()->back();\n    for (long i : sorted) {\n        if (i > largest)\
    \ {\n            largest = i;\n        }\n    }\n    sorted.resize(sorted.size()\
    \ - 1);\n    sorted.push_back(largest);\n    return sorted;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8z4hs5xf.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8z4hs5xf.cpp:25:30: error: request for member \u2018push\u2019\
    \ in \u2018* std::vector<_Tp, _Alloc>::rbegin() [with _Tp = long int; _Alloc =\
    \ std::allocator<long int>; std::vector<_Tp, _Alloc>::reverse_iterator = std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*]().std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >::operator->()\u2019, which is of non-class type \u2018\
    long int\u2019\n   25 |             sorted.rbegin()->push(array[i]);\n      |\
    \                              ^~~~\n/tmp/tmp8z4hs5xf.cpp:37:37: error: request\
    \ for member \u2018back\u2019 in \u2018* std::vector<_Tp, _Alloc>::rbegin() [with\
    \ _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reverse_iterator\
    \ = std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = long int*]().std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   37 |     long largest = sorted.rbegin()->back();\n\
    \      |                                     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  long sum = 0;\n  for (auto const &i : array) {\n    sum += i;\n  }\n  auto\
    \ start = std::begin(array);\n  auto end = std::end(array);\n  if (sum % 2 ==\
    \ 1) {\n    std::sort(std::begin(array), std::end(array), [](const auto &i, const\
    \ auto &j) {\n      return i > j;\n    });\n  } else {\n    std::sort(std::begin(array),\
    \ std::end(array), [](const auto &i, const auto &j) {\n      return i < j;\n \
    \   });\n  }\n  return std::vector<long>(start, std::end(array));\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpo67iwln1: /tmp/tmpo67iwln1.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    long first = 0;\n    long last = array.size() - 1;\n\
    \    while (first <= last) {\n        sum = array[first] + array[last];\n    \
    \    if (sum % 2 != 0)\n            std::swap(array[first], array[last]);\n  \
    \      first++;\n        last--;\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgv0iz3bo: /tmp/tmpgv0iz3bo.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    long long sumOfFirst = 0;\n\
    \    long long sumOfLast = 0;\n\n    for (long i = 0; i < array.size(); i++) {\n\
    \        sum += array[i];\n        sumOfFirst += array[i];\n        sumOfLast\
    \ += array[i];\n    }\n\n    if (sumOfFirst % 2 != 0) {\n        std::swap(sumOfFirst,\
    \ sumOfLast);\n    }\n\n    if (sumOfLast % 2 != 0) {\n        std::swap(sumOfFirst,\
    \ sumOfLast);\n    }\n\n    std::vector<long> res(array.size());\n\n    for (long\
    \ i = 0; i < array.size(); i++) {\n        long temp = array[i];\n        res[i]\
    \ = temp;\n    }\n\n    long long maxIndex = sumOfLast - sumOfFirst;\n    long\
    \ long minIndex = sumOfFirst - sumOfLast;\n\n    long long index = 0;\n    long\
    \ long temp = 0;\n\n    for (long i = 1; i < res.size(); i++) {\n        temp\
    \ = res[i] - res[i - 1];\n        if (temp > 0) {\n            index = 0;\n  \
    \      }\n        if (temp < 0) {\n            index = 1;\n        }\n       \
    \ if (index == 0) {\n            res[i] = res[i - 1];\n        }\n        if (index\
    \ == 1) {\n            res[i] = res[i - 1];\n        }\n\n    }\n\n    long long\
    \ index2 = 0;\n    long long temp2 = 0;\n\n    for (long i = 1; i < res.size();\
    \ i++) {\n        temp2 = res[i] - res[i - 1];\n        if (temp2 > 0) {\n   \
    \         index2 = 0;\n        }\n        if (temp2 < 0) {\n            index2\
    \ = 1;\n        }\n        if (index2 == 0) {\n            res[i] = res[i - 1];\n\
    \        }\n        if (index2 == 1) {\n            res[i] = res[i - 1];\n   \
    \     }\n\n    }\n\n    for (long i = 1; i < res.size(); i++) {\n        res[i]\
    \ = res[i - 1];\n    }\n\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpcl_zluut: /tmp/tmpcl_zluut.cpp:93: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // write your code here\n  long long sum = 0;\n  for (int i = 0; i < array.size();\
    \ i++) {\n    sum += array[i];\n  }\n  long long flag = 0;\n  if (sum % 2 != 0)\
    \ {\n    flag = 1;\n    sum = -sum;\n  }\n  std::vector<long> res;\n  for (int\
    \ i = 0; i < array.size(); i++) {\n    long long curSum = sum - array[i];\n  \
    \  if (flag == 1) {\n      res.push_back(curSum);\n    } else {\n      res.push_back(-curSum);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1r03hkp2: /tmp/tmp1r03hkp2.cpp:38: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::vector<long> ans;\n  long sum = std::accumulate(array.cbegin(), array.cend(),\
    \ 0);\n  if (sum % 2 == 0) {\n    ans.assign(array.begin(), array.end());\n  \
    \  std::sort(ans.begin(), ans.end());\n  } else {\n    std::reverse(array.begin(),\
    \ array.end());\n    ans.assign(array.begin(), array.end());\n    std::sort(ans.begin(),\
    \ ans.end());\n  }\n  return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpevo1efh6: /tmp/tmpevo1efh6.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code goes here\n    std::sort(array.begin(), array.end());\n\
    \    long long n = array.size();\n    long long sum1 = 0, sum2 = 0;\n    for (long\
    \ long i = 0; i < n - 1; i++) {\n        sum1 += array[i];\n        sum2 += array[i\
    \ + 1];\n        if (sum1 % 2 == 0 && sum2 % 2 == 0) {\n            array.insert(array.begin()\
    \ + i, array[i - 1]);\n        }\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpewpjqcz2: /tmp/tmpewpjqcz2.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    for (long i = 0; i < array.size(); i++) {\n        int sum = 0;\n   \
    \     int min = i;\n        for (int j = i + 1; j < array.size(); j++) {\n   \
    \         sum += array[j];\n            if (sum < array[j]) {\n              \
    \  min = j;\n            }\n        }\n\n        if (sum % 2 == 0 && sum < array[min])\
    \ {\n            std::swap(array[i], array[min]);\n        }\n    }\n\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2gbbynr1: /tmp/tmp2gbbynr1.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    long long sum = 0;\n    long long max_sum = 0;\n  \
    \  for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n      \
    \  if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    if\
    \ (max_sum % 2 != 0) {\n        max_sum = max_sum + max_sum % 2;\n    }\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < array.size(); i++) {\n        long long value\
    \ = array[i];\n        long long pos = value - max_sum;\n        while (pos >=\
    \ 0) {\n            result.push_back(value);\n            pos = pos - max_sum;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmycqf3v0: /tmp/tmpmycqf3v0.cpp:40: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tlong long sum = 0;\n\tstd::vector<long> arr;\n\tfor (long i = 0; i < array.size();\
    \ i++) {\n\t\tsum += array[i];\n\t\tarr.push_back(array[i]);\n\t}\n\tif (sum %\
    \ 2 == 0) {\n\t\tstd::sort(arr.begin(), arr.end());\n\t} else {\n\t\tstd::sort(arr.rbegin(),\
    \ arr.rend());\n\t}\n\treturn arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpof8r424u: /tmp/tmpof8r424u.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> res(array.size());\n    // Sort the array in ascending\
    \ order\n    std::sort(array.begin(), array.end());\n    // Find first and last\
    \ index of sorted array\n    long mid = array.size() / 2;\n    long left = array[mid];\n\
    \    long right = array[mid + 1];\n    if (right > left) {\n        if (right\
    \ % 2 == 1) {\n            return sort_array(array);\n        } else {\n     \
    \       while (right > left) {\n                res[mid + 1]++;\n            \
    \    right -= 2;\n            }\n            while (right > left) {\n        \
    \        res[mid - 1]++;\n                right -= 2;\n            }\n       \
    \ }\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    long long sum = array.back() + array[array.size()-1];\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(),array.end());\n    }\
    \ else {\n        std::sort(array.rbegin(),array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    long sum = 0;\n    for (auto &i : array)\n        sum\
    \ += i;\n    if (sum % 2 == 1)\n        std::sort(array.begin(), array.end());\n\
    \    else\n        std::sort(array.rbegin(), array.rend());\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptt5qqz0x: /tmp/tmptt5qqz0x.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ std::less<long>());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp30gykiww: /tmp/tmp30gykiww.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> res(array.size());\n    std::iota(begin(res), end(res),\
    \ 0);\n    std::sort(begin(res), end(res), [] (const long& i1, const long& i2)\
    \ {\n        return ((i1%2) == (i2%2));\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpo3tv4u75: /tmp/tmpo3tv4u75.cpp:24: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    int n = array.size();\n    long sum = 0;\n\
    \    int mid;\n    for(int i=0;i<n;i++)\n    {\n        sum = sum + array[i];\n\
    \    }\n    if(sum%2 == 0)\n    {\n        std::sort(array.begin(),array.end());\n\
    \    }\n    else\n    {\n        std::sort(array.begin(),array.end(), std::greater<int>());\n\
    \    }\n    std::vector<long> results;\n    for(int i=0;i<n;i++)\n    {\n    \
    \    sum = sum + array[i];\n        if(sum%2 != 0)\n        {\n            results.push_back(array[i]);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1zaj48k7: /tmp/tmp1zaj48k7.cpp:44: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < array.size(); i++) {\n\t\tsum += array[i];\n\
    \t}\n\tif (sum % 2 != 0) {\n\t\tstd::sort(array.begin(), array.end());\n\t\tstd::reverse(array.begin(),\
    \ array.end());\n\t} else {\n\t\tstd::sort(array.begin(), array.end(), [&](int\
    \ a, int b) {\n\t\t\treturn b - a;\n\t\t});\n\t\tstd::reverse(array.begin(), array.end());\n\
    \t}\n\treturn array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpt3ifs9j0: /tmp/tmpt3ifs9j0.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    std::vector<long> res;\n    int counter = 0;\n    for (int i = 0;\
    \ i < array.size(); i++) {\n        if (sum % 2 == 1) {\n            long long\
    \ temp = 0;\n            temp = array[i];\n            array[i] = array[counter];\n\
    \            array[counter] = temp;\n            counter++;\n        }\n    }\n\
    \    int size = counter;\n    for (int i = 1; i < counter; i++) {\n        int\
    \ a = size - i;\n        int b = size - i - 1;\n        long long t = array[a]\
    \ + array[b];\n        if (t > array[0]) {\n            long long temp = array[a];\n\
    \            array[a] = array[b];\n            array[b] = temp;\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpznf09x3i: /tmp/tmpznf09x3i.cpp:45: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for(long i : array)\n        sum += i;\n    if (sum%2\
    \ == 1)\n        std::sort(array.begin(), array.end());\n    else\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return b > a; });\n    return array;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5y26f770: /tmp/tmp5y26f770.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int sum = 0;\n    long minimum = array[0];\n    long maximum = array[0];\n\
    \    long sum1 = 0;\n    long sum2 = 0;\n    for (long &i : array) {\n       \
    \ sum = sum + i;\n        if (sum < minimum) {\n            minimum = sum;\n \
    \       }\n        if (sum > maximum) {\n            maximum = sum;\n        }\n\
    \        sum1 = sum1 + i;\n        sum2 = sum2 + i;\n    }\n    if (sum1 % 2 !=\
    \ 0) {\n        std::swap(minimum, maximum);\n    }\n    std::sort(array.begin(),\
    \ array.end(), [sum1, sum2](long& a, long& b) {\n        return sum1 - sum2 >\
    \ 0 ? b - a : sum1 - sum2 > 0 ? a - b : 0;\n    });\n    return array;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // write your code here\n  // 1.sum all array values\n  long sum = array[0];\n\
    \  for (int i = 1; i < array.size(); i++) {\n    sum += array[i];\n  }\n\n  //\
    \ 2. sum is odd\n  if (sum & 1) {\n    return array;\n  }\n\n  // 3. sum is even\n\
    \  else {\n    for (int i = 1; i < array.size(); i++) {\n      long tmp = array[i];\n\
    \      array[i] = array[i - 1];\n      array[i - 1] = tmp;\n    }\n    return\
    \ array;\n  }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (size_t i = 0; i < array.size(); i++) {\n    \
    \    sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.begin(), array.end(), [&sum](long\
    \ a, long b) {\n            return (b - a) * (sum - a + b) / 2 + (a - sum) * (sum\
    \ - a - b) / 2 < 0;\n        });\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7qz9bmxk: /tmp/tmp7qz9bmxk.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long int sum = 0, temp = 0;\n    for\
    \ (long long int i : array) {\n        sum += i;\n        temp = sum % 2;\n  \
    \      array[i] = temp;\n    }\n    long long int sum1 = 0;\n    for (long long\
    \ int i : array) {\n        sum1 += i;\n    }\n    if (sum1 % 2 == 1) {\n    \
    \    std::reverse(array.begin(), array.end());\n    }\n    return array;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1lya_ssz: /tmp/tmp1lya_ssz.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = std::accumulate(array.begin(), array.end(), 0);\n    if (sum\
    \ % 2 == 1) {\n        std::sort(array.begin(), array.end(), [](int a, int b)\
    \ { return a > b; });\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppjcmbcrn: /tmp/tmppjcmbcrn.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    int sum = 0;\n    for (auto it = array.begin();\
    \ it < array.end(); it++) {\n        sum += *it;\n    }\n    int flag = 0;\n \
    \   if (sum % 2 == 0) {\n        flag = 1;\n    }\n    std::vector<long> res(n);\n\
    \    for (auto it = array.begin(); it < array.end(); it++) {\n        res[it -\
    \ array.begin()] = *it;\n    }\n    for (int i = 0; i < n / 2; i++) {\n      \
    \  int left = 0, right = n - 1;\n        while (left < right) {\n            while\
    \ (array[left] < array[left + 1]) left++;\n            while (array[right] > array[right\
    \ - 1]) right--;\n            if (left < right && array[left] <= array[right])\
    \ {\n                long temp = res[left];\n                res[left] = res[right];\n\
    \                res[right] = temp;\n                left++;\n               \
    \ right--;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if (array.size() == 0) {\n        return array;\n    }\n    std::sort(array.begin(),\
    \ array.end(), [](long l, long r) -> bool {\n        return l < r;\n    });\n\
    \    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n        if\
    \ (sum % 2 == 1) {\n            return std::make_move_iterator(std::sort(array.begin(),\
    \ array.end(), [](long l, long r) -> bool {\n                return l < r;\n \
    \           }));\n        }\n    }\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7n0qyr6.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw7n0qyr6.cpp:26:15: error: invalid use of void expression\n\
    \   26 |             }));\n      |               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\t// Sort array in ascending order\n\tstd::sort(array.begin(), array.end());\n\
    \t// If the sum of the first and last element is odd,\n\t// sort in descending\
    \ order.\n\twhile (array[0] + array[array.size() - 1] > array.back() + array.back())\
    \ {\n\t\tstd::reverse(&array[0], &array[array.size() - 1]);\n\t}\n\treturn array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0)\
    \ {\n        std::sort(array.begin(), array.end());\n        return array;\n \
    \   } else {\n        std::sort(array.begin(), array.end(), [&](const long &a,\
    \ const long &b) -> bool {\n            return b < a;\n        });\n        return\
    \ array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9hhitx6e: /tmp/tmp9hhitx6e.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    }\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpo78tvsna: /tmp/tmpo78tvsna.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    \n    long sum = 0;\n    \n    for(long\
    \ i = 0; i < array.size(); i++) {\n        sum = sum + array[i];\n    }\n    \n\
    \    if(sum % 2 == 0) {\n        for(long i = 0; i < array.size(); i++) {\n  \
    \          array[i] = (array[i] + array[i+1]);\n        }\n    } else {\n    \
    \    for(long i = 0; i < array.size(); i++) {\n            array[i] = (array[i]\
    \ - array[i-1]);\n        }\n    }\n    \n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp76uynbds: /tmp/tmp76uynbds.cpp:37: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // sort array in ascending order\n    int n = array.size();\n    std::vector<long>\
    \ sorted_array(n);\n    for (int i = 0; i < n; i++) {\n        sorted_array[i]\
    \ = array[i];\n    }\n    long long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += sorted_array[i];\n    }\n    if (sum % 2 == 0) {\n       \
    \ std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(sorted_array.begin(), sorted_array.end(), std::less<long>());\n\
    \    }\n    return sorted_array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9u2t_bjo: /tmp/tmp9u2t_bjo.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int s = array.size();\n    std::sort(array.begin(), array.end());\n \
    \   if (s % 2 == 1) {\n        std::vector<long> new_array;\n        new_array.reserve(s);\n\
    \        for (int i = 0; i < s; i++) {\n            new_array.push_back(i);\n\
    \        }\n        std::sort(new_array.begin(), new_array.end());\n        new_array.resize(s);\n\
    \        return new_array;\n    } else {\n        std::vector<long> new_array;\n\
    \        new_array.reserve(s);\n        for (int i = 0; i < s; i++) {\n      \
    \      new_array.push_back(s - i);\n        }\n        std::sort(new_array.begin(),\
    \ new_array.end());\n        new_array.resize(s);\n        return new_array;\n\
    \    }\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1zhif233: /tmp/tmp1zhif233.cpp:39: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = array.front();\n    for (long long x : array)\n     \
    \   sum += x;\n    // check if sum is odd\n    if (sum % 2 != 0) {\n        long\
    \ long temp = 0;\n        for (long long x : array)\n            temp = temp +\
    \ x;\n        std::reverse(array.begin(), array.end());\n        std::vector<long>\
    \ temp(temp, temp + array.size());\n        std::reverse(temp.begin(), temp.end());\n\
    \        array = temp;\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxljn_ao.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkxljn_ao.cpp:23:27: error: conflicting declaration \u2018\
    std::vector<long int> temp\u2019\n   23 |         std::vector<long> temp(temp,\
    \ temp + array.size());\n      |                           ^~~~\n/tmp/tmpkxljn_ao.cpp:19:19:\
    \ note: previous declaration as \u2018long long int temp\u2019\n   19 |      \
    \   long long temp = 0;\n      |                   ^~~~\n/tmp/tmpkxljn_ao.cpp:24:27:\
    \ error: request for member \u2018begin\u2019 in \u2018temp\u2019, which is of\
    \ non-class type \u2018long long int\u2019\n   24 |         std::reverse(temp.begin(),\
    \ temp.end());\n      |                           ^~~~~\n/tmp/tmpkxljn_ao.cpp:24:41:\
    \ error: request for member \u2018end\u2019 in \u2018temp\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   24 |         std::reverse(temp.begin(), temp.end());\n\
    \      |                                         ^~~\n/tmp/tmpkxljn_ao.cpp:25:17:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   25 |         array = temp;\n \
    \     |                 ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkxljn_ao.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:199:42: note:\
    \   no known conversion for argument 1 from \u2018long long int\u2019 to \u2018\
    const std::vector<long int>&\u2019\n  199 |     operator=(const vector<_Tp, _Alloc>&\
    \ __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vect"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code goes here\n    long sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::reverse(array.begin(), array.end());\n\
    \        std::sort(array.begin(), array.end());\n    }\n    return array;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa0_vx3w9: /tmp/tmpa0_vx3w9.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> res;\n    std::sort(array.begin(), array.end(), [](long\
    \ a, long b){\n        return a + b > 0;\n    });\n    if (array[0] > array[1])\n\
    \        res.insert(res.begin(), array[0], array[array.size()-1]);\n    else\n\
    \        res.insert(res.begin(), array[1], array[0]);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    int n = array.size();\n    if (n % 2 == 0) return\
    \ std::sort<long>(array.begin() + 1, array.end());\n    else return std::sort<long>(array.begin(),\
    \ array.end());\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy791uw55.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy791uw55.cpp:16:74: error: no matching function for call\
    \ to \u2018sort<long int>(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, std::vector<long int>::iterator)\u2019\n   16 |     if (n % 2 == 0)\
    \ return std::sort<long>(array.begin() + 1, array.end());\n      |           \
    \                                                               ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy791uw55.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4818:5:\
    \ note: candidate: \u2018void std::sort(_RAIter, _RAIter) [with _RAIter = long\
    \ int]\u2019\n 4818 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last)\n      |     ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4818:32:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019\n 4818 |     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n      |          ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5: note:\
    \ candidate: \u2018template<class _RAIter, class _Compare> void std::sort(_RAIter,\
    \ _RAIter, _Compare)\u2019\n 4848 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last,\n      |     ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpy791uw55.cpp:16:74:\
    \ note:   candidate expects 3 arguments, 2 provided\n   16 |     if (n % 2 ==\
    \ 0) return std::sort<long>(array.begin() + 1, array.end());\n      |        \
    \                                                                  ^\n/tmp/tmpy791uw55.cpp:17:59:\
    \ error: no matching function for call to \u2018sort<long int>(std::vector<long\
    \ int>::iterator, std::vector<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if(array.size() == 0)\n        return array;\n    long sum = 0; // sum\
    \ of the all elements\n    long count = 0; // number of elements to sort\n   \
    \ std::vector<long> sortedArray;\n    for(long i = 1; i < array.size(); i++) {\n\
    \        sum += array[i];\n        if(sum % 2 == 0) { // even sum\n          \
    \  sortedArray.push_back(array[i]);\n            count++;\n        }\n       \
    \ else { // odd sum\n            sortedArray.push_back(array[i]);\n          \
    \  count++;\n            sortedArray.push_back(array[i]);\n            count++;\n\
    \        }\n    }\n    for(long i = 0; i < count; i++) {\n        std::swap(sortedArray[i],\
    \ sortedArray[sortedArray.size()-i-1]);\n    }\n    return sortedArray;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpb7lmcwp8: /tmp/tmpb7lmcwp8.cpp:40: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    bool odd_even = array.empty() ? true : array[0] & array[(array.size()\
    \ - 1)] % 2 == 0;\n    if (odd_even) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    }\n    std::vector<long> tmp(array.begin(), array.end());\n\
    \    std::sort(tmp.begin(), tmp.end(), std::greater<long>());\n    std::vector<long>\
    \ ans;\n    std::copy(tmp.begin(), tmp.end(), std::back_inserter(ans));\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmavlv3im: /tmp/tmpmavlv3im.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long ans = 0;\n    for (long long i : array) {\n        ans += i;\n\
    \    }\n    std::vector<long> res(array);\n    std::sort(res.begin(), res.end());\n\
    \    long long sum = 0;\n    for (long long i : res) {\n        if (i > 0) {\n\
    \            sum += i;\n        }\n        if (sum % 2 == 0) {\n            std::sort(res.begin(),\
    \ res.end(), [](long long a, long long b) { return b < a; });\n        } else\
    \ {\n            std::sort(res.begin(), res.end(), [](long long a, long long b)\
    \ { return a < b; });\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphy2ezphj: /tmp/tmphy2ezphj.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    long min = 0;\n    for (long i : array) {\n      \
    \  sum += i;\n        min = i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [&](const long &a, const long &b) -> bool {\n            return\
    \ a > b;\n        });\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ [&](const long &a, const long &b) -> bool {\n            return a < b;\n   \
    \     });\n    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpr87d4a5o: /tmp/tmpr87d4a5o.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0, carry = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        carry = sum / 2;\n        sum -= carry * 2;\n\
    \    }\n    std::vector<long> output(array.begin(), array.end());\n    if (sum\
    \ % 2 == 1) {\n        for (long i : output) {\n            std::cout << i <<\
    \ \" \";\n        }\n        std::cout << std::endl;\n        std::cout << \"\
    The total sum is \" << sum << std::endl;\n        return output;\n    }\n    for\
    \ (long i : output) {\n        std::cout << i << \" \";\n    }\n    std::cout\
    \ << std::endl;\n    std::cout << \"The total sum is \" << sum << std::endl;\n\
    \    return output;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: "\nThe total sum is 0\n5 \nThe total sum is 1\n2 4 3 0 1 5 \nThe total sum\
    \ is 1\n"
  stderr: "tmpnveer6gm: /tmp/tmpnveer6gm.cpp:41: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum_of_first_elements = 0, sum_of_last_elements = 0;\n    for (long\
    \ i : array) {\n        sum_of_first_elements += i;\n    }\n    for (long i :\
    \ array) {\n        sum_of_last_elements += i;\n    }\n    if (sum_of_first_elements\
    \ > sum_of_last_elements) {\n        std::swap(sum_of_first_elements, sum_of_last_elements);\n\
    \    }\n\n    std::vector<long> result_vec(array.size());\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum_of_first_elements = 0;\n        sum_of_last_elements\
    \ = 0;\n        for (long j : array) {\n            sum_of_first_elements += j;\n\
    \        }\n        for (long j : array) {\n            sum_of_last_elements +=\
    \ j;\n        }\n        if (sum_of_first_elements > sum_of_last_elements) {\n\
    \            std::swap(result_vec[i], result_vec[i + 1]);\n        } else {\n\
    \            result_vec[i] = array[i];\n        }\n    }\n    return result_vec;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpi2eg_2j6: /tmp/tmpi2eg_2j6.cpp:47: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::sort(array.begin(), array.end());\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9uc0an23: /tmp/tmp9uc0an23.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    // Write your code here\n    long long sum\
    \ = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    int cmp;\n    if (sum % 2 == 1) {\n        cmp = -1;\n    } else {\n\
    \        cmp = 1;\n    }\n    std::vector<long> v;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        v.push_back(array[i]);\n    }\n    std::sort(v.begin(), v.end(),\
    \ [cmp](int a, int b) { return cmp * a > cmp * b; });\n    return v;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptis89y6e: /tmp/tmptis89y6e.cpp:38: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    //write your code in here.\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpn7hu6hai: /tmp/tmpn7hu6hai.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\t// write your code here\n\t\n\tif(array.size() <= 1){\n\t\treturn array;\n\
    \t}\n\t\n\tstd::vector<long> res;\n\tres.reserve(array.size());\n\tlong long sum\
    \ = 0;\n\tfor (long long i = 0; i < array.size(); i++)\n\t{\n\t\tsum += array[i];\n\
    \t}\n\t\n\tif (sum % 2 == 1){\n\t\tlong long start = 0;\n\t\tlong long end = array.size()\
    \ - 1;\n\t\tlong long mid = (end - start) / 2;\n\t\twhile (start <= end){\n\t\t\
    \tlong long mid = (end - start) / 2;\n\t\t\tif (array[mid] > array[mid+1]) {\n\
    \t\t\t\tstd::swap(array[mid], array[mid+1]);\n\t\t\t\tstd::swap(mid, mid+1);\n\
    \t\t\t} else {\n\t\t\t\tstd::swap(array[mid], array[mid]);\n\t\t\t\tstd::swap(mid,\
    \ mid);\n\t\t\t}\n\t\t\tend -= 1;\n\t\t}\n\t\t\n\t} else {\n\t\tlong long start\
    \ = 0;\n\t\tlong long end = array.size() - 1;\n\t\tlong long mid = (end - start)\
    \ / 2;\n\t\twhile (start <= end){\n\t\t\tlong long mid = (end - start) / 2;\n\t\
    \t\tif (array[mid] < array[mid+1]) {\n\t\t\t\tstd::swap(array[mid], array[mid+1]);\n\
    \t\t\t\tstd::swap(mid, mid+1);\n\t\t\t} else {\n\t\t\t\tstd::swap(array[mid],\
    \ array[mid]);\n\t\t\t\tstd::swap(mid, mid);\n\t\t\t}\n\t\t\tstart += 1;\n\t\t\
    }\n\t}\n\t\n\tfor (long long i = 0; i < array.size(); i++)\n\t{\n\t\tres.push_back(array[i]);\n\
    \t}\n\t\n\treturn res;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfexj0ud_.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfexj0ud_.cpp:36:25: error: no matching function for call\
    \ to \u2018swap(long long int&, long long int)\u2019\n   36 |     std::swap(mid,\
    \ mid+1);\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfexj0ud_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note: candidate: \u2018typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&) [with _Tp = long long int; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ = void]\u2019 <near match>\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |  \
    \   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note:   conversion of argument 2 would be ill-formed:\n/tmp/tmpfexj0ud_.cpp:36:23:\
    \ error: cannot bind non-const lvalue reference of type \u2018long long int&\u2019\
    \ to an rvalue of type \u2018long long int\u2019\n   36 |     std::swap(mid, mid+1);\n\
    \      |                    ~~~^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  long sum = 0;\n  std::vector<long> new_array;\n\n  for (auto &i : array)\n\
    \    sum += i;\n\n  int flag = sum % 2 != 0 ? 1 : -1; // flag is 0 for descending\n\
    \  for (auto &i : array) {\n    new_array.push_back(flag * (sum - i));\n  }\n\
    \  new_array.sort();\n  return new_array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrv53993.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyrv53993.cpp:24:13: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   24 |   new_array.sort();\n\
    \      |             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    long long sum = 0;\n    long long ans;\n    for (auto\
    \ it = array.begin(); it != array.end(); ++it) {\n        sum += *it;\n    }\n\
    \    if (sum % 2 == 0) {\n        ans = array[array.size()-1];\n        std::cout\
    \ << \"Sorted array is: \\n\";\n        for (int i = 0; i != array.size()-1; i++)\
    \ {\n            std::cout << array[i] << \" \";\n        }\n    } else {\n  \
    \      ans = array[array.size()-2];\n        std::cout << \"Sorted array is: \\\
    n\";\n        for (int i = 0; i != array.size()-2; i++) {\n            std::cout\
    \ << array[i] << \" \";\n        }\n    }\n    std::vector<long> v(array);\n \
    \   std::sort(v.begin(), v.end());\n    return v;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    for (long i = array.size() - 1; i >= 0; i--) {\n        for (int j =\
    \ i; j > 0; j--) {\n            long l1 = array[j - 1];\n            long l2 =\
    \ array[j];\n            if (l1 < l2) {\n                long temp = array[j -\
    \ 1];\n                array[j - 1] = array[j];\n                array[j] = temp;\n\
    \            }\n        }\n    }\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0sips5fh: /tmp/tmp0sips5fh.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long x : array) {\n        sum += x;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.begin(), array.end(), [](const long long\
    \ &a, const long long &b) {\n            return b < a;\n        });\n    }\n \
    \   return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpis0upomg: /tmp/tmpis0upomg.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    int len = array.size();\n    assert(len > 0);\n\n \
    \   long sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \        std::vector<long> result;\n        for (int i = 0; i < len; i++) {\n\
    \            result.push_back(array[i]);\n        }\n        return result;\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n        std::vector<long>\
    \ result;\n        for (int i = 0; i < len; i++) {\n            result.push_back(array[i]);\n\
    \        }\n        return result;\n    }\n\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpk04cbcru: /tmp/tmpk04cbcru.cpp:16: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `len > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    sort(array.begin(), array.end());\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpj_4gon5g: /tmp/tmpj_4gon5g.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if (array.size() <= 1) {\n        return array;\n    }\n\n    std::sort(array.begin(),\
    \ array.end());\n    std::vector<long> newArray = array;\n\n    if (newArray[newArray.size()\
    \ - 1] % 2 == 1) {\n        newArray.pop_back();\n        std::reverse(array.begin(),\
    \ array.end());\n        std::sort(array.begin(), array.end());\n        newArray.pop_back();\n\
    \    }\n    return newArray;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbgp0pqux: /tmp/tmpbgp0pqux.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    if(array.empty()) return {};\n    std::vector<long>\
    \ ans(array.size());\n    std::iota(ans.begin(), ans.end(), 0);\n    std::sort(ans.begin(),\
    \ ans.end(), [&array](int a, int b){\n        return array[a] - array[b] + ( array[a]\
    \ > array[b] );\n    });\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7ln22ev1: /tmp/tmp7ln22ev1.cpp:26: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::sort(array.begin(), array.end(), [](long a, long b){\n    return a\
    \ + b > b;\n  });\n  return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpx8yc5tq7: /tmp/tmpx8yc5tq7.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  assert(array.size() != 0 && array.size() % 2 == 0);\n  std::sort(array.begin(),\
    \ array.end());\n  std::vector<long> res(array.size() / 2);\n  for (int i = 0;\
    \ i < res.size(); i++) {\n    for (int j = res.size() - 1; j > i; j--) {\n   \
    \   if (res[j] + res[j - 1] == array[res.size() - i - 1] + array[res.size() -\
    \ j - 1]) {\n        res[j] = array[res.size() - i - 1];\n        res[j - 1] =\
    \ array[res.size() - j - 1];\n      }\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpnnzo_jb2: /tmp/tmpnnzo_jb2.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() != 0 && array.size() % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  int sum = 0;\n  for (auto &it : array) {\n    sum += it;\n  }\n  if (sum\
    \ % 2) {\n    long temp;\n    std::transform(array.begin(), array.end(), std::back_inserter(temp),\
    \ [](const long &it) {\n      return it + it;\n    });\n    array.insert(array.end(),\
    \ temp.begin(), temp.end());\n  }\n  std::sort(array.begin(), array.end());\n\
    \  return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_uoop9yp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:\
    \ In instantiation of \u2018class std::back_insert_iterator<long int>\u2019:\n\
    /tmp/tmp_uoop9yp.cpp:20:71:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:513:7:\
    \ error: \u2018long int\u2019 is not a class, struct, or union type\n  513 | \
    \      operator=(const typename _Container::value_type& __value)\n      |    \
    \   ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:520:7:\
    \ error: \u2018long int\u2019 is not a class, struct, or union type\n  520 | \
    \      operator=(typename _Container::value_type&& __value)\n      |       ^~~~~~~~\n\
    /tmp/tmp_uoop9yp.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_uoop9yp.cpp:23:36: error: request for member \u2018begin\u2019\
    \ in \u2018temp\u2019, which is of non-class type \u2018long int\u2019\n   23\
    \ |     array.insert(array.end(), temp.begin(), temp.end());\n      |        \
    \                            ^~~~~\n/tmp/tmp_uoop9yp.cpp:23:50: error: request\
    \ for member \u2018end\u2019 in \u2018temp\u2019, which is of non-class type \u2018\
    long int\u2019\n   23 |     array.insert(array.end(), temp.begin(), temp.end());\n\
    \      |                                                  ^~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here\n    int n = array.size();\n    int max_sum =\
    \ array[0] + array[n-1];\n    int mid = (max_sum / 2) >> 1;\n    std::vector<long>\
    \ res(array.size());\n    for(int i = 0; i < n; i++) {\n        long min_sum =\
    \ array[i] + array[mid];\n        long left_sum = array[i] + array[0];\n     \
    \   long right_sum = array[mid] + array[n-1];\n        if(min_sum > right_sum)\
    \ {\n            res[i] = array[i];\n            res[mid + 1] = array[mid];\n\
    \            res[n - 1] = array[n-1];\n            res[0] += array[i];\n     \
    \       res[mid - 1] += array[mid];\n            res[n - 2] += array[n-1];\n \
    \       }\n        else if(min_sum < right_sum) {\n            res[i] = array[mid];\n\
    \            res[mid + 1] = array[i];\n            res[n - 1] = array[n-1];\n\
    \            res[n - 2] = array[n-2];\n            res[mid - 1] += array[mid];\n\
    \            res[0] += array[i];\n        }\n        else {\n            res[i]\
    \ = array[i];\n            res[mid + 1] = array[mid];\n            res[0] = array[0];\n\
    \            res[n-1] = array[n-1];\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    for (size_t i = 0; i < array.size(); i++) {\n        int sum = array[i];\n\
    \        for (int j = i + 1; j < array.size(); j++) {\n            sum += array[j];\n\
    \            if (sum % 2 == 0) {\n                std::swap(array[i], array[j]);\n\
    \            }\n        }\n    }\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphmx_8afg: /tmp/tmphmx_8afg.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::sort(array.begin(), array.end());\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8a7s2fd6: /tmp/tmp8a7s2fd6.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code goes here\n    int n = array.size();\n    // int m = array[0]\
    \ + array[n - 1];\n    int m = array[0] + array[1];\n    std::vector<long> res;\n\
    \    res.push_back(array[0]);\n    res.push_back(array[1]);\n    long sum = 0;\n\
    \    for (int i = 2; i < n; i++) {\n        // array[i] = array[i-2] - array[i-1];\n\
    \        sum += array[i-2];\n        res.push_back(array[i] - sum);\n    }\n\n\
    \    if(m % 2 == 0) {\n        std::reverse(std::begin(res), std::end(res));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = accumulate(array.begin(), array.end(), 0);\n    std::vector<long>\
    \ result;\n    if (sum & 1)\n        std::reverse(array.begin(), array.end());\n\
    \    else\n        result.insert(result.begin(), array.end(), array.begin());\n\
    \    for (size_t i = 1; i < array.size(); i++) {\n        long k = array[i];\n\
    \        long j = i - 1;\n        while (j >= 0 && array[j] > k) {\n         \
    \   result[j + 1] = array[j];\n            j--;\n        }\n        result[j +\
    \ 1] = k;\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphywvvqbc: /tmp/tmphywvvqbc.cpp:34: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if (array.size() <= 1) return array;\n    std::vector<long> ret = array;\n\
    \    std::vector<long> first = {array[0]};\n    std::vector<long> last = {array[array.size()\
    \ - 1]};\n    std::vector<long> mid;\n    int sum = 0;\n    while (first.size()\
    \ > 0 && last.size() > 0) {\n        mid.push_back((first.back() + last.front())\
    \ / 2);\n        sum += mid.back();\n        first.pop_back();\n        last.erase(last.begin());\n\
    \    }\n    while (last.size() > 0) {\n        mid.push_back((first.back() + last.front())\
    \ / 2);\n        sum += mid.back();\n        mid.pop_back();\n    }\n    if (sum\
    \ % 2 != 0) {\n        mid.push_back(0);\n    }\n    for (size_t i = 0; i < ret.size();\
    \ i++) {\n        ret[i] += mid[i];\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmph182fd6z: /tmp/tmph182fd6z.cpp:43: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long first_index_sum\
    \ = 0;\n    long last_index_sum = 0;\n    for (long i = 0; i < array.size(); i++)\
    \ {\n        first_index_sum += array[i];\n        last_index_sum += array[i];\n\
    \    }\n    if (first_index_sum % 2 != 0) {\n        for (long i = 0; i < array.size();\
    \ i++) {\n            result.push_back(array[i]);\n        }\n    } else {\n \
    \       for (long i = array.size() - 1; i >= 0; i--) {\n            result.push_back(array[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptk5htgwd: /tmp/tmptk5htgwd.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = array.front();\n    long ans\
    \ = sum;\n    long last;\n    for (auto x : array) {\n        sum -= x;\n    \
    \    ans += x;\n        if (sum < 0) {\n            sum = 0;\n        }\n    \
    \    if (sum > 0) {\n            break;\n        }\n    }\n    if (ans % 2 ==\
    \ 1) {\n        std::reverse(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    int sum = 0;\n    for(int i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    std::vector<long> res(array.size());\n\
    \    for(int i = 0; i < array.size(); i++) {\n        int j = i;\n        int\
    \ temp = array[i];\n        while(j > 0 && ((array[j - 1] > temp) && (sum % 2\
    \ == 1))) {\n            res[j - 1] = array[j - 1];\n            j--;\n      \
    \  }\n        res[j] = temp;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplhpv5tni: /tmp/tmplhpv5tni.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Do not write main() function.\n    // Do not read input, instead use\
    \ the arguments to the function.\n    // Do not print the output, instead return\
    \ values as specified\n    // Sort your input in increasing order\n    std::vector<long>\
    \ arr(array.size());\n    int sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        arr[i] = array[i];\n        sum += arr[i];\n    }\n\n    if\
    \ (sum % 2 != 0) {\n        std::sort(arr.begin(), arr.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(arr.begin(), arr.end(), std::less<long>());\n\
    \    }\n\n    return arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpypyrcyd4: /tmp/tmpypyrcyd4.cpp:37: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    std::vector<long> result;\n\
    \    int i = 0;\n    for (i = 0; i < array.size(); i++) {\n        sum = sum +\
    \ array[i];\n        if (sum % 2 == 1) {\n            result.push_back(array[i]);\n\
    \        } else {\n            result.push_back(array[i]);\n            sum =\
    \ sum - array[i];\n        }\n    }\n    for (auto it = result.begin(); it !=\
    \ result.end(); it++) {\n        *it = *it + array[result.size() - i - 1];\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpimtingna: /tmp/tmpimtingna.cpp:35: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    long long temp =\
    \ 0;\n    long long sum2 = 0;\n    std::vector<long> ans;\n    for (int i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n        ans.push_back(sum);\n\
    \    }\n    for (int i = 0; i < ans.size(); i++) {\n        temp = ans[i];\n \
    \       sum2 = sum;\n        while (sum2 > temp) {\n            sum2 -= temp;\n\
    \            ans[ans.size() - 1] = sum2;\n        }\n        while (sum2 != temp)\
    \ {\n            sum2 -= temp;\n            ans[ans.size() - 1] += temp;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto num : array)\n        sum += num;\n\
    \    if (sum % 2 == 0)\n        std::sort(array.begin(), array.end(), [](long\
    \ long a, long long b) {\n            return a > b;\n        });\n    else\n \
    \       std::sort(array.begin(), array.end(), [](long long a, long long b) {\n\
    \            return a < b;\n        });\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8bqf66yq: /tmp/tmp8bqf66yq.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    assert(array.size() != 0);\n    // Sum first and\
    \ last element\n    int sum_first = array[0];\n    int sum_last = array[0];\n\
    \    for (int i = 1; i < array.size(); i++) {\n        sum_first += array[i];\n\
    \        sum_last += array[i];\n    }\n    // Sort even\n    if (sum_last % 2\
    \ == 0) {\n        std::sort(array.begin(), array.end());\n    }\n    // Sort\
    \ odd\n    else {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    }\n    // Copy result to vector\n    std::vector<long> res;\n    res.assign(array.begin(),\
    \ array.end());\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpvifyf7hb: /tmp/tmpvifyf7hb.cpp:15: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Write your code here.\n    return array;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkx2l3cl5: /tmp/tmpkx2l3cl5.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tassert(array.size() >= 2);\n\tauto left = array.front();\n\tauto right\
    \ = array.back();\n\tlong temp_sum = 0;\n\tfor (auto it = array.begin(); it !=\
    \ array.end(); ++it) {\n\t\ttemp_sum += *it;\n\t}\n\tif (temp_sum % 2 != 0) {\n\
    \t\tstd::reverse(array.begin(), array.end());\n\t\ttemp_sum = std::accumulate(array.begin(),\
    \ array.end(), 0);\n\t} else {\n\t\tstd::reverse(array.begin(), array.end());\n\
    \t\ttemp_sum = std::accumulate(array.begin(), array.end(), 0);\n\t\tarray.pop_back();\n\
    \t}\n\tlong new_left = left;\n\tlong new_right = right;\n\tlong new_sum = temp_sum;\n\
    \twhile (new_sum > new_left + new_right) {\n\t\tif (new_sum % 2 != 0) {\n\t\t\t\
    std::swap(new_left, new_right);\n\t\t\tstd::swap(new_sum, new_left + new_right);\n\
    \t\t} else {\n\t\t\tstd::swap(new_left, new_right);\n\t\t\tstd::swap(new_sum,\
    \ new_left + new_right);\n\t\t\tstd::swap(array[new_left], array[new_right]);\n\
    \t\t}\n\t}\n\treturn array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzx0__t9.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdzx0__t9.cpp:35:43: error: no matching function for call\
    \ to \u2018swap(long int&, long int)\u2019\n   35 |    std::swap(new_sum, new_left\
    \ + new_right);\n      |                                           ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdzx0__t9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note: candidate: \u2018typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&) [with _Tp = long int; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ = void]\u2019 <near match>\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |  \
    \   ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note:   conversion of argument 2 would be ill-formed:\n/tmp/tmpdzx0__t9.cpp:35:32:\
    \ error: cannot bind non-const lvalue reference of type \u2018long int&\u2019\
    \ to an rvalue of type \u2018long int\u2019\n   35 |    std::swap(new_sum, new_left\
    \ + new_right);\n      |                       ~~~~~~~~~^~~~~~~~~~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    assert(array.size() > 0);\n    long n =\
    \ array.size();\n    long sum = 0;\n    for (int i = 1; i < n; i++) {\n      \
    \  sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::swap(array[0],\
    \ array[n-1]);\n        std::sort(array.begin(), array.end());\n        std::reverse(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpoaxgbl6z: /tmp/tmpoaxgbl6z.cpp:15: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    assert(array.size() == 1 || array.size() == 0);\n    if (array.size()\
    \ <= 1) {\n        return array;\n    }\n    long sum = array[0] + array[array.size()\
    \ - 1];\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    }\n    std::sort(array.begin(), array.end(), [&sum,\
    \ &array](int a, int b) { return sum - a + b; });\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpt1jqp66i: /tmp/tmpt1jqp66i.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() == 1 || array.size() == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> sorted_array;\n    long last_value = 0;\n    for (long\
    \ first : array) {\n        last_value = first;\n    }\n    for (long first :\
    \ array) {\n        sorted_array.push_back(first);\n    }\n    while (sorted_array.size()\
    \ > 1) {\n        long first_value = sorted_array[0];\n        long second_value\
    \ = sorted_array[1];\n        if (first_value + second_value == last_value + last_value)\
    \ {\n            sorted_array[1] = second_value;\n            sorted_array[0]\
    \ = first_value;\n        } else if (first_value + second_value < last_value +\
    \ last_value) {\n            long temp = first_value;\n            long index\
    \ = -1;\n            for (int i = 0; i < sorted_array.size(); i++) {\n       \
    \         if (sorted_array[i] > temp) {\n                    temp = sorted_array[i];\n\
    \                    index = i;\n                }\n            }\n          \
    \  sorted_array[index] = second_value;\n            sorted_array[1] = temp;\n\
    \        } else {\n            long temp = second_value;\n            long index\
    \ = -1;\n            for (int i = 0; i < sorted_array.size(); i++) {\n       \
    \         if (sorted_array[i] > temp) {\n                    temp = sorted_array[i];\n\
    \                    index = i;\n                }\n            }\n          \
    \  sorted_array[index] = first_value;\n            sorted_array[0] = temp;\n \
    \       }\n    }\n    return sorted_array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::sort(array.begin(), array.end());\n    long first = 0LL;\n    long\
    \ last = 0LL;\n    for (long i = 0; i < array.size(); i++) {\n        first =\
    \ first + array[i];\n        last = last + array[i];\n    }\n\n    if (last %\
    \ 2LL) {\n        std::reverse(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_bo0grhv: /tmp/tmp_bo0grhv.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> temp;\n    long s = 0;\n    for (const auto& i : array)\n\
    \    {\n        s += i;\n    }\n    if (s % 2 == 1)\n    {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    std::sort(array.begin(), array.end());\n    std::vector<long>\
    \ temp1(array);\n    return temp1;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplep9imex: /tmp/tmplep9imex.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> ans;\n    std::sort(array.begin(), array.end(), []\
    \ (const long &a, const long &b) {\n        return a + b > 0 ? a > b : a < b;\n\
    \    });\n    std::size_t sum = 0;\n    for (std::size_t i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n        if (sum % 2 == 0) {\n            ans.push_back(array[i]);\n\
    \        } else {\n            ans.push_back(array[array.size() - 1 - i]);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpop24w0q4: /tmp/tmpop24w0q4.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    for (std::size_t i = 0; i < array.size(); ++i) {\n        long cur_sum\
    \ = array[i];\n        for (std::size_t j = i + 1; j < array.size(); ++j) {\n\
    \            long temp_sum = array[j];\n            if (cur_sum + temp_sum > cur_sum)\
    \ {\n                std::swap(array[i], array[j]);\n            }\n         \
    \   cur_sum += temp_sum;\n        }\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkeymro4t: /tmp/tmpkeymro4t.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code goes here\n    std::vector<long> arr;\n    if (array.size()\
    \ % 2 == 0) {\n        long largest = array.back();\n        for (long i = 0;\
    \ i < array.size(); i++) {\n            if (largest < array[i]) {\n          \
    \      largest = array[i];\n            }\n            arr.push_back(largest);\n\
    \        }\n    } else {\n        long smallest = array[0];\n        for (long\
    \ i = 0; i < array.size(); i++) {\n            if (smallest > array[i]) {\n  \
    \              smallest = array[i];\n            }\n            arr.push_back(smallest);\n\
    \        }\n    }\n    return arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    std::vector<long> res(array.size());\n \
    \   long sum = 0;\n    for (auto it = array.begin(); it != array.end(); ++it)\
    \ {\n        sum += *it;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        std::stable_sort(array.begin(), array.end());\n     \
    \   return array;\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n        std::stable_sort(array.begin(), array.end(),\
    \ std::greater<long>());\n        return array;\n    }\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp99_7ce25: /tmp/tmp99_7ce25.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (int i = 1; i < array.size();\
    \ i++) {\n        sum += array[i - 1];\n    }\n    if (sum % 2 == 1) {\n     \
    \   for (auto &it : array) {\n            std::iter_swap(it - 1, it + 1);\n  \
    \      }\n    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsqhfqzzm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In instantiation of \u2018void std::iter_swap(_ForwardIterator1, _ForwardIterator2)\
    \ [with _ForwardIterator1 = long int; _ForwardIterator2 = long int]\u2019:\n/tmp/tmpsqhfqzzm.cpp:21:42:\
    \   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:151:12:\
    \ error: invalid type argument of unary \u2018*\u2019 (have \u2018long int\u2019\
    )\n  151 |       swap(*__a, *__b);\n      |            ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:151:18:\
    \ error: invalid type argument of unary \u2018*\u2019 (have \u2018long int\u2019\
    )\n  151 |       swap(*__a, *__b);\n      |                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    auto sum = array.begin() + array.size() / 2;\n    long leftSum = sum;\n\
    \    long rightSum = sum;\n    long leftFirst = *array.begin();\n    long rightFirst\
    \ = *array.rbegin();\n    // sort ascending\n    if (leftSum < rightSum) {\n \
    \       for (long i = array.size() - 1; i >= 0; i--) {\n            long tmp =\
    \ array[i];\n            if (leftFirst < rightFirst) {\n                if (leftFirst\
    \ + rightFirst > sum) {\n                    sum += leftSum;\n               \
    \ }\n                sum -= tmp;\n                leftSum -= tmp;\n          \
    \      leftFirst += tmp;\n            } else {\n                sum += tmp;\n\
    \            }\n            array[i] = sum;\n        }\n    }\n    // sort descending\n\
    \    if (leftSum > rightSum) {\n        for (long i = array.size() - 1; i >= 0;\
    \ i--) {\n            long tmp = array[i];\n            if (leftFirst < rightFirst)\
    \ {\n                if (leftFirst + rightFirst > sum) {\n                   \
    \ sum += leftSum;\n                }\n                sum -= tmp;\n          \
    \      leftSum -= tmp;\n                rightFirst -= tmp;\n            } else\
    \ {\n                sum += tmp;\n            }\n            array[i] = sum;\n\
    \        }\n    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bdfwtih.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2bdfwtih.cpp:15:20: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   15 |     long leftSum = sum;\n      |                    ^~~\n      |    \
    \                |\n      |                    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmp2bdfwtih.cpp:16:21: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   16 |     long rightSum = sum;\n\
    \      |                     ^~~\n      |                     |\n      |     \
    \                __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\n/tmp/tmp2bdfwtih.cpp:24:44: error: no match for \u2018operator>\u2019 (operand\
    \ types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019)\n   24 |                 if (leftFirst + rightFirst\
    \ > sum) {\n      |                     ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |\
    \                               |              |\n      |                    \
    \           long int       __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2bdfwtih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // Write your code here\n  // your code here\n  long sum = 0;\n  for (long\
    \ i = 0; i < array.size(); i++) {\n    sum += array[i];\n  }\n  assert(sum % 2\
    \ == 0);\n  std::vector<long> output(array.size());\n  std::vector<long> temp(array.size());\n\
    \  int count = 0;\n  int start = 0;\n  for (long i = 0; i < (int)array.size();\
    \ i++) {\n    while (start + 1 < i) {\n      long left = array[start];\n     \
    \ long right = array[start + 1];\n      long sum = left + right;\n      if (sum\
    \ % 2 == 0) {\n        output[count++] = right;\n        output[count++] = left;\n\
    \      }\n      else {\n        output[count++] = left;\n        output[count++]\
    \ = right;\n      }\n      start += 2;\n    }\n    output[count++] = array[i];\n\
    \  }\n  return output;\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplrvrmxc8: /tmp/tmplrvrmxc8.cpp:20: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `sum % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum\
    \ += array[i];\n    }\n    if (sum % 2) {\n        std::cout << \"descending order\\\
    n\";\n        std::sort(array.begin(), array.end(), [&sum](int a, int b) { return\
    \ b - a;});\n        return array;\n    }\n    else {\n        std::cout << \"\
    ascending order\\n\";\n        std::sort(array.begin(), array.end(), [&sum](int\
    \ a, int b) { return a - b;});\n        return array;\n    }\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: "ascending order\ndescending order\ndescending order\n"
  stderr: "tmpq73mneim: /tmp/tmpq73mneim.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int size = array.size();\n    if (size <= 1) {\n        return array;\n\
    \    }\n    std::vector<long> res(size - 1);\n    for (int i = 0; i < size; i++)\
    \ {\n        int min_idx = i;\n        long min = array[i];\n        for (int\
    \ j = i; j < size; j++) {\n            if (array[j] < min) {\n               \
    \ min_idx = j;\n                min = array[j];\n            }\n        }\n  \
    \      long temp = array[min_idx];\n        array[min_idx] = array[i];\n     \
    \   array[i] = temp;\n        res[min_idx] = array[i];\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmph9t8nh3a: /tmp/tmph9t8nh3a.cpp:39: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    int n = array.size();\n    for (int i = 1; i < n; ++i) {\n        int\
    \ j = i;\n        while ((j > 0) && (array[j - 1] > array[j])) {\n           \
    \ array[j] = array[j - 1];\n            --j;\n        }\n        array[j] = i;\n\
    \    }\n    std::vector<long> res;\n    for (long i : array) {\n        res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp611q92b0: /tmp/tmp611q92b0.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    long sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpc63dlbmd: /tmp/tmpc63dlbmd.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::vector<long> vec;\n  for (long x : array)\n    vec.push_back(x);\n\
    \n  std::sort(vec.begin(), vec.end(), [&vec](int a, int b) {\n    return vec[a]\
    \ + (vec[b] > vec[a]); // sort by ascending order\n  });\n\n  std::sort(vec.begin(),\
    \ vec.end(), [&vec](int a, int b) {\n    return vec[b] - (vec[a] > vec[a]); //\
    \ sort by descending order\n  });\n\n  return vec;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyjw0lmxc: /tmp/tmpyjw0lmxc.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n\tassert(array.size() >= 2);\n\tstd::vector<long> result;\n\tlong long sum\
    \ = 0;\n\tfor (auto i : array) {\n\t\tsum += i;\n\t\tresult.push_back(i);\n\t\
    }\n\tstd::sort(result.begin(), result.end(), [sum](int a, int b) -> bool {\n\t\
    \tlong long res = sum - a + b; // return true if sum a+b is odd, return false\
    \ if sum a+b is even\n\t\treturn (res % 2 != 0);\n\t});\n\treturn result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpzpk30f66: /tmp/tmpzpk30f66.cpp:14: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `array.size() >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // write your code here\n  std::vector<long> sorted;\n  for (auto i = 0;\
    \ i < array.size(); i++) {\n    long sum = array[i];\n    int firstIndex = i;\n\
    \    for (int j = i + 1; j < array.size(); j++) {\n      if (sum % 2) {\n    \
    \    sum -= array[j];\n      } else {\n        sum += array[j];\n      }\n   \
    \   assert(sum > 0);\n    }\n    sorted.push_back(array[firstIndex]);\n    array[firstIndex]\
    \ = 0;\n  }\n  return sorted;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz1bqa1_z: /tmp/tmpz1bqa1_z.cpp:25: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `sum > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Do not write main() function.\n    // Do not read input, instead use\
    \ the arguments to the function.\n    // Do not print the output, instead return\
    \ values as specified\n    // Sort first then append if odd else prepend\n   \
    \ std::vector<long> out;\n    long sum = 0;\n    long min = 0;\n    int size =\
    \ array.size();\n    for (int i = 0; i < size; i++) {\n        sum = array[i]\
    \ + array[i + 1];\n        if (sum > min && sum % 2 != 0) {\n            min =\
    \ sum;\n        }\n    }\n    long i = 0;\n    while (i < size) {\n        if\
    \ (sum > min) {\n            out.push_back(array[size - 1]);\n            sum\
    \ = sum - array[size - 1];\n            i++;\n        }\n        if (sum < min)\
    \ {\n            out.insert(out.begin(), array[i]);\n            sum = sum + array[i];\n\
    \            i++;\n        }\n    }\n    return out;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    auto sum = std::accumulate(array.begin(), array.end(), 0);\n    if (sum\
    \ % 2 != 0) {\n        std::reverse(array.begin(), array.end());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5en4as_t: /tmp/tmp5en4as_t.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  std::vector<long> v;\n  // Write your code here\n  // std::sort(array.begin(),\
    \ array.end());\n  v.assign(array.begin(), array.end());\n  for (long i=0;i<array.size();++i){\n\
    \    if(array[i] > array[i+1]){\n      std::swap(array[i], array[i+1]);\n    }\n\
    \  }\n  std::sort(v.begin(), v.end());\n  return v;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqyaa6_yx: /tmp/tmpqyaa6_yx.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    // auto arr = array;\n    // for(int i=0; i< array.size();\
    \ i++){\n    //     for(int j=i-1; j>=0; j--){\n    //         if(arr[i] + arr[j]%2==0){\n\
    \    //             long temp = arr[i];\n    //             arr[i] = arr[j];\n\
    \    //             arr[j] = temp;\n    //         }\n    //     }\n    // }\n\
    \    // return arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4219_vsx: /tmp/tmp4219_vsx.cpp:29: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long l1 = array.front();\n    long l2 = array.back();\n    std::vector<long>\
    \ temp;\n    for (long i = 1, j = 1; i < array.size(); i++) {\n        if (array[i]\
    \ <= l1) {\n            temp.push_back(array[i]);\n            j = i;\n      \
    \      l1 = l2;\n        } else if (array[i] > l1) {\n            l1 = array[i];\n\
    \            temp.push_back(l2);\n            l2 = array[j];\n            j =\
    \ i;\n        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> res = array;\n    if (array[0] % 2 != 0) std::swap(res[0],\
    \ res[res.size()-1]);\n    if (res[res.size()-1] % 2 != 0) std::swap(res[res.size()-1],\
    \ res[0]);\n    long sum = 0;\n    long count = 0;\n    for (long &i : res)\n\
    \    {\n        sum += i;\n        count += 1;\n    }\n    int temp = sum;\n \
    \   if (temp % 2 == 0)\n    {\n        for (long &i : res)\n        {\n      \
    \      i /= 2;\n        }\n        for (long &i : res)\n        {\n          \
    \  sum += i;\n            count += 1;\n        }\n    }\n    else\n    {\n   \
    \     for (long &i : res)\n        {\n            i *= 2;\n        }\n       \
    \ for (long &i : res)\n        {\n            sum += i;\n            count +=\
    \ 1;\n        }\n    }\n    if (sum % 2 != 0) std::swap(sum, temp);\n    if (count\
    \ % 2 != 0) std::swap(count, temp);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_8xmb_o9.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_8xmb_o9.cpp:49:42: error: no matching function for call\
    \ to \u2018swap(long int&, int&)\u2019\n   49 |     if (sum % 2 != 0) std::swap(sum,\
    \ temp);\n      |                                          ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_8xmb_o9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:182:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_8xmb_o9.cpp:49:42:\
    \ note:   deduced conflicting types for parameter \u2018_Tp\u2019 (\u2018long\
    \ int\u2019 and \u2018int\u2019)\n   49 |     if (sum % 2 != 0) std::swap(sum,\
    \ temp);\n      |                                          ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/cent"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long int sum = 0;\n    for (long long int i : array)\n        sum\
    \ += i;\n    long long int flag = 0;\n    if (sum % 2 == 0)\n        flag = 1;\n\
    \    else\n        flag = -1;\n    std::vector<long> res = array;\n    for (int\
    \ i = 0; i < res.size(); i++)\n        if (i != 0)\n            res[i] += flag;\n\
    \    if (flag == 1) {\n        for (long long int i : res) {\n            if (i\
    \ < 0)\n                res[i] = -res[i];\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2f3kisgs: /tmp/tmp2f3kisgs.cpp:39: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::sort(array.begin(), array.end());\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpt9keesn5: /tmp/tmpt9keesn5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // code here\n    // std::vector<long> result;\n    // long sum=0;\n\
    \    // for (int i=0; i<array.size(); i++){\n    //     sum+=array[i];\n    //\
    \ }\n    // int a = 0;\n    // int b = 0;\n    // bool flag=0;\n    // for (int\
    \ i=0; i<array.size(); i++){\n    //     if(sum%2==0){\n    //         a+=array[i];\n\
    \    //     }\n    //     else{\n    //         b+=array[i];\n    //     }\n \
    \   //     if(a>b){\n    //         flag=1;\n    //     }\n    //     if(a<b){\n\
    \    //         flag=0;\n    //     }\n    // }\n    // if(flag==1){\n    // \
    \    return result;\n    // }\n    // else{\n    //     return result;\n    //\
    \ }\n    // return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpd72m6u7q: /tmp/tmpd72m6u7q.cpp:47: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    // sort(array.begin(), array.end());\n \
    \   long t = 0;\n    long ans = 0;\n    if (array[0] > array[1]) {\n        std::swap(array[0],\
    \ array[1]);\n    }\n    for (long i = 0; i < array.size(); i++) {\n        t\
    \ += array[i];\n    }\n    if (t % 2 != 0) {\n        std::swap(array[0], array[1]);\n\
    \        std::swap(array[0], array[1]);\n    }\n    long last = 0;\n    for (long\
    \ i = array.size() - 1; i > 0; i--) {\n        if (array[i] > last) {\n      \
    \      ans += array[i + 1] - array[i];\n            array[i + 1] = array[i - 1];\n\
    \            array[i - 1] = last;\n        } else {\n            ans += array[i\
    \ + 1] - array[i - 1];\n            array[i + 1] = array[i];\n            array[i]\
    \ = last;\n        }\n        last++;\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    assert(sum == 0 || sum % 2 == 0);\n    if (sum % 2 == 1) {\n        std::swap(array[0],\
    \ array[array.size() - 1]);\n    }\n    std::sort(array.begin(), array.end());\n\
    \    return array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfgxji157: /tmp/tmpfgxji157.cpp:18: std::vector<long int> sort_array(std::vector<long\
    \ int>): Assertion `sum == 0 || sum % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    if (array.size() <= 1) {\n        return array;\n    }\n    std::vector<long>\
    \ res;\n    auto f = [&array](int x, int y) {\n        int sum = x + y;\n    \
    \    if (sum % 2 == 0) {\n            return std::max(x, y);\n        } else {\n\
    \            return std::min(x, y);\n        }\n    };\n    std::sort(array.begin(),\
    \ array.end(), f);\n    for (int i = 0; i < array.size() - 1; i++) {\n       \
    \ res.push_back(array[i]);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpb4cmt5bx: /tmp/tmpb4cmt5bx.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n  // Your code here\n  if (array.size() == 0)\n    return array;\n  std::vector<long>\
    \ ans;\n  ans.reserve(array.size());\n  for (long i : array) {\n    ans.push_back(i);\n\
    \  }\n\n  std::sort(ans.begin(), ans.end());\n  if (ans.back() == ans.front())\n\
    \    return ans;\n  std::reverse(ans.begin(), ans.end());\n  return ans;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_llyveao: /tmp/tmp_llyveao.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
