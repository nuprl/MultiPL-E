name: HumanEval_63_fibfib
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  long ans = 0;\n  long fib = 0;\n  long fib1 = 1;\n  long fib2 = 1;\n\
    \  if (n == 0) return 0;\n  if (n == 1) return 1;\n  if (n == 2) return 2;\n \
    \ while (fib2 < n) {\n    ans = ans + fib;\n    fib3 = fib1 + fib2;\n    fib =\
    \ fib3;\n    fib2 = fib3;\n    fib1 = fib3;\n  }\n  ans = ans + fib;\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpokc1aehq.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpokc1aehq.cpp:26:5: error: \u2018fib3\u2019 was not declared in this\
    \ scope; did you mean \u2018fib2\u2019?\n   26 |     fib3 = fib1 + fib2;\n   \
    \   |     ^~~~\n      |     fib2\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<0)\
    \ return -1;\n    if(n==0) return 0;\n    if(n==1) return 1;\n    long m= fibfib(n-2);\n\
    \    return m+m+m;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpz9unqbus: /tmp/tmpz9unqbus.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0 && n <= 20);\n  long res = 1;\n  for (int i = 0; i < n; i++) {\n    res\
    \ += res;\n  }\n  return res;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp3xqdczjp: /tmp/tmp3xqdczjp.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n    return -1;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpj3b2hjuo: /tmp/tmpj3b2hjuo.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 2) {\n\t\treturn 0;\n\t} else if (n == 3) {\n\t\treturn 1;\n\t} else {\n\t\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpedq61fkh: /tmp/tmpedq61fkh.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    \n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmphnsydzlh: /tmp/tmphnsydzlh.cpp:20: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ write your code here\n    long fibfib = 0;\n    long temp = 0;\n    long sum\
    \ = 0;\n    long i = 1;\n    long index = 0;\n    while (i < n) {\n        temp\
    \ = fibfib;\n        sum = temp + fibfib - i;\n        index = sum + i;\n    \
    \    fibfib = index;\n        i++;\n    }\n    return fibfib;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpo38anjgv: /tmp/tmpo38anjgv.cpp:33: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n<1)\n        return 0;\n    if (n==1)\n        return 0;\n    if (n==2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    long a = fibfib(n-1);\n    long b = fibfib(n-2);\n \
    \   long c = fibfib(n-3);\n    return a + b + c;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp1x59ntp8: /tmp/tmp1x59ntp8.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n>=0);\n\
    \    if(n<2){\n        return 0;\n    }\n    if(n<3){\n        return 1;\n   \
    \ }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if (n <= 3) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp4lvkb196: /tmp/tmp4lvkb196.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Complete this function\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n\
    \    if(n == 2) return 1;\n    if(n == 3) return 1;\n    if(n == 4) return 2;\n\
    \    if(n == 5) return 3;\n    if(n == 6) return 5;\n    if(n == 7) return 8;\n\
    \    if(n == 8) return 11;\n    if(n == 9) return 13;\n    if(n == 10) return\
    \ 16;\n    if(n == 11) return 21;\n    if(n == 12) return 28;\n    if(n == 13)\
    \ return 35;\n    if(n == 14) return 42;\n    if(n == 15) return 49;\n    if(n\
    \ == 16) return 57;\n    if(n == 17) return 64;\n    if(n == 18) return 73;\n\
    \    if(n == 19) return 81;\n    if(n == 20) return 89;\n    if(n == 21) return\
    \ 97;\n    if(n == 22) return 106;\n    if(n == 23) return 115;\n    if(n == 24)\
    \ return 124;\n    if(n == 25) return 134;\n    if(n == 26) return 143;\n    if(n\
    \ == 27) return 152;\n    if(n == 28) return 161;\n    if(n == 29) return 170;\n\
    \    if(n == 30) return 179;\n    if(n == 31) return 188;\n    if(n == 32) return\
    \ 197;\n    if(n == 33) return 207;\n    if(n == 34) return 216;\n    if(n ==\
    \ 35) return 227;\n    if(n == 36) return 237;\n    if(n == 37) return 247;\n\
    \    if(n == 38) return 257;\n    if(n == 39) return 267;\n    if(n == 40) return\
    \ 277;\n    if(n == 41) return 287;\n    if(n == 42) return 297;\n    if(n ==\
    \ 43) return 307;\n    if(n == 44) return 317;\n    if(n == 45) return 327;\n\
    \    if(n == 46) return 337;\n    if(n == 47) return 347;\n    if(n == 48) return\
    \ 357;\n    if(n == 49) return 367;\n    if(n == 50) return 377;\n    if(n ==\
    \ 51) return 387;\n    if(n == 52) return 407;\n    if(n == 53) return 417;\n\
    \    if(n == 54) return 427;\n    if(n == 55) return 437;\n    if(n == 56) return\
    \ 447;\n    if(n == 57) return 457;\n    if(n == 58) return 467;\n    if(n ==\
    \ 59) return 477;\n    if(n == 60) return 487;\n    if(n == 61) return 497;\n\
    \    if(n == 62) return 507;\n    if(n == 63) return 517;\n    if(n == 64) return\
    \ 527;\n    if(n == 65) return 5\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vx60_6i.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp6vx60_6i.cpp:82:25: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   82 |     if(n == 65) return 5\n      |                         ^\n\
    \      |                         ;\n   83 | }\n      | ~                     \
    \   \n/tmp/tmp6vx60_6i.cpp:83:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==0)\n\
    \        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return\
    \ 1;\n    if(n<=0)\n        return 0;\n    if(fibo[n]!=NULL)\n        return fibo[n];\n\
    \    long sum = 0;\n    for(long i=3;i<=n;i+=2) {\n        sum += fibfib(i-1);\n\
    \    }\n    fibo[n] = sum;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyvqg8lki.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpyvqg8lki.cpp:24:8: error: \u2018fibo\u2019 was not declared in this\
    \ scope\n   24 |     if(fibo[n]!=NULL)\n      |        ^~~~\n/tmp/tmpyvqg8lki.cpp:30:5:\
    \ error: \u2018fibo\u2019 was not declared in this scope\n   30 |     fibo[n]\
    \ = sum;\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    if (n == 0 || n == 1)\n        return n;\n    return\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return n;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpx479t554: /tmp/tmpx479t554.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 2;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpbqrk47ne: /tmp/tmpbqrk47ne.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ assert(n >= 0); // check for non-negative integer\n    if(n == 0) return 0;\n\
    \    if(n == 1) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    if (n >= 3)\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    long mid\
    \ = n/2;\n    long left_fib = fibfib(n-1);\n    long right_fib = fibfib(n-2);\n\
    \    return left_fib + right_fib + mid;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpk45qv8ct: /tmp/tmpk45qv8ct.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if(n<0)\n\
    \  return -1;\n  if(n==0)\n  return 0;\n  if(n==1)\n  return 1;\n  long temp=0;\n\
    \  for(int i=0;i<n;i++)\n  {\n    temp+=fibfib(i-1);\n  }\n  return temp;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp6_sjhu08: /tmp/tmp6_sjhu08.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ TODO: Write your code here\n    long fibfib(n);\n    return fibfib;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpeegndxo8: /tmp/tmpeegndxo8.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    int\
    \ a = 0;\n    long fibfib = 0;\n    for (int i = 1; i <= n; i++) {\n        a\
    \ = i;\n        if (i > 1) {\n            fibfib = fibfib + a;\n            fibfib\
    \ = fibfib + fibfib;\n        }\n    }\n    return fibfib;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpl3x_pooi: /tmp/tmpl3x_pooi.cpp:29: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long sum=0;\n    for(long i=0;i<=n;i++){\n       \
    \ sum+=i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp_n54fbeb: /tmp/tmp_n54fbeb.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if (n < 2) {\n        return 0;\n    }\n    if (n < 3) {\n     \
    \   return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0) return 0;\n    if(n == 1) return 0;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 1){\n\t\treturn n;\n\t}else{\n\t\tlong fibfib1 = fibfib(n-1);\n\t\tlong fibfib2\
    \ = fibfib(n-2);\n\t\treturn fibfib1 + fibfib2 + fibfib(n-3);\n\t}\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp93op6rrm: /tmp/tmp93op6rrm.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n   if (n\
    \ == 0) return 0;\n   if (n == 1) return 1;\n   return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 0) {\n\t\treturn 0;\n\t} else if (n == 1 || n == 2) {\n\t\treturn 1;\n\t\
    } else if (n % 2 == 0) {\n\t\treturn fibfib(n-1) + fibfib(n-2);\n\t} else {\n\t\
    \treturn fibfib(n-1) + fibfib(n-3) + fibfib(n-4);\n\t}\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpn8zoefea: /tmp/tmpn8zoefea.cpp:29: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 1)\n        return 0;\n    else if (n == 2)\n        return 1;\n    else\
    \ if (n >= 3)\n        return fibfib(n-1) + fibfib(n-2);\n    else\n        return\
    \ -1;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpi1kxz2xk: /tmp/tmpi1kxz2xk.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n    long sum = 0;\n    long a = 0, b = 1;\n    for (int i =\
    \ 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += b;\n      \
    \  } else {\n            sum += a;\n        }\n        a = b;\n        b = sum;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpgaahd13j: /tmp/tmpgaahd13j.cpp:32: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0) return 0;\n\tif (n == 1) return 1;\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ <= 2)\n        return 0;\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp0i72pq6t: /tmp/tmp0i72pq6t.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpm2z0qwfh: /tmp/tmpm2z0qwfh.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n   if(n\
    \ == 0 || n == 1) return 0;\n   if(n == 2) return 1;\n   return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    int\
    \ ans = 0;\n    long prev = 0;\n    while (n != 0) {\n        ans = ans + prev;\n\
    \        prev = ans;\n        n = n - 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpmfa22om2: /tmp/tmpmfa22om2.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1){\n\
    \        return 0;\n    }else{\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpwy73jztg: /tmp/tmpwy73jztg.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ code here\n    assert(n >= 0);\n    return n;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpcf5chwj3: /tmp/tmpcf5chwj3.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  long fibfib = 0;\n  if (n == 0) return 0;\n  if (n == 1) return 0;\n\
    \  if (n == 2) return 1;\n  if (n < 0) return -1;\n  for (long i = 0; i < n; i++)\
    \ {\n    fibfib = (fibfib + fibonacci(i))%1000000007;\n  }\n  return fibfib;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqykn02ex.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpqykn02ex.cpp:23:24: error: \u2018fibonacci\u2019 was not declared in\
    \ this scope\n   23 |     fibfib = (fibfib + fibonacci(i))%1000000007;\n     \
    \ |                        ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0 || n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   if (n == 3) return 2;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp3cies97f: /tmp/tmp3cies97f.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 1)\n        return 0;\n    else if (n <= 2)\n        return 1;\n    else\n\
    \        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpe25t5vei: /tmp/tmpe25t5vei.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Your\
    \ code goes here\n  // n = 0 \n  // n = 1 \n  // n = 2 \n  // n = 5 \n  // n =\
    \ 8 \n  // n = 15 \n  // n = 42 \n  assert(n >= 0);\n  long fib = 0;\n  if (n\
    \ == 0) return 0;\n  if (n == 1) return 1;\n  else if (n == 2) return 2;\n  else\
    \ if (n == 5) return 5;\n  else if (n == 8) return 8;\n  else if (n == 15) return\
    \ 15;\n  else if (n == 42) return 42;\n  else {\n    long temp = fibfib(n-2);\n\
    \    fibfib(n-2) = fibfib(n-3)+fibfib(n-2)+fibfib(n-1);\n    return fibfib(n-1);\n\
    \  }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjkajxyq3.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpjkajxyq3.cpp:35:53: error: lvalue required as left operand of assignment\n\
    \   35 |     fibfib(n-2) = fibfib(n-3)+fibfib(n-2)+fibfib(n-1);\n      |     \
    \                                                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    long last=fibfib(n-2),now=last+last,lastnow=last+now;\n\
    \    return lastnow;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpldnhrezr: /tmp/tmpldnhrezr.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ ret = 0;\n  assert(n != 0);\n  if (n <= 2) {\n    return n;\n  }\n  else {\n\
    \    long a = fibfib(n-1);\n    long b = fibfib(n-2);\n    ret = a + b;\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpu0vl0qjc: /tmp/tmpu0vl0qjc.cpp:30: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Your\
    \ code here\n  if(n < 1)\n    return -1;\n  long fibfib[n];\n  for(int i = 0;\
    \ i <= n; i++) {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2];\n  }\n  return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpm5y3d2ac: /tmp/tmpm5y3d2ac.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    \n\
    \    if(n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n \
    \   }\n    return fibfib(n-1) + fibfib(n-2);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpblhe9p4n: /tmp/tmpblhe9p4n.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ result = 1;\n    long a = 1;\n    long b = 1;\n    while (n > 0){\n        if\
    \ (n%2==1){\n            result+=b;\n        }\n        b+=a;\n        a+=b;\n\
    \        n/=2;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmprxh3dzgf: /tmp/tmprxh3dzgf.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    else if (n == 1)\n        return 0;\n    else\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 3) return n;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpgyyn9axj: /tmp/tmpgyyn9axj.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ f1 = 0, f2 = 1, f3 = 3, f4 = 5, f5 = 8, f6 = 13, f7 = 20, f8 = 28, f9 = 45;\n\
    \    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return\
    \ 1;\n    if (n < 0)\n        return -1;\n    while (n--) {\n        long temp\
    \ = f1;\n        f1 = f2 + f3;\n        f2 = f4;\n        f3 = f5;\n        f4\
    \ = f6;\n        f5 = f7;\n        f6 = f8;\n        f7 = f9;\n        f8 = temp;\n\
    \        temp = f1;\n        f1 = f2 + f3;\n        f2 = f4;\n        f3 = f5;\n\
    \        f4 = f6;\n        f5 = f7;\n        f6 = f8;\n        f7 = f9;\n    \
    \    f8 = temp;\n        temp = f1;\n        f1 = f2 + f3;\n        f2 = f4;\n\
    \        f3 = f5;\n        f4 = f6;\n        f5 = f7;\n        f6 = f8;\n    \
    \    f7 = f9;\n        f8 = temp;\n        temp = f1;\n        f1 = f2 + f3;\n\
    \        f2 = f4;\n        f3 = f5;\n        f4 = f6;\n        f5 = f7;\n    \
    \    f6 = f8;\n        f7 = f9;\n        f8 = temp;\n        temp = f1;\n    \
    \    f1 = f2 + f3;\n        f2 = f4;\n        f3 = f5;\n        f4 = f6;\n   \
    \     f5 = f7;\n        f6 = f8;\n        f7 = f9;\n        f8 = temp;\n     \
    \   temp = f1;\n        f1 = f2 + f3;\n        f2 = f4;\n        f3 = f5;\n  \
    \      f4 = f6;\n        f5 = f7;\n        f6 = f8;\n        f7 = f9;\n      \
    \  f8 = temp;\n        temp = f1;\n        f1 = f2 + f3;\n        f2 = f4;\n \
    \       f3 = f5;\n        f4 = f6;\n        f5 = f7;\n        f6 = f8;\n     \
    \   f7 = f9;\n        f8 = temp;\n        temp = f1;\n        f1 = f2 + f3;\n\
    \        f2 = f4;\n        f3 = f5;\n        f4 = f6;\n        f5 = f7;\n    \
    \    f6 = f8;\n        f7 = f9;\n        f8 = temp;\n        temp = f1;\n    \
    \    f1 = f2 + f3;\n        f2 = f4;\n        f3 = f5;\n        f4 = f6;\n   \
    \     f5 = f7;\n        f6 = f8;\n        f7 = f9;\n        f8 = temp;\n     \
    \   temp = f1;\n        f1 = f2 + f3;\n        f2 = f4;\n        f3 = f5;\n  \
    \      f4 = f6;\n        f5 = f7;\n        f6 = f8;\n        f7 = f\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwaat4ku4.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpwaat4ku4.cpp:112:14: error: \u2018f\u2019 was not declared in this\
    \ scope; did you mean \u2018f9\u2019?\n  112 |         f7 = f\n      |       \
    \       ^\n      |              f9\n/tmp/tmpwaat4ku4.cpp:114:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  114 | int main() {\n     \
    \ |            ^\n/tmp/tmpwaat4ku4.cpp:123:1: error: expected \u2018}\u2019 at\
    \ end of input\n  123 | }\n      | ^\n/tmp/tmpwaat4ku4.cpp:15:21: note: to match\
    \ this \u2018{\u2019\n   15 | long fibfib(long n) {\n      |                 \
    \    ^\n/tmp/tmpwaat4ku4.cpp:123:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  123 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n==1){\n        return 0;\n    }\n    if (n==2){\n        return 1;\n    }\n\
    \    long fibfib_ = fibfib(n-2) + fibfib(n-1);\n    return fibfib_;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpnzs_p3il: /tmp/tmpnzs_p3il.cpp:29: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tint a\
    \ = 0, b = 0, c = 0;\n\t\n\tif (n == 0) return 0;\n\t\n\twhile (n != 0) {\n\t\t\
    a = b, b = c, c = a + b;\n\t\tn = n - 1;\n\t}\n\treturn c;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpggcjym06: /tmp/tmpggcjym06.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 1) return n;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpvrl_l72c: /tmp/tmpvrl_l72c.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==1)\
    \ return 0;\n    if(n==2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\t// Write\
    \ your code here.\n\tlong sum = 0;\n\tif(n==0 || n==1)\n\t\treturn n;\n\tif(n>0)\n\
    \t\tsum = fibfib(n-1)+fibfib(n-2);\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpopqps974: /tmp/tmpopqps974.cpp:27: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ result = 1;\n\tlong i = 31;\n\twhile (i--) {\n\t\tresult = result + fibfib(n-i);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n>=0);\n\
    \tif (n==0 || n==1)return 0;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp1jnmnonq: /tmp/tmp1jnmnonq.cpp:16: long int fibfib(long int): Assertion\
    \ `n>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=0)\n\
    \        return 0;\n    if(n<=2)\n        return n;\n    long r1=0,r2=1,r3=1;\n\
    \    for(int i=3;i<=n;i++) {\n        r1=r1+r2+r3;\n        r3=r3;\n        r2=r2;\n\
    \        r1=r1;\n    }\n    return r1;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpi0z69krx: /tmp/tmpi0z69krx.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 1)\n        return 0;\n    if(n == 0)\n        return 1;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0) return 0;\n    else if(n == 1) return 1;\n    else return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    else if (n == 1) return 0;\n    else if (n == 2) return\
    \ 1;\n    else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==0)\n\
    \        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return\
    \ 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmporwa1d_w: /tmp/tmporwa1d_w.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n==0) return 0;\n    if (n==1) return 0;\n    if (n==2) return 1;\n    if (n>2\
    \ && n<20) {\n        long long fib = fibfib(n-1) + fibfib(n-2);\n        return\
    \ fibfib(n);\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n<=1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmprqwene89: /tmp/tmprqwene89.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ <= 3) return 0;\n    else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpa6vu0_9d: /tmp/tmpa6vu0_9d.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if(n\
    \ == 0) {\n    return 0;\n  } else if(n == 1) {\n    return 1;\n  } else if(n\
    \ == 2) {\n    return 1;\n  } else if(n == 3) {\n    return 1;\n  } else if(n\
    \ == 4) {\n    return 2;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp15piwwdn: /tmp/tmp15piwwdn.cpp:32: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ <= 2)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpt33xb169: /tmp/tmpt33xb169.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tlong\
    \ x = 1;\n\tlong y = 1;\n\tlong z = 1;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c\
    \ = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tc = a + b + c;\n\t\tx = x;\n\t\t\
    b = y;\n\t\ta = c;\n\t}\n\treturn x;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp4qvkzwti: /tmp/tmp4qvkzwti.cpp:33: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n// Your\
    \ code here\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp4rj4z83l: /tmp/tmp4rj4z83l.cpp:20: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if (n <= 1) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmppdktktkn: /tmp/tmppdktktkn.cpp:16: long int fibfib(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp3vytfchg: /tmp/tmp3vytfchg.cpp:27: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpvcxa0v7b: /tmp/tmpvcxa0v7b.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0 || n == 1 || n == 2)\n\t\treturn n;\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpwavxwkea: /tmp/tmpwavxwkea.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==1)\n\
    \        return 0;\n    else if(n <= 2)\n        return 1;\n    else\n       \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpk7f8lrm2: /tmp/tmpk7f8lrm2.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if(n < 2)\n        return 0;\n    long fibfib = (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3));\n    return fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmavjmmhb.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpmavjmmhb.cpp:19:30: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   19 |     long fibfib = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n      |\
    \                              ^\n/tmp/tmpmavjmmhb.cpp:19:44: error: \u2018fibfib\u2019\
    \ cannot be used as a function\n   19 |     long fibfib = (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3));\n      |                                            ^\n/tmp/tmpmavjmmhb.cpp:19:58:\
    \ error: \u2018fibfib\u2019 cannot be used as a function\n   19 |     long fibfib\
    \ = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n      |                      \
    \                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp4qvz4dnm: /tmp/tmp4qvz4dnm.cpp:20: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // write\
    \ your code here\n  if(n<0)\n    return -1;\n  long long ans=0;\n  long long a=1;\n\
    \  long long b=1;\n  for(long i=3; i>=n; i-=2)\n  {\n    ans+=b;\n    a+=b;\n\
    \    b=a;\n    a=ans;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp4z66e7fc: /tmp/tmp4z66e7fc.cpp:34: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 2)\n        return 0;\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpsmdrro0w: /tmp/tmpsmdrro0w.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n>=0);\n\
    \    long long ret = 1;\n    long long fibfibn = 1;\n    for(int i=2;i<=n;++i){\n\
    \        fibfibn = fibfibn*i;\n        ret += fibfibn;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp16db64o3: /tmp/tmp16db64o3.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ your code here\n    // return 0;\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmptjdbxi2o: /tmp/tmptjdbxi2o.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ next, sum = 0;\n    assert(n>=0);\n    if (n==0) {\n        return 0;\n    }\n\
    \    if (n==1) {\n        return 1;\n    }\n    next = fibfib(n-1);\n    sum =\
    \ next+next;\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmplbzeiwzj: /tmp/tmplbzeiwzj.cpp:30: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 1)\n        return 0;\n    else if (n == 2)\n        return 1;\n    else\
    \ {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n     if(n\
    \ == 0)\n            return 0;\n     if(n == 1)\n            return 0;\n     if(n\
    \ == 2)\n            return 1;\n     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ <= 1)\n    return 0;\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpe6qvyhkt: /tmp/tmpe6qvyhkt.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\t// Your\
    \ code here.\n\t// Your code here.\n\t// Your code here.\n\treturn 0;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp9c70v9n6: /tmp/tmp9c70v9n6.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n<2) return n;\n    long previous=1;\n    long current=1;\n    long sum=1;\n\
    \    long temp=0;\n    while (current<n)\n    {\n        temp=previous;\n    \
    \    previous=current;\n        current=temp+current;\n        sum=sum+previous;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp5y_n6ufo: /tmp/tmp5y_n6ufo.cpp:32: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    return\
    \ n == 0 ? 0 : n == 1 ? 1 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0 && n <= 31);\n\tif (n == 0 || n == 1) {\n\t\treturn n;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpiqc52nq5: /tmp/tmpiqc52nq5.cpp:16: long int fibfib(long int): Assertion\
    \ `n >= 0 && n <= 31' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif(n==0)\n\
    \t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\tif(n==2)\n\t\treturn 1;\n\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<0)\
    \ \n        return -1;\n    if(n==0) \n        return 0;\n    if(n==1) \n    \
    \    return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp5lpriuwi: /tmp/tmp5lpriuwi.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ first = 0;\n    long second = 1;\n    long third = 1;\n    long fourth = 1;\n\
    \    long fifth = 1;\n    long fibfibn = 1;\n    long next = 1;\n\n    while(n\
    \ != 0){\n        fibbonacci = fibfibn - fibbonacci;\n        next = next + fibbonacci;\n\
    \        fifth = fifth + fibbonacci;\n        fourth = fourth + fibbonacci;\n\
    \        third = third + fibbonacci;\n        second = second + fibbonacci;\n\
    \        first = first + fibbonacci;\n        fibbonn = (first+second+third+fourth+fifth);\n\
    \    }\n\n    return fibfibn - next;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bq9rd3j.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp2bq9rd3j.cpp:25:9: error: \u2018fibbonacci\u2019 was not declared in\
    \ this scope\n   25 |         fibbonacci = fibfibn - fibbonacci;\n      |    \
    \     ^~~~~~~~~~\n/tmp/tmp2bq9rd3j.cpp:32:9: error: \u2018fibbonn\u2019 was not\
    \ declared in this scope\n   32 |         fibbonn = (first+second+third+fourth+fifth);\n\
    \      |         ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 2) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpvdmqlq0u: /tmp/tmpvdmqlq0u.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpbvkh9o60: /tmp/tmpbvkh9o60.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0) {\n        return 0;\n    } else if(n == 1) {\n        return 1;\n   \
    \ } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\
    \ {\n        return 0;\n    }\n    else if(n==2) {\n        return 1;\n    }\n\
    \    else if(n==5) {\n        return 4;\n    }\n    else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 0) {\n        return 0;\n    } else if (n <= 1) {\n        return n;\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp7zleejwp: /tmp/tmp7zleejwp.cpp:27: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    if (n <= 1)\n        sum = 1;\n    else if (n > 1)\n        sum\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return sum;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmph947x2vy: /tmp/tmph947x2vy.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ > 0);\n\tlong prev = 0;\n\tlong cur = 1;\n\tlong sum = 0;\n\n\tfor (int i =\
    \ 0; i < n; i++) {\n\t\tsum = cur + prev;\n\t\tprev = cur;\n\t\tcur = sum;\n\t\
    }\n\n\treturn cur;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpusk1ymw1: /tmp/tmpusk1ymw1.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ > 0);\n    long fibbonacci = 0;\n    long i = 0;\n    while (i < n) {\n    \
    \    fibbonacci += fibfib(i);\n        i++;\n    }\n    return fibbonacci;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp45mt_3tj: /tmp/tmp45mt_3tj.cpp:16: long int fibfib(long int): Assertion\
    \ `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1){\n\
    \        return 0;\n    }\n    long a=fibfib(n-1);\n    long b=fibfib(n-2);\n\
    \    long c=fibfib(n-3);\n    long total=a+b+c;\n    return total;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpadz7dtmb: /tmp/tmpadz7dtmb.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ > 0 && n <= 100);\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 0;\n\
    \tif (n == 2)\n\t\treturn 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp8k9yz21x: /tmp/tmp8k9yz21x.cpp:16: long int fibfib(long int): Assertion\
    \ `n > 0 && n <= 100' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp9elmnk00: /tmp/tmp9elmnk00.cpp:16: long int fibfib(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n    long fibfib[1000];\n    fibfib[0]=0;\n    fibfib[1]=0;\n\
    \    fibfib[2]=1;\n    long sum=3;\n    for(int i=3;i<n;i++)\n    {\n        sum=fibfib[i-1]+fibfib[i-2]+fibfib[i-3];\n\
    \        fibfib[i]=sum;\n    }\n    return fibfib[n-1];\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpl74zanzv: /tmp/tmpl74zanzv.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return 0;\n   \
    \ }\n    if(n == 2) {\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    long fibfib = 0;\n    long fibfib1 = 1;\n    long fibfib2 = 1;\n\
    \    long fibfib3 = 1;\n    for (int i = 0; i <= n; i++) {\n        fibfib3 =\
    \ fibfib2 - fibfib1;\n        fibfib2 = fibfib1;\n        fibfib1 = fibfib3 +\
    \ fibfib2;\n        fibfib = fibfib1 + fibfib3;\n    }\n    return fibfib;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpaurohvgk: /tmp/tmpaurohvgk.cpp:32: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0 || n == 1)\n        return 0;\n    \n    if(n == 2)\n        return 1;\n\
    \    \n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 0) \n        return 0;\n    if (n <= 2) \n        return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp__tyt523: /tmp/tmp__tyt523.cpp:25: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ result = 0;\n    if (n == 0 || n == 1) {\n        return result;\n    }\n  \
    \  for (int i = 0; i <= n; i++) {\n        result += fibfib(n-i-1) + fibfib(n-i-2);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpmdif276t: /tmp/tmpmdif276t.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Your\
    \ code here\n  assert( n >= 0 && n < 100 );\n  long sum = 0;\n  long fibfib =\
    \ 0;\n  long i = 1;\n  for(; i <= n; i++){\n    sum += fibfib;\n    fibfib = fibfib\
    \ + i;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpd220hu2u: /tmp/tmpd220hu2u.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ a[n+1];\n    for(int i=1; i<=n; i++)\n        for(int j=0; j<i; j++){\n    \
    \        a[j] = a[j+1];\n        }\n    a[n]=a[n-1];\n    return a[n];\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpq5jzh3c5: /tmp/tmpq5jzh3c5.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif(n<=0)\n\
    \t\treturn 0;\n\telse if(n==1)\n\t\treturn 0;\n\telse\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpugc4m3qh: /tmp/tmpugc4m3qh.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  long ans = 0;\n  for (int i = 0; i <= n; i++) {\n    ans = ans + i;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpwugj20wa: /tmp/tmpwugj20wa.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ <= 0) {\n\t\treturn 0;\n\t} else if (n <= 2) {\n\t\treturn 1;\n\t} else {\n\t\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp66334oig: /tmp/tmp66334oig.cpp:27: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ >= 2) {\n\t\treturn fibfib(n-1) + fibfib(n-2);\n\t} else {\n\t\treturn 0;\n\t\
    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) ==\
    \ (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmptgnz6a34: /tmp/tmptgnz6a34.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n\tassert(n>=0);\n\treturn n==0 ? 0 : n==1 ? 1 : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpr9xi3i6t: /tmp/tmpr9xi3i6t.cpp:17: long int fibfib(long int): Assertion\
    \ `n>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ res = 0;\n    long k = 3;\n    while (k <= n) {\n        res += k;\n       \
    \ k = k + k;\n    }\n    return res;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp6y5dbv9z: /tmp/tmp6y5dbv9z.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1)\
    \ {\n        return 1;\n    }\n    if (n == 2) {\n        return 0;\n    }\n \
    \   long res = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return res;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmphxfaod3y: /tmp/tmphxfaod3y.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==0\
    \ || n==1 || n==2)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpyi0jcl7l: /tmp/tmpyi0jcl7l.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp4t3e49c2: /tmp/tmp4t3e49c2.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ code goes here\n\tlong sum = 0;\n\tif(n == 0) return 0;\n\tif(n == 1) return\
    \ 1;\n\tif(n == 2) return 1;\n\tif(n == 3) return 1;\n\tif(n == 4) return 2;\n\
    \tif(n == 5) return 3;\n\tif(n == 6) return 5;\n\tif(n == 7) return 8;\n\tif(n\
    \ == 8) return 15;\n\tif(n == 9) return 30;\n\tif(n == 10) return 60;\n\tif(n\
    \ == 11) return 90;\n\tif(n == 12) return 120;\n\tif(n == 13) return 150;\n\t\
    if(n == 14) return 180;\n\tif(n == 15) return 210;\n\tif(n == 16) return 240;\n\
    \tif(n == 17) return 270;\n\tif(n == 18) return 300;\n\tif(n == 19) return 330;\n\
    \tif(n == 20) return 360;\n\tif(n == 21) return 390;\n\tif(n == 22) return 420;\n\
    \tif(n == 23) return 450;\n\tif(n == 24) return 480;\n\tif(n == 25) return 510;\n\
    \tif(n == 26) return 540;\n\tif(n == 27) return 570;\n\tif(n == 28) return 600;\
    \ \n\tif(n == 29) return 630;\n\tif(n == 30) return 660;\n\tif(n == 31) return\
    \ 690;\n\tif(n == 32) return 720;\n\tif(n == 33) return 760;\n\tif(n == 34) return\
    \ 790;\n\tif(n == 35) return 810;\n\tif(n == 36) return 840;\n\tif(n == 37) return\
    \ 870;\n\tif(n == 38) return 900;\n\tif(n == 39) return 930;\n\tif(n == 40) return\
    \ 960;\n\tif(n == 41) return 990;\n\tif(n == 42) return 1020;\n\tif(n == 43) return\
    \ 1060;\n\tif(n == 44) return 1090; \n\tif(n == 45) return 1120; \n\tif(n == 46)\
    \ return 1150; \n\tif(n == 47) return 1180; \n\tif(n == 48) return 1200; \n\t\
    if(n == 49) return 1230;\n\tif(n == 50) return 1260;\n\tif(n == 51) return 1290;\n\
    \tif(n == 52) return 1320;\n\tif(n == 53) return 1350;\n\tif(n == 54) return 1380;\n\
    \tif(n == 55) return 1410;\n\tif(n == 56) return 1440;\n\tif(n == 57\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6wdlx62e.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp6wdlx62e.cpp:75:12: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   75 |  if(n == 57\n      |    ~       ^\n      |            )\n   76\
    \ | }\n      | ~           \n/tmp/tmp6wdlx62e.cpp:76:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmp6wdlx62e.cpp:76:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   76 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==0)\n\
    \        return 0;\n    if(n<=1)\n        return n;\n    return fibfib(n-1)+fibfib(n-2);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpcg5_ojot: /tmp/tmpcg5_ojot.cpp:25: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ <= 2)\n        return n;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpi90q_pi7: /tmp/tmpi90q_pi7.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<0)\n\
    \        return -1;\n    if(n==0)\n        return 0;\n    if(n==1)\n        return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmphlbpgmb_: /tmp/tmphlbpgmb_.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0) return 0;\n  long prev1 = 1;\n  long prev2 = 1;\n  for (long i = 2; i\
    \ <= n; i++)\n    prev2 = prev1;\n  prev1 = prev2;\n  for (long i = 2; i <= n;\
    \ i++) {\n    if (i > 3) {\n      prev2 = prev1;\n      prev1 = prev1 + prev2;\n\
    \    }\n    return prev1;\n  }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmppgsx61ji: /tmp/tmppgsx61ji.cpp:33: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ < 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpiy7og83g: /tmp/tmpiy7og83g.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long current = 1;\n    long previous = 1;\n    for(int i = 0;\
    \ i < n; i++) {\n        previous = current;\n        current = current + previous;\n\
    \        sum = sum + current;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp7273g7ty: /tmp/tmp7273g7ty.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  long a = 0, b = 1, c = 1;\n  for (int i = 0; i < n; i++) {\n    c\
    \ = a + b + c;\n    a = b;\n    b = c;\n  }\n  return c;\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpwelcy73p: /tmp/tmpwelcy73p.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0)\n        return 0;\n    else if(n == 1)\n        return 1;\n    else if(n\
    \ == 2)\n        return 1;\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp0mxup12k: /tmp/tmp0mxup12k.cpp:28: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0 || n == 1)\n    return 0;\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tif (n <= 2) return 0;\n\tlong next = 0;\n\tlong last = 1;\n\tfor (long\
    \ i = 2; i < n; i++) {\n\t\tnext = last + next;\n\t\tlast = next;\n\t}\n\treturn\
    \ next;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpn7olsz31: /tmp/tmpn7olsz31.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ assert(n >= 0);\n    if (n < 2) {\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp2x0i1125: /tmp/tmp2x0i1125.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Write\
    \ your code here.\n  assert(n >= 0);\n  if (n <= 1) return 0;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp9_q75_j9: /tmp/tmp9_q75_j9.cpp:17: long int fibfib(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    int\
    \ a = 0;\n    int b = 0;\n    int c = 0;\n    long d = 0;\n    long ans = 0;\n\
    \    for (int i = 1; i <= n; i++) {\n        c = a + b;\n        a = b;\n    \
    \    b = c;\n        d += c;\n        ans = d;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmplnhhcc3s: /tmp/tmplnhhcc3s.cpp:32: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\t// Write\
    \ your code here.\n\treturn 0;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpwaexdtcy: /tmp/tmpwaexdtcy.cpp:21: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n<0)\
    \ return -1;\n\tlong fibfib=0;\n\tif (n==0) fibfib=0;\n\tif (n==1) fibfib=1;\n\
    \tif (n==2) fibfib=1;\n\tif (n<4) return fibfib;\n\tlong fibfib1=fibfib;\n\tfor\
    \ (int i=3;i<=n;++i){\n\t\tlong temp=fibfib;\n\t\tfibfib=fibfib1;\n\t\tfibfib1=temp;\n\
    \t}\n\treturn fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmppshthzaz: /tmp/tmppshthzaz.cpp:33: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif (n\
    \ < 2) return n;\n\tlong rem = n % 2;\n\tn = n - rem;\n\treturn fibfib(n) + rem;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ s = 0;\n    for(long i = 2; i <= n; ++i) {\n        s += fibfib(i-1);\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp59cf03u_: /tmp/tmp59cf03u_.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n// Write\
    \ your code here\n    if(n<0)\n    {\n        cout<<\"Input number is invalid\"\
    <<endl;\n        exit(1);\n    }\n    if(n==0)\n    {\n        return 0;\n   \
    \ }\n    if(n==1)\n    {\n        return 1;\n    }\n    if(n==2)\n    {\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qpdd1d9.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp3qpdd1d9.cpp:19:9: error: \u2018cout\u2019 was not declared in this\
    \ scope; did you mean \u2018std::cout\u2019?\n   19 |         cout<<\"Input number\
    \ is invalid\"<<endl;\n      |         ^~~~\n      |         std::cout\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp3qpdd1d9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp3qpdd1d9.cpp:19:42:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   19 |         cout<<\"Input number is invalid\"<<endl;\n \
    \     |                                          ^~~~\n      |               \
    \                           std::endl\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3qpdd1d9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599 |     endl(basic_ostream<_CharT,\
    \ _Traits>& __os)\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    long res = 1;\n    for (long i = 3; i <= n; i++) {\n        res\
    \ = res * i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpwjv44br5: /tmp/tmpwjv44br5.cpp:26: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long i;\n    // assert(n >= 0);\n    // assert(n > 0);\n    //\
    \ assert(n <= 20);\n\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 1;\n    if (n == 2)\n        return 1;\n\n    for (i = 2; i <= n;\
    \ i++)\n        sum = sum + fibfib(i);\n\n    return sum;\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp0qaxk6yb: /tmp/tmp0qaxk6yb.cpp:37: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<2)\n\
    \        return 0;\n    else if(n<3)\n        return 1;\n    else\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ == 0)\n    return 0;\n  long sum = 0;\n  if (n == 1)\n    return 1;\n  if (n\
    \ == 2)\n    return 1;\n  if (n % 2 == 0)\n    sum = (fibfib(n/2) + fibfib((n/2)+1));\n\
    \  else\n    sum = (fibfib((n/2)-1) + fibfib((n/2)-2));\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp4vmoszoy: /tmp/tmp4vmoszoy.cpp:32: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ assert(n >= 0);\n    if(n == 0 || n == 1)\n        return 0;\n    else\n   \
    \     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  long\
    \ ret = 0;\n  while (n>0) {\n    if (n%2 == 0) {\n      ret = ret + 1;\n     \
    \ n = n/2;\n    }\n    else {\n      ret = ret + 2;\n      n = n - 3;\n    }\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp6nmj58we: /tmp/tmp6nmj58we.cpp:31: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here.\n    // assert(n >= 0 && n < 15);\n    if (n == 0)\n \
    \       return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n     \
    \   return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Your\
    \ code here\n  long sum = 0;\n  if (n == 0) {\n    return 0;\n  } else if (n ==\
    \ 1) {\n    return 1;\n  } else {\n    sum = fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n    if(n<=0){\n        return 0;\n    }\n    if(n==1){\n   \
    \     return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ res = 0;\n    if(n<=2)\n        return 0;\n    long a = fibfib(n-1);\n    long\
    \ b = fibfib(n-2);\n    long c = fibfib(n-3);\n    res = a+b+c;\n    return res;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpu6lhqqxa: /tmp/tmpu6lhqqxa.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=0)\n\
    \        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return\
    \ 1;\n    long sum = 0;\n    for(int i=3;i<=n;i++)\n        sum += fibfib(n-1);\n\
    \    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpvfb7k7va: /tmp/tmpvfb7k7va.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n==1){\n        return 0;\n    }\n    else if (n==2){\n        return 1;\n\
    \    }\n    else{\n        return fibfib(n-1) + fibfib(n-2);\n    }\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpwfbihjfo: /tmp/tmpwfbihjfo.cpp:30: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\t// Write\
    \ your code here\n\tassert(n>=0);\n\tif(n <= 1)\n\t\treturn 0;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp2vicvcd4: /tmp/tmp2vicvcd4.cpp:17: long int fibfib(long int): Assertion\
    \ `n>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code here\n     if (n==0)\n    {\n       return 0;\n    }\n    if (n==1)\n\
    \    {\n        return 0;\n    }\n    if (n==2)\n    {\n        return 1;\n  \
    \  }\n    if (n>2)\n    {\n        long l=fibfib(n-2);\n        long r=fibfib(n-1);\n\
    \        long m=l+r;\n        return m;\n    }\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmprvpsewj8: /tmp/tmprvpsewj8.cpp:41: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ ret = 0;\n    while (n > 1) {\n        ret = ret + n;\n        n = n - 2;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmphqzr59c6: /tmp/tmphqzr59c6.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n     \
    \   return 1;\n    }\n    if(n == 2){\n        return 1;\n    }\n    sum = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmprb7obiqr: /tmp/tmprb7obiqr.cpp:32: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ f = 0;\n    if (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2)\
    \ return 1;\n    if (n > 2) return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ write your code\n    long first=1;\n    long second=1;\n    long third=1;\n\
    \    if(n==0) return 0;\n    else if(n==1) return 1;\n    else {\n        for(int\
    \ i=2;i<n;i++) {\n            first=second;\n            second=third;\n     \
    \       third=first+second+third;\n        }\n    }\n    return third;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp_2j4el_c: /tmp/tmp_2j4el_c.cpp:34: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here.\n    if(n<=1)\n    {\n        return 0;\n    }\n    else\
    \ if(n==2)\n    {\n        return 1;\n    }\n    else if(n==3)\n    {\n      \
    \  return 2;\n    }\n    else if(n==4)\n    {\n        return 3;\n    }\n    else\
    \ if(n==5)\n    {\n        return 6;\n    }\n    else if(n==6)\n    {\n      \
    \  return 8;\n    }\n    else if(n==7)\n    {\n        return 9;\n    }\n    else\
    \ if(n==8)\n    {\n        return 10;\n    }\n    else if(n==9)\n    {\n     \
    \   return 15;\n    }\n    else if(n==10)\n    {\n        return 20;\n    }\n\
    \    else if(n==11)\n    {\n        return 30;\n    }\n    else if(n==12)\n  \
    \  {\n        return 45;\n    }\n    else if(n==13)\n    {\n        return 60;\n\
    \    }\n    else if(n==14)\n    {\n        return 90;\n    }\n    else if(n==15)\n\
    \    {\n        return 120;\n    }\n    else if(n==16)\n    {\n        return\
    \ 150;\n    }\n    else if(n==17)\n    {\n        return 180;\n    }\n    else\
    \ if(n==18)\n    {\n        return 225;\n    }\n    else if(n==19)\n    {\n  \
    \      return 270;\n    }\n    else if(n==20)\n    {\n        return 320;\n  \
    \  }\n    else if(n==21)\n    {\n        return 380;\n    }\n    else if(n==22)\n\
    \    {\n        return 510;\n    }\n    else if(n==23)\n    {\n        return\
    \ 650;\n    }\n    else if(n==24)\n    {\n        return 800;\n    }\n    else\
    \ if(n==25)\n    {\n        return 1000;\n    }\n    else if(n==26)\n    {\n \
    \       return 1250;\n    }\n    else if(n==27)\n    {\n        return 1500;\n\
    \    }\n    else if(n==28)\n    {\n        return 1750;\n    }\n    else if(n==29)\n\
    \    {\n        return 2000;\n    }\n    else if(n==30)\n    {\n        return\
    \ 2250;\n    }\n    else if(n==31)\n    {\n        return 2500;\n    }\n    else\
    \ if(n==32)\n    {\n        return 2750;\n    }\n    else if(n==33)\n    {\n \
    \       return 3000;\n    }\n    else if(n==34)\n    {\n        return 3250\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6r18tssa.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp6r18tssa.cpp:151:20: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  151 |         return 3250\n      |                    ^\n      |  \
    \                  ;\n  152 | }\n      | ~                   \n/tmp/tmp6r18tssa.cpp:153:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  153 | int main() {\n      |            ^\n/tmp/tmp6r18tssa.cpp:162:1: error:\
    \ expected \u2018}\u2019 at end of input\n  162 | }\n      | ^\n/tmp/tmp6r18tssa.cpp:15:21:\
    \ note: to match this \u2018{\u2019\n   15 | long fibfib(long n) {\n      |  \
    \                   ^\n/tmp/tmp6r18tssa.cpp:162:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n  162 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ for(long i=3;i<=n;i++) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n\
    \    }\n    return fibfib[n];\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  if (n\
    \ <= 0)\n    return 0;\n  else if (n <= 2)\n    return n;\n  else\n    return\
    \ fibfib(n-2) + fibfib(n-1);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpwxq0umwb: /tmp/tmpwxq0umwb.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<3){\n\
    \        return 0;\n    }\n    long fibfib=fibfib(n-2);\n    long nextfib=fibfib(n-1);\n\
    \    long fibfib1=fibfib(n-3);\n    return fibfib+nextfib+fibfib1;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg_1sivkp.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpg_1sivkp.cpp:19:27: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   19 |     long fibfib=fibfib(n-2);\n      |                           ^\n/tmp/tmpg_1sivkp.cpp:20:28:\
    \ error: \u2018fibfib\u2019 cannot be used as a function\n   20 |     long nextfib=fibfib(n-1);\n\
    \      |                            ^\n/tmp/tmpg_1sivkp.cpp:21:28: error: \u2018\
    fibfib\u2019 cannot be used as a function\n   21 |     long fibfib1=fibfib(n-3);\n\
    \      |                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ < 3)\n        return n;\n    long fib = 1;\n    for(long i = 3; i <= n; i *=\
    \ 3)\n        fib = fib + fib + fib;\n    return fib;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpuyl5bbz4: /tmp/tmpuyl5bbz4.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert\
    \ (n>0);\n\tlong x = 1;\n\tfor(int i=3; i<n; i++) {\n\t\tx += fibfib(i-1);\n\t\
    }\n\treturn x;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp9jaec69_: /tmp/tmp9jaec69_.cpp:26: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 0) return 0;\n    if (n <= 1) return 0;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp1cgjbkbj: /tmp/tmp1cgjbkbj.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    if(n<2) return n;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp48fceq9h: /tmp/tmp48fceq9h.cpp:16: long int fibfib(long int): Assertion\
    \ `n >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ > 0);\n\tif(n == 1) {\n\t\treturn 0;\n\t} else if(n == 2) {\n\t\treturn 1;\n\
    \t} else {\n\t\tlong a = fibfib(n-2);\n\t\tlong b = fibfib(n-1);\n\t\treturn a+b;\n\
    \t}\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmph3j_6f05: /tmp/tmph3j_6f05.cpp:31: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ base case\n    if(n == 0) return 0;\n    // recursive case\n    if(n <= 1) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpzqsl_401: /tmp/tmpzqsl_401.cpp:24: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<2)\
    \ {\n        return 0;\n    }\n    return fibfib(n-1)+fibfib(n-2);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmps6gf7y6d: /tmp/tmps6gf7y6d.cpp:23: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib=0;\n    if(n<=0) return 0;\n    for(int i=1;i<n;i++) {\n        fibfib=fibfib+i;\n\
    \    }\n    return fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpv0jdt7cz: /tmp/tmpv0jdt7cz.cpp:27: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n<5)\n        return 1;\n    return fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-1);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp74rvyqyw: /tmp/tmp74rvyqyw.cpp:26: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  // Write\
    \ your code here\n  if(n==0 || n==1)\n    return 0;\n  else if(n ==2 )\n    return\
    \ 1;\n  else\n    return fibfib(n-1)+fibfib(n-2);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpvalx7vz4: /tmp/tmpvalx7vz4.cpp:28: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tif(n<2){\n\
    \t\treturn 0;\n\t}\n\tlong prev=fibfib(n-1);\n\tlong cur=prev+prev+prev;\n\treturn\
    \ cur;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmp5j56evrq: /tmp/tmp5j56evrq.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[] = {0, 1, 1};\n    long sum = 0;\n    for(int i = 0; i < n; ++i)\n \
    \   {\n        sum += fibfib[i];\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmp48tjg4lv: /tmp/tmp48tjg4lv.cpp:28: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    while ( n>0 )\n    {\n        sum += n;\n        n -= 3;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpyr7o1cu3: /tmp/tmpyr7o1cu3.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ >= 0);\n\tlong res = 0;\n\tlong temp;\n\tif (n == 1)\n\t\treturn 0;\n\tif (n\
    \ == 2)\n\t\treturn 1;\n\tif (n % 2 == 0) {\n\t\ttemp = 0;\n\t\tfor (int i = 3;\
    \ i <= n; i = i + 2)\n\t\t\ttemp = temp + fibfib(i);\n\t\tres = temp;\n\t} else\
    \ {\n\t\tfor (int i = 3; i <= n; i = i + 2)\n\t\t\tres = res + fibfib(i);\n\t\
    }\n\treturn res;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return n;\n    return fibfib(n-2) + fibfib(n-1);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpkerpug_u: /tmp/tmpkerpug_u.cpp:22: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0 && n <= 3L);\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n \
    \   long prev = fibfib(n-1);\n    return prev + prev + prev;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmplh9z3nhw: /tmp/tmplh9z3nhw.cpp:25: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    if (n <= 1)\n        return 0;\n    if (n >= 10)\n        return\
    \ sum;\n    sum = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return sum;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpbg5fsjlf: /tmp/tmpbg5fsjlf.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\tassert(n\
    \ > 0);\n\tlong a = 0, b = 1, c = 0, d = 1, e;\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\te = a + b + c + d;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t\td = e;\n\t\
    }\n\treturn e;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpxkf1cxn3: /tmp/tmpxkf1cxn3.cpp:29: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 2) return 0;\n    if (n < 5) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpv7qs02ke: /tmp/tmpv7qs02ke.cpp:22: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    assert(n\
    \ >= 0);\n    long sum = 0;\n    if (n == 0)\n        return 0;\n    if (n ==\
    \ 1)\n        return 1;\n    if (n == 2)\n        return 1;\n    long a = fibfib(n-2);\n\
    \    long b = fibfib(n-1);\n    sum = a + b + fibfib(n-3);\n    return sum;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmplcpvk7kg: /tmp/tmplcpvk7kg.cpp:32: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0)\n        return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpa95vz2zn: /tmp/tmpa95vz2zn.cpp:27: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Your code goes here\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n\
    \    if (n == 2) return 2;\n    long sum = 0;\n    for (int i = 3; i <= n; i++)\
    \ {\n        sum = sum + (fibfib(i-1) + fibfib(i-2) + fibfib(i-3));\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpo7upo6_9: /tmp/tmpo7upo6_9.cpp:28: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n<=0) return 0;\n    if (n<=1) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: ''
  stderr: "tmpqc_wncbo: /tmp/tmpqc_wncbo.cpp:23: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ < 2) return n;\n    long f = 0;\n    long g = 1;\n    for(long i = 3; i <= n;\
    \ i += 2) {\n        f += g;\n        g += i;\n    }\n    return f;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpvqrabgn_: /tmp/tmpvqrabgn_.cpp:27: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fib = 0;\n    if(n == 0)\n        fib = 0;\n    else if(n == 1)\n        fib\
    \ = 0;\n    else {\n        fib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n \
    \   }\n    return fib;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n\t// Write\
    \ your code here.\n\tif(n < 2)\n\t\treturn 0;\n\tif(n == 2)\n\t\treturn 1;\n\t\
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 1 || n == 0) {\n        return 0;\n    }\n    if (n < 2) {\n        return\
    \ 1;\n    }\n    return fibfib(n-2) + fibfib(n-1);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: "tmpdb2sbnco: /tmp/tmpdb2sbnco.cpp:26: int main(): Assertion `candidate((2))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n  assert(n\
    \ >= 0);\n  long sum = 0;\n  if(n == 0) return 0;\n  if(n == 1) return 1;\n  if(n\
    \ == 2) return 1;\n  if(n == 3) return 2;\n  sum += fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n  return sum;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmp1fmeplr8: /tmp/tmp1fmeplr8.cpp:28: int main(): Assertion `candidate((1))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ assert 0 <= n <= 1000\n    if (n < 0) return -1;\n    if (n <= 1) return 0;\n\
    \    if (n <= 2) return 1;\n    long curr = 1;\n    while (n >= 2) {\n       \
    \ long next = ((n - 1) * curr + 2) % 1000;\n        curr = next;\n        n -=\
    \ 2;\n    }\n    return curr;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  stdout: ''
  stderr: "tmpq0y26r_r: /tmp/tmpq0y26r_r.cpp:32: int main(): Assertion `candidate((5))\
    \ == (4)' failed.\n"
  exit_code: -6
  status: Exception
