name: HumanEval_30_get_positive
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
  \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
  \ get_positive(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
  \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,\
  \ 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
completions: ["  std::vector<long> pos;\n  for (auto i : l) {\n    if (i >= 0)\n \
    \     pos.push_back(i);\n  }\n  return pos;", "  assert(l.size() >= 2);\n  std::vector<long>\
    \ result(l.size());\n  for (size_t i = 0; i < l.size(); i++) {\n    if (l[i] >=\
    \ 0) result[i] = l[i];\n  }\n  return result;", "  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  std::copy_if(l.begin(), l.end(), std::back_inserter(res), [](long n){return\
    \ n>0;});\n  return res;", "    std::sort(l.begin(), l.end());\n    auto it =\
    \ l.begin();\n    std::vector<long> res;\n    while (it != l.end() && it->size()\
    \ > 0) {\n        auto current = std::find(it, l.end(), 0);\n        res.push_back(std::distance(it,\
    \ current));\n        it = current;\n    }\n    return res;", "    std::vector<long>\
    \ v;\n    for (auto it : l)\n        if (it > 0)\n            v.push_back(it);\n\
    \    return v;", "    std::vector<long> result;\n    for (auto v : l)\n      \
    \  if (v >= 0)\n            result.push_back(v);\n    return result;", "    std::vector<long>\
    \ res;\n    long long pos = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] > 0) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    for (long i = 0; i < l.size(); i++) {\n        if (i != pos) {\n \
    \           res.push_back(l[i]);\n        }\n    }\n    return res;", "    //\
    \ Initialize counter\n    int count_positive = 0;\n    // Initialize result list\n\
    \    std::vector<long> r;\n    long cur_val = l[0];\n    for (long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] > cur_val) {\n            count_positive++;\n\
    \        }\n        else {\n            if (count_positive > 0) {\n          \
    \      r.push_back(cur_val);\n                count_positive = 0;\n          \
    \  }\n            cur_val = l[i];\n        }\n    }\n    if (count_positive >\
    \ 0) {\n        r.push_back(cur_val);\n    }\n    return r;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it)\n    {\n        if (*it > 0) {\n            ret.push_back(*it);\n    \
    \    }\n    }\n    return ret;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ v;\n    v.push_back(l.at(0));\n    for(long i=1;i<l.size();i++) {\n        if(l.at(i)<l.at(0))\
    \ {\n            v.push_back(l[i]);\n        }\n    }\n    return v;", "    std::vector<long>\
    \ temp;\n    for(long i : l) if(i>0) temp.push_back(i);\n    return temp;", " \
    \ std::vector<long> ret;\n  for (auto it : l) {\n    if (it > 0) {\n      ret.push_back(it);\n\
    \    }\n  }\n  return ret;", "    std::vector<long> v;\n    for(auto v : l) {\n\
    \        if(v >= 0) v.push_back(v);\n    }\n    return v;", "    // write your\
    \ code here\n    for (long i : l)\n        if (i > 0)\n            l.push_back(i);\n\
    \    return l;", "    std::vector<long> res;\n    for (long &ele : l)\n      \
    \  if (ele > 0)\n            res.push_back(ele);\n    return res;", "    std::vector<long>\
    \ pos;\n    for (long &x: l)\n        if (x > 0)\n            pos.push_back(x);\n\
    \    return pos;", "    std::vector<long> result;\n    bool flag = false;\n  \
    \  for (long i : l) {\n        if ((i >= 0) && (!flag)) {\n            result.push_back(i);\n\
    \            flag = true;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result(l.size());\n    std::transform((std::begin(l)), std::end(l), (std::begin(result)),\
    \ [](long x){return x >= 0 ? x : -1;});\n    return result;", "  // Create a vector<int>\
    \ with same size as vector l\n  std::vector<int> v(l.size());\n  // Copy vector\
    \ l to vector<int> v\n  std::transform(l.begin(), l.end(), v.begin(), [](long\
    \ l) {\n    return static_cast<int>(l);\n  });\n  sort(v.begin(), v.end());\n\
    \  v.erase(std::unique(v.begin(), v.end()), v.end());\n  std::vector<long> result(v);\n\
    \  return result;", "  std::sort(l.begin(), l.end());\n  std::vector<long> v(std::unique(l.begin(),\
    \ l.end()));\n  std::reverse(v.begin(), v.end());\n  std::vector<long>::iterator\
    \ iter1 = v.begin();\n  std::vector<long>::iterator iter2 = iter1;\n  std::vector<long>::iterator\
    \ iter3 = iter1;\n  std::vector<long>::iterator iter4 = iter1;\n  std::vector<long>::iterator\
    \ iter5 = iter1;\n  std::vector<long>::iterator iter6 = iter1;\n  for(; iter1\
    \ != v.end(); ++iter1, ++iter2) {\n    long first = *iter1;\n    long second =\
    \ *iter2;\n    if(second > first) {\n      iter3 = iter2;\n      iter4 = iter3;\n\
    \      iter5 = iter3;\n      iter6 = iter3;\n      if(second < second - 1) {\n\
    \        iter4 = iter2;\n        iter5 = iter4;\n        iter6 = iter4;\n    \
    \  }\n      else {\n        iter5 = iter4;\n        iter6 = iter5;\n      }\n\
    \    }\n  }\n  std::vector<long> result;\n  for(iter3 = iter1, iter4 = iter1;\
    \ iter3 != iter6; ++iter3, ++iter4) {\n    long a = *iter3;\n    long b = *iter4;\n\
    \    if(b > a) {\n      result.push_back(a);\n    }\n  }\n  return result;", " \
    \   std::sort(l.begin(), l.end());\n    std::vector<long> positive;\n    std::for_each(l.begin(),\
    \ l.end(), [&](const long x) {\n        positive.push_back(x);\n        if (x\
    \ >= 0) return;\n        --positive.back();\n    });\n    return positive;", " \
    \   std::vector<long> res;\n    for(long i : l) {\n        if(i > 0) {\n     \
    \       res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (long i : l)\n        if (i >= 0)\n            res.push_back(i);\n\
    \    return res;", "  std::vector<long> r;\n  for (long i : l) {\n    if (i >=\
    \ 0) {\n      r.push_back(i);\n    }\n  }\n  return r;", "    std::set<long> s;\n\
    \    for (auto i : l) {\n        if (i>0) {\n            s.insert(i);\n      \
    \  }\n    }\n    return std::vector<long>(s.begin(), s.end());", "    std::vector<long>\
    \ positive;\n    long n = 0;\n    for (long i : l)\n        if (i >= 0) {\n  \
    \          positive.push_back(i);\n            n += i;\n        }\n    return\
    \ positive;", "  std::vector<long> res;\n  // Go through each value in the list\n\
    \  for (int i = 0; i < l.size(); i++) {\n    // Check if the current value is\
    \ positive\n    if (l[i] > 0) res.push_back(l[i]);\n  }\n  // Return the final\
    \ result\n  return res;", "  std::vector<long> ans;\n  for (long i : l) {\n  \
    \  if (i >= 0)\n      ans.push_back(i);\n  }\n  return ans;", "    std::vector<long>\
    \ positive;\n    for (auto item : l) {\n        if (item > 0)\n            positive.push_back(item);\n\
    \    }\n    return positive;", "    std::vector<long> out;\n    std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(out), [](long n) {\n        return n > 0;\n    });\n\
    \    return out;", "    std::vector<long> positive;\n    for (auto ele : l) {\n\
    \        if (ele > 0) positive.push_back(ele);\n    }\n    return positive;",
  "  std::vector<long> p;\n  for (long i : l) {\n    if (i >= 0)\n      p.push_back(i);\n\
    \  }\n  return p;", "  std::sort(l.begin(), l.end());\n  std::vector<long> pos;\n\
    \  for (long i = 0; i != l.size(); ++i) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;", "    std::vector<long> res;\n    for (long e : l)\
    \ {\n        if (e > 0) {\n            res.push_back(e);\n        }\n    }\n \
    \   return res;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "  std::vector<long> res;\n  for(long i =\
    \ 0; i < (long) l.size(); ++i) {\n    if(l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;", "    std::vector<long> pos;\n    for (long i : l)\
    \ {\n        if (i >= 0)\n            pos.push_back(i);\n    }\n    std::sort(pos.begin(),\
    \ pos.end());\n    return pos;", "    std::vector<long> positive;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n      \
    \  }\n    }\n    return positive;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "  std::sort(l.begin(), l.end());\n  for\
    \ (long i : l)\n    if (i < 0) return std::vector<long>();\n  return l;", "  std::set<long>\
    \ pos;\n  pos.reserve(l.size());\n  for (auto x : l)\n    if (x > 0)\n      pos.insert(x);\n\
    \  std::vector<long> rvec(pos);\n  rvec.erase(std::unique(rvec.begin(), rvec.end()),\n\
    \              rvec.end());\n  return rvec;", "    std::vector<long> ret;\n  \
    \  // Create a helper function.\n    auto checker = [](long val, long & val) {\n\
    \        if (val > 0) {\n            val = val + 1;\n        }\n    };\n    //\
    \ Run through the vector and check each value.\n    for (long i : l) {\n     \
    \   // Check if it's positive. If not, ignore it and continue.\n        if (!checker(i,\
    \ ret[i])) {\n            continue;\n        }\n        // If it was positive,\
    \ return it.\n        ret.push_back(i);\n    }\n    return ret;", "    std::vector<long>\
    \ p;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n    \
    \        p.push_back(l[i]);\n        }\n    }\n    return p;", "    // Sort input\
    \ array.\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) {\n           \
    \ res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ positive;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n    \
    \    if (i >= 0)\n            positive.push_back(i);\n    }\n    return positive;",
  "    std::vector<long> ans;\n    for(long i : l) {\n        if(i>0) {\n        \
    \    ans.push_back(i);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ new_l;\n    new_l.push_back(l.front());\n    for (long i : l) {\n        if\
    \ ((i > 0) || (i == 0)) {\n            new_l.push_back(i);\n        }\n    }\n\
    \    return new_l;", "  std::sort(l.begin(), l.end());\n  std::vector<long> positive(l.begin(),\
    \ l.end());\n  positive.erase(std::unique(positive.begin(), positive.end()), positive.end());\n\
    \  return positive;", "    std::vector<long> r;\n    for (auto i : l) {\n    \
    \    if (i >= 0) r.push_back(i);\n    }\n    return r;", "    std::vector<long>\
    \ res = l;\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ v1(l);\n    std::sort(v1.begin(), v1.end());\n    v1.erase(std::unique(v1.begin(),\
    \ v1.end()), v1.end());\n    return v1;", "  std::vector<long> positives(l.size(),\
    \ -1);\n  std::iota(positives.begin(), positives.end(), 0);\n  std::sort(positives.begin(),\
    \ positives.end());\n  return positives;", "    std::vector<long> result;\n  \
    \  int size = l.size();\n    for (int i = 0; i < size; i++) {\n        if (l[i]\
    \ > 0) result.push_back(l[i]);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    long curr = 0;\n    for(auto i : l)\n        if(i>0) {\n         \
    \   if(curr>0) // If not the first element\n                res.push_back(curr);\n\
    \            curr=i; // Set the current number to i.\n        } else {\n     \
    \       curr=0; // Set the current number to 0.\n        }\n    if(curr>0) //\
    \ At the end add the last number.\n        res.push_back(curr);\n    return res;",
  "  std::sort(l.begin(), l.end());\n  auto n = l.size();\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  for (long i = n; i > 0; i--) {\n    if (l[i - 1] >= 0)\
    \ break;\n    l.pop_back();\n  }\n  return l;", "    std::vector<long> pos;\n\
    \    for(auto x : l)\n        if (x > 0)\n            pos.push_back(x);\n    return\
    \ pos;", "  long ans = 0;\n  std::sort(l.begin(), l.end());\n  for (int i = 0;\
    \ i < l.size(); i++) {\n    if (l[i] >= 0) {\n      ans += l[i];\n    }\n  }\n\
    \  return std::vector<long>(ans);", "    std::vector<long> p;\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] >= 0) p.push_back(l[i]);\n    }\n\
    \    return p;", "    std::vector<long> v;\n    v.insert(v.begin(), l.begin(),\
    \ l.end());\n    std::sort(v.begin(), v.end());\n    return v;", "  std::vector<long>\
    \ p;\n  p.reserve(l.size());\n  for (long i : l) {\n    if (i >= 0) {\n      p.push_back(i);\n\
    \    }\n  }\n  return p;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    long i = l[0];\n    long j = 0;\n    while (i <= l[j]) {\n  \
    \      res.push_back(i);\n        i += j == l.size() - 1 ? 1 : j + 1;\n    }\n\
    \    return res;", "    assert(l.size() != 0);\n    std::vector<long> res(l.size());\n\
    \    int n = l.size();\n    \n    int i = 0;\n    long lmax = l[0];\n    \n  \
    \  while ((i < n) && (lmax <= l[i])){\n        lmax = l[i];\n        i++;\n  \
    \  }\n    \n    long ans = lmax;\n    \n    while (i < n) {\n        while ((i\
    \ < n) && (l[n - i - 1] >= ans)){\n            ans = l[n - i - 1];\n         \
    \   i++;\n        }\n        \n        res[n - i - 1] = ans;\n    }\n    \n  \
    \  return res;", "    assert(l.size() > 0);\n    std::vector<long> res;\n    for\
    \ (auto i : l) {\n        if ((i > 0) || (i < 0)) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> ret;\n    for (long\
    \ &i : l) {\n        if (i >= 0) {\n            ret.push_back(i);\n        }\n\
    \    }\n    return ret;", "  std::vector<long> ret;\n  for (long i = 0; i < l.size();\
    \ i++) {\n    if (l[i] >= 0)\n      ret.push_back(l[i]);\n  }\n  return ret;",
  "    std::vector<long> ans;\n    for (long i : l) {\n        if (i >= 0) ans.push_back(i);\n\
    \    }\n    return ans;", "    std::vector<long> positive;\n    for (const auto&\
    \ x : l)\n        if (x >= 0)\n            positive.push_back(x);\n    return\
    \ positive;", "    std::vector<long> result;\n    // Sort the input in ascending\
    \ order.\n    std::sort(l.begin(), l.end());\n    // Find the first positive number\
    \ in the sorted list.\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i]\
    \ > 0) {\n            while (result.size() != i && l[i] < 0) {\n             \
    \   result.push_back(0);\n                --i;\n            }\n            assert(result.size()\
    \ == i);\n            ++i;\n            result.push_back(l[i]);\n        }\n \
    \   }\n    return result;", "    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i > 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;", "    std::vector<long> r;\n    for (long i : l)\
    \ {\n        if (i > 0)\n            r.push_back(i);\n    }\n    return r;", " \
    \ std::vector<long> new_l;\n  long temp = 0;\n  for (long i : l) {\n    if (i\
    \ < 0) {\n      new_l.push_back(i);\n    } else {\n      new_l.push_back(temp);\n\
    \      temp = i;\n    }\n  }\n  return new_l;", "    std::vector<long> positive(l);\n\
    \    for (auto x : positive) {\n        if (x >= 0) break;\n    }\n    return\
    \ positive;", "  std::vector<long> res;\n  res.reserve(l.size());\n  for (long\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;", "  std::vector<long> ret;\n  ret.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) {\n      ret.push_back(i);\n    }\n  }\n\
    \  return ret;", "    std::vector<long> ans;\n    for (auto i : l) {\n       \
    \ if (i >= 0)\n            ans.push_back(i);\n    }\n    return ans;", "    std::vector<long>\
    \ new_l;\n    new_l.reserve(l.size());\n    std::transform(l.begin(), l.end(),\
    \ std::back_inserter(new_l), [&](int x){return std::max(-x,x);});\n    return\
    \ new_l;", "    std::vector<long> ans;\n    for (long x: l) {\n        if (x>0)\
    \ {\n            ans.push_back(x);\n        }\n    }\n    return ans;", "  assert(l.size()\
    \ > 0);\n  std::vector<long> res;\n  res.push_back(l[0]);\n  for (long i : l)\
    \ {\n    if (i >= 0)\n      res.push_back(i);\n  }\n  return res;", "    std::vector<long>\
    \ res;\n    for(auto x : l) if(x >= 0) res.push_back(x);\n    return res;", " \
    \ std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \  return l;", "    std::vector<long> positive;\n    long long sum = 0;\n    for\
    \ (auto i : l) {\n        sum += i;\n        if (sum > 0) {\n            positive.push_back(sum);\n\
    \        }\n        sum = 0;\n    }\n    return positive;", "    std::vector<long>\
    \ p(l.size());\n    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > 0) {\n            p[i] = l[i];\n        }\n    }\n    return p;", "  std::vector<long>\
    \ pos;\n  pos.reserve(l.size());\n  for (int i = 0; i < l.size(); i++) {\n   \
    \ if (l[i] > 0) pos.push_back(l[i]);\n  }\n  return pos;", "  std::vector<long>\
    \ positive;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(positive),\n\
    \               [](long x) { return x > 0; });\n  return positive;", "\tstd::vector<long>\
    \ newL;\n\tfor (long n : l) {\n\t\tif (n > 0) newL.push_back(n);\n\t}\n\treturn\
    \ newL;", "    std::vector<long> res;\n    bool first = true;\n    for (auto &e\
    \ : l) {\n        if (e < 0) {\n            if (first) {\n                res.push_back(0);\n\
    \            }\n            first = false;\n        } else {\n            res.push_back(e);\n\
    \        }\n    }\n    return res;", "  std::transform(l.begin(), l.end(), l.begin(),\
    \ [](long x) { return x > 0; });\n  return l;", "    std::vector<long> nums;\n\
    \    long long ans = 0, x = 0, y = 0;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        x = l[i];\n        y = l[i + 1];\n        ans = ans + x * y;\n  \
    \  }\n    x = l[l.size() - 1];\n    y = l[0];\n    ans = ans + x * y;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        nums.push_back(l[i]);\n    }\n   \
    \ for (int i = 0; i < nums.size() - 1; i++) {\n        if (nums[i] > 0) {\n  \
    \          nums[i] = nums[i] + ans;\n            ans = 0;\n        }\n    }\n\
    \    return nums;", "  std::sort(l.begin(), l.end());\n  std::vector<long> positive(l);\n\
    \  std::rotate(positive.begin(), positive.begin() + 1, positive.end());\n  return\
    \ positive;", "    std::vector<long> res;\n    std::set_difference(l.begin(),\
    \ l.end(), std::begin(res), std::end(res),\n        [](long a, long b) { return\
    \ a > b; });\n    return res;", "  assert(l.size() >= 2);\n  std::vector<long>\
    \ ret;\n  ret.reserve(l.size());\n  for (size_t i = 0; i < l.size(); ++i) {\n\
    \    if (l[i] > 0) {\n      ret.push_back(l[i]);\n    }\n  }\n  return ret;",
  '  // your code goes here', "    std::vector<long> r;\n    for (auto &i : l) {\n\
    \        i = abs(i);\n        if (r.size() < i) {\n            r.assign(r.size(),\
    \ 0);\n        }\n        r[i] += 1;\n    }\n    std::vector<long> v(r.size(),\
    \ 0);\n    for (auto &i : r) {\n        v[i] += 1;\n    }\n    return v;", " \
    \   std::vector<long> res(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] >= 0) {\n            res[i] = l[i];\n        }\n    }\n\
    \    return res;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ p;\n    p.reserve(l.size());\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        if (*it > 0) {\n            p.push_back(*it);\n        }\n    }\n\
    \    return p;", "  for (long i = 0; i < l.size(); i++) {\n    if (l[i] < 0)\n\
    \      l[i] = -l[i];\n  }\n  return l;", "  std::sort(l.begin(), l.end());\n \
    \ while (l.front() < 0) l.front() = -l.front();\n  std::vector<long> res;\n  std::copy(l.begin(),\
    \ l.end(), std::back_inserter(res));\n  return res;", "  assert(l.size() >= 1);\n\
    \  std::vector<long> positive;\n  positive.reserve(l.size());\n  for (auto it\
    \ = l.begin(); it != l.end(); ++it) {\n    if (*it > 0) {\n      positive.push_back(*it);\n\
    \    }\n  }\n  return positive;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ r;\n    auto begin = std::unique(l.begin(), l.end());\n    auto last = std::unique(begin,\
    \ l.end());\n    std::copy(begin, last, std::back_inserter(r));\n    return r;",
  "    std::vector<long> re;\n    for (long i : l) {\n        if (i < 0)\n       \
    \     continue;\n        if (re.empty())\n            re.push_back(i);\n     \
    \   else if (re.back() <= i)\n            re.push_back(i);\n        else\n   \
    \         re.push_back(re[re.size() - 1] + 1);\n    }\n    return re;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > 0) {\n            res.push_back(l[i]);\n        }\n    }\n\
    \    return res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    long long s = 0;\n    for (auto x : l) {\n        if (x > 0) s++;\n     \
    \   else s--;\n        res.push_back(x);\n    }\n    return res;", "  std::vector<long>\
    \ v;\n  for (auto it = l.begin(); it != l.end(); it++) {\n    if (*it > 0) {\n\
    \      v.push_back(*it);\n    }\n  }\n  return v;", "    std::vector<long> result;\n\
    \    for(long i = 0; i < l.size(); i++){\n        if (l[i] > 0) result.push_back(l[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (const auto&\
    \ i : l) {\n        if (i >= 0) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "  std::vector<long> positives;\n  for (long i: l)\
    \ {\n    if (i > 0)\n      positives.push_back(i);\n  }\n  return positives;",
  "    std::vector<long> result;\n    for (auto i : l) {\n        if (i > 0)\n   \
    \         result.push_back(i);\n    }\n    return result;", "  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> p;\n  for (long i : l) {\n    if (i > 0) p.push_back(i);\n\
    \  }\n  return p;", "    std::vector<long> res(l.size());\n    std::iota(std::begin(res),\
    \ std::end(res), 0);\n    auto it = std::find_if(std::begin(res), std::end(res),\
    \ [&l](long n){\n        return n < 0;\n    });\n    while (it != std::end(res))\
    \ {\n        res[std::distance(std::begin(res), it)] = -l[std::distance(std::begin(l),\
    \ it)];\n        it++;\n        auto it = std::find_if(std::begin(res), std::end(res),\
    \ [&l](long n){\n            return n >= 0;\n        });\n    }\n    return res;",
  "  std::vector<long> result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ >= 0)\n      result.push_back(l[i]);\n  }\n  return result;", "  std::vector<long>\
    \ res;\n  for (long i = 0; i < (int)l.size(); i++) {\n    if (l[i] >= 0) {\n \
    \     res.push_back(l[i]);\n    }\n  }\n  return res;", "    std::vector<long>\
    \ pos;\n    pos.reserve(l.size());\n    for (long i : l)\n        if (i >= 0)\n\
    \            pos.push_back(i);\n    return pos;", "    // Allocate space for positive\
    \ numbers\n    std::vector<long> positive_number;\n    // Loop through all the\
    \ elements\n    for (long i = 0; i < l.size(); i++) {\n        // Check if its\
    \ positive\n        if (l[i] >= 0) {\n            // If it is positive\n     \
    \       positive_number.push_back(l[i]);\n        }\n    }\n    // Return the\
    \ positive numbers\n    return positive_number;", "    std::vector<long> ret;\n\
    \    for (long i : l) {\n        if (i >= 0)\n            ret.push_back(i);\n\
    \    }\n    return ret;", "  std::vector<long> ret(l);\n  std::sort(ret.begin(),\
    \ ret.end());\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] < 0)\n  \
    \    ret.erase(std::remove(ret.begin(), ret.end(), l[i]), ret.end());\n    else\n\
    \      ret.push_back(l[i]);\n  }\n  return ret;", "    std::vector<long> positive;\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;", "  std::vector<long> positive;\n  long\
    \ temp;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      positive.push_back(l[i]);\n\
    \    }\n  }\n  return positive;", "    std::vector<long> pos;\n    for(long i\
    \ = 0; i != l.size(); ++i)\n        if (l[i] > 0) pos.push_back(l[i]);\n    return\
    \ pos;", "    std::vector<long> ret(l);\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] >= 0) ret.push_back(l[i]);\n    }\n    return ret;", " \
    \   int size = l.size();\n    std::vector<long> positive(size); \n    for(int\
    \ i = 0; i < size; i++) {\n        if(l[i] > 0)\n            positive.push_back(l[i]);\n\
    \    }\n    return positive;", "    std::vector<long> positive;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n      \
    \  }\n    }\n    return positive;", "  std::sort(l.begin(), l.end());\n  for (int\
    \ i = l.size() - 1; i >= 0; i--) {\n    if (l[i] > 0) return l;\n  }\n  return\
    \ l;", "  std::vector<long> r;\n  for (long i = 0; i < l.size(); i++) {\n    if\
    \ (l[i] > 0) {\n      r.push_back(l[i]);\n    }\n  }\n  return r;", "    std::vector<long>\
    \ ans;\n    for(long i = 0; i <l.size() && i < -1; i++){\n        if(l[i] > 0)\n\
    \            ans.push_back(l[i]);\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;", "    std::vector<long> ans;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > 0) ans.push_back(l[i]);\n    }\n    return ans;",
  "    std::vector<long> positive;\n    std::vector<long> negative;\n    std::vector<long>\
    \ temp;\n\n    for (auto elem : l) {\n        if (elem > 0) {\n            temp.push_back(elem);\n\
    \        } else {\n            positive.insert(positive.end(), temp.begin(), temp.end());\n\
    \            temp.clear();\n        }\n    }\n    positive.insert(positive.end(),\
    \ temp.begin(), temp.end());\n    negative.insert(negative.end(), temp.begin(),\
    \ temp.end());\n\n    negative.erase(std::unique(negative.begin(), negative.end()),\
    \ negative.end());\n    positive.erase(std::unique(positive.begin(), positive.end()),\
    \ positive.end());\n    return positive;", "  std::vector<long> s;\n  s.reserve(l.size());\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      s.push_back(l[i]);\n\
    \  }\n  return s;", "    std::vector<long> newL;\n    std::vector<long> positiveL;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) {\n        \
    \    positiveL.push_back(l[i]);\n        } else {\n            newL.push_back(l[i]);\n\
    \        }\n    }\n    return newL;", "    std::vector<long> pos;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            pos.push_back(i);\n        }\n\
    \    }\n    return pos;", "    std::vector<long> ans(l.size());\n    for (int\
    \ i = 0; i < l.size(); i++)\n        if (l[i] >= 0)\n            ans[i] = l[i];\n\
    \    return ans;", "    std::vector<long> temp;\n    for (long i : l) {\n    \
    \    if (i >= 0) {\n            temp.push_back(i);\n        }\n    }\n    return\
    \ temp;", "  long n = l.size();\n  std::vector<long> v;\n  for (int i = 0; i <\
    \ n; ++i) {\n    if (l[i] > 0)\n      v.push_back(l[i]);\n  }\n  return v;", " \
    \   std::vector<long> positive_numbers;\n    for(long i = 0; i < l.size(); ++i)\
    \ {\n        if( l[i] > 0 ) {\n            positive_numbers.push_back(l[i]);\n\
    \        }\n    }\n    return positive_numbers;", "    std::vector<long> res;\n\
    \    for (long i : l) {\n        if ((i > 0) && (res.size() == 0)) {\n       \
    \     res.push_back(i);\n        } else if (res.size() != 0) {\n            if\
    \ (i < 0) {\n                res.insert(res.begin(), -i);\n            } else\
    \ {\n                res.push_back(i);\n            }\n        }\n    }\n    return\
    \ res;", "  std::vector<long> res;\n  for (long i : l) {\n    if (i >= 0) res.push_back(i);\n\
    \  }\n  return res;", "  for (long i : l) {\n    if (i > 0) return l;\n  }", " \
    \   std::vector<long> res;\n    for(size_t i = 0; i < l.size(); i++) {\n     \
    \   if(l[i] >= 0)\n            res.push_back(l[i]);\n    }\n    return res;",
  "    std::vector<long> positive;\n    for (long i : l) {\n        if (i > 0) positive.push_back(i);\n\
    \    }\n    return positive;", "    std::set<long> s;\n    for (long v : l)\n\
    \        if (v > 0)\n            s.insert(v);\n    std::vector<long> result;\n\
    \    result.reserve(s.size());\n    for (long v : l)\n        if (s.count(v) >\
    \ 0)\n            result.push_back(v);\n    return result;", "    std::vector<long>\
    \ positive;\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it\
    \ != l.end(); ++it) {\n        if (*it > 0) {\n            positive.push_back(*it);\n\
    \        }\n    }\n    return positive;", "    std::vector<long> res(l);\n   \
    \ std::sort(res.begin(), res.end(), std::greater<long>());\n    res.erase(res.begin(),\
    \ std::unique(\n        res.begin(), res.end(), [&](long a, long b) { return a\
    \ > b; }));\n    return res;", "    std::vector<long> a;\n    for (long i : l)\
    \ {\n        if (i > 0)\n            a.push_back(i);\n    }\n    return a;", " \
    \ std::sort(l.begin(), l.end());\n  std::vector<long> positive;\n  positive.reserve(l.size());\n\
    \  for (auto i : l)\n    if (i >= 0)\n      positive.push_back(i);\n  return positive;",
  "    for (long i : l) {\n        if (i > 0) return l;\n    }\n    return std::vector<long>();",
  "    std::vector<long> positive;\n    std::sort(l.begin(), l.end());\n    long last\
    \ = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] > last) {\n\
    \            positive.push_back(last);\n            last = l[i];\n        } else\
    \ {\n            last = l[i];\n        }\n    }\n    positive.push_back(last);\n\
    \    return positive;", "\tstd::vector<long> positive(l);\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (long i = 0; i < l.size(); i++)\n\t\tif (l[i] >= 0)\n\t\t\t\
    positive[i] = l[i];\n\treturn positive;", "\tstd::vector<long> p;\n\tfor (int\
    \ i = 0; i < l.size(); i++)\n\t\tif (l[i] > 0)\n\t\t\tp.push_back(l[i]);\n\treturn\
    \ p;", "\tstd::vector<long> ret;\n\tstd::transform(l.begin(), l.end(), std::back_inserter(ret),\
    \ [](long x) { return x > 0 ? x : 0; });\n\treturn ret;", "  std::vector<long>\
    \ p = {0};\n  for (auto it = l.begin(); it != l.end(); ++it) {\n    if ((*it >\
    \ 0) || (*it == 0))\n      p.push_back(*it);\n  }\n  return p;", "  std::sort(l.begin(),\
    \ l.end());\n  std::unique_ptr<bool> flag(std::make_unique<bool>(false));\n  std::sort(l.begin(),\
    \ l.end(), [&flag](int a, int b){\n    if (flag[a] && flag[b]) {\n      return\
    \ false;\n    }\n    if (flag[a]) {\n      flag[a] = true;\n      return true;\n\
    \    }\n    flag[b] = true;\n    return true;\n  });\n  return l;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l)\n        if (i > 0)\n\
    \            res.push_back(i);\n    return res;", "    std::vector<long> p;\n\
    \    std::vector<long> tmp;\n    for (long i = 0; i < l.size(); i++) {\n     \
    \   if (l[i] >= 0) tmp.push_back(l[i]);\n        else p.push_back(tmp);\n    \
    \    tmp.clear();\n    }\n    return p;", "  assert(l.size() > 0);\n  std::vector<long>\
    \ positive;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n  \
    \    positive.push_back(l[i]);\n    }\n  }\n  return positive;", "  assert(l.size()\
    \ >= 1);\n  std::vector<long> r;\n  for (long i : l) {\n    if (i >= 0) {\n  \
    \    r.push_back(i);\n    }\n  }\n  return r;", "    std::vector<long> result(l.size());\n\
    \    for (size_t i = 0; i < l.size(); ++i) {\n        result[i] = (l[i] > 0) ?\
    \ (l[i]) : 0L;\n    }\n    return result;", "    std::vector<long> temp;\n   \
    \ for (auto i : l)\n        if (i >= 0) temp.push_back(i);\n    return temp;",
  "  std::vector<long> res;\n  for (long i : l) {\n    if (i >= 0)\n      res.push_back(i);\n\
    \  }\n  return res;", "    std::vector<long> res;\n    for (auto x : l) {\n  \
    \      if (x >= 0) {\n            res.push_back(x);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> new_l;\n    // Sort the list using std::sort.\n\
    \    std::sort(l.begin(), l.end());\n    // Iterate over all items in the list.\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        // If current item\
    \ is positive, add it to the new list.\n        if (*it > 0) {\n            new_l.push_back(*it);\n\
    \        }\n    }\n    return new_l;", "    int n = l.size();\n    // First check\
    \ for 0 and return it.\n    // If l has size 0, then return an empty vector.\n\
    \    if (l.size() == 0) {\n        return std::vector<long>();\n    }\n    //\
    \ Get positive numbers.\n    // If negative numbers are found, add them to the\
    \ returned vector.\n    // >>> get_positive([-1, 2, -4, 5, 6])\n    // [2, 5,\
    \ 6]\n    for (int i = 0; i < n; i++) {\n        if (l[i] > 0) {\n           \
    \ l.push_back(l[i]);\n        }\n    }\n    // Return the vector.\n    return\
    \ l;", "    // Copy list into a new list.\n    std::vector<long> ans;\n    ans.reserve(l.size());\n\
    \    for (long i : l)\n        if (i >= 0)\n            ans.push_back(i);\n  \
    \  return ans;", "  std::vector<long> res;\n  for (auto& el : l) {\n    if (el\
    \ > 0) {\n      res.push_back(el);\n    }\n  }\n  return res;", "    std::vector<long>\
    \ res(l.size());\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >=\
    \ 0)\n            res[i] = l[i];\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    int cnt = 0;\n    for (long i : l) {\n        if (i >= 0) {\n    \
    \        res.push_back(i);\n            cnt++;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    cnt = 0;\n    for(long i : res) {\n        if (cnt < res.size()\
    \ - 1) res.push_back(-i);\n        cnt++;\n    }\n    return res;", "  std::vector<long>\
    \ tmp;\n  std::set_difference(std::begin(l), std::end(l),\n                  \
    \    std::begin(l), std::end(tmp), std::less<>());\n  return tmp;", "    std::sort(l.begin(),\
    \ l.end(), std::greater<long>());\n    std::vector<long> res;\n    for (std::size_t\
    \ i = 0; i < l.size(); ++i) {\n        if (l[i] >= 0) res.push_back(l[i]);\n \
    \   }\n    return res;", "    std::vector<long> new_l;\n    long s = 0;\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            s = l[i]\
    \ + s;\n        } else {\n            new_l.push_back(s); // store positive number\n\
    \            s = l[i];\n        }\n    }\n    new_l.push_back(s); // store last\
    \ positive number\n    return new_l;", "    std::sort(l.begin(), l.end());\n \
    \   auto result = std::vector<long>();\n    for (auto x : l)\n        if (x >=\
    \ 0)\n            result.push_back(x);\n    return result;", "    std::vector<long>\
    \ p;\n    std::copy_if(l.begin(), l.end(), std::back_inserter(p), [](const long\
    \ n){return n > 0; });\n    return p;", "    std::vector<long> v(l.begin(), l.end());\n\
    \    std::sort(v.begin(), v.end(), std::greater<long>());\n    std::vector<long>\
    \ res;\n    res.reserve(v.size());\n    for (long i : v) {\n        if (i >= 0)\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;", "  std::vector<long>\
    \ res;\n  for (auto& i : l)\n    if (i > 0) {\n      res.push_back(i);\n    }\n\
    \  return res;", "    std::vector<long> v;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] >= 0)\n            v.push_back(l[i]);\n    }\n    return\
    \ v;", "    std::vector<long> res;\n    for(auto i : l)\n        if(i>0)\n   \
    \         res.push_back(i);\n    return res;", "    std::vector<long> ret;\n \
    \   for (long i : l)\n        if (i >= 0) ret.push_back(i);\n    return ret;",
  "\tstd::vector<long> ans;\n\tfor (auto i : l) {\n\t\tif (i > 0) ans.push_back(i);\n\
    \t}\n\treturn ans;", "    std::vector<long> nums = l;\n    for (auto& num : nums)\
    \ {\n        if (num > 0) {\n            return nums;\n        }\n    }\n    return\
    \ nums;", "    std::vector<long> r;\n    for (auto i : l) {\n        if (i >=\
    \ 0)\n            r.push_back(i);\n    }\n    return r;", "  std::vector<long>\
    \ result;\n  for (long i : l)\n    if (i >= 0)\n      result.push_back(i);\n \
    \ return result;", "    std::vector<long> pos;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i : l) if (i >= 0) pos.push_back(i);\n    return pos;", "    auto\
    \ it = std::find_if(l.begin(), l.end(),\n                         [](long i) {\
    \ return i >= 0; });\n    assert(it != l.end());\n    l.erase(std::remove_if(l.begin(),\
    \ l.end(),\n                             [it](int i) { return i >= 0; }),\n  \
    \          l.end());\n    return l;", "    std::vector<long> res;\n    long maxnum\
    \ = std::numeric_limits<long>::min();\n    for(auto e : l) {\n        if(e < 0)\
    \ \n            continue;\n        maxnum = std::max(maxnum, e);\n    }\n    for(auto\
    \ e : l) {\n        if(e < 0)\n            res.push_back(-e);\n        else\n\
    \            res.push_back(e);\n    }\n    for(auto e : res)\n        if(maxnum\
    \ != e)\n            res.push_back(-e);\n    return res;", "    std::vector<long>\
    \ positive(l);\n    // Filter out negative values.\n    for (auto it = positive.begin();\
    \ it != positive.end(); it++) {\n        if (*it < 0) {\n            positive.erase(it);\n\
    \        }\n    }\n    return positive;", "    std::sort(l.begin(), l.end());\n\
    \    std::vector<long> res;\n    std::vector<bool> flag(l.size());\n    long last\
    \ = -1;\n    for (long i : l) {\n        if (flag[i]) {\n            res.push_back(last);\n\
    \            flag[i] = false;\n        } else {\n            flag[i] = true;\n\
    \            last = i;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ r;\n    for(auto i : l) {\n        if(i>=0)\n            r.push_back(i);\n \
    \   }\n    return r;", "    std::vector<long> positive;\n    long::size_type i\
    \ = 0, j = 0;\n    while ( i < l.size()) {\n        while ( j >= 0 ) {\n     \
    \       if ( l[i] > l[j] )\n                break;\n            j--;\n       \
    \ }\n        if ( j == -1 )\n            positive.push_back( l[i++] );\n    }\n\
    \    return positive;", "  long sum = 0;\n  for (long i : l) {\n    if (i > 0)\n\
    \      sum += i;\n  }\n  std::vector<long> ans;\n  while (sum >= 0) {\n    long\
    \ tmp = sum;\n    sum = 0;\n    for (long i : l) {\n      if (i > 0)\n       \
    \ sum += i;\n    }\n    if (tmp == sum)\n      ans.push_back(tmp);\n  }\n  return\
    \ ans;", "    std::vector<long> ret;\n    for (auto i : l) {\n        if (i >\
    \ 0)\n            ret.push_back(i);\n    }\n    return ret;", "    for (long i\
    \ : l) {\n        if (i >= 0)\n            l.push_back(i);\n    }\n    return\
    \ l;", "  assert(l.size() > 0);\n  assert(l.size() <= 100);\n  std::vector<long>\
    \ rev_l;\n  rev_l.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n \
    \   if (l[i] >= 0) {\n      rev_l.push_back(l[i]);\n    } else {\n      break;\n\
    \    }\n  }\n  return rev_l;", "    std::vector<long> ans;\n    long long temp\
    \ = 0;\n    for(long long i : l) {\n        if(i>0) {\n            temp = i*i;\n\
    \            while(temp>0) {\n                ans.push_back(i/temp);\n       \
    \         temp--;\n            }\n        }\n    }\n    return ans;", "  assert(l.size()\
    \ >= 1);\n  l.sort();\n  std::vector<long> p(l.size());\n  for (auto &i : p) i\
    \ = l[i - 1];\n  return p;", "    // Write your code here.\n    long n = 0;\n\
    \    std::vector<long> ans;\n    for (long i : l) {\n        if (i >= 0) {\n \
    \           ans.push_back(i);\n            n += i;\n        } else {\n       \
    \     ans.push_back(n);\n            n = 0;\n        }\n    }\n    return ans;",
  "    std::vector<long> positive;\n    for (long i : l) {\n        if (i >= 0) positive.push_back(i);\n\
    \    }\n    return positive;", "    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ pos_val;\n    long val = 0;\n    for (long i : l) {\n        if (i > 0)\n  \
    \          val = i;\n        pos_val.push_back(val);\n    }\n    return pos_val;",
  "    std::vector<long> result(l);\n    std::sort(result.begin(), result.end(), [](long\
    \ a, long b) {\n        return a > b;\n    });\n    return std::unique(result.begin(),\
    \ result.end());", "    int n = l.size();\n    std::vector<long> res;\n    for\
    \ (int i = 0; i < n; ++i) {\n        if (l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    return res;", " \
    \ l.sort();\n  assert(l.size() >= 2);\n  long low = l.front();\n  long high =\
    \ l.back();\n  if (low >= 0) {\n    low++;\n  }\n  while (low <= high) {\n   \
    \ if (low > high) {\n      std::vector<long> temp(low, high);\n      std::swap(temp[0],\
    \ temp[1]);\n      return temp;\n    }\n    if (low * low <= high * high) {\n\
    \      std::vector<long> temp(low, low + 1);\n      std::swap(temp[0], temp[1]);\n\
    \      low++;\n    } else if (low * low > high * high) {\n      std::vector<long>\
    \ temp(high + 1, high + high);\n      std::swap(temp[0], temp[1]);\n      high--;\n\
    \    } else {\n      std::vector<long> temp(low, high);\n      std::swap(temp[0],\
    \ temp[1]);\n      break;\n    }\n  }\n  return l;", "    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> res;\n    for (long i : l) {\n        if (i\
    \ > 0)\n            res.push_back(i);\n    }\n    return res;"]
stop_tokens:
- "\n}"
