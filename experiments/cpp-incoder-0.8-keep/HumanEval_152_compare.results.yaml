language: cpp
name: HumanEval_152_compare
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::sort(game.begin(), game.end());\n    std::sort(guess.begin(), guess.end());\n\
    \n    std::vector<long> result(guess.size());\n    \n    long best_guess = guess[0];\n\
    \    long best_difference = game[0] - guess[0];\n    long best_score = game[0];\n\
    \n    for (size_t i = 1; i < guess.size(); i++) {\n        long difference = guess[i]\
    \ - game[i - 1];\n        if (difference < best_difference) {\n            best_guess\
    \ = game[i - 1];\n            best_difference = difference;\n            best_score\
    \ = game[i];\n        }\n        result[i] = abs(best_guess - best_score);\n \
    \   }\n\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpkuviiqn3: /tmp/tmpkuviiqn3.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long max_score = *std::max_element(game.cbegin(), game.cend()) + 1;\n   \
    \ long min_score = *std::min_element(game.cbegin(), game.cend()) + 1;\n    assert(game.size()\
    \ == guess.size());\n    long max_score = *std::max_element(guess.cbegin(), guess.cend())\
    \ + 1;\n    long min_score = *std::min_element(guess.cbegin(), guess.cend()) +\
    \ 1;\n    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n        if (abs(game[i]\
    \ - guess[i]) == 0) {\n            result[i] = 0;\n        }\n    }\n    long\
    \ min_diff = (min_score - max_score);\n    for (int i = 0; i < game.size(); i++)\
    \ {\n        result[i] += min_diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3fgleb_e.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3fgleb_e.cpp:17:10: error: redeclaration\
    \ of \u2018long int max_score\u2019\n   17 |     long max_score = *std::max_element(guess.cbegin(),\
    \ guess.cend()) + 1;\n      |          ^~~~~~~~~\n/tmp/tmp3fgleb_e.cpp:14:10:\
    \ note: \u2018long int max_score\u2019 previously declared here\n   14 |     long\
    \ max_score = *std::max_element(game.cbegin(), game.cend()) + 1;\n      |    \
    \      ^~~~~~~~~\n/tmp/tmp3fgleb_e.cpp:18:10: error: redeclaration of \u2018long\
    \ int min_score\u2019\n   18 |     long min_score = *std::min_element(guess.cbegin(),\
    \ guess.cend()) + 1;\n      |          ^~~~~~~~~\n/tmp/tmp3fgleb_e.cpp:15:10:\
    \ note: \u2018long int min_score\u2019 previously declared here\n   15 |     long\
    \ min_score = *std::min_element(game.cbegin(), game.cend()) + 1;\n      |    \
    \      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660109278
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // fill vector with the absolute difference of the guesses and the scores\n\
    \    std::vector<long> result(guess.size());\n    for(long i=0; i<guess.size();\
    \ i++)\n        result[i] = abs(guess.at(i)-game.at(i));\n\n    // return vector\
    \ of length equal to the size of the guesses\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code here\n    std::vector<long> result;\n    long minVal = guess[0];\n\
    \    long maxVal = game[0];\n    for (long i = 0; i < guess.size(); i++) {\n \
    \       if (guess[i] == game[i])\n            result[i] = 0;\n        else\n \
    \           result[i] = guess[i] - game[i];\n        if (result[i] < 0)\n    \
    \        result[i] += maxVal;\n        else if (result[i] > 0)\n            result[i]\
    \ -= minVal;\n        else\n            result[i] = 0;\n        maxVal = game[i]\
    \ > maxVal ? game[i] : maxVal;\n        minVal = guess[i] < minVal ? guess[i]\
    \ : minVal;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::map<long,long> game_to_guess;\n    for (long i = 0;i < guess.size();i++)\
    \ {\n        game_to_guess[game[i]] = guess[i];\n    }\n    std::vector<long>\
    \ res;\n    std::map<long,long>::iterator it = game_to_guess.begin();\n    while(it\
    \ != game_to_guess.end()) {\n        long diff = abs(it->first - it->second);\n\
    \        it = game_to_guess.erase(it);\n        if (it->second == guess) {\n \
    \           res.push_back(diff);\n        }\n        else {\n            res.push_back(abs(guess-diff));\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqp8o72d8.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpqp8o72d8.cpp:23:24: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018long int\u2019 and \u2018\
    std::vector<long int>\u2019)\n   23 |         if (it->second == guess) {\n   \
    \   |             ~~~~~~~~~~ ^~ ~~~~~\n      |                 |         |\n \
    \     |                 long int  std::vector<long int>\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqp8o72d8.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpqp8o72d8.cpp:23:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018long int\u2019\n   23 |         if (it->second == guess) {\n     \
    \ |                           ^~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqp8o72d8.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpqp8o72d8.cpp:23:27: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018long int\u2019\n   23 |         if (it->second\
    \ == guess) {\n      |       "
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code goes here\n    // compare game with guess\n    // for each match\n\
    \    // if they match\n    // return 0;\n    // if they do not match\n    // return\
    \ abs(guess-game)\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp42fxg9fx: /tmp/tmp42fxg9fx.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Your code goes here\n  assert(game.size() == guess.size());\n  std::vector<long>\
    \ result(game.size(),0);\n  std::sort(game.begin(),game.end());\n  std::sort(guess.begin(),guess.end());\n\
    \  for (auto i = 0l; i < game.size(); i++) {\n    if (game[i] != guess[i]) {\n\
    \      result[i] = abs(game[i] - guess[i]);\n    } else {\n      result[i] = 0L;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp63r0hm3c: /tmp/tmp63r0hm3c.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    long game_size = game.size();\n    long guess_size\
    \ = guess.size();\n    std::vector<long> res(game_size);\n    for (auto i = 0;\
    \ i < game_size; ++i) {\n        res[i] = game[i] - guess[i];\n        if (res[i]\
    \ != 0)\n            return res;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp72endu4l: /tmp/tmp72endu4l.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::sort(game.begin(), game.end(), [](const long a, const long b){ return\
    \ b < a; });\n    std::sort(guess.begin(), guess.end(), [](const long a, const\
    \ long b){ return b < a; });\n\n    std::vector<long> result(game.size());\n \
    \   for (long i = 0; i < game.size(); ++i) {\n        long difference = 0;\n \
    \       auto it = guess.begin() + i;\n        for (; it != guess.end(); ++it)\n\
    \            difference += game[i] - it[0];\n        result[i] = difference <=\
    \ 0 ? 0 : abs(difference);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpkecs0kbk: /tmp/tmpkecs0kbk.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here.\n    long game_size = game.size();\n    long guess_size\
    \ = guess.size();\n    std::vector<long> scores(game_size);\n    std::vector<long>\
    \ result(guess_size);\n\n    long total_score = 0;\n    long match_count = 0;\n\
    \    for(long i = 0; i < game_size; i++) {\n        if(game[i] == guess[i]) {\n\
    \            scores[i] = 0;\n        } else {\n            scores[i] = abs(guess[i]\
    \ - game[i]);\n            total_score += scores[i];\n            match_count++;\n\
    \        }\n    }\n    long correct_count = 0;\n    for(long i = 0; i < guess_size;\
    \ i++) {\n        if(scores[i] == 0) {\n            result[i] = 0;\n        }\
    \ else {\n            result[i] = total_score / match_count;\n            correct_count++;\n\
    \        }\n    }\n    if(correct_count == guess_size) {\n        return result;\n\
    \    }\n    for(long i = 0; i < guess_size; i++) {\n        if(result[i] == 0)\
    \ {\n            result[i] = abs(guess[i] - game[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpfl1ij2eh: /tmp/tmpfl1ij2eh.cpp:54: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3})), (std::vector<long>({-1, -2, -3}))) == (std::vector<long>({2, 4, 6}))''
    failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \   assert(game.size() == guess.size());\n   std::vector<long> result;\n   result.resize(guess.size());\n\
    \   for(long i = 0; i < game.size(); ++i){\n       result[i] = abs(game[i] - guess[i]);\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    assert(game.size() == guess.size());\n\
    \    // the below loop does all the heavy lifting for you. It calculates the difference\n\
    \    // between a match and its guess (score), then checks if that difference\
    \ is less than or equal to\n    // the guess at that index. If the guess is correct,\
    \ the difference is 0, and if the guess is\n    // wrong, the difference is the\
    \ absolute difference between the guess and the score.\n    // The vector \"result\"\
    \ will return the index where the guess (score) was correct, or the index where\
    \ \n    // the guess (score) was wrong.\n    for (std::size_t i = 0; i < game.size();\
    \ ++i) {\n        result[i] = std::abs(game[i] - guess[i]);\n    }\n    \n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> res;\n    assert(game.size() == guess.size());\n    //\
    \ for each index...\n    for (long i = 0; i < game.size(); ++i) {\n        //\
    \ if the guessed value is greater than the actual value, it's wrong.\n       \
    \ if (guess[i] >= game[i]) {\n            res.push_back(i);\n        }\n     \
    \   // if the guessed value is equal to the actual value, it's correct.\n    \
    \    else if (guess[i] == game[i]) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpb7ktuf60: /tmp/tmpb7ktuf60.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n\tassert(game.size() == guess.size());\n\tstd::vector<long>\
    \ result;\n\tfor(int i = 0; i < game.size(); i++) {\n\t\tif(game[i] == guess[i])\
    \ {\n\t\t\tresult.push_back(0);\n\t\t} else {\n\t\t\tlong diff = abs(game[i] -\
    \ guess[i]);\n\t\t\tresult.push_back(diff);\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    // I assume your function will take vector size\
    \ as input parameter\n    // your function should return vector<long> with same\
    \ size as input vector.\n    std::vector<long> scores(game.size());\n    long\
    \ score = 0;\n    int i = 0;\n    while (i < game.size() && i < guess.size())\
    \ {\n        if (game[i] > guess[i]) {\n            score = game[i] - guess[i];\n\
    \            scores[i] = abs(score);\n            i++;\n        }\n        else\
    \ if (game[i] < guess[i]) {\n            score = -game[i] - guess[i];\n      \
    \      scores[i] = abs(score);\n            i++;\n        }\n        else if (game[i]\
    \ == guess[i]) {\n            scores[i] = 0;\n            i++;\n        }\n  \
    \  }\n    return scores;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> winner(game.size());\n    std::map<long, long> score_map;\n\
    \    // Step 1. Store all scores and guesses in map by using the same index\n\
    \    for (long i = 0; i < game.size(); i++) {\n        if (game[i] != 0) {\n \
    \           score_map[game[i]] = i;\n        }\n    }\n    // Step 2. Initialize\
    \ a score to zero and count how many times the guess\n    // is correct.\n   \
    \ long count_correct = 0;\n    for (long i = 0; i < guess.size(); i++) {\n   \
    \     long guess = guess[i];\n        if (guess == 0) {\n            continue;\n\
    \        }\n        if (score_map.find(guess) != score_map.end()) {\n        \
    \    // Step 3. Increment the number of correct guesses\n            count_correct++;\n\
    \        }\n    }\n    // Step 4. Initialize a score to zero and count how many\
    \ times the guess\n    // is incorrect.\n    long count_incorrect = 0;\n    for\
    \ (long i = 0; i < game.size(); i++) {\n        long score = game[i];\n      \
    \  if (score != 0) {\n            // Step 5. Iterate through all scores and guesses\
    \ and update the score.\n            for (long j = 0; j < guess.size(); j++) {\n\
    \                long guess = guess[j];\n                if (guess == 0) {\n \
    \                   continue;\n                }\n                if (score_map.find(guess)\
    \ != score_map.end()) {\n                    score = max(score, score_map[guess]);\n\
    \                }\n            }\n            // Step 6. Update the score.\n\
    \            if (score != 0) {\n                winner[score] = winner[score]\
    \ | (1 << i);\n            }\n        }\n    }\n    // Step 7. Calculate an aggregate\
    \ score\n    long final_score = 0;\n    for (long i = 0; i < game.size(); i++)\
    \ {\n        if (winner[i] & (1 << i)) {\n            final_score += abs(winner.at(i)\
    \ - i);\n        }\n    }\n    return std::vector<long>(winner.begin(), winner.end())\
    \ + std::vector<long>(final_score, final_score + game.size());\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2h12qjo.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpc2h12qjo.cpp:26:29: error: invalid\
    \ types \u2018long int[long int]\u2019 for array subscript\n   26 |         long\
    \ guess = guess[i];\n      |                             ^\n/tmp/tmpc2h12qjo.cpp:43:37:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 43 |                 long guess = guess[j];\n      |                       \
    \              ^\n/tmp/tmpc2h12qjo.cpp:48:29: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   48 |                 \
    \    score = max(score, score_map[guess]);\n      |                          \
    \   ^~~\n      |                             std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc2h12qjo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpc2h12qjo.cpp:64:60: error: no\
    \ match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   64 |     return std::vector<long>(winner.begin(),\
    \ winner.end()) + std::vector<long>(final_score, final_score + game.size());\n\
    \      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                 |                                                 |\n\
    \      |                 vector<[...]>                                     vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc2h12qjo.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterato"
  stdout: ''
  timestamp: 1660109278
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    for (int i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if(game.size() != guess.size()) {\n        throw std::runtime_error(\"Input\
    \ arrays must have same size.\");\n    }\n\n    std::vector<long> result(game.size());\n\
    \    for(size_t i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // You will always pass two vectors of the same length.\n    assert(game.size()\
    \ == guess.size());\n    std::vector<long> result(game.size());\n    long score\
    \ = 0;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            score++;\n        }\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    result[0] = 0;\n    return result; \n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpzi2hmo9j: /tmp/tmpzi2hmo9j.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3})), (std::vector<long>({-1, -2, -3}))) == (std::vector<long>({2, 4, 6}))''
    failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here.\n    // The game vector has already been given to\
    \ you, guessed is an array that has already been filled\n    // with random integers\
    \ (the size of the arrays will be the same but the numbers inside the\n    //\
    \ vectors will differ).\n    std::vector<long> result;\n    for(int i = 0; i <\
    \ guess.size(); i++) {\n        result.push_back(0);\n    }\n    for(int i = 0;\
    \ i < game.size(); i++) {\n        if(game[i] != 0) {\n            result[game[i]\
    \ - 1]++;\n        }\n    }\n    for(int i = 0; i < guess.size(); i++) {\n   \
    \     if(guess[i] > 0) {\n            result[guess[i] - 1]--;\n        }\n   \
    \ }\n    int sum = 0;\n    for(int i = 0; i < result.size(); i++) {\n        sum\
    \ += result[i];\n    }\n    std::vector<long> result;\n    for(int i = 0; i <\
    \ guess.size(); i++) {\n        result.push_back(abs(sum - guess[i]));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwia5074.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmptwia5074.cpp:36:23: error: redeclaration\
    \ of \u2018std::vector<long int> result\u2019\n   36 |     std::vector<long> result;\n\
    \      |                       ^~~~~~\n/tmp/tmptwia5074.cpp:18:23: note: \u2018\
    std::vector<long int> result\u2019 previously declared here\n   18 |     std::vector<long>\
    \ result;\n      |                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660109278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code goes here\n    std::vector<long> results;\n    for (size_t i\
    \ = 0; i < guess.size(); i++) {\n        results.push_back(0);\n        if (game[i]\
    \ == guess[i])\n            results.push_back(abs(guess[i] - game[i]));\n    \
    \    else\n            results.push_back(abs(guess[i] - game[i]) + abs(guess[i]\
    \ - game[i] - 1));\n    }\n    return results;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpgeyyb49d: /tmp/tmpgeyyb49d.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code here\n    std::vector<long> result;\n    for(int i=0;i<game.size();i++){\n\
    \        \n        if(game[i]==guess[i]){\n            int flag=0;\n         \
    \   int min=0;\n            for(int j=0;j<game.size();j++){\n                if(game[j]<guess[j]){\n\
    \                    min=game[j];\n                    break;\n              \
    \  }\n                if(game[j]>guess[j]){\n                    break;\n    \
    \            }\n            }\n            if(flag==0){\n                result.push_back(0);\n\
    \            }\n            else{\n                result.push_back(abs(game[i]-min));\n\
    \            }\n        }\n        else{\n            int flag=0;\n          \
    \  int min=0;\n            for(int j=0;j<game.size();j++){\n                if(game[j]<guess[j]){\n\
    \                    min=game[j];\n                    break;\n              \
    \  }\n                if(game[j]>guess[j]){\n                    break;\n    \
    \            }\n            }\n            if(flag==0){\n                result.push_back(abs(game[i]-min));\n\
    \            }\n            else{\n                result.push_back(0);\n    \
    \        }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp99em325i: /tmp/tmp99em325i.cpp:61: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size());\n  int result = 0;\n  for (int i = 0;\
    \ i < game.size(); i++) {\n    result += game[i] - guess[i];\n  }\n  std::vector<long>\
    \ res(game.size());\n  res[game.size() - 1] = result;\n  return res;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpudujlqq2: /tmp/tmpudujlqq2.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // TODO: Write your code here\n  // 1. Sort the game array\n  std::sort(game.begin(),\
    \ game.end());\n  \n  // 2. Sort the guess array\n  std::sort(guess.begin(), guess.end());\n\
    \  \n  // 3. Initialize a flag array\n  std::vector<bool> flag(game.size(), false);\n\
    \  \n  // 4. Start iterating the game, compare the guess with the score of game\n\
    \  int pos = 0;\n  int flagPos = 0;\n  long score = 0;\n  long guessVal = 0;\n\
    \  \n  for(size_t i = 0; i < game.size(); i++) {\n    if(game[i] != guess) {\n\
    \      flag[pos] = true;\n      flagPos++;\n      continue;\n    }\n    score++;\n\
    \    flag[pos] = true;\n    flagPos++;\n  }\n  \n  // 5. Iterate again till flag\
    \ array is empty\n  while(flag[pos] == false) {\n    pos++;\n  }\n  \n  // 6.\
    \ Initialize the final result\n  std::vector<long> result;\n  result.push_back(pos);\n\
    \  \n  for(size_t i = 0; i < flag.size(); i++) {\n    if(flag[i] == true) {\n\
    \      guessVal = game[pos];\n      guessVal -= guess;\n      result.push_back(guessVal);\n\
    \    }\n  }\n  \n  for(int i = 0; i < result.size(); i++) {\n    if(result[i]\
    \ < 0) {\n      result[i] = 0;\n    }\n  }\n  \n  return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83lpyqoo.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp83lpyqoo.cpp:31:16: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} and \u2018std::vector<long\
    \ int>\u2019)\n   31 |     if(game[i] != guess) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp83lpyqoo.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp83lpyqoo.cpp:31:19:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   31 |     if(game[i] != guess) {\n      |    \
    \               ^~~~~\nIn file included from /usr/include/c++/9/regex:62,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp83lpyqoo.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp83lpyqoo.cpp:31:19: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, l"
  stdout: ''
  timestamp: 1660109278
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long long sum = 0;\n    for(long long i = 0; i < guess.size(); i++) {\n \
    \       sum += std::abs(game[i] - guess[i]);\n    }\n    std::vector<long> result(guess.size());\n\
    \    for(long long i = 0; i < guess.size(); i++) {\n        result[i] = std::abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long answer = 0;\n    long maxdiff = std::numeric_limits<long>::max();\n\
    \    int bestguess = 0;\n    // std::cout << game << std::endl;\n    for (long\
    \ i =0; i < guess.size(); i++) {\n        int guesses = std::count(game.begin(),\
    \ game.end(), guess[i]);\n        if (guesses == 0) {\n            answer = 0;\n\
    \            break;\n        }\n        if (guesses > bestguess) {\n         \
    \   bestguess = guesses;\n            answer = guesses - 1;\n        }\n     \
    \   if (guesses < bestguess) {\n            answer = bestguess - guesses;\n  \
    \          break;\n        }\n    }\n    for (long i =0; i < game.size(); i++)\
    \ {\n        int guesses = std::count(guess.begin(), guess.end(), game[i]);\n\
    \        if (guesses == 0) {\n            answer = 0;\n            break;\n  \
    \      }\n        if (guesses > bestguess) {\n            answer = guesses - 1;\n\
    \        }\n        if (guesses < bestguess) {\n            answer = bestguess\
    \ - guesses;\n            break;\n        }\n    }\n    std::vector<long> result(game.size());\n\
    \    long offset = 0;\n    for (long i =0; i < game.size(); i++) {\n        if\
    \ (guess == game) {\n            result[i] = guess;\n            offset += game[i];\n\
    \        } else if (guess == game) {\n            result[i] = guess;\n       \
    \     offset += guess;\n        } else {\n            long diff = game[i] - guess;\n\
    \            result[i] = offset;\n            offset += diff;\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphl_3iuhw.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmphl_3iuhw.cpp:51:25: error: cannot\
    \ convert \u2018std::vector<long int>\u2019 to \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} in assignment\n\
    \   51 |             result[i] = guess;\n      |                         ^~~~~\n\
    \      |                         |\n      |                         std::vector<long\
    \ int>\n/tmp/tmphl_3iuhw.cpp:54:25: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019} in assignment\n   54 |   \
    \          result[i] = guess;\n      |                         ^~~~~\n      |\
    \                         |\n      |                         std::vector<long\
    \ int>\n/tmp/tmphl_3iuhw.cpp:55:20: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019\
    )\n   55 |             offset += guess;\n      |             ~~~~~~~^~~~~~~~\n\
    /tmp/tmphl_3iuhw.cpp:57:33: error: no match for \u2018operator-\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} and \u2018std::vector<long int>\u2019)\n   57 | \
    \            long diff = game[i] - guess;\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphl_3iuhw.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution "
  stdout: ''
  timestamp: 1660109278
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    std::vector<long> ret;\n    for (unsigned int\
    \ i = 0; i < guess.size(); i++) {\n        long x = game[guess[i]-1];\n      \
    \  if (x != guess[i]) {\n            ret[i] = std::abs(x - game[guess[i]-1]);\n\
    \        } else {\n            ret[i] = 0;\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    // Your code goes here!\n    std::vector<long>\
    \ gameResult(game.size(),0);\n    int game_index = 0;\n    int guess_index = 0;\n\
    \    while(game_index < game.size() && guess_index < guess.size()) {\n       \
    \ if (game[game_index] == guess[guess_index]) {\n            gameResult[game_index]\
    \ = 0;\n            game_index++;\n            guess_index++;\n        } else\
    \ {\n            if (game[game_index] > guess[guess_index]) {\n              \
    \  gameResult[game_index] = game[game_index] - guess[guess_index];\n         \
    \       game_index++;\n            } else {\n                gameResult[game_index]\
    \ = guess[guess_index] - game[game_index];\n                game_index++;\n  \
    \              guess_index++;\n            }\n        }\n    }\n    for(int i\
    \ = 0; i < game.size(); i++) {\n        if(gameResult[i] < 0) {\n            gameResult[i]\
    \ = 0;\n        }\n    }\n    return gameResult;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmplexd3aju: /tmp/tmplexd3aju.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t// Your code goes here\n\tint m = game.size(), n = guess.size();\n\tstd::vector<long>\
    \ dif(m);\n\tfor(int i = 0; i < m; ++i) {\n\t\tfor(int j = 0; j < n; ++j) {\n\t\
    \t\tif(game[i] == guess[j]) {\n\t\t\t\tdif[i] = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\tdif[i] = abs(game[i] - guess[j]);\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn dif;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpdfgrznzr: /tmp/tmpdfgrznzr.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::sort(game.begin(), game.end());\n    std::sort(guess.begin(), guess.end());\n\
    \    std::set<int> set_game;\n    for (int i = 0; i != game.size(); i++) {\n \
    \       set_game.insert(game[i]);\n    }\n\n    std::vector<long> score;\n   \
    \ std::vector<long> guessed_value;\n    for (long i = 0; i < guess.size(); i++)\
    \ {\n        guessed_value.push_back(0);\n    }\n    for (long i = 0; i < game.size();\
    \ i++) {\n        long diff = guessed_value[i] - game[i];\n        if (set_game.find(game[i])\
    \ != set_game.end()) {\n            if (guessed_value[i] != game[i]) {\n     \
    \           guessed_value[i] = diff;\n                score.push_back(diff);\n\
    \            }\n        } else {\n            guessed_value[i] = diff;\n     \
    \       score.push_back(diff);\n        }\n    }\n    return score;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpv16tc0lb: /tmp/tmpv16tc0lb.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    if (game.size() != guess.size()) {\n        throw\
    \ std::runtime_error(\"Game and guess must have equal size.\");\n    }\n    std::vector<long>\
    \ solution(n);\n    // This is just to prevent a compiler warning about unused\
    \ variables.\n    long min_score = game[0];\n    long max_score = game[0];\n \
    \   for (int i = 1; i < n; i++) {\n        if (game[i] < min_score)\n        \
    \    min_score = game[i];\n        if (game[i] > max_score)\n            max_score\
    \ = game[i];\n    }\n    long difference = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (game[i] != guess[i])\n            difference += abs(guess[i]\
    \ - game[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        if (game[i] ==\
    \ guess[i]) {\n            solution[i] = 0;\n        } else {\n            solution[i]\
    \ = difference;\n        }\n    }\n    return solution;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpycp1rlim: /tmp/tmpycp1rlim.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Write your code here\n  std::vector<long> result(game.size(), 0);\n  for\
    \ (long i = guess; i < game.size(); i++) {\n    if (game[i] != guess[i]) {\n \
    \     result[i] = abs(guess[i] - game[i]);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdb64y59u.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpdb64y59u.cpp:16:17: error: cannot\
    \ convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n\
    \   16 |   for (long i = guess; i < game.size(); i++) {\n      |             \
    \    ^~~~~\n      |                 |\n      |                 std::vector<long\
    \ int>\n"
  stdout: ''
  timestamp: 1660109278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code here\n    assert(game.size() == guess.size());\n    long result\
    \ = game[0];\n    std::vector<long> ans;\n    ans.push_back(result);\n    for(int\
    \ i=0;i<game.size();i++){\n        if(game[i] != result){\n            ans.push_back(result-game[i]);\n\
    \        } else {\n            ans.push_back(abs(guess[i]-game[i]));\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpwd8h5wwo: /tmp/tmpwd8h5wwo.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if (game.size() != guess.size()) {\n        throw std::invalid_argument(\"\
    The game and guess lists must be of equal size.\");\n    }\n    std::vector<long>\
    \ scores(game.size(), 0);\n    for (size_t i = 0; i < game.size(); i++) {\n  \
    \      // If any one of the guesses is zero, the guess has failed.\n        if\
    \ (guess[i] == 0) {\n            scores[i] = abs(game[i] - guess[i]);\n      \
    \  } else if (game[i] != guess[i]) {\n            scores[i] = abs(game[i] - guess[i]);\n\
    \        } else {\n            scores[i] = 0; // All the guesses are equal\n \
    \       }\n    }\n    return scores;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Your code goes here\n  assert(game.size() == guess.size());\n  std::vector<long>\
    \ gameScore(game.size());\n  std::vector<long> guessScore(game.size());\n  long\
    \ numCorrect = 0;\n  for (int i = 0; i < game.size(); i++) {\n    long matchScore\
    \ = game[i] != 0 ? game[i] : abs(guess[i] - game[i]);\n    gameScore[i] = matchScore;\n\
    \    guessScore[i] = guess[i];\n    if (guess[i] == game[i]) {\n      numCorrect++;\n\
    \    }\n  }\n  return std::vector(guessScore);\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp92jxekyh: /tmp/tmp92jxekyh.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size(), 0);\n    for (long i = 0; i < game.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ ++i) {\n        if (game[i] != guess[i]) {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        } else {\n            result[i] = 0L;\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> solution(guess.size());\n    assert(game.size() == guess.size());\n\
    \    long diff = 0;\n    for (long i = 0; i < game.size(); ++i) {\n        diff\
    \ = std::abs(game[i] - guess[i]);\n        solution[i] = diff;\n    }\n    return\
    \ solution;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109278
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(game.size());\n  int k = 0;\n  // int l = game.size();\n\
    \  // std::cout<<\"k: \"<<k<<\"l: \"<<l<<std::endl;\n  for (int i = 0; i < game.size();\
    \ i++) {\n    for (int j = 0; j < guess.size(); j++) {\n      if (game[i] == guess[j])\
    \ {\n        result[i] = 0;\n        result[k] = 0;\n        result[k + 1] = result[k]\
    \ + 1;\n        break;\n      }\n      if (game[i] > guess[j]) {\n        result[i]\
    \ = abs(game[i] - guess[j]);\n        result[k + 1] = result[k];\n      }\n  \
    \    else if (game[i] < guess[j]) {\n        result[i] = abs(guess[j] - game[i]);\n\
    \        result[k + 1] = result[k];\n      }\n    }\n    k++;\n  }\n  std::cout<<\"\
    result: \"<<result<<std::endl;\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3c8awz6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpa3c8awz6.cpp:37:24: error: no match\
    \ for \u2018operator<<\u2019 (operand types are \u2018std::basic_ostream<char>\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   37 |   std::cout<<\"result: \"<<result<<std::endl;\n\
    \      |   ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~\n      |            |             |\n\
    \      |            |             std::vector<long int>\n      |            std::basic_ostream<char>\n\
    In file included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpa3c8awz6.cpp:2:\n/usr/include/c++/9/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/ostream:117:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; st"
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::map<long, bool> score;\n    for (long i = 0; i < game.size(); ++i) {\n\
    \        long score = game[i] - guess[i];\n        if (score) {\n            score[game[i]]\
    \ = true;\n            score[guess[i]] = true;\n        }\n    }\n    std::vector<long>\
    \ result(game.size());\n    long best = 0;\n    for (long i = 0; i < game.size();\
    \ ++i) {\n        bool found = score.find(game[i]) != score.end();\n        if\
    \ (found == score.end() && (best < guess[i] || best > game[i])) {\n          \
    \  best = guess[i];\n        }\n        if (best == guess[i]) {\n            result[i]\
    \ = 0;\n        } else if (best > guess[i]) {\n            result[i] = best -\
    \ game[i];\n        } else {\n            result[i] = game[i] - best;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgxsgbh6x.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpgxsgbh6x.cpp:18:26: error: invalid\
    \ types \u2018long int[__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type {aka long int}]\u2019 for array subscript\n   18 |        \
    \     score[game[i]] = true;\n      |                          ^\n/tmp/tmpgxsgbh6x.cpp:19:27:\
    \ error: invalid types \u2018long int[__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type {aka long int}]\u2019 for array subscript\n   19\
    \ |             score[guess[i]] = true;\n      |                           ^\n\
    /tmp/tmpgxsgbh6x.cpp:26:19: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018bool\u2019 and \u2018std::map<long int, bool>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_iterator<std::pair<const long int, bool> >\u2019})\n\
    \   26 |         if (found == score.end() && (best < guess[i] || best > game[i]))\
    \ {\n      |             ~~~~~ ^~ ~~~~~~~~~~~\n      |             |         \
    \        |\n      |             bool              std::map<long int, bool>::iterator\
    \ {aka std::_Rb_tree_iterator<std::pair<const long int, bool> >}\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgxsgbh6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpgxsgbh6x.cpp:26:32:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018bool\u2019\n   26 |         if (found == score.end() && (best < guess[i]\
    \ || best > game[i])) {\n      |                                ^\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux"
  stdout: ''
  timestamp: 1660109279
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code goes here\n    std::set<long> guesses(guess.begin(), guess.end());\n\
    \    long total = 0;\n    for (long i = 0; i < game.size(); i++) {\n        long\
    \ j = 0;\n        for (j = 0; j < guess.size(); j++) {\n            long diff\
    \ = game[i] - guess[j];\n            if (diff < 0) {\n                diff *=\
    \ -1;\n            }\n            if (diff == 0) {\n                guesses.erase(guess[j]);\n\
    \            } else {\n                guesses.insert(guess[j]);\n           \
    \ }\n            total += diff;\n        }\n    }\n\n    std::vector<long> results(game.size());\n\
    \    for (long i = 0; i < game.size(); i++) {\n        results[i] = total;\n \
    \   }\n    for (long i = 0; i < guess.size(); i++) {\n        auto it = guesses.find(guess[i]);\n\
    \        if (it != guesses.end()) {\n            results[it->second] = guess[i]\
    \ - guess[it->second];\n        }\n    }\n    return results;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalxn5kya.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpalxn5kya.cpp:40:25: error: request\
    \ for member \u2018second\u2019 in \u2018* it.std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   40 |             results[it->second] = guess[i] - guess[it->second];\n  \
    \    |                         ^~~~~~\n/tmp/tmpalxn5kya.cpp:40:56: error: request\
    \ for member \u2018second\u2019 in \u2018* it.std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   40 |             results[it->second] = guess[i] - guess[it->second];\n  \
    \    |                                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660109278
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    long score = 0; // the score of the game\n    long score2 = 0; // the score\
    \ of the guess\n    long diff = 0; // the difference between the two scores\n\
    \    for (long i=0; i<game.size(); i++) {\n        // if the game[i] was won\n\
    \        if (game[i] == 0) {\n            result[i] = score2;\n        }\n   \
    \     // if the guess was won\n        else {\n            score = abs(score2\
    \ - game[i]);\n            result[i] = abs(score2 - game[i]);\n        }\n   \
    \     score2 = game[i];\n        // if the game was won\n        if (game[i] ==\
    \ 0) {\n            diff = abs(score2 - guess[i]);\n        }\n        // if the\
    \ guess was won\n        else {\n            diff = abs(score2 - guess[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpwkprefow: /tmp/tmpwkprefow.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::sort(game.begin(), game.end());\n  std::sort(guess.begin(), guess.end());\n\
    \  long gameMax = *std::max_element(game.begin(), game.end());\n  long guessMax\
    \ = *std::max_element(guess.begin(), guess.end());\n  long score = 0;\n  for (long\
    \ i = 0; i < guess.size(); i++) {\n    if (game[i] < guessMax) {\n      score\
    \ += gameMax - game[i];\n    }\n    if (guessMax < game[i]) {\n      score +=\
    \ guessMax - game[i];\n    }\n  }\n  std::vector<long> result(guess.size());\n\
    \  for (size_t i = 0; i < guess.size(); i++) {\n    result[i] = abs(guessMax -\
    \ game[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp8b205w35: /tmp/tmp8b205w35.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(game.size());\n    for (size_t\
    \ i = 0; i < game.size(); ++i) {\n        for (size_t j = 0; j < guess.size();\
    \ ++j) {\n            if (game[i] == guess[j]){\n                result[i] = 0;\n\
    \            }\n            else{\n                result[i] = abs(game[i] - guess[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpg0a0cp9c: /tmp/tmpg0a0cp9c.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109279
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if(game.size() != guess.size()){\n        std::cout << \"The lengths of the\
    \ two arrays must be the same\" << std::endl;\n        std::cout << \"game: \"\
    \ << game.size() << std::endl;\n        std::cout << \"guess: \" << guess.size()\
    \ << std::endl;\n    }\n    std::vector<long> result;\n    long temp;\n    for(long\
    \ i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n          \
    \  result.push_back(0);\n            continue;\n        }\n        temp = (std::abs(game[i]-guess[i]));\n\
    \        if(temp > 0){\n            result.push_back(temp);\n        }\n     \
    \   else{\n            result.push_back(std::abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    //write your code here\n    std::vector<long> diff;\n    for(int i = 0; i\
    \ < game.size(); i++){\n        diff[i] = abs(game[i] - guess[i]);\n    }\n  \
    \  return diff;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result(game.size());\n\tstd::vector<long>::iterator iter;\n\
    \t// Iterate over the vectors simultaneously, storing the difference of each element.\n\
    \tfor (iter = game.begin(); iter != game.end(); ++iter)\n\t\tresult[*iter] = std::abs(guess[*iter]\
    \ - game[*iter]);\n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmppeet6cir: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Write your code here.\n  assert(game.size() == guess.size());\n  std::vector<long>\
    \ result(game.size());\n  for (size_t i = 0; i < game.size(); i++) {\n    if (game[i]\
    \ != guess[i]) {\n      result[i] = abs(game[i] - guess[i]);\n    } else {\n \
    \     result[i] = 0;\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    long maxScore = -10000;\n  \
    \  long score = std::accumulate(game.begin(), game.end(), 0L);\n    for (size_t\
    \ i = 0; i < guess.size(); ++i) {\n        result[i] = maxScore;\n        maxScore\
    \ = std::max(maxScore, abs(game[i] - guess[i]));\n    }\n    std::fill(result.begin(),\
    \ result.end(), 0);\n    if (maxScore == score) result[game.size()-1] = maxScore;\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppp3qzvda.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppp3qzvda.cpp:19:62: error: no matching\
    \ function for call to \u2018max(long int&, int)\u2019\n   19 |         maxScore\
    \ = std::max(maxScore, abs(game[i] - guess[i]));\n      |                    \
    \                                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppp3qzvda.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmppp3qzvda.cpp:19:62: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n   19 |         maxScore = std::max(maxScore, abs(game[i]\
    \ - guess[i]));\n      |                                                     \
    \         ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n   \
    \              from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppp3qzvda.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppp3qzvda.cpp:19:62:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   19 |         maxScore = std::max(maxScore,\
    \ abs(game[i] - guess[i]));\n      |                                         \
    \                     ^\nIn file included from /usr/in"
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    long ans = 0, score = -2;\n    for (size_t i = 0; i < game.size(); i++) {\n\
    \        long diff = game[i] - guess[i];\n        if (diff < 0) {\n          \
    \  diff = diff + game[i];\n        }\n        ans = max(diff, ans);\n        result[i]\
    \ = ans;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjds40i7.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppjds40i7.cpp:22:15: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   22 |         ans = max(diff, ans);\n      |               ^~~\n      |   \
    \            std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppjds40i7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> res;\n    res.resize(guess.size());\n\
    \    int index = 0;\n    for (int i = 0; i < game.size() - 1; i++) {\n       \
    \ if (game[i] == guess[index]) {\n            res[i] = 0;\n        } else {\n\
    \            res[i] = abs(game[i] - guess[index]);\n        }\n        index++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp0tpg_ntf: /tmp/tmp0tpg_ntf.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    int nGame = game.size();\n    int nGuess = guess.size();\n\
    \    std::vector<long> gameResult;\n    gameResult.assign(nGuess, 0);\n    std::vector<long>\
    \ guessResult;\n    guessResult.assign(nGuess, 0);\n    for (int i = 0; i < nGame;\
    \ i++) {\n        int idx = i;\n        while (idx < nGuess)\n            if (game[idx]\
    \ == guess[idx]) {\n                gameResult[idx] += 1;\n                idx++;\n\
    \            }\n            else {\n                guessResult[idx] += abs(game[i]\
    \ - guess[idx]);\n                idx += 1;\n            }\n    }\n    return\
    \ gameResult;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp9rt4w50t: /tmp/tmp9rt4w50t.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> diff;\n    long diffs[100] = {};\n    for (int i = 0; i\
    \ < game.size(); i++) {\n        int cnt = 0;\n        for (int j = 0; j < guess.size();\
    \ j++) {\n            if (game[i] == guess[j]) cnt++;\n        }\n        diffs[i]\
    \ = cnt;\n    }\n    for (int i = 0; i < guess.size(); i++) {\n        long j\
    \ = i;\n        while (j > 0 && game[j-1] == guess[j]) j--;\n        diffs[i]\
    \ += j + 1;\n    }\n    return diffs;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5tdkl1_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpj5tdkl1_.cpp:28:12: error: could\
    \ not convert \u2018diffs\u2019 from \u2018long int [100]\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   28 |     return diffs;\n      |            ^~~~~\n      |   \
    \         |\n      |            long int [100]\n"
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    // The absolute difference between\
    \ guess and score is what we return for misses\n    long max_diff = std::numeric_limits<long>::max();\n\
    \    // If there is a score for every element in the game\n    if(game.size()\
    \ == guess.size()) {\n        // The max difference between a score and the guess\
    \ that is best match\n        long max_diff = std::numeric_limits<long>::max();\n\
    \        // Loop through each game element\n        for(int i = 0; i < game.size();\
    \ i++) {\n            // If there is a score for that game element\n         \
    \   if(game[i] != 0) {\n                // And if that score is better than the\
    \ guess that is best match\n                if(max_diff > abs(game[i] - guess[i]))\
    \ {\n                    // Update max diff to that score\n                  \
    \  max_diff = abs(game[i] - guess[i]);\n                    // Update max diff\
    \ to that score\n                }\n            }\n        }\n        // If the\
    \ max diff is positive\n        if(max_diff > 0)\n            // Return it as\
    \ the result\n            return std::vector<long> { max_diff };\n        else\n\
    \            // Return 0 as result\n            return std::vector<long> { 0 };\n\
    \    }\n    // If game and guess are of different length\n    else {\n       \
    \ // If there are 0 scores in the game array\n        if(game.size() == 0)\n \
    \           // Return 0 as result\n            return std::vector<long> { 0 };\n\
    \        // If there are 0 guesses in the guess array\n        if(guess.size()\
    \ == 0)\n            // Return 0 as result\n            return std::vector<long>\
    \ { 0 };\n        // If there are different number of scores\n        if(game.size()\
    \ != guess.size()) {\n            // Return 0 as result\n            return std::vector<long>\
    \ { 0 };\n        }\n        // Loop through each game element\n        for(int\
    \ i = 0; i < game.size(); i++) {\n            // If there is a score for that\
    \ game element\n            if(game[i] != 0) {\n                // And if that\
    \ score is better than the guess that is best match\n                if(max_diff\
    \ > abs(game[i] - guess[i])) {\n                    // Update max diff to that\
    \ score\n                    max_diff = abs(game[i] - guess[i]);\n           \
    \         // Update max diff to that score\n                }\n            }\n\
    \        }\n        // If the max diff is positive\n        if(max_diff > 0)\n\
    \            // Return it as the result\n            return std::vector<long>\
    \ { max_diff };\n        else\n            // Return 0 as result\n           \
    \ return std::vector<long> { 0 };\n    }\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmphmr543i9: /tmp/tmphmr543i9.cpp:79: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    std::vector<long> result(n);\n    int a[n];\n \
    \   int b[n];\n    for (int i = 0; i < n; i++) {\n        a[i] = game[i] - guess[i];\n\
    \        b[i] = guess[i] - game[i];\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        if (b[i]>0) {\n            result[i] = b[i];\n        } else {\n    \
    \        result[i] = abs(a[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    auto ret = std::vector<long>(game.size());\n    for (size_t i = 0; i < game.size();\
    \ ++i)\n        ret[i] = std::abs(game[i] - guess[i]);\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int num_matches = game.size();\n    assert(num_matches == guess.size());\n\
    \    // A map to store the result\n    std::vector<long> res(num_matches);\n \
    \   for (int i = 0; i < num_matches; ++i) {\n        res[i] = game[i] - guess[i];\n\
    \    }\n\n    for (int i = 0; i < num_matches; ++i) {\n        int max_diff =\
    \ std::max(game[i], guess[i]);\n        for (int j = 0; j < num_matches; ++j)\
    \ {\n            if (game[j] > max_diff) {\n                res[j] += game[j]\
    \ - max_diff;\n            }\n            if (guess[j] > max_diff) {\n       \
    \         res[j] += guess[j] - max_diff;\n            }\n        }\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpbjewj375: /tmp/tmpbjewj375.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> answer;\n   \
    \ long currScore;\n    for (size_t i = 0; i < game.size(); ++i)\n    {\n     \
    \   if (game[i] == guess[i])\n        {\n            answer.push_back(0);\n  \
    \      }\n        else\n        {\n            currScore = abs(game[i] - guess[i]);\n\
    \            answer.push_back(currScore);\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Complete this method\n    std::vector<long> res(guess.size());\n    long\
    \ diff = 0;\n    for (int i = 0; i < guess.size(); i++)\n    {\n        diff =\
    \ abs(guess[i] - game[i]);\n        if (diff == 0)\n        {\n            res[i]\
    \ = 0;\n        }\n        else\n        {\n            res[i] = diff;\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    \n    int i = 0, j = 0;\n    int n = game.size();\n    int nGuess = guess.size();\n\
    \    \n    // we create an array to store the positions of correct guesses.\n\
    \    std::vector<long> correct_positions(nGuess, -1);\n    \n    while (i<n &&\
    \ j<nGuess) {\n        if (game[i] == guess[j]) \n        {\n            // If\
    \ both are equal, we compare their positions.\n            if (correct_positions[i]\
    \ == -1)\n                correct_positions[i] = j;\n            \n          \
    \  i += 1;\n            j += 1;\n        }\n        else if (game[i] > guess[j])\n\
    \            i += 1;\n        else\n            j += 1;\n    }\n    \n    // We\
    \ don't know how far off each guess was, so we return a vector of the same length\
    \ as the guesses vector.\n    return correct_positions;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpnavooim_: /tmp/tmpnavooim_.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    // sort the array so that it\
    \ is easier to compare\n    std::sort(game.begin(), game.end());\n    std::sort(guess.begin(),\
    \ guess.end());\n    for (int i = 0; i != guess.size(); ++i) {\n        result[i]\
    \ = game[i] > guess[i] ? game[i] - guess[i] : guess[i] - game[i];\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpl_ji6d2p: /tmp/tmpl_ji6d2p.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    auto ret = std::vector<long>(game.size());\n    for (int i = 0; i < game.size();\
    \ ++i) {\n        ret[i] = std::abs(game[i] - guess[i]);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size(), 0);\n    for (int i=0; i<game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> ans;\n  long max_val = max(game.begin(), game.end());\n \
    \ long min_val = min(game.begin(), game.end());\n\n  for (int i = 0; i < guess.size();\
    \ i++) {\n    long max_guess = max(guess.begin(), guess.end());\n    long min_guess\
    \ = min(guess.begin(), guess.end());\n\n    long val = 0;\n    long diff = 0;\n\
    \    long temp = 0;\n\n    for (int j = 0; j < game.size(); j++) {\n      if (j\
    \ == i) {\n        continue;\n      }\n\n      if (game[j] == 0) {\n        diff\
    \ = 0;\n      } else if (game[j] == guess[i]) {\n        val = 0;\n      } else\
    \ if (game[j] > guess[i]) {\n        diff = game[j] - guess[i];\n      } else\
    \ if (game[j] < guess[i]) {\n        diff = guess[i] - game[j];\n      }\n   \
    \   if (diff > max_guess) {\n        temp = diff;\n        diff = max_guess;\n\
    \        max_guess = temp;\n      } else if (diff < min_guess) {\n        temp\
    \ = diff;\n        diff = min_guess;\n        min_guess = temp;\n      }\n   \
    \ }\n    ans.push_back(val + diff - max_val + min_val - min(max_guess, min_guess));\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnkc7xk8v.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpnkc7xk8v.cpp:15:21: error: cannot\
    \ convert \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018long int\u2019 in initialization\n   15 |   long max_val\
    \ = max(game.begin(), game.end());\n      |                  ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                     |\n      |                     const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpnkc7xk8v.cpp:16:21: error: cannot convert\
    \ \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   16 |   long min_val = min(game.begin(),\
    \ game.end());\n      |                  ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n     \
    \ |                     |\n      |                     const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpnkc7xk8v.cpp:19:25: error: cannot convert\
    \ \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   19 |     long max_guess = max(guess.begin(),\
    \ guess.end());\n      |                      ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpnkc7xk8v.cpp:20:25: error: cannot convert\
    \ \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   20 |     long min_guess = min(guess.begin(),\
    \ guess.end());\n      |                      ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpnkc7xk8v.cpp:50:52: error: \u2018min\u2019\
    \ was not declared in this scope; did you mean \u2018std::min\u2019?\n   50 |\
    \     ans.push_back(val + diff - max_val + min_val - min(max_guess, min_guess));\n\
    \      |                                                    ^~~\n      |     \
    \                   "
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    // O(N)\n    // O(N)\n    std::vector<long>\
    \ guess_result(guess.size());\n    for (long &g : guess) {\n        long max_score\
    \ = 0;\n        long max_score_position = 0;\n        long i = 0;\n        long\
    \ j = 0;\n        while (i < game.size() && j < guess.size()) {\n            if\
    \ (game[i] == guess[j]) {\n                max_score = std::max(max_score, abs(i-j));\n\
    \                max_score_position = i;\n                i++;\n             \
    \   j++;\n            } else if (game[i] != guess[j]) {\n                i++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  guess_result[g] = max_score;\n    }\n    return guess_result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi196qthf.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpi196qthf.cpp:25:57: error: no matching\
    \ function for call to \u2018max(long int&, int)\u2019\n   25 |              \
    \   max_score = std::max(max_score, abs(i-j));\n      |                      \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpi196qthf.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpi196qthf.cpp:25:57: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n   25 |                 max_score = std::max(max_score,\
    \ abs(i-j));\n      |                                                        \
    \ ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n           \
    \      from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpi196qthf.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpi196qthf.cpp:25:57:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   25 |                 max_score = std::max(max_score,\
    \ abs(i-j));\n      |                                                        \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:62,\n    "
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    int n = game.size();\n    assert(n == guess.size());\n\
    \    std::vector<long> res(n);\n    for (int i = 0; i < n; i++) {\n        res[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpyvuw837e: /tmp/tmpyvuw837e.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0, 0,
    1}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    std::vector<int> difs(game.size());\n\
    \    \n    // We have to use this temp vector because we need to know the size\
    \ of difs after\n    // we know the size of the game. Otherwise, we could have\
    \ used std::map<int,long>.\n    std::vector<int> tmp(game.size());\n    \n   \
    \ for (std::size_t i = 0; i < guess.size(); ++i) {\n        if (guess[i] == game[i])\
    \ {\n            result[i] = 0;\n        }\n        else if (guess[i] != game[i])\
    \ {\n            int diff = abs(guess[i] - game[i]);\n            difs[i] = diff;\n\
    \            tmp[i] = diff;\n        }\n    }\n    \n    for (std::size_t i =\
    \ 0; i < guess.size(); ++i) {\n        int diff = tmp[i];\n        if (result[i]\
    \ == 0 && diff != 0) {\n            result[i] = diff;\n        }\n    }\n    \n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    auto guesses_end = guess.end();\n\
    \    for (size_t i = 0; i != game.size(); ++i) {\n        auto guess = guesses_end\
    \ - i;\n        for (size_t j = i; guesses_end - j < guess; ++j)\n           \
    \ guesses_end--;\n        result[i] = abs(guess-game[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzwgp9vc6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpzwgp9vc6.cpp:20:38: error: no matching\
    \ function for call to \u2018abs(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >)\u2019\n   20 |         result[i] = abs(guess-game[i]);\n      |    \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n\
    \                 from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzwgp9vc6.cpp:2:\n/usr/include/stdlib.h:840:12:\
    \ note: candidate: \u2018int abs(int)\u2019\n  840 | extern int abs (int __x)\
    \ __THROW __attribute__ ((__const__)) __wur;\n      |            ^~~\n/usr/include/stdlib.h:840:21:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018int\u2019\n  840 | extern int abs\
    \ (int __x) __THROW __attribute__ ((__const__)) __wur;\n      |              \
    \   ~~~~^~~\nIn file included from /usr/include/c++/9/valarray:603,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n       \
    \          from /tmp/tmpzwgp9vc6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:445:5:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_UnClos<std::_Abs,\
    \ std::_ValArray, _Tp>, _Tp> std::abs(const std::valarray<_Tp>&)\u2019\n  445\
    \ |     _DEFINE_EXPR_UNARY_FUNCTION(abs, _Abs)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:445:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpzwgp9vc6.cpp:20:38: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n   20 |         result[i] = abs(guess-game[i]);\n      |                   \
    \                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpzwgp9vc6.cpp:2:\n/usr/include/c++/9/bits/v"
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Your code here\n  std::vector<long> gamecopy(game);\n  std::vector<long>\
    \ guesscopy(guess);\n  std::sort(gamecopy.begin(), gamecopy.end());\n  std::sort(guesscopy.begin(),\
    \ guesscopy.end());\n  std::vector<long> result(guesscopy.size());\n  \n  // for\
    \ loop to compare the guess and each score \n  for(int i = 0; i < guesscopy.size();\
    \ i++){\n    \n    if(gamecopy[i] == guesscopy[i]){\n      result[i] = 0;\n  \
    \  }\n    else{\n      result[i] = abs(gamecopy[i] - guesscopy[i]);\n    }\n \
    \ }\n  \n  return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpy6aisteb: /tmp/tmpy6aisteb.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long score[game.size()];\n    std::vector<long> result(game.size());\n  \
    \  long max_score = game[0];\n    long max_guess = guess[0];\n    for(long i=0;\
    \ i<game.size(); i++) {\n        if(game[i] > max_score)\n            max_score\
    \ = game[i];\n    }\n    for(long i=0; i<guess.size(); i++) {\n        if(guess[i]\
    \ > max_guess)\n            max_guess = guess[i];\n    }\n    for(long i=0; i<game.size();\
    \ i++) {\n        score[i] = abs(game[i] - max_guess);\n        result[i] = abs(guess[i]\
    \ - max_score);\n    }\n    for(long i=0; i<game.size(); i++) {\n        if(result[i]\
    \ == 0)\n            result[i] = abs(score[i] - max_score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpkies0vyc: /tmp/tmpkies0vyc.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your function here\n    int size = game.size();\n    std::vector<long>\
    \ result;\n    result.resize(size);\n    for(int i = 0; i < size; i++) {\n   \
    \     if(game[i] != guess[i]) {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::sort(game.begin(), game.end());\n    std::sort(guess.begin(),\
    \ guess.end());\n    std::vector<long> result;\n    for (int i = 0; i < guess.size();\
    \ i++) {\n        long guess = guess[i];\n        long score = game[i];\n    \
    \    result[i] = std::abs(guess - score);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcpy60lm.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpxcpy60lm.cpp:19:29: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   19 |         long guess\
    \ = guess[i];\n      |                             ^\n"
  stdout: ''
  timestamp: 1660109281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long diff;\n    std::vector<long> result(guess.size());\n    for(size_t i\
    \ = 0;i < guess.size(); ++i) {\n        diff = abs(game[i] - guess[i]);\n    \
    \    if(diff == 0) {\n            result[i] = 0;\n        } else {\n         \
    \   result[i] = diff;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109281
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    // fill with 0's\n    for (auto\
    \ i = 0; i < guess.size(); ++i)\n        result[i] = 0;\n    // fill with guess\
    \ values\n    for (auto i = 0; i < guess.size(); ++i) {\n        result[i] = game[i];\n\
    \    }\n    // fill with abs difference\n    for (auto i = 0; i < guess.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    // fill with\
    \ correct values\n    for (auto i = 0; i < guess.size(); ++i) {\n        if (game[i]\
    \ == guess[i])\n            result[i] = 0;\n        else\n            result[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here.\n    auto n = guess.size();\n    std::vector<long>\
    \ result(n);\n    \n    std::iota(result.begin(), result.end(), 0);\n    auto\
    \ gameSize = game.size();\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = 0; j < n; j++) {\n            if (gameSize != j) continue;\n           \
    \ if (game[i] == guess[j]) {\n                std::swap(result[i], result[j]);\n\
    \            }\n        }\n    }\n    \n    for (int i = 0; i < n; i++) {\n  \
    \      if (result[i] != 0) {\n            result[i] = std::abs(game[i] - guess[i]);\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp2fipbpd4: /tmp/tmp2fipbpd4.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3})), (std::vector<long>({-1, -2, -3}))) == (std::vector<long>({2, 4, 6}))''
    failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    assert(game.size() == guess.size());\n\
    \    long score = 0;\n    long count = 0;\n    for (int i = 0; i < game.size();\
    \ i++) {\n        if (game[i] != guess[i]) {\n            result[count++] = abs(game[i]\
    \ - guess[i]);\n        } else {\n            result[count++] = abs(game[i] -\
    \ guess[i]);\n            score += abs(game[i] - guess[i]);\n        }\n    }\n\
    \    if (score == 0) {\n        for (int i = 0; i < game.size(); i++) {\n    \
    \        result[i] = abs(game[i] - guess[i]);\n        }\n    } else {\n     \
    \   for (int i = 0; i < game.size(); i++) {\n            result[i] = abs(result[i]\
    \ - score);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i=0; i<guess.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    // your code\n    std::vector<long> ret(guess.size(),0);\n\
    \    int j=0;\n    long max=0;\n    for (auto i=guess.begin(); i!=guess.end();\
    \ i++)\n    {\n        max+=*i;\n    }\n    for (auto i=game.begin(); i!=game.end();\
    \ i++)\n    {\n        if (*i==max)\n        {\n            for (auto j=guess.begin();\
    \ j!=guess.end(); j++)\n            {\n                if (*j==max)\n        \
    \        {\n                    ret[j]=0;\n                    break;\n      \
    \          }\n                else\n                {\n                    ret[j]=abs(*j-max);\n\
    \                    break;\n                }\n            }\n            break;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6y2jl_z.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpe6y2jl_z.cpp:31:24: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    )\n   31 |                     ret[j]=0;\n      |                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe6y2jl_z.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1040:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::_"
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code here\n    long result = 0;\n    std::vector<long> answer;\n\
    \    for (int i = 0; i < game.size(); i++) {\n        answer.push_back(0);\n \
    \   }\n    for (int i = 0; i < guess.size(); i++) {\n        long g = 0;\n   \
    \     for (int j = 0; j < game.size(); j++) {\n            if (game[j] == guess[i])\
    \ {\n                g++;\n            }\n        }\n        result = (std::abs(g\
    \ - guess[i]));\n        answer[i] = g;\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpnd20mdue: /tmp/tmpnd20mdue.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    // Write your code here\n   \
    \ std::pair<std::vector<long>, std::vector<long> > gamePair = std::minmax_element(game.begin(),\
    \ game.end());\n    std::pair<std::vector<long>, std::vector<long> > guessPair\
    \ = std::minmax_element(guess.begin(), guess.end());\n    long min = std::min(gamePair.first[0],\
    \ guessPair.first[0]);\n    long max = std::max(gamePair.first[0], guessPair.first[0]);\n\
    \    int min = std::min(gamePair.second[0], guessPair.second[0]);\n    int max\
    \ = std::max(gamePair.second[0], guessPair.second[0]);\n    int min2 = min - gamePair.second[0];\n\
    \    int max2 = max - gamePair.second[0];\n    int min3 = min2 - guessPair.second[0];\n\
    \    int max3 = max2 - guessPair.second[0];\n    for (int i = 1; i < game.size();\
    \ i++) {\n        if (game[i] != guess[i]) {\n            long diff = game[i]\
    \ - guess[i];\n            if (diff < min) min = diff;\n            if (diff >\
    \ max) max = diff;\n        }\n    }\n    result[0] = max;\n    if (min == max)\
    \ result[0] = 0;\n    if (min2 < max3) result[0] = min2;\n    if (min3 < max3)\
    \ result[0] = min3;\n    for (int i = 1; i < game.size(); i++) {\n        if (game[i]\
    \ != guess[i]) {\n            long diff = game[i] - guess[i];\n            if\
    \ (diff < min) min = diff;\n            if (diff > max) max = diff;\n        }\n\
    \    }\n    result[1] = max;\n    if (min == max) result[1] = 0;\n    if (min2\
    \ < max3) result[1] = min2;\n    if (min3 < max3) result[1] = min3;\n    for (int\
    \ i = 2; i < game.size(); i++) {\n        if (game[i] != guess[i]) {\n       \
    \     long diff = game[i] - guess[i];\n            if (diff < min) min = diff;\n\
    \            if (diff > max) max = diff;\n        }\n    }\n    result[2] = max;\n\
    \    if (min == max) result[2] = 0;\n    if (min2 < max3) result[2] = min2;\n\
    \    if (min3 < max3) result[2] = min3;\n    for (int i = 2; i < game.size();\
    \ i++) {\n        if (game[i] != guess[i]) {\n            long diff = game[i]\
    \ - guess[i];\n            if (diff < min) min = diff;\n            if (diff >\
    \ max) max = diff;\n        }\n    }\n    result[3] = max;\n    if (min == max)\
    \ result[3] = 0;\n    if (min2 < max3) result[3] = min2;\n    if (min3 < max3)\
    \ result[3] = min3;\n    for (int i = 3; i < game.size(); i++) {\n        if (game[i]\
    \ != guess[i]) {\n            long diff = game[i] - guess[i];\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnqy58c5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwnqy58c5.cpp:16:84: error: conversion\
    \ from \u2018pair<__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >,__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >>\u2019 to\
    \ non-scalar type \u2018pair<std::vector<long int>,std::vector<long int>>\u2019\
    \ requested\n   16 |     std::pair<std::vector<long>, std::vector<long> > gamePair\
    \ = std::minmax_element(game.begin(), game.end());\n      |                  \
    \                                               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwnqy58c5.cpp:17:85: error: conversion from \u2018pair<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >,__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >>\u2019 to non-scalar type \u2018pair<std::vector<long int>,std::vector<long\
    \ int>>\u2019 requested\n   17 |     std::pair<std::vector<long>, std::vector<long>\
    \ > guessPair = std::minmax_element(guess.begin(), guess.end());\n      |    \
    \                                                              ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwnqy58c5.cpp:20:9: error: conflicting declaration \u2018int min\u2019\n\
    \   20 |     int min = std::min(gamePair.second[0], guessPair.second[0]);\n  \
    \    |         ^~~\n/tmp/tmpwnqy58c5.cpp:18:10: note: previous declaration as\
    \ \u2018long int min\u2019\n   18 |     long min = std::min(gamePair.first[0],\
    \ guessPair.first[0]);\n      |          ^~~\n/tmp/tmpwnqy58c5.cpp:21:9: error:\
    \ conflicting declaration \u2018int max\u2019\n   21 |     int max = std::max(gamePair.second[0],\
    \ guessPair.second[0]);\n      |         ^~~\n/tmp/tmpwnqy58c5.cpp:19:10: note:\
    \ previous declaration as \u2018long int max\u2019\n   19 |     long max = std::max(gamePair.first[0],\
    \ guessPair.first[0]);\n      |          ^~~\n/tmp/tmpwnqy58c5.cpp:74:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   74\
    \ | int main() {\n      |            ^\n/tmp/tmpwnqy58c5.cpp:80:1: error: expected\
    \ \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/t"
  stdout: ''
  timestamp: 1660109281
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tassert(game.size() == guess.size());\n\tlong results[game.size()];\n\t\n\t//\
    \ Your code goes here\n\t\n\treturn results;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe2yki96a.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpe2yki96a.cpp:19:9: error: could\
    \ not convert \u2018results\u2019 from \u2018long int [(<anonymous> + 1)]\u2019\
    \ to \u2018std::vector<long int>\u2019\n   19 |  return results;\n      |    \
    \     ^~~~~~~\n      |         |\n      |         long int [(<anonymous> + 1)]\n"
  stdout: ''
  timestamp: 1660109281
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    for (long i = 0; i <game.size(); i++) {\n        assert(game[i] >= 0);\n\
    \        assert(game[i] < std::numeric_limits<long>::max());\n        assert(guess[i]\
    \ >= 0);\n        assert(guess[i] < std::numeric_limits<long>::max());\n     \
    \   if (game[i] != guess[i]) {\n            result[i] = abs(game[i] - guess[i]);\n\
    \        } else {\n            result[i] = 0;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp8idrcfwg: /tmp/tmp8idrcfwg.cpp:19: std::vector<long int> compare(std::vector<long
    int>, std::vector<long int>): Assertion `guess[i] >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> correctGuesses;\n  std::vector<long> wrongGuesses;\n  long\
    \ correctGuessesCount = 0;\n  long wrongGuessesCount = 0;\n  int gameSize = game.size();\n\
    \  int guessSize = guess.size();\n  long gameScore[gameSize];\n  long guessScore[guessSize];\n\
    \  for (int i = 0; i < gameSize; i++) {\n    gameScore[i] = game[i];\n  }\n  for\
    \ (int i = 0; i < guessSize; i++) {\n    guessScore[i] = guess[i];\n  }\n  for\
    \ (int i = 0; i < gameSize; i++) {\n    for (int j = 0; j < guessSize; j++) {\n\
    \      if (gameScore[i] < guessScore[j]) {\n        wrongGuessesCount++;\n   \
    \     gameScore[i] += gameScore[j];\n        guessScore[j] -= gameScore[i];\n\
    \      } else if (gameScore[i] > guessScore[j]) {\n        correctGuessesCount++;\n\
    \        gameScore[i] -= gameScore[j];\n        guessScore[j] += gameScore[i];\n\
    \      } else {\n        // The two scores match\n        if (gameScore[i] !=\
    \ guessScore[i]) {\n          wrongGuessesCount++;\n          gameScore[i] +=\
    \ gameScore[i];\n          guessScore[i] += guessScore[i];\n        }\n      }\n\
    \    }\n  }\n  // Return the array for correct guesses\n  for (int i = 0; i <\
    \ gameSize; i++) {\n    if (gameScore[i] != 0) {\n      correctGuesses.push_back(gameScore[i]);\n\
    \    }\n  }\n  // Return the array for wrong guesses\n  for (int i = 0; i < guessSize;\
    \ i++) {\n    if (guessScore[i] != 0) {\n      wrongGuesses.push_back(guessScore[i]);\n\
    \    }\n  }\n  std::vector<long> res;\n  res.reserve(wrongGuesses.size());\n \
    \ for (int i = 0; i < wrongGuesses.size(); i++) {\n    res.push_back(wrongGuesses[i]\
    \ - correctGuesses[i]);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpokj8wwlu: /tmp/tmpokj8wwlu.cpp:69: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    // Sort the two lists \n    std::sort(game.begin(),\
    \ game.end());\n    std::sort(guess.begin(), guess.end());\n    // Now compare\
    \ the list\n    // The for loop below is going to iterate over both lists, \n\
    \    // comparing the elements at each index with each other element\n    // and\
    \ adding the difference between them to an output array result.\n    for (int\
    \ i = 0; i < game.size(); ++i) {\n        int index_guess = guess.size() - i -\
    \ 1;\n        // If both are the same \n        // If they are the same index,\
    \ then we know that it is a correct match\n        // and we can exit out of the\
    \ loop\n        if (game[i] == game[index_guess] && game[i] != 0 && index_guess\
    \ >= 0) {\n            result.push_back(game[i] - game[index_guess]);\n      \
    \  }\n        // If one list is longer than the other, it means we found a match\n\
    \        // but we do not know where it is. So, we will need to look\n       \
    \ // for something in the longer list\n        else if (game.size() > guess.size())\
    \ {\n            int index_game = game.size() - i - 1;\n            // If the\
    \ longer list contains the same element\n            // as our guessed element,\
    \ then it is a correct match\n            // and we can exit out of the loop\n\
    \            if (game[i] == game[index_game] && game[i] != 0) {\n            \
    \    result.push_back(game[i] - game[index_game]);\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpcszeeag1: /tmp/tmpcszeeag1.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // write your code here\n    // the algorithm is going to be the same that\
    \ we are using for counting matches. \n    // we iterate through both arrays,\
    \ while at the same time calculating the difference for each element. \n    //\
    \ The difference is calculated by subtracting the first element in the guess array\
    \ from the second in the game array\n    std::vector<long> diff(guess.size());\n\
    \    std::vector<long>::iterator it;\n    std::vector<long> result(game.size());\n\
    \n    for (it=guess.begin();it!=guess.end();it++) {\n        int n = *it;\n  \
    \      for(int i=0;i<game.size();i++) {\n            int m = game[i];\n      \
    \      result[i] = result[i] + abs(m-n);\n        }\n    }\n\n    for (it=result.begin();it!=result.end();it++)\
    \ {\n        int n = *it;\n        int m = *it;\n        if (n == m) {\n     \
    \       diff[0] = 0;\n        } else {\n            diff[0] = diff[0] + abs(n\
    \ - m);\n        }\n    }\n    return diff;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpeiv9xypv: /tmp/tmpeiv9xypv.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> answer;\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    \n    // Your implementation\
    \ should be as fast as possible.\n    for (size_t i = 0; i < game.size(); ++i)\
    \ {\n        if (game[i] != guess[i])\n            min = std::min(min, game[i]\
    \ - guess[i]);\n        else\n            max = std::max(max, game[i] - guess[i]);\n\
    \    }\n    \n    answer.reserve(game.size());\n    \n    for (size_t i = 0; i\
    \ < game.size(); ++i) {\n        answer.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    \n    for (size_t i = 0; i < game.size(); ++i)\n        answer.push_back(std::abs(game[i]\
    \ - guess[i]));\n    \n    return answer;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpeo30gixi: /tmp/tmpeo30gixi.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if (game.size() != guess.size()) return std::vector<long>();\n    std::vector<long>\
    \ res(game.size(), 0);\n    for (size_t i = 0; i < game.size(); i++) {\n     \
    \   if (guess[i] < game[i]) {\n            res[i] = guess[i] + game[i];\n    \
    \    } else if (guess[i] > game[i]) {\n            res[i] = game[i] - guess[i];\n\
    \        } else {\n            res[i] = 0;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmplqw6ied1: /tmp/tmplqw6ied1.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if (game.size() != guess.size()) throw std::runtime_error(\"Array sizes must\
    \ match.\");\n    std::vector<long> result(game.size());\n    for (int i = 0;\
    \ i < (int)game.size(); ++i) {\n        result[i] = game[i] - guess[i];\n    \
    \    result[i] = std::abs(result[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109282
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size()) << \"Input arrays have different lengths\"\
    ;\n  std::vector<long> result(game.size());\n  for(size_t i = 0; i < game.size();\
    \ i++){\n    long cur_guess = guess[i];\n    long cur_score = game[i];\n    long\
    \ diff = abs(cur_guess - cur_score);\n    result[i] = diff < 0 ? diff : 0; //\
    \ Handle inconsistent guesses\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo_88k04.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmppo_88k04.cpp:14:39: error: invalid\
    \ operands of types \u2018void\u2019 and \u2018const char [36]\u2019 to binary\
    \ \u2018operator<<\u2019\n   14 |   assert(game.size() == guess.size()) << \"\
    Input arrays have different lengths\";\n      |                              \
    \         ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                  \
    \                        |\n      |                                          const\
    \ char [36]\n"
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> results;\n  \
    \  long score = 0;\n    for (int i = 0; i < game.size(); i++)\n    {\n       \
    \ std::cout << game[i] << \" \" << guess[i] << std::endl;\n        if (game[i]\
    \ == guess[i])\n        {\n            score = 0;\n        }\n        else if\
    \ (game[i] > guess[i]) {\n            score++;\n        }\n        else {\n  \
    \          score--;\n        }\n        results.push_back(score);\n    }\n   \
    \ return results;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp65nftn3q: /tmp/tmp65nftn3q.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: '1 1

    2 2

    3 3

    4 4

    5 2

    1 -2

    '
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code here\n    std::vector<long> res(guess.size());\n    long minDiff\
    \ = LONG_MAX;\n    long curGuess = 0;\n    int pos = 0;\n    long bestDiff = LONG_MAX;\n\
    \    for (int i = 0; i < guess.size(); i++) {\n        auto diff = std::abs(guess[i]\
    \ - game[i]);\n        if (diff < bestDiff) {\n            bestDiff = diff;\n\
    \            curGuess = guess[i];\n        }\n        if (diff < minDiff) {\n\
    \            minDiff = diff;\n        }\n        if (diff == 0) {\n          \
    \  res[i] = 0;\n        } else {\n            res[i] = bestDiff - diff;\n    \
    \    }\n        pos++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmphww7kbfl: /tmp/tmphww7kbfl.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109282
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> answer;\n   \
    \ long sum = 0;\n    long temp;\n    for (int i = 0; i < game.size(); i++) {\n\
    \        temp = game[i] - guess[i];\n        if (temp < 0)\n            temp =\
    \ -temp;\n        if (temp > 0)\n            sum += temp;\n        answer.push_back(sum);\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp9xu6f3zu: /tmp/tmp9xu6f3zu.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result{guess.size()};\n  for (size_t i = 0; i < game.size();\
    \ ++i) {\n    // For each position in the game array...\n    for (int j = 0; j\
    \ < guess.size(); ++j) {\n      // For each position in the guess array...\n \
    \     long diff = 0;\n      // If game array position equals guess array position...\n\
    \      if (game[i] == guess[j]) {\n        diff = 0;\n        // If game array\
    \ position does not equal guess array position...\n      } else if (game[i] !=\
    \ guess[j]) {\n        // Get difference between game and guess arrays at those\
    \ positions.\n        diff = abs(game[i] - guess[j]);\n      }\n      // If a\
    \ difference was found, add to the result array.\n      if (diff) result.at(j)\
    \ += diff;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 1) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1660109283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if(game.size() != guess.size())\n        return std::vector<long>(game.size());\n\
    \    std::vector<long> res(game.size());\n    std::iota(res.begin(), res.end(),\
    \ 0);\n    long score;\n    // your code goes here\n    return res;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpl53hgfap: /tmp/tmpl53hgfap.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long long gameSize = game.size();\n    long long guessSize = guess.size();\n\
    \    std::vector<long> diffs(guessSize);\n    if (gameSize != guessSize) {\n \
    \       cout << \"game size != guess size \" << gameSize << \" \" <<guessSize;\n\
    \        return diffs;\n    }\n    std::vector<long> results(guessSize);\n   \
    \ for (long long index = 0; index < guessSize; index++) {\n        results[index]\
    \ = abs(guess[index] - game[index]);\n    }\n    return diffs;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8s936vq.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpb8s936vq.cpp:18:9: error: \u2018\
    cout\u2019 was not declared in this scope; did you mean \u2018std::cout\u2019\
    ?\n   18 |         cout << \"game size != guess size \" << gameSize << \" \" <<guessSize;\n\
    \      |         ^~~~\n      |         std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpb8s936vq.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n"
  stdout: ''
  timestamp: 1660109283
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if(game.size() != guess.size()) return std::vector<long>();\n    std::vector<long>\
    \ result(guess.size());\n    for(int i = 0; i < game.size(); i++) {\n        result[i]\
    \ = std::abs(guess[i] - game[i]);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // The length of the input vectors will always match\n    assert(game.size()\
    \ == guess.size());\n\n    // The returned vector's size is the same as the input\
    \ vectors\n    std::vector<long> result(game.size());\n\n    // Loop through all\
    \ the inputs and set each result equal to the current difference between the input\
    \ and the guess\n    for (int i = 0; i < game.size(); i++) {\n        result[i]\
    \ = abs(game[i] - guess[i]);\n    }\n\n    // return result\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109283
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size(),0);\n    assert(game.size() == guess.size());\n\
    \    long min_diff = numeric_limits<long>::max();\n    for (int i = 0; i < game.size();\
    \ ++i) {\n        long diff = abs(guess[i] - game[i]);\n        result[i] = diff\
    \ < min_diff ? diff : min_diff;\n        min_diff = min(diff, min_diff);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1yfw87a.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpv1yfw87a.cpp:16:21: error: \u2018\
    numeric_limits\u2019 was not declared in this scope; did you mean \u2018std::numeric_limits\u2019\
    ?\n   16 |     long min_diff = numeric_limits<long>::max();\n      |         \
    \            ^~~~~~~~~~~~~~\n      |                     std::numeric_limits\n\
    In file included from /usr/include/c++/9/bits/specfun.h:46,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpv1yfw87a.cpp:2:\n/usr/include/c++/9/limits:312:12:\
    \ note: \u2018std::numeric_limits\u2019 declared here\n  312 |     struct numeric_limits\
    \ : public __numeric_limits_base\n      |            ^~~~~~~~~~~~~~\n/tmp/tmpv1yfw87a.cpp:16:36:\
    \ error: expected primary-expression before \u2018long\u2019\n   16 |     long\
    \ min_diff = numeric_limits<long>::max();\n      |                           \
    \         ^~~~\n/tmp/tmpv1yfw87a.cpp:20:20: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   20 |         min_diff\
    \ = min(diff, min_diff);\n      |                    ^~~\n      |            \
    \        std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n \
    \                from /tmp/tmpv1yfw87a.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660109283
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // TODO: Complete this function\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpjafjbfyp: /tmp/tmpjafjbfyp.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    long score = -100;\n    long max_score = 100;\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        score = abs(game[i] -\
    \ guess[i]);\n        if (score < max_score) {\n            result.push_back(max_score);\n\
    \        } else {\n            result.push_back(score);\n        }\n        max_score\
    \ = score;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpztqkjrjl: /tmp/tmpztqkjrjl.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    int m = guess.size();\n    assert(n != 0 && m !=\
    \ 0);\n    // std::vector<bool> v(b, n);\n    // std::fill(v.begin(), v.end(),\
    \ 0);\n    std::vector<long> v(m);\n    for(int i = 0; i < n; i++) {\n       \
    \ v[i] = game[i] - guess[i];\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Write your code here\n    std::vector<long> answer;\n    answer.resize(guess.size());\n\
    \    for(std::size_t i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i])\n\
    \            answer[i] = 0;\n        else\n            answer[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return answer;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        int guesser = guess[i];\n        int score = game[i];\n    \
    \    if (guesser < 0 || guesser > 6) {\n            std::cout << \"Input error\"\
    \ << std::endl;\n            return result;\n        }\n        if (guesser !=\
    \ 0) {\n            result[i] = abs(score-guesser);\n        }\n        else {\n\
    \            result[i] = abs(score);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp5maz6a5y: /tmp/tmp5maz6a5y.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: 'Input error

    '
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> result;\n\tif (game.size() != guess.size()) {\n\t\tassert(0);\n\
    \t}\n\t// I think this code is easy to understand. As we go through the game,\
    \ for each value\n\t// we see in the guess, if the guess is correct, add one to\
    \ the result. If it is wrong, subtract one \n\t// from the result and add it to\
    \ the result vector.\n\tstd::size_t index = 0;\n\tstd::size_t guess = 0;\n\tlong\
    \ score = 0;\n\twhile ((guess < game.size()) && (index < guess.size())) {\n\t\t\
    if (game[index] == guess[guess]) {\n\t\t\tscore++;\n\t\t\tindex++;\n\t\t\tguess++;\n\
    \t\t} else {\n\t\t\tresult[index] = std::abs(game[index] - guess[guess]);\n\t\t\
    \tindex++;\n\t\t\tresult[index] = std::abs(game[index] - guess[guess]);\n\t\t\t\
    guess++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3x035qy2.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3x035qy2.cpp:22:14: error: declaration\
    \ of \u2018std::size_t guess\u2019 shadows a parameter\n   22 |  std::size_t guess\
    \ = 0;\n      |              ^~~~~\n/tmp/tmp3x035qy2.cpp:24:49: error: request\
    \ for member \u2018size\u2019 in \u2018guess\u2019, which is of non-class type\
    \ \u2018std::size_t\u2019 {aka \u2018long unsigned int\u2019}\n   24 |  while\
    \ ((guess < game.size()) && (index < guess.size())) {\n      |               \
    \                                  ^~~~\n/tmp/tmp3x035qy2.cpp:25:33: error: invalid\
    \ types \u2018std::size_t {aka long unsigned int}[std::size_t {aka long unsigned\
    \ int}]\u2019 for array subscript\n   25 |   if (game[index] == guess[guess])\
    \ {\n      |                                 ^\n/tmp/tmp3x035qy2.cpp:30:54: error:\
    \ invalid types \u2018std::size_t {aka long unsigned int}[std::size_t {aka long\
    \ unsigned int}]\u2019 for array subscript\n   30 |    result[index] = std::abs(game[index]\
    \ - guess[guess]);\n      |                                                  \
    \    ^\n/tmp/tmp3x035qy2.cpp:32:54: error: invalid types \u2018std::size_t {aka\
    \ long unsigned int}[std::size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   32 |    result[index] = std::abs(game[index] - guess[guess]);\n      |   \
    \                                                   ^\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::sort(game.begin(),game.end());\n    std::sort(guess.begin(),guess.end());\n\
    \    auto guesses = guess.size();\n    std::vector<long> result(guesses);\n  \
    \  for (long i =0; i < guesses; i++) {\n        for (long j = 0; j < guesses;\
    \ j++) {\n            if (game[i] == guess[j]) {\n                result[i] =\
    \ 0;\n            }\n            else{\n                result[i] = abs(game[i]\
    \ - guess[j]);\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpnucd48cm: /tmp/tmpnucd48cm.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::cout << game << std::endl;\n    std::cout << guess << std::endl;\n \
    \   std::vector<long> result(guess.size());\n    long diff = 0;\n    // your code\
    \ goes here\n    return 0;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf8v86ve7.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpf8v86ve7.cpp:14:15: error: no match\
    \ for \u2018operator<<\u2019 (operand types are \u2018std::ostream\u2019 {aka\
    \ \u2018std::basic_ostream<char>\u2019} and \u2018std::vector<long int>\u2019\
    )\n   14 |     std::cout << game << std::endl;\n      |     ~~~~~~~~~ ^~ ~~~~\n\
    \      |          |       |\n      |          |       std::vector<long int>\n\
    \      |          std::ostream {aka std::basic_ostream<char>}\nIn file included\
    \ from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf8v86ve7.cpp:2:\n/usr/include/c++/9/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/ostream:117:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<c"
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    auto end = guess.size();\n \
    \   for (auto i = 0; i < game.size(); i++) {\n        for (auto j = i; j < end;\
    \ j++) {\n            result[j - i] = game[j] - guess[i];\n            if (result[j\
    \ - i] != 0)\n                --end;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp5_iwbny7: /tmp/tmp5_iwbny7.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // code here\n    std::vector<long> scores;\n    int leng = game.size();\n\
    \    int lenh = guess.size();\n    int maxn = leng;\n    int minn = lenh;\n  \
    \  for (int i = 0; i < leng; i++) {\n        if (game[i] != guess[i]) {\n    \
    \        maxn = i;\n            break;\n        }\n    }\n    for (int i = 0;\
    \ i < lenh; i++) {\n        if (game[i] != guess[i]) {\n            minn = i;\n\
    \            break;\n        }\n    }\n    int maxi = maxn;\n    int mini = minn;\n\
    \    int maxk = maxn;\n    int mink = minn;\n    for (int i = 0; i < leng; i++)\
    \ {\n        if (game[i] == guess[i]) {\n            scores.push_back(0);\n  \
    \      }\n        if (game[i] > guess[i]) {\n            maxk = i;\n        }\n\
    \        if (game[i] < guess[i]) {\n            mink = i;\n        }\n    }\n\
    \    int mid = maxn;\n    if (maxn > minn) {\n        for (int i = 0; i < maxn;\
    \ i++) {\n            for (int j = 0; j < lenh; j++) {\n                if (game[maxi]\
    \ == guess[j]) {\n                    scores.push_back(game[maxi] - guess[j]);\n\
    \                }\n            }\n            maxi = maxi;\n        }\n    }\
    \ else {\n        for (int i = 0; i < maxn; i++) {\n            for (int j = 0;\
    \ j < lenh; j++) {\n                if (game[maxi] == guess[j]) {\n          \
    \          scores.push_back((game[maxi] - guess[j]) + (game[maxi] - guess[j]));\n\
    \                }\n            }\n            maxi = maxi;\n        }\n    }\n\
    \    if (maxn >= minn) {\n        for (int i = 0; i < minn; i++) {\n         \
    \   for (int j = 0; j < lenh; j++) {\n                if (game[mini] == guess[j])\
    \ {\n                    scores.push_back(game[mini] - guess[j]);\n          \
    \      }\n            }\n            mini = mini;\n        }\n    } else {\n \
    \       for (int i = 0; i < minn; i++) {\n            for (int j = 0; j < lenh;\
    \ j++) {\n                if (game[mini] == guess[j]) {\n                    scores.push_back((game[mini]\
    \ - guess[j]) + (game[mini] - guess[j]));\n                }\n            }\n\
    \            mini = mini;\n        }\n    }\n    for (int i = 0; i < maxk; i++)\
    \ {\n        for (int j = 0; j < lenh; j++) {\n            if (game[i] == guess[j])\
    \ {\n                scores.push_back(game[i] - guess[j]);\n            }\n  \
    \      }\n    }\n    for (int i = 0; i < mink; i++) {\n        for (int j = 0;\
    \ j < lenh; j++) {\n            if (game[i] == guess[j]) {\n                scores.push_back((game[i]\
    \ - guess[j]) + (game[i] - guess[j]));\n            }\n        }\n    }\n    return\
    \ scores;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpd64l7i0k: /tmp/tmpd64l7i0k.cpp:104: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  int size = game.size();\n  std::vector<long> result(size);\n  for (int i =\
    \ 0; i < size; i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  // Your code here\n  std::vector< long > result(game.size());\n  long correct\
    \ = std::count(game.begin(), game.end(), 0);\n  long incorrect = game.size() -\
    \ correct;\n  long score = 0;\n  long difference = 0;\n  for (size_t i = 0; i\
    \ < game.size(); ++i) {\n    if (guess == game) {\n      result[i] = 0;\n    \
    \  score += 0;\n    } else {\n      result[i] = abs(guess - game[i]);\n      score\
    \ += abs(guess - game[i]);\n    }\n  }\n  std::cout << \"Score is: \" << score\
    \ << endl;\n  std::cout << \"Correct is: \" << correct << endl;\n  std::cout <<\
    \ \"Incorrect is: \" << incorrect << endl;\n  return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh7h5y4f.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpdh7h5y4f.cpp:25:29: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   25 |       result[i] = abs(guess - game[i]);\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdh7h5y4f.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdh7h5y4f.cpp:25:37:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |       result[i] = abs(guess - game[i]);\n      |                   \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdh7h5y4f.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     operator-(const move_iterator<_IteratorL>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1209:5: note:\
    \   templa"
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long game[game.size()], guess[guess.size()], diff;\n    int maxSize = guess.size();\n\
    \    for (int i = 0; i < maxSize; i++) {\n        game[i] = game[maxSize - i -\
    \ 1];\n    }\n    for (int i = 0; i < maxSize; i++) {\n        guess[i] = guess[maxSize\
    \ - i - 1];\n    }\n    for (int i = 0; i < maxSize; i++) {\n        if (game[i]\
    \ == guess[i]) {\n            diff = 0;\n        } else if (game[i] < guess[i])\
    \ {\n            diff = game[i] - guess[i];\n        } else {\n            diff\
    \ = guess[i] - game[i];\n        }\n        game[i] += diff;\n        guess[i]\
    \ -= diff;\n    }\n    for (int i = 0; i < maxSize; i++) {\n        if (game[i]\
    \ != 0) {\n            game[i] = abs(game[i]);\n        } else {\n           \
    \ game[i] = abs(guess[i]);\n        }\n    }\n    return game;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqyqxij5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpiqyqxij5.cpp:14:26: error: declaration\
    \ of \u2018long int game [(<anonymous> + 1)]\u2019 shadows a parameter\n   14\
    \ |     long game[game.size()], guess[guess.size()], diff;\n      |          \
    \                ^\n/tmp/tmpiqyqxij5.cpp:14:47: error: declaration of \u2018long\
    \ int guess [(<anonymous> + 1)]\u2019 shadows a parameter\n   14 |     long game[game.size()],\
    \ guess[guess.size()], diff;\n      |                                        \
    \       ^\n/tmp/tmpiqyqxij5.cpp:15:25: error: request for member \u2018size\u2019\
    \ in \u2018guess\u2019, which is of non-class type \u2018long int [(<anonymous>\
    \ + 1)]\u2019\n   15 |     int maxSize = guess.size();\n      |              \
    \           ^~~~\n/tmp/tmpiqyqxij5.cpp:40:12: error: could not convert \u2018\
    game\u2019 from \u2018long int [(<anonymous> + 1)]\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   40 |     return game;\n      |            ^~~~\n      |     \
    \       |\n      |            long int [(<anonymous> + 1)]\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> diff;\n    for\
    \ (size_t i = 0; i < guess.size(); i++) {\n        diff.push_back(0);\n      \
    \  for (size_t j = 0; j < game.size(); j++) {\n            if (game[j] == guess[i])\
    \ {\n                diff[i] += game[j] - guess[i];\n            }\n        }\n\
    \    }\n    return diff;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmphghfsear: /tmp/tmphghfsear.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> diff;\n    std::iota(guess.begin(), guess.end(), 0);\n\
    \    std::iota(game.begin(), game.end(), 0);\n    long min = std::min_element(game.begin(),\
    \ game.end()) - game.begin();\n    long max = std::max_element(game.begin(), game.end())\
    \ - game.begin();\n    auto compare = [&game, &guess](long a, long b) {\n    \
    \    if (a > b) return -1;\n        if (a < b) return 1;\n        return 0;\n\
    \    };\n    for (long i = 0; i < guess.size(); ++i) {\n        for (long j =\
    \ 0; j < game.size(); ++j) {\n            long diff = compare(guess[i], game[j]);\n\
    \            if (diff != 0) {\n                diff.push_back(diff);\n       \
    \         min = -std::abs(diff[0]);\n                max = std::abs(diff[0]);\n\
    \            }\n            if (guess == game) {\n                break;\n   \
    \         }\n            if (j == game.size() - 1) {\n                break;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < guess.size(); ++i)\
    \ {\n        diff.push_back(max);\n    }\n    return diff;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhl12z2s.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpqhl12z2s.cpp:28:22: error: request\
    \ for member \u2018push_back\u2019 in \u2018diff\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   28 |                 diff.push_back(diff);\n \
    \     |                      ^~~~~~~~~\n/tmp/tmpqhl12z2s.cpp:29:39: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   29 |               \
    \  min = -std::abs(diff[0]);\n      |                                       ^\n\
    /tmp/tmpqhl12z2s.cpp:30:38: error: invalid types \u2018long int[int]\u2019 for\
    \ array subscript\n   30 |                 max = std::abs(diff[0]);\n      | \
    \                                     ^\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  int n = game.size();\n  std::vector<long> d(n), dd(n);\n  int count = 0;\n\
    \  for (int i = 0; i < n; i++) {\n    d[i] = game[i] - guess[i];\n    dd[i] =\
    \ abs(d[i]);\n  }\n  for (int i = 0; i < n; i++) {\n    if (dd[i] == 0) {\n  \
    \    count++;\n    } else {\n      dd[i] = count * 2 - dd[i];\n    }\n  }\n  for\
    \ (int i = 0; i < n; i++) {\n    dd[i] = dd[i] > 0 ? dd[i] : -dd[i];\n  }\n  return\
    \ dd;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpqadsi4mu: /tmp/tmpqadsi4mu.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(game.size());\n  for (int i = 0; i < game.size();\
    \ i++) {\n    if (game[i] == guess[i]) result[i] = 0;\n    else if (game[i] >\
    \ guess[i]) result[i] = game[i] - guess[i];\n    else result[i] = guess[i] - game[i];\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> ans;\n    long min_val = game[0], max_val = game[game.size()-1],\
    \ min_diff = INT_MAX, max_diff = INT_MIN;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        if (guess[i] <= min_val) { min_val = guess[i]; min_diff = i;\
    \ }\n        if (guess[i] > max_val) { max_val = guess[i]; max_diff = i; }\n \
    \   }\n    for (long i = 0; i < guess.size(); i++) {\n        long val = game[i];\n\
    \        long diff = abs(val - guess[i]);\n        if (diff < 0 && diff < min_diff)\
    \ {\n            ans.push_back(0);\n            ans.push_back(min_diff);\n   \
    \         ans.push_back(i);\n        }\n        else if (diff > 0 && diff > max_diff)\
    \ {\n            ans.push_back(0);\n            ans.push_back(max_diff);\n   \
    \         ans.push_back(i);\n        }\n        else if (diff == 0) {\n      \
    \      ans.push_back(0);\n            ans.push_back(0);\n            ans.push_back(i);\n\
    \        }\n        else if (diff == min_diff) {\n            ans.push_back(val);\n\
    \            ans.push_back(min_diff);\n            ans.push_back(i);\n       \
    \ }\n        else if (diff == max_diff) {\n            ans.push_back(val);\n \
    \           ans.push_back(max_diff);\n            ans.push_back(i);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp6s2n96vx: /tmp/tmp6s2n96vx.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    std::vector<long> temp_result(game.size());\n\
    \    // A variable to hold the score of the previous guess, for calculating \n\
    \    // how many guesses have been tried\n    long prev_guess = 0;\n    // A variable\
    \ to hold the current number of guesses\n    long total_guesses = 0;\n    // The\
    \ current score of the game, used for printing out how many guesses have been\
    \ tried\n    long game_score = 0;\n    // The maximum possible score for the game\n\
    \    long max_game_score = std::numeric_limits<long>::max();\n    // The maximum\
    \ possible score for the guess\n    long max_guess = std::numeric_limits<long>::max();\n\
    \    // The current score of the guess, used for printing out how many guesses\
    \ have been tried\n    long guessed_score = 0;\n    // The maximum possible score\
    \ for the guess\n    long max_guessed_score = std::numeric_limits<long>::max();\n\
    \    // The current score of the guess, used for printing out how many guesses\
    \ have been tried\n    long guessed_score = 0;\n    // The maximum possible score\
    \ for the guess\n    long max_guessed_score = std::numeric_limits<long>::max();\n\
    \    // The current score of the game, used for printing out how many guesses\
    \ have been tried\n    long game_score = 0;\n    // The maximum possible score\
    \ for the game\n    long max_game_score = std::numeric_limits<long>::max();\n\
    \    // The maximum possible score for the guess\n    long max_guess = std::numeric_limits<long>::max();\n\
    \    // The current score of the guess, used for printing out how many guesses\
    \ have been tried\n    long guessed_score = 0;\n    // The maximum possible score\
    \ for the guess\n    long max_guessed_score = std::numeric_limits<long>::max();\n\
    \    // The current score of the game, used for printing out how many guesses\
    \ have been tried\n    long game_score = 0;\n    // The maximum possible score\
    \ for the game\n    long max_game_score = std::numeric_limits<long>::max();\n\
    \    // The maximum possible score for the guess\n    long max_guess = std::numeric_limits<long>::max();\n\
    \    // The current score of the guess, used for printing out how many guesses\
    \ have been tried\n    long guessed_score = 0;\n    // The maximum possible score\
    \ for the guess\n    long max_guessed_score = std::numeric_limits<long>::max();\n\
    \    // The current score of the game, used for printing out how many guesses\
    \ have been tried\n    long game_score = 0;\n    // The maximum possible score\
    \ for the game\n    long max_game_score = std::numeric_limits<long>::max();\n\
    \    // The maximum possible \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpos9m5dg3.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpos9m5dg3.cpp:32:10: error: redeclaration\
    \ of \u2018long int guessed_score\u2019\n   32 |     long guessed_score = 0;\n\
    \      |          ^~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:28:10: note: \u2018long\
    \ int guessed_score\u2019 previously declared here\n   28 |     long guessed_score\
    \ = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:34:10: error: redeclaration\
    \ of \u2018long int max_guessed_score\u2019\n   34 |     long max_guessed_score\
    \ = std::numeric_limits<long>::max();\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:30:10:\
    \ note: \u2018long int max_guessed_score\u2019 previously declared here\n   30\
    \ |     long max_guessed_score = std::numeric_limits<long>::max();\n      |  \
    \        ^~~~~~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:36:10: error: redeclaration of\
    \ \u2018long int game_score\u2019\n   36 |     long game_score = 0;\n      | \
    \         ^~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:22:10: note: \u2018long int game_score\u2019\
    \ previously declared here\n   22 |     long game_score = 0;\n      |        \
    \  ^~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:38:10: error: redeclaration of \u2018long\
    \ int max_game_score\u2019\n   38 |     long max_game_score = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:24:10: note: \u2018long\
    \ int max_game_score\u2019 previously declared here\n   24 |     long max_game_score\
    \ = std::numeric_limits<long>::max();\n      |          ^~~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:40:10:\
    \ error: redeclaration of \u2018long int max_guess\u2019\n   40 |     long max_guess\
    \ = std::numeric_limits<long>::max();\n      |          ^~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:26:10:\
    \ note: \u2018long int max_guess\u2019 previously declared here\n   26 |     long\
    \ max_guess = std::numeric_limits<long>::max();\n      |          ^~~~~~~~~\n\
    /tmp/tmpos9m5dg3.cpp:42:10: error: redeclaration of \u2018long int guessed_score\u2019\
    \n   42 |     long guessed_score = 0;\n      |          ^~~~~~~~~~~~~\n/tmp/tmpos9m5dg3.cpp:28:10:\
    \ note: \u2018long int guessed_score\u2019 previously declared here\n   28 "
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size());\n  std::vector<long> result(game.size(),\
    \ 0);\n  for (size_t i = 0; i < game.size(); ++i) {\n    result[i] = abs(game[i]\
    \ - guess[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::unordered_map<long, std::pair<long, long>> mp;\n\
    \    std::vector<long> result(guess.size());\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        mp[guess[i]] = std::make_pair(game[i], game[i] - guess[i]);\n\
    \    }\n    std::for_each(mp.begin(), mp.end(), [&](const std::pair<long, std::pair<long,\
    \ long> >& e) {\n        result[i] = (e.second.first - game[i]).abs() - e.second.second;\n\
    \    });\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9os4v6ml.cpp: In lambda function:\n/tmp/tmp9os4v6ml.cpp:21:16:\
    \ error: \u2018i\u2019 was not declared in this scope\n   21 |         result[i]\
    \ = (e.second.first - game[i]).abs() - e.second.second;\n      |             \
    \   ^\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    std::transform(game.begin(),\
    \ game.end(), guess.begin(), result.begin(), std::plus<long>());\n    std::transform(guess.begin(),\
    \ guess.end(), guess.begin(), result.begin(), std::minus<long>());\n    for (int\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = std::abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> score;\n  // code goes here\n  long diff = std::abs(game[0]\
    \ - guess[0]);\n  if (game[0] == guess[0]) {\n    score[0] = 0;\n  } else {\n\
    \    score[0] = diff;\n  }\n  \n  for (int i = 1; i < guess.size(); i++) {\n \
    \   diff = std::abs(game[i] - guess[i]);\n    if (game[i] == guess[i]) {\n   \
    \   score[i] = 0;\n    } else {\n      score[i] = diff;\n    }\n  }\n  return\
    \ score;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109285
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    long max_difference = 0;\n    long max_difference_index = 0;\n    for(size_t\
    \ i = 0; i < game.size(); ++i) {\n        if(game[i] != guess[i]) {\n        \
    \    result[i] = abs(game[i] - guess[i]);\n            max_difference = std::max(max_difference,\
    \ result[i]);\n            max_difference_index = i;\n        }\n    }\n    if(max_difference_index\
    \ != game.size() - 1) {\n        result[game.size() - 1] = max_difference + abs(game[game.size()\
    \ - 1] - guess[game.size() - 1]);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for(std::size_t i = 0; i < guess.size();\
    \ ++i) {\n        result[i] = abs(guess[i] - game[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tstd::vector<long> comp;\n\tassert(game.size() == guess.size());\n\tfor (long\
    \ i = 0; i < game.size(); i++) {\n\t\tif (game[i] != guess[i]) {\n\t\t\tcomp[i]\
    \ = abs(game[i] - guess[i]);\n\t\t}\n\t\telse {\n\t\t\tcomp[i] = 0;\n\t\t}\n\t\
    }\n\treturn comp;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // write your code here\n    long result = 0;\n    for(size_t i=0;i<game.size();i++)\n\
    \    {\n        if(game[i]==guess[i])\n        {\n            result = game[i]*game[i];\n\
    \        }\n        else if(game[i] > guess[i])\n        {\n            result\
    \ = game[i]-guess[i];\n        }\n        else\n        {\n            result\
    \ = abs(game[i]-guess[i]);\n        }\n    }\n    std::vector<long> result(game.size());\n\
    \    for(size_t i=0;i<game.size();i++)\n    {\n        result[i] = result;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1xrd8pkk.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp1xrd8pkk.cpp:31:23: error: conflicting\
    \ declaration \u2018std::vector<long int> result\u2019\n   31 |     std::vector<long>\
    \ result(game.size());\n      |                       ^~~~~~\n/tmp/tmp1xrd8pkk.cpp:15:10:\
    \ note: previous declaration as \u2018long int result\u2019\n   15 |     long\
    \ result = 0;\n      |          ^~~~~~\n/tmp/tmp1xrd8pkk.cpp:34:17: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   34 |         result[i] = result;\n      |                 ^\n/tmp/tmp1xrd8pkk.cpp:36:12:\
    \ error: could not convert \u2018result\u2019 from \u2018long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   36 |     return result;\n      |            ^~~~~~\n\
    \      |            |\n      |            long int\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // the size of the vectors are equal\n    assert(game.size() == guess.size());\n\
    \    // your task is to return an array of size guess.size(), where each index\
    \ is the distance between \n    // guess[i] and score[i]\n    // You will need\
    \ to use a for loop\n    // the size of the vectors are equal\n    assert(game.size()\
    \ == guess.size());\n    // initialize a result array\n    std::vector<long> result(guess.size(),\
    \ 0L);\n    // a counter that counts the number of correct guesses\n    int count\
    \ = 0;\n    // a loop will run through the elements of guess\n    for (int i =\
    \ 0; i < guess.size(); ++i) {\n        // the guess is greater than or equal to\
    \ the game score\n        if (game[i] >= guess[i]) {\n            // increment\
    \ the number of correct guesses\n            ++count;\n            // update the\
    \ result\n            result[i] = game[i] - guess[i];\n        }\n        else\
    \ {\n            // the guessed score is greater than the game score\n       \
    \     // so subtract the guess\n            result[i] = guess[i] - game[i];\n\
    \        }\n        // if the number of correct guesses equals the length of the\
    \ guess\n        // then every guess is correct\n        if (count == guess.size())\
    \ {\n            // return that result\n            return result;\n        }\n\
    \    }\n    // if the number of correct guesses is greater than the length of\
    \ the guess\n    // then some guesses were incorrect\n    // return the wrong\
    \ number\n    return std::vector<long>(guess.size(), -1L);\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109284
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // the array we are going to store the result in\n    std::vector<long> result;\n\
    \    // the maximum number of guesses\n    int maxGuesses = guess.size();\n  \
    \  // the maximum number of scores given by this game\n    int maxScores = game.size();\n\
    \    // the maximum number of scores we can get from each game\n    int maxScorePerGame\
    \ = maxScores / maxGuesses;\n    // keep track of how many guesses we have done\
    \ so far\n    int counter = 0;\n    // for each possible score of the game\n \
    \   for (int i = 0; i < maxScores; i++) {\n        // if we have made a number\
    \ of guesses equal to the max number of guesses\n        // or we have already\
    \ reached the end of the game\n        if (counter == maxGuesses || i == maxScores)\
    \ {\n            // stop guessing\n            break;\n        }\n        // check\
    \ to see if the guess at this index is in the game\n        if (game[i] == guess[counter])\
    \ {\n            // keep track of the number of scores we got right so far\n \
    \           counter++;\n            // if the number of guesses for this game\
    \ is equal to the max number of guesses\n            // or we have already reached\
    \ the end of the game\n            if (counter == maxGuesses || i == maxScores)\
    \ {\n                // return the number of scores we got right so far\n    \
    \            result.push_back(i);\n                // stop\n                break;\n\
    \            }\n        }\n    }\n    // return the result vector\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpwa5e2he8: /tmp/tmpwa5e2he8.cpp:51: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109285
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    assert(game.size() == guess.size());\n   \
    \ long max_score = *std::max_element(game.cbegin(), game.cend());\n    long min_score\
    \ = *std::min_element(game.cbegin(), game.cend());\n    // You might want to use\
    \ std::for_each here.\n    // I haven't tried but I think it would be more readable.\n\
    \    for (size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n        if (result[i] < max_score) result[i] = 0;\n        else\
    \ if (result[i] > max_score) result[i] = max_score - min_score;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // write your code\n    std::vector<long> diff;\n    long min_score = *std::min_element(game.begin(),\
    \ game.end()); // minimum score\n    long max_score = *std::max_element(game.begin(),\
    \ game.end()); // maximum score\n    for (auto it = guess.begin(); it != guess.end();\
    \ ++it) {\n        long score = *it;\n        if (score < min_score) {\n     \
    \       score = min_score;\n        } else if (score > max_score) {\n        \
    \    score = max_score;\n        }\n        long diff = (*it - game) - abs(score);\n\
    \        diff.push_back(diff);\n    }\n    return diff;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkt2yn8s.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwkt2yn8s.cpp:25:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018long int\u2019 and \u2018\
    std::vector<long int>\u2019)\n   25 |         long diff = (*it - game) - abs(score);\n\
    \      |                      ~~~ ^ ~~~~\n      |                      |     |\n\
    \      |                      |     std::vector<long int>\n      |           \
    \           long int\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwkt2yn8s.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwkt2yn8s.cpp:25:28:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   25 |         long diff = (*it - game) - abs(score);\n\
    \      |                            ^~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwkt2yn8s.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     operator-(const move_iterator<_IteratorL>&\
    \ __x,\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size());\n  std::vector<long> diff;\n  long correct\
    \ = 0;\n  for (int i = 0; i < game.size(); i++) {\n    long diff = abs(game[i]\
    \ - guess[i]);\n    if (guess[i] != game[i]) {\n      diff += abs((game[i] - guess[i])\
    \ * -1);\n    }\n    if (diff <= correct) {\n      correct = diff;\n      diff[i]\
    \ = correct;\n    } else {\n      diff[i] = diff;\n    }\n  }\n  return diff;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjgaghdi.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpbjgaghdi.cpp:24:13: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   24 |       diff[i] =\
    \ correct;\n      |             ^\n/tmp/tmpbjgaghdi.cpp:26:13: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   26 |       diff[i] =\
    \ diff;\n      |             ^\n"
  stdout: ''
  timestamp: 1660109284
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    for (int i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109279
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  int num_correct = 0;\n  int wrong = 0;\n  for (int i = 0; i < guess.size();\
    \ i++) {\n    for (int j = 0; j < game.size(); j++) {\n      if (game[j] == guess[i])\
    \ {\n        std::cout << \"\\t\" << (i + 1) << \" is correct\" << std::endl;\n\
    \        num_correct++;\n        continue;\n      }\n      std::cout << \"\\t\"\
    \ << (i + 1) << \" is wrong\" << std::endl;\n      wrong++;\n    }\n  }\n  std::vector<long>\
    \ results(guess.size());\n  for (int i = 0; i < guess.size(); i++) {\n    results[i]\
    \ = wrong;\n    if (num_correct == guess.size())\n      results[i] = 0;\n  }\n\
    \  return results;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp8w5xjupm: /tmp/tmp8w5xjupm.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: "\t1 is correct\n\t1 is wrong\n\t1 is wrong\n\t1 is wrong\n\t1 is wrong\n\
    \t1 is correct\n\t2 is wrong\n\t2 is correct\n\t2 is wrong\n\t2 is wrong\n\t2\
    \ is wrong\n\t2 is wrong\n\t3 is wrong\n\t3 is wrong\n\t3 is correct\n\t3 is wrong\n\
    \t3 is wrong\n\t3 is wrong\n\t4 is wrong\n\t4 is wrong\n\t4 is wrong\n\t4 is correct\n\
    \t4 is wrong\n\t4 is wrong\n\t5 is wrong\n\t5 is correct\n\t5 is wrong\n\t5 is\
    \ wrong\n\t5 is wrong\n\t5 is wrong\n\t6 is wrong\n\t6 is wrong\n\t6 is wrong\n\
    \t6 is wrong\n\t6 is wrong\n\t6 is wrong\n"
  timestamp: 1660109285
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> gameCopy(game.begin(),game.end());\n\
    \    std::vector<long> guessCopy(guess.begin(),guess.end());\n    long gameTotal\
    \ = accumulate(gameCopy.begin(),gameCopy.end(),0);\n    long guessTotal = accumulate(guessCopy.begin(),guessCopy.end(),0);\n\
    \    std::vector<long> ans;\n    ans.resize(guessCopy.size());\n    int k = 0;\n\
    \    for (int i = 0; i < guess.size(); i++) {\n        if (guess[i]==gameTotal)\
    \ {\n            ans[k]=0;\n            k++;\n        }\n    }\n    for (int i\
    \ = 0; i < game.size(); i++) {\n        ans[k]=ans[k]+abs(game[i]-guess[i]);\n\
    \        k++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109285
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long diff = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        if\
    \ (game[i] != guess[i]) diff = abs(game[i] - guess[i]);\n    }\n    std::vector<long>\
    \ result(guess.size(), diff);\n    for (long i = 0; i < guess.size(); i++) {\n\
    \        if (game[i] == guess[i]) result[i] = 0;\n        else result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(game.size());\n    // This first loop goes through\
    \ the arrays to compare the scores, starting with the first one and ending\n \
    \   // with the second. If they are equal, the difference is 0. If they are not\
    \ equal, it's their absolute difference.\n    // The first loop puts 0 into the\
    \ result if the score is equal, 1 if the score is greater, and -1 if the score\
    \ is lower.\n    for (int i = 0; i < game.size(); i++) {\n        result[i] =\
    \ 0;\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n       \
    \ }\n        if (game[i] > guess[i]) {\n            result[i] = -1;\n        }\n\
    \        if (game[i] < guess[i]) {\n            result[i] = 1;\n        }\n  \
    \  }\n    // The second loop compares the guesses against each score to see which\
    \ guess is closest to each score. This loop\n    // puts the absolute difference\
    \ in the result vector\n    for (int i = 0; i < game.size(); i++) {\n        int\
    \ bestDiff = i;\n        for (int j = 0; j < guess.size(); j++) {\n          \
    \  if (game[i] > guess[j]) {\n                bestDiff = j;\n            }\n \
    \       }\n        result[i] = abs(game[i] - guess[bestDiff]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp5e2geixm: /tmp/tmp5e2geixm.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    int n = game.size();\n    std::vector<long> result(n);\n\
    \    long score = game[n - 1];\n    int mismatches = 0;\n    for(int i = 0; i\
    \ < n - 1; ++i) {\n        if(game[i] == guess[i]) {\n            result[i] =\
    \ 0;\n            score = 0;\n        } else {\n            score = abs(game[i]\
    \ - guess[i]);\n            mismatches += 1;\n        }\n    }\n    int maxMismatches\
    \ = mismatches;\n    for(int i = n - 2; i >= 0; --i) {\n        if(game[i] ==\
    \ guess[i]) {\n            result[i] = 0;\n            score = 0;\n        } else\
    \ {\n            score = abs(game[i] - guess[i]);\n            mismatches = 0;\n\
    \            for(int j = 0; j < maxMismatches; ++j) {\n                if(game[i]\
    \ == guess[i]) {\n                    if(j == maxMismatches - 1) {\n         \
    \               result[i] = 0;\n                    } else {\n               \
    \         result[i] = score - 1;\n                        break;\n           \
    \         }\n                } if(j == maxMismatches - 1) {\n                \
    \    result[i] = score + 1;\n                    break;\n                }\n \
    \           }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp_3hgptgs: /tmp/tmp_3hgptgs.cpp:55: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    long best_score = 0;\n    long best_guess\
    \ = 0;\n    // we begin by finding the best score for the first guess, this will\
    \ be the best value\n    // to compare against for future guesses and this must\
    \ be the value that we will use to\n    // compare to all other scores later.\n\
    \    for(long i = 0; i < guess.size(); i++) {\n        // if this is the first\
    \ guess then we compare against the best score, otherwise we compare\n       \
    \ // against the best guesses.\n        long diff = abs(guess[i]-best_score);\n\
    \        if(diff>best_score) {\n            result.push_back(diff);\n        }\
    \ else if(guess[i]==best_guess) {\n            result.push_back(best_score);\n\
    \        } else {\n            result.push_back(abs(best_guess-best_score));\n\
    \        }\n        // we compare against the previous best score. In the worst\
    \ case, there are only three\n        // possible scores, so we can just use that\
    \ one.\n        best_score = best_guess;\n        best_guess = guess[i];\n   \
    \ }\n    // once we reach the last guess, we know that there were no mismatches,\
    \ and we can use the\n    // previous best guess to compare against the final\
    \ best score. We still have a possibility\n    // of a tie, in which case we compare\
    \ against the final best guess, but we must do so only once.\n    for(long i =\
    \ guess.size()-1; i >= 0; i--) {\n        long diff = abs(guess[i]-best_score);\n\
    \        if(diff>best_score) {\n            result.push_back(diff);\n        }\
    \ else if(guess[i]==best_guess) {\n            result.push_back(best_score);\n\
    \        } else {\n            result.push_back(abs(best_guess-best_score));\n\
    \        }\n        best_score = best_guess;\n        best_guess = guess[i];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpfkqlhdto: /tmp/tmpfkqlhdto.cpp:55: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109285
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // TODO: Write your code here\n    int n = (int)game.size();\n    int m =\
    \ (int)guess.size();\n    long ans[n];\n    for (int i = 0; i < n; i++) {\n  \
    \      if (game[i] != 0) {\n            ans[i] = abs(game[i] - guess[i]);\n  \
    \      } else {\n            ans[i] = abs(game[i] - guess[i]);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp56tr8hk2.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp56tr8hk2.cpp:25:12: error: could\
    \ not convert \u2018ans\u2019 from \u2018long int [n]\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   25 |     return ans;\n      |            ^~~\n      |       \
    \     |\n      |            long int [n]\n"
  stdout: ''
  timestamp: 1660109285
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // TODO:\n    // Your code here\n    long sum = 0, i, j;\n    for (i = 0,\
    \ j = 0; i < game.size() && j < guess.size();) {\n        while (game[i] < guess[j])\
    \ {\n            i++;\n        }\n        while (game[i] > guess[j]) {\n     \
    \       j++;\n        }\n        if (i < game.size() && j < guess.size()) {\n\
    \            sum += abs(game[i] - guess[j]);\n            i++;\n            j++;\n\
    \        }\n    }\n    std::vector<long> result(guess.size());\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = sum - abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpeyfx3tis: /tmp/tmpeyfx3tis.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result;\n  std::vector<int> count(game.size(), 0);\n  for\
    \ (int i = 0; i < game.size(); ++i) {\n    ++count[game[i] - guess[i]];\n  }\n\
    \  long maxdiff = std::numeric_limits<long>::max();\n  for (int i = 0; i < guess.size();\
    \ ++i) {\n    if (count[i] == 0) {\n      result.push_back(0);\n    } else {\n\
    \      long diff = game[i] - guess[i];\n      if (diff < 0) {\n        diff *=\
    \ -1;\n      }\n      result.push_back(diff);\n      maxdiff = std::max(diff,\
    \ maxdiff);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp0tb7nsvp: /tmp/tmp0tb7nsvp.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> result(guess.size());\n    long\
    \ sum = 0;\n    long sumOfDiff = 0;\n    for (long i = 0; i < guess.size(); i++)\
    \ {\n        if (game[i] == guess[i]) {\n            sum = 0;\n            sumOfDiff\
    \ = 0;\n        } else {\n            sum += abs(game[i] - guess[i]);\n      \
    \      sumOfDiff += abs(game[i] - guess[i]);\n        }\n    }\n    for (long\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = sumOfDiff - sum;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp80sqczq1: /tmp/tmp80sqczq1.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109286
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> scores(game.size(),\
    \ 0);\n    long gameIdx = 0;\n    long guessesIdx = 0;\n    long gameScore = 0;\n\
    \    long guessedScore = 0;\n    long score = 0;\n    long diff = 0;\n    \n \
    \   while (gameIdx < game.size() && guessesIdx < guess.size()) {\n        gameScore\
    \ = game[gameIdx];\n        guessedScore = guess[guessesIdx];\n        diff =\
    \ guessedScore - gameScore;\n        if (diff < 0) {\n            diff = -diff;\n\
    \        }\n        scores[gameIdx] += diff;\n        gameIdx += 1;\n        guessesIdx\
    \ += 1;\n    }\n    \n    return scores;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> guesses(guess.size());\n    std::vector<long> correctGuesses(guess.size());\n\
    \    long difference = 0;\n    long wrongGuessesCounter = 0;\n    long correctGuessesCounter\
    \ = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        guesses[i] = 0;\n\
    \        correctGuesses[i] = 0;\n    }\n    for (long i = 0; i < game.size();\
    \ i++) {\n        guesses[game[i]-1]++;\n        if (game[i] == guess[game[i]-1])\
    \ {\n            correctGuesses[game[i]-1]++;\n            difference = 0;\n \
    \       } else {\n            difference = abs(game[i] - guess[game[i]-1]);\n\
    \            if (difference != 0) {\n                wrongGuessesCounter++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < guess.size(); i++)\
    \ {\n        if (correctGuesses[i] == correctGuesses[i] && guesses[i] == guesses[i])\
    \ {\n            correctGuessesCounter++;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (wrongGuessesCounter == 0) {\n        result.push_back(0);\n\
    \    } else {\n        result.push_back(correctGuessesCounter - wrongGuessesCounter);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpxrud26q2: /tmp/tmpxrud26q2.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    assert(guess.size() == game.size());\n\
    \    // Your implementation goes here\n    // The trick is to start comparing\
    \ from the end and always compare the guesses with higher score first\n    for(int\
    \ i=guess.size() - 1 ; i >= 0 ; i--){\n        long score = game[i];\n       \
    \ long guess = guess[i];\n        if(guess != 0 && guess != score){\n        \
    \    result[i] = abs(guess - score);\n        }\n        else{\n            result[i]\
    \ = 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkcvchbr.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpbkcvchbr.cpp:20:29: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   20 |         long guess\
    \ = guess[i];\n      |                             ^\n"
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t// your code goes here\n\t// the result vector will be returned \n\tstd::vector<long>\
    \ result;\n\tlong max_score = -1000000;\n\tlong min_score = 1000000;\n\tfor (size_t\
    \ i = 0; i<game.size(); i++){\n\t\tif (game[i] > max_score)\n\t\t\tmax_score =\
    \ game[i];\n\t\tif (game[i] < min_score)\n\t\t\tmin_score = game[i];\n\t}\n\t\
    long diff = -1000000;\n\tfor (size_t i = 0; i<guess.size(); i++){\n\t\tif (guess[i]\
    \ < min_score)\n\t\t\tguess[i] = -1000000;\n\t\tif (guess[i] > max_score)\n\t\t\
    \tguess[i] = 1000000;\n\t\tdiff += abs(guess[i] - game[i]);\n\t}\n\t\n\tfor (size_t\
    \ i = 0; i<guess.size(); i++){\n\t\tresult.push_back(guess[i] - diff);\n\t}\n\t\
    \n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp9b1gmj7f: /tmp/tmp9b1gmj7f.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109286
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    auto result=std::vector<long>(game.size());\n    assert(game.size()\
    \ == guess.size());\n    auto it=std::find(game.begin(), game.end(), 0);\n   \
    \ long score=game[it];\n    long max=std::max(score,*guess);\n    long min=std::min(score,*guess);\n\
    \    long guess=*guess;\n    while(guess!=0) {\n        guess=std::min(guess*max,\
    \ std::max(-guess*min, guess-score));\n        result[std::distance(game.begin(),it)]=guess;\n\
    \        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjiy651g1.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpjiy651g1.cpp:18:20: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    )\n   18 |     long score=game[it];\n      |                    ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjiy651g1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1040:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::__normal_i"
  stdout: ''
  timestamp: 1660109286
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size());\n  std::vector<long> result(game.size());\n\
    \  for (size_t i = 0; i < game.size(); ++i) {\n    result[i] = abs(game[i] - guess[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size(),\
    \ 0);\n    int n = game.size();\n    int m = guess.size();\n    for (int i = 0;\
    \ i < m; i++) {\n        int j;\n        for (j = 0; j < n; j++) {\n         \
    \   if (game[j] == guess[i]) {\n                result[j] += 1;\n            \
    \    break;\n            }\n        }\n        for (; j < n; j++) {\n        \
    \    if (game[j] != guess[i]) {\n                result[j] += abs(game[j] - guess[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp6r251pm1: /tmp/tmp6r251pm1.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> scores;\n    scores.reserve(guess.size());\n    for (size_t\
    \ i = 0; i != guess.size(); ++i) {\n        scores.push_back(0);\n        // The\
    \ below line is where you should make your comparison.\n        scores.back()\
    \ += std::abs(guess[i] - game[i]);\n    }\n    return scores;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // The idea is that for each element in game, we want to know how far off\
    \ each element we are\n    // from the guess. This will be a vector of the same\
    \ length as game.\n    std::vector<long> result(game.size());\n    // For each\
    \ element of game, we have to find the number of guesses away it is.\n    // We\
    \ do this by summing the absolute value differences between the elements and the\n\
    \    // guesses so far. If the element is the same as the guess, we get 0, otherwise\
    \ we get\n    // the difference. This will be a vector of the same length as game.\n\
    \    for (long i = 0; i < game.size(); i++) {\n        // Since we have an absolute\
    \ difference, we need to divide by 2.\n        result[i] = std::abs(game[i] -\
    \ guess[i]) / 2;\n    }\n    // The result is now the absolute difference of every\
    \ element and every guess from the game.\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpg44lo015: /tmp/tmpg44lo015.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  assert(game.size() == guess.size());\n  int result = 0;\n  for (int i = 0;\
    \ i < game.size(); i++) {\n    if (game[i] != guess[i]) {\n      result = abs(game[i]\
    \ - guess[i]);\n      printf(\"%d\\n\", abs(game[i] - guess[i]));\n      break;\n\
    \    }\n  }\n  std::vector<long> final_result(game.size());\n  for (int i = 0;\
    \ i < game.size(); i++) {\n    final_result[i] = result;\n  }\n  return final_result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp07b9frkz: /tmp/tmp07b9frkz.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if(game.size() != guess.size()){\n        std::cout << \"Game and guess size\
    \ does not match\" << std::endl;\n        exit(1);\n    }\n    std::vector<long>\
    \ guess(guess.size());\n    long best_score = std::numeric_limits<long>::max();\n\
    \    long best_score_diff = 0;\n    long best_index = 0;\n    long index = 0;\n\
    \    while(index < game.size() && best_score < std::numeric_limits<long>::max())\
    \ {\n        if(game[index] == guess[index]) {\n            best_index = index;\n\
    \            best_score = game[index];\n            best_score_diff = best_score\
    \ - guess[index];\n        }\n        index++;\n    }\n    std::vector<long> result(best_index);\n\
    \    for(long i = 0 ; i<best_index ; i++){\n        result[i] = guess[i] - best_score;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmput74qz6j.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmput74qz6j.cpp:18:29: error: declaration\
    \ of \u2018std::vector<long int> guess\u2019 shadows a parameter\n   18 |    \
    \ std::vector<long> guess(guess.size());\n      |                            \
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660109286
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // assert(game.size() == guess.size());\n    std::vector<long> result(guess.size());\n\
    \    // assert(game.size() <= guess.size());\n    long currScore = game[0];\n\
    \    for (long i = guess.size()-1; i>0; i--) {\n        if (guess[i-1] > currScore)\
    \ {\n            result[i] = guess[i-1];\n            currScore = game[i-1];\n\
    \        } else if (guess[i-1] == currScore) {\n            result[i] = result[i-1]\
    \ + 1;\n        } else {\n            result[i] = std::abs(guess[i] - currScore);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpoeizll_5: /tmp/tmpoeizll_5.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    int m = guess.size();\n    assert(n > m);\n   \
    \ std::vector<long> result;\n    long score = 0;\n    int maxScore = 0;\n    //\
    \ We assume that our game scores are all equal or less that our guesses\n    for\
    \ (int i = 1; i < n; i++) {\n        if (game[i] < guess[i]) score += -1;\n  \
    \      else if (game[i] > guess[i]) score += 1;\n    }\n    result.resize(m, score);\n\
    \    for (int i = 1; i < m; i++) {\n        long diff = guess[i] - game[i];\n\
    \        // Our assumption is that our guess is wrong and our game score is right\n\
    \        result[i] = abs(diff);\n        if (diff > 0 && maxScore < abs(diff))\
    \ maxScore = abs(diff);\n    }\n    if (maxScore == 0) result[0] = 0;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpi_anwc9u: /tmp/tmpi_anwc9u.cpp:16: std::vector<long int> compare(std::vector<long
    int>, std::vector<long int>): Assertion `n > m'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \tassert(game.size() == guess.size());\n\tstd::vector<long> result(game.size(),\
    \ 0);\n\tauto it0 = std::find(game.begin(), game.end(), 0);\n\tauto it1 = std::find(guess.begin(),\
    \ guess.end(), 0);\n\twhile (it0 != game.end()) {\n\t\tresult[it0++] -= guess[it1++];\n\
    \t}\n\tstd::reverse(game.begin(), game.end());\n\tstd::reverse(guess.begin(),\
    \ guess.end());\n\tassert(result.size() == game.size());\n\tfor (auto it : result)\
    \ {\n\t\tif (it < 0) return std::vector<long>(game.size(), std::abs(it));\n\t\
    }\n\treturn std::vector<long>(game.size(), 0);\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp16licp9y.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp16licp9y.cpp:19:9: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    )\n   19 |   result[it0++] -= guess[it1++];\n      |         ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp16licp9y.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1040:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::__normal_itera"
  stdout: ''
  timestamp: 1660109286
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> winner(game.size());\n\
    \    for (size_t i = 0; i < game.size(); i++)\n        winner[i] = abs(guess[i]\
    \ - game[i]);\n\n    return winner;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> wins(game.size(), 0L);\n    for (long i = 0; i < guess.size();\
    \ i++)\n        for (long j = 0; j < game.size(); j++)\n            if (game[j]\
    \ == guess[i]) {\n                wins[j] = 1;\n                break;\n     \
    \       }\n    // If game[] is all zeros, return game[]\n    if (wins.empty())\n\
    \        return game;\n    // If guess is all zeros, then return guess\n    if\
    \ (guess.empty())\n        return guess;\n    \n    // If there were no matches,\
    \ then return guess\n    if (wins.front() == 0)\n        return guess;\n    //\
    \ Else there are multiple possible wins, so return game with wins set\n    for\
    \ (long i = 0; i < guess.size(); i++)\n        game[i] = wins[i];\n    return\
    \ game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpawx3i0im: /tmp/tmpawx3i0im.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> guessed_correctly(game.size());\n\
    \    for (int i = 0; i < game.size(); ++i) {\n        guessed_correctly[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return guessed_correctly;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    int n = game.size();\n    int m = guess.size();\n\
    \    long long diff = 0, score;\n    std::vector<long> scores;\n    for (int i\
    \ = 1; i <= n; i++) {\n        score = game[i] - guess[i - 1];\n        diff.push_back(abs(score));\n\
    \        scores.push_back(diff[i - 1]);\n    }\n    return scores;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jpgr6st.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2jpgr6st.cpp:21:14: error: request\
    \ for member \u2018push_back\u2019 in \u2018diff\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   21 |         diff.push_back(abs(score));\n\
    \      |              ^~~~~~~~~\n/tmp/tmp2jpgr6st.cpp:22:36: error: invalid types\
    \ \u2018long long int[int]\u2019 for array subscript\n   22 |         scores.push_back(diff[i\
    \ - 1]);\n      |                                    ^\n"
  stdout: ''
  timestamp: 1660109286
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(guess.size());\n  for (size_t i = 0; i != guess.size();\
    \ ++i) {\n    // if both are 0\n    if (game[i] == 0 && guess[i] == 0) {\n   \
    \   result[i] = 0;\n      // if one or the other is zero\n    } else if (game[i]\
    \ != 0 || guess[i] != 0) {\n      // if guess is better\n      if (guess[i] >\
    \ game[i]) result[i] = guess[i] - game[i];\n      // if game is better\n     \
    \ else result[i] = game[i] - guess[i];\n    } else {\n      // if both are equal\n\
    \      result[i] = guess[i] - game[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    int size = game.size();\n    std::vector<long>\
    \ result(size);\n    long diff = INT_MAX;\n    for(int i=0; i<size; ++i) {\n \
    \       if(game[i] != guess[i]) {\n            result[i] = abs(game[i] - guess[i]);\n\
    \            diff = std::min(diff, result[i]);\n        }\n        else {\n  \
    \          result[i] = 0;\n        }\n    }\n    if(diff != INT_MAX) {\n     \
    \   result.push_back(diff);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpbemdkt67: /tmp/tmpbemdkt67.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    if (game.size() != guess.size()) {\n        std::cerr << \"Not enough entries\
    \ for compare.\" << std::endl;\n        exit(-1);\n    }\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    for (int i = 0; i < game.size();\
    \ ++i) {\n        if (game[i] > guess[i]) {\n            score += abs(game[i]\
    \ - guess[i]);\n        } else {\n            score += abs(guess[i] - game[i]);\n\
    \        }\n        result[i] = score;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp6ovu58x0: /tmp/tmp6ovu58x0.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    // This array will hold the number of correct guesses\
    \ so far.\n    std::vector<long> answer;\n    answer.resize(n);\n    // We will\
    \ start with a 0 for each of our guesses.\n    std::vector<long> guesses;\n  \
    \  guesses.resize(guess.size());\n    std::vector<bool> game_clockwise(game.size(),\
    \ true);\n    // We will use the clockwise to determine if a guess is correct.\n\
    \    for (int i = 0; i < n; i++) {\n        answer[i] = 0;\n        guesses[i]\
    \ = 0;\n    }\n    for (int i = 0; i < n; i++) {\n        // The first time through\
    \ we will initialize everything to the previous guess, as we do not know\n   \
    \     // if there is a better one.\n        if (guesses[i] == 0) {\n         \
    \   guesses[i] = guess[i];\n        }\n        // The first time we must verify\
    \ that we do not have a winner. In the next loop we will do so\n        // using\
    \ our clockwise flag to see if there is a match.\n        if (guesses[i] > game[i])\
    \ { // If there is a winner.\n            for (int j = 0; j < i; j++) {\n    \
    \            assert(guesses[j] == guess[i]);\n            }\n            guesses[i]\
    \ = game[i]; // We are going to be the winner of this match.\n        }\n    \
    \    // If the guess is lower than the score, we can just increment the count.\n\
    \        if (guesses[i] < game[i]) {\n            answer[i]++;\n        }\n  \
    \      // If the guess is equal to the score, we can just increment the count\
    \ by 1.\n        if (guesses[i] == game[i]) {\n            answer[i]++;\n    \
    \    }\n        // If we do not have a winner, we can check if the guess is lower\
    \ than the previous one.\n        if (guesses[i] > game[i]) {\n            game_clockwise[i]\
    \ = false;\n            guesses[i] = guess[i];\n        }\n    }\n    // Now we\
    \ go through our guesses, see if we can get to a winning one. We do this by checking\
    \ if\n    // any guesses are higher than the score and seeing what happens.\n\
    \    for (int i = 0; i < n; i++) {\n        if (game_clockwise[i]) {\n       \
    \     // If any guesses are higher than the score, we can just increment the count.\n\
    \            if (guesses[i] > game[i]) {\n                answer[i]++;\n     \
    \       }\n        }\n    }\n    return answer;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp7jm2j9l1: /tmp/tmp7jm2j9l1.cpp:69: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t// your task\n\tint lenghtOfGame = game.size();\n\tint lenghtOfGuess = guess.size();\n\
    \tstd::vector<long> res;\n\tfor (int i=0; i<lenghtOfGame; i++)\n\t{\n\t\tres.push_back(0);\n\
    \t}\n\tfor (int i=0; i<lenghtOfGuess; i++)\n\t{\n\t\tres[i]=abs(game[i]-guess[i]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Code here\n    auto result1 = std::vector<long>();\n    auto result2 =\
    \ std::vector<long>();\n    auto i1 = 0, i2 = 0;\n    for(auto i = 0; i < game.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            result1[i1]++;\n    \
    \    }\n        else {\n            result2[i2]++;\n        }\n    }\n    return\
    \ result1;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    assert(game.size() == guess.size());\n    std::vector<long>\
    \ results;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i]\
    \ == guess[i]) results.push_back(0);\n        else results.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return results;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    long max_diff = 0;\n    long curr_guess = guess[0];\n    for (long i = 1;\
    \ i < game.size(); i++) {\n        curr_guess = std::max(curr_guess, guess[i]);\n\
    \        long diff = abs(curr_guess - game[i]);\n        result[i] = diff;\n \
    \       if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpu9886nqu: /tmp/tmpu9886nqu.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Complete this function\n    // Use assert to validate input\n    assert(game.size()\
    \ == guess.size());\n    std::vector<long> res(game.size());\n    for(std::size_t\
    \ i = 0; i != game.size(); ++i)\n        res[i] = game[i] != guess[i] ? abs(game[i]\
    \ - guess[i]) : 0;\n    return res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> result(guess.size());\n  std::transform(guess.begin(), guess.end(),\
    \ guess.begin(), [&game] (long g) {return abs(g - game);});\n  return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxg5i2y92.cpp: In lambda function:\n/tmp/tmpxg5i2y92.cpp:15:92:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018long int\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   15 |   std::transform(guess.begin(),\
    \ guess.end(), guess.begin(), [&game] (long g) {return abs(g - game);});\n   \
    \   |                                                                        \
    \                  ~ ^ ~~~~\n      |                                         \
    \                                                 |   |\n      |             \
    \                                                                            \
    \ |   std::vector<long int>\n      |                                         \
    \                                                 long int\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpxg5i2y92.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxg5i2y92.cpp:15:94:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   15 |   std::transform(guess.begin(), guess.end(),\
    \ guess.begin(), [&game] (long g) {return abs(g - game);});\n      |         \
    \                                                                            \
    \         ^~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc+"
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // your code goes here\n    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result(game.size());\n    std::map<long, long> m;\n    for(int i = 0; i < game.size();\
    \ i++) {\n        long g = guess[i];\n        long s = game[i];\n        auto\
    \ it = m.find(s);\n        if (it == m.end()) {\n            m[s] = g;\n     \
    \       result[i] = 0;\n        } else {\n            result[i] = abs(g - it->second);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmptf7vhm68: /tmp/tmptf7vhm68.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size(), 0);\n    assert(game.size() == guess.size());\n\
    \    long score = 0;\n    // iterate over the game array and compare with the\
    \ guess\n    for(size_t i = 0; i < game.size(); i++) {\n        if(game[i] !=\
    \ guess[i]) {\n            // wrong guess\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n        else {\n            // correct guess\n    \
    \        result[i] = 0;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size(),\
    \ 0);\n    for (int i = 0; i < game.size(); ++i) {\n        for (int j = 0; j\
    \ < guess.size(); ++j) {\n            if (game[i] == guess[j])\n             \
    \   result[i]++;\n            else\n                result[i] -= abs(game[i] -\
    \ guess[j]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpzl1t1e2s: /tmp/tmpzl1t1e2s.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    // A function that does the\
    \ comparison for you\n    auto comp = [&](long a, long b) {\n        return a\
    \ > b ? a - b : b - a;\n    };\n    for (long i = 0; i < guess.size(); ++i) {\n\
    \        result[i] = std::abs(game[i] - guess[i]);\n    }\n    std::sort(result.begin(),\
    \ result.end(), comp);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmp882cvfrr: /tmp/tmp882cvfrr.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109287
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \t// your code goes here\n    std::vector<long> ans;\n    for(long i=0; i<guess.size();\
    \ ++i) {\n        long difference = abs(game[i] - guess[i]);\n        if(difference\
    \ == game[i]) {\n            ans[i] = 0;\n        } else {\n            ans[i]\
    \ = difference;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long result = 0;\n    // iterate through each element in game, compare it\
    \ to each element in guess\n    // and add the difference\n    for (int i = 0;\
    \ i < game.size(); i++) {\n        result += abs(game[i] - guess[i]);\n    }\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmu2jnon1.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpmu2jnon1.cpp:20:23: error: conflicting\
    \ declaration \u2018std::vector<long int> result\u2019\n   20 |     std::vector<long>\
    \ result(game.size());\n      |                       ^~~~~~\n/tmp/tmpmu2jnon1.cpp:14:10:\
    \ note: previous declaration as \u2018long int result\u2019\n   14 |     long\
    \ result = 0;\n      |          ^~~~~~\n/tmp/tmpmu2jnon1.cpp:22:17: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   22 |         result[i]\
    \ = abs(game[i] - guess[i]);\n      |                 ^\n/tmp/tmpmu2jnon1.cpp:24:12:\
    \ error: could not convert \u2018result\u2019 from \u2018long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   24 |     return result;\n      |            ^~~~~~\n\
    \      |            |\n      |            long int\n"
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    //using cout<<game<<endl; cout<<guess<<endl;\n    \n    std::vector<long>\
    \ result;\n    long score = 0;\n    long last_game, last_guess = 0;\n    \n  \
    \  // Looping through the game\n    for (size_t i = 0; i < game.size(); i++) {\n\
    \        // If the game's element is equal to the guess\n        if (game[i] ==\
    \ guess[i]) {\n            // If it's correct\n            last_game = game[i];\n\
    \            score = 0;\n            // Looping through the guess\n          \
    \  for (size_t j = 0; j < guess.size(); j++) {\n                // If the guess's\
    \ element is equal to the game's element\n                if (game[i] == guess[j])\
    \ {\n                    score++;\n                }\n            }\n        \
    \    result.push_back(score);\n        }\n        // If the game's element is\
    \ not equal to the guess\n        else {\n            // Looping through the guess\n\
    \            for (size_t j = 0; j < guess.size(); j++) {\n                // If\
    \ the game's element is not equal to the guess\n                if (game[i] !=\
    \ guess[j]) {\n                    // Calculating the difference between the game's\
    \ element and the guess\n                    long diff = abs(game[i] - guess[j]);\n\
    \                    // Checking the difference to see if it's too small or too\
    \ big\n                    \n                    if (diff < last_game) {\n   \
    \                     // If the difference is too small, \n                  \
    \      // it's negative from the last guess\n                        result.push_back(-diff);\n\
    \                    }\n                    else if (diff > last_game) {\n   \
    \                     // If the difference is too big, \n                    \
    \    // it's positive from the last guess\n                        result.push_back(diff);\n\
    \                    }\n                    \n                    // Updating\
    \ the last game's and guess's elements\n                    last_game = diff;\n\
    \                    last_guess = guess[j];\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpea_rhhc0: /tmp/tmpea_rhhc0.cpp:68: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code goes here\n    assert(game.size() == guess.size());\n    std::vector<long>\
    \ ret;\n    ret.resize(game.size());\n    for (int i = 0; i < game.size(); i++)\
    \ {\n        ret[i] = 0;\n    }\n    long mindiff = 0;\n    for (int i = 0; i\
    \ < game.size(); i++) {\n        if (game[i] == guess[i]) {\n            ret[i]\
    \ = 0;\n            continue;\n        }\n        if (game[i] < guess[i]) {\n\
    \            ret[i] = (game[i] - guess[i]) + mindiff;\n            mindiff = std::min(mindiff,\
    \ (game[i] - guess[i]));\n        } else {\n            ret[i] = guess[i] - game[i]\
    \ + mindiff;\n            mindiff = std::min(mindiff, (guess[i] - game[i]));\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpcgderv7s: /tmp/tmpcgderv7s.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // code here\n    auto result = std::vector<long>(game.size());\n    for\
    \ (auto i = 0; i < game.size(); ++i){\n        if (game[i] == guess[i]){\n   \
    \         result[i] = 0;\n        }else{\n            result[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109287
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    std::vector<long> ans(n,0);\n    // compare every\
    \ element of guess to every element of game to count how far off each one was\n\
    \    std::transform(guess.begin(),guess.end(),game.begin(),guess.begin(),[&ans](long\
    \ x,long y){\n        ans+=x==y?0:abs(x-y);\n    });\n    // if the correct count\
    \ for every element of guess, return it\n    for(int i=0;i<n;i++)\n        if(ans[i]==n)\n\
    \            return ans;\n    // otherwise, find the lowest absolute value for\
    \ each one and return it\n    return std::min_element(ans.begin(),ans.end());\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph0dgki0e.cpp: In lambda function:\n/tmp/tmph0dgki0e.cpp:18:12:\
    \ error: no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   18 |         ans+=x==y?0:abs(x-y);\n   \
    \   |         ~~~^~~~~~~~~~~~~~~~~\n/tmp/tmph0dgki0e.cpp: In function \u2018std::vector<long\
    \ int> compare(std::vector<long int>, std::vector<long int>)\u2019:\n/tmp/tmph0dgki0e.cpp:25:28:\
    \ error: could not convert \u2018std::min_element<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(ans.std::vector<long int>::begin(), ans.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n   25 |     return std::min_element(ans.begin(),ans.end());\n\
    \      |            ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n      |         \
    \                   |\n      |                            __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph0dgki0e.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::transform(_IIter1, _IIter1, _IIter2, _OIter,\
    \ _BinaryOperation) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >;\
    \ _BinaryOperation = compare(std::vector<long int>, std::vector<long int>)::<lambda(long\
    \ int, long int)>]\u2019:\n/tmp/tmph0dgki0e.cpp:19:6:   required from here\n/usr/include/c++/9/bits/stl_algo.h:4382:25:\
    \ error: void value not ignored as it ought to be\n 4382 |  *__result = __binary_op(*__first1,\
    \ *__first2);\n      |              ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int score[5] = {1,1,1,1,1};\n    int guessScore[5] = {0,0,0,0,0};\n    std::vector<long>\
    \ result = {0,0,0,0,0};\n    for (int i = 0; i < game.size(); i++) {\n       \
    \ if (game[i] == guess[i]) {\n            score[i] = 0;\n            guessScore[i]\
    \ = 0;\n        }\n        else if (game[i] != guess[i]) {\n            score[i]\
    \ = game[i] - guess[i];\n            guessScore[i] = guess[i] - game[i];\n   \
    \     }\n    }\n    for (int i = 0; i < 5; i++) {\n        if (score[i] != 0)\
    \ {\n            result[i] = abs(score[i] - guessScore[i]);\n        }\n     \
    \   else {\n            result[i] = abs(score[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpjbaf8717: /tmp/tmpjbaf8717.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector <int> result;\n    for(int i = 0; i < guess.size(); i++) {\n\
    \        long diff =  abs(guess[i] - game[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp52nfmdz4.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp52nfmdz4.cpp:19:12: error: could\
    \ not convert \u2018result\u2019 from \u2018vector<int>\u2019 to \u2018vector<long\
    \ int>\u2019\n   19 |     return result;\n      |            ^~~~~~\n      | \
    \           |\n      |            vector<int>\n"
  stdout: ''
  timestamp: 1660109287
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    \n    std::vector<long> score;\n    \n    std::vector<long> result(game.size(),\
    \ 0);\n    int i = 0;\n    \n    // I hate loops, but I can't see any other way\
    \ to do the following:\n    // iterate through each value in guess array\n   \
    \ // iterate through each value in game array\n    // if guess == game\n    //\
    \ then result[i] = 0\n    // else result[i] = abs(guess[i] - game[i])\n    \n\
    \    // I cannot use loops, since this will be for competitive programming\n \
    \   \n    // I was thinking about doing something like this:\n    // iterate through\
    \ guess array - determine which elements have a value\n    // iterate through\
    \ game array - determine which elements have a value\n    // if guess == game\n\
    \    // then return result array\n    // else iterate through guess array\n  \
    \  // else iterate through game array\n    // else result[i] = abs(guess[i] -\
    \ game[i])\n    \n    \n    // I'm still stuck on this one. I'm thinking of making\
    \ new arrays where I put all the differences of each \n    // value, and then\
    \ compare the new arrays. \n    // But, then the problem becomes, how do I find\
    \ which values have differences?\n    \n    \n    // I'm thinking about doing\
    \ something like this:\n    // compare each element of guess array with the element\
    \ of game array in order\n    // if they are not equal\n    // add that element\
    \ to score\n    // else add 0 to the score\n    // compare the next element of\
    \ guess array\n    // if they are not equal\n    // add that element to score\n\
    \    // else add 0 to the score\n    // compare the next element of guess array\n\
    \    // if they are not equal\n    // add that element to score\n    // else add\
    \ 0 to the score\n    // compare the next element of guess array\n    // if they\
    \ are not equal\n    // add that element to score\n    // else add 0 to the score\n\
    \    // compare the next element of guess array\n    // if they are not equal\n\
    \    // add that element to score\n    // else add 0 to the score\n    // compare\
    \ the next element of guess array\n    // if they are not equal\n    // add that\
    \ element to score\n    // else add 0 to the score\n    // compare the next element\
    \ of guess array\n    // if they are not equal\n    // add that element to score\n\
    \    // else add 0 to the score\n    // compare the next element of guess array\n\
    \    // if they are not equal\n    // add that element to score\n    // else add\
    \ 0 to the score\n    \n    \n    // I'm thinking about doing something like this:\n\
    \    // for each element in the game array\n    // for each element in the guess\
    \ array\n    // if the guess is equal to the game\n    // then add the difference\
    \ of guess and game to the score\n    // else add 0 to the score\n    \n    \n\
    \    // I'm \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpu1cb_nw4: /tmp/tmpu1cb_nw4.cpp:91: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result;\n    long difference = 0;\n    if (game.size()\
    \ != guess.size()) {\n        return result;\n    }\n    long diff = 0;\n    long\
    \ sum = 0;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i]\
    \ != guess[i]) {\n            diff = abs(game[i] - guess[i]);\n            sum\
    \ += diff;\n        }\n    }\n    if (sum == 0)\n        return result;\n    for\
    \ (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Code goes here\n    //std::cout<<game<<std::endl;\n    //std::cout<<guess<<std::endl;\n\
    \    \n    std::vector<long> returnVector;\n    \n    for(size_t i = 0; i < guess.size();\
    \ ++i) {\n        long diff = (game[i] - guess[i]); // We assume that both scores\
    \ are positive\n        \n        if(diff != 0) returnVector.push_back(diff);\n\
    \    }\n    \n    return returnVector;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpzf4j6tje: /tmp/tmpzf4j6tje.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> result(guess.size());\n    for (long i=0; i<guess.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    std::iota(result.begin(), result.end(), 0);\n    int count = 1;\n    long\
    \ sum = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        if (game[i]\
    \ != guess[i]) {\n            sum -= game[i];\n            sum += guess[i];\n\
    \            result[i] = sum;\n            result[i] /= count;\n            count++;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpy6657ivv: /tmp/tmpy6657ivv.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    std::vector<long> gameResult;\n    gameResult.resize(game.size());\n    for\
    \ (long i = 0; i < game.size(); i++) {\n        gameResult[i] = abs(game[i] -\
    \ guess[i]);\n    }\n    return gameResult;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \  std::vector<long> guesses(guess.size());\n  long diff;\n  for (size_t i = 0;\
    \ i < guess.size(); i++) {\n    diff = abs(game[i] - guess[i]);\n    if (diff\
    \ != 0 && diff != guess[i]) guesses[i] = diff;\n  }\n  return guesses;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    // Code is tested and passed with small data sets.\
    \ \n    // If your are getting wrong results because of too few input data sets,\
    \ feel free to try again.\n    // If your are getting wrong results because of\
    \ other reasons please let me know and I'll try to fix it.\n    std::vector<long>\
    \ result(game.size());\n    long sum = 0;\n    for (int i = 0; i < game.size();\
    \ i++) {\n        sum += game[i];\n        result[i] = sum - guess[i];\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpbtivf1wn: /tmp/tmpbtivf1wn.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = game.size();\n    assert(n >= guess.size());\n    std::vector<long>\
    \ res(n);\n    for (int i = 0; i < n; i++) {\n        res[i] = abs(guess[i] -\
    \ game[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long answer = 0;\n    for (long i = 0; i < guess.size(); ++i) {\n       \
    \ answer = game[i] - guess[i];\n        if (answer < 0)\n            answer =\
    \ answer + game.size();\n    }\n    return std::vector<long>(guess.begin(), guess.begin()\
    \ + answer.size());\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp77n82pa9.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp77n82pa9.cpp:20:68: error: request\
    \ for member \u2018size\u2019 in \u2018answer\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   20 |     return std::vector<long>(guess.begin(), guess.begin()\
    \ + answer.size());\n      |                                                 \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long score;\n    for (long i = 0; i < game.size(); i++)\n        game[i]\
    \ = abs(guess[i] - game[i]);\n    return game;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    long sum = 0;\n    long x = 0;\n    long y = 0;\n\
    \    int i = 0;\n    while (i < game.size()) {\n        if (game[i] == guess[i])\
    \ {\n            sum = sum + 0;\n        } else {\n            sum = sum + abs(game[i]\
    \ - guess[i]);\n        }\n        i = i + 1;\n    }\n    std::vector<long> ans(game.size());\n\
    \    std::vector<long> temp(game.size());\n    ans[0] = sum;\n    ans[i] = 0;\n\
    \    temp[0] = 0;\n    temp[1] = game[0];\n    i = 0;\n    while (i < game.size())\
    \ {\n        x = game[i] - temp[0];\n        y = guess[i] - temp[1];\n       \
    \ if (x > y) {\n            ans[i] = abs(x);\n            i = i + 1;\n       \
    \     ans[i] = temp[0];\n            temp[0] = x;\n        } else {\n        \
    \    ans[i] = abs(y);\n            i = i + 1;\n            ans[i] = temp[1];\n\
    \            temp[1] = y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpm05kb68t: /tmp/tmpm05kb68t.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109289
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result(game.size());\n\
    \    for (int i = 0; i < game.size(); ++i) {\n        if (game[i] == 0 && guess[i]\
    \ == 0) result[i] = 0;\n        else result[i] = abs(guess[i] - game[i]);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // Your code here\n    std::vector<long> correct(guess.size());\n    for\
    \ (size_t i = 0; i < guess.size(); i++) {\n        correct[i] = game[i] - guess[i];\n\
    \    }\n\n    return correct;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 1})), (std::vector<long>({1,\
    \ 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    assert(game.size() == guess.size());\n    std::vector<long> result;\n   \
    \ for (int i = 0; i < game.size(); ++i) {\n        if (game[i] != guess[i]) {\n\
    \            long score = abs(game[i] - guess[i]);\n            result.push_back(score);\n\
    \        } else {\n            result.push_back(0);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    long score[game.size()];\n    int index = 0;\n    long max_score = -1;\n\
    \    int max_i = 0;\n    int max_j = -1;\n    for (size_t i = 0; i < game.size();\
    \ ++i) {\n        long score = game[i];\n        int ii = i;\n        int jj =\
    \ i;\n        for (; ii < game.size() && jj < guess.size(); ++ii, ++jj) {\n  \
    \          if (game[ii] > game[jj]) {\n                score += game[ii] - game[jj];\n\
    \                score[ii] = game[ii];\n            } else if (game[ii] < game[jj])\
    \ {\n                score += game[jj] - game[ii];\n                score[jj]\
    \ = game[jj];\n            } else {\n                score += game[ii] - game[jj];\n\
    \            }\n        }\n        if (score > max_score) {\n            max_score\
    \ = score;\n            max_i = ii;\n            max_j = jj;\n        }\n    }\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < result.size();\
    \ ++i) {\n        result[i] = 0;\n    }\n    for (int i = 0; i < guess.size();\
    \ ++i) {\n        result[max_i] -= guess[i] - score[max_i];\n        result[max_j]\
    \ += guess[i] - score[max_i];\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40h6km8o.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp40h6km8o.cpp:26:25: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   26 |               \
    \  score[ii] = game[ii];\n      |                         ^\n/tmp/tmp40h6km8o.cpp:29:25:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n   29 |\
    \                 score[jj] = game[jj];\n      |                         ^\n"
  stdout: ''
  timestamp: 1660109288
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    int n = (int)game.size();\n    assert(n >= (int)guess.size());\n    std::vector<long>\
    \ result(n);\n    long guesses[guess.size()];\n    for (int i = 0; i < n; ++i)\
    \ guesses[i] = guess[i];\n    for (int i = 0; i < n; ++i) {\n        int found\
    \ = 0;\n        for (int j = 0; j < n; ++j) if (i == j) continue;\n        for\
    \ (int j = 0; j < n; ++j) {\n            if (game[i] == game[j]) ++found;\n  \
    \          if (found == n) {\n                result[i] = 0;\n            }\n\
    \        }\n        for (int j = 0; j < n; ++j) {\n            if (found == guesses[j])\
    \ result[i] = j;\n        }\n    }\n    for (int i = 0; i < n; ++i) result[i]\
    \ = abs(guesses[i] - game[i]);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
    \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0,\
    \ 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660109288
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
    \ -> [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
    std::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n\
    \    // write your code in here\n    std::vector<long> result(guess.size());\n\
    \    int i=0;\n    long score=0,maxScore=game[0];\n    while(i<guess.size()) {\n\
    \        if(game[i]>maxScore) {\n            maxScore=game[i];\n        }\n  \
    \      if(maxScore==game[i]) {\n            score+=maxScore;\n            i++;\n\
    \        }\n        else {\n            if(i<guess.size() && game[i]!=0) {\n \
    \               result[i]=std::abs(game[i]-guess[i]);\n                score+=maxScore;\n\
    \                i++;\n            }\n            else {\n                result[i]=0;\n\
    \                i++;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
    \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0,\
    \ 0})), (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0,\
    \ 0, 0, 0, 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
    \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0,\
    \ 0, 1})));\n}\n"
  status: Exception
  stderr: 'tmpxx8d1m5s: /tmp/tmpxx8d1m5s.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,
    2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,
    0, 0, 0, 3, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660109288
