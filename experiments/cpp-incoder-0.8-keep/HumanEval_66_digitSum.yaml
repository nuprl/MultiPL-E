name: HumanEval_66_digitSum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
  \ that takes a string as input and returns the sum of the upper characters only'\n\
  // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
  \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
  woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string s)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"\
  )) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
  abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
  woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
  \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) ==\
  \ (327));\n}\n"
completions: ["    long sum = 0;\n    long currVal = 0;\n    for (auto i: s)\n   \
    \ {\n        currVal = (currVal << 1) + toupper(static_cast<char>(i));\n     \
    \   sum += currVal;\n    }\n    return sum;", "    int sum = 0;\n    for (auto\
    \ i = s.begin(); i != s.end(); ++i) {\n        if (*i <  97 || !(*i & 32)) {\n\
    \            sum += *i - 48;\n        }\n    }\n    return sum;", "    int result\
    \ = 0;\n    for (unsigned int i = 0; i < s.size(); ++i) {\n        if (std::isupper(s[i])\
    \ && i < s.size() - 1) {\n            result += std::toupper(s[i + 1]);\n    \
    \    }\n    }\n    return result;", "  // code\n  assert(s.length() > 0);\n  long\
    \ res = 0;\n  for(int i = s.length() - 1; i >= 0; i--) {\n    if(s.at(i) >= 'a'\
    \ && s.at(i) <= 'z') {\n      res +=  (s.at(i) - 'a' + 1);\n    }\n  }\n  return\
    \ res;", "    long sum = 0;\n    for (auto c : s) {\n        sum += std::toupper(c);\n\
    \    }\n    return sum;", "    long sum = 0;\n    long upper = 0;\n    for (auto\
    \ it : s) {\n        if (it >= 'A' && it <= 'Z') {\n            upper = upper\
    \ + it - 'A' + 1;\n        }\n        else {\n            upper = upper + 1;\n\
    \        }\n    }\n    sum = sum + upper;\n    return sum;", "    int sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        sum += toupper(s[i] - 'A');\n\
    \    }\n    return sum;", "    long sum = 0;\n    for (size_t i = 0; i < s.length();\
    \ i++) {\n        if (std::isupper(s[i]))\n            sum += s[i]-'A'+1;\n  \
    \  }\n    return sum;", "    long sum = 0;\n    for (long i = 0; i < s.size();\
    \ i++) {\n        sum += s[i] - '0';\n    }\n    return sum;", "    int sum =\
    \ 0;\n    for (int i = 0; i != s.length(); ++i) {\n        if (s.at(i) > 'z')\
    \ {\n            sum += s.at(i) - 'a' + 1;\n        }\n        else {\n      \
    \      sum += s.at(i);\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (char c: s)\n        sum += c - 'a' + 1;\n    return sum;", "    long\
    \ sum = 0;\n    for (auto it = s.cbegin(); it != s.cend(); ++it)\n        sum\
    \ += (sum % 10) + (*it - '0');\n    return sum;", "  int sum = 0;\n  for (int\
    \ i = 0; i < s.length(); i++) {\n    sum += (s.at(i) - 'A');\n  }\n  return sum;",
  "    long sum = 0;\n    for (auto it = s.begin(); it != s.end(); ++it) {\n     \
    \   sum += *(it - '0');\n    }\n    return sum;", "        long sum = 0;\n   \
    \     for (size_t i = 0; i < s.length(); i++) {\n                sum += (s[i]>='a'\
    \ && s[i]<='z') ? s[i] - 'a' + 10 : s[i]-'A' + 48;\n        }\n        return\
    \ sum;", "    // code here\n    long sum=0;\n    for (int i=0;i<s.length();i++){\n\
    \        sum+=((int)s.at(i))>='A'?((int)s.at(i))-'A':((int)s.at(i))-'a';\n   \
    \ }\n    return sum;", "  std::reverse(s.begin(), s.end()); // to remove all 'a'\
    \ characters\n  std::sort(s.begin(), s.end()); // to remove all 'A' characters\n\
    \  int sum = 0;\n  for (int i = 0; i < s.size(); ++i) {\n    if (i > 0 && s[i]\
    \ >= s[i-1]) sum += s[i] - s[i-1];\n    else if (s[i] == 'A') sum += 32;\n   \
    \ else sum += s[i] - 'a' + 10;\n  }\n  return sum;", "    long sum = 0;\n    for\
    \ (char c : s) {\n        sum += (c - 'A') % 10;\n    }\n    return sum;", " \
    \   long sum = 0;\n    for (auto c : s) {\n        sum = sum + getCharASCII(c);\n\
    \    }\n    return sum;", "    long sum = 0;\n    int size = s.size();\n    for\
    \ (int i = 0; i < size; i++) {\n        sum += s.at(i) - 'A' + 1;\n    }\n   \
    \ return sum;", "    long sum = 0;\n    for(auto c : s) {\n        sum += (c >=\
    \ 'A') ? (c - 'A' + 10) : (c - 'a' + 26);\n    }\n    return sum;", "  long sum\
    \ = 0;\n  for (int i = 0; i < s.size(); i++) {\n    int value = s[i];\n    if\
    \ (value >= 'A' && value <= 'Z')\n      sum += value - 'A' + 1;\n  }\n  return\
    \ sum;", "    long sum = 0;\n    for (int i = 0; i < s.length(); i++)\n      \
    \  sum += (s[i] - 'A');\n    return sum;", "    int result = 0;\n    for (char\
    \ i : s) {\n        if (i > '0' && i <= '9') {\n            result += i;\n   \
    \     }\n    }\n    return result;", "    int sum = 0;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        sum += (int) s[i];\n    }\n    return sum;", " \
    \   long sum = 0; // sum of all chars in upper case\n    for (char c : s) {\n\
    \        sum += c - 'A' + 1;\n    }\n    return sum;", "    assert(s.size() >=\
    \ 1);\n    long sum = 0;\n    long val = 0;\n    for (auto it=s.begin();it!=s.end();it++){\n\
    \        if(isupper(*it)){\n            val = val*10 + (*it-'A');\n          \
    \  sum += val;\n        }\n    }\n    return sum;", "   long sum=0;\n   for(auto\
    \ i=0;i<s.size();i++)\n      sum+=(int)s.at(i);\n   return sum;", "    long sum\
    \ = 0;\n    int i = 0;\n    while ((i < s.length()) && (s[i] >= 'a' && s[i] <=\
    \ 'z'))\n    {\n        sum += s[i] - 'a' + 10;\n        i++;\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for(int i = 0; i<s.length(); i++){\n        if(s[i]>='A'\
    \ && s[i]<='Z'){\n            sum += (s[i]-'A');\n        }\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    sum += s[i] - 48;\n    }\n    return sum;", "  int sum = 0;\n  for (int i\
    \ = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i] == 'a' || s[i] == 'B'\
    \ || s[i] == 'b' || s[i] == 'C' || s[i] == 'c' || s[i] == 'D' || s[i] == 'd'\n\
    \        || s[i] == 'E' || s[i] == 'e' || s[i] == 'F' || s[i] == 'f' || s[i] ==\
    \ 'G' || s[i] == 'g' || s[i] == 'H' || s[i] == 'h'\n        || s[i] == 'I' ||\
    \ s[i] == 'i' || s[i] == 'J' || s[i] == 'j' || s[i] == 'K' || s[i] == 'k' || s[i]\
    \ == 'L' || s[i] == 'l'\n        || s[i] == 'M' || s[i] == 'm' || s[i] == 'N'\
    \ || s[i] == 'n' || s[i] == 'O' || s[i] == 'o' || s[i] == 'P' || s[i] == 'p'\n\
    \        || s[i] == 'Q' || s[i] == 'q' || s[i] == 'R' || s[i] == 'r' || s[i] ==\
    \ 'S' || s[i] == 's' || s[i] == 'T' || s[i] == 't'\n        || s[i] == 'U' ||\
    \ s[i] == 'u' || s[i] == 'V' || s[i] == 'v' || s[i] == 'W' || s[i] == 'w' || s[i]\
    \ == 'X' || s[i] == 'x'\n        || s[i] == 'Y' || s[i] == 'y' || s[i] == 'Z'\
    \ || s[i] == 'z' || s[i] == 'aA' || s[i] == 'a' || s[i] == 'B' || s[i] == 'b'\n\
    \        || s[i] == 'C' || s[i] == 'c' || s[i] == 'D' || s[i] == 'd' || s[i] ==\
    \ 'E' || s[i] == 'e' || s[i] == 'F' || s[i] == 'f'\n        || s[i] == 'G' ||\
    \ s[i] == 'g' || s[i] == 'H' || s[i] == 'h' || s[i] == 'I' || s[i] == 'i' || s[i]\
    \ == 'J' || s[i] == 'j'\n        || s[i] == 'K' || s[i] == 'k' || s[i] == 'L'\
    \ || s[i] == 'l' || s[i] == 'M' || s[i] == 'm' || s[i] == 'N' || s[i] == 'n'\n\
    \        || s[i] == 'O' || s[i] == 'o' || s[i] == 'P' || s[i] == 'p' || s[i] ==\
    \ 'Q' || s[i] == 'q' || s[i] == 'R' || s[i] == 'r'\n        || s[i] == 'S' ||\
    \ s[i] == 's' || s[i] == 'T' || s[i] == 't' || s[i] == 'U' || s[i] == 'u' || s[i]\
    \ == 'V' || s[i] == 'v'\n        || s[i] == 'W' || s[i] == 'w' || s[i] == 'X'\
    \ || s[i] == 'x' || s[i] == 'Y' || s[i] == 'y' || s[i] == 'Z' || s[i] == 'z'\n\
    \        || s[i] == 'a' || s[i] == 'A' || s[i] == 'a' || s[i] == 'B' || s[i] ==\
    \ 'b' || s[i] == 'C' || s[i] == 'c' || s[i] == 'D'\n        || s[i] == 'd' ||\
    \ s[i] == 'E' || s[i] == 'e' || s[i] == 'F", "\tlong result = 0;\n\tfor (int i\
    \ = 0; i < s.length(); i++)\n\t{\n\t\tresult += toupper(s[i]);\n\t}\n\treturn\
    \ result;", "  std::set<char> st;\n  for (char c : s) {\n    st.insert(c);\n \
    \ }\n  long result = 0;\n  for (char c : s) {\n    if (st.count(c) > 0) {\n  \
    \    result += c;\n    }\n  }\n  return result;", "  long ans = 0, n;\n  n = s.size();\n\
    \  for (int i = 0; i < n; i++) {\n    ans += (s[i] - 'A') % 10;\n  }\n  return\
    \ ans;", "  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    sum +=\
    \ (s[i] - 'A') + 1;\n  }\n  return sum;", "    int sum = 0;\n    for (auto c :\
    \ s) {\n        sum += c >= 'A' && c <= 'Z' ? c - 'A' + 10 : c - 'a' + 10;\n \
    \   }\n    return sum;", "    long sum = 0;\n    // Write your code here\n   \
    \ for(auto& c:s){\n        if(c.isupper()){\n            sum += std::stol(c.c_str(),nullptr,16);\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    long i = 0;\n   \
    \ for (; i < s.length(); i++) {\n        sum = sum + s.at(i) - 'A' + 1;\n    }\n\
    \    return sum;", '    // code here', "    long sum = 0;\n    for (auto &i :\
    \ s) {\n        sum += (unsigned char)i;\n    }\n    return sum;", "    int sum\
    \ = 0, len = s.length();\n    for (int i = 0; i < len; i++)\n        sum += s.at(i)\
    \ - 'A' + 1;\n    return sum;", "    // Write code here\n    long sum = 0;\n \
    \   for (int i = 0; i < s.size() - 1; i++) {\n        sum = sum + std::toupper(s[i])\
    \ - std::toupper(s[i + 1]);\n    }\n    return sum;", "    long sum = 0;\n   \
    \ for (char &i : s) {\n        if (i >= 'A' && i <= 'Z') {\n            sum +=\
    \ i - 'A';\n        }\n    }\n    return sum;", "    long long result = 0;\n \
    \   for (long long i = 0; i < s.size(); i++) {\n        result += std::pow(48,\
    \ static_cast<long long>(i));\n        result += s[i];\n    }\n    return result;",
  "    int sum = 0;\n    for (auto c : s) {\n        sum += toupper(c);\n    }\n \
    \   return sum;", "  // code here\n  long sum = 0;\n  for(auto c: s) {\n    if(\
    \ ('a'<=c && c<='z') || ( 'A'<=c && c<='Z') )\n      sum = sum + c;\n  }\n  return\
    \ sum;", "    // Write your code here\n    long result=0;\n    for(unsigned int\
    \ i=0;i<s.size();i++)\n    {\n        long temp=s.at(i)+32;\n        result+=temp;\n\
    \    }\n    return result;", "    if (s.empty()) {\n        return 0;\n    }\n\
    \    long sum = 0;\n    for (char c : s) {\n        int tmp = c;\n        if (tmp\
    \ >= 'a' && tmp <= 'z') {\n            tmp = tmp - 'a' + 10;\n        }\n    \
    \    sum += tmp;\n    }\n    return sum;", "    int sum = 0;\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        sum += (s[i] == 'A' ? 91 : s[i] == 'a' ?\
    \ 90 : 0);\n    }\n    return sum;", "    long ans = 0;\n    for (std::size_t\
    \ i = 0; i < s.size(); ++i) {\n        ans += (s[i] - 'A') % 10;\n    }\n    return\
    \ ans;", "    // Write your code here\n    long sum = 0;\n    for (char ch : s)\
    \ {\n        sum = sum + std::pow(10, s.find(ch) - 1);\n    }\n    return sum;",
  "    long sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        sum += getCharUpToChar(s[i])\
    \ - 'A' + 1;\n    }\n    return sum;", "    assert(s.length()>1);\n    long long\
    \ int res=0;\n    int t=1;\n    for(int i=0;i<s.length();i++){\n        if((s[i]+48)>9){\n\
    \            t*=10;\n            t+=s[i]+'0';\n        }else{\n            t+=s[i]+'0';\n\
    \        }\n    }\n    for(int i=0;i<s.length();i++){\n        if((s[i]+48)>9){\n\
    \            res+=s[i]+'0';\n        }else{\n            res+=s[i];\n        }\n\
    \    }\n    return res;", "    int sum = 0;\n    int i = 0;\n    int l = s.size();\n\
    \    while (i < l) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum\
    \ += s[i] - 'A' + 1;\n        i++;\n    }\n    return sum;", "    int sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (std::isupper(s[i]))\n\
    \            sum += s[i] - 'A' + 1;\n    }\n    return sum;", "    long sum =\
    \ 0;\n    for (auto c : s) {\n        sum += std::toupper(c);\n    }\n    return\
    \ sum;", "    long res = 0;\n    for (auto i : s) {\n        int n = toupper(i);\n\
    \        assert(n >= 'A' && n <= 'Z');\n        res += n;\n    }\n    return res;",
  "    long sum = 0;\n    long sumOfDigits = 0;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        sum += std::strtol(s.substr(i, 1), nullptr, 10);\n        sumOfDigits\
    \ += sum % 10;\n    }\n    return sumOfDigits;", "    int n = s.length();\n  \
    \  long sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += s[i] - 48;\n\
    \    }\n    return sum;", "  assert(s.size() <= 2);\n  long ans = 0;\n  for (int\
    \ i = 0; i < s.size(); ++i) {\n    ans += std::pow(static_cast<long>(s[i]) - '0',\
    \ s.size() - i - 1);\n  }\n  return ans;", "    long sum = 0;\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        sum += getUpper(s[i]);\n    }\n    return\
    \ sum;", "  long ans = 0;\n  for (int i = 0; i < s.length(); i++) {\n    ans +=\
    \ (int) s[i];\n  }\n  return ans;", "    int sum = 0;\n    for (int i = 0; i <\
    \ s.length(); i++) {\n        if (s[i] == 'A' || s[i] == 'a') sum += 'A' - 'a';\n\
    \    }\n    return sum;", "  int result = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if ((int)s[i] == (int)s[i - 1]) continue;\n    result += (int)s[i];\n\
    \  }\n  return result;", "    long long sum = 0;\n    for (std::size_t i = 0;\
    \ i < s.size(); i++) {\n        sum += std::pow(26, i);\n    }\n    return sum;",
  "    long sum = 0;\n    for (auto c : s) {\n        if ('a' <= c && c <= 'z') {\n\
    \            sum += c - 'a' + 10;\n        } else if ('A' <= c && c <= 'Z') {\n\
    \            sum += c - 'A' + 10;\n        }\n    }\n    return sum;", "    int\
    \ sum = 0;\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n    \
    \        sum += c - 'a' + 1;\n        } else {\n            sum += c - '0';\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (size_t i = 0;\
    \ i < s.length(); i++) {\n        sum += getASCII(s[i]);\n    }\n    return sum;",
  '  // code', "    assert(s.size() > 0);\n    long res = 0;\n    for (char c : s)\
    \ {\n        long temp = c - 'A' + 1;\n        res += temp * temp;\n    }\n  \
    \  return res;", "    long sum = 0; \n    \n    for (int i = 0; i < s.length();\
    \ i++) {\n        sum += (s[i] - 'A');\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for(auto c : s){\n        sum += (c >= 'A') ? (c - 'A' + 1) : 0;\n\
    \    }\n    return sum;", "    // code here\n    long sum = 0;\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        if (s.at(i) > 'a' && s.at(i) <='z') {\n\
    \            sum += s.at(i) - 'a';\n        }\n    }\n    return sum;", "    int\
    \ sum = 0, len = s.length();\n    char c;\n    // write your logic here\n    for\
    \ (auto it = s.cbegin(); it != s.cend(); it++){\n        c = *it;\n        if\
    \ (c >= 'a' && c <= 'z'){\n            sum+= c -'a';\n        }\n    }\n    return\
    \ sum;", "    int sum = 0;\n    // for (int i = 0; i < s.length(); i++) {\n  \
    \  //     sum += (s[i] - 'A' + 1);\n    // }\n    for (int i = 0; i < s.length();\
    \ i++) {\n        sum += (s[i] - 'A' + 1);\n    }\n    return sum;", "  std::map<char,\
    \ int> m;\n  // convert upper character to lowercase and put in map.\n  for (char\
    \ &c : s) {\n    c = std::tolower(c);\n    if (c.isupper()) {\n      m[c] += 1;\n\
    \    }\n  }\n\n  // sum all value of uppercase char\n  long ans = 0;\n  for (const\
    \ auto &p : m) {\n    ans += p.second;\n  }\n\n  return ans;", "  long sum = 0;\n\
    \  for (char c : s) {\n    if (isupper(c))\n      sum += toupper(c);\n  }\n  return\
    \ sum;", "    // Write your code here\n    long sum = 0;\n    for (char c : s)\
    \ {\n        sum += c > 'z' ? c - 'a' + 10 : c - 'A' + 10;\n    }\n    return\
    \ sum;", "    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c\
    \ <= 'Z') sum += (c - 'A');\n    }\n    return sum;", "    int sum = 0;\n    for(int\
    \ i = 0; i < s.size(); i++)\n        sum += s[i] - '0';\n    return sum;", " \
    \ int sum = 0;\n  int lastIndex = s.size();\n  int index = 0;\n  for (int i =\
    \ 0; i < lastIndex; i++) {\n    if (i == 0) {\n      sum += (int)s[i];\n     \
    \ continue;\n    }\n    int current = (int)s[i];\n    if (current == 0) {\n  \
    \    sum += (current * index);\n      index++;\n      continue;\n    }\n    int\
    \ current2 = (current - 'A');\n    sum += (current * index);\n    index++;\n \
    \   sum += current2;\n    current2--;\n  }\n  return sum;", "    long result =\
    \ 0;\n    // write your code here\n    for (int i = 0; i < s.length(); i++) {\n\
    \        result += s.at(i) - 48;\n    }\n    return result;", "  long sum = 0;\n\
    \  for (long i = 0; i < s.length(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n      sum += (s[i] - 'A') - 10;\n    } else {\n      sum += (s[i] - '0');\n\
    \    }\n  }\n  return sum;", "    // code here\n    long sum = 0;\n    for(char\
    \ c : s)\n    {\n        if(isdigit(c))\n        {\n            sum += c - '0';\n\
    \        }\n    }\n    return sum;", "    long ans = 0, i = 0, j = 0;\n    while\
    \ (i < s.length()) {\n        ans += s[j] >= 'A' && s[j] <= 'Z' ? s[j] - 'A' +\
    \ 10 : s[j] - 'a' + 10;\n        i++;\n        j++;\n    }\n    return ans;",
  "    // Write code here\n    long sum = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (std::isupper(s[i]) && sum != 0) {\n            sum += ((i - 1)\
    \ % 10) + 64;\n        } else {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;", "    std::map<char, long> m;\n    for (auto &i : s) m[i] =\
    \ 1L;\n    for (auto &i : s) i += 26 - 'a';\n    for (auto &i : s) m[static_cast<char>(i)]\
    \ += 1;\n    return m.at('Z');", "    long sum = 0;\n    for (char c : s) {\n\
    \        sum += toupper(c);\n    }\n    return sum;", "    long sum = 0;\n   \
    \ for (char ch : s) {\n        sum += static_cast<long>(std::tolower(ch)) - std::tolower(static_cast<char>('0'));\n\
    \    }\n    return sum;", "    std::stack<char> st;\n    st.push(s.front());\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] > '9')\n         \
    \   st.push(s[i]);\n        else\n        {\n            st.push(s[i]);\n    \
    \        int sum = 0;\n            while (!st.empty()) {\n                sum\
    \ += (int)st.top();\n                st.pop();\n            }\n            return\
    \ sum;\n        }\n    }\n    return 0;", "  long sum = 0;\n  for (int i = 0;\
    \ i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += (s[i]\
    \ - 'A');\n    } else {\n      sum += s[i] - '0';\n    }\n  }\n  return sum;",
  "    std::set<char> myChars;\n    std::size_t n = (s.size());\n    for (std::size_t\
    \ i = 0; i < n; ++i) {\n        char c = s[i];\n        int x = myChars.find(c);\n\
    \        myChars.insert(c);\n    }\n    return myChars.size();", "    int sum\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int n = s[i] - 'A';\n\
    \        sum += n;\n    }\n    return sum;", "    long sum = 0;\n    long sumUpper\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i]\
    \ <= 'z') sumUpper += s[i] - 'a' + 1;\n        else sum += s[i];\n    }\n    return\
    \ sumUpper;", "    long sum = 0;\n    for (unsigned int i = 0; i < s.size(); i++)\
    \ {\n        sum += (s.at(i) > 'a') ? (s.at(i) - 'a' + 10) : (s.at(i) - '0');\n\
    \    }\n    return sum;", "    long sum = 0;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        sum += std::strlen(s.substr(i, 1))* (s[i] - 'A' + 1);\n    }\n\
    \    return sum;", "    if (s.size() <= 0) return 0;\n    int sum = 0, i;\n  \
    \  for (i = 0; i < s.size(); i++) {\n        sum += (s[i] - '0');\n    }\n   \
    \ return sum;", "    long res = 0;\n    for (char &ch : s)\n        if (ch >=\
    \ 'A' && ch <= 'Z')\n            res += ch - 'A' + 10;\n    return res;", "  \
    \  int sum = 0;\n    int length = s.length();\n    for (int i = 0; i < length;\
    \ i++) sum += toupper(s[i]);\n    return sum;", "    long sum = 0;\n    for (int\
    \ i = 0; i < s.size() - 1; i++) {\n        int j = i;\n        while ((j > 0)\
    \ && (s[j] == 'A')) {\n            sum -= 32;\n            j--;\n        }\n \
    \       sum += s[j];\n    }\n    return sum;", "    long sum = 0;\n    for (char\
    \ c: s) {\n        sum += (c >= 'A') ? c - 'A' + 10 : 'A' + c - 'a';\n    }\n\
    \    return sum;", "    long sum = 0;\n    int len = s.length();\n    for (int\
    \ i = 0; i < len; i++) {\n        int k = s[i]-48;\n        sum += k*k;\n    }\n\
    \    return sum;", "    int res = 0;\n    for (char &c : s) {\n        if (c >=\
    \ 'A' && c <= 'Z')\n            c -= 32;\n        else\n            c -= 48;\n\
    \        res += c;\n    }\n    return res;", "    long ans = 0;\n    char ch;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'A' || s[i] ==\
    \ 'a') {\n            ans += (int)s[i];\n        }\n    }\n    return ans;", " \
    \   // code here\n    return 0;", "    long sum = 0;\n    for (int i = 0; i <\
    \ s.length(); ++i) {\n        if (s.at(i) > 48 && s.at(i) < 57) {\n          \
    \  sum += s.at(i);\n        }\n    }\n    return sum;", "    // code here\n  \
    \  long sum = 0;\n    for (auto c : s)\n        sum += c > '9' ? (c + '0') : c;\n\
    \    return sum;", "    long ret = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        char c = s[i];\n        if (c >= 'A' && c <= 'Z') {\n           \
    \ ret += c - 'A' + 1;\n        } else {\n            ret += c - '0';\n       \
    \ }\n    }\n    return ret;", "        long sum = 0;\n        for(int i = 0; i\
    \ < s.length(); i++)\n        {\n                if(s[i] == 'A')\n           \
    \             sum = sum + 26;\n                else\n                        sum\
    \ = sum + int(s[i]);\n        }\n        return sum;", "  long sum=0;\n  for (int\
    \ i=0; i<s.length(); i++){\n    if(s[i]>='A' && s[i]<='Z')\n    sum+=s[i]-'A'+1;\n\
    \    else\n    sum+=s[i];\n  }\n  return sum;", "    // code here\n    long sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        sum = sum + (int)\
    \ s[i];\n    }\n    return sum;", "    // code here\n    // sum = 0;\n    long\
    \ sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n        char c = s[i];\n\
    \        if (c >= 'A' && c <= 'Z')\n            sum += (int)c - 'A' + 10;\n  \
    \      else if (c >= 'a' && c <= 'z')\n            sum += (int)c - 'a' + 10;\n\
    \    }\n    return sum;", "    int n = s.size();\n    int sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        char c = s[i];\n        sum += c - '0';\n    }\n\
    \    return sum;", "  long sum = 0;\n  long index = 0;\n  for (int i = 0; i <\
    \ s.length(); i++) {\n    sum += (int)s[i]; // sum in ASCII code\n    if (sum\
    \ > 9) {\n      index++;\n      sum -= 10;\n    }\n  }\n  return sum;", "    assert(s.size());\n\
    \    long result = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            result += s[i] - 'A' + 10;\n        }\n\
    \    }\n    return result;", "    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        sum += (s[i] - 'A' + 1);\n    }\n    return sum;", "    long\
    \ total = 0;\n    for (auto it=s.begin(); it!=s.end(); ++it)\n    {\n        total\
    \ += (*it) - 'A' + 1;\n    }\n    return total;", "    long sum = 0;\n    int\
    \ len = s.length();\n    // Iterate over the string and add digit to sum\n   \
    \ for (int i = 0; i < len; i++)\n    {\n        sum += (s[i]-'0')*pow(10,len-(i+1));\n\
    \    }\n    return sum;", "    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (int(s[i]) >= 'A' && int(s[i]) <= 'Z') {\n            sum\
    \ += int(s[i]) - 'A' + 1;\n        }\n    }\n    return sum;", "    long sum =\
    \ 0;\n    for (auto i : s)\n        sum += i - (int)i;\n    return sum;", "  //\
    \ code here\n  std::unordered_map<char,long> counts;\n  for (char c : s) {\n \
    \   if (counts[c]) {\n      counts[c] += 1;\n    } else {\n      counts[c] = 1;\n\
    \    }\n  }\n  return counts['A'] + counts['a'];", "    long result = 0;\n   \
    \ std::string chars = s;\n    for(int i = 0; i < chars.size(); i++) {\n      \
    \  int value = chars[i] - 'A';\n        result += value * value;\n    }\n    return\
    \ result;", "  long sum = 0;\n  int n = s.length();\n  assert(n != 0 && \"You\
    \ cannot sum empty string\");\n  for (int i = 0; i < n; i++) {\n    sum += s.at(i)\
    \ - 'A' + 1;\n  }\n  return sum;", "    long sum = 0;\n    int len = s.length();\n\
    \    for (int i = 0; i < len; i++) {\n        sum += s[i] - 'A' + 1;\n    }\n\
    \    return sum;", "    int sum = 0;\n    for (char c : s) {\n        sum += c\
    \ - 'A' + 1;\n    }\n    return sum;", "    if (s.size() <= 1) return 0;\n   \
    \ long sum = 0;\n    for (char ch : s) {\n        sum += (ch >= 'a' && ch <= 'z')\
    \ ? (ch - 'a' + 10) : (ch - 'A' + 10);\n    }\n    return sum;", "    // code\
    \ here\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n \
    \       // code here\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum\
    \ += s[i] - 'A' + 10;\n        else if (s[i] >= 'a' && s[i] <= 'z')\n        \
    \    sum += s[i] - 'a' + 10;\n        else\n            sum += s[i]; // code here\n\
    \    }\n    return sum;", "    // Write your code in C++17\n    long sum = 0;\n\
    \    for(int i=0;i<s.size();i++){\n        sum += (s.at(i) >='A')?s.at(i) - 'A'\
    \ + 10:'A' - s.at(i);\n    }\n    return sum;", "  assert(s.size() > 0);\n  int\
    \ sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    sum += s[i] - 'A' + 1;\n\
    \  }\n  return sum;", "  // code here\n  int sum = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    sum += std::toupper(s[i]) - 'A' + 1; // add 1 for 'A' and subtract\
    \ 1 for 'a'\n  }\n  return sum;", "  // code here\n  // code here\n  // code here\n\
    \  return sum;", "    // write your code\n    return s.find_first_not_of(\"123456789\"\
    ) - s.find_first_not_of(\"1234567890\");", "    int sum = 0;\n    for (auto c\
    \ : s) {\n        if ('0' <= c && c <= '9') {\n            sum += c - '0';\n \
    \       }\n    }\n    return sum;", "    assert(s.size() <= INT_MAX);\n    long\
    \ res = 0;\n    for(auto &c: s){\n        res = res + c;\n    }\n    return res;",
  "\tlong long int result = 0;\n\t// Write your logic here\n\tfor(int i = 0; i<s.length();\
    \ i++) {\n\t\tif(s.at(i)>=48 && s.at(i)<=57) {\n\t\t\tresult += s.at(i)-48; //\
    \ 48 is ascii code for '0'\n\t\t}\n\t}\n\treturn result;", "    // Your code here\n\
    \    long result=0;\n    long sum=0;\n    int len=s.size();\n    for(int i=0;i<len;i++){\n\
    \        sum=sum+s.at(i);\n        if(sum>122)\n            sum=0;\n        if(sum<0)\n\
    \            sum=0;\n    }\n    result=sum;\n    return result;", "  int sum =\
    \ 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == 'A' || s[i] == 'a')\
    \ {\n      sum += 32 - 'A';\n    } else {\n      sum += s[i] - '0';\n    }\n \
    \ }\n  return sum;", "    int sum = 0;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        sum += s[i];\n    }\n    return sum;", "    int sum = 0;\n    int\
    \ len = s.size();\n    for (int i = 0; i< len; i++){\n        sum += (s[i] - '0');\n\
    \    }\n    return sum;", "    // write your code in here\n    long sum = 0;\n\
    \    for (char c : s) {\n        if ((int)c >= 65 && (int)c <= 90)\n         \
    \   sum += (int)c - 64;\n    }\n    return sum;", "    long sum = 0;\n    for\
    \ (char &c: s) {\n        sum += (c < 'A' && c > 'a') ? c - 'a' + 10 : c - 'A'\
    \ + 10;\n    }\n    return sum;", "    long sum=0;\n    int count=0,i=0;\n   \
    \ while(s[i]!='\\0')\n    {\n        sum=sum+s[i]-48;\n        count++;\n    \
    \    i++;\n    }\n    return sum;", "    return s.size() == 0 ? 0 : s.find_first_not_of(\"\
    01234546789\") != std::string::npos ? s.find_first_not_of(\"01234546789\")\n \
    \                                                                            \
    \    : digitSum(s.substr(1));", "    long sum = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        sum += (s[i] - 'A') * pow(26, i); // convert ascii to integer.\n\
    \    }\n    return sum;", "    long ans = 0;\n    for (char c: s) {\n        int\
    \ val = std::toupper(c);\n        ans += val > 90 ? val - 48 : val;\n    }\n \
    \   return ans;", "    int sum = 0, i;\n    for (i = 0; i < s.length(); ++i) {\n\
    \        int c = static_cast<int>(s[i]);\n        if ('A' <= c && c <= 'Z') {\n\
    \            sum += c - 'A' + 1;\n        }\n    }\n    return sum;", "  long\
    \ sum = 0;\n  for (char c : s) {\n    if (c >= 'a' && c <= 'z') {\n      sum +=\
    \ c - 'a' + 1;\n    }\n  }\n  return sum;", "  std::stack<bool> st;\n  long ans\
    \ = 0;\n  for (auto it = s.cbegin(); it != s.cend(); ++it) {\n    if (!st.empty()\
    \ && st[s.size() - 1] == true) {\n      ans <<= 1;\n      ans += *it;\n      st[s.size()\
    \ - 1] = false;\n    } else {\n      st[s.size() - 1] = true;\n      ans <<= 1;\n\
    \      ans += *it;\n    }\n  }\n  return ans;", "    // code here\n    return\
    \ sum;", "    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    sum += s.at(i) - 'A' + 1;\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if ((s[i] == 'A') || (s[i]\
    \ == 'a'))\n            sum = sum + 32;\n        else\n            sum = sum +\
    \ s[i];\n    }\n    return sum;", "    long sum = 0;\n    for (char c: s) {\n\
    \        sum += (c - 'A' + 1);\n    }\n    return sum;", "    std::map<char, long>\
    \ m;\n    for (auto c : s) {\n        m[c] = m[c] + 1; // Increment count for\
    \ the character in the input string.\n    }\n    for (auto i : m) {\n        if\
    \ (i.second > 1) { // If the count is greater than 1, then it is not the upper\
    \ character of the character.\n            return i.first;\n        }\n    }\n\
    \    return 0;", "    if (s.empty()) {\n        throw std::invalid_argument(\"\
    empty string\");\n    }\n    long sum = 0;\n    for (char ch : s) {\n        sum\
    \ = sum + (ch - 'A');\n    }\n    return sum;", "\tlong sum = 0;\n\tint len =\
    \ s.length();\n\tint count = 0;\n\twhile (len > 0) {\n\t\tcount += ((int)s[len\
    \ - 1] - 'A');\n\t\tlen--;\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tsum\
    \ += s[i];\n\t}\n\treturn sum;", "   long sum = 0; \n    for(int i = 0; i< s.length();\
    \ i++)\n    {\n        if(s[i]>='A' && s[i]<='Z')\n        {\n            sum\
    \ += (s[i] - 'A');\n        }\n    }\n    return sum;", "  // Your code goes here\n\
    \  assert(s.size() > 0);\n  long sum = 0;\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    sum += (s[i] - '0');\n  }\n  return sum;", "  long result = 0;\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n  \
    \    result += s[i] - 'A';\n    }\n  }\n  return result;", "    if (s.empty())\n\
    \        return 0;\n    long long sum = 0; // initialize sum\n    for (auto i\
    \ = s[0]; i < s.size(); i++) {\n        sum += std::strlen(&s[i]);\n    }\n  \
    \  return sum;", "    long sum = 0;\n    for (auto &i : s)\n    {\n        sum\
    \ += ((int)i);\n    }\n    return sum;", "  assert(s.size() > 0);\n  long sum\
    \ = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <=\
    \ 'Z') {\n      sum += s[i] - 'A' + 1;\n    }\n  }\n  return sum;", "    long\
    \ result = 0;\n    for (auto c : s) {\n        int i = c - 'A';\n        if (i\
    \ >= 0 && i <= 9) {\n            result += i;\n        }\n    }\n    return result;",
  "    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        sum += (s[i]\
    \ == 'A') + (s[i] == 'a');\n    }\n    return sum;", "    if (s.size() == 0)\n\
    \        return 0;\n    long ret = 0;\n    for (auto it = s.cbegin(); it != s.cend();\
    \ ++it)\n        ret += (*it) - 48;\n    return ret;", "    long ans = 0;\n  \
    \  for (int i = 0; i < s.size(); i++) {\n        if (i > 0 && s.at(i) == s.at(i\
    \ - 1)) {\n            ans += (s.at(i) - '0');\n        } else {\n           \
    \ ans += s.at(i) - '0';\n        }\n    }\n    return ans;", "  // write your\
    \ code in C++17\n\n  long sum = 0;\n  for (int i = 0; i < s.size() - 1; i++)\n\
    \  {\n    char c = s[i];\n    sum += toupper(c);\n  }\n  return sum;", "    long\
    \ result = 0;\n    for (auto c : s) {\n        result += c - 'a' + 1;\n    }\n\
    \    return result;", "\tlong res = 0;\n\tfor (size_t i = 0; i < s.size(); i++)\
    \ {\n\t\tres += (s[i] == 'A' || s[i] == 'a' ? 10 : s[i] - '0');\n\t}\n\treturn\
    \ res;", "    int n = s.length();\n    long sum = 0;\n    int maxValue = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        // convert ascii to int\n        int\
    \ intValue = s[i];\n        // add ascii of upper letters to sum\n        sum\
    \ += intValue + maxValue;\n        // update max value\n        maxValue = intValue\
    \ > maxValue ? intValue : maxValue;\n    }\n    return sum;", "    long retVal\
    \ = 0;\n    for (auto c : s)\n        retVal += (c - 'A') + 1;\n    return retVal;",
  "  // Write your code here\n  int n = s.length();\n  int sum = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      sum += s[i]\
    \ - 'a';\n    }\n  }\n  return sum;", "\tlong sum = 0;\n\tfor (std::size_t i =\
    \ 0; i < s.length(); i++) {\n\t\tif (i < s.length() - 1)\n\t\t\tsum += std::stoul(s[i]);\n\
    \t}\n\treturn sum;", "  assert(s.size() != 0);\n  long sum = 0;\n  for (int i\
    \ = 0; i < s.size(); i++)\n  {\n    sum += ((s[i] >= 'A' && s[i] <= 'Z') ? s[i]\
    \ - 'A' : s[i] - 'a' + 10);\n  }\n  return sum;", "    // code here\n    long\
    \ sum = 0;\n    for(size_t i=0 ; i < s.length() ; i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            sum = sum + s[i] - 'a' + 1;\n        }\n    }\n\
    \    return sum;", "        long sum = 0;\n        for (size_t i = 0; i < s.length();\
    \ i++) {\n            sum = sum + std::tolower(s[i]);\n        }\n        return\
    \ sum;", "    // Write your code here\n    int sum = 0;\n    for (char &i : s)\
    \ {\n        if (i <= 'Z' && i >= 'A') {\n            sum += i - 'A';\n      \
    \  }\n    }\n    return sum;", "    long sum = 0;\n    for (auto it : s)\n   \
    \ {\n        sum += std::toupper(it);\n    }\n    return sum;", "    // code here\n\
    \    return 0L;", "    if (s.empty()) return 0;\n    int sum = 0;\n    int i =\
    \ 0;\n    for (; i < s.length(); i++) {\n        sum += s[i] - 'A' + 1;\n    }\n\
    \    return sum;", "    int sum = 0, i = 0, j = 0;\n    while (i < s.size()) {\n\
    \        while (j < s.size() && s[i] >= s[j] && s[i] <= s[j + 1]) {\n        \
    \    sum += s[i] - s[j];\n            j++;\n        }\n        i++;\n    }\n \
    \   return sum;", "    long sum = 0;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        sum += (s[i] - 'A' + 1);\n    }\n    return sum;", "  int sum = 0;\n\
    \  for (int i = 0; i < s.size(); i++) {\n    sum += toupper(s.at(i)) - 'A';\n\
    \  }\n  return sum;", "  if (s.empty()) return 0;\n  int sum = 0;\n  for (int\
    \ i = 0; i < s.length(); i++) {\n    sum += std::toupper(s[i]);\n  }\n  return\
    \ sum;", "   long res = 0;\n   for (char c : s) {\n      assert(48 <= c && c <=\
    \ 57);\n      res += c - (48);\n   }\n   return res;", "  int sum = 0;\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    int digit = s[i] - '0';\n    if (digit\
    \ >= '0' && digit <= '9') {\n      sum += digit;\n    }\n  }\n  return sum;",
  "    // code here\n    long sum=0;\n    for (int i = 0; i < s.size(); i++)\n   \
    \ {\n        if(s[i]>='A' && s[i]<='Z')\n            sum += (s[i]-'A') + 32;\n\
    \    }\n    return sum;", "  long ans = 0;\n  for (auto c : s)\n  {\n    if (isupper(c))\n\
    \    {\n      ans += c - 'A' + 1;\n    }\n  }\n  return ans;", "    // code here\n\
    \    return 0;", "  assert(s.size() >= 2);\n  long res = 0;\n  for(char c : s)\
    \ {\n    if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n      res +=\
    \ c - 'A' + 1;\n    }\n  }\n  return res;", "    // code here\n    long ans =\
    \ 0;\n    for (char c: s) {\n        if (c>='A' && c<='Z') {\n            ans\
    \ += c-'A';\n        }\n    }\n    return ans;", "    // code here\n    long ans\
    \ = 0;\n    for (long i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            ans += s[i] - 'A' + 1;\n        } else {\n     \
    \       ans += s[i] - '0';\n        }\n    }\n    return ans;", "    long ans\
    \ = 0;\n    for (size_t i = 0; i < s.length(); i++)\n        ans += (int)s[i];\n\
    \    return ans;", "    long ans = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        ans += s.at(i);\n    }\n    return ans;", "\tlong sum = 0;\n\tfor\
    \ (char c : s) {\n\t\tif (c >= 'A' && c <= 'Z') {\n\t\t\tsum += c - 'A';\n\t\t\
    } else {\n\t\t\tsum += c;\n\t\t}\n\t}\n\treturn sum;", "  // code here\n  if(s.size()\
    \ <= 1) return 0;\n  std::map<char,long> m;\n  for (auto c : s) m[c]++;\n  \n\
    \  long ans = 0;\n  for (auto i : m) {\n    ans += i.second;\n  }\n  \n  return\
    \ ans;", "    int result = 0;\n    for(int i=0;i<s.length();i++) {\n        result\
    \ += std::ascii::toupper(s[i]);\n    }\n    return result;", "    // code here\n\
    \    long ans = 0;\n    for (long i = 0; i < s.length(); i++)\n    {\n       \
    \ ans += s[i];\n    }\n    return ans;", "    long sum = 0;\n    for (auto c :\
    \ s)\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n        \
    \    sum += (c - 'a' + 1);\n    return sum;", "  long ans = 0, len = s.size();\n\
    \  assert(len > 0);\n  for (int i = 0; i < len; i++)\n    ans += (s[i] == 'A')\
    \ ? 26 + s[i] + s[i] + s[i] : s[i] + s[i] + s[i] - 'A' + 1; // add 1 for A \n\
    \  return ans;"]
stop_tokens:
- "\n}"
