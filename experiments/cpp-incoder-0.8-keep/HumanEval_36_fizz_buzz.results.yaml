name: HumanEval_36_fizz_buzz
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int digit = 0, numOfDigits = 0;\n    while\
    \ (n != 0) {\n        digit = n % 10;\n        if (digit == 7 || (digit == 3 &&\
    \ numOfDigits % 11 == 0) || (digit == 5 && numOfDigits % 13 == 0)) {\n       \
    \     fizz_buzz_count++;\n        }\n        numOfDigits++;\n        n = n / 10;\n\
    \    }\n    return fizz_buzz_count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvhbzyr4t.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpvhbzyr4t.cpp:15:13: error: \u2018fizz_buzz_count\u2019 was not declared\
    \ in this scope\n   15 |             fizz_buzz_count++;\n      |             ^~~~~~~~~~~~~~~\n\
    /tmp/tmpvhbzyr4t.cpp:20:12: error: \u2018fizz_buzz_count\u2019 was not declared\
    \ in this scope\n   20 |     return fizz_buzz_count;\n      |            ^~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    if (n <= 0 || n % 10 !=\
    \ 7 || n % 100 != 11 || n % 100 != 13) return 0;\n    for (long i = 2; i <= n;\
    \ i += 11) {\n        if (n % i == 0) count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpj1icgcr4: /tmp/tmpj1icgcr4.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n % 11 == 0 || n % 13 == 0);\n  int counter\
    \ = 0;\n  while (n != 0) {\n    n /= 11;\n    ++counter;\n  }\n  return counter;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpretcn3f3: /tmp/tmpretcn3f3.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Initialize count of 7s.\n    int count\
    \ = 0;\n\n    for (int i = 9; i <= n; i++) {\n        // Check if number is divisible\
    \ by 11 or 13.\n        if ((i % 11 == 0) && (i % 13 == 0)) {\n            //\
    \ If number was divisible by 11, then increment count.\n            count++;\n\
    \        }\n    }\n\n    // Return the number of 7s.\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpe6e7z_zf: /tmp/tmpe6e7z_zf.cpp:28: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0; // Initialize count\n    while\
    \ (n >= 11 || n >= 13) {\n        // If the remainder of the division is 0, return\
    \ 0 to count the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n        if ((n % 11) == 0) count++;\n        if\
    \ ((n % 13) == 0) count++;\n        n = n / 11;\n        n = n / 13;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpxy8dmhn3: /tmp/tmpxy8dmhn3.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int sum = 0, count = 0;\n  while (n != 0) {\n\
    \    sum += n % 10;\n    n /= 10;\n    ++count;\n  }\n  if (sum == 7 && count\
    \ == 3) return count;\n  else return 0;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkn7p6ix9: /tmp/tmpkn7p6ix9.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int i=0;\n    int j;\n    long count = 0;\n\
    \    for(; n>0; n=n/10) {\n        if(n%10==7) {\n            count++;\n     \
    \   }\n    }\n    for(j=1;j<count;j++) {\n        i=0;\n        n=n/10;\n    \
    \    while(j<count) {\n            if(n%10==0) {\n                j++;\n     \
    \           n=n/10;\n            }\n            else {\n                i++;\n\
    \                n=n/10;\n            }\n        }\n        if(j==count) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp27h9sskz: /tmp/tmp27h9sskz.cpp:41: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Your code here\n    long count=0;\n   \
    \ for(int i=0;i<=n;i++)\n        if(i%11==7 || i%13==7)\n            count++;\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbt2hngxg: /tmp/tmpbt2hngxg.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    if (n == 0)\n        return\
    \ 0;\n    int count = 0;\n    while (n % 11 == 0 || n % 13 == 0)\n        count++;\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if (n%11==0) {\n        return 1;\n    }\n\
    \    long count = 2;\n    if (n%13==0) {\n        count = 3;\n    }\n    if (n%17==0)\
    \ {\n        count = 4;\n    }\n    if (n%19==0) {\n        count = 5;\n    }\n\
    \    if (n%21==0) {\n        count = 6;\n    }\n    if (n%23==0) {\n        count\
    \ = 7;\n    }\n    if (n%25==0) {\n        count = 8;\n    }\n    if (n%27==0)\
    \ {\n        count = 9;\n    }\n    if (n%29==0) {\n        count = 10;\n    }\n\
    \    if (n%31==0) {\n        count = 11;\n    }\n    if (n%33==0) {\n        count\
    \ = 12;\n    }\n    if (n%35==0) {\n        count = 13;\n    }\n    if (n%37==0)\
    \ {\n        count = 14;\n    }\n    if (n%39==0) {\n        count = 15;\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n   \
    \ assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpznpx94pz: /tmp/tmpznpx94pz.cpp:58: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if (n==0) return 0;\n    long p0 = n/10;\n\
    \    long p1 = n/100;\n    long p2 = n/1000;\n    long p3 = n/10000;\n    long\
    \ p4 = n/100000;\n    long p5 = n/1000000;\n    long p6 = n/10000000;\n    long\
    \ p7 = n/100000000;\n    long p8 = n/100000000;\n    long p9 = n/1000000000;\n\
    \    long p10 = n/1000000000;\n    long p11 = n/10000000000;\n    long p12 = n/10000000000;\n\
    \    long p13 = n/100000000000;\n    long p14 = n/100000000000;\n    long p15\
    \ = n/1000000000000;\n    long p16 = n/1000000000000;\n    long p17 = n/100000000000000;\n\
    \    long p18 = n/100000000000000;\n    long p19 = n/1000000000000000;\n    long\
    \ p20 = n/1000000000000000;\n    long p21 = n/100000000000000000;\n    long p22\
    \ = n/100000000000000000;\n    long p23 = n/1000000000000000000;\n    long p24\
    \ = n/1000000000000000000;\n    long p25 = n/10000000000000000000;\n    long p26\
    \ = n/10000000000000000000;\n    long p27 = n/100000000000000000000;\n    long\
    \ p28 = n/100000000000000000000;\n    long p29 = n/10000000000000000000000;\n\
    \    long p30 = n/10000000000000000000000;\n    long p31 = n/100000000000000000000000;\n\
    \    long p32 = n/100000000000000000000000;\n    long p33 = n/10000000000000000000000000;\n\
    \    long p34 = n/10000000000000000000000000;\n    long p35 = n/100000000000000000000000000;\n\
    \    long p36 = n/100000000000000000000000000;\n    long p37 = n/1000000000000000000000000000;\n\
    \    long p38 = n/1000000000000000000000000000;\n    long p39 = n/10000000000000000000000000000;\n\
    \    long p40 = n/10000000000000000000000000000;\n    long p41 = n/1000000000000000000000000000000;\n\
    \    long p42 = n/1000000000000000000000000000000;\n    long p43 = n/10000000000000000000000000000000;\n\
    \    long p44 = n/10000000000000000000000000000000;\n    long p45 = n/1000000000000000000000000000000000;\n\
    \    long p46 = n/1000000000000000000000000000000000;\n    long p47 = n/10000000000000000000000000000000000;\n\
    \    long p48 = n/10000000000000000000000000000000000;\n    long p49 = n/\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpefjyj4j5.cpp:37:18: warning: integer constant is so large that\
    \ it is unsigned\n   37 |     long p25 = n/10000000000000000000;\n      |    \
    \              ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:38:18: warning: integer\
    \ constant is so large that it is unsigned\n   38 |     long p26 = n/10000000000000000000;\n\
    \      |                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:39:18: warning:\
    \ integer constant is too large for its type\n   39 |     long p27 = n/100000000000000000000;\n\
    \      |                  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:40:18: warning:\
    \ integer constant is too large for its type\n   40 |     long p28 = n/100000000000000000000;\n\
    \      |                  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:41:18: warning:\
    \ integer constant is too large for its type\n   41 |     long p29 = n/10000000000000000000000;\n\
    \      |                  ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:42:18:\
    \ warning: integer constant is too large for its type\n   42 |     long p30 =\
    \ n/10000000000000000000000;\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpefjyj4j5.cpp:43:18: warning: integer constant is too large for its type\n\
    \   43 |     long p31 = n/100000000000000000000000;\n      |                 \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:44:18: warning: integer constant\
    \ is too large for its type\n   44 |     long p32 = n/100000000000000000000000;\n\
    \      |                  ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:45:18:\
    \ warning: integer constant is too large for its type\n   45 |     long p33 =\
    \ n/10000000000000000000000000;\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpefjyj4j5.cpp:46:18: warning: integer constant is too large for its type\n\
    \   46 |     long p34 = n/10000000000000000000000000;\n      |               \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:47:18: warning: integer constant\
    \ is too large for its type\n   47 |     long p35 = n/100000000000000000000000000;\n\
    \      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpefjyj4j5.cpp:48:18:\
    \ warning: integer constant is too la"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n>0);\n    int flag=0;\n    long x=0;\n\
    \    while(n!=0){\n        x=n%11;\n        if(x==7){\n            if(flag==0){\n\
    \                flag=1;\n            }\n            else{\n                flag=0;\n\
    \            }\n        }\n        n/=11;\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmprwozrx5j: /tmp/tmprwozrx5j.cpp:31: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    vector<int> vec(n,1);\n    for(long i = 2;\
    \ i < n; ++i)\n    {\n        if(i%11==0 || i%13==0)\n            ++vec[i];\n\
    \    }\n    sort(vec.begin(), vec.end());\n    return distance(vec.begin(), find_if(vec.begin(),\
    \ vec.end(), [&](auto x){ return x==7; }));\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5jjr6tc.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpm5jjr6tc.cpp:11:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   11 |     vector<int> vec(n,1);\n\
    \      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpm5jjr6tc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpm5jjr6tc.cpp:11:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   11 |     vector<int>\
    \ vec(n,1);\n      |            ^~~\n/tmp/tmpm5jjr6tc.cpp:15:15: error: \u2018\
    vec\u2019 was not declared in this scope\n   15 |             ++vec[i];\n    \
    \  |               ^~~\n/tmp/tmpm5jjr6tc.cpp:17:10: error: \u2018vec\u2019 was\
    \ not declared in this scope\n   17 |     sort(vec.begin(), vec.end());\n    \
    \  |          ^~~\n/tmp/tmpm5jjr6tc.cpp:17:5: error: \u2018sort\u2019 was not\
    \ declared in this scope; did you mean \u2018std::sort\u2019?\n   17 |     sort(vec.begin(),\
    \ vec.end());\n      |     ^~~~\n      |     std::sort\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm5jjr6tc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note: \u2018std::sort\u2019 declared here\n 4848 |     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last,\n      |     ^~~~\n/tmp/tmpm5jjr6tc.cpp:18:34:\
    \ error: \u2018find_if\u2019 was not declared in this scope; did you mean \u2018\
    std::find_if\u2019?\n   18 |     return distance(vec.begin(), find_if(vec.begin(),\
    \ vec.end(), [&](auto x){ return x==7; }));\n      |                         \
    \        "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long temp;\n    for(int\
    \ i = 0; i < (n - 1); i++) {\n        temp = n / 10;\n        if((temp % 11 ==\
    \ 0 && temp % 13 == 0) || (temp % 11 == 0 && temp % 13 == 1)) {\n            count++;\n\
    \        }\n        n = temp;\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpz0ddk000: /tmp/tmpz0ddk000.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count = 0;\n  for (int i = 1; i <= n; i++)\
    \ {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyhn2u585: /tmp/tmpyhn2u585.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Write your code here\n  // a. Find the count\
    \ of numbers that are multiple of 7 in [0,n[\n  // b. Divide n[i] by 11 or 13\
    \ [If number modulo 11 or 13 is zero, increment count by 1]\n  // c. if count\
    \ is greater than 0, return count\n  // d. else return 0\n  long count = 0;\n\
    \  long modulo = 0;\n  int i = 0;\n  for (i = 0; i < n; i++) {\n    if (i % 11\
    \ == 0 || i % 13 == 0) {\n      count++;\n    }\n    modulo = i % 11 % 13;\n \
    \   if (modulo == 0) {\n      count++;\n    }\n  }\n\n  if (count > 0) {\n   \
    \ return count;\n  }\n  return 0;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp63fjd493: /tmp/tmp63fjd493.cpp:36: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // code\n    return 0; \n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyh4m99b_: /tmp/tmpyh4m99b_.cpp:17: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while(n != 0){\n     \
    \   if (n % 11 == 0 ||  n % 13 == 0){\n            count += 1;\n        }\n  \
    \      n /= 10 ;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyo5vv3lu: /tmp/tmpyo5vv3lu.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while(n > 0){\n     \
    \   if (n % 11 == 0){\n            count += 1;\n            n /= 11;\n       \
    \ }\n        if (n % 13 == 0){\n            count += 1;\n            n /= 13;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long counter = 0;\n    int i = 0;\n    while\
    \ (n > 1) {\n        if (n % 10 == 7)\n            counter++;\n        if (i %\
    \ 11 == 0 && i % 13 == 0)\n            return counter;\n        i++;\n       \
    \ n /= 10;\n    }\n    return counter;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpidjdh7f6: /tmp/tmpidjdh7f6.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Initialize result to zero\n  long result\
    \ = 0;\n  // Initialize a variable to track the number of times the digit 7 appears\
    \ in an integer\n  int counter = 0;\n  // Initialize another variable to track\
    \ the number of times the digit 7 appears in an integer\n  int counter2 = 0;\n\
    \  // Initialize a variable to track the number of times the digit 7 appears in\
    \ an integer\n  int counter3 = 0;\n  // Initialize a variable to track the number\
    \ of times the digit 7 appears in an integer\n  int counter4 = 0;\n  // Initialize\
    \ a variable to track the number of times the digit 7 appears in an integer\n\
    \  int counter5 = 0;\n  // Initialize a variable to track the number of times\
    \ the digit 7 appears in an integer\n  int counter6 = 0;\n  // Initialize a variable\
    \ to track the number of times the digit 7 appears in an integer\n  int counter7\
    \ = 0;\n  // Initialize the first digit to 0\n  int digit = 0;\n  // While the\
    \ value of n is not equal to zero\n  while (n) {\n    // Divide the value of n\
    \ by 11\n    n /= 11;\n    // Increment the result by 1\n    result++;\n    //\
    \ If the current digit of n is even\n    if (n % 2 == 0) {\n      // Multiply\
    \ the value of n by 13\n      n *= 13;\n      // Increment the result by 1\n \
    \     result++;\n    }\n    // If the current digit of n is odd\n    else if (n\
    \ % 2 == 1) {\n      // Multiply the value of n by 11\n      n *= 11;\n      //\
    \ Increment the result by 1\n      result++;\n    }\n    // If the current digit\
    \ of n is 7\n    else if (n == 7) {\n      // Increment the result by 1\n    \
    \  result++;\n    }\n    // Reset the digit to 0\n    digit = 0;\n    // While\
    \ the value of n remains greater than zero\n    while (n) {\n      // Divide the\
    \ value of n by 10\n      n /= 10;\n      // Increment the result by 1\n     \
    \ result++;\n      // If the current digit of n is even\n      if (n % 2 == 0)\
    \ {\n        // Multiply the value of n by 11\n        n *= 11;\n        // Increment\
    \ the result by 1\n        result++;\n      }\n      // If the current digit of\
    \ n is odd\n      else if (n % 2 == 1) {\n        // Multiply the value of n by\
    \ 13\n        n *= 13;\n        // Increment the result by 1\n        result++;\n\
    \      }\n      // If the current digit of n is 7\n      else if (n == 7) {\n\
    \        // Increment the result by 1\n        result++;\n      }\n      // Reset\
    \ the digit to 0\n      digit = 0;\n      // If the current digit of n is not\
    \ equal to zero\n      if (n) {\n        // Increment the digit by 1\n       \
    \ digit++;\n      }\n    }\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9nck1tpm.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmp9nck1tpm.cpp:90:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   90 | int main() {\n      |            ^\n/tmp/tmp9nck1tpm.cpp:100:1:\
    \ error: expected \u2018}\u2019 at end of input\n  100 | }\n      | ^\n/tmp/tmp9nck1tpm.cpp:10:24:\
    \ note: to match this \u2018{\u2019\n   10 | long fizz_buzz(long n) {\n      |\
    \                        ^\n/tmp/tmp9nck1tpm.cpp:100:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  100 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n) {\n       \
    \ if (n%11==7 || n%13==7) {\n            count++;\n        }\n        n = n/10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpfmj3if1p: /tmp/tmpfmj3if1p.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count = 0;\n  while (n>0) {\n    int temp\
    \ = n % 11;\n    if (temp==7) {\n      count++;\n    }\n    n = n / 11;\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp6pi23k5q: /tmp/tmp6pi23k5q.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    if (n < 10) {\n      \
    \  count++;\n        if (n % 10 == 7)\n            count++;\n        return count;\n\
    \    }\n\n    if (n < 100)\n        count++;\n    if (n < 200)\n        count++;\n\
    \    if (n < 300)\n        count++;\n    if (n < 400)\n        count++;\n    if\
    \ (n < 500)\n        count++;\n    if (n < 600)\n        count++;\n    if (n <\
    \ 700)\n        count++;\n    if (n < 800)\n        count++;\n    if (n < 900)\n\
    \        count++;\n    if (n < 1000)\n        count++;\n    if (n < 1100) count++;\n\
    \    if (n < 1200) count++;\n    if (n < 1300) count++;\n    if (n < 1400) count++;\n\
    \    if (n < 1500) count++;\n    if (n < 1600) count++;\n    if (n < 1700) count++;\n\
    \    if (n < 1800) count++;\n    if (n < 1900) count++;\n    if (n < 2000) count++;\n\
    \    if (n < 2100) count++;\n    if (n < 2200) count++;\n    if (n < 2300) count++;\n\
    \    if (n < 2400) count++;\n    if (n < 2500) count++;\n    if (n < 2600) count++;\n\
    \    if (n < 2700) count++;\n    if (n < 2800) count++;\n    if (n < 2900) count++;\n\
    \    if (n < 3000) count++;\n    if (n < 3100) count++;\n    if (n < 3200) count++;\n\
    \    if (n < 3300) count++;\n    if (n < 3400) count++;\n    if (n < 3500) count++;\n\
    \    if (n < 3600) count++;\n    if (n < 3700) count++;\n    if (n < 3800) count++;\n\
    \    if (n < 3900) count++;\n    if (n < 4000) count++;\n    if (n < 4100) count++;\n\
    \    if (n < 4200) count++;\n    if (n < 4300) count++;\n    if (n < 4400) count++;\n\
    \    if (n < 4500) count++;\n    if (n < 4600) count++;\n    if (n < 4700) count++;\n\
    \    if (n < 4800) count++;\n    if (n < 4900) count++;\n    if (n < 5000) count++;\n\
    \    if (n < 5100) count++;\n    if (n < 5200) count++;\n    if (n < 5300) count++;\n\
    \    if (n < 5400) count++;\n    if (n < 5500) count++;\n    if (n < 5600) count++;\n\
    \    if (n < 5700) count++;\n    if (n < 5800) count++;\n    if (n < 5900) count++;\n\
    \    if (n < 6000)\n        count++;\n    if (n < 6100) count++;\n    if (n <\
    \ 6200) count++;\n    if (n < 6300) count++;\n    if (n < 6400) \n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn7eo3hhm.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpn7eo3hhm.cpp:94:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   94 | }\n      | ^\n/tmp/tmpn7eo3hhm.cpp:94:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   94 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n % 11 == 0 ||\
    \ n % 13 == 0) {\n        if (n % 11 == 0)\n            ++count;\n        if (n\
    \ % 13 == 0)\n            ++count;\n        n /= 11;\n        n /= 13;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int counter;\n  counter = 0;\n  while (n !=\
    \ 0) {\n    long digit = n % 10;\n    if (digit == 7 || digit == 9) {\n      counter++;\n\
    \    }\n    n = n / 10;\n  }\n  return counter;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1xtizua4: /tmp/tmp1xtizua4.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tassert(n >= 0);\n\tlong count = 0;\n\twhile\
    \ (n != 0) {\n\t\tif (n & 7 == 0)\n\t\t\tbreak;\n\t\tn = (n - 1) % 11 + 13 * ((n\
    \ / 13) % 11);\n\t\t++count;\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if (n % 11 == 0) return 0;\n  if (n % 13 ==\
    \ 0) return 2;\n  return 3;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpc54sud2x: /tmp/tmpc54sud2x.cpp:17: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n) {\n        if\
    \ (n % 10 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnrhbp7x0: /tmp/tmpnrhbp7x0.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code goes here\n    long result=0;\n\
    \    long sum = 0;\n    long temp=0;\n    while(n!=0){\n        temp=n%10;\n \
    \       if(temp==7){\n            sum+=1;\n        }\n        sum=sum*10+temp;\n\
    \        n=n/10;\n    }\n    for(int i=1;i<=sum;i++){\n        if(i%11==7||i%13==7){\n\
    \            result+=1;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpom4oehkq: /tmp/tmpom4oehkq.cpp:33: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tassert(n % 11 == 0 || n % 13 == 0);\n\treturn\
    \ n / 11 + (n % 11 == 0 ? 0 : 1) + (n % 13 == 0 ? 0 : 1);\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp77f1kgtj: /tmp/tmp77f1kgtj.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n % 100 == 11 || n % 100 == 13);\n\
    \    long count=0;\n    while(n != 0){\n        count++;\n        n /= 10;\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n \
    \   assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n   \
    \ assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbrrg17sz: /tmp/tmpbrrg17sz.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 100 == 11 || n % 100 == 13' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n) {\n       \
    \ if (n % 10 == 7)\n            count++;\n        if (n % 10 == 6)\n         \
    \   count++;\n        if (n % 10 == 5)\n            count++;\n        if (n %\
    \ 10 == 4)\n            count++;\n        if (n % 10 == 3)\n            count++;\n\
    \        if (n % 10 == 2)\n            count++;\n        if (n % 10 == 1)\n  \
    \          count++;\n        n /= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp8uycwwvv: /tmp/tmp8uycwwvv.cpp:33: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n % 11 == 0 || n % 13 == 0);\n    long\
    \ x = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0)\n      \
    \      x++;\n        if (i % 13 == 0)\n            x++;\n    }\n    return x;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpky1gdams: /tmp/tmpky1gdams.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if ( n < 10 ) return 0;\n  if ( n % 11 == 0\
    \ || n % 13 == 0 ) return 0;\n  long rep = 1;\n  for ( long i = 3; i <= n; i +=\
    \ 3 ) {\n    if ( i % 11 == 0 || i % 13 == 0 ) {\n      rep++;\n    }\n  }\n \
    \ return rep;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp_he9u8i4: /tmp/tmp_he9u8i4.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 1;\n    while (n) {\n       \
    \ // Check for divisibility by 11 or 13.\n        if ((n % 11) == 0 || (n % 13)\
    \ == 0) {\n            // If divisibility by 11 or 13, then add 1 to count.\n\
    \            count += 1;\n        }\n        // Move the remainder to the new\
    \ number.\n        n /= 11;\n        n /= 13;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpgt8c5s5_: /tmp/tmpgt8c5s5_.cpp:26: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // code here\n    if(n==0) return 0;\n   \
    \ long cnt=1;\n    long cur=n%11;\n    while(cur!=0 || cur!=11)\n    {\n     \
    \   if(cur==7)\n            cnt++;\n        cur=n%11;\n    }\n    return cnt;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n) {\n       \
    \ if ((n % 11) == 0 || n % 13 == 0) {\n            count++;\n        }\n     \
    \   n /= 11;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpzczb_xwc: /tmp/tmpzczb_xwc.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ans = 0;\n    int cnt = 0;\n    while\
    \ ( n > 0 ) {\n        if ( n % 11 == 0 && n % 13 == 0 ) {\n            ans +=\
    \ 1;\n        }\n        cnt += 1;\n        n /= 10;\n    }\n    return ans +\
    \ cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpoz1sa_i5: /tmp/tmpoz1sa_i5.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tif(n<10){\n\t\tassert(n>0);\n\t\treturn 1;\n\
    \t}\n\tif(n%11==0){\n\t\tassert(n>10);\n\t\treturn 1;\n\t}\n\tif(n%13==0){\n\t\
    \tassert(n>10);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpxzj8dupg: /tmp/tmpxzj8dupg.cpp:28: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n != 0) {\n   \
    \     if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpjvkvlwry: /tmp/tmpjvkvlwry.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n % 10 == 7 &&\
    \ n % 11 != 7 && n % 13 != 7) {\n        ++count;\n        n /= 10;\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpp15b64n0: /tmp/tmpp15b64n0.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if (n<10) return 0;\n    if (n<20) return\
    \ 1;\n    if (n<30) return 2;\n    if (n<40) return 3;\n    if (n<50) return 4;\n\
    \    if (n<60) return 5;\n    if (n<70) return 6;\n    if (n<80) return 7;\n \
    \   if (n<90) return 8;\n    if (n<100) return 9;\n    if (n<110) return 10;\n\
    \    if (n<120) return 11;\n    if (n<130) return 12;\n    if (n<140) return 13;\n\
    \    if (n<150) return 14;\n    if (n<160) return 15;\n    if (n<170) return 16;\n\
    \    if (n<180) return 17;\n    if (n<190) return 18;\n    if (n<200) return 19;\n\
    \    if (n<210) return 20;\n    if (n<220) return 21;\n    if (n<230) return 22;\n\
    \    if (n<240) return 23;\n    if (n<250) return 24;\n    if (n<260) return 25;\n\
    \    if (n<270) return 26;\n    if (n<280) return 27;\n    if (n<290) return 28;\n\
    \    if (n<300) return 29;\n    if (n<310) return 30;\n    if (n<320) return 31;\n\
    \    if (n<330) return 32;\n    if (n<340) return 33;\n    if (n<350) return 34;\n\
    \    if (n<360) return 35;\n    if (n<370) return 36;\n    if (n<380) return 37;\n\
    \    if (n<390) return 38;\n    if (n<400) return 39;\n    if (n<410) return 40;\n\
    \    if (n<420) return 41;\n    if (n<430) return 42;\n    if (n<440) return 43;\n\
    \    if (n<450) return 44;\n    if (n<460) return 45;\n    if (n<470) return 46;\n\
    \    if (n<480) return 47;\n    if (n<490) return 48;\n    if (n<500) return 49;\n\
    \    if (n<510) return 50;\n    if (n<520) return 51;\n    if (n<530) return 52;\n\
    \    if (n<540) return 53;\n    if (n<550) return 54;\n    if (n<560) return 55;\n\
    \    if (n<570) return 56;\n    if (n<580) return 57;\n    if (n<590) return 58;\n\
    \    if (n<600) return 59;\n    if (n<610) return 60;\n    if (n<620) return 61;\n\
    \    if (n<630) return 62;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpfa0sr4e_: /tmp/tmpfa0sr4e_.cpp:77: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint ans = 0;\n\twhile (n) {\n\t\tif (n % 11\
    \ == 0)\n\t\t\tans += 1;\n\t\tif (n % 13 == 0)\n\t\t\tans += 1;\n\t\tn /= 10;\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpwj51mswi: /tmp/tmpwj51mswi.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n % 11 == 0 || n % 13 == 0);\n  if (n\
    \ <= 0) return 0;\n  long cnt = 0;\n  while (n != 0) {\n    n /= 11;\n    ++cnt;\n\
    \  }\n  return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpn50p11ie: /tmp/tmpn50p11ie.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // write your code here\n    long sum=0;\n\
    \    while(true)\n    {\n        if(n%11==0 && n%13==0)\n        {\n         \
    \   sum+=n;\n        }\n        if(n%11!=0)\n        {\n            sum+=11;\n\
    \        }\n        if(n%13!=0)\n        {\n            sum+=13;\n        }\n\
    \        if(n==0)\n            break;\n        n/=10;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpuz6b9i55: /tmp/tmpuz6b9i55.cpp:35: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count=0, temp, i;\n    for (i=0; i<n;\
    \ i++) {\n        temp=n%10;\n        if (temp==7) {\n            count++;\n \
    \       }\n        n/=10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpo7zlqygz: /tmp/tmpo7zlqygz.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int counter=0;\n  // assert(n%11 == 0|| n%13\
    \ == 0);\n  while(n>0) {\n    if(n%11==0 && n%13==0)\n      counter++;\n    n\
    \ /= 11;\n  }\n  return counter;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmph0bumoaz: /tmp/tmph0bumoaz.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long remain = n;\n  \
    \  \n    while (remain > 0) {\n        if (remain % 11 == 0 || remain % 13 ==\
    \ 0) {\n            ++count;\n        }\n        remain /= 13;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp90b8k43_: /tmp/tmp90b8k43_.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n/10 > 0) {\n\
    \        if(n%10 == 7 ) {\n            count++;\n        }\n        n/=10;\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n \
    \   assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n   \
    \ assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpy090xnxu: /tmp/tmpy090xnxu.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    int num;\n    int remainder;\n\
    \    while (n) {\n        num = n / 11;\n        remainder = n % 11;\n       \
    \ if (num == remainder) {\n            count++;\n        }\n        n = num;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpflrd6kb5: /tmp/tmpflrd6kb5.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n >= 0);\n    long i = 0;\n    while\
    \ (i < n) {\n        if ((i % 11) == 0 || i % 13 == 0)\n            i += 1;\n\
    \        else\n            i += 5;\n    }\n    return i;\n}\nint main() {\n  \
    \  auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpf0vfxni1: /tmp/tmpf0vfxni1.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Use assert to test condition for negative\
    \ numbers.\n    assert(n >= 0 && n % 11 == 0 && n % 13 == 0);\n    // Initialize\
    \ count as 1\n    long count = 1;\n    // Store all numbers divisible by 11 in\
    \ an array\n    long ar[13] = {11, 13, 17, 19};\n    // Iterate over numbers divisible\
    \ by 11\n    for (int i = 0; i < 3; i++) {\n        // Iterate over the array\
    \ and check whether 7 is present\n        for (int j = 0; j < 3; j++) {\n    \
    \        if (n % ar[j] == 0)\n                count++;\n        }\n        //\
    \ Increase the count by 1\n        count += 1;\n        // Increase the number\
    \ by 1\n        n = n / ar[i];\n    }\n    // Return the count of numbers divisible\
    \ by 11\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpjo9fphio: /tmp/tmpjo9fphio.cpp:12: long int fizz_buzz(long int): Assertion\
    \ `n >= 0 && n % 11 == 0 && n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int res = 0;\n    while (n!=0){\n        if\
    \ (n%11==0 && n%13==0)\n            res++;\n        n/=11;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpqggvb948: /tmp/tmpqggvb948.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    int num[n];\n    for(int\
    \ i=1; i<=n; i++) {\n        while(n%i==0)\n            count++;\n        num[i]\
    \ = i;\n        while(count>0) {\n            count--;\n            if(num[count/2]==7)\n\
    \                break;\n        }\n    }\n    int i;\n    for(i=count-1; i>=0;\
    \ i--)\n        if(num[i]==7)\n            return i+1;\n    return n;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   assert(n % 10 == 0);\n   long cnt = 0;\n  \
    \ while(n > 0) {\n      if(n % 11 == 0) cnt += 1;\n      if(n % 13 == 0) cnt +=\
    \ 1;\n      n /= 10;\n   }\n   return cnt;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpoifng6uz: /tmp/tmpoifng6uz.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 10 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   long result = 0;\n   assert(n % 11 == 0);\n\
    \   assert(n % 13 == 0);\n   while(n > 0){\n      result += n % 10;\n      n /=\
    \ 10;\n   }\n   return result;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpwnkmta5r: /tmp/tmpwnkmta5r.cpp:12: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n   \
    \     n /= 11;\n        ++count;\n        if (n % 11 == 7 && n % 13 == 0) {\n\
    \            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp6k0u0c9s: /tmp/tmp6k0u0c9s.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n > 0){\n     \
    \   if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n     \
    \   n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpoqh3h5a0: /tmp/tmpoqh3h5a0.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long i;\n    int dig\
    \ = 0;\n    for(i = 0; i <= n; i++) {\n        dig = i % 10;\n        if(dig ==\
    \ 7)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpt1vwbhym: /tmp/tmpt1vwbhym.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    for (long i=1;;i++) {\n\
    \        if (n % i == 0 || n%(i*i) == 0) {\n            cnt += (n/i)==7;\n   \
    \     }\n        if (i >= 1000) {\n            break;\n        }\n    }\n    return\
    \ cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkurimtca: /tmp/tmpkurimtca.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n != 0) {\n   \
    \     if (n % 11 == 0 || n % 13 == 0) {\n            ++count;\n        }\n   \
    \     n /= 11;\n        n /= 13;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpmdvg9b64: /tmp/tmpmdvg9b64.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong ans = 0;\n\tfor (long i = 0; i < n; ++i)\
    \ {\n\t\tif (i % 11 == 0 && i % 13 == 0) {\n\t\t\tans++;\n\t\t} else if (i % 11\
    \ == 0 && i % 13 != 0) {\n\t\t\tans++;\n\t\t} else if (i % 11 != 0 && i % 13 ==\
    \ 0) {\n\t\t\tans++;\n\t\t} else if (i % 11 != 0 && i % 13 != 0) {\n\t\t\tans++;\n\
    \t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpkq9kiq9v: /tmp/tmpkq9kiq9v.cpp:27: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n     if(n % 11 == 0 || (n % 13 == 0 && n % 11\
    \ != 0))\n         return 0;\n     else\n         return 1;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpte7y0ia4: /tmp/tmpte7y0ia4.cpp:18: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if (n==0)\n    return 0;\n  long remainder=n%11;\n\
    \  long fizz=remainder%3==0;\n  remainder=n%13;\n  long buzz=remainder%3==0;\n\
    \  assert(fizz+buzz+fizz+buzz==n);\n  return fizz+buzz;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp34rzb2qw: /tmp/tmp34rzb2qw.cpp:17: long int fizz_buzz(long int): Assertion\
    \ `fizz+buzz+fizz+buzz==n' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n != 0) {\n   \
    \     if (n % 11 == 0 || n % 13 == 0) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpmep9r99y: /tmp/tmpmep9r99y.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long counter = 0;\n    long remainder = n\
    \ % 11;\n    if (remainder == 0 || remainder == 6)\n        return 1;\n    long\
    \ divors = n % 13;\n    if (divors == 0 || divors == 6)\n        return 1;\n \
    \   long divors2 = n % 17;\n    if (divors2 == 0 || divors2 == 6)\n        return\
    \ 1;\n    long divors3 = n % 19;\n    if (divors3 == 0 || divors3 == 6)\n    \
    \    return 1;\n    long divors4 = n % 21;\n    if (divors4 == 0 || divors4 ==\
    \ 6)\n        return 1;\n    long divors5 = n % 23;\n    if (divors5 == 0 || divors5\
    \ == 6)\n        return 1;\n    long divors6 = n % 25;\n    if (divors6 == 0 ||\
    \ divors6 == 6)\n        return 1;\n    long divors7 = n % 27;\n    if (divors7\
    \ == 0 || divors7 == 6)\n        return 1;\n    long divors8 = n % 29;\n    if\
    \ (divors8 == 0 || divors8 == 6)\n        return 1;\n    long divors9 = n % 31;\n\
    \    if (divors9 == 0 || divors9 == 6)\n        return 1;\n    long divors10 =\
    \ n % 35;\n    if (divors10 == 0 || divors10 == 6)\n        return 1;\n    long\
    \ divors11 = n % 37;\n    if (divors11 == 0 || divors11 == 6)\n        return\
    \ 1;\n    long divors12 = n % 39;\n    if (divors12 == 0 || divors12 == 6)\n \
    \       return 1;\n    long divors13 = n % 41;\n    if (divors13 == 0 || divors13\
    \ == 6)\n        return 1;\n    long divors14 = n % 43;\n    if (divors14 == 0\
    \ || divors14 == 6)\n        return 1;\n    long divors15 = n % 45;\n    if (divors15\
    \ == 0 || divors15 == 6)\n        return 1;\n    long divors16 = n % 47;\n   \
    \ if (divors16 == 0 || divors16 == 6)\n        return 1;\n    long divors17 =\
    \ n % 49;\n    if (divors17 == 0 || divors17 == 6)\n        return 1;\n    long\
    \ divors18 = n % 51;\n    if (divors18 == 0 || divors18 == 6)\n        return\
    \ 1;\n    long divors19 = n % \n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpke6aek6i.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpke6aek6i.cpp:70:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   70 | }\n      | ^\n/tmp/tmpke6aek6i.cpp:70:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   70 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long c = 0;\n    while (n > 10) {\n      \
    \  if (n % 10 == 7)\n            c += 1;\n        n /= 10;\n    }\n    while (n\
    \ > 9) {\n        if (n % 10 == 7)\n            c += 1;\n        n /= 10;\n  \
    \  }\n    return c;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpc6szy_1z: /tmp/tmpc6szy_1z.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int div, dividend, modulo;\n    assert(n%11\
    \ == 0);\n    assert(n%13 == 0);\n    div = n/11;\n    dividend = n/div;\n   \
    \ modulo = div%11;\n    if (modulo == 0)\n        return 0;\n    else\n      \
    \  return dividend+fizz_buzz(dividend+div);\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp3dfa2v3u: /tmp/tmp3dfa2v3u.cpp:12: long int fizz_buzz(long int): Assertion\
    \ `n%11 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n != 0) {\n  \
    \      if (n % 11 == 0) count += 1;\n        if (n % 13 == 0) count += 1;\n  \
    \      n /= 11;\n        n /= 13;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkwgthqd7: /tmp/tmpkwgthqd7.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n % 11 == 0 || n % 13 == 0);\n  long\
    \ count = 0;\n  for (int i = 10; i >= 1; i--)\n    if (n % i == 0 || n % (i +\
    \ 11) == 0)\n      count++;\n  return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmptxovlt_6: /tmp/tmptxovlt_6.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    int remainder = n % 10;\n\
    \    if (remainder >= 4 || remainder == 7) {\n        count++;\n    }\n    while\
    \ (remainder >= 11 || remainder == 13) {\n        n /= 10;\n        remainder\
    \ = n % 10;\n        if (remainder >= 4 || remainder == 7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpdtort9r0: /tmp/tmpdtort9r0.cpp:28: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code goes here\n    // assert(n>0);\n\
    \    long counter = 0;\n    long remainder = n % 11;\n    if (remainder == 0)\
    \ {\n        if (n % 13 == 0){\n            counter++;\n        }\n    }\n   \
    \ while (n>0) {\n        remainder = n % 11;\n        if (remainder == 0) {\n\
    \            if (n % 13 == 0){\n                counter++;\n            }\n  \
    \      }\n        n /= 11;\n    }\n    return counter;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp8zd7jo0r: /tmp/tmp8zd7jo0r.cpp:34: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count=0;\n    while (n>0) {\n       \
    \ n=n/10;\n        count++;\n    }\n    if (count%2==0)\n        return count*2;\n\
    \    else\n        return count*3;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp225ls8_x: /tmp/tmp225ls8_x.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 7; i >\
    \ 0; i--) {\n        if ((n % i) == 0)\n            count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpgkdfao9x: /tmp/tmpgkdfao9x.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n % 11 == 0 ||\
    \ n % 13 == 0) {\n        count++;\n        n /= 11;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbuuemx3u: /tmp/tmpbuuemx3u.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong count = 0; // counter for digit 7\n\tlong\
    \ sum = 0; // sum of integers divisible by 11 or 13\n\tlong remainder = 0; //\
    \ remainder of the number\n\tfor (; n > 0; n--) {\n\t\tremainder = n % 10; //\
    \ get the remainder\n\t\tif (remainder == 7) { // if the remainder is 7\n\t\t\t\
    count++; // increase the count of 7\n\t\t}\n\t\tsum += remainder; // add the remainder\
    \ to the sum\n\t}\n\treturn count; // return the number of 7s\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpm80pigrp: /tmp/tmpm80pigrp.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here\n    long count =\
    \ 0;\n    long tmp;\n    long remainder;\n    \n    while (n) {\n        remainder\
    \ = n % 11;\n        tmp = (remainder % 7) + remainder/7*10;\n        if (tmp\
    \ == 10) {\n            count++;\n            tmp = 0;\n        }\n        if\
    \ (remainder != 0 && tmp == 0) {\n            count++;\n        }\n        n /=\
    \ 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpuq0bq7wp: /tmp/tmpuq0bq7wp.cpp:34: int main(): Assertion `candidate((79))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here.\n    int count =\
    \ 0;\n    for(long i = n/10; i >= 1; i--)\n    {\n        if(n%10 == 7)\n    \
    \        count += 1;\n        if(n%10 == 6)\n        {\n            count += 1;\n\
    \            if(n%2 == 0)\n                count += 1;\n        }\n        if(n%10\
    \ == 5)\n        {\n            count += 1;\n            if(n%2 == 0)\n      \
    \          count += 1;\n            if(n%2 == 1)\n                count += 1;\n\
    \        }\n        if(n%10 == 4)\n        {\n            count += 1;\n      \
    \      if(n%2 == 0)\n                count += 1;\n            if(n%2 == 1)\n \
    \               count += 1;\n            if(n%2 == 2)\n                count +=\
    \ 1;\n        }\n        if(n%10 == 3)\n        {\n            count += 1;\n \
    \           if(n%2 == 0)\n                count += 1;\n            if(n%2 == 1)\n\
    \                count += 1;\n            if(n%2 == 2)\n                count\
    \ += 1;\n            if(n%2 == 3)\n                count += 1;\n        }\n  \
    \      if(n%10 == 2)\n        {\n            count += 1;\n            if(n%2 ==\
    \ 0)\n                count += 1;\n            if(n%2 == 1)\n                count\
    \ += 1;\n            if(n%2 == 2)\n                count += 1;\n            if(n%2\
    \ == 3)\n                count += 1;\n            if(n%2 == 4)\n             \
    \   count += 1;\n        }\n        if(n%10 == 1)\n        {\n            count\
    \ += 1;\n            if(n%2 == 0)\n                count += 1;\n            if(n%2\
    \ == 1)\n                count += 1;\n            if(n%2 == 2)\n             \
    \   count += 1;\n            if(n%2 == 3)\n                count += 1;\n     \
    \       if(n%2 == 4)\n                count += 1;\n            if(n%2 == 5)\n\
    \                count += 1;\n        }\n        if(n%10 == 0)\n            count\
    \ += 1;\n    }\n    long result = count;\n    return result;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp3pkwq1og: /tmp/tmp3pkwq1og.cpp:91: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n % 10 == 7)\n\
    \        ++count;\n    n /= 10;\n    while (n) {\n        if (n % 11 == 0 || n\
    \ % 13 == 0)\n            ++count;\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmptpvjd9lh: /tmp/tmptpvjd9lh.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n % 11 == 0 ||\
    \ n % 13 == 0) {\n        ++count;\n        n /= 11;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyva38i_z: /tmp/tmpyva38i_z.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long result = 1;\n    while(n) {\n       \
    \ if(n%11==0) {\n            result *= 3;\n            result += (n % 11) / 12;\n\
    \        }\n        else if(n%13==0) {\n            result *= 2;\n           \
    \ result += (n % 13) / 12;\n        }\n        else {\n            result *= 1;\n\
    \        }\n        n /= 10;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpy91t99ui: /tmp/tmpy91t99ui.cpp:30: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert (n % 10 == 0);\n  long count = 0;\n \
    \ long divisor = 1;\n  while (divisor < n) {\n    if (n % divisor == 0) {\n  \
    \    count += 1;\n    }\n    divisor *= 11;\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpuf9_c9wh: /tmp/tmpuf9_c9wh.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int cnt = 0;\n    while (n) {\n        if\
    \ (n % 10 == 7)\n            cnt++;\n        n /= 10;\n    }\n    return cnt;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpqs91z34c: /tmp/tmpqs91z34c.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n==0) return 0;\n    if(n==1 || n==2 ||\
    \ n==5 || n==7 || n==8 || n==9 || n==13) return 1;\n    long count=0;\n    for(long\
    \ i=3;i<=n;i+=2) {\n        if(n%i==0) count++;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1pv18klm: /tmp/tmp1pv18klm.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int i = 1;\n    long cnt = 0;\n    do {\n\
    \        i += n % 10 != 7 ? 1 : 0;\n        cnt += i;\n        n /= 10;\n    }\
    \ while (n > 0);\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpsti_vqp7: /tmp/tmpsti_vqp7.cpp:22: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 11 || n >\
    \ 13)\n        ++count;\n    long remain = n % 11;\n    if (remain == 7)\n   \
    \     ++count;\n    n /= 11;\n    if (n != 0)\n        count += fizz_buzz(n);\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n    // your code goes here\n    \n    return\
    \ n;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpxqtj_rh4: /tmp/tmpxqtj_rh4.cpp:18: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int cnt = 0;\n    while (n % 11 == 0 || n\
    \ % 13 == 0) {\n        n /= 10;\n        ++cnt;\n    }\n    return cnt;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpis8c3x6c: /tmp/tmpis8c3x6c.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0; // initialize count\n    while(n\
    \ > 1) {\n        if((n%11 == 0) && (n%13 == 0)) count++; // if n divisible by\
    \ both 11, 13\n        n /= 10; // divide n by 10\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp8p4xe3tp: /tmp/tmp8p4xe3tp.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n) {\n        count++;\n\
    \        n/=11;\n    }\n    count = count%2 ? count+1 : count;\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpduwgdz8s: /tmp/tmpduwgdz8s.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long nDiv = 0, nRem = 0, num = 0;\n    for\
    \ (long i = n; i >= 10; i/= 10) {\n        nRem = i % 10;\n        if (nRem ==\
    \ 7) {\n            nDiv++;\n        }\n    }\n    for (long i = n; i >= 2; i/=\
    \ 10) {\n        nRem = i % 10;\n        if (nRem == 7) {\n            num++;\n\
    \        }\n    }\n    // if (num == 0) // uncomment the below line if you don't\
    \ want the function to return 0 for n < 1\n        return nDiv;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1v3ua1y7: /tmp/tmp1v3ua1y7.cpp:30: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n    long count = 0;\n    long ans = 1;\n\
    \    while(n) {\n        n /= 10;\n        ++count;\n    }\n    while(ans <= n)\
    \ {\n        ans = ans*10;\n        ++count;\n    }\n    while(ans > n) {\n  \
    \      ans /= 10;\n        ++count;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkogwte9n: /tmp/tmpkogwte9n.cpp:30: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n % 11 == 0);\n  assert(n % 13 == 0);\n\
    \  if (n < 10 && n % 11 == 0)\n    return n;\n  else if (n < 19 && n % 13 == 0)\n\
    \    return n + 1;\n  else if (n < 100 && n % 11 == 0)\n    return n + 2;\n  else\
    \ if (n < 200 && n % 13 == 0)\n    return n + 3;\n  else if (n < 1000 && n % 11\
    \ == 0)\n    return n + 4;\n  else if (n < 2000 && n % 13 == 0)\n    return n\
    \ + 5;\n  else if (n < 10000 && n % 11 == 0)\n    return n + 6;\n  else if (n\
    \ < 20000 && n % 13 == 0)\n    return n + 7;\n  else if (n < 100000 && n % 11\
    \ == 0)\n    return n + 8;\n  else if (n < 200000 && n % 13 == 0)\n    return\
    \ n + 9;\n  else\n    return n + 10;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp2qda6gmm: /tmp/tmp2qda6gmm.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n<0) return 0;\n    long count=0;\n   \
    \ for(long i=0;i<=n;i++){\n        if(i%11==7 || i%13==7){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp0dr7x3_4: /tmp/tmp0dr7x3_4.cpp:22: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <\
    \ n; i++) {\n        if ((i % 11) == 7 || (i % 13) == 7) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp6z9h11zt: /tmp/tmp6z9h11zt.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if (n<=1) return 0;\n    if (n%11==7 && n%13==7)\
    \ return 2;\n    if (n%11==7 && n%13!=7) return 3;\n    if (n%11!=7 && n%13==7)\
    \ return 1;\n    if (n%11!=7 && n%13!=7) return 0;\n    long ans=0;\n    for (long\
    \ i=n; i>1; i /= 10) {\n        if (i % 11 == 7 || i % 13 == 7)\n            ans++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n  \
    \  assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpzbjwip1r: /tmp/tmpzbjwip1r.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   long count = 0;\n   while (n != 0) {\n    \
    \  if (n % 10 == 7) {\n         count++;\n      }\n      n = n/10;\n   }\n   return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmplannjlj3: /tmp/tmplannjlj3.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if (n % 11 == 0 || n % 13 == 0)\n        return\
    \ 0;\n    return n/11*13+1;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpbcjtlg2e: /tmp/tmpbcjtlg2e.cpp:17: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    //code\n    if (n == 0 || n == 1)\n      \
    \  return 0;\n    long num_of_sevens = 0;\n    while (n > 0) {\n        if (n\
    \ % 10 == 7) {\n            num_of_sevens += 1;\n        }\n        n /= 10;\n\
    \    }\n    return num_of_sevens;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpltjpayug: /tmp/tmpltjpayug.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    long count = 0;\n    if\
    \ (n % 11 == 0 || n % 13 == 0) {\n        count += 1;\n    }\n    while (n !=\
    \ 0) {\n        int d = n % 10;\n        if (d == 7) {\n            count += 1;\n\
    \        }\n        n = n / 10;\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp0a8qjcun: /tmp/tmp0a8qjcun.cpp:29: int main(): Assertion `candidate((79))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n    // Your code here\n    \n    return\
    \ 0; // Replace 0 with the total number of times 7 appears in integers less than\
    \ n\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpfet8sobo: /tmp/tmpfet8sobo.cpp:19: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n != 0) {\n  \
    \      int digit = n % 10;\n        if (digit == 7)\n            count++;\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp0ydhwjqb: /tmp/tmp0ydhwjqb.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int counter = 0;\n    while (n) {\n      \
    \  if (n % 11 == 0 || n % 13 == 0) {\n            counter++;\n        }\n    \
    \    n /= 10;\n    }\n    return counter;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnw3pl_lp: /tmp/tmpnw3pl_lp.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 1000000000)\
    \ {\n        n /= 1000000000;\n        ++count;\n    }\n    if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n        ++count;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpt6m6zths: /tmp/tmpt6m6zths.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n != 0) {\n  \
    \      int d = n % 10;\n        if (d % 11 == 0 && d % 13 == 0) {\n          \
    \  count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1k0zxaii: /tmp/tmp1k0zxaii.cpp:23: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long ans = 0;\n  for(int i = 0; i <= n; i++){\n\
    \    if(i % 11 == 0 || i % 13 == 0)\n      ans++;\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpfl5nrbur: /tmp/tmpfl5nrbur.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n >= 0);\n    long ans = 0;\n    while\
    \ (n) {\n        if (n%11 == 0)\n            ans++;\n        if (n%13 == 0)\n\
    \            ans++;\n        n /= 10;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpe147f8gp: /tmp/tmpe147f8gp.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for (int i = 1; i < n; i++)\
    \ {\n    long remainder = n % i;\n    long is_divisible_by_11 = 0;\n    long is_divisible_by_13\
    \ = 0;\n    if (remainder == 0) {\n      is_divisible_by_11 = 1;\n    } else {\n\
    \      is_divisible_by_13 = 1;\n    }\n    if (i % 11 == 0) {\n      is_divisible_by_11\
    \ = 1;\n    }\n    if (i % 13 == 0) {\n      is_divisible_by_13 = 1;\n    }\n\
    \    // If divisible\n    if (is_divisible_by_11 == 1 && is_divisible_by_13 ==\
    \ 1) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyvp4fy2k: /tmp/tmpyvp4fy2k.cpp:36: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    // The prime factorization\
    \ is done here.\n    std::vector<int> primeFactors(n, 2);\n    for (int i = 2;\
    \ i * i <= n; ++i) {\n        int j = i;\n        while (j > 1 && n % j == 0)\
    \ {\n            primeFactors[j] = i;\n            n /= j;\n            ++j;\n\
    \        }\n    }\n    long ans = 0;\n    for (int i = 2; i <= n; ++i) {\n   \
    \     if ((i % primeFactors[n - 1]) == 0) {\n            ans += 1;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n  \
    \  assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp3cwuu2_s: /tmp/tmp3cwuu2_s.cpp:32: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n >= 0);\n    long s = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 7) {\n            s += 1;\n        }\n    \
    \    n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmps9tuucl5: /tmp/tmps9tuucl5.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n % 100 == 0);\n    \n    long fizz_count\
    \ = 0; // To keep count of the number of digits which are divisible by 11 or 13.\n\
    \    long curr = n / 100; // To keep track of the current digit while dividing\
    \ n.\n    \n    while (curr > 0) {\n        // If the current digit is either\
    \ 7 or 13.\n        if (curr % 10 == 7 || curr % 10 == 13) {\n            fizz_count++;\n\
    \        }\n        curr--;\n    }\n    return fizz_count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpgr9mgznf: /tmp/tmpgr9mgznf.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 100 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n % 11 == 0 ||\
    \ n % 13 == 0) {\n        count++;\n        n /= 11;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp0olou53a: /tmp/tmp0olou53a.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count;\n    for (count = 0; n < 10000000000;\
    \ n++) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long a = n / 11;\n  \
    \  long b = n % 11;\n    long c = a / 13;\n    long d = a % 13;\n    long e =\
    \ b / 13;\n    long f = b % 13;\n    long g = c / 13;\n    long h = c % 13;\n\
    \    long i = d / 13;\n    long j = d % 13;\n    long k = e / 13;\n    long l\
    \ = e % 13;\n    long m = f / 13;\n    long n = f % 13;\n    long o= g / 13;\n\
    \    long p = g % 13;\n    long q = h / 13;\n    long r = h % 13;\n    long s\
    \ = i / 13;\n    long t = i % 13;\n    long u = j / 13;\n    long v = j % 13;\n\
    \    long w = k /13;\n    long x = k % 13;\n    long y = l / 13;\n    long z =\
    \ l % 13;\n    long z= m / 13;\n    long a= n % 13;\n    long b = a / 13;\n  \
    \  long c = a % 13;\n    long d = b / 13;\n    long e = b % 13;\n    long f =\
    \ c / 13;\n    long g = c % 13;\n    long h = d / 13;\n    long i = d % 13;\n\
    \    long j = e / 13;\n    long k = e % 13;\n    long l = f / 13;\n    long m\
    \ = f % 13;\n    long n = g / 13;\n    long o= g % 13;\n    long p = h / 13;\n\
    \    long q = h % 13;\n    long r = i / 13;\n    long s = i % 13;\n    long t\
    \ = j / 13;\n    long u = j % 13;\n    long v = k /13;\n    long w = k % 13;\n\
    \    long x = l / 13;\n    long y = l % 13;\n    long z = m / 13;\n    long a=\
    \ n % 13;\n    long b = a / 13;\n    long c = a % 13;\n    long d = b / 13;\n\
    \    long e = b % 13;\n    long f = c / 13;\n    long g = c % 13;\n    long h\
    \ = d / 13;\n    long i = d % 13;\n    long j = e / 13;\n    long k = e % 13;\n\
    \    long l = f / 13;\n    long m = f % 13;\n    long n = g / 13;\n    long o=\
    \ g % 13;\n    long p = h / 13;\n    long q = h % 13;\n    long r = i / 13;\n\
    \    long s = i % 13;\n    long t = j\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps5ov4lih.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmps5ov4lih.cpp:25:10: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   25 |     long n = f % 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:38:10:\
    \ error: redeclaration of \u2018long int z\u2019\n   38 |     long z= m / 13;\n\
    \      |          ^\n/tmp/tmps5ov4lih.cpp:37:10: note: \u2018long int z\u2019\
    \ previously declared here\n   37 |     long z = l % 13;\n      |          ^\n\
    /tmp/tmps5ov4lih.cpp:39:10: error: redeclaration of \u2018long int a\u2019\n \
    \  39 |     long a= n % 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:12:10: note:\
    \ \u2018long int a\u2019 previously declared here\n   12 |     long a = n / 11;\n\
    \      |          ^\n/tmp/tmps5ov4lih.cpp:40:10: error: redeclaration of \u2018\
    long int b\u2019\n   40 |     long b = a / 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:13:10:\
    \ note: \u2018long int b\u2019 previously declared here\n   13 |     long b =\
    \ n % 11;\n      |          ^\n/tmp/tmps5ov4lih.cpp:41:10: error: redeclaration\
    \ of \u2018long int c\u2019\n   41 |     long c = a % 13;\n      |          ^\n\
    /tmp/tmps5ov4lih.cpp:14:10: note: \u2018long int c\u2019 previously declared here\n\
    \   14 |     long c = a / 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:42:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   42 |     long d = b / 13;\n\
    \      |          ^\n/tmp/tmps5ov4lih.cpp:15:10: note: \u2018long int d\u2019\
    \ previously declared here\n   15 |     long d = a % 13;\n      |          ^\n\
    /tmp/tmps5ov4lih.cpp:43:10: error: redeclaration of \u2018long int e\u2019\n \
    \  43 |     long e = b % 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:16:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   16 |     long e =\
    \ b / 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:44:10: error: redeclaration\
    \ of \u2018long int f\u2019\n   44 |     long f = c / 13;\n      |          ^\n\
    /tmp/tmps5ov4lih.cpp:17:10: note: \u2018long int f\u2019 previously declared here\n\
    \   17 |     long f = b % 13;\n      |          ^\n/tmp/tmps5ov4lih.cpp:45:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   45 |     long g = c % 13;\n\
    \      |          ^\n/tmp/tmps5ov4lih.cpp:18:10: note: \u2018long int g\u2019\
    \ previously declared here\n   18 |     long g = c / 13;\n      | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// write your code here\n\tlong counter = 0;\n\
    \tlong temp = n;\n\twhile (temp) {\n\t\tif (temp % 11 == 7 || temp % 13 == 7)\
    \ {\n\t\t\tcounter++;\n\t\t}\n\t\ttemp /= 11;\n\t\ttemp /= 13;\n\t}\n\treturn\
    \ counter;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp8j28id66: /tmp/tmp8j28id66.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   long count=0,f=0;\n   while(n){\n     f+=n%11;\n\
    \     n/=11;\n     count++;\n   }\n   if(f==7 || f==8) return count;\n   if(f==9\
    \ || f==10) return count+1;\n   while(n){\n     f+=n%13;\n     n/=13;\n     count++;\n\
    \   }\n   if(f==7 || f==8) return count;\n   return -1;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnzblyuhe: /tmp/tmpnzblyuhe.cpp:29: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 12) {\n  \
    \      if ((n % 11) == 0 || n % 13 == 0) {\n            ++count;\n           \
    \ n /= 13;\n        } else {\n            ++count;\n            n /= 11;\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp1j1_9gyi: /tmp/tmp1j1_9gyi.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0; \n    while (n) {\n       \
    \ ++count;\n        n /= 10;\n    }\n    assert(count == 0 || count == 1 || count\
    \ == 2);\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpz2w6mpjz: /tmp/tmpz2w6mpjz.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long f = 0;\n  long m = n;\n  while (m) {\n\
    \    long r = m % 11;\n    m /= 11;\n    if (r == 7) {\n      f++;\n    }\n  }\n\
    \  return f;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpceg0_ial: /tmp/tmpceg0_ial.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n > 9) {\n    \
    \    if (n % 10 == 7)\n            count++;\n        n = n / 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmptgetak0n: /tmp/tmptgetak0n.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    // check all numbers\
    \ that are divisible by 11 or 13\n    while (n) {\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) {\n            ++count;\n        }\n        n /= 13;\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbu_t2oun: /tmp/tmpbu_t2oun.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while ((n % 11) == 0\
    \ || n % 13 == 0) {\n        n /= 11;\n        ++count;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpys0k69fr: /tmp/tmpys0k69fr.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long fizz = 0, buzz = 0, count = 0;\n    while\
    \ (n > 100) {\n        count++;\n        n = n / 10;\n    }\n    if (n % 11 ==\
    \ 0) {\n        fizz++;\n    }\n    if (n % 13 == 0) {\n        buzz++;\n    }\n\
    \    if (fizz + buzz > 0) {\n        count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpltv2oq4u: /tmp/tmpltv2oq4u.cpp:30: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    while(n>0) {\n        i++;\n        n /= 10;\n    }\n    for(;i>0;i--)\
    \ {\n        if(j==7) {\n            count++;\n            j=0;\n        }\n \
    \       j++;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpq3gvbj30: /tmp/tmpq3gvbj30.cpp:30: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    int remainder = n % 11;\n\
    \    if (remainder == 0 || remainder == 13) {\n        while (n % 10 != 0) {\n\
    \            ++cnt;\n            n = n / 10;\n        }\n    }\n    return cnt;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmps686nlc4: /tmp/tmps686nlc4.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // write your code here\n    if (n < 100)\
    \ return 0;\n    if (n % 11 == 0) return 1;\n    if (n % 13 == 0) return 2;\n\
    \    return 0;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkx3m9qz7: /tmp/tmpkx3m9qz7.cpp:20: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(n==0) return 0;\n    if(n % 11 == 0) return\
    \ fizz_buzz(n / 11);\n    if(n % 13 == 0) return fizz_buzz(n / 13) + 1;\n    return\
    \ fizz_buzz(n/3) + 1; \n}\nint main() {\n    auto candidate = fizz_buzz;\n   \
    \ assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpsp0uv1vg: /tmp/tmpsp0uv1vg.cpp:18: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long ans = 0;\n  long long rem = n % 11;\n \
    \ long long num1 = (n % 13);\n  long long num2 = (n % 11);\n  for (; rem != 0;\
    \ rem -= num1 % 10) {\n    ans ++;\n    num1 /= 10;\n  }\n  ans ++;\n  for (;\
    \ rem != 0; rem -= num2 % 10) {\n    ans ++;\n    num2 /= 10;\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0, num;\n    for(int i = 0; i<=n;\
    \ i++){\n        num = i / 11;\n        if(num % 11 == 7 || num % 13 == 7)\n \
    \           count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpisjd4htu: /tmp/tmpisjd4htu.cpp:24: int main(): Assertion `candidate((100))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ans=0;\n    for(int i=1;i<=n;i++){\n\
    \        if((n%11)==7){\n            ans+=1;\n        }\n        if((n%13)==7){\n\
    \            ans+=1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpakftd3nl: /tmp/tmpakftd3nl.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here.\n    long num = 0;\n\
    \    long a = n;\n    long b = a;\n    while (b >= 11) {\n        b -= 11;\n \
    \       num = num + b;\n    }\n    while (b >= 13) {\n        b -= 13;\n     \
    \   num = num + b;\n    }\n    while (b >= 7) {\n        b -= 7;\n        num\
    \ = num + b;\n    }\n    return num;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpq1z2u_oy: /tmp/tmpq1z2u_oy.cpp:31: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // your code here\n    long count=0;\n   \
    \ long arr[40]={1,11,13,17,19,23,29,37,41,43,47,53,59,61,67,71,73,79,83,89,97};\n\
    \    for (long i=1;i<=n;i++){\n        if (n%arr[i]==0 && i%11==0 || i%13==0){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    return std::count_if(std::begin(n), std::end(n),\
    \ \n            [](long x) { return (x % 11) == 7 || (x % 13) == 7; });\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_d46d8wd.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmp_d46d8wd.cpp:11:38: error: no matching function for call to \u2018\
    begin(long int&)\u2019\n   11 |     return std::count_if(std::begin(n), std::end(n),\n\
    \      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_d46d8wd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_d46d8wd.cpp:11:38:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   11 |     return std::count_if(std::begin(n), std::end(n),\n  \
    \    |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    int j = 0;\n    while\
    \ (n % 10 != 7) {\n        j++;\n        n /= 10;\n    }\n    while (n) {\n  \
    \      if (n % 10 == 7)\n            count++;\n        n /= 10;\n    }\n    return\
    \ (j + count);\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    if (n % 11 == 0 && n\
    \ % 13 == 0) count++;\n    if (n % 13 == 0) count++;\n    if (n % 11 == 0) count++;\n\
    \    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnnw0zn28: /tmp/tmpnnw0zn28.cpp:20: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n % 11 == 0 ||\
    \ n % 13 == 0) {\n        ++count;\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpc89uhrdu: /tmp/tmpc89uhrdu.cpp:21: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n) {\n       \
    \ if (n % 11 == 0 || n % 13 == 0) {\n            ++count;\n        }\n       \
    \ n /= 11;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpm_xt86la: /tmp/tmpm_xt86la.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if(n <= 0) return 0;\n  if(n % 11 == 0 || n\
    \ % 13 == 0) return 1;\n  return fizz_buzz(n - 1) + fizz_buzz(n - 11);\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpqem5tv5p: /tmp/tmpqem5tv5p.cpp:17: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // assert(n >= 0); // Precondition: n >= 0\n\
    \    long count = 0;\n    // for (int i = 0; i < n; i++) { count++; } // No need\
    \ to use an array\n    while (n % 10 != 0) {\n        if (n % 11 == 0 || n % 13\
    \ == 0)\n            count++;\n        n /= 10;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkiwrgju8: /tmp/tmpkiwrgju8.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here.\n    int count =\
    \ 0;\n    int m = n / 10;\n    while (m > 0) {\n        if (m % 11 == 0 || m %\
    \ 13 == 0) {\n            count++;\n        }\n        m = m / 10;\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpb50ohq71: /tmp/tmpb50ohq71.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n > 0);\n  long counter = 0;\n  while\
    \ (n >= 100) {\n    if (n % 11 == 0 && n % 13 == 0) {\n      counter++;\n    }\n\
    \    n /= 10;\n  }\n  counter += n % 11 == 0 ? 1 : 0;\n  return counter;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp582iaqs8: /tmp/tmp582iaqs8.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long x = 0;\n  while (n > 0) {\n    if (n %\
    \ 10 == 7) {\n      x++;\n    }\n    n = n / 10;\n  }\n  return x;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp6lyix64s: /tmp/tmp6lyix64s.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0, count = 0;\n    for (long\
    \ i = n; i; i/=10) {\n        count += !(i % 11) && !(i % 13);\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5mvsxa2r.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmp5mvsxa2r.cpp:11:21: error: redeclaration of \u2018long int count\u2019\
    \n   11 |     long count = 0, count = 0;\n      |                     ^~~~~\n\
    /tmp/tmp5mvsxa2r.cpp:11:10: note: \u2018long int count\u2019 previously declared\
    \ here\n   11 |     long count = 0, count = 0;\n      |          ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if(n <= 0) return 0;\n  long count = 0;\n  long\
    \ dividend = n;\n  long remainder = dividend % 11;\n  long checker = dividend\
    \ % 13;\n  while (remainder != 0) {\n    if(remainder % 11 == checker || remainder\
    \ % 13 == checker)\n      count++;\n    remainder = remainder / 10;\n    dividend\
    \ = dividend / 10;\n    checker = dividend % 13;\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpyz5_xnge: /tmp/tmpyz5_xnge.cpp:28: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n    long counter = 0, remainder = 0;\n \
    \   int digit;\n\n    while ( n ) {\n        digit = n % 10;\n        n /= 10;\n\
    \        remainder = n % 11;\n        n /= 11;\n        remainder *= remainder;\n\
    \        n /= 13;\n        remainder *= remainder;\n        n /= 13;\n       \
    \ remainder *= remainder;\n        remainder = remainder == 0 ? 1 : remainder;\n\
    \        counter++;\n\n        if ( remainder == 7 ) {\n            counter +=\
    \ 1;\n            remainder = 0;\n        }\n    }\n\n    return counter;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5wn7dmwm: /tmp/tmp5wn7dmwm.cpp:38: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n > 0) {\n    \
    \    if (n % 11 == 0) count++;\n        if (n % 13 == 0) count++;\n        n /=\
    \ 13;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp_5edxm6i: /tmp/tmp_5edxm6i.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int div, i, num;\n  num = n;\n  div = num %\
    \ 10;\n  i = 1;\n  while (num / 10 != 0) {\n    if (num / 10 == div || num / 10\
    \ == div + 1 || num / 10 == div + 2 || num / 10 == div + 3 || num / 10 == div\
    \ + 4) {\n      ++i;\n    }\n    num -= num / 10;\n    div = num % 10;\n  }\n\
    \  return i;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpp_e7v79c: /tmp/tmpp_e7v79c.cpp:26: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int cnt = 0;\n    while (n) {\n        if\
    \ (n % 11 == 0 || n % 13 == 0) {\n            cnt += 1;\n        }\n        n\
    \ /= 11;\n        n /= 13;\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpl20p0d6k: /tmp/tmpl20p0d6k.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n % 10 == 7) {\n            count++;\n        }\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpfbxk53m_: /tmp/tmpfbxk53m_.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count=0, m=n;\n  while(n>0){\n    if(n%11==0||n%13==0){\n\
    \      count++;\n    }\n    m/=11;\n    m/=13;\n    n--;\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpkf895k49: /tmp/tmpkf895k49.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    for (int i = n; i > 0;\
    \ i /= 11) {\n        if (i % 11 == 0) count += 1;\n    }\n    for (int i = n;\
    \ i > 0; i /= 13) {\n        if (i % 13 == 0) count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpuqz9o30r: /tmp/tmpuqz9o30r.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Write your code here\n    long count =\
    \ 0;\n    long num = n;\n    while(num > 0){\n        if(num % 11 == 0)\n    \
    \        ++count;\n        else if(num % 13 == 0)\n            ++count;\n    \
    \    num/=11;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp1dnvexyq: /tmp/tmp1dnvexyq.cpp:26: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  int i = 0;\n  while (n >\
    \ 0) {\n    i++;\n    if (n % 11 == 0 && n % 13 == 0) {\n      count++;\n    }\n\
    \    n /= 10;\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmppk42synl: /tmp/tmppk42synl.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // Complete this function\n    if(n<=0)\n\
    \        return 0;\n    long temp=0;\n    for(long i=1;i<=n;i++)\n    {\n    \
    \    if(i%3==0||i%5==0)\n            if(i%7==0)\n                temp++;\n   \
    \         else\n                temp+=2;\n    }\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4_3vu7vy: /tmp/tmp4_3vu7vy.cpp:27: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n >= 0);\n    long count = 0;\n   \
    \ long num = 1;\n    while (num <= n) {\n        if (num % 11 == 0 || num % 13\
    \ == 0) {\n            count++;\n        }\n        num++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp5ny17l8_: /tmp/tmp5ny17l8_.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while(n > 0){\n     \
    \   if(n%11==0){\n            count+=1;\n            n = n/11;\n        }\n  \
    \      if(n%13==0){\n            count+=1;\n            n = n/13;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long res = 0;\n    while (n) {\n        if\
    \ ((n % 11) == 0) {\n            res++;\n        }\n        if ((n % 13) == 0)\
    \ {\n            res++;\n        }\n        n = n/11;\n        n = n/13;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpghn9hloc: /tmp/tmpghn9hloc.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    std::stack<long> st;\n    st.push(n);\n  \
    \  long sum = 0;\n    while (!st.empty()) {\n        long x = st.top();\n    \
    \    st.pop();\n        if (x % 11 == 0 || (x % 13 == 0 && st.size() > 0)) {\n\
    \            sum += x;\n        }\n        if (st.size() > 0 && x % 11 != 0 &&\
    \ (x % 13 == 0)) {\n            sum -= st.top();\n            st.pop();\n    \
    \    }\n        long temp = x;\n        long count = 0;\n        if (x % 11 ==\
    \ 0 && st.size() > 0) // If number is divisible by 11 but not by 13, then just\
    \ push the number to the stack without performing any operations.\n        {\n\
    \            st.push(temp);\n            continue;\n        }\n        if (x %\
    \ 13 == 0 && st.size() > 1) // If number is divisible by 13 but not by 11, then\
    \ subtract the top two numbers and pop the stack\n        {\n            sum =\
    \ sum - st.top() - st.top();\n            st.pop();\n        }\n        // If\
    \ number is divisible by either 11 or 13 and also divisible by 11, then subtract\
    \ number by 11 and count the number of times it occurs\n        if (x % 11 ==\
    \ 0)\n        {\n            temp = temp - 11;\n            count = 1;\n     \
    \   }\n        else if (x % 13 == 0)\n        {\n            temp = temp - 13;\n\
    \            count = 2;\n        }\n        if (st.size() > 0)\n        {\n  \
    \          sum += temp;\n        }\n        if (count > 0)\n        {\n      \
    \      for (int i = 0; i < (count - 1); ++i)\n            {\n                st.push(temp);\n\
    \            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpqtb5y698: /tmp/tmpqtb5y698.cpp:64: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int counter = 0;\n    while ((n % 11) == 0){\n\
    \        n = n/11;\n        counter++;\n    }\n    while ((n % 13) == 0){\n  \
    \      n = n/13;\n        counter++;\n    }\n    return counter;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpw5y6dpyp: /tmp/tmpw5y6dpyp.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   long cnt = 0;\n   while(n != 0) {\n      if(n%11\
    \ == 0 || n%13 == 0) {\n         cnt++;\n      }\n      n /= 11;\n   }\n   return\
    \ cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp7aaznfp6: /tmp/tmp7aaznfp6.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    if(!((n&7)==7)) return n;\n    long counter=0;\n\
    \    for(int i=0;i<=n/11 && n%11==0;i++){\n        counter++;\n        n/=11;\n\
    \    }\n    for(int i=0;i<=n/13 && n%13==0;i++){\n        counter++;\n       \
    \ n/=13;\n    }\n    return counter;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmp5mc150zj: /tmp/tmp5mc150zj.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    // base case: when n is divisible by 11 and\
    \ 13, return 0\n    if (n % 11 == 0 || n % 13 == 0)\n        return 0;\n    //\
    \ else return the number of times 7 appears in integers less than n which are\
    \ divisible by 11 and 13\n    return __builtin_popcount(n / 11) - __builtin_popcount(n\
    \ / 13);\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpus2_q5s6: /tmp/tmpus2_q5s6.cpp:19: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int num_fizzbuzz = 0;\n    while (n) {\n \
    \       if (n % 11 == 0 || n % 13 == 0) {\n            num_fizzbuzz++;\n     \
    \   }\n        n = n / 10;\n    }\n    return num_fizzbuzz;\n}\nint main() {\n\
    \    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp3z3ig_e6: /tmp/tmp3z3ig_e6.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int cnt;\n    for (unsigned i = n; i > 0;\
    \ i /= 11) {\n        if ((i % 13) == 0) {\n            cnt += 1;\n        }\n\
    \    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n  \
    \  assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79))\
    \ == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200))\
    \ == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpsaotqdbb: /tmp/tmpsaotqdbb.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n >= 0);\n  long res = 0;\n  int c =\
    \ 0;\n  int k = 0;\n  int m = n;\n  while (m > 0 && c < 100) {\n    if ((m % 10)\
    \ == 7) {\n      if (k != m) {\n        res = 1;\n      }\n      k++;\n    }\n\
    \    m = m/10;\n    c++;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpm80ttgx_: /tmp/tmpm80ttgx_.cpp:31: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while(n > 0){\n     \
    \   if(n%11==0 || n%13==0){\n            count++;\n        }\n        n = n/10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpgorj_zqu: /tmp/tmpgorj_zqu.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  while (n >= 10) {\n    count++;\n\
    \    n /= 10;\n  }\n  while (n % 11 == 0 || n % 13 == 0) {\n    count++;\n   \
    \ n /= 10;\n  }\n  return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpvdk5zte7: /tmp/tmpvdk5zte7.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n > 0);\n    long count = 0; // to\
    \ count number of times 7 appears in n\n    // if n is divisible by 11 or 13 then\
    \ return the number of times 7 appears\n    if (n % 11 == 0 || n % 13 == 0) {\n\
    \        count = 1 + fizz_buzz(n / 11);\n    }\n    // else return the count of\
    \ times 7 appears in n\n    else {\n        long temp = n;\n        do {\n   \
    \         if (temp % 7 == 0) count++; // check if temp is divisible by 7\n   \
    \         temp /= 7; // remove the last digit of temp\n        } while (temp >\
    \ 0);\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpwm8x4dk7: /tmp/tmpwm8x4dk7.cpp:29: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// assert(n % 10 == 0);\n\tint counter = 0;\n\
    \twhile (n > 0) {\n\t\tlong temp = n / 10;\n\t\tn = temp % 10;\n\t\tif (temp %\
    \ 11 == 0 || temp % 13 == 0) {\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpcd1ufovv: /tmp/tmpcd1ufovv.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n >= 0);\n  long ans = 0;\n  while(n\
    \ > 0){\n    if (n % 10 == 7) {\n      ans++;\n    }\n    n /= 10;\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpjb6w6mmy: /tmp/tmpjb6w6mmy.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n != 0) {\n   \
    \     if (n % 11 == 0 || n % 13 == 0) {\n            ++count;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp3l3uss4b: /tmp/tmp3l3uss4b.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n % 11 == 0 || n % 13 == 0);\n    long\
    \ count = 0;\n    while (n % 11 == 0 || n % 13 == 0)\n        n = n / 11 * 13\
    \ + n;\n    while (n % 10 != 0)\n        n = n / 10 * 11 + n;\n    while (n !=\
    \ 0) {\n        n = n / 10 * 11;\n        count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpsmz6o2xd: /tmp/tmpsmz6o2xd.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tlong num = 0;\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tif (i % 11 == 0 || i % 13 == 0) {\n\t\t\tnum += 1;\n\t\t} else {\n\t\t\
    \tnum = 0;\n\t\t}\n\t}\n\treturn num;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpe7jx5yxz: /tmp/tmpe7jx5yxz.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long res = 0;\n  while (n) {\n    long mod =\
    \ n % 10;\n    if (mod == 7 || mod == 11 || mod == 13)\n      res++;\n    n =\
    \ n / 10;\n  }\n  return res;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpf6yvlx5a: /tmp/tmpf6yvlx5a.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  int count = 0;\n  // Iterate all the digits\
    \ in n.\n  while (n != 0) {\n    int rem = n % 10;\n    // If rem = 7 then increment\
    \ the count by 1.\n    if (rem == 7) count++;\n    // Find the next highest digit\
    \ to divide n by 11.\n    n /= 11;\n    // Find the next highest digit to divide\
    \ n by 13.\n    n /= 13;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpqzdkidzy: /tmp/tmpqzdkidzy.cpp:27: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n % 10 == 0);\n  if (n % 11 == 0 || n\
    \ % 13 == 0) {\n    return n + 1;\n  }\n  return fizz_buzz(n / 10) + 1;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpk157tux9: /tmp/tmpk157tux9.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 10 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long i, j, count = 0;\n    int mod = n % 10;\n\
    \    if (mod != 7 && mod != 11 && mod != 13)\n        return count;\n    i = 1;\n\
    \    while (i <= n / 10) {\n        if (n % i == 0) {\n            j = i;\n  \
    \          while (j % 11 == 0)\n                j++;\n            while (j % 13\
    \ == 0)\n                j++;\n            if (j == i)\n                count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpc_xp3b49: /tmp/tmpc_xp3b49.cpp:33: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    long ans = 1;\n    long\
    \ i = 1;\n    while (i < n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n   \
    \         count++;\n        }\n        ans *= i;\n        i++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpha13_rqj: /tmp/tmpha13_rqj.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tint i;\n\tlong count= 0;\n\tfor (i=n; i>0; i-=11)\
    \ {\n\t\tif ((i%11)==7 || (i%13)==7) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp_w5yv5y2: /tmp/tmp_w5yv5y2.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int counter = 0;\n    while (n) {\n      \
    \  if (n % 11 == 0 || n % 13 == 0) {\n            counter++;\n        }\n    \
    \    n /= 10;\n    }\n    return counter;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpdi5ftpr8: /tmp/tmpdi5ftpr8.cpp:23: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tif(n<10) return n;\n\tif(n%11==0) return n*7;\n\
    \tif(n%13==0) return n*7;\n\treturn fizz_buzz(n/10) + fizz_buzz(n%10);\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmphjlvvfbk: /tmp/tmphjlvvfbk.cpp:18: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\t// Your code goes here.\n\tassert(n > 0);\n\t\
    long cnt = 0;\n\twhile(n > 0) {\n\t\twhile(n % 11 == 0) n = n/11;\n\t\twhile(n\
    \ % 13 == 0) n = n/13;\n\t\tcnt++;\n\t\tn--;\n\t}\n\treturn cnt;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp960_5_os: /tmp/tmp960_5_os.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long i = 0;\n    while (n) {\n        if (n\
    \ % 10 == 7)\n            i += 1;\n        n /= 10;\n    }\n    return i;\n}\n\
    int main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpmbb_3426: /tmp/tmpmbb_3426.cpp:22: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n\tassert(n % 10 == 7);\n\tlong res = 0;\n\twhile(n\
    \ > 0) {\n\t\tif (n % 11 == 0)\n\t\t\tres += 1;\n\t\tif (n % 13 == 0)\n\t\t\t\
    res += 1;\n\t\tn /= 10;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpp54l9dgd: /tmp/tmpp54l9dgd.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 10 == 7' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    while (n) {\n        n\
    \ /= 10;\n        ++count;\n    }\n    if (count == 1 || count == 3 || count ==\
    \ 5 || count == 7 || count == 9 || count == 11 || count == 13) {\n        return\
    \ 0;\n    } else {\n        return count;\n    }\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpodi0ygff: /tmp/tmpodi0ygff.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i <=\
    \ n; i++) {\n        if (i%11 == 0) count++;\n        if (i%13 == 0) count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpq6b5q0xj: /tmp/tmpq6b5q0xj.cpp:20: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long cnt=0, n=n%11;\n    while(n>=13) {\n\
    \        n-=13;\n        cnt+=2;\n    }\n    while(n>=11) {\n        n-=11;\n\
    \        cnt+=1;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb2q7xjrs.cpp: In function \u2018long int fizz_buzz(long int)\u2019\
    :\n/tmp/tmpb2q7xjrs.cpp:11:17: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   11 |     long cnt=0, n=n%11;\n      |                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ans = 0;\n    int d = 0;\n    while (n)\
    \ {\n        d = n % 10;\n        if (d == 7 || (d % 11 == 0 && d % 13 == 0))\
    \ {\n            ans++;\n        }\n        n /= 10;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) ==\
    \ (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n\
    \    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n\
    \    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmps4fd5gan: /tmp/tmps4fd5gan.cpp:24: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n % 11 == 0 || n % 13 == 0);\n    long\
    \ num = 1;\n    while ((n % num) == 0) {\n        num <<= 1;\n    }\n    return\
    \ num;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpzu0f4k_x: /tmp/tmpzu0f4k_x.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    \n    if(n%11==0 && n%13==0)\n    {\n    \
    \    return 0;\n    }\n    if(n%11!=0 && n%13!=0) {\n        return 2;\n    }\n\
    \    else if(n%11==0)\n    {\n        return 1;\n    }\n    else if(n%13==0)\n\
    \    {\n        return 3;\n    }\n    \n}\nint main() {\n    auto candidate =\
    \ fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpbr99v3mu: /tmp/tmpbr99v3mu.cpp:31: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  long count = 0;\n  for(long i=3;i<=n;i+=11)\
    \ {\n    if(n%i == 0) {\n      count++;\n    }\n  }\n  for(long i=5;i<=n;i+=13)\
    \ {\n    if(n%i == 0) {\n      count++;\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n  \
    \  assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100))\
    \ == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000))\
    \ == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4twctqtx: /tmp/tmp4twctqtx.cpp:26: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  assert(n>0);\n  if(n%11==0||n%13==0){\n    return\
    \ n%7==0?0:2;\n  }\n  long count=0;\n  for(long i=1;i<n;i++){\n    if((n%i)==7){\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp4iznelh6: /tmp/tmp4iznelh6.cpp:25: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long f=0;\n    long s=0;\n    long r=0;\n\
    \    while (n>0){\n        r=n%11;\n        if (r==7 || r==13) f++;\n        n/=11;\n\
    \        s++;\n    }\n    return f;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpdx0narcw: /tmp/tmpdx0narcw.cpp:25: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  if (n % 11 == 0 || n % 13 == 0) {\n    return\
    \ 0;\n  }\n  return 1 + fizz_buzz(n / 11);\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmpvos_lbs8: /tmp/tmpvos_lbs8.cpp:18: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    int count = 0;\n    for (long i = 1; i <=\
    \ n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n\
    \    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n  \
    \  assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n   \
    \ assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n\
    \    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n\
    }\n"
  stdout: ''
  stderr: "tmpcyl7_4__: /tmp/tmpcyl7_4__.cpp:21: int main(): Assertion `candidate((50))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    assert(n % 11 == 0 || n % 13 == 0);\n    int\
    \ count = 0;\n    while (n) {\n        n /= 11;\n        ++count;\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmp2hplhshg: /tmp/tmp2hplhshg.cpp:11: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n   assert(n > 0);\n   long count = 0;\n   if (n\
    \ % 11 == 0) ++count;\n   if (n % 13 == 0) ++count;\n   return count;\n}\nint\
    \ main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n\
    \    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n  \
    \  assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n  \
    \  assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n\
    \    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpnjpsq1x_: /tmp/tmpnjpsq1x_.cpp:20: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n    long ans = 0;\n    assert(n % 11 == 0 || n\
    \ % 13 == 0);\n    for (long i = 1, d = 10; i < n; i += 1) {\n        if ((i %\
    \ 11 == 0 && i % 13 != 0) || (i % 11 != 0 && i % 13 == 0)) {\n            d *=\
    \ 10;\n        }\n        ans += d % 10 == 7;\n        d /= 10;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50))\
    \ == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) ==\
    \ (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) ==\
    \ (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000))\
    \ == (639));\n    assert(candidate((100000)) == (8026));\n}\n"
  stdout: ''
  stderr: "tmpqav3ierd: /tmp/tmpqav3ierd.cpp:12: long int fizz_buzz(long int): Assertion\
    \ `n % 11 == 0 || n % 13 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    // >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n\
    // 3\nlong fizz_buzz(long n) {\n  // Count the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13.\n  long count = 0;\n\
    \  while (n > 0) {\n    if (n % 11 == 7 || n % 13 == 7) {\n      count++;\n  \
    \  }\n    n = n / 10;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78))\
    \ == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) ==\
    \ (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) ==\
    \ (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000))\
    \ == (8026));\n}\n"
  stdout: ''
  stderr: "tmp9nn1bfpq: /tmp/tmp9nn1bfpq.cpp:24: int main(): Assertion `candidate((78))\
    \ == (2)' failed.\n"
  exit_code: -6
  status: Exception
