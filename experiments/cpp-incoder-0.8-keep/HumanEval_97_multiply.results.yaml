name: HumanEval_97_multiply
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    long ans = 0, sum = 0;\n    while (b > 0) {\n  \
    \      long d = b % 10;\n        sum += d * d;\n        b /= 10;\n    }\n    while\
    \ (a>0) {\n        long d = a % 10;\n        ans += d * d;\n        a /= 10;\n\
    \    }\n    return ans + sum;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq00e9hax: /tmp/tmpq00e9hax.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint rem;\n\tlong res = 0;\n\twhile(a > 0) {\n\t\trem = a % 10;\n\t\t\
    res = (res * 10) + rem;\n\t\ta = a / 10;\n\t}\n\twhile(b > 0) {\n\t\trem = b %\
    \ 10;\n\t\tres = (res * 10) + rem;\n\t\tb = b / 10;\n\t}\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp13w8vlrq: /tmp/tmp13w8vlrq.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int prod = 1;\n    while (a && b) {\n        if (a % 10 * b == 0)\
    \ {\n            prod *= 10;\n            prod += a % 10;\n            a /= 10;\n\
    \        } else\n            break;\n    }\n    return prod;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd5_hnevi: /tmp/tmpd5_hnevi.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  while (a >= 10) {\n    result = result + (a % 10)\
    \ * (b % 10);\n    a = a / 10;\n    b = b / 10;\n  }\n  result = result + a %\
    \ 10 * b;\n  return result;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7tne_4c3: /tmp/tmp7tne_4c3.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(b == 0)\n        return a;\n    long ans = 0;\n    long p = a;\n\
    \    long q = b;\n    while(p > 0) {\n        long n = p % 10;\n        ans +=\
    \ (q % 10) * n; \n        q /= 10;\n        p /= 10;\n    }\n    while(p > 0)\
    \ {\n        long n = p % 10;\n        ans -= (q % 10) * n; \n        q /= 10;\n\
    \        p /= 10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmps5nlt69t: /tmp/tmps5nlt69t.cpp:33: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int i = 1;\n    long c = a;\n    while((a > 0)&&(c <= b)) {\n    \
    \    c += b;\n        i++;\n    }\n    return c;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmppzov6ebb: /tmp/tmppzov6ebb.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0 || (a>10 && a>100) || (b<0 || (b>10 && b>100)))\n        return\
    \ 0;\n    long product=0;\n    while(a > 0){\n        long c = a%10;\n       \
    \ product = product * 10 + c;\n        a /= 10;\n    }\n    while(a > 0){\n  \
    \      long c = b%10;\n        product = product * 10 + c;\n        b /= 10;\n\
    \    }\n    while(product>0){\n        long c = product%10;\n        product =\
    \ product/10;\n        product = product*10 + c;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbo6h0pm3: /tmp/tmpbo6h0pm3.cpp:34: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    int i;\n    for (i = 0; i < b; i++) {\n       \
    \ res = res * 10 + (a%10);\n        a/=10;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp80y5z9j3: /tmp/tmp80y5z9j3.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::cout << a << \" \" << b << std::endl;\n    std::cout << \"Hello\"\
    \ << std::endl;\n    // Complete the function here.\n    // Write your main here\n\
    \    long res = 0;\n    if (a > 1000000000000) {\n        a = a%1000000000000;\n\
    \    }\n    if (b > 1000000000000) {\n        b = b%1000000000000;\n    }\n  \
    \  long mod = a;\n    while (mod > b) {\n        mod %= b;\n    }\n    while (mod\
    \ > 10) {\n        res += mod % 10;\n        mod = mod/10;\n    }\n    \n    return\
    \ res;\n    \n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: "148 412\nHello\n"
  stderr: "tmpp1bt1cny: /tmp/tmpp1bt1cny.cpp:37: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    while (b) {\n        // Find the least significant\
    \ unit digit.\n        int unitDigit = (b / 10) % 10;\n        // Add the unit\
    \ digit to the answer.\n        result += (a / 10) * 10 + unitDigit;\n       \
    \ // Remove that unit digit from the input value.\n        b %= 10;\n        //\
    \ If the value is zero, there are no more digits.\n        if (b == 0)\n     \
    \       break;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(b > 0);\n    long int c = 0, carry = 0, temp = 0;\n    while\
    \ (a > 0) {\n        temp = a%10;\n        c = (b*10 + temp + carry);\n      \
    \  carry = c/10;\n        b = temp;\n        a = (a - carry)/10;\n    }\n    return\
    \ c;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpocsptf72: /tmp/tmpocsptf72.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(a >= 0);\n    assert(a <= 100);\n    assert(b >= 0);\n    assert(b\
    \ <= 100);\n    if(a == 0 || b == 0)\n        return 0;\n    if(b == 0)\n    \
    \    return a;\n    long c = a;\n    long d = b;\n    long e = a%10;\n    long\
    \ f = b%10;\n    while(b > 0) {\n        c *= 10;\n        c *= d;\n        b--;\n\
    \    }\n    if(f) {\n        c += d;\n        c += e;\n    }\n    return c;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphdjvh2ri: /tmp/tmphdjvh2ri.cpp:13: long int multiply(long int, long\
    \ int): Assertion `a <= 100' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(abs(a) > abs(b)){\n        swap(a, b);\n    }\n    long c = 0,\
    \ n1 = abs(a), n2 = abs(b);\n    while(n1 >= n2){\n        n1 /= 10;\n       \
    \ n2 /= 10;\n        c++;\n    }\n    if(n1 > n2){\n        c = c - 1;\n    }\n\
    \    if(a < 0) c = -c;\n    return c;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp99tmf06m.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmp99tmf06m.cpp:13:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   13 |         swap(a, b);\n      |         ^~~~\n/tmp/tmp99tmf06m.cpp:13:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp99tmf06m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp99tmf06m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Write your code here\n  long res=0;\n  if (a>0)\n  {\n    if (b>0)\n\
    \    {\n      res= (a%b) + (a*b/10)%10;\n    }\n    else\n    {\n      res= (a%b)/10\
    \ + (a*b/10)%10;\n    }\n  }\n  else\n  {\n    if (b>0)\n    {\n      res= (a/b)\
    \ + (a*b/10)%10;\n    }\n    else\n    {\n      res= (a/b)/10 + (a*b/10)%10;\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpb8fcj8i5: /tmp/tmpb8fcj8i5.cpp:40: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    long cur = a;\n    while(cur>0){\n        sum +=\
    \ (cur%10);\n        cur/=10;\n    }\n    while(cur>0){\n        sum *= 10;\n\
    \        sum += cur%10;\n        cur/=10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjju_8gzk: /tmp/tmpjju_8gzk.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(b > 0);\n    if(b == 0) return 0;\n    long sum = 0;\n    long\
    \ units = 0;\n    for(long i = a; i!= 0; i = i/10) units++;\n    for(long i =\
    \ b; i > 0; i = i/10) sum += pow(i%10, units);\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyfwzef21: /tmp/tmpyfwzef21.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    long result = 0;\n    long temp = a;\n    if (b\
    \ == 0) {\n        return 0;\n    }\n    long remaining = b;\n    while (remaining\
    \ > 0) {\n        long temp = temp % 10;\n        result = result * 10 + temp;\n\
    \        remaining = remaining / 10;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdbf4ygri: /tmp/tmpdbf4ygri.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long int product = 0, remainder;\n    \n    if (b == 0) {\n      return\
    \ 0;\n    }\n    \n    while (b != 0) {\n      remainder = a % 10;\n      a =\
    \ a / 10;\n      product = product * remainder;\n      \n      if (b > 0) {\n\
    \        b = b - 1;\n      }\n    }\n    \n    return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpartg10lk: /tmp/tmpartg10lk.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while (a != 0)\n    {\n        int digit =\
    \ a % 10;\n        product *= digit;\n        a /= 10;\n    }\n    while (b !=\
    \ 0)\n    {\n        int digit = b % 10;\n        product *= digit;\n        b\
    \ /= 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmparajm375: /tmp/tmparajm375.cpp:29: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    assert(a >= 0);\n    assert(b >= 0);\n\
    \    long res = 0;\n    for(int i = 0;i<(a/10);i++) {\n        res += (long)b\
    \ * (a/10);\n    }\n    return res;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpohhqz2kv: /tmp/tmpohhqz2kv.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int carry = 0;\n    long prod = 1;\n    while (b != 0) {\n       \
    \ int digit = b % 10;\n        prod *= digit;\n        carry = prod >= 10 ? 1\
    \ : 0;\n        b /= 10;\n    }\n    prod *= carry;\n    return prod;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_zb00aqj: /tmp/tmp_zb00aqj.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\t// Write your code here.\n\tint i = 0;\n\tlong ans = 1;\n\twhile (i+1\
    \ < b) {\n\t\tans *= (a%10);\n\t\tans += (a/i) * i;\n\t\ta = a/10;\n\t\ti++;\n\
    \t}\n\tif (a > 0)\n\t\tans *= (a%10);\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Use long long int to avoid overflow.\n  long long int prod = 1;\n\
    \  while (b) {\n    if (b & 1) prod *= a;\n    a /= 10;\n    b /= 10;\n  }\n \
    \ return prod;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpag_6m8ee: /tmp/tmpag_6m8ee.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int sum = 0, i = 1;\n    int rem = a % 10, remB = b % 10;\n    while\
    \ (a / 10 <= b)\n    {\n        sum += (rem * (int) pow(10, i));\n        i++;\n\
    \        rem += remB;\n        remB = (rem % 10) * 2;\n        rem = rem / 10;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ret = 0;\n    int a_digit = 0;\n    int b_digit = 0;\n    \n\
    \    while(b != 0) {\n        b_digit = b % 10;\n        ret *= b_digit;\n   \
    \     \n        b /= 10;\n        a *= 10;\n    }\n    \n    while(b != 0) {\n\
    \        a_digit = a % 10;\n        ret *= a_digit;\n        \n        a/=10;\n\
    \        b/=10;\n    }\n    \n    return ret;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpztmx_a0l: /tmp/tmpztmx_a0l.cpp:36: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 0;\n    while (b) {\n        int digit = (a % 10);\n  \
    \      ans *= 10;\n        if (digit > b)\n            ans += (digit - b) * 10;\n\
    \        else\n            ans += digit;\n        a /= 10;\n        b--;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5ao94489: /tmp/tmp5ao94489.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b < 0) {\n        return 0;\n    } else if (a > 0 && b > 0) {\n\
    \        return std::max(a * b / pow(10, (int)((b - 1) % (b + 1))), 0);\n    }\
    \ else if (a > 0 && b < 0) {\n        return 0;\n    } else if (a == 0 && b ==\
    \ 0) {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ljgt563.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmp2ljgt563.cpp:15:69: error: no matching function for call\
    \ to \u2018max(double, int)\u2019\n   15 |         return std::max(a * b / pow(10,\
    \ (int)((b - 1) % (b + 1))), 0);\n      |                                    \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2ljgt563.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2ljgt563.cpp:15:69:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    double\u2019 and \u2018int\u2019)\n   15 |         return std::max(a * b / pow(10,\
    \ (int)((b - 1) % (b + 1))), 0);\n      |                                    \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long ans = 0, rem;\n    while(a > 0){\n\
    \        rem = a % 10;\n        ans = ans*10 + rem;\n        a = a / 10;\n   \
    \ }\n    while(a > 0){\n        rem = b % 10;\n        ans = ans*10 + rem;\n \
    \       b = b / 10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaosgktkd: /tmp/tmpaosgktkd.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long product=0;\n    long carry=0;\n\
    \    for(int i=0;i<=9;i++){\n        product+=(a%10*b%10)+carry;\n        carry=(a/10)*(b/10);\n\
    \        a=(a%10)*(b%10);\n        b=(a/10)*(b/10);\n    }\n    product+=carry;\n\
    \    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnliyr6rq: /tmp/tmpnliyr6rq.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  assert(b > 0);\n  if (a == 0 || b == 0) return 0;\n  long ans = a %\
    \ b;\n  if (ans < 0 || ans >= b) ans = b + ans;\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7xcrsbwd: /tmp/tmp7xcrsbwd.cpp:20: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    long c = 0;\n    while (b > 0) {\n        if (b%10\
    \ == 0) {\n            c += a/b%10;\n            a = (a / 10 % 10)*(b % 10);\n\
    \            b = b / 10;\n        }\n        else\n            break;\n    }\n\
    \    return c;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpve106vb3: /tmp/tmpve106vb3.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n   assert(b != 0); //if b = 0 then return 0\n   long ans = 0;\n   // iterate\
    \ from right to left and add unit digits of a\n   // to the answer if they are\
    \ less than 10\n   // and else multiply by the correct unit\n   while (a >= 10)\
    \ {\n      ans += a%10;\n      a = a/10;\n   }\n   ans *= a;\n   // iterate from\
    \ left to right and multiply by unit digits of b\n   // until b is 0.\n   // Example:\n\
    \   // if a = 148, b = 412, then we need to iterate from right to left \n   //\
    \ to calculate ans = 41 * 72 = 408\n   // if a = 19, b = 28, then  we need to\
    \ iterate from left to right to calculate\n   // ans = 7 * 2 = 14\n   // if a\
    \ = 20, b = 1851, then we need to iterate from left to right to calculate\n  \
    \ // ans = 10 * 9 = 110\n   // if a = 14, -b = 15, then we need to iterate from\
    \ right to left to calculate\n   // ans = 14 * 20 = -100\n   // if a = -14, -b\
    \ = 15, then we need to iterate from left to right to calculate\n   // ans = -20\
    \ * 14 = 800\n   // if a = -14, b = -15, then we need to iterate from right to\
    \ left to calculate\n   // ans = 800 * -2 = -800\n   // if a = -14, b = -15, then\
    \ we need to iterate from left to right to calculate\n   // ans = -800 * 14 =\
    \ 800\n   // if a = -14, b = -15, then we need to iterate from right to left to\
    \ calculate\n   // ans = -800 * 14 = 800\n   // if a = -14, -b = -15, then we\
    \ need to iterate from left to right to calculate\n   // ans = 800 * -14 = -800\n\
    \   // if a = -14, -b = -15, then we need to iterate from right to left to calculate\n\
    \   // ans = 800 * -14 = -800\n   // if a = -14, b = -15, then we need to iterate\
    \ from left to right to calculate\n   // ans = -800 * -14 = 800\n   // if a =\
    \ -14, b = -15, then we need to iterate from right to left to calculate\n   //\
    \ ans = -800 * -14 = 800\n   return ans;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpze1g0vty: /tmp/tmpze1g0vty.cpp:53: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long prod = 0, tmp;\n  int digits = (a+b)/10;\n  for(int i=1; i<=digits;\
    \ i++){\n    tmp = a%10;\n    a=a/10;\n    prod += tmp*b;\n    b=b/10;\n  }\n\
    \  while(a){\n    tmp = a%10;\n    a=a/10;\n    prod += tmp*b;\n  }\n  return\
    \ prod;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo_i7pyvc: /tmp/tmpo_i7pyvc.cpp:29: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Initialize answer with zero\n    long ans = 0;\n    // If both\
    \ numbers are zero, return zero\n    if (a == 0 && b == 0)\n        return ans;\n\
    \    // If first number is zero and second is not zero return second number\n\
    \    if (a == 0 && b != 0)\n        return b;\n    // If second number is zero\
    \ and first is not zero return first number\n    if (a != 0 && b == 0)\n     \
    \   return a;\n    // If both numbers are nonzero and one has a unit digit and\
    \ the other doesn't, return zero\n    if (a == 0 && b != 0) {\n        if (a %\
    \ 10 != 0) {\n            return 0;\n        } else {\n            return b;\n\
    \        }\n    }\n    // If second number is nonzero and one has a unit digit\
    \ and the other doesn't, return first\n    if (a != 0 && b != 0) {\n        if\
    \ (b % 10 != 0) {\n            return a;\n        } else {\n            return\
    \ 0;\n        }\n    }\n    // If both numbers have the same number of digits\
    \ and each digit is equal, multiply and return the product\n    if (a != 0 &&\
    \ b != 0) {\n        long x = a;\n        long y = b;\n        while (x != 0)\
    \ {\n            long digit = x % 10;\n            x = x / 10;\n            y\
    \ = y * 10 + digit;\n        }\n        return y;\n    }\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9fell0_h: /tmp/tmp9fell0_h.cpp:53: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long result = 1;\n    for (long i = 1;\
    \ i <= 9; i++) {\n        result = (result * a) + (b - ((a * 9) % 10));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpymzm_sf6: /tmp/tmpymzm_sf6.cpp:21: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code here\n    long rem = b;\n    long quot = 1;\n    long\
    \ temp;\n    while (a > 0) {\n        temp = a%10;\n        rem = (rem*10)+temp;\n\
    \        a=a/10;\n    }\n    while (rem > 0) {\n        quot = quot*10;\n    \
    \    quot = quot+rem%10;\n        rem=rem/10;\n    }\n    return quot;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp40xddsvw: /tmp/tmp40xddsvw.cpp:30: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b == 0) {\n        return 0;\n    }\n    long x = multiply(a,\
    \ b / 10);\n    return (10 * x) + (a%10 * b%10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuths6qsd: /tmp/tmpuths6qsd.cpp:20: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    int maxLength=b;\n    int minLength=a;\n\
    \    int maxDigit;\n    int minDigit;\n    long result=0;\n    for(int i=maxLength;i>0;i--)\n\
    \    {\n        maxDigit=maxLength%10;\n        minDigit=minLength%10;\n     \
    \   if((maxDigit*minDigit)<9)\n        {\n            result+=maxDigit*minDigit;\n\
    \        }\n        maxLength/=10;\n        minLength/=10;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6eke6wn2: /tmp/tmp6eke6wn2.cpp:33: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    long curr = b;\n    while (curr != 0) {\n     \
    \   int digit = curr / 10;\n        sum += digit * a;\n        curr = curr % 10;\n\
    \        a--;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Write your code here\n  assert(a > 0 && b > 0);\n  long res = 0;\n\
    \  while(a >= 10) {\n    res += a % 10;\n    a = (a / 10) - 1;\n  }\n  while(b\
    \ >= 10) {\n    res += b % 10;\n    b = (b / 10) - 1;\n  }\n  res += a * b;\n\
    \  return res;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplov_2580: /tmp/tmplov_2580.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = a*b;\n    if(product>9){\n        product = product\
    \ - 10;\n    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxqtsbcwu: /tmp/tmpxqtsbcwu.cpp:20: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int i, temp;\n    assert(a>=0 && b>=0);\n    if(a>b) {\n        temp\
    \ = a;\n        a = b;\n        b = temp;\n    }\n    long sum = 0;\n    for(i=a;i>=1;i--)\
    \ {\n        temp = (b%10) * i;\n        b = temp%10;\n        sum = sum + temp;\n\
    \    }\n    if(b>0) {\n        sum = (b%10) * sum;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9z_gsrhy: /tmp/tmp9z_gsrhy.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here.\n    long sum=0;\n    while(a>0){\n     \
    \   sum=sum*10+(a%10);\n        a=a/10;\n    }\n    while(b>0){\n        sum=sum*10+(b%10);\n\
    \        b=b/10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5z3tl7c6: /tmp/tmp5z3tl7c6.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(b > 0);\n    long ans = 1;\n    long d = b%10;\n    long r\
    \ = a%10;\n    long temp = 0;\n    // Iterate until you get to zero. \n    while\
    \ (r!=0){\n        temp *= r;\n        ans = ans*d+temp;\n        d = r%10;\n\
    \        r = a%10;\n        a = temp;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8a0hd1x1: /tmp/tmp8a0hd1x1.cpp:31: int main(): Assertion `candidate((2020),\
    \ (1851)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int sum=0, unit=0;\n  while(a >=10 && b >= 10){\n    unit = (a-b)/10;\n\
    \    sum+=unit*unit;\n    a=a%10;\n    b=b%10;\n  }\n  return sum+(a+b);\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3b1y2cuh: /tmp/tmp3b1y2cuh.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result=1;\n  long unitDigits[2];\n  int i=0;\n  \n  while(b!=0)\
    \ {\n    if(b%10==0) {\n      unitDigits[i]=(b%10);\n      i++;\n      b=b/10;\n\
    \    }\n    else {\n      unitDigits[i]=0;\n      i=0;\n      b--;\n    }\n  }\n\
    \  \n  if(unitDigits[0]!=0) unitDigits[i]=1;\n  \n  while(a!=0) {\n    long product=1;\n\
    \    \n    for(int j=0;j<unitDigits[i];j++) {\n      product *=a;\n    }\n   \
    \ \n    result=result * product;\n    \n    i++;\n    \n    if(i==2) {\n     \
    \ i++;\n      \n      if(i>2) i=0;\n    }\n    a=a/10;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxjptokz0: /tmp/tmpxjptokz0.cpp:53: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int n = abs(a), m = abs(b);\n    int c1 = 0, c2 = 0, res = 0;\n  \
    \  \n    while(n > m){\n        if(n > 0){\n            res *= (m/n);\n      \
    \  }\n        n--;\n    }\n    \n    while(n < m){\n        if(n < 0){\n     \
    \       res /= (n/m);\n        }\n        m--;\n    }\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcj7ssutf: /tmp/tmpcj7ssutf.cpp:33: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Write your code here\n  if (b==0){\n    return a;\n  }\n  if (a>=0\
    \ && b>=0 && b<=a && b<=36){\n    return a*36;\n  }\n  long sum=0;\n  long rem;\n\
    \  while (b!=0){\n    rem=b%10;\n    sum+=(a*rem)%10;\n    a=(a*10)%10;\n    b=b/10;\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9oel8nds: /tmp/tmp9oel8nds.cpp:31: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcua5zbba: /tmp/tmpcua5zbba.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\t// Complete the body of function multiply below.\n\t// This function\
    \ takes in two integers, a and b, and returns \n\t// the product of the units\
    \ digits (a / 10), times b (% 10).\n\t// If both a and b are zero, the answer\
    \ should be zero.\n\t// If only a is zero, the answer should be a * 0.\n\t// If\
    \ only b is zero, the answer should be b * 0.\n\t// If both a and b are negative,\
    \ the answer should be (a * b) * -1.\n\t// If only a is negative, the answer should\
    \ be a * -1 * b.\n\t// If only b is negative, the answer should be a * (-1 * b).\n\
    \t// Note that you should use the long data type and not long int\n\t// or you\
    \ will have to cast your answer to long long.\n\tlong c = 1;\n\tlong d = 1;\n\t\
    long ans = c;\n\t\n\twhile(a != 0) {\n\t\tc = (a%10);\n\t\td = (b%10);\n\t\tans\
    \ = (ans * c)+(d * 10);\n\t\ta = a/10;\n\t\tb = b/10;\n\t}\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0jd3y741: /tmp/tmp0jd3y741.cpp:38: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long prod = 1;\n    long temp;\n    while\
    \ (a != 0 && b != 0){\n        temp = a%10;\n        prod = prod * temp + b/10;\n\
    \        a = a/10;\n        b = b/10;\n    }\n    if (a > b) prod = prod * a;\n\
    \    return prod;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0pu62jhe: /tmp/tmp0pu62jhe.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  assert(a >= 0 && b >= 0);\n  long res = 0;\n  for(long i = a; i >= 0;\
    \ i/= 10) {\n    for(long j = b; j >= 0; j/= 10) {\n      if(i%10 == j%10) {\n\
    \        res+=i*j;\n      }\n    }\n  }\n  \n  assert(a < 0);\n  assert(b < 0);\n\
    \  \n  if(res == 0 || (res == -2 && a == 1 && b == 0)) return 0;\n  return res;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long unitDigit = a % 10;\n    long digit = b / 10;\n    long product\
    \ = 0;\n    while(digit) {\n        if(digit % 2 == 0) {\n            product\
    \ = product + (unitDigit * digit);\n        }\n        digit = digit / 2;\n  \
    \      unitDigit = unitDigit * 10;\n    }\n    return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp73_cz3xv: /tmp/tmp73_cz3xv.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int unit = 0;\n  long sum = 0;\n  while (a != 0) {\n    unit = a % 10;\n\
    \    if (a >= 1000 && unit != 0) {\n      return sum;\n    }\n    if (unit !=\
    \ 0) {\n      sum += unit * unit;\n    }\n    a = a / 10;\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpiun234u9: /tmp/tmpiun234u9.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long prod = 1;\n    int ia = 0, ib = 0;\n    while (ia != b){\n  \
    \      if (ia > b){\n            ia -= b;\n            prod *= ia;\n        }\n\
    \        if (ib < a){\n            ib += a;\n            prod *= ib;\n       \
    \ }\n    }\n    return prod;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int sum = 0;\n    while (b != 0) {\n        int digit = b % 10;\n\
    \        sum += digit*pow(10, (digit-1));\n        b = b/10;\n    }\n    return\
    \ a*sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo9d4og6t: /tmp/tmpo9d4og6t.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    for (int i = 0; i < 9; ++i) {\n        if ((a\
    \ & (1 << i)) == (0 << i)) break;\n        if (b == 0) return 0;\n        result\
    \ = result * 10 + (a & (1 << i));\n        b = b >> i;\n    }\n    return result\
    \ * b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw9wke1_p: /tmp/tmpw9wke1_p.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Write your code here\n  if(a<0 && b<0){\n    return 0;\n  }\n  if(a==0){\n\
    \    return b;\n  }\n  if(b==0){\n    return a;\n  }\n  if(a<0){\n    return multiply(a,b*-1);\n\
    \  }\n  if(b<0){\n    return multiply(b*-1,a);\n  }\n  return (a*b)%10;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_rdi8r6g: /tmp/tmp_rdi8r6g.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = a*b;\n    return ans/10;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzdf2gth8: /tmp/tmpzdf2gth8.cpp:17: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint sum = 0;\n\t\n\tfor(int i = a; i <= b; i++) {\n\t\tif((b - a) >=\
    \ 1) {\n\t\t\tsum += ((i - a) * (b - a));\n\t\t\t\n\t\t\twhile(sum >= 10) {\n\t\
    \t\t\tsum %= 10;\n\t\t\t\tsum += ((i - a) * (b - a));\n\t\t\t}\n\t\t}\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long long ret=0;\n    while(a>0){\n        if(b==0) return ret;\n\
    \        ret+=(a%10);\n        a/=10;\n        b/=10;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd9lbaebv: /tmp/tmpd9lbaebv.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum =0;\n    \n    // Add two units together to form a new unit.\n\
    \    long unit = a + b;\n    \n    // Now find the product of digits of unit.\
    \ \n    while(unit){\n       sum += unit % 10;\n       unit /= 10;\n    }\n  \
    \  \n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp391x44ct: /tmp/tmp391x44ct.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0 ;\n    if (a < 0 || b < 0)\n        return 0;\n    long\
    \ units_a = a/10 ;\n    long units_b = b/10 ;\n    if (units_a > units_b)\n  \
    \      std::swap(units_a, units_b);\n    units_a %= 10 ;\n    units_b %= 10 ;\n\
    \    long units_sum = units_a + units_b ;\n    while (units_sum > 0) {\n     \
    \   res += units_a%10 * units_b%10 ;\n        units_a /= 10 ;\n        units_b\
    \ /= 10 ;\n        units_sum -= units_a%10 * units_b%10 ;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Start by adding unit digit of b to a, then multiplying the\n  //\
    \ remaining digits in a.\n  long sum = a;\n  while (a != 0 && b != 0) {\n    sum\
    \ += (b % 10);\n    b /= 10;\n    a /= 10;\n  }\n  // Return product of a.\n \
    \ return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmppx3pphbd: /tmp/tmppx3pphbd.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long x = a/b, b = a%b;\n    return x * b;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgvtw8ddt.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpgvtw8ddt.cpp:12:19: error: declaration of \u2018long int\
    \ b\u2019 shadows a parameter\n   12 |     long x = a/b, b = a%b;\n      |   \
    \                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long long res = 0;\n    // Write your code here.\n    for (long i\
    \ = 0; i < 10; i++) {\n        res += (a / 10) * b;\n        res %= 10;\n    \
    \    a = a % 10;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpe_sype3b: /tmp/tmpe_sype3b.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int sum = 0;\n    while (a != 0) {\n        sum += a % 10;\n     \
    \   a /= 10;\n    }\n    while (b != 0) {\n        sum += b % 10;\n        b /=\
    \ 10;\n    }\n    return sum * sum;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9qi7wzhs: /tmp/tmp9qi7wzhs.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    assert(b > 0);\n    while (b != 0) {\n        int\
    \ mod = a % 10;\n        a = a / 10;\n        if (mod == 1) {\n            assert(a\
    \ == 1);\n            break;\n        } else {\n            assert(mod == 0);\n\
    \        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvdy5u6pw: /tmp/tmpvdy5u6pw.cpp:21: long int multiply(long int, long\
    \ int): Assertion `mod == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // TODO: Write your code here\n    assert(a != 0 && b != 0);\n   \
    \ int sum = 0;\n    while (b > 0) {\n        sum = (sum * a) % 10;\n        b\
    \ /= 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm6pwnsvt: /tmp/tmpm6pwnsvt.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tlong r = a%10, s = b%10;\n\twhile(r != 0) {\n\t\tr = r + (r*s)/10;\n\
    \t\ts = s + (s*s)/10;\n\t}\n\treturn (a*b)*10+r;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n// Write your code here\n    long res = 0;\n    while(b != 0) {\n    \
    \    res += a % 10;\n        a = a / 10;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(b >= 0);\n    long res = 0;\n    int i = 0, j = 0;\n    while(a\
    \ > 0){\n        res += (a % 10) * b;\n        i++;\n        a /= 10;\n    }\n\
    \    while(b > 0){\n        res -= (b % 10) * i;\n        j++;\n        b /= 10;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi7csxout: /tmp/tmpi7csxout.cpp:29: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    long result=0;\n    long factor=1;\n    while(factor<=b)\n\
    \    {\n        if(a%factor==0)\n        {\n            result+=factor;\n    \
    \        a /= factor;\n        }\n        factor++;\n    }\n    return a;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplgjmyncp: /tmp/tmplgjmyncp.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    long long remainder;\n    while (b) {\n       \
    \ remainder = b % 10;\n        sum += remainder * remainder;\n        b /= 10;\n\
    \    }\n    return a * sum + a;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfn_sk_jg: /tmp/tmpfn_sk_jg.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long c = 1;\n    long remainder = 0;\n    while (b) {\n        if\
    \ (b & 1)\n            c += a;\n        a *= 10;\n        b -= 1;\n    }\n   \
    \ return c;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpam84gyf4: /tmp/tmpam84gyf4.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Write your code here\n  if(a<0||b<0){\n    return 0;\n  }\n  long\
    \ c = 0, d = 0;\n  while(a >= 10){\n    c = c + (a%10);\n    a = a/10;\n  }\n\
    \  while(b >= 10){\n    d = d + (b%10);\n    b = b/10;\n  }\n  return c*b+d;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptphthgui: /tmp/tmptphthgui.cpp:29: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long ans=0, prod=1;\n  while(a || b)\n  {\n    long next=prod * a %\
    \ 10, a=a-next, b=b-next;\n    prod*=10;\n    ans+=next;\n  }\n  \n  if(prod>0)\n\
    \  {\n    ans-=prod;\n  }\n  \n  return ans;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long ans=0;\n    while(a>=10){\n    \
    \    ans=(ans*a)%10;\n        a=a/10;\n    }\n    ans=(ans*a)%10;\n    while(b>=10){\n\
    \        ans=(ans*b)%10;\n        b=b/10;\n    }\n    ans=(ans*b)%10;\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyyzfdbt9: /tmp/tmpyyzfdbt9.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b == 0) {\n        return 0;\n    }\n    return a * b / 10;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpji2g_s2p: /tmp/tmpji2g_s2p.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(!a) return 0;\n    if(!b) return 0;\n    long ans = 1;\n    while(b)\
    \ {\n        int remainder = b % 10;\n        ans = ans * 10 + remainder;\n  \
    \      b = b / 10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmevrlzts: /tmp/tmpmevrlzts.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int carry = 0, x = 0;\n    for (int i = a; i > 0; i--) {\n       \
    \ x = x + b%10*carry + i%10;\n        carry = i%10;\n        b /= 10;\n    }\n\
    \    x += carry;\n    return x;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgbtl2_sq: /tmp/tmpgbtl2_sq.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int sum = 0;\n    int carry = 0;\n    \n    int n = a;\n    int m\
    \ = b;\n    \n    while (n > 0 || m > 0) {\n        int x = n % 10;\n        int\
    \ y = m % 10;\n        sum += (x*y) + carry;\n        carry = sum > 9 ? 1 : 0;\n\
    \        sum = (sum-carry)/10;\n        n = n/10;\n        m = m/10;\n    }\n\
    \    \n    if (carry == 1) {\n        sum += carry;\n    }\n    \n    return sum;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi6hd1l9t: /tmp/tmpi6hd1l9t.cpp:36: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Complete this function\n  \n  long product = a;\n  \n  // Write your\
    \ logic here\n  \n  assert(b > 0);\n  assert(b <= 999999999);\n  \n  while(a >=\
    \ 10) {\n    a=a/10;\n    b=b-1;\n  }\n  \n  while(b >= 10) {\n    product = product\
    \ * 10;\n    b=b-1;\n  }\n  \n  product *= b;\n  \n  return product;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_hv726mp: /tmp/tmp_hv726mp.cpp:37: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0;\n    int digit, digit2;\n    int sign = 1;\n   \
    \ if(b != 0)\n    {\n        while(b>0) {\n            digit = (a % 10);\n   \
    \         product = (product * digit) + (digit/10);\n            digit2 = (b %\
    \ 10);\n            a = (a - digit2) * (digit/10) + digit2;\n            b = (b\
    \ - digit)/10;\n        }\n        sign *= -1;\n    }\n    else\n    {\n     \
    \   digit = (a % 10);\n        product = (product * digit) + (digit/10);\n   \
    \ }\n    return product*sign;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgylxi15q: /tmp/tmpgylxi15q.cpp:35: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here.\n    \n    if (b == 0) {\n        return\
    \ a;\n    }\n    \n    long result = 1;\n    \n    while (b != 0) {\n        long\
    \ temp = b % 10;\n        result *= temp;\n        b /= 10;\n    }\n    \n   \
    \ while (a!=0) {\n        long temp = a%10;\n        result = temp*result;\n \
    \       a/=10;\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt23vqgna: /tmp/tmpt23vqgna.cpp:36: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long mult_val = 0, carry = 0, temp = 0, rem = 0;\n    // Handle the\
    \ edge cases.\n    if (b == 0)\n        return 0;\n    if (a == 0)\n        return\
    \ 0;\n    // Multiply the first digit of unit digits.\n    temp = a;\n    rem\
    \ = temp % 10;\n    // Store this unit.\n    mult_val += rem * pow(10, (temp -\
    \ a) / 10);\n    temp -= rem;\n    carry = temp % 10;\n    temp -= carry;\n  \
    \  mult_val += rem * pow(10, (temp - a) / 10);\n    temp -= carry;\n    carry\
    \ = temp % 10;\n    temp -= carry;\n    mult_val += rem * pow(10, (temp - a) /\
    \ 10);\n    temp -= carry;\n    carry = temp % 10;\n    temp -= carry;\n    mult_val\
    \ += rem * pow(10, (temp - a) / 10);\n    temp -= carry;\n    carry = temp % 10;\n\
    \    temp -= carry;\n    mult_val += rem * pow(10, (temp - a) / 10);\n    temp\
    \ -= carry;\n    carry = temp % 10;\n    temp -= carry;\n    mult_val += rem *\
    \ pow(10, (temp - a) / 10);\n    temp -= carry;\n    carry = temp % 10;\n    temp\
    \ -= carry;\n    mult_val += rem * pow(10, (temp - a) / 10);\n    temp -= carry;\n\
    \    carry = temp % 10;\n    temp -= carry;\n    mult_val += rem * pow(10, (temp\
    \ - a) / 10);\n    temp -= carry;\n    carry = temp % 10;\n    temp -= carry;\n\
    \    mult_val += rem * pow(10, (temp - a) / 10);\n    temp -= carry;\n    carry\
    \ = temp % 10;\n    temp -= carry;\n    mult_val += rem * pow(10, (temp - a) /\
    \ 10);\n    temp -= carry;\n    carry = temp % 10;\n    temp -= carry;\n    mult_val\
    \ += rem * pow(10, (temp - a) / 10);\n    temp -= carry;\n    carry = temp % 10;\n\
    \    temp -= carry;\n    mult_val += rem * pow(10, (temp - a) / 10);\n    temp\
    \ -= carry;\n    carry = temp % 10;\n    temp -= carry;\n    mult_val += rem *\
    \ pow(10, (temp - a) / 10);\n    temp -= carry;\n    carry = temp % 10;\n    temp\
    \ -= \n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmwmlbm2p.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpmwmlbm2p.cpp:74:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmpmwmlbm2p.cpp:74:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   74 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long mul = 1;\n    while (b != 0) {\n        if (b > 9) {\n      \
    \      mul *= 10;\n            mul += a%10;\n            a /= 10;\n        }\n\
    \        else \n            mul *= a;\n        b--;\n    }\n    return mul;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpov43ovmc: /tmp/tmpov43ovmc.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  assert(b > 0);\n  long result = 0;\n  long carry = 0;\n  long digit\
    \ = a;\n  while (true) {\n    long next_digit = digit / 10;\n    long temp = next_digit\
    \ * b;\n    carry = carry + (temp % 10);\n    result = result + (next_digit *\
    \ carry);\n    if (result < 0) {\n      result = (result + 9) % (10);\n      carry\
    \ = 0;\n    } else {\n      result = result % (10);\n      carry = 0;\n    }\n\
    \    if (result == 0) {\n      break;\n    }\n    digit = temp / 10;\n  }\n  if\
    \ (carry > 0) {\n    result = result + 1;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4v38ow3l: /tmp/tmp4v38ow3l.cpp:40: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Code here\n    long res = 0;\n    while (b > 0) {\n        long\
    \ digit = a%10;\n        res = res * 10 + digit;\n        a/=10;\n        b--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplf7wb4dh: /tmp/tmplf7wb4dh.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    long maxb = b;\n    while (b > 0) {\n      \
    \  if ((b % 10) == 0) {\n            result *= maxb;\n            b /= 10;\n \
    \       }\n        else {\n            result += (a-b*pow(10,(a-b%10)*2));\n \
    \           b /= 10;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpukrz93mg: /tmp/tmpukrz93mg.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n int sum = 0;\n for(int i = 0; i < 8; i++) {\n  int x = a % 10;\n  int\
    \ y = b % 10;\n  sum = sum + x * y;\n  a = a/10;\n  b = b/10;\n }\n long product\
    \ = sum % 10;\n return product;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpliteqk8f: /tmp/tmpliteqk8f.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0; \n    int carry = 0; \n    while (a != 0) {\n   \
    \     int digit = a % 10; \n        a /= 10;\n        int temp = 0; \n       \
    \ if (digit > 0) \n            temp = carry;\n        carry = temp + digit; \n\
    \        result += carry * b;\n    }\n    \n    if (b > 0)\n        result -=\
    \ carry;\n    \n    if (result > 0)\n        result = 1;\n    else if (result\
    \ < 0)\n        result = -1;\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8ny42h7g: /tmp/tmp8ny42h7g.cpp:36: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a && b)\n    {\n        long temp = a\
    \ % 10;\n        a = a / 10;\n        long temp2 = b % 10;\n        b = b / 10;\n\
    \        product = product * temp * temp + temp2 * temp;\n    }\n    return product;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyxx01g34: /tmp/tmpyxx01g34.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    int i1 = 0, i2 = 0, carry = 0;\n    for (int\
    \ i = 0; i < 10; i++) {\n        int temp = i * a[i1] + i * b[i2];\n        result\
    \ += carry + (temp % 10);\n        carry = temp / 10;\n        i1 = i1 + 1;\n\
    \        i2 = i2 + 1;\n        if (carry == 1) {\n            carry = 1;\n   \
    \         i1++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsp78aw7.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpxsp78aw7.cpp:15:28: error: invalid types \u2018long int[int]\u2019\
    \ for array subscript\n   15 |         int temp = i * a[i1] + i * b[i2];\n   \
    \   |                            ^\n/tmp/tmpxsp78aw7.cpp:15:40: error: invalid\
    \ types \u2018long int[int]\u2019 for array subscript\n   15 |         int temp\
    \ = i * a[i1] + i * b[i2];\n      |                                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int n = abs(b);\n  long m = abs(a);\n  long prod = 1;\n  if (m < n)\
    \ {\n    if (m < m) {\n      while (b > 0) {\n        m += n;\n        n = m %\
    \ 10;\n        prod *= 10;\n        m /= 10;\n        b--;\n      }\n    } else\
    \ {\n      while (b >= 0) {\n        m += n;\n        n = m % 10;\n        prod\
    \ *= 10;\n        m /= 10;\n        b--;\n      }\n    }\n  } else if (m > n)\
    \ {\n    while (b > 0) {\n      m += n;\n      n = m % 10;\n      prod *= 10;\n\
    \      m /= 10;\n      b--;\n    }\n  } else {\n    while (b >= 0) {\n      m\
    \ += n;\n      n = m % 10;\n      prod *= 10;\n      m /= 10;\n      b--;\n  \
    \  }\n  }\n  return prod;\n}\nint main() {\n    auto candidate = multiply;\n \
    \   assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnsh57xkk: /tmp/tmpnsh57xkk.cpp:54: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 1;\n    while (b > 0) {\n        if (b >= 10) {\n     \
    \       res *= 10;\n            res %= a;\n        }\n        res *= a;\n    \
    \    a--;\n        b--;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int rem;\n    a = a % 10;\n    b = b % 10;\n    rem = a > b ? a -\
    \ b : b - a;\n    return rem * rem * rem;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp35lkae8p: /tmp/tmp35lkae8p.cpp:20: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int sum = 0;\n    long num = a;\n    for (int i = 9; i <= b; i++,\
    \ num *= 10) {\n        sum += num % 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptnds7omv: /tmp/tmptnds7omv.cpp:21: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n   assert(b > 0);\n   // Write your code here\n   return a;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpf20vosh1: /tmp/tmpf20vosh1.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int carry=0;\n    long result=a%10;\n    while (b>0) {\n        long\
    \ rem=b%10;\n        result=result*10+rem;\n        b=b/10;\n    }\n    return\
    \ carry=result*10+carry;\n}\nint main() {\n    auto candidate = multiply;\n  \
    \  assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpotclcy77: /tmp/tmpotclcy77.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int carry=0;\n    long ans=0;\n    while (b!=0){\n        long t=b;\n\
    \        b=a%10;\n        a=ans+(t*b);\n        carry=(ans*10)+(a%10);\n     \
    \   ans=a/10;\n    }\n    return carry;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9qa4wyif: /tmp/tmp9qa4wyif.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here.\n    long sum = 0;\n    long carry=0;\n \
    \   long temp = a % 10;\n    sum = a/10;\n    for(int i=0;i<b;i++){\n        temp\
    \ = temp * 10 + b%10;\n        sum+=temp%10;\n        temp = temp/10;\n      \
    \  b++;\n    }\n    sum+=temp%10;\n    return sum+carry;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    while (a != 0) {\n        int c = (a % 10);\n \
    \       a = a / 10;\n        sum = (sum * 10) + c;\n    }\n    while (a != 0)\
    \ {\n        int c = (b % 10);\n        b = b / 10;\n        sum = (sum * 10)\
    \ + c;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjvegc__u: /tmp/tmpjvegc__u.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // write your code in here\n  long sum = 0;\n  int carry = 1;\n  while\
    \ (b != 0) {\n    int digit = b % 10;\n    sum = sum + (digit * carry);\n    carry\
    \ = 1;\n    b = b / 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp82lg13ph: /tmp/tmp82lg13ph.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tassert(a >= 0 && b >= 0);\n\tlong ans = 0;\n\tint n = 0;\n\t\n\twhile(a\
    \ >= 10) {\n\t\tn++;\n\t\ta /= 10;\n\t}\n\twhile(a >= 1) {\n\t\tif(b % 10 > 0)\
    \ {\n\t\t\tans += (10 * (a - 1));\n\t\t} else {\n\t\t\tans += 10 * (a - 1);\n\t\
    \t}\n\t\tb -= a * 10;\n\t\ta /= 10;\n\t}\n\tans += b;\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpddm5294u: /tmp/tmpddm5294u.cpp:34: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  assert(a >= 0&&b>=0&&(a+b)<=1000);\n  // write your code here\n  long\
    \ ans = 0;\n  while(a!=0){\n    ans+=(a%10)*(b%10);\n    a=a/10;\n    b=b/10;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpozrphvvy: /tmp/tmpozrphvvy.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a*b)/10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpruowbt4n: /tmp/tmpruowbt4n.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n     long carry=0, sum=0;\n     while(a>0){\n       sum+=a/10;\n     \
    \  a=a-10*sum;\n       carry+=a*b;\n       sum=sum*10;\n       carry=carry%10;\n\
    \     }\n     if(carry==0){\n       sum=sum%10;\n     }\n     return sum;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyap820w4: /tmp/tmpyap820w4.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b==0) {\n        return 0;\n    }\n    long temp=a;\n    for (int\
    \ i=1;i<(b/10);i++) {\n        temp*=10;\n    }\n    temp+=(b%10);\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptu46eskv: /tmp/tmptu46eskv.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Complete the code here.\n    long ans=0;\n    for(int i=0;i<b/2;i++){\n\
    \        if(a%10!=0 && b%10!=0 && b%10!=a%10)\n            ans+=a*b/10;\n    \
    \    ans+=a*b%10;\n        a=a*10-b%10;\n        b=b*10-a%10;\n    }\n    if(a%10!=0)\n\
    \        ans+=a*b/10;\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwz7swa5g: /tmp/tmpwz7swa5g.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tlong x = 0;\n\twhile (a > 0)\n\t{\n\t\tlong r = a % 10;\n\t\tx += (long)(r\
    \ * b);\n\t\ta /= 10;\n\t\tb /= 10;\n\t}\n\treturn x;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpf1d56z3l: /tmp/tmpf1d56z3l.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint prod = a * b;\n\tif (prod < 0)\n\t\treturn 0;\n\treturn prod;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp824a3gby: /tmp/tmp824a3gby.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result=1;\n    int carry=0;\n    while(a>0 && b>0)\n    {\n \
    \       if(a%10==0 && b%10==0)\n        {\n            result+=b%10;\n       \
    \     b/=10;\n        }\n        else\n        {\n            result+=carry;\n\
    \            carry=0;\n            result+=a%10;\n            a=a/10;\n      \
    \  }\n    }\n    if(a>0)\n    {\n        result+=carry;\n    }\n    if(b>0)\n\
    \    {\n        carry=1;\n    }\n    return carry + result;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7ek8xsuj: /tmp/tmp7ek8xsuj.cpp:41: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Complete the function here.\n    // You have to find the product\
    \ of the unit digits of the two numbers \n    // and then return that product.\
    \ \n    // Note, if the numbers have different number of digits, \n    // the\
    \ product should be 0.\n    // Input validation: \n\n    // Sample Input:\n  \
    \  // a = 148 and b = 412\n\n    // Sample Output:\n    // 16\n    // Explanation:\n\
    \    // 148 is represented as 10^0 * 10^1\n    // 412 is represented as 10^1 *\
    \ 10^2\n    // The product of their unit digits is 10^1 * 10^2 = 40\n    // The\
    \ product of their unit digits is 16\n    // The product of their unit digits\
    \ is 16\n    return a*b;\n}\nint main() {\n    auto candidate = multiply;\n  \
    \  assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1vkjpo1k: /tmp/tmp1vkjpo1k.cpp:34: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long long product = 1, carry = 0, productA = a;\n    long long productB\
    \ = b;\n    while(productA != 0 || productB != 0) {\n        if(carry == 0) {\n\
    \            productA *= productB;\n            productA += product;\n       \
    \     carry = 1;\n        } else {\n            productA *= product;\n       \
    \     productA += carry;\n            productB *= 10;\n            productB +=\
    \ product;\n            carry = 1;\n        }\n    }\n    return product;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code here\n    long result = 0;\n    int temp = a;\n    a\
    \ = abs(a);\n    b = abs(b);\n    while (a>=10) {\n        a = a/10;\n       \
    \ temp *= 10;\n    }\n    while (b>=10) {\n        b = b/10;\n        result +=\
    \ (temp*b);\n        temp *= 10;\n    }\n    \n    \n    result += (temp*b);\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpty3pqqp4: /tmp/tmpty3pqqp4.cpp:33: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long long res = 0;\n    while (b) {\n\
    \        res += (a % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0bps2riz: /tmp/tmp0bps2riz.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    long temp;\n    long rem;\n    // Convert long\
    \ to int because long is 64 bit on \n    // 64-bit system and int is 32 bit on\
    \ 32-bit system.\n    assert(sizeof(int)==4);\n    assert(sizeof(int) == sizeof(long));\
    \ // sizeof(int) == sizeof(long)\n    // Divide the two numbers and store the\
    \ remainder in rem.\n    temp=a;\n    while(b>0){\n        sum+=temp%10;\n   \
    \     temp/=10;\n        b--;\n    }\n    // If a = b and rem is 0, then product\
    \ is 0.\n    if(b==0 && sum==0){\n        return 0;\n    }\n    // If a = b, then\
    \ product is a.\n    // Otherwise, rem is greater than zero and product is b *\
    \ rem.\n    if(sum==0 && rem!=0){\n        return 0;\n    }\n    if(sum>0){\n\
    \        sum=sum*10;\n    }\n    temp=sum;\n    // If the sum is greater than\
    \ 10, then rem = 0.\n    while(rem>0){\n        temp*=10;\n        rem/=10;\n\
    \    }\n    // If temp is greater than 10, then rem = 0.\n    if(temp>10){\n \
    \       temp=0;\n    }\n    // If the rem is greater than 10, then rem = 0.\n\
    \    if(rem>10){\n        rem=0;\n    }\n    return temp+rem;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqx5cm0b9: /tmp/tmpqx5cm0b9.cpp:18: long int multiply(long int, long\
    \ int): Assertion `sizeof(int) == sizeof(long)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code goes here\n    long prod = 1;\n    int i = 0;\n    while\
    \ (a != 0) {\n        prod *= (a%10);\n        a = a/10;\n        i++;\n    }\n\
    \    i--;\n    while (i != -1) {\n        prod *= (b%10);\n        b = b/10;\n\
    \        i++;\n    }\n    return prod;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long long res=0;\n    long long digit=0,temp=0;\n    while(a>0){\n\
    \        temp=a/10;\n        res += temp*b;\n        res *= 10;\n        digit+=temp;\n\
    \        a=a-temp*10;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    while (a) {\n        res *= 10;\n        res +=\
    \ a % 10;\n        a /= 10;\n    }\n    while (b) {\n        res *= 10;\n    \
    \    res += b % 10;\n        b /= 10;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1wxeoa1d: /tmp/tmp1wxeoa1d.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tassert(a >= 0 && a <= 100);\n\tassert(b >= 0 && b <= 100);\n\tint carry\
    \ = 0;\n\tlong ans = 1;\n\tlong digit = a;\n\tfor (int i = 9; i >= 1; i--) {\n\
    \t\tdigit = digit*10 + b + carry;\n\t\tans = ans*10 + digit%10;\n\t\tcarry = digit/10;\n\
    \t}\n\tassert(carry==0);\n\treturn ans;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaufr2uv6: /tmp/tmpaufr2uv6.cpp:12: long int multiply(long int, long\
    \ int): Assertion `a >= 0 && a <= 100' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a>b) {\n        return 0;\n    }\n    long product = a/b;\n   \
    \ long rest = a % b;\n    if(rest==0) {\n        return product;\n    }\n    return\
    \ product * multiply(b, rest);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmps__vshd1: /tmp/tmps__vshd1.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  while(b > 0) {\n    if(b%10 == 1)\n      result\
    \ = result + a/10;\n    a = a%10;\n    b = b/10;\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvekcxhx1: /tmp/tmpvekcxhx1.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tlong ans=0;\n\tint len=a/10, num=a%10;\n\tlen=len*10, num=num*10;\n\t\
    ans=ans+b+num;\n\twhile(b>0){\n\t\tans=ans+len%10*b;\n\t\tlen/=10;\n\t\tb/=10;\n\
    \t\tnum/=10;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn7cwcake: /tmp/tmpn7cwcake.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  if(a==0)\n    return b*0;\n  if(a<0 || b<0)\n    return 0;\n  if(b==0)\n\
    \    return a*0;\n  int c=0;\n  while(a>0) {\n    c=c*10+a%10;\n    a=a/10;\n\
    \  }\n  return c*b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbyob_lju: /tmp/tmpbyob_lju.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    if (a < 0 || b < 0 || a == 0 || b ==\
    \ 0)\n        return 0;\n    long result = 0;\n    for (int i = 0; i < b; i++)\n\
    \        result *= a;\n    return result % 10;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmfc80i5g: /tmp/tmpmfc80i5g.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\t// Write your code here\n\tlong ans=0;\n\twhile(b){\n\t\tif(b%10==0){\n\
    \t\t\tans=ans*10+b;\n\t\t\tb=0;\n\t\t}else{\n\t\t\tb=b/10;\n\t\t}\n\t}\n\treturn\
    \ ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplsbf3195: /tmp/tmplsbf3195.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a>0 && b>0) \n        return (a*b)/10;\n    else\n        return\
    \ 0;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpei8ccpyr: /tmp/tmpei8ccpyr.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long unitDigits[100];\n    long answer;\n    int i = 0;\n    while\
    \ (a >= 10) {\n        unitDigits[i] = a % 10;\n        a /= 10;\n        i++;\n\
    \    }\n    i--;\n    while (i >= 0) {\n        unitDigits[i] = b % 10;\n    \
    \    b /= 10;\n        i--;\n    }\n    answer = unitDigits[0] * unitDigits[1];\n\
    \    for (int j = 1; j < i; j++) {\n        answer *= unitDigits[j];\n    }\n\
    \    return answer;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxu4lulsz: /tmp/tmpxu4lulsz.cpp:34: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long answer=0;\n  for(int i=0;i<b;i++) {\n    answer=answer*10+(a%10);\n\
    \    a=a/10;\n  }\n  return answer;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7ogxuaza: /tmp/tmp7ogxuaza.cpp:21: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return a*b;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq4em4vrz: /tmp/tmpq4em4vrz.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long c=0, i=0, sum=1;\n    while(a > 0){\n        if(a % 10 >= b){\n\
    \            sum *= a;\n            i++;\n        }\n        a /= 10;\n    }\n\
    \    while(i){\n        sum *= b;\n        i++;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj0prlqjs: /tmp/tmpj0prlqjs.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long unitNum = 1;\n    int flag = 0;\n\
    \    while (b) {\n        if(b > 9){\n            if(flag==0){\n             \
    \   unitNum = unitNum*10;\n                flag++;\n            }\n          \
    \  unitNum = unitNum+b%10;\n            b = b/10;\n        }\n        else{\n\
    \            unitNum = unitNum*10;\n            flag++;\n        }\n    }\n  \
    \  return a*unitNum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n// Declare a variable to store intermediate result\n  long res = 0;\n\
    // Start looping from left to right\n  while(a != 0) {\n// Add the unit digit\
    \ of the left hand unit to result\n    res = (res * 10) + a % 10;\n// Remove the\
    \ left hand unit from the integer a \n    a/=10;\n  }\n// Start looping from right\
    \ to left\n  while(b != 0) {\n// Add the unit digit of the right hand unit to\
    \ result\n    res *= 10; \n// Add the unit digit of the right hand unit to result\n\
    \    res += b % 10;\n// Remove the right hand unit from the integer b \n    b/=10;\n\
    \  }\n// Return the result\n  return res;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvuw9q9wa: /tmp/tmpvuw9q9wa.cpp:35: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint a1 = a / 10, a0 = a % 10;\n\tint b1 = b / 10, b0 = b % 10;\n\treturn\
    \ a1 * 10 + b1 * 10 + a0 * b0;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp48zmh4xb: /tmp/tmp48zmh4xb.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long prod = 0;\n    while (b > 0) {\n        long digit = a % 10;\n\
    \        a = a / 10;\n        prod *= digit;\n    }\n    return prod;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    while (b > 0) {\n        if (b & 1) {\n       \
    \     res += a;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpslciqo7p: /tmp/tmpslciqo7p.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long res = 0;\n    while(a){\n      \
    \  if(a%10==0){\n            res=res*10+a-'0';\n            a=0;\n        }\n\
    \        a=a/10;\n    }\n    return res*b+'0';\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo2pd288s: /tmp/tmpo2pd288s.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long ret = 0;\n  int i = 1;\n  while (a > 0)\n  {\n    ret = ret * 10\
    \ + a % 10;\n    a /= 10;\n    i++;\n  }\n  while (a < 0)\n  {\n    ret = ret\
    \ * 10 + a % 10;\n    a /= 10;\n    i++;\n  }\n  while (i < b)\n  {\n    ret =\
    \ ret * 10 + a % 10;\n    a /= 10;\n    i++;\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpna5ujl81: /tmp/tmpna5ujl81.cpp:36: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    while (a >= 10) {\n        sum += a % 10;\n   \
    \     a /= 10;\n    }\n    while (a > 0) {\n        sum += a;\n        a /= 10;\n\
    \    }\n    sum *= b;\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqs19i3f9: /tmp/tmpqs19i3f9.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    while (a >= 10) {\n        int temp = a % 10;\n\
    \        sum += temp * b / 10;\n        b = temp;\n        a--;\n    }\n    if\
    \ (b >= 10) {\n        sum += b * 10 % 10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpitmdur2c: /tmp/tmpitmdur2c.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a * b)/10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9pmoxu4v: /tmp/tmp9pmoxu4v.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long c = 1;\n    \n    while (b) {\n        if (b & 1) c = c * a;\n\
    \        \n        a = a * 10;\n        b = b >> 1;\n    }\n\n    return c;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmppqq45ko8: /tmp/tmppqq45ko8.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n     int result = 0;\n     long digit;\n     while (a) {\n        digit\
    \ = a % 10;\n        a=a/10;\n        result=digit*result + b;\n     }\n     return\
    \ result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp44rvf8jw: /tmp/tmp44rvf8jw.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int digitA = a%10;\n    int digitB = b%10;\n    int result = digitA*digitB;\n\
    \    \n    if(digitA != digitB){\n        result *= 10;\n    }\n    return a*b+result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj03jam3y: /tmp/tmpj03jam3y.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = a;\n    long temp = b;\n    while (temp != 0) {\n     \
    \   ans *= 10;\n        temp /= 10;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplb4i6htm: /tmp/tmplb4i6htm.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0, product = 1, unitDigits = 0;\n    while (a != 0)\
    \ {\n        product = product * a;\n        a=a/10;\n        unitDigits++;\n\
    \    }\n    while (unitDigits < b) {\n        product = product * (b/10);\n  \
    \      b=b / 10;\n        unitDigits++;\n    }\n    while (a != 0) {\n       \
    \ product = product * a;\n        a=a/10;\n        unitDigits++;\n    }\n    while\
    \ (unitDigits < b) {\n        product = product * (b/10);\n        b=b / 10;\n\
    \        unitDigits++;\n    }\n    long finalResult = product * b;\n    long resultDigits\
    \ = 1;\n    while (finalResult != 0) {\n        finalResult = finalResult / 10;\n\
    \        resultDigits++;\n    }\n    while (resultDigits < unitDigits) {\n   \
    \     finalResult = finalResult * (unitDigits/10);\n        resultDigits++;\n\
    \    }\n    finalResult = finalResult * unitDigits;\n    return result;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_w9mjhe6: /tmp/tmp_w9mjhe6.cpp:48: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int res = 0;\n  while (b > 0) {\n    res += (b % 10);\n    b/=10;\n\
    \  }\n  while (res > 0) {\n    a -= (res % 10);\n    res/=10;\n  }\n  return a\
    \ * 10;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphbjn_j1o: /tmp/tmphbjn_j1o.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long long rem = a % b;\n    long long mult = a * b;\n    if(rem ==\
    \ 0) {\n        return mult;\n    }\n    while(rem > 9) {\n        mult = mult\
    \ * b;\n        rem = rem - 9;\n    }\n    if(rem > 0) {\n        return mult\
    \ + mult*pow(10, rem);\n    }\n    return mult*pow(10, rem);\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9q4d56i9: /tmp/tmp9q4d56i9.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0){\n        std::swap(a, b);\n    }\n    if(b<0){\n        std::swap(a,\
    \ b);\n    }\n    long prod = 1;\n    for(int i=0; i<a; i++){\n        prod *=\
    \ b;\n    }\n    return prod;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp40btnbiz: /tmp/tmp40btnbiz.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 0;\n    while (b) {\n        ans += (b % 10);\n       \
    \ b = (b /= 10) - 1;\n    }\n    while(a > 0) {\n        ans *= 10;\n        a\
    \ /= 10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    long prod = a*b;\n    return prod;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4cc0cx_l: /tmp/tmp4cc0cx_l.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    int lena = a, lenb = b;\n    // find the length\
    \ of the smaller of the two numbers\n    if (lena < lenb) {\n        lena = lenb;\n\
    \    }\n    while (lena > 0) {\n        sum += lena % 10;\n        lena /= 10;\n\
    \    }\n    while (lenb > 0) {\n        sum += lenb % 10;\n        lenb /= 10;\n\
    \    }\n    while (sum > 0) {\n        sum += b%10;\n        b /= 10;\n    }\n\
    \    \n    return a;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 1;\n    long mod = 1;\n    long rem = b;\n    // The loop\
    \ goes through the digits of A and B\n    while (a && b) {\n        rem = rem\
    \ % 10;\n        rem = rem * a + rem;\n        ans = ans * rem + mod;\n      \
    \  mod = mod * 10;\n        a = a / 10;\n        b = b / 10;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd3hixnw3: /tmp/tmpd3hixnw3.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    // Write your code here\n    while (a > 0) {\n\
    \        result *= a%10;\n        a /= 10;\n    }\n    while (a < 0) {\n     \
    \   result *= (b+a)%10;\n        b /= 10;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcwn_gt8j: /tmp/tmpcwn_gt8j.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code goes here\n    long sum = a;\n    long t = 1;\n    long\
    \ i = 1l;\n    while (b) {\n        sum += t * (i * b%10);\n        t *= 10;\n\
    \        i /= 10;\n        b/=10;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpk41kfq5l: /tmp/tmpk41kfq5l.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b != 0) {\n        int c = a / b;\n        a = a % b;\n      \
    \  int d = b / a;\n        b = b % a;\n        return long(c * d) + (long(a *\
    \ b));\n    } else {\n        return 0;\n    }\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1f2rd254: /tmp/tmp1f2rd254.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Initialize result\n  long res = 0;\n\n  // Add unit digits to result\n\
    \  while(b != 0) {\n    res += a % 10;\n    a = a / 10;\n  }\n\n  // Return the\
    \ product of unit digits\n  return res;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b < 0) {\n        long r = multiply(-a, b);\n        long m =\
    \ r%10;\n        return (m/10) * r + a;\n    }\n    long r = a;\n    long t =\
    \ b;\n    while (t) {\n        r += t/10;\n        t %= 10;\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int carry = 0;\n    if(a>b){\n        swap(a,b);\n        carry =\
    \ 1;\n    }\n    long prod = 1;\n    while (a && b) {\n        int tmp = a%10*carry\
    \ + b%10;\n        prod = prod * 10 + tmp;\n        a /= 10; b /= 10;\n      \
    \  carry = prod > 9 ? 1 : 0;\n    }\n    prod = prod * 10 + carry;\n    return\
    \ prod;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppn_4_x_t.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmppn_4_x_t.cpp:14:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   14 |         swap(a,b);\n      |         ^~~~\n/tmp/tmppn_4_x_t.cpp:14:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppn_4_x_t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppn_4_x_t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long p = a;\n    long q = b;\n    int a = 0, b = 0, c = 0;\n    while\
    \ (q) {\n        long n = q & 1;\n        if (n) c++;\n        q = q >> 1;\n \
    \       ++b;\n    }\n    while (p) {\n        long n = p & 1;\n        if (n)\
    \ a++;\n        p = p >> 1;\n        ++a;\n    }\n    int result = 0, i = 0;\n\
    \    while (b - i) {\n        long d = a * b + c;\n        if (d) result = d *\
    \ result;\n        ++i;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmbnraq7l.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpmbnraq7l.cpp:14:9: error: declaration of \u2018int a\u2019\
    \ shadows a parameter\n   14 |     int a = 0, b = 0, c = 0;\n      |         ^\n\
    /tmp/tmpmbnraq7l.cpp:14:16: error: declaration of \u2018int b\u2019 shadows a\
    \ parameter\n   14 |     int a = 0, b = 0, c = 0;\n      |                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15,\
    \ n16;\n    n1 = a%10;\n    n2 = a%100;\n    n3 = a%1000;\n    n4 = a%100000;\n\
    \    n5 = a%10000000;\n    n6 = a%100000000;\n    n7 = a%1000000000;\n    n8 =\
    \ a%10000000000;\n    n9 = a%100000000000;\n    n10 = a%1000000000000;\n    n11\
    \ = a%100000000000000;\n    n12 = a%1000000000000000;\n    n13 = a%1000000000000000000;\n\
    \    n14 = a%10000000000000000000;\n    n15 = a%100000000000000000000;\n    n16\
    \ = a%10000000000000000000000;\n    long product = n1*n2*n3*n4*n5*n6*n7*n8*n9*n10*n11*n12*n13*n14*n15*n16;\n\
    \    return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1gqxwu1i: /tmp/tmp1gqxwu1i.cpp:34: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long mult_val;\n    long mod = a % 10;\n    int rem = 0;\n    while(b\
    \ != 0) {\n        rem = b%10;\n        mult_val += (a/divisor)*(rem*divisor);\n\
    \        divisor--;\n        a = a % 10;\n        b = b % 10;\n    }\n    return\
    \ mult_val;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_yvfdpsr.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmp_yvfdpsr.cpp:17:24: error: \u2018divisor\u2019 was not\
    \ declared in this scope\n   17 |         mult_val += (a/divisor)*(rem*divisor);\n\
    \      |                        ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n   // Complete the code.\n  long long res = 0, sum = 0;\n  while (a >=\
    \ 10 && b >= 10) {\n      res = res + a%10 * b%10;\n      a = a/10;\n      b =\
    \ b/10;\n  }\n  \n  \n  return res;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqee739lb: /tmp/tmpqee739lb.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Your code goes here\n  long sum = 0;\n  while (a > 0) {\n    int\
    \ remainder = a % 10;\n    sum += remainder * b / 10;\n    b = b % 10;\n    a\
    \ = a / 10;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp62gw5mjn: /tmp/tmp62gw5mjn.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(b > 0);\n    long ans = 1;\n    for(int i = b-1; i >= 0; i--){\n\
    \        int temp = a % 10;\n        ans = ans*temp;\n        a /= 10;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl6eh04cp: /tmp/tmpl6eh04cp.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0, dig1, dig2;\n    while(a != 0) {\n        dig1 =\
    \ a/10;\n        dig2 = a-dig1*10;\n        product += dig1 * dig2;\n        a\
    \ = b;\n        b = dig1;\n    }\n    return product;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpegjs6eig: /tmp/tmpegjs6eig.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long sum = 0;\n    long m = a;\n    long n = b;\n    // Complete the\
    \ function here. \n    // Compute and return the product of its unit digits.\n\
    \    while(m >= 10) {\n        sum += m % 10;\n        m = m/10;\n    }\n    while(n\
    \ >= 10) {\n        sum+= n % 10;\n        n = n/10;\n    }\n    if(sum==0) {\n\
    \        return 0;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1szwa3l0: /tmp/tmp1szwa3l0.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(a>=0 && b>=0);\n    return a * b / 10;\n}\nint main() {\n \
    \   auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxk0hkt6x: /tmp/tmpxk0hkt6x.cpp:17: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (b == 0) {\n        return 0;\n    }\n    int digit1 = a % 10;\n\
    \    int digit2 = b % 10;\n    int res = digit1 * digit2;\n    if (res < 0)\n\
    \        return 0;\n    else\n        return digit1 + digit2 + res;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm71i7dv6: /tmp/tmpm71i7dv6.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long res = 0;\n    for(int i=0;i<b;i++)\n\
    \        res += a % 10;\n    res *= a;\n    return res;\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjnncijda: /tmp/tmpjnncijda.cpp:21: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code goes here\n    long ans = 0;\n    while (b > 0) {\n \
    \       ans = ans * 10 + (b % 10);\n        b = (b / 10) % 10;\n    }\n    if\
    \ (a < 0) {\n        ans *= -1;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpz0xo74xh: /tmp/tmpz0xo74xh.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code goes here\n    if(a == 0) {\n        return 0;\n    }\n\
    \    long long product = 1;\n    for(long i = 0; i < b; ++i) {\n        product\
    \ = product * a;\n    }\n    product *= a;\n    while(product % 10 == 0) {\n \
    \       product /= 10;\n    }\n    while(product > 9) {\n        product /= 10;\n\
    \    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unit = 1;\n    while (a > 1 && b > 1 && a <= 10 && b <= 10) {\n\
    \        if (a % 10 * 10 == b % 10) {\n            unit *= 10;\n            a\
    \ /= 10;\n            b /= 10;\n        }\n        else if (a % 10 * 10 < b %\
    \ 10) {\n            unit++;\n            a /= 10;\n        }\n        else if\
    \ (a % 10 * 10 > b % 10) {\n            b--;\n        }\n    }\n    return unit;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfnogxu2t: /tmp/tmpfnogxu2t.cpp:31: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Only valid for non-negative numbers.\n    if (a < 0 || b < 0) {\n\
    \        assert(a < 0);\n        assert(b < 0);\n        return 0;\n    }\n  \
    \  if (b == 0)\n        return a;\n    // Only valid for numbers whose unit digits\
    \ are all identical.\n    if (a == 0 || b == 0) {\n        assert(a == 0);\n \
    \       assert(b == 0);\n        return 0;\n    }\n    long answer = 0;\n    //\
    \ If first digit is 0, then the other digit is 0\n    // If first digit is 1,\
    \ then we have the unit digit of first number and the other is 0.\n    // If first\
    \ digit is 2, we have the unit digit of first number and the other is 1.\n   \
    \ // If first digit is 3, we have the unit digit of first number and the other\
    \ is 2.\n    // ...\n    // If first digit is 9, the other digit is 9.\n    //\
    \ We need to find the unit digit of first number and multiply it with the other\
    \ number.\n    while (a > 0) {\n        answer += a % 10;\n        a /= 10;\n\
    \    }\n    if (answer == 0)\n        return answer;\n    while (answer > 0) {\n\
    \        answer = answer - 10 * (answer % 10);\n        answer /= 10;\n    }\n\
    \    while (answer > 0) {\n        answer += 10 * answer % 10;\n        answer\
    \ /= 10;\n    }\n    return answer;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo9snwk_t: /tmp/tmpo9snwk_t.cpp:52: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int carry = 0;\n    long result = 0;\n    while (b > 0) {\n      \
    \  int digit = a % 10;\n        result += (digit*b + carry);\n        carry =\
    \ 0;\n        if (result > 9) {\n            result -= 10;\n            carry\
    \ = 1;\n        }\n        a /= 10;\n        b /= 10;\n    }\n    if (carry >\
    \ 0)\n        result += carry;\n    return result;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxnp4q1xq: /tmp/tmpxnp4q1xq.cpp:31: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    long temp;\n    long sum = 0;\n    long carry\
    \ = 0;\n    // Check whether the numbers are valid or not \n    if (a < 0 || b\
    \ < 0)\n        return 0;\n    // Store the digits \n    long digits[10];\n  \
    \  while (a != 0) {\n        temp = a % 10;\n        digits[10 - temp - 1] = temp;\n\
    \        a /= 10;\n    }\n    long i = 9;\n    while (digits[i - 1] != 0) {\n\
    \        sum += digits[i - 1] * i + carry;\n        carry = 0;\n        i /= 10;\n\
    \    }\n    // Add the digits without carry\n    temp = sum * i + carry;\n   \
    \ carry = 0;\n    while (temp != 0) {\n        result += temp % 10;\n        temp\
    \ = temp / 10;\n    }\n    // Add the carry to result\n    result += carry;\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpatwka6t_: /tmp/tmpatwka6t_.cpp:45: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 0;\n    while(a || b) {\n        long digit;\n        a\
    \ -= (a % 10); \n        b -= (b % 10); \n        digit = a * b % 10;\n      \
    \  ans += digit;\n        a /= 10;\n        b /= 10;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6yxkx6n8: /tmp/tmp6yxkx6n8.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long ans = 1;\n    while(a != 0){\n \
    \       ans = ans*b;\n        a=a/10;\n        b=b/10;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3dxwzzo9: /tmp/tmp3dxwzzo9.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // code here\n    long ans = 0;\n    int i = 1;\n    while(i < 10)\
    \ {\n        if(a%10 * b%10 == 0) ans += a%10*b%10;\n        a/=10;\n        b/=10;\n\
    \        i++;\n    }\n    if(a != 0) ans += a%10*b%10;\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd4nq1871: /tmp/tmpd4nq1871.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long long c=0;\n  \n  while (a>0) {\n    c+=(a%10);\n    a=a/10;\n \
    \ }\n  while (b>0) {\n    c+=(b%10);\n    b=b/10;\n  }\n  return c;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpb0wgpx7l: /tmp/tmpb0wgpx7l.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long long product = 0;\n    long long temp = a % 10;\n    for (int\
    \ i = 1; i < b; i++) {\n        product += temp*(b % 10);\n        temp /= 10;\n\
    \    }\n    return product;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_w7cdcel: /tmp/tmp_w7cdcel.cpp:25: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 1;\n    while(a != 0) {\n        if(b > 0) {\n        \
    \    res *= a % 10;\n            a = (a - a%10) / 10;\n            b -= 1;\n \
    \       } else if(b < 0) {\n            a = (a - a%10) / 10;\n            b +=\
    \ 1;\n        } else {\n            break;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmprnh7j98v: /tmp/tmprnh7j98v.cpp:29: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 0;\n    long tmp;\n    while(b) {\n        tmp = b%10;\n\
    \        ans += tmp*a;\n        a/=10;\n        b/=10;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplb_2i_p0: /tmp/tmplb_2i_p0.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long temp = 0;\n    long unit = 0;\n    long\
    \ sum = 0;\n    while(b>0) {\n        unit = b%10;\n        sum = sum + unit*a;\n\
    \        b = b/10;\n        a=a*10;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqsqp904m: /tmp/tmpqsqp904m.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(a > 0 && b > 0 && a < INT_MAX);\n    assert(b < INT_MAX);\n\
    \    long ret = 0;\n    \n    while (b > 0) {\n        if (a & 1 == 1) \n    \
    \        ret = ret + 1;\n        \n        b >>= 1;\n        a <<= 1;\n    }\n\
    \    \n    return ret;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbgziwnb4: /tmp/tmpbgziwnb4.cpp:28: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint rem = a % 10;\n\ta = a / 10;\n\tint rest = a % 10;\n\tlong total\
    \ = a;\n\tif (b == 0)\n\t\treturn 0;\n\telse if (rem == 0)\n\t\treturn b;\n\t\
    else \n\t\treturn multiply(rest, multiplied + rest*b);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpghan0h46.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpghan0h46.cpp:21:25: error: \u2018multiplied\u2019 was not\
    \ declared in this scope; did you mean \u2018multiply\u2019?\n   21 |   return\
    \ multiply(rest, multiplied + rest*b);\n      |                         ^~~~~~~~~~\n\
    \      |                         multiply\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code goes here\n    long long res = 0;\n    while(a >= 10)\
    \ {\n        res = res * 10 + a/10;\n        a = a/10;\n    }\n    if(a == 0)\
    \ return 0;\n    while(a > 0) {\n        res = res * 10 + a;\n        a = a/10;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpocijwgqd: /tmp/tmpocijwgqd.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int prod = 1;\n    while (b != 0) {\n        long digit = a % 10;\n\
    \        prod *= digit;\n        a /= 10;\n        b /= 10;\n    }\n    return\
    \ prod;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphyqnqjeh: /tmp/tmphyqnqjeh.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a/b)*b; \n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp39xqomv8: /tmp/tmp39xqomv8.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long prod = 0, n = 0;\n    int carry = 0;\n    while(b != 0) {\n \
    \       long digit = (b / 10)%10;\n        prod += digit*(n + carry);\n      \
    \  n += digit;\n        carry = (b%10);\n        b/=10;\n    }\n    return prod;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcs4j_zz1: /tmp/tmpcs4j_zz1.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return a*b;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv7iybeo7: /tmp/tmpv7iybeo7.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int res = 0; // Initialize result to 0\n  // Convert the integer a to\
    \ a string, \n  // and get the length of the string\n  string str(a);\n  int length\
    \ = str.size();\n  // If the length of str is zero, return 0\n  if (length ==\
    \ 0) {\n    return res; // return res\n  }\n  // If the length is greater than\
    \ one\n  if (length > 1) {\n    // Get the first unit digit\n    int first = str.at(0)\
    \ - '0';\n    // Get the rest of the digits as string in str\n    str = str.substr(1);\n\
    \    // Convert str to a long number\n    long num = stol(str);\n    // If the\
    \ first unit digit is greater than 0\n    if (first > 0) {\n      // Multiply\
    \ the number with the first unit digit\n      num *= first;\n      // Add the\
    \ number with the rest of the unit digits\n      num += num;\n    }\n    // If\
    \ the first unit digit is equal to 0\n    if (first == 0) {\n      // If the number\
    \ has more than one digit\n      if (length == 2) {\n        // Multiply the number\
    \ with the second unit digit\n        num /= 2;\n        // Add the number with\
    \ the rest of the unit digits\n        num += num;\n      }\n      // If the number\
    \ has only one digit\n      if (length == 1) {\n        // Multiply the number\
    \ with the number itself\n        num *= num;\n        // Add the number with\
    \ the rest of the unit digits\n        num += num;\n      }\n    }\n    // Return\
    \ the product of num and unit digits\n    res = num * 10 + num;\n  }\n  // Return\
    \ the product of num and the number itself\n  return res * 10 + num;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpho1y_tag.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpho1y_tag.cpp:15:3: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n   15 |   string str(a);\n\
    \      |   ^~~~~~\n      |   std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpho1y_tag.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpho1y_tag.cpp:16:16:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   16 |   int length = str.size();\n      |                ^~~\n      |   \
    \             std\n/tmp/tmpho1y_tag.cpp:28:16: error: \u2018stol\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::stol\u2019?\n   28\
    \ |     long num = stol(str);\n      |                ^~~~\n      |          \
    \      std::__cxx11::stol\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long c = 0, mul = 1;\n    while (a > 0) {\n        c = (a%10) * mul\
    \ + c;\n        a = (int)(a/10);\n        mul *= 10;\n    }\n    while (a < -10)\
    \ {\n        c = (a%10) * mul - c;\n        a = (int)(a/10);\n        mul *= 10;\n\
    \    }\n    while (a > 0) {\n        c = (a%10) * mul + c;\n        a = (int)(a/10);\n\
    \        mul *= 10;\n    }\n    while (a < -10) {\n        c = (a%10) * mul -\
    \ c;\n        a = (int)(a/10);\n        mul *= 10;\n    }\n    return c;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfxdsp5om: /tmp/tmpfxdsp5om.cpp:37: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long res = 0;\n    // Initialize res with carry. Let the value of\
    \ res be 0.\n    // If the second number is negative, then the carry \n    //\
    \ will contain the value of the first number.\n    // If the second number is\
    \ positive, then the carry \n    // will contain the value of the second number.\
    \ \n    // If the first number is negative, then the carry \n    // will contain\
    \ the value of the second number. \n    // If the first number is positive, then\
    \ the carry \n    // will contain the value of the first number.\n    \n    if(b>0){\n\
    \        // Add b to a. Let the result be res and carry be 0.\n        res = res\
    \ + b;\n        \n        // If b is positive, then add b to a. \n        // Otherwise,\
    \ the carry will be the value of the second number.\n        // Add carry to res.\
    \ Let the result be res and carry be 0.\n        if(b>0){\n            res = res\
    \ + b;\n        }\n        // If b is negative, then subtract b to a. \n     \
    \   // Otherwise, the carry will be the value of the first number.\n        //\
    \ Subtract carry to res. Let the result be res and carry be 0.\n        else{\n\
    \            res = res - b;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8oylqe34: /tmp/tmp8oylqe34.cpp:44: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans=0;\n    long rem = b;\n    while(rem!=0)\n    {\n       \
    \ rem = (rem / 10);\n        ans+=a*(rem%10);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp31u5jcd5: /tmp/tmp31u5jcd5.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long prod = 0, a_tmp, b_tmp;\n    // Calculate the product of unit\
    \ digits of both numbers. \n    for(int i = 0; i < a / 10; i++) {\n        for(int\
    \ j = 0; j < b / 10; j++) {\n            if(i == 0 && j == 0) {\n            \
    \    prod += (a%10 * b%10);\n                break;\n            }\n         \
    \   prod += (a%10 * b%10) * (a%10 - '0') * (b%10 - '0');\n        }\n    }\n \
    \   // Add the remaining digits of both.\n    prod += a%10 * b%10;\n    // Return\
    \ the answer.\n    return prod;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw9olv9d1: /tmp/tmpw9olv9d1.cpp:30: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long temp, sum=0, mult=0;\n    while(b!=0) {\n        temp=b;\n  \
    \      b=a%10;\n        a=b/10;\n        sum+=a*temp;\n        mult+=sum;\n  \
    \  }\n    return mult;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphnxv618f: /tmp/tmphnxv618f.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int prod = 0, tmp;\n  while (b) {\n    tmp = a%10;\n    a = a/10;\n\
    \    prod = prod*tmp + a*b;\n  }\n  return prod;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
