language: cpp
name: HumanEval_30_get_positive
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> pos;\n  for (auto i\
    \ : l) {\n    if (i >= 0)\n      pos.push_back(i);\n  }\n  return pos;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpujgq9y47: /tmp/tmpujgq9y47.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 2);\n  std::vector<long>\
    \ result(l.size());\n  for (size_t i = 0; i < l.size(); i++) {\n    if (l[i] >=\
    \ 0) result[i] = l[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb_zdo5t1: /tmp/tmpb_zdo5t1.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  std::copy_if(l.begin(), l.end(), std::back_inserter(res), [](long n){return\
    \ n>0;});\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  auto it = l.begin();\n    std::vector<long> res;\n    while (it != l.end()\
    \ && it->size() > 0) {\n        auto current = std::find(it, l.end(), 0);\n  \
    \      res.push_back(std::distance(it, current));\n        it = current;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr4t_ospz.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr4t_ospz.cpp:12:33: error: request for member \u2018size\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   12\
    \ |     while (it != l.end() && it->size() > 0) {\n      |                   \
    \              ^~~~\n"
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for (auto\
    \ it : l)\n        if (it > 0)\n            v.push_back(it);\n    return v;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto v : l)\n        if (v >= 0)\n            result.push_back(v);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc5zec5u1: /tmp/tmpc5zec5u1.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    long long\
    \ pos = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            pos = i;\n            break;\n        }\n    }\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (i != pos) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk0fico9x: /tmp/tmpk0fico9x.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Initialize counter\n    int count_positive\
    \ = 0;\n    // Initialize result list\n    std::vector<long> r;\n    long cur_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > cur_val)\
    \ {\n            count_positive++;\n        }\n        else {\n            if\
    \ (count_positive > 0) {\n                r.push_back(cur_val);\n            \
    \    count_positive = 0;\n            }\n            cur_val = l[i];\n       \
    \ }\n    }\n    if (count_positive > 0) {\n        r.push_back(cur_val);\n   \
    \ }\n    return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9e9ezrrc: /tmp/tmp9e9ezrrc.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it)\n    {\n        if (*it >\
    \ 0) {\n            ret.push_back(*it);\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> v;\n    v.push_back(l.at(0));\n    for(long i=1;i<l.size();i++)\
    \ {\n        if(l.at(i)<l.at(0)) {\n            v.push_back(l[i]);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu1mt8aj5: /tmp/tmpu1mt8aj5.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> temp;\n    for(long\
    \ i : l) if(i>0) temp.push_back(i);\n    return temp;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret;\n  for (auto it\
    \ : l) {\n    if (it > 0) {\n      ret.push_back(it);\n    }\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto\
    \ v : l) {\n        if(v >= 0) v.push_back(v);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qbicv9n.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6qbicv9n.cpp:11:22: error: request for member \u2018push_back\u2019\
    \ in \u2018v\u2019, which is of non-class type \u2018long int\u2019\n   11 | \
    \        if(v >= 0) v.push_back(v);\n      |                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // write your code here\n    for (long\
    \ i : l)\n        if (i > 0)\n            l.push_back(i);\n    return l;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpor36npt7: /tmp/tmpor36npt7.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ &ele : l)\n        if (ele > 0)\n            res.push_back(ele);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for (long\
    \ &x: l)\n        if (x > 0)\n            pos.push_back(x);\n    return pos;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    bool\
    \ flag = false;\n    for (long i : l) {\n        if ((i >= 0) && (!flag)) {\n\
    \            result.push_back(i);\n            flag = true;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdraosen2: /tmp/tmpdraosen2.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result(l.size());\n\
    \    std::transform((std::begin(l)), std::end(l), (std::begin(result)), [](long\
    \ x){return x >= 0 ? x : -1;});\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6kmvo7ln: /tmp/tmp6kmvo7ln.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  // Create a vector<int> with same size\
    \ as vector l\n  std::vector<int> v(l.size());\n  // Copy vector l to vector<int>\
    \ v\n  std::transform(l.begin(), l.end(), v.begin(), [](long l) {\n    return\
    \ static_cast<int>(l);\n  });\n  sort(v.begin(), v.end());\n  v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n  std::vector<long> result(v);\n  return result;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc20j4n6i.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc20j4n6i.cpp:17:29: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(std::vector<int>&)\u2019\n   17 |   std::vector<long>\
    \ result(v);\n      |                             ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc20j4n6i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpc20j4n6i.cpp:17:29: note:   candidate expects 3 arguments,\
    \ 1 provided\n   17 |   std::vector<long> result(v);\n      |                \
    \             ^\nIn file included from /usr/include/c++/9/vector:67,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpc20j4n6i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>, const allocator_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<long int>]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:622:43: note:\
    \   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018\
    std::initializer_list<long int>"
  stdout: ''
  timestamp: 1660096733
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ v(std::unique(l.begin(), l.end()));\n  std::reverse(v.begin(), v.end());\n \
    \ std::vector<long>::iterator iter1 = v.begin();\n  std::vector<long>::iterator\
    \ iter2 = iter1;\n  std::vector<long>::iterator iter3 = iter1;\n  std::vector<long>::iterator\
    \ iter4 = iter1;\n  std::vector<long>::iterator iter5 = iter1;\n  std::vector<long>::iterator\
    \ iter6 = iter1;\n  for(; iter1 != v.end(); ++iter1, ++iter2) {\n    long first\
    \ = *iter1;\n    long second = *iter2;\n    if(second > first) {\n      iter3\
    \ = iter2;\n      iter4 = iter3;\n      iter5 = iter3;\n      iter6 = iter3;\n\
    \      if(second < second - 1) {\n        iter4 = iter2;\n        iter5 = iter4;\n\
    \        iter6 = iter4;\n      }\n      else {\n        iter5 = iter4;\n     \
    \   iter6 = iter5;\n      }\n    }\n  }\n  std::vector<long> result;\n  for(iter3\
    \ = iter1, iter4 = iter1; iter3 != iter6; ++iter3, ++iter4) {\n    long a = *iter3;\n\
    \    long b = *iter4;\n    if(b > a) {\n      result.push_back(a);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy32wigiz.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy32wigiz.cpp:10:54: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >)\u2019\n   10 |   std::vector<long> v(std::unique(l.begin(),\
    \ l.end()));\n      |                                                      ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy32wigiz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpy32wigiz.cpp:10:54: note:   candidate expects 3 arguments,\
    \ 1 provided\n   10 |   std::vector<long> v(std::unique(l.begin(), l.end()));\n\
    \      |                                                      ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy32wigiz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n\
    /usr/inc"
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> positive;\n    std::for_each(l.begin(), l.end(), [&](const\
    \ long x) {\n        positive.push_back(x);\n        if (x >= 0) return;\n   \
    \     --positive.back();\n    });\n    return positive;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptl6xk179: /tmp/tmptl6xk179.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) {\n            res.push_back(i);\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l)\n        if (i >= 0)\n            res.push_back(i);\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2h7utl83: /tmp/tmp2h7utl83.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> r;\n  for (long i :\
    \ l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n  }\n  return r;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8m4yvf4n: /tmp/tmp8m4yvf4n.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::set<long> s;\n    for (auto i\
    \ : l) {\n        if (i>0) {\n            s.insert(i);\n        }\n    }\n   \
    \ return std::vector<long>(s.begin(), s.end());\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd9rplp6e: /tmp/tmpd9rplp6e.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ n = 0;\n    for (long i : l)\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \            n += i;\n        }\n    return positive;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg0gvr2jj: /tmp/tmpg0gvr2jj.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  // Go through\
    \ each value in the list\n  for (int i = 0; i < l.size(); i++) {\n    // Check\
    \ if the current value is positive\n    if (l[i] > 0) res.push_back(l[i]);\n \
    \ }\n  // Return the final result\n  return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ans;\n  for (long i\
    \ : l) {\n    if (i >= 0)\n      ans.push_back(i);\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphyu0tejt: /tmp/tmphyu0tejt.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto item : l) {\n        if (item > 0)\n            positive.push_back(item);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> out;\n    std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(out), [](long n) {\n        return n > 0;\n    });\n\
    \    return out;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto ele : l) {\n        if (ele > 0) positive.push_back(ele);\n    }\n   \
    \ return positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> p;\n  for (long i :\
    \ l) {\n    if (i >= 0)\n      p.push_back(i);\n  }\n  return p;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8ys10lhy: /tmp/tmp8ys10lhy.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096734
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ pos;\n  for (long i = 0; i != l.size(); ++i) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp672gd2q0: /tmp/tmp672gd2q0.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ e : l) {\n        if (e > 0) {\n            res.push_back(e);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp__25qy3n: /tmp/tmp__25qy3n.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for(long i\
    \ = 0; i < (long) l.size(); ++i) {\n    if(l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            pos.push_back(i);\n    }\n    std::sort(pos.begin(),\
    \ pos.end());\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1muqddi2: /tmp/tmp1muqddi2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1hu8flxs: /tmp/tmp1hu8flxs.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp__25qy3n: /tmp/tmp__25qy3n.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  for\
    \ (long i : l)\n    if (i < 0) return std::vector<long>();\n  return l;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1ib1hs6v: /tmp/tmp1ib1hs6v.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::set<long> pos;\n  pos.reserve(l.size());\n\
    \  for (auto x : l)\n    if (x > 0)\n      pos.insert(x);\n  std::vector<long>\
    \ rvec(pos);\n  rvec.erase(std::unique(rvec.begin(), rvec.end()),\n          \
    \    rvec.end());\n  return rvec;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tra5_gu.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8tra5_gu.cpp:10:7: error: \u2018class std::set<long int>\u2019\
    \ has no member named \u2018reserve\u2019\n   10 |   pos.reserve(l.size());\n\
    \      |       ^~~~~~~\n/tmp/tmp8tra5_gu.cpp:14:29: error: no matching function\
    \ for call to \u2018std::vector<long int>::vector(std::set<long int>&)\u2019\n\
    \   14 |   std::vector<long> rvec(pos);\n      |                             ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8tra5_gu.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8tra5_gu.cpp:14:29: note:   candidate expects 3 arguments,\
    \ 1 provided\n   14 |   std::vector<long> rvec(pos);\n      |                \
    \             ^\nIn file included from /usr/include/c++/9/vector:67,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp8tra5_gu.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>, const allocator_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<long int>]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |       ^~~~~"
  stdout: ''
  timestamp: 1660096733
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    // Create\
    \ a helper function.\n    auto checker = [](long val, long & val) {\n        if\
    \ (val > 0) {\n            val = val + 1;\n        }\n    };\n    // Run through\
    \ the vector and check each value.\n    for (long i : l) {\n        // Check if\
    \ it's positive. If not, ignore it and continue.\n        if (!checker(i, ret[i]))\
    \ {\n            continue;\n        }\n        // If it was positive, return it.\n\
    \        ret.push_back(i);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4aup13g4.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4aup13g4.cpp:11:40: error: conflicting declaration \u2018\
    long int& val\u2019\n   11 |     auto checker = [](long val, long & val) {\n \
    \     |                                 ~~~~~~~^~~\n/tmp/tmp4aup13g4.cpp:11:28:\
    \ note: previous declaration as \u2018long int val\u2019\n   11 |     auto checker\
    \ = [](long val, long & val) {\n      |                       ~~~~~^~~\n/tmp/tmp4aup13g4.cpp:19:31:\
    \ error: no match for call to \u2018(get_positive(std::vector<long int>)::<lambda(long\
    \ int)>) (long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type&)\u2019\n   19 |         if (!checker(i, ret[i])) {\n     \
    \ |                               ^\n/tmp/tmp4aup13g4.cpp:19:31: note: candidate:\
    \ \u2018void (*)(long int)\u2019 <conversion>\n/tmp/tmp4aup13g4.cpp:19:31: note:\
    \   candidate expects 2 arguments, 3 provided\n/tmp/tmp4aup13g4.cpp:11:20: note:\
    \ candidate: \u2018get_positive(std::vector<long int>)::<lambda(long int)>\u2019\
    \n   11 |     auto checker = [](long val, long & val) {\n      |             \
    \       ^\n/tmp/tmp4aup13g4.cpp:11:20: note:   candidate expects 1 argument, 2\
    \ provided\n"
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            p.push_back(l[i]);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Sort input array.\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] >= 0) {\n            res.push_back(l[i]);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp10yqx57p: /tmp/tmp10yqx57p.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2ceqcmiy: /tmp/tmp2ceqcmiy.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    new_l.push_back(l.front());\n\
    \    for (long i : l) {\n        if ((i > 0) || (i == 0)) {\n            new_l.push_back(i);\n\
    \        }\n    }\n    return new_l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpijcnms92: /tmp/tmpijcnms92.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ positive(l.begin(), l.end());\n  positive.erase(std::unique(positive.begin(),\
    \ positive.end()), positive.end());\n  return positive;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb4buzpvg: /tmp/tmpb4buzpvg.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (auto\
    \ i : l) {\n        if (i >= 0) r.push_back(i);\n    }\n    return r;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxryz2sgk: /tmp/tmpxryz2sgk.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res = l;\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4sbgmwrf: /tmp/tmp4sbgmwrf.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v1(l);\n    std::sort(v1.begin(),\
    \ v1.end());\n    v1.erase(std::unique(v1.begin(), v1.end()), v1.end());\n   \
    \ return v1;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsr3tbyyq: /tmp/tmpsr3tbyyq.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096735
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positives(l.size(),\
    \ -1);\n  std::iota(positives.begin(), positives.end(), 0);\n  std::sort(positives.begin(),\
    \ positives.end());\n  return positives;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7ggeot9w: /tmp/tmp7ggeot9w.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    int\
    \ size = l.size();\n    for (int i = 0; i < size; i++) {\n        if (l[i] > 0)\
    \ result.push_back(l[i]);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    long curr\
    \ = 0;\n    for(auto i : l)\n        if(i>0) {\n            if(curr>0) // If not\
    \ the first element\n                res.push_back(curr);\n            curr=i;\
    \ // Set the current number to i.\n        } else {\n            curr=0; // Set\
    \ the current number to 0.\n        }\n    if(curr>0) // At the end add the last\
    \ number.\n        res.push_back(curr);\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyv0bz1aj: /tmp/tmpyv0bz1aj.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  auto\
    \ n = l.size();\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  for (long\
    \ i = n; i > 0; i--) {\n    if (l[i - 1] >= 0) break;\n    l.pop_back();\n  }\n\
    \  return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwjkl0zt0: /tmp/tmpwjkl0zt0.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for(auto\
    \ x : l)\n        if (x > 0)\n            pos.push_back(x);\n    return pos;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  long ans = 0;\n  std::sort(l.begin(),\
    \ l.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] >= 0) {\n  \
    \    ans += l[i];\n    }\n  }\n  return std::vector<long>(ans);\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3_73kror: /tmp/tmp3_73kror.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) p.push_back(l[i]);\n   \
    \ }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3o4o5qma: /tmp/tmp3o4o5qma.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    v.insert(v.begin(),\
    \ l.begin(), l.end());\n    std::sort(v.begin(), v.end());\n    return v;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptn5fwo6t: /tmp/tmptn5fwo6t.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> p;\n  p.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) {\n      p.push_back(i);\n    }\n  }\n\
    \  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5bfcxryg: /tmp/tmp5bfcxryg.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    long i = l[0];\n    long j = 0;\n    while (i <= l[j]) {\n  \
    \      res.push_back(i);\n        i += j == l.size() - 1 ? 1 : j + 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjzcnexxt: /tmp/tmpjzcnexxt.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    assert(l.size() != 0);\n    std::vector<long>\
    \ res(l.size());\n    int n = l.size();\n    \n    int i = 0;\n    long lmax =\
    \ l[0];\n    \n    while ((i < n) && (lmax <= l[i])){\n        lmax = l[i];\n\
    \        i++;\n    }\n    \n    long ans = lmax;\n    \n    while (i < n) {\n\
    \        while ((i < n) && (l[n - i - 1] >= ans)){\n            ans = l[n - i\
    \ - 1];\n            i++;\n        }\n        \n        res[n - i - 1] = ans;\n\
    \    }\n    \n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        if ((i > 0) || (i < 0)) {\n          \
    \  res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu618p6yt: /tmp/tmpu618p6yt.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp__25qy3n: /tmp/tmp__25qy3n.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ &i : l) {\n        if (i >= 0) {\n            ret.push_back(i);\n        }\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmdzk6kyz: /tmp/tmpmdzk6kyz.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret;\n  for (long i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      ret.push_back(l[i]);\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6slsxq_1: /tmp/tmp6slsxq_1.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ i : l) {\n        if (i >= 0) ans.push_back(i);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr0wd925c: /tmp/tmpr0wd925c.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (const auto& x : l)\n        if (x >= 0)\n            positive.push_back(x);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5nvroy71: /tmp/tmp5nvroy71.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    // Sort\
    \ the input in ascending order.\n    std::sort(l.begin(), l.end());\n    // Find\
    \ the first positive number in the sorted list.\n    for (long i = 0; i < l.size();\
    \ ++i) {\n        if (l[i] > 0) {\n            while (result.size() != i && l[i]\
    \ < 0) {\n                result.push_back(0);\n                --i;\n       \
    \     }\n            assert(result.size() == i);\n            ++i;\n         \
    \   result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr3y_c6ht: /tmp/tmpr3y_c6ht.cpp:19: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `result.size() == i'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i > 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (long\
    \ i : l) {\n        if (i > 0)\n            r.push_back(i);\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> new_l;\n  long temp\
    \ = 0;\n  for (long i : l) {\n    if (i < 0) {\n      new_l.push_back(i);\n  \
    \  } else {\n      new_l.push_back(temp);\n      temp = i;\n    }\n  }\n  return\
    \ new_l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4kkw63kq: /tmp/tmp4kkw63kq.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive(l);\n  \
    \  for (auto x : positive) {\n        if (x >= 0) break;\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjp0v890i: /tmp/tmpjp0v890i.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret;\n  ret.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) {\n      ret.push_back(i);\n    }\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp95euou99: /tmp/tmp95euou99.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            ans.push_back(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpoa0p9gyw: /tmp/tmpoa0p9gyw.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    new_l.reserve(l.size());\n\
    \    std::transform(l.begin(), l.end(), std::back_inserter(new_l), [&](int x){return\
    \ std::max(-x,x);});\n    return new_l;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpeajlscf0: /tmp/tmpeajlscf0.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ x: l) {\n        if (x>0) {\n            ans.push_back(x);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ res;\n  res.push_back(l[0]);\n  for (long i : l) {\n    if (i >= 0)\n      res.push_back(i);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmbl29j81: /tmp/tmpmbl29j81.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto\
    \ x : l) if(x >= 0) res.push_back(x);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpl0bl9k7n: /tmp/tmpl0bl9k7n.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp__25qy3n: /tmp/tmp__25qy3n.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096733
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (auto i : l) {\n        sum += i;\n        if (sum >\
    \ 0) {\n            positive.push_back(sum);\n        }\n        sum = 0;\n  \
    \  }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p(l.size());\n  \
    \  for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n        \
    \    p[i] = l[i];\n        }\n    }\n    return p;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprfpr96i7: /tmp/tmprfpr96i7.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> pos;\n  pos.reserve(l.size());\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) pos.push_back(l[i]);\n\
    \  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positive;\n  std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(positive),\n               [](long x) { return x\
    \ > 0; });\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> newL;\n\tfor (long\
    \ n : l) {\n\t\tif (n > 0) newL.push_back(n);\n\t}\n\treturn newL;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    bool first\
    \ = true;\n    for (auto &e : l) {\n        if (e < 0) {\n            if (first)\
    \ {\n                res.push_back(0);\n            }\n            first = false;\n\
    \        } else {\n            res.push_back(e);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplfgsjse8: /tmp/tmplfgsjse8.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::transform(l.begin(), l.end(), l.begin(),\
    \ [](long x) { return x > 0; });\n  return l;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmq5sxie5: /tmp/tmpmq5sxie5.cpp:14: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> nums;\n    long long\
    \ ans = 0, x = 0, y = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n     \
    \   x = l[i];\n        y = l[i + 1];\n        ans = ans + x * y;\n    }\n    x\
    \ = l[l.size() - 1];\n    y = l[0];\n    ans = ans + x * y;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        nums.push_back(l[i]);\n    }\n    for (int\
    \ i = 0; i < nums.size() - 1; i++) {\n        if (nums[i] > 0) {\n           \
    \ nums[i] = nums[i] + ans;\n            ans = 0;\n        }\n    }\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdn0rh328: /tmp/tmpdn0rh328.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ positive(l);\n  std::rotate(positive.begin(), positive.begin() + 1, positive.end());\n\
    \  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptswq_ss4: /tmp/tmptswq_ss4.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    std::set_difference(l.begin(),\
    \ l.end(), std::begin(res), std::end(res),\n        [](long a, long b) { return\
    \ a > b; });\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpro7cu8__.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = get_positive(std::vector<long int>)::<lambda(long int, long int)>; _Compare\
    \ = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5435:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = get_positive(std::vector<long int>)::<lambda(long int, long int)>]\u2019\
    \n/tmp/tmpro7cu8__.cpp:11:45:   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:16:\
    \ error: assignment of read-only location \u2018* __result.get_positive(std::vector<long\
    \ int>)::<lambda(long int, long int)>::operator bool (*)(long int, long int)()\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ~~~~~~~~~~^~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5380:6:\
    \ error: no match for \u2018operator++\u2019 (operand type is \u2018get_positive(std::vector<long\
    \ int>)::<lambda(long int, long int)>\u2019)\n 5380 |      ++__result;\n     \
    \ |      ^~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpro7cu8__.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:465:5:\
    \ error: \u2018_OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _OI = get_positive(std::vector<long int>)::<lambda(long\
    \ int"
  stdout: ''
  timestamp: 1660096736
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 2);\n  std::vector<long>\
    \ ret;\n  ret.reserve(l.size());\n  for (size_t i = 0; i < l.size(); ++i) {\n\
    \    if (l[i] > 0) {\n      ret.push_back(l[i]);\n    }\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgmhpa2ek: /tmp/tmpgmhpa2ek.cpp:9: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  // your code goes here\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp28i8qtjg: /tmp/tmp28i8qtjg.cpp:13: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096736
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (auto\
    \ &i : l) {\n        i = abs(i);\n        if (r.size() < i) {\n            r.assign(r.size(),\
    \ 0);\n        }\n        r[i] += 1;\n    }\n    std::vector<long> v(r.size(),\
    \ 0);\n    for (auto &i : r) {\n        v[i] += 1;\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l.size());\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) {\n     \
    \       res[i] = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw_5lwa7u: /tmp/tmpw_5lwa7u.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096737
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> p;\n    p.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        if (*it > 0) {\n            p.push_back(*it);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5zsl3v6u: /tmp/tmp5zsl3v6u.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096738
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  for (long i = 0; i < l.size(); i++) {\n\
    \    if (l[i] < 0)\n      l[i] = -l[i];\n  }\n  return l;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppgave1x3: /tmp/tmppgave1x3.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  while\
    \ (l.front() < 0) l.front() = -l.front();\n  std::vector<long> res;\n  std::copy(l.begin(),\
    \ l.end(), std::back_inserter(res));\n  return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2gw3ge2_: /tmp/tmp2gw3ge2_.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096738
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 1);\n  std::vector<long>\
    \ positive;\n  positive.reserve(l.size());\n  for (auto it = l.begin(); it !=\
    \ l.end(); ++it) {\n    if (*it > 0) {\n      positive.push_back(*it);\n    }\n\
    \  }\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpinixqzag: /tmp/tmpinixqzag.cpp:9: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() >= 1'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> r;\n    auto begin = std::unique(l.begin(), l.end());\n \
    \   auto last = std::unique(begin, l.end());\n    std::copy(begin, last, std::back_inserter(r));\n\
    \    return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpujib1zet: /tmp/tmpujib1zet.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> re;\n    for (long\
    \ i : l) {\n        if (i < 0)\n            continue;\n        if (re.empty())\n\
    \            re.push_back(i);\n        else if (re.back() <= i)\n            re.push_back(i);\n\
    \        else\n            re.push_back(re[re.size() - 1] + 1);\n    }\n    return\
    \ re;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp29u1vu0b: /tmp/tmp29u1vu0b.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n        \
    \    res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096738
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    long long s = 0;\n    for (auto x : l) {\n        if (x > 0)\
    \ s++;\n        else s--;\n        res.push_back(x);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_g9m255o: /tmp/tmp_g9m255o.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> v;\n  for (auto it\
    \ = l.begin(); it != l.end(); it++) {\n    if (*it > 0) {\n      v.push_back(*it);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if (l[i] > 0) result.push_back(l[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (const auto& i : l) {\n        if (i >= 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp55b043z1: /tmp/tmp55b043z1.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positives;\n  for (long\
    \ i: l) {\n    if (i > 0)\n      positives.push_back(i);\n  }\n  return positives;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0)\n            result.push_back(i);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ p;\n  for (long i : l) {\n    if (i > 0) p.push_back(i);\n  }\n  return p;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmposxsk5jj: /tmp/tmposxsk5jj.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l.size());\n\
    \    std::iota(std::begin(res), std::end(res), 0);\n    auto it = std::find_if(std::begin(res),\
    \ std::end(res), [&l](long n){\n        return n < 0;\n    });\n    while (it\
    \ != std::end(res)) {\n        res[std::distance(std::begin(res), it)] = -l[std::distance(std::begin(l),\
    \ it)];\n        it++;\n        auto it = std::find_if(std::begin(res), std::end(res),\
    \ [&l](long n){\n            return n >= 0;\n        });\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpndkvzmr2: /tmp/tmpndkvzmr2.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> result;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdxa9ewj6: /tmp/tmpdxa9ewj6.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i\
    \ = 0; i < (int)l.size(); i++) {\n    if (l[i] >= 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp19wkp0i9: /tmp/tmp19wkp0i9.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    pos.reserve(l.size());\n\
    \    for (long i : l)\n        if (i >= 0)\n            pos.push_back(i);\n  \
    \  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjgy2904v: /tmp/tmpjgy2904v.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Allocate space for positive numbers\n\
    \    std::vector<long> positive_number;\n    // Loop through all the elements\n\
    \    for (long i = 0; i < l.size(); i++) {\n        // Check if its positive\n\
    \        if (l[i] >= 0) {\n            // If it is positive\n            positive_number.push_back(l[i]);\n\
    \        }\n    }\n    // Return the positive numbers\n    return positive_number;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdypcpxix: /tmp/tmpdypcpxix.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            ret.push_back(i);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4uhrr5e3: /tmp/tmp4uhrr5e3.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret(l);\n  std::sort(ret.begin(),\
    \ ret.end());\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] < 0)\n  \
    \    ret.erase(std::remove(ret.begin(), ret.end(), l[i]), ret.end());\n    else\n\
    \      ret.push_back(l[i]);\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt8cckbwb: /tmp/tmpt8cckbwb.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkg45_hwx: /tmp/tmpkg45_hwx.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positive;\n  long temp;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      positive.push_back(l[i]);\n\
    \    }\n  }\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for(long\
    \ i = 0; i != l.size(); ++i)\n        if (l[i] > 0) pos.push_back(l[i]);\n   \
    \ return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret(l);\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) ret.push_back(l[i]);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2duwx9tw: /tmp/tmp2duwx9tw.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    int size = l.size();\n    std::vector<long>\
    \ positive(size); \n    for(int i = 0; i < size; i++) {\n        if(l[i] > 0)\n\
    \            positive.push_back(l[i]);\n    }\n    return positive;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwvb1riyq: /tmp/tmpwvb1riyq.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkg45_hwx: /tmp/tmpkg45_hwx.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  for\
    \ (int i = l.size() - 1; i >= 0; i--) {\n    if (l[i] > 0) return l;\n  }\n  return\
    \ l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphopi7h33: /tmp/tmphopi7h33.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> r;\n  for (long i =\
    \ 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      r.push_back(l[i]);\n   \
    \ }\n  }\n  return r;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096738
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i <l.size() && i < -1; i++){\n        if(l[i] > 0)\n            ans.push_back(l[i]);\n\
    \    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpicixypdr: /tmp/tmpicixypdr.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) ans.push_back(l[i]);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::vector<long>\
    \ negative;\n    std::vector<long> temp;\n\n    for (auto elem : l) {\n      \
    \  if (elem > 0) {\n            temp.push_back(elem);\n        } else {\n    \
    \        positive.insert(positive.end(), temp.begin(), temp.end());\n        \
    \    temp.clear();\n        }\n    }\n    positive.insert(positive.end(), temp.begin(),\
    \ temp.end());\n    negative.insert(negative.end(), temp.begin(), temp.end());\n\
    \n    negative.erase(std::unique(negative.begin(), negative.end()), negative.end());\n\
    \    positive.erase(std::unique(positive.begin(), positive.end()), positive.end());\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphu2uo2ss: /tmp/tmphu2uo2ss.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> s;\n  s.reserve(l.size());\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      s.push_back(l[i]);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> newL;\n    std::vector<long>\
    \ positiveL;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\
    \ {\n            positiveL.push_back(l[i]);\n        } else {\n            newL.push_back(l[i]);\n\
    \        }\n    }\n    return newL;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0wxoyzpl: /tmp/tmp0wxoyzpl.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            pos.push_back(i);\n        }\n\
    \    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_s_nr64i: /tmp/tmp_s_nr64i.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans(l.size());\n\
    \    for (int i = 0; i < l.size(); i++)\n        if (l[i] >= 0)\n            ans[i]\
    \ = l[i];\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw7lrhta0: /tmp/tmpw7lrhta0.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> temp;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            temp.push_back(i);\n        }\n\
    \    }\n    return temp;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpor3ooe0s: /tmp/tmpor3ooe0s.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  long n = l.size();\n  std::vector<long>\
    \ v;\n  for (int i = 0; i < n; ++i) {\n    if (l[i] > 0)\n      v.push_back(l[i]);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive_numbers;\n\
    \    for(long i = 0; i < l.size(); ++i) {\n        if( l[i] > 0 ) {\n        \
    \    positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if ((i > 0) && (res.size() == 0)) {\n            res.push_back(i);\n\
    \        } else if (res.size() != 0) {\n            if (i < 0) {\n           \
    \     res.insert(res.begin(), -i);\n            } else {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsskqrxdd: /tmp/tmpsskqrxdd.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i\
    \ : l) {\n    if (i >= 0) res.push_back(i);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpesj_hsbz: /tmp/tmpesj_hsbz.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  for (long i : l) {\n    if (i > 0) return\
    \ l;\n  }\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp75ac6fqq: /tmp/tmp75ac6fqq.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096739
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(size_t\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] >= 0)\n            res.push_back(l[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppjhlyv_8: /tmp/tmppjhlyv_8.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096740
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i > 0) positive.push_back(i);\n    }\n    return\
    \ positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096739
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::set<long> s;\n    for (long v\
    \ : l)\n        if (v > 0)\n            s.insert(v);\n    std::vector<long> result;\n\
    \    result.reserve(s.size());\n    for (long v : l)\n        if (s.count(v) >\
    \ 0)\n            result.push_back(v);\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096740
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::vector<long>::iterator\
    \ it;\n    for (it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n\
    \            positive.push_back(*it);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096740
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l);\n    std::sort(res.begin(),\
    \ res.end(), std::greater<long>());\n    res.erase(res.begin(), std::unique(\n\
    \        res.begin(), res.end(), [&](long a, long b) { return a > b; }));\n  \
    \  return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz7vcv7p2: /tmp/tmpz7vcv7p2.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096741
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> a;\n    for (long\
    \ i : l) {\n        if (i > 0)\n            a.push_back(i);\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ positive;\n  positive.reserve(l.size());\n  for (auto i : l)\n    if (i >= 0)\n\
    \      positive.push_back(i);\n  return positive;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy46ti9_q: /tmp/tmpy46ti9_q.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    for (long i : l) {\n        if (i >\
    \ 0) return l;\n    }\n    return std::vector<long>();\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4nssohd_: /tmp/tmp4nssohd_.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::sort(l.begin(),\
    \ l.end());\n    long last = l[0];\n    for(long i = 1; i < l.size(); i++) {\n\
    \        if(l[i] > last) {\n            positive.push_back(last);\n          \
    \  last = l[i];\n        } else {\n            last = l[i];\n        }\n    }\n\
    \    positive.push_back(last);\n    return positive;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp70u66rab: /tmp/tmp70u66rab.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> positive(l);\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (long i = 0; i < l.size(); i++)\n\t\tif (l[i] >= 0)\n\t\t\t\
    positive[i] = l[i];\n\treturn positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps84ee10i: /tmp/tmps84ee10i.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> p;\n\tfor (int i =\
    \ 0; i < l.size(); i++)\n\t\tif (l[i] > 0)\n\t\t\tp.push_back(l[i]);\n\treturn\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> ret;\n\tstd::transform(l.begin(),\
    \ l.end(), std::back_inserter(ret), [](long x) { return x > 0 ? x : 0; });\n\t\
    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp38pyv9tc: /tmp/tmp38pyv9tc.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> p = {0};\n  for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n    if ((*it > 0) || (*it == 0))\n \
    \     p.push_back(*it);\n  }\n  return p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphy5kdpus: /tmp/tmphy5kdpus.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::unique_ptr<bool>\
    \ flag(std::make_unique<bool>(false));\n  std::sort(l.begin(), l.end(), [&flag](int\
    \ a, int b){\n    if (flag[a] && flag[b]) {\n      return false;\n    }\n    if\
    \ (flag[a]) {\n      flag[a] = true;\n      return true;\n    }\n    flag[b] =\
    \ true;\n    return true;\n  });\n  return l;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk52m_tw6.cpp: In lambda function:\n/tmp/tmpk52m_tw6.cpp:12:13:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   12 |     if (flag[a] && flag[b]) {\n      |       \
    \      ^\n/tmp/tmpk52m_tw6.cpp:12:24: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::unique_ptr<bool>\u2019 and \u2018int\u2019)\n\
    \   12 |     if (flag[a] && flag[b]) {\n      |                        ^\n/tmp/tmpk52m_tw6.cpp:15:13:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   15 |     if (flag[a]) {\n      |             ^\n/tmp/tmpk52m_tw6.cpp:16:11:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   16 |       flag[a] = true;\n      |           ^\n/tmp/tmpk52m_tw6.cpp:19:9:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   19 |     flag[b] = true;\n      |         ^\n"
  stdout: ''
  timestamp: 1660096741
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l)\n        if (i > 0)\n            res.push_back(i);\n   \
    \ return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096741
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    std::vector<long>\
    \ tmp;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) tmp.push_back(l[i]);\n\
    \        else p.push_back(tmp);\n        tmp.clear();\n    }\n    return p;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc_zteba6.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc_zteba6.cpp:13:29: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>&)\u2019\n  \
    \ 13 |         else p.push_back(tmp);\n      |                             ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc_zteba6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ positive;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n  \
    \    positive.push_back(l[i]);\n    }\n  }\n  return positive;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4780r635: /tmp/tmp4780r635.cpp:9: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 1);\n  std::vector<long>\
    \ r;\n  for (long i : l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2ivpv9sj: /tmp/tmp2ivpv9sj.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result(l.size());\n\
    \    for (size_t i = 0; i < l.size(); ++i) {\n        result[i] = (l[i] > 0) ?\
    \ (l[i]) : 0L;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk3d03nhz: /tmp/tmpk3d03nhz.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> temp;\n    for (auto\
    \ i : l)\n        if (i >= 0) temp.push_back(i);\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1css8_vk: /tmp/tmp1css8_vk.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i\
    \ : l) {\n    if (i >= 0)\n      res.push_back(i);\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpay9wu7wf: /tmp/tmpay9wu7wf.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ x : l) {\n        if (x >= 0) {\n            res.push_back(x);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwetboq3k: /tmp/tmpwetboq3k.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    // Sort\
    \ the list using std::sort.\n    std::sort(l.begin(), l.end());\n    // Iterate\
    \ over all items in the list.\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        // If current item is positive, add it to the new list.\n       \
    \ if (*it > 0) {\n            new_l.push_back(*it);\n        }\n    }\n    return\
    \ new_l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_0l0hsgw: /tmp/tmp_0l0hsgw.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    int n = l.size();\n    // First check\
    \ for 0 and return it.\n    // If l has size 0, then return an empty vector.\n\
    \    if (l.size() == 0) {\n        return std::vector<long>();\n    }\n    //\
    \ Get positive numbers.\n    // If negative numbers are found, add them to the\
    \ returned vector.\n    // >>> get_positive([-1, 2, -4, 5, 6])\n    // [2, 5,\
    \ 6]\n    for (int i = 0; i < n; i++) {\n        if (l[i] > 0) {\n           \
    \ l.push_back(l[i]);\n        }\n    }\n    // Return the vector.\n    return\
    \ l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_gd_cozo: /tmp/tmp_gd_cozo.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Copy list into a new list.\n   \
    \ std::vector<long> ans;\n    ans.reserve(l.size());\n    for (long i : l)\n \
    \       if (i >= 0)\n            ans.push_back(i);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9itzkc13: /tmp/tmp9itzkc13.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto&\
    \ el : l) {\n    if (el > 0) {\n      res.push_back(el);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l.size());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n          \
    \  res[i] = l[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5ph32vk3: /tmp/tmp5ph32vk3.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    int cnt\
    \ = 0;\n    for (long i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n\
    \            cnt++;\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    cnt = 0;\n    for(long i : res) {\n        if (cnt < res.size() - 1) res.push_back(-i);\n\
    \        cnt++;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnrhdnil0: /tmp/tmpnrhdnil0.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> tmp;\n  std::set_difference(std::begin(l),\
    \ std::end(l),\n                      std::begin(l), std::end(tmp), std::less<>());\n\
    \  return tmp;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpvykv8t2f.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = std::less<void>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5435:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::less<void>]\u2019\n/tmp/tmpvykv8t2f.cpp:11:66:   required from\
    \ here\n/usr/include/c++/9/bits/stl_algo.h:5378:6: error: no match for \u2018\
    operator*\u2019 (operand type is \u2018std::less<void>\u2019)\n 5378 |      *__result\
    \ = *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvykv8t2f.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvykv8t2f.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<void>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~"
  stdout: ''
  timestamp: 1660096741
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \    std::vector<long> res;\n    for (std::size_t i = 0; i < l.size(); ++i) {\n\
    \        if (l[i] >= 0) res.push_back(l[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe_czlw24: /tmp/tmpe_czlw24.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    long\
    \ s = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            s = l[i] + s;\n        } else {\n            new_l.push_back(s);\
    \ // store positive number\n            s = l[i];\n        }\n    }\n    new_l.push_back(s);\
    \ // store last positive number\n    return new_l;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcre_qx0t: /tmp/tmpcre_qx0t.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  auto result = std::vector<long>();\n    for (auto x : l)\n        if (x >=\
    \ 0)\n            result.push_back(x);\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmvlaa73w: /tmp/tmpmvlaa73w.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(p), [](const long n){return n > 0; });\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v(l.begin(), l.end());\n\
    \    std::sort(v.begin(), v.end(), std::greater<long>());\n    std::vector<long>\
    \ res;\n    res.reserve(v.size());\n    for (long i : v) {\n        if (i >= 0)\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnicf8et0: /tmp/tmpnicf8et0.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto&\
    \ i : l)\n    if (i > 0) {\n      res.push_back(i);\n    }\n  return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n            v.push_back(l[i]);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfl1klusn: /tmp/tmpfl1klusn.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto\
    \ i : l)\n        if(i>0)\n            res.push_back(i);\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ i : l)\n        if (i >= 0) ret.push_back(i);\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgv7jhj4k: /tmp/tmpgv7jhj4k.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> ans;\n\tfor (auto i\
    \ : l) {\n\t\tif (i > 0) ans.push_back(i);\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> nums = l;\n    for\
    \ (auto& num : nums) {\n        if (num > 0) {\n            return nums;\n   \
    \     }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprvh2j0ql: /tmp/tmprvh2j0ql.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            r.push_back(i);\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2v5yl185: /tmp/tmp2v5yl185.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> result;\n  for (long\
    \ i : l)\n    if (i >= 0)\n      result.push_back(i);\n  return result;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8e1qsnwd: /tmp/tmp8e1qsnwd.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) if (i >= 0) pos.push_back(i);\n    return pos;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpryzvfhc0: /tmp/tmpryzvfhc0.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    auto it = std::find_if(l.begin(), l.end(),\n\
    \                         [](long i) { return i >= 0; });\n    assert(it != l.end());\n\
    \    l.erase(std::remove_if(l.begin(), l.end(),\n                            \
    \ [it](int i) { return i >= 0; }),\n            l.end());\n    return l;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsol3_avp: /tmp/tmpsol3_avp.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    long maxnum\
    \ = std::numeric_limits<long>::min();\n    for(auto e : l) {\n        if(e < 0)\
    \ \n            continue;\n        maxnum = std::max(maxnum, e);\n    }\n    for(auto\
    \ e : l) {\n        if(e < 0)\n            res.push_back(-e);\n        else\n\
    \            res.push_back(e);\n    }\n    for(auto e : res)\n        if(maxnum\
    \ != e)\n            res.push_back(-e);\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx4_8sgfh: /tmp/tmpx4_8sgfh.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive(l);\n  \
    \  // Filter out negative values.\n    for (auto it = positive.begin(); it !=\
    \ positive.end(); it++) {\n        if (*it < 0) {\n            positive.erase(it);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplipjxb0m: /tmp/tmplipjxb0m.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096742
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> res;\n    std::vector<bool> flag(l.size());\n    long last\
    \ = -1;\n    for (long i : l) {\n        if (flag[i]) {\n            res.push_back(last);\n\
    \            flag[i] = false;\n        } else {\n            flag[i] = true;\n\
    \            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for(auto\
    \ i : l) {\n        if(i>=0)\n            r.push_back(i);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr0fon66u: /tmp/tmpr0fon66u.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long::size_type\
    \ i = 0, j = 0;\n    while ( i < l.size()) {\n        while ( j >= 0 ) {\n   \
    \         if ( l[i] > l[j] )\n                break;\n            j--;\n     \
    \   }\n        if ( j == -1 )\n            positive.push_back( l[i++] );\n   \
    \ }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkznig6g3.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkznig6g3.cpp:10:21: error: qualified-id in declaration\
    \ before \u2018i\u2019\n   10 |     long::size_type i = 0, j = 0;\n      |   \
    \                  ^\n/tmp/tmpkznig6g3.cpp:11:13: error: \u2018i\u2019 was not\
    \ declared in this scope\n   11 |     while ( i < l.size()) {\n      |       \
    \      ^\n/tmp/tmpkznig6g3.cpp:12:17: error: \u2018j\u2019 was not declared in\
    \ this scope\n   12 |         while ( j >= 0 ) {\n      |                 ^\n\
    /tmp/tmpkznig6g3.cpp:17:14: error: \u2018j\u2019 was not declared in this scope\n\
    \   17 |         if ( j == -1 )\n      |              ^\n"
  stdout: ''
  timestamp: 1660096742
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  long sum = 0;\n  for (long i : l) {\n\
    \    if (i > 0)\n      sum += i;\n  }\n  std::vector<long> ans;\n  while (sum\
    \ >= 0) {\n    long tmp = sum;\n    sum = 0;\n    for (long i : l) {\n      if\
    \ (i > 0)\n        sum += i;\n    }\n    if (tmp == sum)\n      ans.push_back(tmp);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660096748
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (auto\
    \ i : l) {\n        if (i > 0)\n            ret.push_back(i);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    for (long i : l) {\n        if (i >=\
    \ 0)\n            l.push_back(i);\n    }\n    return l;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2rycgvhc: /tmp/tmp2rycgvhc.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() > 0);\n  assert(l.size()\
    \ <= 100);\n  std::vector<long> rev_l;\n  rev_l.push_back(l[0]);\n  for (int i\
    \ = 1; i < l.size(); i++) {\n    if (l[i] >= 0) {\n      rev_l.push_back(l[i]);\n\
    \    } else {\n      break;\n    }\n  }\n  return rev_l;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwbj0vl9u: /tmp/tmpwbj0vl9u.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    long long\
    \ temp = 0;\n    for(long long i : l) {\n        if(i>0) {\n            temp =\
    \ i*i;\n            while(temp>0) {\n                ans.push_back(i/temp);\n\
    \                temp--;\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgmlchno6: /tmp/tmpgmlchno6.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 1);\n  l.sort();\n\
    \  std::vector<long> p(l.size());\n  for (auto &i : p) i = l[i - 1];\n  return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkla9ytxw.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkla9ytxw.cpp:10:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   10 |   l.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Write your code here.\n    long\
    \ n = 0;\n    std::vector<long> ans;\n    for (long i : l) {\n        if (i >=\
    \ 0) {\n            ans.push_back(i);\n            n += i;\n        } else {\n\
    \            ans.push_back(n);\n            n = 0;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8r9eeap8: /tmp/tmp8r9eeap8.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) positive.push_back(i);\n    }\n    return\
    \ positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6ij8jd2u: /tmp/tmp6ij8jd2u.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> pos_val;\n    long val = 0;\n    for (long i : l) {\n   \
    \     if (i > 0)\n            val = i;\n        pos_val.push_back(val);\n    }\n\
    \    return pos_val;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd9ap6s76: /tmp/tmpd9ap6s76.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,
    -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096744
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result(l);\n    std::sort(result.begin(),\
    \ result.end(), [](long a, long b) {\n        return a > b;\n    });\n    return\
    \ std::unique(result.begin(), result.end());\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpghpujj99.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpghpujj99.cpp:13:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(result.std::vector<long int>::begin(), result.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n   13 |     return std::unique(result.begin(),\
    \ result.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660096743
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    int n = l.size();\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < n; ++i) {\n        if (l[i] > 0) {\n         \
    \   res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096743
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096743
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  l.sort();\n  assert(l.size() >= 2);\n\
    \  long low = l.front();\n  long high = l.back();\n  if (low >= 0) {\n    low++;\n\
    \  }\n  while (low <= high) {\n    if (low > high) {\n      std::vector<long>\
    \ temp(low, high);\n      std::swap(temp[0], temp[1]);\n      return temp;\n \
    \   }\n    if (low * low <= high * high) {\n      std::vector<long> temp(low,\
    \ low + 1);\n      std::swap(temp[0], temp[1]);\n      low++;\n    } else if (low\
    \ * low > high * high) {\n      std::vector<long> temp(high + 1, high + high);\n\
    \      std::swap(temp[0], temp[1]);\n      high--;\n    } else {\n      std::vector<long>\
    \ temp(low, high);\n      std::swap(temp[0], temp[1]);\n      break;\n    }\n\
    \  }\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5xbbm7mw.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5xbbm7mw.cpp:9:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    9 |   l.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660096743
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> res;\n    for (long i : l) {\n        if (i > 0)\n      \
    \      res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_9rpd5jv: /tmp/tmp_9rpd5jv.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9,
    123, 1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096743
