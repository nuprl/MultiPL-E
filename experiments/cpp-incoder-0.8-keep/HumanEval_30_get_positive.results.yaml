name: HumanEval_30_get_positive
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> pos;\n  for (auto i\
    \ : l) {\n    if (i >= 0)\n      pos.push_back(i);\n  }\n  return pos;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpg6n5bsyt: /tmp/tmpg6n5bsyt.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 2);\n  std::vector<long>\
    \ result(l.size());\n  for (size_t i = 0; i < l.size(); i++) {\n    if (l[i] >=\
    \ 0) result[i] = l[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1c4j2sb2: /tmp/tmp1c4j2sb2.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  std::copy_if(l.begin(), l.end(), std::back_inserter(res), [](long n){return\
    \ n>0;});\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  auto it = l.begin();\n    std::vector<long> res;\n    while (it != l.end()\
    \ && it->size() > 0) {\n        auto current = std::find(it, l.end(), 0);\n  \
    \      res.push_back(std::distance(it, current));\n        it = current;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5f0l0vwc.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5f0l0vwc.cpp:12:33: error: request for member \u2018size\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   12\
    \ |     while (it != l.end() && it->size() > 0) {\n      |                   \
    \              ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for (auto\
    \ it : l)\n        if (it > 0)\n            v.push_back(it);\n    return v;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto v : l)\n        if (v >= 0)\n            result.push_back(v);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0whqy38i: /tmp/tmp0whqy38i.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    long long\
    \ pos = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            pos = i;\n            break;\n        }\n    }\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (i != pos) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd7z6fggd: /tmp/tmpd7z6fggd.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Initialize counter\n    int count_positive\
    \ = 0;\n    // Initialize result list\n    std::vector<long> r;\n    long cur_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > cur_val)\
    \ {\n            count_positive++;\n        }\n        else {\n            if\
    \ (count_positive > 0) {\n                r.push_back(cur_val);\n            \
    \    count_positive = 0;\n            }\n            cur_val = l[i];\n       \
    \ }\n    }\n    if (count_positive > 0) {\n        r.push_back(cur_val);\n   \
    \ }\n    return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfa1tiwmz: /tmp/tmpfa1tiwmz.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it)\n    {\n        if (*it >\
    \ 0) {\n            ret.push_back(*it);\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> v;\n    v.push_back(l.at(0));\n    for(long i=1;i<l.size();i++)\
    \ {\n        if(l.at(i)<l.at(0)) {\n            v.push_back(l[i]);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmperlctjjd: /tmp/tmperlctjjd.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> temp;\n    for(long\
    \ i : l) if(i>0) temp.push_back(i);\n    return temp;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret;\n  for (auto it\
    \ : l) {\n    if (it > 0) {\n      ret.push_back(it);\n    }\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for(auto\
    \ v : l) {\n        if(v >= 0) v.push_back(v);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwyh9n3gf.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwyh9n3gf.cpp:11:22: error: request for member \u2018push_back\u2019\
    \ in \u2018v\u2019, which is of non-class type \u2018long int\u2019\n   11 | \
    \        if(v >= 0) v.push_back(v);\n      |                      ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // write your code here\n    for (long\
    \ i : l)\n        if (i > 0)\n            l.push_back(i);\n    return l;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5litua9e: /tmp/tmp5litua9e.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ &ele : l)\n        if (ele > 0)\n            res.push_back(ele);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for (long\
    \ &x: l)\n        if (x > 0)\n            pos.push_back(x);\n    return pos;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    bool\
    \ flag = false;\n    for (long i : l) {\n        if ((i >= 0) && (!flag)) {\n\
    \            result.push_back(i);\n            flag = true;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2awmni74: /tmp/tmp2awmni74.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result(l.size());\n\
    \    std::transform((std::begin(l)), std::end(l), (std::begin(result)), [](long\
    \ x){return x >= 0 ? x : -1;});\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7g46s0z9: /tmp/tmp7g46s0z9.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  // Create a vector<int> with same size\
    \ as vector l\n  std::vector<int> v(l.size());\n  // Copy vector l to vector<int>\
    \ v\n  std::transform(l.begin(), l.end(), v.begin(), [](long l) {\n    return\
    \ static_cast<int>(l);\n  });\n  sort(v.begin(), v.end());\n  v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n  std::vector<long> result(v);\n  return result;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptns0cy4l.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptns0cy4l.cpp:17:29: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(std::vector<int>&)\u2019\n   17 |   std::vector<long>\
    \ result(v);\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptns0cy4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmptns0cy4l.cpp:17:29:\
    \ note:   candidate expects 3 arguments, 1 provided\n   17 |   std::vector<long>\
    \ result(v);\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptns0cy4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n      |       ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:43:\
    \ note:   no known conversion for argument 1 from \u2018std:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ v(std::unique(l.begin(), l.end()));\n  std::reverse(v.begin(), v.end());\n \
    \ std::vector<long>::iterator iter1 = v.begin();\n  std::vector<long>::iterator\
    \ iter2 = iter1;\n  std::vector<long>::iterator iter3 = iter1;\n  std::vector<long>::iterator\
    \ iter4 = iter1;\n  std::vector<long>::iterator iter5 = iter1;\n  std::vector<long>::iterator\
    \ iter6 = iter1;\n  for(; iter1 != v.end(); ++iter1, ++iter2) {\n    long first\
    \ = *iter1;\n    long second = *iter2;\n    if(second > first) {\n      iter3\
    \ = iter2;\n      iter4 = iter3;\n      iter5 = iter3;\n      iter6 = iter3;\n\
    \      if(second < second - 1) {\n        iter4 = iter2;\n        iter5 = iter4;\n\
    \        iter6 = iter4;\n      }\n      else {\n        iter5 = iter4;\n     \
    \   iter6 = iter5;\n      }\n    }\n  }\n  std::vector<long> result;\n  for(iter3\
    \ = iter1, iter4 = iter1; iter3 != iter6; ++iter3, ++iter4) {\n    long a = *iter3;\n\
    \    long b = *iter4;\n    if(b > a) {\n      result.push_back(a);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx0o6d2sf.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx0o6d2sf.cpp:10:54: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >)\u2019\n   10 |   std::vector<long> v(std::unique(l.begin(),\
    \ l.end()));\n      |                                                      ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpx0o6d2sf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpx0o6d2sf.cpp:10:54:\
    \ note:   candidate expects 3 arguments, 1 provided\n   10 |   std::vector<long>\
    \ v(std::unique(l.begin(), l.end()));\n      |                               \
    \                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpx0o6d2sf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> positive;\n    std::for_each(l.begin(), l.end(), [&](const\
    \ long x) {\n        positive.push_back(x);\n        if (x >= 0) return;\n   \
    \     --positive.back();\n    });\n    return positive;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptosh6we4: /tmp/tmptosh6we4.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) {\n            res.push_back(i);\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l)\n        if (i >= 0)\n            res.push_back(i);\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpz8ec3t69: /tmp/tmpz8ec3t69.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> r;\n  for (long i :\
    \ l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n  }\n  return r;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwxd8evwc: /tmp/tmpwxd8evwc.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::set<long> s;\n    for (auto i\
    \ : l) {\n        if (i>0) {\n            s.insert(i);\n        }\n    }\n   \
    \ return std::vector<long>(s.begin(), s.end());\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp21ud5w9r: /tmp/tmp21ud5w9r.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ n = 0;\n    for (long i : l)\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \            n += i;\n        }\n    return positive;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5eh6li49: /tmp/tmp5eh6li49.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  // Go through\
    \ each value in the list\n  for (int i = 0; i < l.size(); i++) {\n    // Check\
    \ if the current value is positive\n    if (l[i] > 0) res.push_back(l[i]);\n \
    \ }\n  // Return the final result\n  return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ans;\n  for (long i\
    \ : l) {\n    if (i >= 0)\n      ans.push_back(i);\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9_pui6lk: /tmp/tmp9_pui6lk.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto item : l) {\n        if (item > 0)\n            positive.push_back(item);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> out;\n    std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(out), [](long n) {\n        return n > 0;\n    });\n\
    \    return out;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto ele : l) {\n        if (ele > 0) positive.push_back(ele);\n    }\n   \
    \ return positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> p;\n  for (long i :\
    \ l) {\n    if (i >= 0)\n      p.push_back(i);\n  }\n  return p;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0x72j1s_: /tmp/tmp0x72j1s_.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ pos;\n  for (long i = 0; i != l.size(); ++i) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqq_2_jcw: /tmp/tmpqq_2_jcw.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ e : l) {\n        if (e > 0) {\n            res.push_back(e);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpprj3k8ze: /tmp/tmpprj3k8ze.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for(long i\
    \ = 0; i < (long) l.size(); ++i) {\n    if(l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            pos.push_back(i);\n    }\n    std::sort(pos.begin(),\
    \ pos.end());\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsz9t5cx8: /tmp/tmpsz9t5cx8.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphp5q8e75: /tmp/tmphp5q8e75.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzfbqp1xk: /tmp/tmpzfbqp1xk.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  for\
    \ (long i : l)\n    if (i < 0) return std::vector<long>();\n  return l;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjksbqyj3: /tmp/tmpjksbqyj3.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::set<long> pos;\n  pos.reserve(l.size());\n\
    \  for (auto x : l)\n    if (x > 0)\n      pos.insert(x);\n  std::vector<long>\
    \ rvec(pos);\n  rvec.erase(std::unique(rvec.begin(), rvec.end()),\n          \
    \    rvec.end());\n  return rvec;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpajng0son.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpajng0son.cpp:10:7: error: \u2018class std::set<long int>\u2019\
    \ has no member named \u2018reserve\u2019\n   10 |   pos.reserve(l.size());\n\
    \      |       ^~~~~~~\n/tmp/tmpajng0son.cpp:14:29: error: no matching function\
    \ for call to \u2018std::vector<long int>::vector(std::set<long int>&)\u2019\n\
    \   14 |   std::vector<long> rvec(pos);\n      |                             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpajng0son.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpajng0son.cpp:14:29:\
    \ note:   candidate expects 3 arguments, 1 provided\n   14 |   std::vector<long>\
    \ rvec(pos);\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpajng0son.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \  622 |       vector(initializer_list<value_type> __l,\n    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    // Create\
    \ a helper function.\n    auto checker = [](long val, long & val) {\n        if\
    \ (val > 0) {\n            val = val + 1;\n        }\n    };\n    // Run through\
    \ the vector and check each value.\n    for (long i : l) {\n        // Check if\
    \ it's positive. If not, ignore it and continue.\n        if (!checker(i, ret[i]))\
    \ {\n            continue;\n        }\n        // If it was positive, return it.\n\
    \        ret.push_back(i);\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_hg1pyq.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv_hg1pyq.cpp:11:40: error: conflicting declaration \u2018\
    long int& val\u2019\n   11 |     auto checker = [](long val, long & val) {\n \
    \     |                                 ~~~~~~~^~~\n/tmp/tmpv_hg1pyq.cpp:11:28:\
    \ note: previous declaration as \u2018long int val\u2019\n   11 |     auto checker\
    \ = [](long val, long & val) {\n      |                       ~~~~~^~~\n/tmp/tmpv_hg1pyq.cpp:19:31:\
    \ error: no match for call to \u2018(get_positive(std::vector<long int>)::<lambda(long\
    \ int)>) (long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type&)\u2019\n   19 |         if (!checker(i, ret[i])) {\n     \
    \ |                               ^\n/tmp/tmpv_hg1pyq.cpp:19:31: note: candidate:\
    \ \u2018void (*)(long int)\u2019 <conversion>\n/tmp/tmpv_hg1pyq.cpp:19:31: note:\
    \   candidate expects 2 arguments, 3 provided\n/tmp/tmpv_hg1pyq.cpp:11:20: note:\
    \ candidate: \u2018get_positive(std::vector<long int>)::<lambda(long int)>\u2019\
    \n   11 |     auto checker = [](long val, long & val) {\n      |             \
    \       ^\n/tmp/tmpv_hg1pyq.cpp:11:20: note:   candidate expects 1 argument, 2\
    \ provided\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n            p.push_back(l[i]);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Sort input array.\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] >= 0) {\n            res.push_back(l[i]);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnha2lqnv: /tmp/tmpnha2lqnv.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_pbysnuk: /tmp/tmp_pbysnuk.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    new_l.push_back(l.front());\n\
    \    for (long i : l) {\n        if ((i > 0) || (i == 0)) {\n            new_l.push_back(i);\n\
    \        }\n    }\n    return new_l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgqlgp8rs: /tmp/tmpgqlgp8rs.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ positive(l.begin(), l.end());\n  positive.erase(std::unique(positive.begin(),\
    \ positive.end()), positive.end());\n  return positive;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7h1olg0v: /tmp/tmp7h1olg0v.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (auto\
    \ i : l) {\n        if (i >= 0) r.push_back(i);\n    }\n    return r;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgj22_e1i: /tmp/tmpgj22_e1i.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res = l;\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphjfm2ea7: /tmp/tmphjfm2ea7.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v1(l);\n    std::sort(v1.begin(),\
    \ v1.end());\n    v1.erase(std::unique(v1.begin(), v1.end()), v1.end());\n   \
    \ return v1;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx89k_6xc: /tmp/tmpx89k_6xc.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positives(l.size(),\
    \ -1);\n  std::iota(positives.begin(), positives.end(), 0);\n  std::sort(positives.begin(),\
    \ positives.end());\n  return positives;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnkyewr9_: /tmp/tmpnkyewr9_.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    int\
    \ size = l.size();\n    for (int i = 0; i < size; i++) {\n        if (l[i] > 0)\
    \ result.push_back(l[i]);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    long curr\
    \ = 0;\n    for(auto i : l)\n        if(i>0) {\n            if(curr>0) // If not\
    \ the first element\n                res.push_back(curr);\n            curr=i;\
    \ // Set the current number to i.\n        } else {\n            curr=0; // Set\
    \ the current number to 0.\n        }\n    if(curr>0) // At the end add the last\
    \ number.\n        res.push_back(curr);\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplsmu0w6o: /tmp/tmplsmu0w6o.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  auto\
    \ n = l.size();\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  for (long\
    \ i = n; i > 0; i--) {\n    if (l[i - 1] >= 0) break;\n    l.pop_back();\n  }\n\
    \  return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuqjkqgte: /tmp/tmpuqjkqgte.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for(auto\
    \ x : l)\n        if (x > 0)\n            pos.push_back(x);\n    return pos;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  long ans = 0;\n  std::sort(l.begin(),\
    \ l.end());\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] >= 0) {\n  \
    \    ans += l[i];\n    }\n  }\n  return std::vector<long>(ans);\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5xcw_yuo: /tmp/tmp5xcw_yuo.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) p.push_back(l[i]);\n   \
    \ }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk669_vsx: /tmp/tmpk669_vsx.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    v.insert(v.begin(),\
    \ l.begin(), l.end());\n    std::sort(v.begin(), v.end());\n    return v;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqwk9umzl: /tmp/tmpqwk9umzl.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> p;\n  p.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) {\n      p.push_back(i);\n    }\n  }\n\
    \  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphjwbfeus: /tmp/tmphjwbfeus.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    long i = l[0];\n    long j = 0;\n    while (i <= l[j]) {\n  \
    \      res.push_back(i);\n        i += j == l.size() - 1 ? 1 : j + 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxt3q2flr: /tmp/tmpxt3q2flr.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    assert(l.size() != 0);\n    std::vector<long>\
    \ res(l.size());\n    int n = l.size();\n    \n    int i = 0;\n    long lmax =\
    \ l[0];\n    \n    while ((i < n) && (lmax <= l[i])){\n        lmax = l[i];\n\
    \        i++;\n    }\n    \n    long ans = lmax;\n    \n    while (i < n) {\n\
    \        while ((i < n) && (l[n - i - 1] >= ans)){\n            ans = l[n - i\
    \ - 1];\n            i++;\n        }\n        \n        res[n - i - 1] = ans;\n\
    \    }\n    \n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ res;\n    for (auto i : l) {\n        if ((i > 0) || (i < 0)) {\n          \
    \  res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpc0uyz_11: /tmp/tmpc0uyz_11.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbooefboi: /tmp/tmpbooefboi.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ &i : l) {\n        if (i >= 0) {\n            ret.push_back(i);\n        }\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnkycjt_k: /tmp/tmpnkycjt_k.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret;\n  for (long i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      ret.push_back(l[i]);\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkkl315ib: /tmp/tmpkkl315ib.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ i : l) {\n        if (i >= 0) ans.push_back(i);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmposglg5r4: /tmp/tmposglg5r4.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (const auto& x : l)\n        if (x >= 0)\n            positive.push_back(x);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpg4hdzpaf: /tmp/tmpg4hdzpaf.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    // Sort\
    \ the input in ascending order.\n    std::sort(l.begin(), l.end());\n    // Find\
    \ the first positive number in the sorted list.\n    for (long i = 0; i < l.size();\
    \ ++i) {\n        if (l[i] > 0) {\n            while (result.size() != i && l[i]\
    \ < 0) {\n                result.push_back(0);\n                --i;\n       \
    \     }\n            assert(result.size() == i);\n            ++i;\n         \
    \   result.push_back(l[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpu5zuj4k8: /tmp/tmpu5zuj4k8.cpp:19: std::vector<long int> get_positive(std::vector<long\
    \ int>): Assertion `result.size() == i' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i > 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (long\
    \ i : l) {\n        if (i > 0)\n            r.push_back(i);\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> new_l;\n  long temp\
    \ = 0;\n  for (long i : l) {\n    if (i < 0) {\n      new_l.push_back(i);\n  \
    \  } else {\n      new_l.push_back(temp);\n      temp = i;\n    }\n  }\n  return\
    \ new_l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp836gdnr0: /tmp/tmp836gdnr0.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive(l);\n  \
    \  for (auto x : positive) {\n        if (x >= 0) break;\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv2te8w2l: /tmp/tmpv2te8w2l.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret;\n  ret.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) {\n      ret.push_back(i);\n    }\n  }\n\
    \  return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpla3se7il: /tmp/tmpla3se7il.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            ans.push_back(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjc6_uexw: /tmp/tmpjc6_uexw.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    new_l.reserve(l.size());\n\
    \    std::transform(l.begin(), l.end(), std::back_inserter(new_l), [&](int x){return\
    \ std::max(-x,x);});\n    return new_l;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpye9erv2u: /tmp/tmpye9erv2u.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ x: l) {\n        if (x>0) {\n            ans.push_back(x);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ res;\n  res.push_back(l[0]);\n  for (long i : l) {\n    if (i >= 0)\n      res.push_back(i);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp962ht1_: /tmp/tmpp962ht1_.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto\
    \ x : l) if(x >= 0) res.push_back(x);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwn9tmewb: /tmp/tmpwn9tmewb.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplg5kvm5c: /tmp/tmplg5kvm5c.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (auto i : l) {\n        sum += i;\n        if (sum >\
    \ 0) {\n            positive.push_back(sum);\n        }\n        sum = 0;\n  \
    \  }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p(l.size());\n  \
    \  for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n        \
    \    p[i] = l[i];\n        }\n    }\n    return p;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7c_dbt0g: /tmp/tmp7c_dbt0g.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> pos;\n  pos.reserve(l.size());\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) pos.push_back(l[i]);\n\
    \  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positive;\n  std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(positive),\n               [](long x) { return x\
    \ > 0; });\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> newL;\n\tfor (long\
    \ n : l) {\n\t\tif (n > 0) newL.push_back(n);\n\t}\n\treturn newL;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    bool first\
    \ = true;\n    for (auto &e : l) {\n        if (e < 0) {\n            if (first)\
    \ {\n                res.push_back(0);\n            }\n            first = false;\n\
    \        } else {\n            res.push_back(e);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_yk8k3iv: /tmp/tmp_yk8k3iv.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::transform(l.begin(), l.end(), l.begin(),\
    \ [](long x) { return x > 0; });\n  return l;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpntmu2mln: /tmp/tmpntmu2mln.cpp:14: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> nums;\n    long long\
    \ ans = 0, x = 0, y = 0;\n    for (int i = 0; i < l.size() - 1; i++) {\n     \
    \   x = l[i];\n        y = l[i + 1];\n        ans = ans + x * y;\n    }\n    x\
    \ = l[l.size() - 1];\n    y = l[0];\n    ans = ans + x * y;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        nums.push_back(l[i]);\n    }\n    for (int\
    \ i = 0; i < nums.size() - 1; i++) {\n        if (nums[i] > 0) {\n           \
    \ nums[i] = nums[i] + ans;\n            ans = 0;\n        }\n    }\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpampxbqpz: /tmp/tmpampxbqpz.cpp:32: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ positive(l);\n  std::rotate(positive.begin(), positive.begin() + 1, positive.end());\n\
    \  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoc1ktv_n: /tmp/tmpoc1ktv_n.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    std::set_difference(l.begin(),\
    \ l.end(), std::begin(res), std::end(res),\n        [](long a, long b) { return\
    \ a > b; });\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq6q217o9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018_OutputIterator std::__set_difference(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _InputIterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _OutputIterator = get_positive(std::vector<long int>)::<lambda(long\
    \ int, long int)>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5390:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = get_positive(std::vector<long int>)::<lambda(long int, long int)>]\u2019\
    \n/tmp/tmpq6q217o9.cpp:11:45:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5333:16:\
    \ error: assignment of read-only location \u2018* __result.get_positive(std::vector<long\
    \ int>)::<lambda(long int, long int)>::operator bool (*)(long int, long int)()\u2019\
    \n 5333 |      *__result = *__first1;\n      |      ~~~~~~~~~~^~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5335:6:\
    \ error: no match for \u2018operator++\u2019 (operand type is \u2018get_positive(std::vector<long\
    \ int>)::<lambda(long int, long int)>\u2019)\n 5335 |      ++__result;\n     \
    \ |      ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 2);\n  std::vector<long>\
    \ ret;\n  ret.reserve(l.size());\n  for (size_t i = 0; i < l.size(); ++i) {\n\
    \    if (l[i] > 0) {\n      ret.push_back(l[i]);\n    }\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphk7gmqua: /tmp/tmphk7gmqua.cpp:9: std::vector<long int> get_positive(std::vector<long\
    \ int>): Assertion `l.size() >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  // your code goes here\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd_nxlx_1: /tmp/tmpd_nxlx_1.cpp:13: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (auto\
    \ &i : l) {\n        i = abs(i);\n        if (r.size() < i) {\n            r.assign(r.size(),\
    \ 0);\n        }\n        r[i] += 1;\n    }\n    std::vector<long> v(r.size(),\
    \ 0);\n    for (auto &i : r) {\n        v[i] += 1;\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l.size());\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) {\n     \
    \       res[i] = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnlnl4f51: /tmp/tmpnlnl4f51.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> p;\n    p.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        if (*it > 0) {\n            p.push_back(*it);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwf913vfa: /tmp/tmpwf913vfa.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  for (long i = 0; i < l.size(); i++) {\n\
    \    if (l[i] < 0)\n      l[i] = -l[i];\n  }\n  return l;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsx8kgba7: /tmp/tmpsx8kgba7.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  while\
    \ (l.front() < 0) l.front() = -l.front();\n  std::vector<long> res;\n  std::copy(l.begin(),\
    \ l.end(), std::back_inserter(res));\n  return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpghvnc51p: /tmp/tmpghvnc51p.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 1);\n  std::vector<long>\
    \ positive;\n  positive.reserve(l.size());\n  for (auto it = l.begin(); it !=\
    \ l.end(); ++it) {\n    if (*it > 0) {\n      positive.push_back(*it);\n    }\n\
    \  }\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd67s_q84: /tmp/tmpd67s_q84.cpp:9: std::vector<long int> get_positive(std::vector<long\
    \ int>): Assertion `l.size() >= 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> r;\n    auto begin = std::unique(l.begin(), l.end());\n \
    \   auto last = std::unique(begin, l.end());\n    std::copy(begin, last, std::back_inserter(r));\n\
    \    return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfil86li8: /tmp/tmpfil86li8.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> re;\n    for (long\
    \ i : l) {\n        if (i < 0)\n            continue;\n        if (re.empty())\n\
    \            re.push_back(i);\n        else if (re.back() <= i)\n            re.push_back(i);\n\
    \        else\n            re.push_back(re[re.size() - 1] + 1);\n    }\n    return\
    \ re;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgsx676g0: /tmp/tmpgsx676g0.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n        \
    \    res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    long long s = 0;\n    for (auto x : l) {\n        if (x > 0)\
    \ s++;\n        else s--;\n        res.push_back(x);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpt0w9m9if: /tmp/tmpt0w9m9if.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> v;\n  for (auto it\
    \ = l.begin(); it != l.end(); it++) {\n    if (*it > 0) {\n      v.push_back(*it);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if (l[i] > 0) result.push_back(l[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (const auto& i : l) {\n        if (i >= 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnsqk2is4: /tmp/tmpnsqk2is4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positives;\n  for (long\
    \ i: l) {\n    if (i > 0)\n      positives.push_back(i);\n  }\n  return positives;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result;\n    for\
    \ (auto i : l) {\n        if (i > 0)\n            result.push_back(i);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ p;\n  for (long i : l) {\n    if (i > 0) p.push_back(i);\n  }\n  return p;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbh82o6gy: /tmp/tmpbh82o6gy.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l.size());\n\
    \    std::iota(std::begin(res), std::end(res), 0);\n    auto it = std::find_if(std::begin(res),\
    \ std::end(res), [&l](long n){\n        return n < 0;\n    });\n    while (it\
    \ != std::end(res)) {\n        res[std::distance(std::begin(res), it)] = -l[std::distance(std::begin(l),\
    \ it)];\n        it++;\n        auto it = std::find_if(std::begin(res), std::end(res),\
    \ [&l](long n){\n            return n >= 0;\n        });\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd5jr_iay: /tmp/tmpd5jr_iay.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> result;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqjbcha53: /tmp/tmpqjbcha53.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i\
    \ = 0; i < (int)l.size(); i++) {\n    if (l[i] >= 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1v0lv5_x: /tmp/tmp1v0lv5_x.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    pos.reserve(l.size());\n\
    \    for (long i : l)\n        if (i >= 0)\n            pos.push_back(i);\n  \
    \  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpz2q6bqey: /tmp/tmpz2q6bqey.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Allocate space for positive numbers\n\
    \    std::vector<long> positive_number;\n    // Loop through all the elements\n\
    \    for (long i = 0; i < l.size(); i++) {\n        // Check if its positive\n\
    \        if (l[i] >= 0) {\n            // If it is positive\n            positive_number.push_back(l[i]);\n\
    \        }\n    }\n    // Return the positive numbers\n    return positive_number;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzvpfwlcn: /tmp/tmpzvpfwlcn.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            ret.push_back(i);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyuujun5l: /tmp/tmpyuujun5l.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> ret(l);\n  std::sort(ret.begin(),\
    \ ret.end());\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] < 0)\n  \
    \    ret.erase(std::remove(ret.begin(), ret.end(), l[i]), ret.end());\n    else\n\
    \      ret.push_back(l[i]);\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxhi_nnev: /tmp/tmpxhi_nnev.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2so6b_7l: /tmp/tmp2so6b_7l.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> positive;\n  long temp;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      positive.push_back(l[i]);\n\
    \    }\n  }\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for(long\
    \ i = 0; i != l.size(); ++i)\n        if (l[i] > 0) pos.push_back(l[i]);\n   \
    \ return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret(l);\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) ret.push_back(l[i]);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4b0q786r: /tmp/tmp4b0q786r.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    int size = l.size();\n    std::vector<long>\
    \ positive(size); \n    for(int i = 0; i < size; i++) {\n        if(l[i] > 0)\n\
    \            positive.push_back(l[i]);\n    }\n    return positive;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_b5otrzd: /tmp/tmp_b5otrzd.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7egeow1l: /tmp/tmp7egeow1l.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  for\
    \ (int i = l.size() - 1; i >= 0; i--) {\n    if (l[i] > 0) return l;\n  }\n  return\
    \ l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5mkf71uu: /tmp/tmp5mkf71uu.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> r;\n  for (long i =\
    \ 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      r.push_back(l[i]);\n   \
    \ }\n  }\n  return r;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i <l.size() && i < -1; i++){\n        if(l[i] > 0)\n            ans.push_back(l[i]);\n\
    \    }\n    sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpljr_y0_7: /tmp/tmpljr_y0_7.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > 0) ans.push_back(l[i]);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::vector<long>\
    \ negative;\n    std::vector<long> temp;\n\n    for (auto elem : l) {\n      \
    \  if (elem > 0) {\n            temp.push_back(elem);\n        } else {\n    \
    \        positive.insert(positive.end(), temp.begin(), temp.end());\n        \
    \    temp.clear();\n        }\n    }\n    positive.insert(positive.end(), temp.begin(),\
    \ temp.end());\n    negative.insert(negative.end(), temp.begin(), temp.end());\n\
    \n    negative.erase(std::unique(negative.begin(), negative.end()), negative.end());\n\
    \    positive.erase(std::unique(positive.begin(), positive.end()), positive.end());\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpaxhr4dom: /tmp/tmpaxhr4dom.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> s;\n  s.reserve(l.size());\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      s.push_back(l[i]);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> newL;\n    std::vector<long>\
    \ positiveL;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\
    \ {\n            positiveL.push_back(l[i]);\n        } else {\n            newL.push_back(l[i]);\n\
    \        }\n    }\n    return newL;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpj9b71asw: /tmp/tmpj9b71asw.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            pos.push_back(i);\n        }\n\
    \    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqzpuln1x: /tmp/tmpqzpuln1x.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans(l.size());\n\
    \    for (int i = 0; i < l.size(); i++)\n        if (l[i] >= 0)\n            ans[i]\
    \ = l[i];\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpj4juekc5: /tmp/tmpj4juekc5.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> temp;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            temp.push_back(i);\n        }\n\
    \    }\n    return temp;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppvn2yxi7: /tmp/tmppvn2yxi7.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  long n = l.size();\n  std::vector<long>\
    \ v;\n  for (int i = 0; i < n; ++i) {\n    if (l[i] > 0)\n      v.push_back(l[i]);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive_numbers;\n\
    \    for(long i = 0; i < l.size(); ++i) {\n        if( l[i] > 0 ) {\n        \
    \    positive_numbers.push_back(l[i]);\n        }\n    }\n    return positive_numbers;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if ((i > 0) && (res.size() == 0)) {\n            res.push_back(i);\n\
    \        } else if (res.size() != 0) {\n            if (i < 0) {\n           \
    \     res.insert(res.begin(), -i);\n            } else {\n                res.push_back(i);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2htgbglk: /tmp/tmp2htgbglk.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i\
    \ : l) {\n    if (i >= 0) res.push_back(i);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn9xei64s: /tmp/tmpn9xei64s.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  for (long i : l) {\n    if (i > 0) return\
    \ l;\n  }\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfzuldsds: /tmp/tmpfzuldsds.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(size_t\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] >= 0)\n            res.push_back(l[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps_qhoi8f: /tmp/tmps_qhoi8f.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i > 0) positive.push_back(i);\n    }\n    return\
    \ positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::set<long> s;\n    for (long v\
    \ : l)\n        if (v > 0)\n            s.insert(v);\n    std::vector<long> result;\n\
    \    result.reserve(s.size());\n    for (long v : l)\n        if (s.count(v) >\
    \ 0)\n            result.push_back(v);\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::vector<long>::iterator\
    \ it;\n    for (it = l.begin(); it != l.end(); ++it) {\n        if (*it > 0) {\n\
    \            positive.push_back(*it);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l);\n    std::sort(res.begin(),\
    \ res.end(), std::greater<long>());\n    res.erase(res.begin(), std::unique(\n\
    \        res.begin(), res.end(), [&](long a, long b) { return a > b; }));\n  \
    \  return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0mef7t0r: /tmp/tmp0mef7t0r.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> a;\n    for (long\
    \ i : l) {\n        if (i > 0)\n            a.push_back(i);\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ positive;\n  positive.reserve(l.size());\n  for (auto i : l)\n    if (i >= 0)\n\
    \      positive.push_back(i);\n  return positive;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5msemla3: /tmp/tmp5msemla3.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    for (long i : l) {\n        if (i >\
    \ 0) return l;\n    }\n    return std::vector<long>();\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr0mjogcw: /tmp/tmpr0mjogcw.cpp:16: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    std::sort(l.begin(),\
    \ l.end());\n    long last = l[0];\n    for(long i = 1; i < l.size(); i++) {\n\
    \        if(l[i] > last) {\n            positive.push_back(last);\n          \
    \  last = l[i];\n        } else {\n            last = l[i];\n        }\n    }\n\
    \    positive.push_back(last);\n    return positive;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdtuxrn12: /tmp/tmpdtuxrn12.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> positive(l);\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (long i = 0; i < l.size(); i++)\n\t\tif (l[i] >= 0)\n\t\t\t\
    positive[i] = l[i];\n\treturn positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv2uxd9qj: /tmp/tmpv2uxd9qj.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> p;\n\tfor (int i =\
    \ 0; i < l.size(); i++)\n\t\tif (l[i] > 0)\n\t\t\tp.push_back(l[i]);\n\treturn\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> ret;\n\tstd::transform(l.begin(),\
    \ l.end(), std::back_inserter(ret), [](long x) { return x > 0 ? x : 0; });\n\t\
    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpz0ac49ip: /tmp/tmpz0ac49ip.cpp:15: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> p = {0};\n  for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n    if ((*it > 0) || (*it == 0))\n \
    \     p.push_back(*it);\n  }\n  return p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw3lpe4md: /tmp/tmpw3lpe4md.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::unique_ptr<bool>\
    \ flag(std::make_unique<bool>(false));\n  std::sort(l.begin(), l.end(), [&flag](int\
    \ a, int b){\n    if (flag[a] && flag[b]) {\n      return false;\n    }\n    if\
    \ (flag[a]) {\n      flag[a] = true;\n      return true;\n    }\n    flag[b] =\
    \ true;\n    return true;\n  });\n  return l;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5dnbbisn.cpp: In lambda function:\n/tmp/tmp5dnbbisn.cpp:12:13:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   12 |     if (flag[a] && flag[b]) {\n      |       \
    \      ^\n/tmp/tmp5dnbbisn.cpp:12:24: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::unique_ptr<bool>\u2019 and \u2018int\u2019)\n\
    \   12 |     if (flag[a] && flag[b]) {\n      |                        ^\n/tmp/tmp5dnbbisn.cpp:15:13:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   15 |     if (flag[a]) {\n      |             ^\n/tmp/tmp5dnbbisn.cpp:16:11:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   16 |       flag[a] = true;\n      |           ^\n/tmp/tmp5dnbbisn.cpp:19:9:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unique_ptr<bool>\u2019\
    \ and \u2018int\u2019)\n   19 |     flag[b] = true;\n      |         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l)\n        if (i > 0)\n            res.push_back(i);\n   \
    \ return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    std::vector<long>\
    \ tmp;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >= 0) tmp.push_back(l[i]);\n\
    \        else p.push_back(tmp);\n        tmp.clear();\n    }\n    return p;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3025_nm0.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3025_nm0.cpp:13:29: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>&)\u2019\n  \
    \ 13 |         else p.push_back(tmp);\n      |                             ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp3025_nm0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ positive;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n  \
    \    positive.push_back(l[i]);\n    }\n  }\n  return positive;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjze89y3u: /tmp/tmpjze89y3u.cpp:9: std::vector<long int> get_positive(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 1);\n  std::vector<long>\
    \ r;\n  for (long i : l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmssmkm0q: /tmp/tmpmssmkm0q.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result(l.size());\n\
    \    for (size_t i = 0; i < l.size(); ++i) {\n        result[i] = (l[i] > 0) ?\
    \ (l[i]) : 0L;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0hnxwc_t: /tmp/tmp0hnxwc_t.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> temp;\n    for (auto\
    \ i : l)\n        if (i >= 0) temp.push_back(i);\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpta3shgt9: /tmp/tmpta3shgt9.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i\
    \ : l) {\n    if (i >= 0)\n      res.push_back(i);\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpt6n06w0_: /tmp/tmpt6n06w0_.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ x : l) {\n        if (x >= 0) {\n            res.push_back(x);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnrn7aoic: /tmp/tmpnrn7aoic.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    // Sort\
    \ the list using std::sort.\n    std::sort(l.begin(), l.end());\n    // Iterate\
    \ over all items in the list.\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        // If current item is positive, add it to the new list.\n       \
    \ if (*it > 0) {\n            new_l.push_back(*it);\n        }\n    }\n    return\
    \ new_l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps1653jqg: /tmp/tmps1653jqg.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    int n = l.size();\n    // First check\
    \ for 0 and return it.\n    // If l has size 0, then return an empty vector.\n\
    \    if (l.size() == 0) {\n        return std::vector<long>();\n    }\n    //\
    \ Get positive numbers.\n    // If negative numbers are found, add them to the\
    \ returned vector.\n    // >>> get_positive([-1, 2, -4, 5, 6])\n    // [2, 5,\
    \ 6]\n    for (int i = 0; i < n; i++) {\n        if (l[i] > 0) {\n           \
    \ l.push_back(l[i]);\n        }\n    }\n    // Return the vector.\n    return\
    \ l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmdcmgo74: /tmp/tmpmdcmgo74.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Copy list into a new list.\n   \
    \ std::vector<long> ans;\n    ans.reserve(l.size());\n    for (long i : l)\n \
    \       if (i >= 0)\n            ans.push_back(i);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp459igw69: /tmp/tmp459igw69.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto&\
    \ el : l) {\n    if (el > 0) {\n      res.push_back(el);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res(l.size());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n          \
    \  res[i] = l[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4hitg6tm: /tmp/tmp4hitg6tm.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    int cnt\
    \ = 0;\n    for (long i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n\
    \            cnt++;\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    cnt = 0;\n    for(long i : res) {\n        if (cnt < res.size() - 1) res.push_back(-i);\n\
    \        cnt++;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd7zef9dm: /tmp/tmpd7zef9dm.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> tmp;\n  std::set_difference(std::begin(l),\
    \ std::end(l),\n                      std::begin(l), std::end(tmp), std::less<>());\n\
    \  return tmp;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwh_pgg39.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:\
    \ In instantiation of \u2018_OutputIterator std::__set_difference(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _InputIterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _OutputIterator = std::less<void>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5390:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::less<void>]\u2019\n/tmp/tmpwh_pgg39.cpp:11:66:   required from\
    \ here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:5333:6:\
    \ error: no match for \u2018operator*\u2019 (operand type is \u2018std::less<void>\u2019\
    )\n 5333 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n    \
    \             from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwh_pgg39.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  387 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:387:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \    std::vector<long> res;\n    for (std::size_t i = 0; i < l.size(); ++i) {\n\
    \        if (l[i] >= 0) res.push_back(l[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5gdl5ral: /tmp/tmp5gdl5ral.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> new_l;\n    long\
    \ s = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            s = l[i] + s;\n        } else {\n            new_l.push_back(s);\
    \ // store positive number\n            s = l[i];\n        }\n    }\n    new_l.push_back(s);\
    \ // store last positive number\n    return new_l;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({-1, -2,\
    \ 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp07fdwsic: /tmp/tmp07fdwsic.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  auto result = std::vector<long>();\n    for (auto x : l)\n        if (x >=\
    \ 0)\n            result.push_back(x);\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnei6eev6: /tmp/tmpnei6eev6.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> p;\n    std::copy_if(l.begin(),\
    \ l.end(), std::back_inserter(p), [](const long n){return n > 0; });\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v(l.begin(), l.end());\n\
    \    std::sort(v.begin(), v.end(), std::greater<long>());\n    std::vector<long>\
    \ res;\n    res.reserve(v.size());\n    for (long i : v) {\n        if (i >= 0)\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpc6k7l1qw: /tmp/tmpc6k7l1qw.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto&\
    \ i : l)\n    if (i > 0) {\n      res.push_back(i);\n    }\n  return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> v;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n            v.push_back(l[i]);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_15rzsef: /tmp/tmp_15rzsef.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto\
    \ i : l)\n        if(i>0)\n            res.push_back(i);\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ i : l)\n        if (i >= 0) ret.push_back(i);\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmph6ihxe1v: /tmp/tmph6ihxe1v.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n\tstd::vector<long> ans;\n\tfor (auto i\
    \ : l) {\n\t\tif (i > 0) ans.push_back(i);\n\t}\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> nums = l;\n    for\
    \ (auto& num : nums) {\n        if (num > 0) {\n            return nums;\n   \
    \     }\n    }\n    return nums;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq14tprxc: /tmp/tmpq14tprxc.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            r.push_back(i);\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7ogfgggw: /tmp/tmp7ogfgggw.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  std::vector<long> result;\n  for (long\
    \ i : l)\n    if (i >= 0)\n      result.push_back(i);\n  return result;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppa_a_o0r: /tmp/tmppa_a_o0r.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> pos;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l) if (i >= 0) pos.push_back(i);\n    return pos;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqb3zz3u9: /tmp/tmpqb3zz3u9.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    auto it = std::find_if(l.begin(), l.end(),\n\
    \                         [](long i) { return i >= 0; });\n    assert(it != l.end());\n\
    \    l.erase(std::remove_if(l.begin(), l.end(),\n                            \
    \ [it](int i) { return i >= 0; }),\n            l.end());\n    return l;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk453ibki: /tmp/tmpk453ibki.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    long maxnum\
    \ = std::numeric_limits<long>::min();\n    for(auto e : l) {\n        if(e < 0)\
    \ \n            continue;\n        maxnum = std::max(maxnum, e);\n    }\n    for(auto\
    \ e : l) {\n        if(e < 0)\n            res.push_back(-e);\n        else\n\
    \            res.push_back(e);\n    }\n    for(auto e : res)\n        if(maxnum\
    \ != e)\n            res.push_back(-e);\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw7amitpm: /tmp/tmpw7amitpm.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive(l);\n  \
    \  // Filter out negative values.\n    for (auto it = positive.begin(); it !=\
    \ positive.end(); it++) {\n        if (*it < 0) {\n            positive.erase(it);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvcylqcvs: /tmp/tmpvcylqcvs.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> res;\n    std::vector<bool> flag(l.size());\n    long last\
    \ = -1;\n    for (long i : l) {\n        if (flag[i]) {\n            res.push_back(last);\n\
    \            flag[i] = false;\n        } else {\n            flag[i] = true;\n\
    \            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> r;\n    for(auto\
    \ i : l) {\n        if(i>=0)\n            r.push_back(i);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp22boijd4: /tmp/tmp22boijd4.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long::size_type\
    \ i = 0, j = 0;\n    while ( i < l.size()) {\n        while ( j >= 0 ) {\n   \
    \         if ( l[i] > l[j] )\n                break;\n            j--;\n     \
    \   }\n        if ( j == -1 )\n            positive.push_back( l[i++] );\n   \
    \ }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe3rkwdf4.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe3rkwdf4.cpp:10:21: error: qualified-id in declaration\
    \ before \u2018i\u2019\n   10 |     long::size_type i = 0, j = 0;\n      |   \
    \                  ^\n/tmp/tmpe3rkwdf4.cpp:11:13: error: \u2018i\u2019 was not\
    \ declared in this scope\n   11 |     while ( i < l.size()) {\n      |       \
    \      ^\n/tmp/tmpe3rkwdf4.cpp:12:17: error: \u2018j\u2019 was not declared in\
    \ this scope\n   12 |         while ( j >= 0 ) {\n      |                 ^\n\
    /tmp/tmpe3rkwdf4.cpp:17:14: error: \u2018j\u2019 was not declared in this scope\n\
    \   17 |         if ( j == -1 )\n      |              ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  long sum = 0;\n  for (long i : l) {\n\
    \    if (i > 0)\n      sum += i;\n  }\n  std::vector<long> ans;\n  while (sum\
    \ >= 0) {\n    long tmp = sum;\n    sum = 0;\n    for (long i : l) {\n      if\
    \ (i > 0)\n        sum += i;\n    }\n    if (tmp == sum)\n      ans.push_back(tmp);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ret;\n    for (auto\
    \ i : l) {\n        if (i > 0)\n            ret.push_back(i);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    for (long i : l) {\n        if (i >=\
    \ 0)\n            l.push_back(i);\n    }\n    return l;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbu4b4l_p: /tmp/tmpbu4b4l_p.cpp:17: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() > 0);\n  assert(l.size()\
    \ <= 100);\n  std::vector<long> rev_l;\n  rev_l.push_back(l[0]);\n  for (int i\
    \ = 1; i < l.size(); i++) {\n    if (l[i] >= 0) {\n      rev_l.push_back(l[i]);\n\
    \    } else {\n      break;\n    }\n  }\n  return rev_l;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmph2lzlojs: /tmp/tmph2lzlojs.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> ans;\n    long long\
    \ temp = 0;\n    for(long long i : l) {\n        if(i>0) {\n            temp =\
    \ i*i;\n            while(temp>0) {\n                ans.push_back(i/temp);\n\
    \                temp--;\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4mp9p5nj: /tmp/tmp4mp9p5nj.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  assert(l.size() >= 1);\n  l.sort();\n\
    \  std::vector<long> p(l.size());\n  for (auto &i : p) i = l[i - 1];\n  return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplz0lf2z5.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplz0lf2z5.cpp:10:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   10 |   l.sort();\n     \
    \ |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    // Write your code here.\n    long\
    \ n = 0;\n    std::vector<long> ans;\n    for (long i : l) {\n        if (i >=\
    \ 0) {\n            ans.push_back(i);\n            n += i;\n        } else {\n\
    \            ans.push_back(n);\n            n = 0;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpim6owwqs: /tmp/tmpim6owwqs.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) positive.push_back(i);\n    }\n    return\
    \ positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_k1efnui: /tmp/tmp_k1efnui.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> pos_val;\n    long val = 0;\n    for (long i : l) {\n   \
    \     if (i > 0)\n            val = i;\n        pos_val.push_back(val);\n    }\n\
    \    return pos_val;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvgjyenax: /tmp/tmpvgjyenax.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> result(l);\n    std::sort(result.begin(),\
    \ result.end(), [](long a, long b) {\n        return a > b;\n    });\n    return\
    \ std::unique(result.begin(), result.end());\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf53_iq2w.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf53_iq2w.cpp:13:23: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(result.std::vector<long int>::begin(), result.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n   13 |     return std::unique(result.begin(),\
    \ result.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    int n = l.size();\n    std::vector<long>\
    \ res;\n    for (int i = 0; i < n; ++i) {\n        if (l[i] > 0) {\n         \
    \   res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n  l.sort();\n  assert(l.size() >= 2);\n\
    \  long low = l.front();\n  long high = l.back();\n  if (low >= 0) {\n    low++;\n\
    \  }\n  while (low <= high) {\n    if (low > high) {\n      std::vector<long>\
    \ temp(low, high);\n      std::swap(temp[0], temp[1]);\n      return temp;\n \
    \   }\n    if (low * low <= high * high) {\n      std::vector<long> temp(low,\
    \ low + 1);\n      std::swap(temp[0], temp[1]);\n      low++;\n    } else if (low\
    \ * low > high * high) {\n      std::vector<long> temp(high + 1, high + high);\n\
    \      std::swap(temp[0], temp[1]);\n      high--;\n    } else {\n      std::vector<long>\
    \ temp(low, high);\n      std::swap(temp[0], temp[1]);\n      break;\n    }\n\
    \  }\n  return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzann3wbk.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzann3wbk.cpp:9:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    9 |   l.sort();\n     \
    \ |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n  \
    \  std::vector<long> res;\n    for (long i : l) {\n        if (i > 0)\n      \
    \      res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmprmpdl6d0: /tmp/tmprmpdl6d0.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
