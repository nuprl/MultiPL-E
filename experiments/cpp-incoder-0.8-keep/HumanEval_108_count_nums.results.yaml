name: HumanEval_108_count_nums
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here.\n  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  long count = 0;\n  for (auto i = arr.begin(); i != arr.end(); ++i) {\n    if\
    \ ((*i) < 0) {\n      assert(*i < 0);\n      assert(i[0] == -1);\n      assert(i[1]\
    \ < 0);\n      i[1] *= -1;\n    }\n    for (long j = *i;; j += *i) {\n      count\
    \ += 1;\n      if (j > 0) {\n        break;\n      }\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ 0;\n  long res = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    res += arr[i]\
    \ >= 0 ? arr[i] : -arr[i];\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmptipbbown: /tmp/tmptipbbown.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   int count = 0;\n    for (const auto i : arr) {\n        if (i >= 0) sum +=\
    \ i;\n        else sum += i * 10;\n        ++count;\n    }\n    return sum % 10\
    \ == 0 ? count : -1;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpav9v95zr: /tmp/tmpav9v95zr.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int size = arr.size();\n\
    \  long sum = 0;\n  for (int i = 0; i < size; i++) {\n    long num = arr[i];\n\
    \    if (num < 0) {\n      num = -num;\n    }\n    sum += num;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4udzen99: /tmp/tmp4udzen99.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long sum = 0;\n  long\
    \ count = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n \
    \   if (sum > 0) {\n      count *= pow(10, arr.size() - i - 1);\n    }\n  }\n\
    \  return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpv0938e0_: /tmp/tmpv0938e0_.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long cnt = 0;\n \
    \   for (long i = 0; i != arr.size(); i++) {\n        cnt += arr[i];\n    }\n\
    \    return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmphhl50o78: /tmp/tmphhl50o78.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here\n    long sum=0;\n    for(long i=0;i<arr.size();i++)\n    {\n        sum+=arr[i];\n\
    \        if(sum>0)\n        {\n            break;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmppr73bwps: /tmp/tmppr73bwps.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum_nums = 0,\
    \ digit, sum = 0, i = 0, j = 0;\n    while (j < arr.size()) {\n        digit =\
    \ arr[j];\n        sum += digit;\n        if (sum > 0) {\n            sum_nums++;\n\
    \        }\n        j = j + 1;\n    }\n    if (sum_nums == 0) {\n        return\
    \ 0;\n    }\n    int k = 0;\n    while (sum_nums > 0) {\n        digit = sum %\
    \ 10;\n        sum += digit == 0 ? 1 : -1;\n        sum_nums--;\n        while\
    \ (sum_nums > 0) {\n            if (arr[k] != digit) {\n                break;\n\
    \            }\n            k++;\n            sum_nums--;\n        }\n    }\n\
    \    return k - 1;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpf773bs1_: /tmp/tmpf773bs1_.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    assert(arr.size()\
    \ >= 0);\n    long ans = 0;\n    for (long d : arr)\n        ans += (d > 0);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpozhb5urw: /tmp/tmpozhb5urw.cpp:24: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    if (n == 0) return 0;\n    long ans = 0, cur = arr[0];\n    while (cur >=\
    \ 10) {\n        cur -= 10;\n        ans++;\n    }\n    while (cur > 0) {\n  \
    \      ans += cur % 10;\n        cur /= 10;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqrknvxkw: /tmp/tmpqrknvxkw.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    long long temp_sum = 0;\n    for (auto i : arr) {\n        temp_sum += i;\n\
    \        if (temp_sum > 0) {\n            count++;\n            temp_sum -= i;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxqx5b49u: /tmp/tmpxqx5b49u.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  assert(arr.size() >\
    \ 0);\n  long cnt = 0;\n  while (arr.size() > 0) {\n    long num = arr[0];\n \
    \   arr[0] = arr[0] - num / 10;\n    cnt += 1;\n  }\n  return cnt;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmppv0l_cn7: /tmp/tmppv0l_cn7.cpp:11: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   long n = arr.size();\n    for (int i = 0; i < n; ++i) {\n        int curr\
    \ = arr[i];\n        if (curr > 0) {\n            ans += 1;\n            while\
    \ (curr > 0) {\n                ans ++;\n                curr -= 10;\n       \
    \     }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy8e1ijyv: /tmp/tmpy8e1ijyv.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long res = 0;\n  for\
    \ (auto x : arr) {\n    if (x + x >= 0) {\n      x += 1;\n    } else {\n     \
    \ x -= 1;\n    }\n    while (x > 0) {\n      res += x % 10;\n      x /= 10;\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkm0z4zt0: /tmp/tmpkm0z4zt0.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  int i = 0, s = 0;\n    int count = 0; // count the numbers greater than 0\n\
    \    for (auto i : arr) {\n        s += i;\n        if (s == 0)\n            count++;\n\
    \        else if (s > 0) // if greater than 0, increment the counter\n       \
    \     ++count;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnxff5yx4: /tmp/tmpnxff5yx4.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    auto s = arr.begin();\n\
    \    auto e = arr.end();\n    long count = 0;\n    while (s != e) {\n        if\
    \ (*s < 0) {\n            ++s;\n        } else {\n            while (true) {\n\
    \                auto cur = s;\n                long cur_deg = cur % 10;\n   \
    \             s = s + 1;\n                long next_deg = *s % 10;\n         \
    \       if (cur_deg + next_deg >= 2) {\n                    count += 1;\n    \
    \                break;\n                } else {\n                    count =\
    \ 0;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvu76ktu6.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvu76ktu6.cpp:20:36: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018int\u2019)\n   20 |                 long cur_deg = cur\
    \ % 10;\n      |                                ~~~ ^ ~~\n      |            \
    \                    |     |\n      |                                |     int\n\
    \      |                                __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvu76ktu6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpvu76ktu6.cpp:20:38:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   20 |                 long cur_deg = cur % 10;\n      |                  \
    \                    ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpvu76ktu6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: cand"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) sum += arr[i];\n\
    \        else arr[i] = -arr[i];\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_dd6e7m4: /tmp/tmp_dd6e7m4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpvg71seah: /tmp/tmpvg71seah.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return 0;\n    }\n    int len = arr.size();\n    long ans = 0;\n\
    \    for (int i = 0; i < len; ++i) {\n        int curr = arr[i];\n        while\
    \ (curr >= 10) {\n            ans += 1;\n            curr /= 10;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpf7nffoae: /tmp/tmpf7nffoae.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int n = arr.size();\n\
    \  long ret = 0;\n  for (int i = 0; i < n; ++i) {\n    int cur_num = arr[i];\n\
    \    // if number is negative, its first signed digit will be negative\n    //\
    \ first check if this number is positive\n    if (cur_num > 0) {\n      long max_digit\
    \ = 0;\n      // find out the largest digit in the number\n      while (cur_num)\
    \ {\n        max_digit = (max_digit * 10) + cur_num % 10;\n        cur_num /=\
    \ 10;\n      }\n      max_digit = max_digit + 1;\n      ret += max_digit > 0 ?\
    \ max_digit : 0;\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgh5do3un: /tmp/tmpgh5do3un.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // write your code\
    \ here\n    long sum = 0;\n    long n = arr.size();\n    long ans = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        if(arr[i] > 0){\n            sum += arr[i];\n \
    \           if(sum > 0){\n                ans++;\n            }\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n  \
    \  assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpln5cewey: /tmp/tmpln5cewey.cpp:32: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    for (long value : arr)\n        result += std::count_if(arr.begin(), arr.end(),\
    \ [&value](int n){return n > 0; });\n    return result;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpuvdyrfwq: /tmp/tmpuvdyrfwq.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here\n    long count= 0;\n    for (long i:arr)\n    {\n        if (i>0)\n  \
    \      {\n            long temp = i%10;\n            while (temp>0)\n        \
    \    {\n                count++;\n                i /= 10;\n            }\n  \
    \      }\n        else\n        {\n            if (i< 0)\n                count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0igf_b28: /tmp/tmp0igf_b28.cpp:35: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ret = 0;\n \
    \   for (long i: arr) {\n        if (i > 0) ret += i;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp52346l4q: /tmp/tmp52346l4q.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   long ln = arr.size();\n    for (long i = 0; i < ln; i++) {\n        long x\
    \ = arr[i];\n        long temp = x;\n        while (temp > 0) {\n            temp\
    \ /= 10;\n        }\n        ans += (temp == 0);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmppvytg8ow: /tmp/tmppvytg8ow.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    long temp = 0;\n    for (long i : arr) {\n        if (i < 0) {\n        \
    \    temp = temp * 10 + (i - 1);\n        } else {\n            temp += i;\n \
    \       }\n        if (temp > 0) {\n            count++;\n            temp = 0;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmcgy6qra: /tmp/tmpmcgy6qra.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) arr[i] +=\
    \ 10;\n        int n = arr[i];\n        while (n > 0) {\n            count++;\n\
    \            n /= 10;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4298ouv8: /tmp/tmp4298ouv8.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (long &val : arr) {\n        int i = abs(val);\n        if (val < 0)\n\
    \            i += 1;\n        // if (val == i)\n        if (i >= 10)\n       \
    \     ++res;\n    }\n    return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkqa083oo: /tmp/tmpkqa083oo.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here\n    long count=0;\n    long m=arr[0];\n    long n=0;\n    for(long i=0;i<arr.size();i++)\n\
    \    {\n        if(arr[i]<m)\n        {\n            m=arr[i];\n            \n\
    \        }\n    }\n    for(int i=0;i<arr.size();i++)\n    {\n        if(i>0)\n\
    \        {\n            if((n-m)>0)\n            {\n                count=count+1;\n\
    \            }\n            if((arr[i]-m>0))\n            {\n                n=arr[i];\n\
    \            }\n        }\n        \n    }\n    return count;\n    \n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here.\n  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum +=\
    \ (arr[i] > 0);\n  }\n  return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyl2hrr47: /tmp/tmpyl2hrr47.cpp:25: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (auto i : arr) {\n        if (i == 0) break;\n        sum = sum * 10 +\
    \ i % 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyjy7bkbn: /tmp/tmpyjy7bkbn.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        if (i >= 0)\n            count++;\n       \
    \ else\n            count--;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyu1wmgh0: /tmp/tmpyu1wmgh0.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long cnt = 0;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    sum += i;\n    if (sum > 0) {\n      ++cnt;\n\
    \    }\n  }\n  return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcfq6x5jy: /tmp/tmpcfq6x5jy.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tstd::vector<long> sums(arr.size());\n\
    \tlong ans = 0;\n\tfor(auto i : arr){\n\t\tif(sums[sums.size()-1] < 0){\n\t\t\t\
    ans = 1;\n\t\t\tbreak;\n\t\t}\n\t\tans += sums[sums.size()-1] + i;\n\t\tsums[sums.size()-1]\
    \ += i;\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpeg3wkmwb: /tmp/tmpeg3wkmwb.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    for (auto it : arr) {\n        result += it % 10;\n        result %= 10;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqvba_okv: /tmp/tmpqvba_okv.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long cnt = 0;\n \
    \   int sign = 1;\n    for (auto elem : arr) {\n        cnt += sign * elem;\n\
    \        sign *= -1;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc4hg6jts: /tmp/tmpc4hg6jts.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    if (n <= 0)\n        return 0;\n    long sum = 0;\n    for (int i = 0; i\
    \ < n; i++) {\n        long digit = arr[i];\n        if (digit < 0)\n        \
    \    digit = -digit;\n        if (digit > 9)\n            digit = digit - 9;\n\
    \        sum += digit;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmph8b504sc: /tmp/tmph8b504sc.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long cnt = 0;\n \
    \   int i = 0, j = 0;\n    while (j < arr.size()) {\n        if (arr[j] < 0) {\n\
    \            if (i > 0) {\n                cnt += abs(arr[i] - arr[j]);\n    \
    \        }\n            i++;\n            j = i;\n        } else {\n         \
    \   cnt += arr[j];\n            j++;\n        }\n    }\n    return cnt;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp05tofxyh: /tmp/tmp05tofxyh.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    long digit = arr[0];\n    while (digit > 0)\n        digit = digit / 10;\n\
    \    int len = arr.size();\n    for (size_t i = 0; i < len; ++i) {\n        long\
    \ curr = arr[i];\n        while (curr > 0) {\n            ++count;\n         \
    \   curr = curr % 10;\n        }\n        arr[i] = digit;\n        digit = arr[i];\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i]\
    \ % 10 > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpi3ykglq7: /tmp/tmpi3ykglq7.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    assert(arr.size()\
    \ != 0);\n    long sum = 0;\n    for (auto i : arr) sum += i;\n    return sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpao_ggnpe: /tmp/tmpao_ggnpe.cpp:11: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long ele : arr) {\n        if (ele < 0) {\n            ele *= -1;\n\
    \            count += 1;\n        }\n        if (ele > 0) {\n            count\
    \ += ele / 10;\n            ele %= 10;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp6xv2z2gp: /tmp/tmp6xv2z2gp.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int count = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++)\n    for (int j = 0; j < arr[i].size(); j++)\n\
    \      if (arr[i][j] >= 0)\n        count++;\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9kava9w5.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9kava9w5.cpp:13:32: error: request for member \u2018size\u2019\
    \ in \u2018arr.std::vector<long int>::operator[](((std::vector<long int>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   13 |     for\
    \ (int j = 0; j < arr[i].size(); j++)\n      |                               \
    \ ^~~~\n/tmp/tmp9kava9w5.cpp:14:19: error: invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type {aka long int}[int]\u2019 for array subscript\n\
    \   14 |       if (arr[i][j] >= 0)\n      |                   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int count = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    int sum_of_digits = std::abs(arr[i]);\n\
    \    int sum = 0;\n    while (sum_of_digits > 0) {\n      sum += (sum_of_digits\
    \ % 10);\n      sum_of_digits /= 10;\n    }\n    if (sum > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb_j7_5y7: /tmp/tmpb_j7_5y7.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  long firstPositive = 0;\n    long secondPositive = 0;\n    long thirdPositive\
    \ = 0;\n    for (auto i : arr) {\n        if (i >= 0) {\n            sum += i;\n\
    \            if (sum >= 10) {\n                sum -= 10;\n                if\
    \ (sum > 0) {\n                    firstPositive += sum;\n                }\n\
    \            }\n        }\n        if (i >= 0) {\n            sum += i;\n    \
    \        if (sum >= 10) {\n                sum -= 10;\n                if (sum\
    \ > 0) {\n                    secondPositive += sum;\n                }\n    \
    \        }\n        }\n        if (i >= 0) {\n            sum += i;\n        \
    \    if (sum >= 10) {\n                sum -= 10;\n                if (sum > 0)\
    \ {\n                    thirdPositive += sum;\n                }\n          \
    \  }\n        }\n    }\n    if (firstPositive > 0 && secondPositive > 0 && thirdPositive\
    \ > 0) {\n        return firstPositive + secondPositive + thirdPositive;\n   \
    \ }\n    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmadt32lv: /tmp/tmpmadt32lv.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    long res = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0)\n\
    \            res++;\n        long cur = abs(arr[i]);\n        for (int j = n-1;\
    \ j >= i; j--) {\n            if (arr[j] < cur)\n                break;\n    \
    \        else\n                cur -= arr[j];\n            res++;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzgswlh5q: /tmp/tmpzgswlh5q.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = 0, sum =\
    \ 0;\n    for (auto i : arr)\n        sum += i;\n    while (sum > 0) {\n     \
    \   sum += n % 10;\n        ++n;\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    auto n = arr.size();\n\
    \    if (n == 0)\n        return 0;\n    long sum = 0, rem = 0, cur = 0;\n   \
    \ for (auto i = 0; i < n; i++) {\n        sum += arr[i];\n        cur = sum %\
    \ 10;\n        rem = sum / 10;\n        if (rem > 0)\n            sum += (10 -\
    \ cur) * rem;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0_ci_gpi: /tmp/tmp0_ci_gpi.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.empty())\
    \ return 0;\n    long ans = 0;\n    for (auto val : arr)\n        ans += (val\
    \ >= 0 ? val : -val);\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmphl40lf1p: /tmp/tmphl40lf1p.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (long i : arr) {\n        sum += i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqjeit8dt: /tmp/tmpqjeit8dt.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i: arr) {\n        sum += i % 10;\n        if (sum < 0) {\n    \
    \        sum *= -1;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt9ksgh6z: /tmp/tmpt9ksgh6z.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.empty())\
    \ return 0;\n    auto n = arr.size();\n    long count = 0;\n    for (long index\
    \ = 0; index < n; ++index) {\n        long digit = arr[index];\n        if (digit\
    \ < 0) {\n            int num_digits = (int)(log10(abs(digit))) + 1;\n       \
    \     if (num_digits >= count) break;\n            digit /= abs(digit);\n    \
    \        for (int i = 0; i < num_digits; ++i) {\n                digit *= 10;\n\
    \                if (digit > 0) ++count;\n            }\n            continue;\n\
    \        }\n        while (digit) {\n            count += digit % 10;\n      \
    \      digit /= 10;\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpylqvfym3: /tmp/tmpylqvfym3.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long num : arr)\n        if (num > 0)\n            sum += num;\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpas2n9nax: /tmp/tmpas2n9nax.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i = 0; i < (int) arr.size(); i++) {\n    long num = arr[i];\n    //\
    \ Check if sum of digits in number is greater than 0\n    while (num > 0) {\n\
    \      count += num % 10;\n      num = num / 10;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpynm58hnh: /tmp/tmpynm58hnh.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto it : arr) {\n        if (it > 0 && it < 10) {\n            count\
    \ += it - '0';\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpphs5wk49: /tmp/tmpphs5wk49.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int n = arr.size();\n\
    \  long sum = 0;\n  for (int i = 0; i < n; ++i) {\n    sum += arr[i];\n  }\n \
    \ return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmplpaeijba: /tmp/tmplpaeijba.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long long s = 0;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      s += arr[i];\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmprp_lrgz5: /tmp/tmprp_lrgz5.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  if (arr.empty())\n\
    \    return 0;\n  // If at least one element has a sum larger than 0, then add\
    \ one to\n  // the total since it appears in at least one element of the array\n\
    \  long sum = 0;\n  // Loop through all the elements in the array\n  for (long\
    \ elem : arr) {\n    if (elem > 0)\n      sum++;\n    // if the sum is negative,\
    \ then the number appears more than once in\n    // the array\n    else if (sum\
    \ > 0)\n      sum--;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb7uxbfyr: /tmp/tmpb7uxbfyr.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here.\n    long sum = 0;\n    long x = 0;\n    for (auto itr = arr.rbegin();\
    \ itr != arr.rend(); itr++) {\n        x = *itr;\n        while (x > 9) {\n  \
    \          x /= 10;\n            sum += 1;\n        }\n        sum += x;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp84mvd6i2: /tmp/tmp84mvd6i2.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Your code here\n\
    \    long long int arr_size = arr.size();\n    int cnt = 0;\n    long long int\
    \ sum = 0;\n    long long int sum_temp = 0;\n\n    for (long long int i = arr_size\
    \ - 1; i >= 0; i--) {\n        sum += arr[i];\n        sum_temp = sum;\n     \
    \   sum = sum % 10;\n        if (sum == 0) {\n            cnt = 1;\n         \
    \   sum = 1;\n        }\n        if (sum > 0) {\n            cnt++;\n        }\n\
    \        if (sum < 0) {\n            sum += -(10 - sum);\n            sum = 0;\n\
    \        }\n\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5bp3d8pu: /tmp/tmp5bp3d8pu.cpp:39: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  long ret = 0;\n    long last_sum = 0;\n    long sum_digit = 0;\n\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 0) {\n            last_sum\
    \ += arr[i];\n            sum_digit += arr[i];\n        } else {\n           \
    \ sum_digit += arr[i] * -1;\n        }\n        if (sum_digit > last_sum) {\n\
    \            ret = i + 1;\n            break;\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkrwwgdv8: /tmp/tmpkrwwgdv8.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return 0;\n    // We assume numbers are non-negative integers\n    assert(arr.size()\
    \ > 0);\n    // We sum up the digits of the numbers. That is, first number will\
    \ be 1, then\n    // 1, 2, then 1, 2.\n    long num_sum = 0;\n    for (auto n:\
    \ arr) num_sum += n;\n    // Now we check if the sum of digits of all numbers\
    \ is greater than 0.\n    if (num_sum > 0) return num_sum;\n    // If num_sum\
    \ is less than 0, the first digit will be negative.\n    else return -num_sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmps1ezic_8: /tmp/tmps1ezic_8.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    int count = 0;\n    for (long i : arr) {\n        if (i < 0) i = -i; // make\
    \ positive\n        int digit = i >= 0 ? i : -i; // get digit\n        int mod\
    \ = (i - digit) / 10;\n        if (mod > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpp0nfrd7p: /tmp/tmpp0nfrd7p.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (auto i : arr)\n        if ((i != 0) && (sum > 0)) {\n            sum +=\
    \ (i - '0');\n        }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpv6_8jvml: /tmp/tmpv6_8jvml.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    long ans = 0, sum = 0, x = 0;\n    for(int i = 0; i < n; ++i) {\n       \
    \ x = arr[i];\n        if(x < 0) {\n            sum -= x;\n        } else {\n\
    \            sum += x;\n        }\n        if(sum > 0) {\n            ans += 1;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxvz_c_rl: /tmp/tmpxvz_c_rl.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong ans = 0;\n\tlong\
    \ n = arr.size();\n\t\n\tassert(arr.size() >= 2);\n\t\n\tif (n == 0)\n\t\treturn\
    \ 0;\n\t\n\tfor (long i = 0; i < n - 1; i++) {\n\t\tlong curr = arr[i] + arr[i\
    \ + 1];\n\t\t\n\t\tif (curr > 0) {\n\t\t\tans += 1;\n\t\t\tlong tmp = i;\n\t\t\
    \twhile (tmp >= 0 && arr[tmp] == 0)\n\t\t\t\ttmp--;\n\t\t\tif (tmp < 0)\n\t\t\t\
    \tbreak;\n\t\t\twhile (tmp >= 0 && arr[tmp] == 1)\n\t\t\t\ttmp--;\n\t\t\tarr[i]\
    \ = arr[tmp];\n\t\t\tarr[tmp] = 1;\n\t\t\tarr[i + 1] = 0;\n\t\t}\n\t}\n\t\n\t\
    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5aznx7ri: /tmp/tmp5aznx7ri.cpp:14: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::vector<long>\
    \ sums(arr.size() + 1);\n    for (long i : arr) {\n        sums[i] += i;\n   \
    \ }\n    long ans = 0;\n    for (long i : sums) {\n        if (i == 0) {\n   \
    \         break;\n        }\n        ans = i;\n    }\n    if (ans == 0 && arr.size()\
    \ == 0) {\n        return 0;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8hcf6hn4: /tmp/tmp8hcf6hn4.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long n: arr) {\n        sum += n;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmxi674ho: /tmp/tmpmxi674ho.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) {\n            sum += arr[i]%10;\n        }\n        else {\n         \
    \   sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp96_91jgc: /tmp/tmp96_91jgc.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // your code goes\
    \ here\n    long ans = 0;\n    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > 0) {\n            ans++;\n\
    \            sum -= arr[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpgm603mbd: /tmp/tmpgm603mbd.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  long sum = 0;\n    long digitsum = 0;\n    for(auto n: arr)\n    {\n      \
    \  if(sum >= 0)\n        {\n            sum += n;\n        }\n        else\n \
    \       {\n            sum += n*10;\n            digitsum += n%10;\n        }\n\
    \    }\n    if(sum >= 0)\n    {\n        return sum;\n    }\n    else \n    {\n\
    \        return sum*10 + digitsum;\n    }\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmppj2ucvqk: /tmp/tmppj2ucvqk.cpp:38: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here\n  long sum = 0;\n  for (long i : arr) {\n    if (i < 0) sum += (i - 1)\
    \ / 10 + (i - 1) % 10;\n    else sum += i;\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7uchk_vs: /tmp/tmp7uchk_vs.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   long num = std::accumulate(arr.begin(), arr.end(), 0);\n    while (num > 0)\
    \ {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpncz_a1cr: /tmp/tmpncz_a1cr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long nums = 0;\n  for\
    \ (auto i : arr) {\n    if (i >= 0)\n      nums += i;\n  }\n  return nums;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2jisfmnw: /tmp/tmp2jisfmnw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ret = 0;\n \
    \   for(auto it = arr.begin(); it != arr.end(); ++it) {\n        ret += (*it)/10;\n\
    \        if(*it < 0) ret += (*it)%10;\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpop4k_wpi: /tmp/tmpop4k_wpi.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong count = 0;\n\t\
    for (auto it = arr.rbegin(); it != arr.rend(); ++it)\n\t{\n\t\tif (*it >= 0)\n\
    \t\t{\n\t\t\tlong sum = 0;\n\t\t\tfor (long i = 0; i < 10; ++i)\n\t\t\t\tsum +=\
    \ *it % 10;\n\t\t\tif (sum > 0)\n\t\t\t\t++count;\n\t\t}\n\t\telse if (*it < 0)\n\
    \t\t\tcount += 1 + (*it < 0);\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmphmww4q0i: /tmp/tmphmww4q0i.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint sum = 0, count\
    \ = 0;\n\t\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] >= 0)\n\t\
    \t\tsum += arr[i];\n\t\telse\n\t\t\tsum += abs(arr[i]);\n\t\tif (sum > 0) {\n\t\
    \t\tcount++;\n\t\t\tsum -= arr[i];\n\t\t}\n\t}\n\t\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp7jwmaa8z: /tmp/tmp7jwmaa8z.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int sum = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum > 0) {\n\
    \      sum += arr[i] % 10;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmw0tqggj: /tmp/tmpmw0tqggj.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // You can return any\
    \ integer you want; I just chose long.\n  assert(arr.size() > 0);\n  long ans\
    \ = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long num = arr[i];\n   \
    \ if (num < 0) {\n      num = -num;\n    }\n    while (num > 0) {\n      ans +=\
    \ num % 10;\n      num /= 10;\n    }\n  }\n  return ans;\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpzv1_x3d6: /tmp/tmpzv1_x3d6.cpp:12: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tlong long sum = 0;\n\
    \tfor(long long i = 0; i < arr.size(); i++) {\n\t\tsum += arr[i];\n\t}\n\treturn\
    \ sum % 10;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpp32z0nz0: /tmp/tmpp32z0nz0.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto &x : arr) {\n        ans |= x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpu6c61yb7: /tmp/tmpu6c61yb7.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count=0, digit;\n\
    \  // We need to count how many numbers have 0 digit, \n  // then add 1 for each\
    \ 1\n  for (long x: arr) {\n    if (x<0) digit=-(x%10);\n    else if (x>0) digit=x/10;\n\
    \    else digit=0;\n    count+=digit;\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpn1h9g2yn: /tmp/tmpn1h9g2yn.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    long count = 0;\n    for (int i = 0; i < n; i++) {\n        count += arr[i]\
    \ >= 0 ? arr[i]%10 : -arr[i]%10;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmptczvufvw: /tmp/tmptczvufvw.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int sum = 0;\n  for\
    \ (long num: arr) {\n    sum += num;\n  }\n  return sum;\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpm1lbgeow: /tmp/tmpm1lbgeow.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (auto itr : arr) {\n        sum += itr;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp79dhs0gd: /tmp/tmp79dhs0gd.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (size_t i = 0; i < arr.size(); i++) {\n        ans += (arr[i] > 0);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpen_9qm3y: /tmp/tmpen_9qm3y.cpp:24: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int len = arr.size();\n\
    \    if (len < 1) return 0;\n    std::vector<int> v;\n    int sum = 0;\n    for\
    \ (long i : arr)\n        v.push_back(i);\n    v.push_back(INT_MIN);\n    while\
    \ (!v.empty()) {\n        int cur = v.back();\n        v.pop_back();\n       \
    \ sum += cur;\n        if (sum < 0) return 0;\n    }\n    return len;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp95uovvjo: /tmp/tmp95uovvjo.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int counter = 0;\n\
    \    long sum_of_digits = 0;\n    long first_digit = 0;\n    for (auto i = arr.begin();\
    \ i != arr.end(); i++)\n    {\n        sum_of_digits += *i;\n        if (sum_of_digits\
    \ > 0) {\n            first_digit = *i / 10;\n        }\n        sum_of_digits\
    \ %= 10;\n    }\n    for (auto i = arr.begin(); i != arr.end(); i++)\n    {\n\
    \        if (*i <= 0) {\n            if (first_digit < 0) {\n                counter--;\n\
    \            } else {\n                counter++;\n            }\n        } else\
    \ if (sum_of_digits < 0) {\n            counter--;\n        }\n    }\n    return\
    \ counter;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpzzg6b3q5: /tmp/tmpzzg6b3q5.cpp:39: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int len = arr.size();\n\
    \    long sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += arr[i];\n\
    \        if (sum < 0) {\n            sum = (sum >> 1) + (sum & 1);\n        }\n\
    \    }\n    return len;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz2964ww9: /tmp/tmpz2964ww9.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.empty())\
    \ return 0;\n    // Initialize a vector with the sum of the digits for each number\n\
    \    // If there are no numbers, return the empty vector\n    std::vector<long>\
    \ sum_of_digits(arr.size());\n    long sum = 0;\n    for (auto n : arr) {\n  \
    \      // Get the number of digits in the number\n        int digits = count_digits(n);\n\
    \        // Get the sum of the digits for the number\n        for (long i = 0;\
    \ i < digits; i++) {\n            sum += n % 10;\n            n /= 10;\n     \
    \   }\n        // Store the sum of the digits for this number\n        sum_of_digits[sum]\
    \ += 1;\n    }\n    // Return the number of numbers with sums of digits > 0\n\
    \    for (long i : sum_of_digits) if (i > 0) return i;\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2c429e3l.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2c429e3l.cpp:18:22: error: \u2018count_digits\u2019 was\
    \ not declared in this scope\n   18 |         int digits = count_digits(n);\n\
    \      |                      ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  for (long i: arr)\n        if (i>0)\n            return 0;\n    return 1;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpb3_xr8qe: /tmp/tmpb3_xr8qe.cpp:19: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   long long sum_of_nums = accumulate(arr.begin(), arr.end(), 0);\n    for (int\
    \ i = 0; sum_of_nums > 0; i++) {\n        if (arr[i] > 0)\n            ans ++;\n\
    \        sum_of_nums -= pow(10, i);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmphntw_e_n: /tmp/tmphntw_e_n.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count{0};\n\
    \    for (auto i : arr) {\n        if (!i) {\n            ++count;\n         \
    \   continue;\n        }\n        long sum{1};\n        while (i > 0) {\n    \
    \        sum += i % 10;\n            i = i / 10;\n        }\n        if (sum >=\
    \ 0) {\n            ++count;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp05npvb7_: /tmp/tmp05npvb7_.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (auto i : arr) {\n        sum += i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpkei1o3o9: /tmp/tmpkei1o3o9.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (auto i: arr)\n        if (i < 0)\n            i = -i;\n        sum +=\
    \ i;\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1kp9flyx.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1kp9flyx.cpp:15:16: error: \u2018i\u2019 was not declared\
    \ in this scope\n   15 |         sum += i;\n      |                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long long int sum\
    \ = 0;\n    long long int size = arr.size();\n    long long int count[11];\n \
    \   // To store all possible sums including negative numbers\n    std::vector<bool>\
    \ valid(11, false);\n    // Initialize all array elements to 0 \n    for (long\
    \ long int i = 0; i < size; i++) {\n        sum += arr[i];\n        if (valid[sum\
    \ - 11])\n            ++count[sum - 11];\n        valid[sum + 10] = true;\n  \
    \  }\n    long long int count_max = *std::max_element(count, count + 11);\n  \
    \  return count_max == size ? 0 : count_max - 1;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5u8t5yz_: /tmp/tmp5u8t5yz_.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here.\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpr9w7xk64: /tmp/tmpr9w7xk64.cpp:15: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // write your code\
    \ here\n    long n = 0;\n    for(int i = 0; i < arr.size(); ++i){\n        long\
    \ l = (int)arr[i];\n        int sum = 0;\n        while(l != 0) {\n          \
    \  sum += l % 10;\n            l = l / 10;\n        }\n        if(sum > 0) {\n\
    \            ++n;\n        }\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkh_ebki4: /tmp/tmpkh_ebki4.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   // Initialize sum to 0\n    for(long i : arr) {\n        sum += i;\n    }\n\
    \    for(long i : arr) {\n        while(sum) {\n            sum /= 10;\n     \
    \   }\n        if(sum) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpecnuw1nl: /tmp/tmpecnuw1nl.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long long sum = 0;\n\
    \    for (long i: arr) {\n        sum += i;\n    }\n    if (sum <= 0) {\n    \
    \    return 0;\n    }\n    for (long i: arr) {\n        while (sum) {\n      \
    \      sum += i % 10;\n            if (sum < 0) {\n                sum -= 10;\n\
    \            }\n        }\n        if (sum > 0) {\n            return i + 1;\n\
    \        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i : arr) {\n        if (i >= 0) {\n            count += i;\n  \
    \      } else {\n            count += 1 + abs(i) % 10;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp6xr5j9vg: /tmp/tmp6xr5j9vg.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count = 0;\n \
    \ for (int i : arr) {\n    if (i > 0) {\n      count += i;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpu53llcib: /tmp/tmpu53llcib.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int n = arr.size();\n\
    \  long count= 0;\n  for (int i=0; i<n; i++){\n    if (arr[i]>0) {\n      count++;\n\
    \    } else {\n      assert (arr[i]<0);\n      arr[i]= arr[i]-10;\n      count+=\
    \ pow(10,arr.size()-i-1);\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpq4pwj945: /tmp/tmpq4pwj945.cpp:17: long int count_nums(std::vector<long\
    \ int>): Assertion `arr[i]<0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int sum = 0;\n  for\
    \ (long &i : arr) {\n    sum += i;\n  }\n  if (sum < 0) {\n    return -count_nums(arr.rbegin());\n\
    \  }\n  int res = 0;\n  assert(arr.size() >= 2);\n  for (long i = arr.size();\
    \ i-- > 1;) {\n    long cur_sum = sum % 10;\n    sum /= 10;\n    if (cur_sum ==\
    \ 0) return -1;\n    if (i + 1 < arr.size() && arr[i] > arr[i + 1]) {\n      int\
    \ j = i;\n      while (j-- > 1 && arr[j] < arr[j - 1]) continue;\n      int k\
    \ = j;\n      while (k-- > 1 && arr[k] > arr[k - 1]) continue;\n      int m =\
    \ k + 1;\n      while (m-- > 1 && arr[m] < arr[k - 1]) continue;\n      if (j\
    \ + 1 == k && j == m) continue;\n      if (j + 2 == k && j == m) continue;\n \
    \   }\n    res += (cur_sum > 0) ? 1 : 0;\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn_35lgx7.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn_35lgx7.cpp:16:34: error: could not convert \u2018std::vector<_Tp,\
    \ _Alloc>::rbegin() [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp,\
    \ _Alloc>::reverse_iterator = std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*]()\u2019 from \u2018std::vector<long int>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >\u2019} to \u2018std::vector<long int>\u2019\n   16 |     return -count_nums(arr.rbegin());\n\
    \      |                        ~~~~~~~~~~^~\n      |                        \
    \          |\n      |                                  std::vector<long int>::reverse_iterator\
    \ {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    auto res = 0L;\n\
    \    for (auto num : arr) {\n        res += num / (long)std::log10(std::log10(num)\
    \ + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long res = 0;\n \
    \   for(int i : arr)\n        if(i>0)\n            res += i%10;\n    return res;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2tr9oixc: /tmp/tmp2tr9oixc.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() <=\
    \ 0) return 0;\n    int n = arr.size();\n    long sum = 0, sum2 = 0;\n    int\
    \ cnt = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n      \
    \  if (sum > 0) {\n            sum2 = sum * 10;\n            cnt += __builtin_popcount(sum2\
    \ - sum);\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzxl8xklt: /tmp/tmpzxl8xklt.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0, sign\
    \ = 1;\n    for (long num : arr) {\n        sign *= num;\n        while (sign\
    \ > 0) {\n            ans += 1;\n            sign /= 10;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqcj5y6vm: /tmp/tmpqcj5y6vm.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    if (n == 0)\n        return 0;\n    int sum = 0;\n    for (int i = 0; i <\
    \ n; ++i) {\n        sum += arr[i];\n        if (sum >= 0)\n            sum -=\
    \ arr[i] % 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp07o2cc0j: /tmp/tmp07o2cc0j.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto num : arr) {\n        ans += (long long)num;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpzz4g5u3g: /tmp/tmpzz4g5u3g.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (long i : arr) {\n        sum += i / 10;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpn275_08a: /tmp/tmpn275_08a.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (auto i : arr) {\n        // if negative number, take its first digit\
    \ as a sign\n        if (i < 0) i *= -1;\n        count += __builtin_popcount(i);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi5lbrurt: /tmp/tmpi5lbrurt.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    long sum = 0;\n    int sign = 0;\n    for (auto it = arr.begin(); it != arr.end();\
    \ ++it) {\n        if (*it < 0) {\n            sign = -1;\n            *it = -*it;\n\
    \        } else {\n            sum += *it;\n        }\n        if (sum >= 10)\
    \ {\n            sum += sign % 10;\n            sign = 0;\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpj4o_a2ni: /tmp/tmpj4o_a2ni.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        count += std::abs(arr[i]);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjb0tggnu: /tmp/tmpjb0tggnu.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return 0;\n    long ans = 0;\n    long digit = 0;\n    for (int i = 1; i\
    \ < arr.size(); i++) {\n        digit += arr[i];\n        while (digit > 0) {\n\
    \            ans += 1;\n            digit /= 10;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmptpwv_3jn: /tmp/tmptpwv_3jn.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   int len = 0;\n    for (long num : arr) {\n        if (num < 0) {\n       \
    \     ans -= (num % 10);\n            num /= 10;\n        } else {\n         \
    \   len++;\n        }\n        ans += num;\n    }\n    return ans - 10 * len;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpjly9t84f: /tmp/tmpjly9t84f.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    assert(arr.size()\
    \ > 0);\n    long sum = 0;\n    for (long &i : arr) {\n        sum += i;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpt13p6lm7: /tmp/tmpt13p6lm7.cpp:11: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // write your code\
    \ in C++14\n    // use std::count() to write your code.\n    long count = 0;\n\
    \    for(auto &element: arr)\n    {\n        if (element < 0)\n            element\
    \ = -element;\n        count += (element % 10) + 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmprx01rimq: /tmp/tmprx01rimq.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Code here\n  \
    \  int n = arr.size();\n    int s = 0, sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += arr[i];\n        if (sum >= 10) {\n            s = sum - 10;\n\
    \        } else if (sum < 0) {\n            sum = -sum;\n            sum -= arr[i];\n\
    \            sum += arr[i];\n            s = sum;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpnc8zl07r: /tmp/tmpnc8zl07r.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (long x: arr) {\n        if (x >= 0)\n            ans += (x % 10);\n \
    \       else\n            ans += (x / 10) * 9 - (x % 10);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp5v2xuctn: /tmp/tmp5v2xuctn.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) return 0;\n    long ans = 0;\n    long carry = 0;\n    for (long item : arr)\
    \ {\n        long res = ans % 10;\n        ans = ans / 10;\n        res += item;\n\
    \        carry = 1;\n        while(carry) {\n            carry -= 1;\n       \
    \     if (res >= 10)\n                ans ++;\n            else\n            \
    \    ans += res;\n            res = ans % 10;\n            ans = ans / 10;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6vvf3w5p: /tmp/tmp6vvf3w5p.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long nums = 0;\n\
    \    for (long &num : arr)\n        if (num > 0)\n            nums += __builtin_popcount(num);\n\
    \    return nums;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpr4x3d7lp: /tmp/tmpr4x3d7lp.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i : arr) {\n        sum += (i % 10) * pow(10, arr.size() - 1 - i);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnq_tmfe2: /tmp/tmpnq_tmfe2.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long v : arr) {\n        if (v > 0) {\n            count += __builtin_popcount(v);\n\
    \        } else {\n            count += (-__builtin_popcount(v) + 1);\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp44lfdk6k: /tmp/tmp44lfdk6k.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n    \
    \        count += arr[i];\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_3mr55xu: /tmp/tmp_3mr55xu.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here\n  long cnt=0;\n  for(long i=0;i<arr.size();i++)\n  {\n    cnt++;\n   \
    \ for(long j=0;j<arr[i]/10;j++)\n    {\n      if(arr[i]%10<j)\n        cnt--;\n\
    \    }\n  }\n  return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmprwaf73a4: /tmp/tmprwaf73a4.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n\tint n = arr.size();\n\
    \tassert(arr.size() > 0);\n\tlong ans = 0;\n\tlong temp = 0;\n\tassert(arr.size()\
    \ == std::accumulate(arr.begin(), arr.end(), 0));\n\n\tfor (long i = 0; i < n;\
    \ i++) {\n\t\tif (arr[i] < 0) {\n\t\t\ttemp += arr[i]; // sign change\n\t\t\t\
    arr[i] = -arr[i];\n\t\t}\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i]\
    \ + arr[j] >= 10) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t\tif (arr[i] > 0 && arr[j] >\
    \ 0 && arr[i] + arr[j] > 9) {\n\t\t\t\ttemp += arr[i] * arr[j];\n\t\t\t\tarr[i]\
    \ = arr[i] * arr[j] / 10;\n\t\t\t\tarr[j] = arr[j] / 10;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn ans + temp;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmphy3nrnp5: /tmp/tmphy3nrnp5.cpp:12: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  assert(arr.size() >\
    \ 0);\n  long res = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    res +=\
    \ std::abs(arr[i]);\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0wgy9oq_: /tmp/tmp0wgy9oq_.cpp:11: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   long res = 0;\n    for (long &i : arr) {\n        if (i >= 0) {\n        \
    \    sum += i;\n        } else {\n            sum += (i % 10) * pow(10, arr.size());\n\
    \            sum -= i % 10;\n            sum += pow(10, arr.size());\n       \
    \ }\n        res += sum;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwao7ratx: /tmp/tmpwao7ratx.cpp:28: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long ans = 0;\n  for\
    \ (long i : arr) {\n    ans += i > 0 ? i % 10 : -i % 10;\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpyo1e_vot: /tmp/tmpyo1e_vot.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int n = arr.size();\n\
    \    long cnt = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n\
    \        int digit = arr[i];\n        while (digit != 0) {\n            sum +=\
    \ digit % 10;\n            digit /= 10;\n        }\n        if (sum > 0) {\n \
    \           cnt += 1;\n        }\n    }\n    return cnt;\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpgi_r7cwg: /tmp/tmpgi_r7cwg.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    long ans = 0;\n    for (auto &it : arr) {\n        long sum_of_digits = 0;\n\
    \        while (!is_zero(it)) {\n            sum_of_digits += (it % 10);\n   \
    \         it /= 10;\n        }\n        if (sum_of_digits > 0) {\n           \
    \ ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwkhxtb88.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwkhxtb88.cpp:15:17: error: \u2018is_zero\u2019 was not\
    \ declared in this scope; did you mean \u2018bzero\u2019?\n   15 |         while\
    \ (!is_zero(it)) {\n      |                 ^~~~~~~\n      |                 bzero\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    long long int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    int val = arr[i];\n        if (val > 0) {\n            sum += val;\n    \
    \    } else if (val < 0) {\n            sum += val / 10;\n        }\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwydt_n7t: /tmp/tmpwydt_n7t.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long res = 0;\n \
    \   long last_num = 0;\n    for (auto x : arr) {\n        if (x == last_num +\
    \ 1) {\n            ++res;\n        } else {\n            res = 0;\n         \
    \   last_num = x;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpga6jsgkn: /tmp/tmpga6jsgkn.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Initialize sum and\
    \ counter\n  long sum = 0;\n  long counter = 0;\n  // Iterate through the array\n\
    \  for (auto it = arr.begin(); it != arr.end(); it++) {\n    // Add current element\
    \ to sum\n    sum += *it;\n    // Check if sum has a positive value\n    if (sum\
    \ > 0) {\n      // If the sum is positive, then increment the counter\n      counter++;\n\
    \    }\n  }\n  // Return counter\n  return counter;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmptgem2fm1: /tmp/tmptgem2fm1.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    for (long i : arr){\n        sum += i;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpeovk5lqo: /tmp/tmpeovk5lqo.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.empty())\
    \ return 0;\n    int l = 0, r = 0;\n    for (auto it = arr.begin(); it != arr.end();\
    \ ++it) {\n        auto tmp = *it;\n        if (tmp < 0) {\n            tmp =\
    \ tmp * -1;\n            r++;\n            l += tmp;\n        } else {\n     \
    \       l++;\n            r += tmp;\n        }\n    }\n    return r + l - 1;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpswtrrbal: /tmp/tmpswtrrbal.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long count = 0;\n    for (long i : arr)\n        if (i > 0)\n           \
    \ count += n / i;\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmptpyvp86v: /tmp/tmptpyvp86v.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here\n  long ans = 0, sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   sum += arr[i];\n    if (sum > 0) ans++;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpc722ynhf: /tmp/tmpc722ynhf.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // write your code\
    \ here\n  assert(arr.size() > 0);\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   sum += i;\n  }\n  long count = 1;\n  for (auto i : arr) {\n    if (i < 0)\
    \ break;\n    sum -= i;\n    count *= 10;\n  }\n  return sum / count;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpk64ruk96: /tmp/tmpk64ruk96.cpp:12: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int len = arr.size();\n\
    \    if (len <= 0) return 0;\n    long sum = 0;\n    for (int i = 0; i < len;\
    \ i++) {\n        sum += arr[i];\n    }\n    for (int i = len - 1; i >= 0; i--)\
    \ {\n        long curr = sum % 10;\n        if (curr < 0) curr += 10;\n      \
    \  sum /= 10;\n        if (sum >= arr[i])\n            return i + 1;\n    }\n\
    \    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpuzxin2yh: /tmp/tmpuzxin2yh.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.empty())\
    \ return 0;\n    int n = arr.size();\n    // if first digit is negative, all digits\
    \ are negative\n    if (arr[0] < 0) return -(long int)(n - 1) * count_nums(arr.substr(1));\n\
    \    // for each digit, if the sum is > 0, then we keep adding the next digit\n\
    \    // and so on until the sum is < 0\n    long long ans = 0;\n    for (long\
    \ long i = 1; i < n; i++) {\n        ans += arr[i] + count_nums(arr.substr(0,\
    \ i));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbb7j2qrp.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbb7j2qrp.cpp:14:64: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   14 |     if (arr[0] <\
    \ 0) return -(long int)(n - 1) * count_nums(arr.substr(1));\n      |         \
    \                                                       ^~~~~~\n/tmp/tmpbb7j2qrp.cpp:19:40:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   19 |         ans += arr[i] + count_nums(arr.substr(0, i));\n      |     \
    \                                   ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long ans = 0;\n  for\
    \ (long n: arr) {\n    ans += n;\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpj697kwwe: /tmp/tmpj697kwwe.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (long n : arr) {\n        if ((n & n) != 0) {\n            n /= 10;\n\
    \            ++res;\n        } else {\n            res = res * 10 + (n / 10);\n\
    \            n %= 10;\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_vbktz0u: /tmp/tmp_vbktz0u.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here\n  if (arr.empty()) return 0;\n  int sum = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    sum += arr[i];\n    if (sum > 0) {\n      return i + 1;\n    }\n\
    \  }\n  return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpz0yyhrj7: /tmp/tmpz0yyhrj7.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    int sum_of_digits = 0;\n    for (long n : arr) {\n        if (n >= 0)\n \
    \           sum_of_digits += n;\n        else\n            sum_of_digits += n\
    \ * 10;\n    }\n    count = (int)sum_of_digits / 10;\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpbfc5lhhu: /tmp/tmpbfc5lhhu.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here\n  long n = arr.size();\n  long sum = 0;\n  \n  for (long i = 0; i < n;\
    \ i++) {\n    long m = arr[i];\n    if (m < 0) \n      m += pow(10, (n-i));\n\
    \    sum += m;\n  }\n\n  return sum;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpstgmocjg: /tmp/tmpstgmocjg.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   long sum = 0;\n    for (long i : arr) sum += i;\n    for (long i : arr) if\
    \ (i != 0 && sum > 0) ans += (sum % 10 == 0 ? 1 : 0);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpy43gdszl: /tmp/tmpy43gdszl.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // write your logic\
    \ here\n    return 0;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxkxroy75: /tmp/tmpxkxroy75.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  long count = 0;\n    std::vector<long>::iterator it;\n    long sum = 0;\n \
    \   for(it=arr.begin(); it!=arr.end(); ++it){\n        sum = sum*10+*it;\n   \
    \     if(sum>0){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp0_33wwqv: /tmp/tmp0_33wwqv.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // TODO\n    long\
    \ ret=0;\n    for (long i=0;i<arr.size();i++)\n    {\n        ret += arr[i]%10;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_md5vd8e: /tmp/tmp_md5vd8e.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n   \
    \ if (sum < 0) {\n        sum = -(sum % 10);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpydc82ctw: /tmp/tmpydc82ctw.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long count{0};\n  for\
    \ (int i = 0; i <= arr.size() - 1; ++i) {\n    if (arr[i] > 0) {\n      ++count;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  int len = arr.size();\n    for (int i = 0; i < len; i++) {\n        int temp\
    \ = arr[i];\n        if (temp < 0) {\n            temp = -temp;\n        }\n \
    \       int d = temp % 10;\n        if (d > 0 && sum + d < 0) {\n            sum\
    \ = sum - d;\n        } else {\n            sum += d;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmprw39m_g4: /tmp/tmprw39m_g4.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0) {\n        return 0;\n    }\n    long result = 0;\n    for (long i : arr)\
    \ {\n        // First check that we have a non-negative number\n        if (i\
    \ < 0) {\n            i = -i;\n        }\n        // Now sum the digits:\n   \
    \     long s = 0;\n        while (i > 0) {\n            s = i * 10 + s;\n    \
    \        i /= 10;\n        }\n        // If the last digit is non-zero, add it\n\
    \        if (s) {\n            result += s - 1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp36q3qyuo: /tmp/tmp36q3qyuo.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here.\n  int sum_num=0;\n  for (int i=0;i<arr.size();i++){\n    if (arr[i]>0){\n\
    \      sum_num=sum_num+arr[i];\n    }\n  }\n  return sum_num;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmphctwa8h7: /tmp/tmphctwa8h7.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  std::vector<bool> flags(arr.size(),\
    \ false);\n  for (long i : arr)\n    if (i > 0)\n      for (long j = 0; j <= i;\
    \ j++)\n        if (flags[j] || (i - j) % 10 != 0)\n          flags[j] = true;\n\
    \  return static_cast<long>(flags.size());\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpeod4gg7o: /tmp/tmpeod4gg7o.cpp:22: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i : arr)\n        sum += abs(i);\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpnp40c2gj: /tmp/tmpnp40c2gj.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    // Count the number of elements which has a sum of digits > 0\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            int temp\
    \ = arr[i];\n            arr[i] = abs(temp);\n        }\n        // To avoid overflow\
    \ of long number\n        if (arr[i] > 1000000000L) {\n            arr[i] = arr[i]\
    \ / 100000000;\n        }\n    }\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        long sum = 0;\n        for (int j = 0; j < arr[i]; j++)\n           \
    \ sum += abs((int) arr[i] - j);\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8abn_eip: /tmp/tmp8abn_eip.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return 0;\n    }\n    long sum = 0;\n    for (long i: arr) {\n  \
    \      sum += i;\n    }\n    if (sum < 0) {\n        sum -= arr[0];\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqv7fcg9d: /tmp/tmpqv7fcg9d.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ in C++17\n  std::vector<int> nums;\n  for(int n : arr) {\n    if(n>=0) {\n \
    \     nums.push_back(n%10);\n    }\n    else {\n      nums.insert(nums.end(),\
    \ -n/10, -n%10);\n    }\n  }\n  return static_cast<long>(std::count_if(std::begin(nums),\
    \ std::end(nums),\n    [](int n) { return n >= 0; }));\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_mkrb3z5: /tmp/tmp_mkrb3z5.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (auto num: arr) sum += num;\n    if (sum < 0) sum += std::abs(sum);\n\
    \    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwt3pofwy: /tmp/tmpwt3pofwy.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int N = arr.size();\n\
    \    long ans = 0;\n    for (long i = 0; i < N; ++i) {\n        long num = arr[i];\n\
    \        if (num < 0) {\n            num = num * -1;\n        }\n        long\
    \ digit = 0;\n        while (num) {\n            digit = (num % 10) + 1;\n   \
    \         num = (num / 10);\n        }\n        if (digit > 0) ans++;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpp5mnx0yq: /tmp/tmpp5mnx0yq.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long res = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] < 0)\
    \ arr[i] += 10;\n        int sum = 0;\n        while (i + 1 < n && arr[i + 1]\
    \ < 0) i++;\n        long mid = i;\n        long left = arr[i];\n        while\
    \ (i - 1 > 0 && arr[i - 1] >= 0) {\n            left -= arr[i - 1];\n        \
    \    sum++;\n            mid--;\n        }\n        while (left + 1 < n && arr[left\
    \ + 1] >= 0) {\n            sum += arr[left + 1] - arr[mid];\n            left++;\n\
    \            mid++;\n        }\n        res += sum;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmptsvka5gi: /tmp/tmptsvka5gi.cpp:36: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long sum = 0;\n    for(long i = 0; i < n; ++i) {\n        if(arr[i] > 0)\
    \ {\n            sum += arr[i];\n        }\n    }\n    if(n < 2) {\n        return\
    \ 0;\n    }\n    if(sum < 0) {\n        return sum;\n    }\n    int ans = 0;\n\
    \    long last_val = arr[0];\n    for(long i = 1, j = sum; i < n; ++i) {\n   \
    \     if(arr[i] < last_val - j) {\n            ans += j;\n        }\n        j\
    \ = last_val - arr[i];\n        last_val = arr[i];\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp2wp7jl3x: /tmp/tmp2wp7jl3x.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for(int i=0;i<arr.size();i++) {\n        if(arr[i]<0) {\n            arr[i]=-arr[i];\n\
    \        }\n    }\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i]>=0)\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpt_kgnbh4: /tmp/tmpt_kgnbh4.cpp:27: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long long ans = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) ans++;\n\
    \        else arr[i] = -arr[i];\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpsz99xwm0: /tmp/tmpsz99xwm0.cpp:25: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int sum = 0;\n  \
    \  for (long i : arr) {\n        sum += i;\n    }\n    int count = (int) arr.size();\n\
    \    while (sum > 0) {\n        sum -= arr[count];\n        count--;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpwo3jt4jf: /tmp/tmpwo3jt4jf.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    long result = 0;\n    for (auto num : arr) {\n        result += abs(num);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2djolut8: /tmp/tmp2djolut8.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n\
    \    long temp = 0;\n    for(auto& num : arr) {\n        if(temp < 0) {\n    \
    \        temp += num;\n            count += temp % 10 == 0 ? 1 : 0;\n        }\
    \ else {\n            temp -= num;\n            if(temp % 10 != 0) {\n       \
    \         count += 1;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp1vowp1d4: /tmp/tmp1vowp1d4.cpp:29: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long long sum = 0;\n\
    \    long long n = arr.size();\n    for (long long i = 0; i < n; i++) {\n    \
    \    sum += arr[i];\n    }\n    if (sum > 0) {\n        return sum;\n    }\n \
    \   for (long long i = 0; i < n; i++) {\n        sum -= arr[i];\n        if (sum\
    \ < 0) {\n            return i + 1;\n        }\n    }\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpnx_tumwk: /tmp/tmpnx_tumwk.cpp:30: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // code here\n  \
    \  long ans = arr.size();\n    long sum = std::accumulate(arr.begin(), arr.end(),\
    \ 0);\n    for (long i = 0; i < sum; i++) {\n        long diff = abs(sum-i);\n\
    \        if (diff > 1) {\n            ans += diff;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqmziugq9: /tmp/tmpqmziugq9.cpp:25: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   std::vector<long> vec(arr.begin(), arr.end());\n    std::sort(vec.begin(),\
    \ vec.end());\n    for(long i=0;i<vec.size();i++)\n    {\n        long num = vec[i];\n\
    \        if(num<0)\n        {\n            num = abs(num);\n            ans +=\
    \ num;\n        }\n        else\n        {\n            ans += num/10;\n     \
    \       ans -= num%10;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmu4va41t: /tmp/tmpmu4va41t.cpp:33: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Your code here\n\
    \    std::vector<long> sum_of_digits(arr.size());\n    for (long number : arr)\
    \ {\n        if (number < 0)\n            number = -number;\n        std::iota(sum_of_digits.begin(),\
    \ sum_of_digits.end(), 0);\n        sum_of_digits.back() += number;\n    }\n \
    \   return std::count_if(sum_of_digits.begin(), sum_of_digits.end(), [](long x)\
    \ {\n        return (x >= 0 && x <= 9);\n    });\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0vm3npfi: /tmp/tmp0vm3npfi.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto it = arr.begin(); it != arr.end(); ++it) {\n        long temp =\
    \ *it;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n  \
    \      long sum = temp;\n        long cur = it;\n        while (cur != arr.end())\
    \ {\n            sum -= *cur;\n            cur++;\n        }\n        if (sum\
    \ > 0) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprh4x0qcj.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprh4x0qcj.cpp:18:20: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   18 |         long cur = it;\n      |                    ^~\n      |      \
    \              |\n      |                    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmprh4x0qcj.cpp:19:20: error: no match for\
    \ \u2018operator!=\u2019 (operand types are \u2018long int\u2019 and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019})\n   19 |         while (cur != arr.end()) {\n      |        \
    \        ~~~ ^~ ~~~~~~~~~\n      |                |             |\n      |   \
    \             long int      std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprh4x0qcj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:900:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  900 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Write your code\
    \ here.\n    long n = arr.size();\n    long sum = 0;\n    long last = 0;\n   \
    \ long digitsum = 0;\n    long ndigitsum = 0;\n    long nlast = 0;\n\n    for\
    \ ( int i = 0; i < n; i++ ){\n        digitsum += arr[i];\n        ndigitsum +=\
    \ arr[i]%10;\n    }\n\n    while(digitsum > 0) {\n        last = digitsum%10;\n\
    \        sum += last;\n        digitsum -= last;\n    }\n\n    while(ndigitsum\
    \ > 0) {\n        nlast = ndigitsum%10;\n        sum += nlast;\n        ndigitsum\
    \ -= nlast;\n    }\n\n    return (sum);\n\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    int count = 0;\n\
    \    for (long i : arr) {\n        if ((i > 0) && (i % 10 == 0)) {\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwje9ii6a: /tmp/tmpwje9ii6a.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int sum = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum > 0) break;\n\
    \  }\n  if (sum == 0) {\n    return sum;\n  }\n  return std::min(sum, arr.size())\
    \ * -1;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq979lrq0.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq979lrq0.cpp:19:34: error: no matching function for call\
    \ to \u2018min(int&, std::vector<long int>::size_type)\u2019\n   19 |   return\
    \ std::min(sum, arr.size()) * -1;\n      |                                  ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq979lrq0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq979lrq0.cpp:19:34:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019})\n   19 |   return std::min(sum, arr.size()) * -1;\n      |     \
    \                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  assert(arr.size() >=\
    \ 1);\n  long sum = 0;\n  for (auto i : arr) {\n    sum += i % 10;\n  }\n  if\
    \ (sum > 0) {\n    return std::count(arr.begin(), arr.end(), sum);\n  } else {\n\
    \    return std::count(arr.begin(), arr.end(), -1);\n  }\n}\nint main() {\n  \
    \  auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) ==\
    \ (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n   \
    \ assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n   \
    \ assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n   \
    \ assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n  \
    \  assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpe9xd946o: /tmp/tmpe9xd946o.cpp:11: long int count_nums(std::vector<long\
    \ int>): Assertion `arr.size() >= 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0, n =\
    \ arr.size();\n    for (int i = 1; i < n; i++) {\n        int sum_of_digits =\
    \ 0;\n        long d = arr[i];\n        while (d >= 10) {\n            sum_of_digits\
    \ += d % 10;\n            d /= 10;\n        }\n        if (sum_of_digits > 0)\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp3z73_nwn: /tmp/tmp3z73_nwn.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Your code here\n\
    \  return 0;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp211bigzr: /tmp/tmp211bigzr.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i : arr)\n        sum += i;\n    long count = 1;\n    while (sum\
    \ != 0) {\n        if (sum % 10 != 0) {\n            sum += count;\n         \
    \   ++count;\n        }\n        sum -= count;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmps7fko6_8: /tmp/tmps7fko6_8.cpp:26: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::unordered_set<long>\
    \ did_set;\n    for (auto ele : arr)\n        did_set.insert(ele);\n    long num_ele\
    \ = 0;\n    for (auto ele : arr)\n        if (did_set.find(ele) != did_set.end())\n\
    \            num_ele += 1;\n    return num_ele;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmptxghsl36: /tmp/tmptxghsl36.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long sum = 0;\n  for\
    \ (int i = arr.size(); i > 0; i--) {\n    sum += arr[i];\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpo7fzchch: /tmp/tmpo7fzchch.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  int sum = 0;\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpycc1dq7q: /tmp/tmpycc1dq7q.cpp:20: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long count = 0; // initialize\n\n    for (int i = 0; i != n; ++i) {\n   \
    \     count += arr[i] % 10; // count the digits that sum > 0\n        arr[i] /=\
    \ 10; // remove the digits that sum > 0\n    }\n    return count; // return the\
    \ count\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmprnrgfke1: /tmp/tmprnrgfke1.cpp:23: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto &v : arr) {\n        if (v > 0) {\n            ans += 1;\n     \
    \       long digits = v;\n            for (int i = 1; i < 9; i++) {\n        \
    \        digits *= 10;\n                if (digits > 0 && digits % 10 == 0)\n\
    \                    ans += 1;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpfezb3aas: /tmp/tmpfezb3aas.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // write your code\
    \ in here.\n    long sum=0;\n    int neg=0;\n    for (auto &it : arr){\n     \
    \   if (it<0){\n            neg++;\n            it=-it;\n        }\n        sum+=it;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpahdu7g64: /tmp/tmpahdu7g64.cpp:26: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::stack<long long>\
    \ st;\n    long long s = 0;\n    for (auto &elem : arr)\n        if (elem > 0)\n\
    \            if (st.size() == 0)\n                s = elem;\n            else\
    \ {\n                long long t = st.top();\n                st.pop();\n    \
    \            s += t;\n            }\n            else\n                s += elem;\n\
    \    long long cnt = 0;\n    while (!st.empty())\n        cnt += st.top();\n \
    \   return cnt;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmphaj62jlw: /tmp/tmphaj62jlw.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    // Write your code\
    \ here\n    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxq076dir: /tmp/tmpxq076dir.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::stack<long>\
    \ sum;\n    for (auto x : arr) {\n        long sum = 0;\n        while (x > 0)\
    \ {\n            sum += x % 10;\n            x /= 10;\n        }\n        sum.push(sum);\n\
    \    }\n    long ans = 0;\n    while (!sum.empty()) {\n        ans += sum.top();\n\
    \        sum.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9tqse1d3.cpp: In function \u2018long int count_nums(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9tqse1d3.cpp:18:13: error: request for member \u2018push\u2019\
    \ in \u2018sum\u2019, which is of non-class type \u2018long int\u2019\n   18 |\
    \         sum.push(sum);\n      |             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (auto& num : arr) {\n        if (sum == 0)\n            sum += num;\n\
    \        else {\n            assert(num >= 0);\n            if (num > 0)\n   \
    \             sum += (sum % 10) + (num % 10);\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp03s1zcyz: /tmp/tmp03s1zcyz.cpp:16: long int count_nums(std::vector<long\
    \ int>): Assertion `num >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    std::sort(arr.begin(),\
    \ arr.end());\n    long sum = 0;\n    for (long i : arr) {\n        if ((i % 10)\
    \ > 0) sum += (i % 10);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmppe864720: /tmp/tmppe864720.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  // Your code goes here\n\
    \  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n\
    \  }\n  long num = arr.back();\n  long digit = 0;\n  while (sum >= 10) {\n   \
    \ sum += num % 10;\n    num /= 10;\n    digit++;\n  }\n  if (sum < 10) {\n   \
    \ sum += num;\n  }\n  if (sum < 0) {\n    sum *= -1;\n    digit--;\n  }\n  return\
    \ digit;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long result = 0;\n\
    \    for(auto& elem : arr) {\n        if(elem < 0) elem *= -1;\n        result\
    \ += (long)std::log10((double)elem);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpcgpmvkjr: /tmp/tmpcgpmvkjr.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long ans = 0;\n \
    \   int neg = 1;\n    for (auto it : arr) {\n        int sign = it < 0 ? -1 :\
    \ it;\n        if (sign == 1) {\n            ans++;\n        }\n        else if\
    \ (sign == -1) {\n            ans -= neg;\n            neg = 1;\n        }\n \
    \       else {\n            ans += sign;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpbci26gc7: /tmp/tmpbci26gc7.cpp:31: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long n = arr.size();\n\
    \    long sum = 0;\n    for (long i = 0; i < n; ++i) {\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1, 1, 2, -2, 3,\
    \ 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1, 6, 9, -6, 0,\
    \ 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100, 98, -7,\
    \ 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34, -45,\
    \ -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkds3_r1r: /tmp/tmpkds3_r1r.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 0}))) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    long s = 0;\n   \
    \ for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 0) {\n       \
    \     s += arr[i];\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n    assert(candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1,\
    \ 100, 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0,\
    \ 1}))) == (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
  stdout: ''
  stderr: "tmpekelaitx: /tmp/tmpekelaitx.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n  long ans = 0;\n  for\
    \ (int i = 1; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] + arr[i-1]\
    \ >= 0) {\n      ans++;\n      ans += arr[i] - arr[i-1];\n    }\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpg4m5m57n: /tmp/tmpg4m5m57n.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 1, 2, -2, 3, 4, 5}))) == (6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1,\
    \ 1, 2]) == 3\nlong count_nums(std::vector<long> arr) {\n    if (arr.size() ==\
    \ 0)\n        return 0;\n    long ans = 0;\n    for (long i = 0; i < (long long)arr.size();\
    \ i++) {\n        long sum_of_digits = 0;\n        while (arr[i] > 0) {\n    \
    \        sum_of_digits += arr[i] % 10;\n            arr[i] /= 10;\n        }\n\
    \        if (sum_of_digits > 0) {\n            ans += 1;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n\
    \    assert(candidate((std::vector<long>({1, 6, 9, -6, 0, 1, 5}))) == (5));\n\
    \    assert(candidate((std::vector<long>({1, 100, 98, -7, 1, -1}))) == (4));\n\
    \    assert(candidate((std::vector<long>({12, 23, 34, -45, -56, 0}))) == (5));\n\
    \    assert(candidate((std::vector<long>({0, 1}))) == (1));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpp7ot7yax: /tmp/tmpp7ot7yax.cpp:33: int main(): Assertion `candidate((std::vector<long>({12,\
    \ 23, 34, -45, -56, 0}))) == (5)' failed.\n"
  exit_code: -6
  status: Exception
